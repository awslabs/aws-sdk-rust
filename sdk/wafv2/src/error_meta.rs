// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>WAF couldn’t perform the operation because your resource is being used by another resource or it’s associated with another resource. </p>
    WafAssociatedItemException(crate::error::WafAssociatedItemException),
    /// <p>The operation failed because you are inspecting the web request body, headers, or cookies without specifying how to handle oversize components. Rules that inspect the body must either provide an <code>OversizeHandling</code> configuration or they must be preceded by a <code>SizeConstraintStatement</code> that blocks the body content from being too large. Rules that inspect the headers or cookies must provide an <code>OversizeHandling</code> configuration. </p>
    /// <p>Provide the handling configuration and retry your operation.</p>
    /// <p>Alternately, you can suppress this warning by adding the following tag to the resource that you provide to this operation: <code>Tag</code> (key:<code>WAF:OversizeFieldsHandlingConstraintOptOut</code>, value:<code>true</code>).</p>
    WafConfigurationWarningException(crate::error::WafConfigurationWarningException),
    /// <p>WAF couldn’t perform the operation because the resource that you tried to save is a duplicate of an existing one.</p>
    WafDuplicateItemException(crate::error::WafDuplicateItemException),
    /// <p>The operation failed because the specified version for the managed rule group has expired. You can retrieve the available versions for the managed rule group by calling <code>ListAvailableManagedRuleGroupVersions</code>.</p>
    WafExpiredManagedRuleGroupVersionException(
        crate::error::WafExpiredManagedRuleGroupVersionException,
    ),
    /// <p>Your request is valid, but WAF couldn’t perform the operation because of a system problem. Retry your request. </p>
    WafInternalErrorException(crate::error::WafInternalErrorException),
    /// <p>The operation isn't valid. </p>
    WafInvalidOperationException(crate::error::WafInvalidOperationException),
    /// <p>The operation failed because WAF didn't recognize a parameter in the request. For example: </p>
    /// <ul>
    /// <li> <p>You specified a parameter name or value that isn't valid.</p> </li>
    /// <li> <p>Your nested statement isn't valid. You might have tried to nest a statement that can’t be nested. </p> </li>
    /// <li> <p>You tried to update a <code>WebACL</code> with a <code>DefaultAction</code> that isn't among the types available at <code>DefaultAction</code>.</p> </li>
    /// <li> <p>Your request references an ARN that is malformed, or corresponds to a resource with which a web ACL can't be associated.</p> </li>
    /// </ul>
    WafInvalidParameterException(crate::error::WafInvalidParameterException),
    /// <p>The operation failed because the specified policy isn't in the proper format. </p>
    /// <p>The policy specifications must conform to the following:</p>
    /// <ul>
    /// <li> <p>The policy must be composed using IAM Policy version 2012-10-17 or version 2015-01-01.</p> </li>
    /// <li> <p>The policy must include specifications for <code>Effect</code>, <code>Action</code>, and <code>Principal</code>.</p> </li>
    /// <li> <p> <code>Effect</code> must specify <code>Allow</code>.</p> </li>
    /// <li> <p> <code>Action</code> must specify <code>wafv2:CreateWebACL</code>, <code>wafv2:UpdateWebACL</code>, and <code>wafv2:PutFirewallManagerRuleGroups</code> and may optionally specify <code>wafv2:GetRuleGroup</code>. WAF rejects any extra actions or wildcard actions in the policy.</p> </li>
    /// <li> <p>The policy must not include a <code>Resource</code> parameter.</p> </li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html">IAM Policies</a>. </p>
    WafInvalidPermissionPolicyException(crate::error::WafInvalidPermissionPolicyException),
    /// <p>WAF couldn’t perform the operation because the resource that you requested isn’t valid. Check the resource, and try again.</p>
    WafInvalidResourceException(crate::error::WafInvalidResourceException),
    /// <p>WAF couldn’t perform the operation because you exceeded your resource limit. For example, the maximum number of <code>WebACL</code> objects that you can create for an Amazon Web Services account. For more information, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/limits.html">WAF quotas</a> in the <i>WAF Developer Guide</i>.</p>
    WafLimitsExceededException(crate::error::WafLimitsExceededException),
    /// <p>The operation failed because you don't have the permissions that your logging configuration requires. For information, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/logging.html">Logging web ACL traffic information</a> in the <i>WAF Developer Guide</i>.</p>
    WafLogDestinationPermissionIssueException(
        crate::error::WafLogDestinationPermissionIssueException,
    ),
    /// <p>WAF couldn’t perform the operation because your resource doesn't exist. If you've just created a resource that you're using in this operation, you might just need to wait a few minutes. It can take from a few seconds to a number of minutes for changes to propagate. </p>
    WafNonexistentItemException(crate::error::WafNonexistentItemException),
    /// <p>WAF couldn’t save your changes because you tried to update or delete a resource that has changed since you last retrieved it. Get the resource again, make any changes you need to make to the new copy, and retry your operation. </p>
    WafOptimisticLockException(crate::error::WafOptimisticLockException),
    /// <p>WAF is not able to access the service linked role. This can be caused by a previous <code>PutLoggingConfiguration</code> request, which can lock the service linked role for about 20 seconds. Please try your request again. The service linked role can also be locked by a previous <code>DeleteServiceLinkedRole</code> request, which can lock the role for 15 minutes or more. If you recently made a call to <code>DeleteServiceLinkedRole</code>, wait at least 15 minutes and try the request again. If you receive this same exception again, you will have to wait additional time until the role is unlocked.</p>
    WafServiceLinkedRoleErrorException(crate::error::WafServiceLinkedRoleErrorException),
    /// <p>You tried to use a managed rule group that's available by subscription, but you aren't subscribed to it yet. </p>
    WafSubscriptionNotFoundException(crate::error::WafSubscriptionNotFoundException),
    /// <p>An error occurred during the tagging operation. Retry your request.</p>
    WafTagOperationException(crate::error::WafTagOperationException),
    /// <p>WAF couldn’t perform your tagging operation because of an internal error. Retry your request.</p>
    WafTagOperationInternalErrorException(crate::error::WafTagOperationInternalErrorException),
    /// <p>WAF couldn’t retrieve a resource that you specified for this operation. If you've just created a resource that you're using in this operation, you might just need to wait a few minutes. It can take from a few seconds to a number of minutes for changes to propagate. Verify the resources that you are specifying in your request parameters and then retry the operation.</p>
    WafUnavailableEntityException(crate::error::WafUnavailableEntityException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::WafAssociatedItemException(inner) => inner.fmt(f),
            Error::WafConfigurationWarningException(inner) => inner.fmt(f),
            Error::WafDuplicateItemException(inner) => inner.fmt(f),
            Error::WafExpiredManagedRuleGroupVersionException(inner) => inner.fmt(f),
            Error::WafInternalErrorException(inner) => inner.fmt(f),
            Error::WafInvalidOperationException(inner) => inner.fmt(f),
            Error::WafInvalidParameterException(inner) => inner.fmt(f),
            Error::WafInvalidPermissionPolicyException(inner) => inner.fmt(f),
            Error::WafInvalidResourceException(inner) => inner.fmt(f),
            Error::WafLimitsExceededException(inner) => inner.fmt(f),
            Error::WafLogDestinationPermissionIssueException(inner) => inner.fmt(f),
            Error::WafNonexistentItemException(inner) => inner.fmt(f),
            Error::WafOptimisticLockException(inner) => inner.fmt(f),
            Error::WafServiceLinkedRoleErrorException(inner) => inner.fmt(f),
            Error::WafSubscriptionNotFoundException(inner) => inner.fmt(f),
            Error::WafTagOperationException(inner) => inner.fmt(f),
            Error::WafTagOperationInternalErrorException(inner) => inner.fmt(f),
            Error::WafUnavailableEntityException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociateWebACLError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AssociateWebACLError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateWebACLError> for Error {
    fn from(err: crate::error::AssociateWebACLError) -> Self {
        match err {
            crate::error::AssociateWebACLError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::AssociateWebACLError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::AssociateWebACLError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::AssociateWebACLError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::AssociateWebACLError::WafUnavailableEntityException(inner) => {
                Error::WafUnavailableEntityException(inner)
            }
            crate::error::AssociateWebACLError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CheckCapacityError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CheckCapacityError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CheckCapacityError> for Error {
    fn from(err: crate::error::CheckCapacityError) -> Self {
        match err {
            crate::error::CheckCapacityError::WafExpiredManagedRuleGroupVersionException(inner) => {
                Error::WafExpiredManagedRuleGroupVersionException(inner)
            }
            crate::error::CheckCapacityError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::CheckCapacityError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::CheckCapacityError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::CheckCapacityError::WafInvalidResourceException(inner) => {
                Error::WafInvalidResourceException(inner)
            }
            crate::error::CheckCapacityError::WafLimitsExceededException(inner) => {
                Error::WafLimitsExceededException(inner)
            }
            crate::error::CheckCapacityError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::CheckCapacityError::WafSubscriptionNotFoundException(inner) => {
                Error::WafSubscriptionNotFoundException(inner)
            }
            crate::error::CheckCapacityError::WafUnavailableEntityException(inner) => {
                Error::WafUnavailableEntityException(inner)
            }
            crate::error::CheckCapacityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateIPSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateIPSetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateIPSetError> for Error {
    fn from(err: crate::error::CreateIPSetError) -> Self {
        match err {
            crate::error::CreateIPSetError::WafDuplicateItemException(inner) => {
                Error::WafDuplicateItemException(inner)
            }
            crate::error::CreateIPSetError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::CreateIPSetError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::CreateIPSetError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::CreateIPSetError::WafLimitsExceededException(inner) => {
                Error::WafLimitsExceededException(inner)
            }
            crate::error::CreateIPSetError::WafOptimisticLockException(inner) => {
                Error::WafOptimisticLockException(inner)
            }
            crate::error::CreateIPSetError::WafTagOperationException(inner) => {
                Error::WafTagOperationException(inner)
            }
            crate::error::CreateIPSetError::WafTagOperationInternalErrorException(inner) => {
                Error::WafTagOperationInternalErrorException(inner)
            }
            crate::error::CreateIPSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateRegexPatternSetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateRegexPatternSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateRegexPatternSetError> for Error {
    fn from(err: crate::error::CreateRegexPatternSetError) -> Self {
        match err {
            crate::error::CreateRegexPatternSetError::WafDuplicateItemException(inner) => {
                Error::WafDuplicateItemException(inner)
            }
            crate::error::CreateRegexPatternSetError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::CreateRegexPatternSetError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::CreateRegexPatternSetError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::CreateRegexPatternSetError::WafLimitsExceededException(inner) => {
                Error::WafLimitsExceededException(inner)
            }
            crate::error::CreateRegexPatternSetError::WafOptimisticLockException(inner) => {
                Error::WafOptimisticLockException(inner)
            }
            crate::error::CreateRegexPatternSetError::WafTagOperationException(inner) => {
                Error::WafTagOperationException(inner)
            }
            crate::error::CreateRegexPatternSetError::WafTagOperationInternalErrorException(
                inner,
            ) => Error::WafTagOperationInternalErrorException(inner),
            crate::error::CreateRegexPatternSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateRuleGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateRuleGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateRuleGroupError> for Error {
    fn from(err: crate::error::CreateRuleGroupError) -> Self {
        match err {
            crate::error::CreateRuleGroupError::WafDuplicateItemException(inner) => {
                Error::WafDuplicateItemException(inner)
            }
            crate::error::CreateRuleGroupError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::CreateRuleGroupError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::CreateRuleGroupError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::CreateRuleGroupError::WafLimitsExceededException(inner) => {
                Error::WafLimitsExceededException(inner)
            }
            crate::error::CreateRuleGroupError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::CreateRuleGroupError::WafOptimisticLockException(inner) => {
                Error::WafOptimisticLockException(inner)
            }
            crate::error::CreateRuleGroupError::WafSubscriptionNotFoundException(inner) => {
                Error::WafSubscriptionNotFoundException(inner)
            }
            crate::error::CreateRuleGroupError::WafTagOperationException(inner) => {
                Error::WafTagOperationException(inner)
            }
            crate::error::CreateRuleGroupError::WafTagOperationInternalErrorException(inner) => {
                Error::WafTagOperationInternalErrorException(inner)
            }
            crate::error::CreateRuleGroupError::WafUnavailableEntityException(inner) => {
                Error::WafUnavailableEntityException(inner)
            }
            crate::error::CreateRuleGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateWebACLError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateWebACLError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateWebACLError> for Error {
    fn from(err: crate::error::CreateWebACLError) -> Self {
        match err {
            crate::error::CreateWebACLError::WafConfigurationWarningException(inner) => {
                Error::WafConfigurationWarningException(inner)
            }
            crate::error::CreateWebACLError::WafDuplicateItemException(inner) => {
                Error::WafDuplicateItemException(inner)
            }
            crate::error::CreateWebACLError::WafExpiredManagedRuleGroupVersionException(inner) => {
                Error::WafExpiredManagedRuleGroupVersionException(inner)
            }
            crate::error::CreateWebACLError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::CreateWebACLError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::CreateWebACLError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::CreateWebACLError::WafInvalidResourceException(inner) => {
                Error::WafInvalidResourceException(inner)
            }
            crate::error::CreateWebACLError::WafLimitsExceededException(inner) => {
                Error::WafLimitsExceededException(inner)
            }
            crate::error::CreateWebACLError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::CreateWebACLError::WafOptimisticLockException(inner) => {
                Error::WafOptimisticLockException(inner)
            }
            crate::error::CreateWebACLError::WafSubscriptionNotFoundException(inner) => {
                Error::WafSubscriptionNotFoundException(inner)
            }
            crate::error::CreateWebACLError::WafTagOperationException(inner) => {
                Error::WafTagOperationException(inner)
            }
            crate::error::CreateWebACLError::WafTagOperationInternalErrorException(inner) => {
                Error::WafTagOperationInternalErrorException(inner)
            }
            crate::error::CreateWebACLError::WafUnavailableEntityException(inner) => {
                Error::WafUnavailableEntityException(inner)
            }
            crate::error::CreateWebACLError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DeleteFirewallManagerRuleGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteFirewallManagerRuleGroupsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteFirewallManagerRuleGroupsError> for Error {
    fn from(err: crate::error::DeleteFirewallManagerRuleGroupsError) -> Self {
        match err {
            crate::error::DeleteFirewallManagerRuleGroupsError::WafInternalErrorException(
                inner,
            ) => Error::WafInternalErrorException(inner),
            crate::error::DeleteFirewallManagerRuleGroupsError::WafInvalidOperationException(
                inner,
            ) => Error::WafInvalidOperationException(inner),
            crate::error::DeleteFirewallManagerRuleGroupsError::WafInvalidParameterException(
                inner,
            ) => Error::WafInvalidParameterException(inner),
            crate::error::DeleteFirewallManagerRuleGroupsError::WafNonexistentItemException(
                inner,
            ) => Error::WafNonexistentItemException(inner),
            crate::error::DeleteFirewallManagerRuleGroupsError::WafOptimisticLockException(
                inner,
            ) => Error::WafOptimisticLockException(inner),
            crate::error::DeleteFirewallManagerRuleGroupsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteIPSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteIPSetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteIPSetError> for Error {
    fn from(err: crate::error::DeleteIPSetError) -> Self {
        match err {
            crate::error::DeleteIPSetError::WafAssociatedItemException(inner) => {
                Error::WafAssociatedItemException(inner)
            }
            crate::error::DeleteIPSetError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::DeleteIPSetError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::DeleteIPSetError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::DeleteIPSetError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::DeleteIPSetError::WafOptimisticLockException(inner) => {
                Error::WafOptimisticLockException(inner)
            }
            crate::error::DeleteIPSetError::WafTagOperationException(inner) => {
                Error::WafTagOperationException(inner)
            }
            crate::error::DeleteIPSetError::WafTagOperationInternalErrorException(inner) => {
                Error::WafTagOperationInternalErrorException(inner)
            }
            crate::error::DeleteIPSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteLoggingConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteLoggingConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteLoggingConfigurationError> for Error {
    fn from(err: crate::error::DeleteLoggingConfigurationError) -> Self {
        match err {
            crate::error::DeleteLoggingConfigurationError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::DeleteLoggingConfigurationError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::DeleteLoggingConfigurationError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::DeleteLoggingConfigurationError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::DeleteLoggingConfigurationError::WafOptimisticLockException(inner) => {
                Error::WafOptimisticLockException(inner)
            }
            crate::error::DeleteLoggingConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeletePermissionPolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeletePermissionPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeletePermissionPolicyError> for Error {
    fn from(err: crate::error::DeletePermissionPolicyError) -> Self {
        match err {
            crate::error::DeletePermissionPolicyError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::DeletePermissionPolicyError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::DeletePermissionPolicyError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::DeletePermissionPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteRegexPatternSetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteRegexPatternSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteRegexPatternSetError> for Error {
    fn from(err: crate::error::DeleteRegexPatternSetError) -> Self {
        match err {
            crate::error::DeleteRegexPatternSetError::WafAssociatedItemException(inner) => {
                Error::WafAssociatedItemException(inner)
            }
            crate::error::DeleteRegexPatternSetError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::DeleteRegexPatternSetError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::DeleteRegexPatternSetError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::DeleteRegexPatternSetError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::DeleteRegexPatternSetError::WafOptimisticLockException(inner) => {
                Error::WafOptimisticLockException(inner)
            }
            crate::error::DeleteRegexPatternSetError::WafTagOperationException(inner) => {
                Error::WafTagOperationException(inner)
            }
            crate::error::DeleteRegexPatternSetError::WafTagOperationInternalErrorException(
                inner,
            ) => Error::WafTagOperationInternalErrorException(inner),
            crate::error::DeleteRegexPatternSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteRuleGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteRuleGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteRuleGroupError> for Error {
    fn from(err: crate::error::DeleteRuleGroupError) -> Self {
        match err {
            crate::error::DeleteRuleGroupError::WafAssociatedItemException(inner) => {
                Error::WafAssociatedItemException(inner)
            }
            crate::error::DeleteRuleGroupError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::DeleteRuleGroupError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::DeleteRuleGroupError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::DeleteRuleGroupError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::DeleteRuleGroupError::WafOptimisticLockException(inner) => {
                Error::WafOptimisticLockException(inner)
            }
            crate::error::DeleteRuleGroupError::WafTagOperationException(inner) => {
                Error::WafTagOperationException(inner)
            }
            crate::error::DeleteRuleGroupError::WafTagOperationInternalErrorException(inner) => {
                Error::WafTagOperationInternalErrorException(inner)
            }
            crate::error::DeleteRuleGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteWebACLError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteWebACLError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteWebACLError> for Error {
    fn from(err: crate::error::DeleteWebACLError) -> Self {
        match err {
            crate::error::DeleteWebACLError::WafAssociatedItemException(inner) => {
                Error::WafAssociatedItemException(inner)
            }
            crate::error::DeleteWebACLError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::DeleteWebACLError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::DeleteWebACLError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::DeleteWebACLError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::DeleteWebACLError::WafOptimisticLockException(inner) => {
                Error::WafOptimisticLockException(inner)
            }
            crate::error::DeleteWebACLError::WafTagOperationException(inner) => {
                Error::WafTagOperationException(inner)
            }
            crate::error::DeleteWebACLError::WafTagOperationInternalErrorException(inner) => {
                Error::WafTagOperationInternalErrorException(inner)
            }
            crate::error::DeleteWebACLError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeManagedRuleGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeManagedRuleGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeManagedRuleGroupError> for Error {
    fn from(err: crate::error::DescribeManagedRuleGroupError) -> Self {
        match err {
            crate::error::DescribeManagedRuleGroupError::WafExpiredManagedRuleGroupVersionException(inner) => Error::WafExpiredManagedRuleGroupVersionException(inner),
            crate::error::DescribeManagedRuleGroupError::WafInternalErrorException(inner) => Error::WafInternalErrorException(inner),
            crate::error::DescribeManagedRuleGroupError::WafInvalidOperationException(inner) => Error::WafInvalidOperationException(inner),
            crate::error::DescribeManagedRuleGroupError::WafInvalidParameterException(inner) => Error::WafInvalidParameterException(inner),
            crate::error::DescribeManagedRuleGroupError::WafInvalidResourceException(inner) => Error::WafInvalidResourceException(inner),
            crate::error::DescribeManagedRuleGroupError::WafNonexistentItemException(inner) => Error::WafNonexistentItemException(inner),
            crate::error::DescribeManagedRuleGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisassociateWebACLError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DisassociateWebACLError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateWebACLError> for Error {
    fn from(err: crate::error::DisassociateWebACLError) -> Self {
        match err {
            crate::error::DisassociateWebACLError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::DisassociateWebACLError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::DisassociateWebACLError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::DisassociateWebACLError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::DisassociateWebACLError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GenerateMobileSdkReleaseUrlError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GenerateMobileSdkReleaseUrlError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GenerateMobileSdkReleaseUrlError> for Error {
    fn from(err: crate::error::GenerateMobileSdkReleaseUrlError) -> Self {
        match err {
            crate::error::GenerateMobileSdkReleaseUrlError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::GenerateMobileSdkReleaseUrlError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::GenerateMobileSdkReleaseUrlError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::GenerateMobileSdkReleaseUrlError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::GenerateMobileSdkReleaseUrlError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetIPSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetIPSetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetIPSetError> for Error {
    fn from(err: crate::error::GetIPSetError) -> Self {
        match err {
            crate::error::GetIPSetError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::GetIPSetError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::GetIPSetError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::GetIPSetError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::GetIPSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetLoggingConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetLoggingConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetLoggingConfigurationError> for Error {
    fn from(err: crate::error::GetLoggingConfigurationError) -> Self {
        match err {
            crate::error::GetLoggingConfigurationError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::GetLoggingConfigurationError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::GetLoggingConfigurationError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::GetLoggingConfigurationError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::GetLoggingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetManagedRuleSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetManagedRuleSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetManagedRuleSetError> for Error {
    fn from(err: crate::error::GetManagedRuleSetError) -> Self {
        match err {
            crate::error::GetManagedRuleSetError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::GetManagedRuleSetError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::GetManagedRuleSetError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::GetManagedRuleSetError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::GetManagedRuleSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetMobileSdkReleaseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetMobileSdkReleaseError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetMobileSdkReleaseError> for Error {
    fn from(err: crate::error::GetMobileSdkReleaseError) -> Self {
        match err {
            crate::error::GetMobileSdkReleaseError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::GetMobileSdkReleaseError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::GetMobileSdkReleaseError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::GetMobileSdkReleaseError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::GetMobileSdkReleaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetPermissionPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetPermissionPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetPermissionPolicyError> for Error {
    fn from(err: crate::error::GetPermissionPolicyError) -> Self {
        match err {
            crate::error::GetPermissionPolicyError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::GetPermissionPolicyError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::GetPermissionPolicyError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::GetPermissionPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::GetRateBasedStatementManagedKeysError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetRateBasedStatementManagedKeysError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRateBasedStatementManagedKeysError> for Error {
    fn from(err: crate::error::GetRateBasedStatementManagedKeysError) -> Self {
        match err {
            crate::error::GetRateBasedStatementManagedKeysError::WafInternalErrorException(
                inner,
            ) => Error::WafInternalErrorException(inner),
            crate::error::GetRateBasedStatementManagedKeysError::WafInvalidOperationException(
                inner,
            ) => Error::WafInvalidOperationException(inner),
            crate::error::GetRateBasedStatementManagedKeysError::WafInvalidParameterException(
                inner,
            ) => Error::WafInvalidParameterException(inner),
            crate::error::GetRateBasedStatementManagedKeysError::WafNonexistentItemException(
                inner,
            ) => Error::WafNonexistentItemException(inner),
            crate::error::GetRateBasedStatementManagedKeysError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRegexPatternSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetRegexPatternSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRegexPatternSetError> for Error {
    fn from(err: crate::error::GetRegexPatternSetError) -> Self {
        match err {
            crate::error::GetRegexPatternSetError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::GetRegexPatternSetError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::GetRegexPatternSetError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::GetRegexPatternSetError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::GetRegexPatternSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRuleGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetRuleGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRuleGroupError> for Error {
    fn from(err: crate::error::GetRuleGroupError) -> Self {
        match err {
            crate::error::GetRuleGroupError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::GetRuleGroupError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::GetRuleGroupError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::GetRuleGroupError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::GetRuleGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSampledRequestsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetSampledRequestsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSampledRequestsError> for Error {
    fn from(err: crate::error::GetSampledRequestsError) -> Self {
        match err {
            crate::error::GetSampledRequestsError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::GetSampledRequestsError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::GetSampledRequestsError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::GetSampledRequestsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetWebACLError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetWebACLError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetWebACLError> for Error {
    fn from(err: crate::error::GetWebACLError) -> Self {
        match err {
            crate::error::GetWebACLError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::GetWebACLError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::GetWebACLError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::GetWebACLError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::GetWebACLError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetWebACLForResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetWebACLForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetWebACLForResourceError> for Error {
    fn from(err: crate::error::GetWebACLForResourceError) -> Self {
        match err {
            crate::error::GetWebACLForResourceError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::GetWebACLForResourceError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::GetWebACLForResourceError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::GetWebACLForResourceError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::GetWebACLForResourceError::WafUnavailableEntityException(inner) => {
                Error::WafUnavailableEntityException(inner)
            }
            crate::error::GetWebACLForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ListAvailableManagedRuleGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListAvailableManagedRuleGroupsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAvailableManagedRuleGroupsError> for Error {
    fn from(err: crate::error::ListAvailableManagedRuleGroupsError) -> Self {
        match err {
            crate::error::ListAvailableManagedRuleGroupsError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::ListAvailableManagedRuleGroupsError::WafInvalidOperationException(
                inner,
            ) => Error::WafInvalidOperationException(inner),
            crate::error::ListAvailableManagedRuleGroupsError::WafInvalidParameterException(
                inner,
            ) => Error::WafInvalidParameterException(inner),
            crate::error::ListAvailableManagedRuleGroupsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::ListAvailableManagedRuleGroupVersionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListAvailableManagedRuleGroupVersionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAvailableManagedRuleGroupVersionsError> for Error {
    fn from(err: crate::error::ListAvailableManagedRuleGroupVersionsError) -> Self {
        match err {
            crate::error::ListAvailableManagedRuleGroupVersionsError::WafInternalErrorException(inner) => Error::WafInternalErrorException(inner),
            crate::error::ListAvailableManagedRuleGroupVersionsError::WafInvalidOperationException(inner) => Error::WafInvalidOperationException(inner),
            crate::error::ListAvailableManagedRuleGroupVersionsError::WafInvalidParameterException(inner) => Error::WafInvalidParameterException(inner),
            crate::error::ListAvailableManagedRuleGroupVersionsError::WafNonexistentItemException(inner) => Error::WafNonexistentItemException(inner),
            crate::error::ListAvailableManagedRuleGroupVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListIPSetsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListIPSetsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListIPSetsError> for Error {
    fn from(err: crate::error::ListIPSetsError) -> Self {
        match err {
            crate::error::ListIPSetsError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::ListIPSetsError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::ListIPSetsError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::ListIPSetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListLoggingConfigurationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListLoggingConfigurationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListLoggingConfigurationsError> for Error {
    fn from(err: crate::error::ListLoggingConfigurationsError) -> Self {
        match err {
            crate::error::ListLoggingConfigurationsError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::ListLoggingConfigurationsError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::ListLoggingConfigurationsError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::ListLoggingConfigurationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListManagedRuleSetsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListManagedRuleSetsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListManagedRuleSetsError> for Error {
    fn from(err: crate::error::ListManagedRuleSetsError) -> Self {
        match err {
            crate::error::ListManagedRuleSetsError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::ListManagedRuleSetsError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::ListManagedRuleSetsError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::ListManagedRuleSetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListMobileSdkReleasesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListMobileSdkReleasesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListMobileSdkReleasesError> for Error {
    fn from(err: crate::error::ListMobileSdkReleasesError) -> Self {
        match err {
            crate::error::ListMobileSdkReleasesError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::ListMobileSdkReleasesError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::ListMobileSdkReleasesError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::ListMobileSdkReleasesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListRegexPatternSetsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListRegexPatternSetsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListRegexPatternSetsError> for Error {
    fn from(err: crate::error::ListRegexPatternSetsError) -> Self {
        match err {
            crate::error::ListRegexPatternSetsError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::ListRegexPatternSetsError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::ListRegexPatternSetsError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::ListRegexPatternSetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListResourcesForWebACLError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListResourcesForWebACLError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListResourcesForWebACLError> for Error {
    fn from(err: crate::error::ListResourcesForWebACLError) -> Self {
        match err {
            crate::error::ListResourcesForWebACLError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::ListResourcesForWebACLError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::ListResourcesForWebACLError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::ListResourcesForWebACLError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::ListResourcesForWebACLError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListRuleGroupsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListRuleGroupsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListRuleGroupsError> for Error {
    fn from(err: crate::error::ListRuleGroupsError) -> Self {
        match err {
            crate::error::ListRuleGroupsError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::ListRuleGroupsError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::ListRuleGroupsError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::ListRuleGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::ListTagsForResourceError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::ListTagsForResourceError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::ListTagsForResourceError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::ListTagsForResourceError::WafTagOperationException(inner) => {
                Error::WafTagOperationException(inner)
            }
            crate::error::ListTagsForResourceError::WafTagOperationInternalErrorException(
                inner,
            ) => Error::WafTagOperationInternalErrorException(inner),
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListWebACLsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListWebACLsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListWebACLsError> for Error {
    fn from(err: crate::error::ListWebACLsError) -> Self {
        match err {
            crate::error::ListWebACLsError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::ListWebACLsError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::ListWebACLsError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::ListWebACLsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutLoggingConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutLoggingConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutLoggingConfigurationError> for Error {
    fn from(err: crate::error::PutLoggingConfigurationError) -> Self {
        match err {
            crate::error::PutLoggingConfigurationError::WafInternalErrorException(inner) => Error::WafInternalErrorException(inner),
            crate::error::PutLoggingConfigurationError::WafInvalidOperationException(inner) => Error::WafInvalidOperationException(inner),
            crate::error::PutLoggingConfigurationError::WafInvalidParameterException(inner) => Error::WafInvalidParameterException(inner),
            crate::error::PutLoggingConfigurationError::WafLimitsExceededException(inner) => Error::WafLimitsExceededException(inner),
            crate::error::PutLoggingConfigurationError::WafLogDestinationPermissionIssueException(inner) => Error::WafLogDestinationPermissionIssueException(inner),
            crate::error::PutLoggingConfigurationError::WafNonexistentItemException(inner) => Error::WafNonexistentItemException(inner),
            crate::error::PutLoggingConfigurationError::WafOptimisticLockException(inner) => Error::WafOptimisticLockException(inner),
            crate::error::PutLoggingConfigurationError::WafServiceLinkedRoleErrorException(inner) => Error::WafServiceLinkedRoleErrorException(inner),
            crate::error::PutLoggingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutManagedRuleSetVersionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutManagedRuleSetVersionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutManagedRuleSetVersionsError> for Error {
    fn from(err: crate::error::PutManagedRuleSetVersionsError) -> Self {
        match err {
            crate::error::PutManagedRuleSetVersionsError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::PutManagedRuleSetVersionsError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::PutManagedRuleSetVersionsError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::PutManagedRuleSetVersionsError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::PutManagedRuleSetVersionsError::WafOptimisticLockException(inner) => {
                Error::WafOptimisticLockException(inner)
            }
            crate::error::PutManagedRuleSetVersionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutPermissionPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutPermissionPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutPermissionPolicyError> for Error {
    fn from(err: crate::error::PutPermissionPolicyError) -> Self {
        match err {
            crate::error::PutPermissionPolicyError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::PutPermissionPolicyError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::PutPermissionPolicyError::WafInvalidPermissionPolicyException(inner) => {
                Error::WafInvalidPermissionPolicyException(inner)
            }
            crate::error::PutPermissionPolicyError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::PutPermissionPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::TagResourceError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::TagResourceError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::TagResourceError::WafLimitsExceededException(inner) => {
                Error::WafLimitsExceededException(inner)
            }
            crate::error::TagResourceError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::TagResourceError::WafTagOperationException(inner) => {
                Error::WafTagOperationException(inner)
            }
            crate::error::TagResourceError::WafTagOperationInternalErrorException(inner) => {
                Error::WafTagOperationInternalErrorException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::UntagResourceError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::UntagResourceError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::UntagResourceError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::UntagResourceError::WafTagOperationException(inner) => {
                Error::WafTagOperationException(inner)
            }
            crate::error::UntagResourceError::WafTagOperationInternalErrorException(inner) => {
                Error::WafTagOperationInternalErrorException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateIPSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateIPSetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateIPSetError> for Error {
    fn from(err: crate::error::UpdateIPSetError) -> Self {
        match err {
            crate::error::UpdateIPSetError::WafDuplicateItemException(inner) => {
                Error::WafDuplicateItemException(inner)
            }
            crate::error::UpdateIPSetError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::UpdateIPSetError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::UpdateIPSetError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::UpdateIPSetError::WafLimitsExceededException(inner) => {
                Error::WafLimitsExceededException(inner)
            }
            crate::error::UpdateIPSetError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::UpdateIPSetError::WafOptimisticLockException(inner) => {
                Error::WafOptimisticLockException(inner)
            }
            crate::error::UpdateIPSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::UpdateManagedRuleSetVersionExpiryDateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateManagedRuleSetVersionExpiryDateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateManagedRuleSetVersionExpiryDateError> for Error {
    fn from(err: crate::error::UpdateManagedRuleSetVersionExpiryDateError) -> Self {
        match err {
            crate::error::UpdateManagedRuleSetVersionExpiryDateError::WafInternalErrorException(inner) => Error::WafInternalErrorException(inner),
            crate::error::UpdateManagedRuleSetVersionExpiryDateError::WafInvalidOperationException(inner) => Error::WafInvalidOperationException(inner),
            crate::error::UpdateManagedRuleSetVersionExpiryDateError::WafInvalidParameterException(inner) => Error::WafInvalidParameterException(inner),
            crate::error::UpdateManagedRuleSetVersionExpiryDateError::WafNonexistentItemException(inner) => Error::WafNonexistentItemException(inner),
            crate::error::UpdateManagedRuleSetVersionExpiryDateError::WafOptimisticLockException(inner) => Error::WafOptimisticLockException(inner),
            crate::error::UpdateManagedRuleSetVersionExpiryDateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateRegexPatternSetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateRegexPatternSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateRegexPatternSetError> for Error {
    fn from(err: crate::error::UpdateRegexPatternSetError) -> Self {
        match err {
            crate::error::UpdateRegexPatternSetError::WafDuplicateItemException(inner) => {
                Error::WafDuplicateItemException(inner)
            }
            crate::error::UpdateRegexPatternSetError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::UpdateRegexPatternSetError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::UpdateRegexPatternSetError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::UpdateRegexPatternSetError::WafLimitsExceededException(inner) => {
                Error::WafLimitsExceededException(inner)
            }
            crate::error::UpdateRegexPatternSetError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::UpdateRegexPatternSetError::WafOptimisticLockException(inner) => {
                Error::WafOptimisticLockException(inner)
            }
            crate::error::UpdateRegexPatternSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateRuleGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateRuleGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateRuleGroupError> for Error {
    fn from(err: crate::error::UpdateRuleGroupError) -> Self {
        match err {
            crate::error::UpdateRuleGroupError::WafConfigurationWarningException(inner) => {
                Error::WafConfigurationWarningException(inner)
            }
            crate::error::UpdateRuleGroupError::WafDuplicateItemException(inner) => {
                Error::WafDuplicateItemException(inner)
            }
            crate::error::UpdateRuleGroupError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::UpdateRuleGroupError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::UpdateRuleGroupError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::UpdateRuleGroupError::WafLimitsExceededException(inner) => {
                Error::WafLimitsExceededException(inner)
            }
            crate::error::UpdateRuleGroupError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::UpdateRuleGroupError::WafOptimisticLockException(inner) => {
                Error::WafOptimisticLockException(inner)
            }
            crate::error::UpdateRuleGroupError::WafSubscriptionNotFoundException(inner) => {
                Error::WafSubscriptionNotFoundException(inner)
            }
            crate::error::UpdateRuleGroupError::WafUnavailableEntityException(inner) => {
                Error::WafUnavailableEntityException(inner)
            }
            crate::error::UpdateRuleGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateWebACLError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateWebACLError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateWebACLError> for Error {
    fn from(err: crate::error::UpdateWebACLError) -> Self {
        match err {
            crate::error::UpdateWebACLError::WafConfigurationWarningException(inner) => {
                Error::WafConfigurationWarningException(inner)
            }
            crate::error::UpdateWebACLError::WafDuplicateItemException(inner) => {
                Error::WafDuplicateItemException(inner)
            }
            crate::error::UpdateWebACLError::WafExpiredManagedRuleGroupVersionException(inner) => {
                Error::WafExpiredManagedRuleGroupVersionException(inner)
            }
            crate::error::UpdateWebACLError::WafInternalErrorException(inner) => {
                Error::WafInternalErrorException(inner)
            }
            crate::error::UpdateWebACLError::WafInvalidOperationException(inner) => {
                Error::WafInvalidOperationException(inner)
            }
            crate::error::UpdateWebACLError::WafInvalidParameterException(inner) => {
                Error::WafInvalidParameterException(inner)
            }
            crate::error::UpdateWebACLError::WafInvalidResourceException(inner) => {
                Error::WafInvalidResourceException(inner)
            }
            crate::error::UpdateWebACLError::WafLimitsExceededException(inner) => {
                Error::WafLimitsExceededException(inner)
            }
            crate::error::UpdateWebACLError::WafNonexistentItemException(inner) => {
                Error::WafNonexistentItemException(inner)
            }
            crate::error::UpdateWebACLError::WafOptimisticLockException(inner) => {
                Error::WafOptimisticLockException(inner)
            }
            crate::error::UpdateWebACLError::WafSubscriptionNotFoundException(inner) => {
                Error::WafSubscriptionNotFoundException(inner)
            }
            crate::error::UpdateWebACLError::WafUnavailableEntityException(inner) => {
                Error::WafUnavailableEntityException(inner)
            }
            crate::error::UpdateWebACLError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::WafAssociatedItemException(e) => e.request_id(),
            Self::WafConfigurationWarningException(e) => e.request_id(),
            Self::WafDuplicateItemException(e) => e.request_id(),
            Self::WafExpiredManagedRuleGroupVersionException(e) => e.request_id(),
            Self::WafInternalErrorException(e) => e.request_id(),
            Self::WafInvalidOperationException(e) => e.request_id(),
            Self::WafInvalidParameterException(e) => e.request_id(),
            Self::WafInvalidPermissionPolicyException(e) => e.request_id(),
            Self::WafInvalidResourceException(e) => e.request_id(),
            Self::WafLimitsExceededException(e) => e.request_id(),
            Self::WafLogDestinationPermissionIssueException(e) => e.request_id(),
            Self::WafNonexistentItemException(e) => e.request_id(),
            Self::WafOptimisticLockException(e) => e.request_id(),
            Self::WafServiceLinkedRoleErrorException(e) => e.request_id(),
            Self::WafSubscriptionNotFoundException(e) => e.request_id(),
            Self::WafTagOperationException(e) => e.request_id(),
            Self::WafTagOperationInternalErrorException(e) => e.request_id(),
            Self::WafUnavailableEntityException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
