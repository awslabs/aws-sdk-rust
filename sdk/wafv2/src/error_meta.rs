// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    WafAssociatedItemException(crate::error::WafAssociatedItemException),
    WafDuplicateItemException(crate::error::WafDuplicateItemException),
    WafInternalErrorException(crate::error::WafInternalErrorException),
    WafInvalidOperationException(crate::error::WafInvalidOperationException),
    WafInvalidParameterException(crate::error::WafInvalidParameterException),
    WafInvalidPermissionPolicyException(crate::error::WafInvalidPermissionPolicyException),
    WafInvalidResourceException(crate::error::WafInvalidResourceException),
    WafLimitsExceededException(crate::error::WafLimitsExceededException),
    WafNonexistentItemException(crate::error::WafNonexistentItemException),
    WafOptimisticLockException(crate::error::WafOptimisticLockException),
    WafServiceLinkedRoleErrorException(crate::error::WafServiceLinkedRoleErrorException),
    WafSubscriptionNotFoundException(crate::error::WafSubscriptionNotFoundException),
    WafTagOperationException(crate::error::WafTagOperationException),
    WafTagOperationInternalErrorException(crate::error::WafTagOperationInternalErrorException),
    WafUnavailableEntityException(crate::error::WafUnavailableEntityException),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::WafAssociatedItemException(inner) => inner.fmt(f),
            Error::WafDuplicateItemException(inner) => inner.fmt(f),
            Error::WafInternalErrorException(inner) => inner.fmt(f),
            Error::WafInvalidOperationException(inner) => inner.fmt(f),
            Error::WafInvalidParameterException(inner) => inner.fmt(f),
            Error::WafInvalidPermissionPolicyException(inner) => inner.fmt(f),
            Error::WafInvalidResourceException(inner) => inner.fmt(f),
            Error::WafLimitsExceededException(inner) => inner.fmt(f),
            Error::WafNonexistentItemException(inner) => inner.fmt(f),
            Error::WafOptimisticLockException(inner) => inner.fmt(f),
            Error::WafServiceLinkedRoleErrorException(inner) => inner.fmt(f),
            Error::WafSubscriptionNotFoundException(inner) => inner.fmt(f),
            Error::WafTagOperationException(inner) => inner.fmt(f),
            Error::WafTagOperationInternalErrorException(inner) => inner.fmt(f),
            Error::WafUnavailableEntityException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AssociateWebACLError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AssociateWebACLError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AssociateWebACLErrorKind::WafInternalErrorException(inner) => {
                    Error::WafInternalErrorException(inner)
                }
                crate::error::AssociateWebACLErrorKind::WafInvalidOperationException(inner) => {
                    Error::WafInvalidOperationException(inner)
                }
                crate::error::AssociateWebACLErrorKind::WafInvalidParameterException(inner) => {
                    Error::WafInvalidParameterException(inner)
                }
                crate::error::AssociateWebACLErrorKind::WafNonexistentItemException(inner) => {
                    Error::WafNonexistentItemException(inner)
                }
                crate::error::AssociateWebACLErrorKind::WafUnavailableEntityException(inner) => {
                    Error::WafUnavailableEntityException(inner)
                }
                crate::error::AssociateWebACLErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CheckCapacityError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CheckCapacityError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CheckCapacityErrorKind::WafInternalErrorException(inner) => {
                    Error::WafInternalErrorException(inner)
                }
                crate::error::CheckCapacityErrorKind::WafInvalidParameterException(inner) => {
                    Error::WafInvalidParameterException(inner)
                }
                crate::error::CheckCapacityErrorKind::WafInvalidResourceException(inner) => {
                    Error::WafInvalidResourceException(inner)
                }
                crate::error::CheckCapacityErrorKind::WafLimitsExceededException(inner) => {
                    Error::WafLimitsExceededException(inner)
                }
                crate::error::CheckCapacityErrorKind::WafNonexistentItemException(inner) => {
                    Error::WafNonexistentItemException(inner)
                }
                crate::error::CheckCapacityErrorKind::WafSubscriptionNotFoundException(inner) => {
                    Error::WafSubscriptionNotFoundException(inner)
                }
                crate::error::CheckCapacityErrorKind::WafUnavailableEntityException(inner) => {
                    Error::WafUnavailableEntityException(inner)
                }
                crate::error::CheckCapacityErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateIPSetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateIPSetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateIPSetErrorKind::WafDuplicateItemException(inner) => {
                    Error::WafDuplicateItemException(inner)
                }
                crate::error::CreateIPSetErrorKind::WafInternalErrorException(inner) => {
                    Error::WafInternalErrorException(inner)
                }
                crate::error::CreateIPSetErrorKind::WafInvalidOperationException(inner) => {
                    Error::WafInvalidOperationException(inner)
                }
                crate::error::CreateIPSetErrorKind::WafInvalidParameterException(inner) => {
                    Error::WafInvalidParameterException(inner)
                }
                crate::error::CreateIPSetErrorKind::WafLimitsExceededException(inner) => {
                    Error::WafLimitsExceededException(inner)
                }
                crate::error::CreateIPSetErrorKind::WafOptimisticLockException(inner) => {
                    Error::WafOptimisticLockException(inner)
                }
                crate::error::CreateIPSetErrorKind::WafTagOperationException(inner) => {
                    Error::WafTagOperationException(inner)
                }
                crate::error::CreateIPSetErrorKind::WafTagOperationInternalErrorException(
                    inner,
                ) => Error::WafTagOperationInternalErrorException(inner),
                crate::error::CreateIPSetErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateRegexPatternSetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateRegexPatternSetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateRegexPatternSetErrorKind::WafDuplicateItemException(inner) => Error::WafDuplicateItemException(inner),
                crate::error::CreateRegexPatternSetErrorKind::WafInternalErrorException(inner) => Error::WafInternalErrorException(inner),
                crate::error::CreateRegexPatternSetErrorKind::WafInvalidOperationException(inner) => Error::WafInvalidOperationException(inner),
                crate::error::CreateRegexPatternSetErrorKind::WafInvalidParameterException(inner) => Error::WafInvalidParameterException(inner),
                crate::error::CreateRegexPatternSetErrorKind::WafLimitsExceededException(inner) => Error::WafLimitsExceededException(inner),
                crate::error::CreateRegexPatternSetErrorKind::WafOptimisticLockException(inner) => Error::WafOptimisticLockException(inner),
                crate::error::CreateRegexPatternSetErrorKind::WafTagOperationException(inner) => Error::WafTagOperationException(inner),
                crate::error::CreateRegexPatternSetErrorKind::WafTagOperationInternalErrorException(inner) => Error::WafTagOperationInternalErrorException(inner),
                crate::error::CreateRegexPatternSetErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateRuleGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateRuleGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateRuleGroupErrorKind::WafDuplicateItemException(inner) => {
                    Error::WafDuplicateItemException(inner)
                }
                crate::error::CreateRuleGroupErrorKind::WafInternalErrorException(inner) => {
                    Error::WafInternalErrorException(inner)
                }
                crate::error::CreateRuleGroupErrorKind::WafInvalidOperationException(inner) => {
                    Error::WafInvalidOperationException(inner)
                }
                crate::error::CreateRuleGroupErrorKind::WafInvalidParameterException(inner) => {
                    Error::WafInvalidParameterException(inner)
                }
                crate::error::CreateRuleGroupErrorKind::WafLimitsExceededException(inner) => {
                    Error::WafLimitsExceededException(inner)
                }
                crate::error::CreateRuleGroupErrorKind::WafNonexistentItemException(inner) => {
                    Error::WafNonexistentItemException(inner)
                }
                crate::error::CreateRuleGroupErrorKind::WafOptimisticLockException(inner) => {
                    Error::WafOptimisticLockException(inner)
                }
                crate::error::CreateRuleGroupErrorKind::WafSubscriptionNotFoundException(inner) => {
                    Error::WafSubscriptionNotFoundException(inner)
                }
                crate::error::CreateRuleGroupErrorKind::WafTagOperationException(inner) => {
                    Error::WafTagOperationException(inner)
                }
                crate::error::CreateRuleGroupErrorKind::WafTagOperationInternalErrorException(
                    inner,
                ) => Error::WafTagOperationInternalErrorException(inner),
                crate::error::CreateRuleGroupErrorKind::WafUnavailableEntityException(inner) => {
                    Error::WafUnavailableEntityException(inner)
                }
                crate::error::CreateRuleGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateWebACLError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateWebACLError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateWebACLErrorKind::WafDuplicateItemException(inner) => {
                    Error::WafDuplicateItemException(inner)
                }
                crate::error::CreateWebACLErrorKind::WafInternalErrorException(inner) => {
                    Error::WafInternalErrorException(inner)
                }
                crate::error::CreateWebACLErrorKind::WafInvalidOperationException(inner) => {
                    Error::WafInvalidOperationException(inner)
                }
                crate::error::CreateWebACLErrorKind::WafInvalidParameterException(inner) => {
                    Error::WafInvalidParameterException(inner)
                }
                crate::error::CreateWebACLErrorKind::WafInvalidResourceException(inner) => {
                    Error::WafInvalidResourceException(inner)
                }
                crate::error::CreateWebACLErrorKind::WafLimitsExceededException(inner) => {
                    Error::WafLimitsExceededException(inner)
                }
                crate::error::CreateWebACLErrorKind::WafNonexistentItemException(inner) => {
                    Error::WafNonexistentItemException(inner)
                }
                crate::error::CreateWebACLErrorKind::WafOptimisticLockException(inner) => {
                    Error::WafOptimisticLockException(inner)
                }
                crate::error::CreateWebACLErrorKind::WafSubscriptionNotFoundException(inner) => {
                    Error::WafSubscriptionNotFoundException(inner)
                }
                crate::error::CreateWebACLErrorKind::WafTagOperationException(inner) => {
                    Error::WafTagOperationException(inner)
                }
                crate::error::CreateWebACLErrorKind::WafTagOperationInternalErrorException(
                    inner,
                ) => Error::WafTagOperationInternalErrorException(inner),
                crate::error::CreateWebACLErrorKind::WafUnavailableEntityException(inner) => {
                    Error::WafUnavailableEntityException(inner)
                }
                crate::error::CreateWebACLErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteFirewallManagerRuleGroupsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteFirewallManagerRuleGroupsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DeleteFirewallManagerRuleGroupsErrorKind::WafInternalErrorException(inner) => Error::WafInternalErrorException(inner),
                crate::error::DeleteFirewallManagerRuleGroupsErrorKind::WafInvalidOperationException(inner) => Error::WafInvalidOperationException(inner),
                crate::error::DeleteFirewallManagerRuleGroupsErrorKind::WafInvalidParameterException(inner) => Error::WafInvalidParameterException(inner),
                crate::error::DeleteFirewallManagerRuleGroupsErrorKind::WafNonexistentItemException(inner) => Error::WafNonexistentItemException(inner),
                crate::error::DeleteFirewallManagerRuleGroupsErrorKind::WafOptimisticLockException(inner) => Error::WafOptimisticLockException(inner),
                crate::error::DeleteFirewallManagerRuleGroupsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteIPSetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteIPSetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteIPSetErrorKind::WafAssociatedItemException(inner) => {
                    Error::WafAssociatedItemException(inner)
                }
                crate::error::DeleteIPSetErrorKind::WafInternalErrorException(inner) => {
                    Error::WafInternalErrorException(inner)
                }
                crate::error::DeleteIPSetErrorKind::WafInvalidOperationException(inner) => {
                    Error::WafInvalidOperationException(inner)
                }
                crate::error::DeleteIPSetErrorKind::WafInvalidParameterException(inner) => {
                    Error::WafInvalidParameterException(inner)
                }
                crate::error::DeleteIPSetErrorKind::WafNonexistentItemException(inner) => {
                    Error::WafNonexistentItemException(inner)
                }
                crate::error::DeleteIPSetErrorKind::WafOptimisticLockException(inner) => {
                    Error::WafOptimisticLockException(inner)
                }
                crate::error::DeleteIPSetErrorKind::WafTagOperationException(inner) => {
                    Error::WafTagOperationException(inner)
                }
                crate::error::DeleteIPSetErrorKind::WafTagOperationInternalErrorException(
                    inner,
                ) => Error::WafTagOperationInternalErrorException(inner),
                crate::error::DeleteIPSetErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteLoggingConfigurationError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteLoggingConfigurationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteLoggingConfigurationErrorKind::WafInternalErrorException(
                    inner,
                ) => Error::WafInternalErrorException(inner),
                crate::error::DeleteLoggingConfigurationErrorKind::WafInvalidOperationException(
                    inner,
                ) => Error::WafInvalidOperationException(inner),
                crate::error::DeleteLoggingConfigurationErrorKind::WafInvalidParameterException(
                    inner,
                ) => Error::WafInvalidParameterException(inner),
                crate::error::DeleteLoggingConfigurationErrorKind::WafNonexistentItemException(
                    inner,
                ) => Error::WafNonexistentItemException(inner),
                crate::error::DeleteLoggingConfigurationErrorKind::WafOptimisticLockException(
                    inner,
                ) => Error::WafOptimisticLockException(inner),
                crate::error::DeleteLoggingConfigurationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeletePermissionPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeletePermissionPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeletePermissionPolicyErrorKind::WafInternalErrorException(inner) => {
                    Error::WafInternalErrorException(inner)
                }
                crate::error::DeletePermissionPolicyErrorKind::WafInvalidParameterException(
                    inner,
                ) => Error::WafInvalidParameterException(inner),
                crate::error::DeletePermissionPolicyErrorKind::WafNonexistentItemException(
                    inner,
                ) => Error::WafNonexistentItemException(inner),
                crate::error::DeletePermissionPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteRegexPatternSetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteRegexPatternSetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DeleteRegexPatternSetErrorKind::WafAssociatedItemException(inner) => Error::WafAssociatedItemException(inner),
                crate::error::DeleteRegexPatternSetErrorKind::WafInternalErrorException(inner) => Error::WafInternalErrorException(inner),
                crate::error::DeleteRegexPatternSetErrorKind::WafInvalidOperationException(inner) => Error::WafInvalidOperationException(inner),
                crate::error::DeleteRegexPatternSetErrorKind::WafInvalidParameterException(inner) => Error::WafInvalidParameterException(inner),
                crate::error::DeleteRegexPatternSetErrorKind::WafNonexistentItemException(inner) => Error::WafNonexistentItemException(inner),
                crate::error::DeleteRegexPatternSetErrorKind::WafOptimisticLockException(inner) => Error::WafOptimisticLockException(inner),
                crate::error::DeleteRegexPatternSetErrorKind::WafTagOperationException(inner) => Error::WafTagOperationException(inner),
                crate::error::DeleteRegexPatternSetErrorKind::WafTagOperationInternalErrorException(inner) => Error::WafTagOperationInternalErrorException(inner),
                crate::error::DeleteRegexPatternSetErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteRuleGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteRuleGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteRuleGroupErrorKind::WafAssociatedItemException(inner) => {
                    Error::WafAssociatedItemException(inner)
                }
                crate::error::DeleteRuleGroupErrorKind::WafInternalErrorException(inner) => {
                    Error::WafInternalErrorException(inner)
                }
                crate::error::DeleteRuleGroupErrorKind::WafInvalidOperationException(inner) => {
                    Error::WafInvalidOperationException(inner)
                }
                crate::error::DeleteRuleGroupErrorKind::WafInvalidParameterException(inner) => {
                    Error::WafInvalidParameterException(inner)
                }
                crate::error::DeleteRuleGroupErrorKind::WafNonexistentItemException(inner) => {
                    Error::WafNonexistentItemException(inner)
                }
                crate::error::DeleteRuleGroupErrorKind::WafOptimisticLockException(inner) => {
                    Error::WafOptimisticLockException(inner)
                }
                crate::error::DeleteRuleGroupErrorKind::WafTagOperationException(inner) => {
                    Error::WafTagOperationException(inner)
                }
                crate::error::DeleteRuleGroupErrorKind::WafTagOperationInternalErrorException(
                    inner,
                ) => Error::WafTagOperationInternalErrorException(inner),
                crate::error::DeleteRuleGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteWebACLError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteWebACLError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteWebACLErrorKind::WafAssociatedItemException(inner) => {
                    Error::WafAssociatedItemException(inner)
                }
                crate::error::DeleteWebACLErrorKind::WafInternalErrorException(inner) => {
                    Error::WafInternalErrorException(inner)
                }
                crate::error::DeleteWebACLErrorKind::WafInvalidOperationException(inner) => {
                    Error::WafInvalidOperationException(inner)
                }
                crate::error::DeleteWebACLErrorKind::WafInvalidParameterException(inner) => {
                    Error::WafInvalidParameterException(inner)
                }
                crate::error::DeleteWebACLErrorKind::WafNonexistentItemException(inner) => {
                    Error::WafNonexistentItemException(inner)
                }
                crate::error::DeleteWebACLErrorKind::WafOptimisticLockException(inner) => {
                    Error::WafOptimisticLockException(inner)
                }
                crate::error::DeleteWebACLErrorKind::WafTagOperationException(inner) => {
                    Error::WafTagOperationException(inner)
                }
                crate::error::DeleteWebACLErrorKind::WafTagOperationInternalErrorException(
                    inner,
                ) => Error::WafTagOperationInternalErrorException(inner),
                crate::error::DeleteWebACLErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeManagedRuleGroupError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeManagedRuleGroupError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeManagedRuleGroupErrorKind::WafInternalErrorException(
                    inner,
                ) => Error::WafInternalErrorException(inner),
                crate::error::DescribeManagedRuleGroupErrorKind::WafInvalidOperationException(
                    inner,
                ) => Error::WafInvalidOperationException(inner),
                crate::error::DescribeManagedRuleGroupErrorKind::WafInvalidParameterException(
                    inner,
                ) => Error::WafInvalidParameterException(inner),
                crate::error::DescribeManagedRuleGroupErrorKind::WafInvalidResourceException(
                    inner,
                ) => Error::WafInvalidResourceException(inner),
                crate::error::DescribeManagedRuleGroupErrorKind::WafNonexistentItemException(
                    inner,
                ) => Error::WafNonexistentItemException(inner),
                crate::error::DescribeManagedRuleGroupErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DisassociateWebACLError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DisassociateWebACLError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DisassociateWebACLErrorKind::WafInternalErrorException(inner) => {
                    Error::WafInternalErrorException(inner)
                }
                crate::error::DisassociateWebACLErrorKind::WafInvalidOperationException(inner) => {
                    Error::WafInvalidOperationException(inner)
                }
                crate::error::DisassociateWebACLErrorKind::WafInvalidParameterException(inner) => {
                    Error::WafInvalidParameterException(inner)
                }
                crate::error::DisassociateWebACLErrorKind::WafNonexistentItemException(inner) => {
                    Error::WafNonexistentItemException(inner)
                }
                crate::error::DisassociateWebACLErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetIPSetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetIPSetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetIPSetErrorKind::WafInternalErrorException(inner) => {
                    Error::WafInternalErrorException(inner)
                }
                crate::error::GetIPSetErrorKind::WafInvalidOperationException(inner) => {
                    Error::WafInvalidOperationException(inner)
                }
                crate::error::GetIPSetErrorKind::WafInvalidParameterException(inner) => {
                    Error::WafInvalidParameterException(inner)
                }
                crate::error::GetIPSetErrorKind::WafNonexistentItemException(inner) => {
                    Error::WafNonexistentItemException(inner)
                }
                crate::error::GetIPSetErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetLoggingConfigurationError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetLoggingConfigurationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetLoggingConfigurationErrorKind::WafInternalErrorException(
                    inner,
                ) => Error::WafInternalErrorException(inner),
                crate::error::GetLoggingConfigurationErrorKind::WafInvalidOperationException(
                    inner,
                ) => Error::WafInvalidOperationException(inner),
                crate::error::GetLoggingConfigurationErrorKind::WafInvalidParameterException(
                    inner,
                ) => Error::WafInvalidParameterException(inner),
                crate::error::GetLoggingConfigurationErrorKind::WafNonexistentItemException(
                    inner,
                ) => Error::WafNonexistentItemException(inner),
                crate::error::GetLoggingConfigurationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetPermissionPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetPermissionPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetPermissionPolicyErrorKind::WafInternalErrorException(inner) => {
                    Error::WafInternalErrorException(inner)
                }
                crate::error::GetPermissionPolicyErrorKind::WafInvalidParameterException(inner) => {
                    Error::WafInvalidParameterException(inner)
                }
                crate::error::GetPermissionPolicyErrorKind::WafNonexistentItemException(inner) => {
                    Error::WafNonexistentItemException(inner)
                }
                crate::error::GetPermissionPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetRateBasedStatementManagedKeysError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetRateBasedStatementManagedKeysError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::GetRateBasedStatementManagedKeysErrorKind::WafInternalErrorException(inner) => Error::WafInternalErrorException(inner),
                crate::error::GetRateBasedStatementManagedKeysErrorKind::WafInvalidOperationException(inner) => Error::WafInvalidOperationException(inner),
                crate::error::GetRateBasedStatementManagedKeysErrorKind::WafInvalidParameterException(inner) => Error::WafInvalidParameterException(inner),
                crate::error::GetRateBasedStatementManagedKeysErrorKind::WafNonexistentItemException(inner) => Error::WafNonexistentItemException(inner),
                crate::error::GetRateBasedStatementManagedKeysErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetRegexPatternSetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetRegexPatternSetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetRegexPatternSetErrorKind::WafInternalErrorException(inner) => {
                    Error::WafInternalErrorException(inner)
                }
                crate::error::GetRegexPatternSetErrorKind::WafInvalidOperationException(inner) => {
                    Error::WafInvalidOperationException(inner)
                }
                crate::error::GetRegexPatternSetErrorKind::WafInvalidParameterException(inner) => {
                    Error::WafInvalidParameterException(inner)
                }
                crate::error::GetRegexPatternSetErrorKind::WafNonexistentItemException(inner) => {
                    Error::WafNonexistentItemException(inner)
                }
                crate::error::GetRegexPatternSetErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetRuleGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetRuleGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetRuleGroupErrorKind::WafInternalErrorException(inner) => {
                    Error::WafInternalErrorException(inner)
                }
                crate::error::GetRuleGroupErrorKind::WafInvalidOperationException(inner) => {
                    Error::WafInvalidOperationException(inner)
                }
                crate::error::GetRuleGroupErrorKind::WafInvalidParameterException(inner) => {
                    Error::WafInvalidParameterException(inner)
                }
                crate::error::GetRuleGroupErrorKind::WafNonexistentItemException(inner) => {
                    Error::WafNonexistentItemException(inner)
                }
                crate::error::GetRuleGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetSampledRequestsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetSampledRequestsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetSampledRequestsErrorKind::WafInternalErrorException(inner) => {
                    Error::WafInternalErrorException(inner)
                }
                crate::error::GetSampledRequestsErrorKind::WafInvalidParameterException(inner) => {
                    Error::WafInvalidParameterException(inner)
                }
                crate::error::GetSampledRequestsErrorKind::WafNonexistentItemException(inner) => {
                    Error::WafNonexistentItemException(inner)
                }
                crate::error::GetSampledRequestsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetWebACLError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetWebACLError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetWebACLErrorKind::WafInternalErrorException(inner) => {
                    Error::WafInternalErrorException(inner)
                }
                crate::error::GetWebACLErrorKind::WafInvalidOperationException(inner) => {
                    Error::WafInvalidOperationException(inner)
                }
                crate::error::GetWebACLErrorKind::WafInvalidParameterException(inner) => {
                    Error::WafInvalidParameterException(inner)
                }
                crate::error::GetWebACLErrorKind::WafNonexistentItemException(inner) => {
                    Error::WafNonexistentItemException(inner)
                }
                crate::error::GetWebACLErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetWebACLForResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetWebACLForResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetWebACLForResourceErrorKind::WafInternalErrorException(inner) => {
                    Error::WafInternalErrorException(inner)
                }
                crate::error::GetWebACLForResourceErrorKind::WafInvalidOperationException(
                    inner,
                ) => Error::WafInvalidOperationException(inner),
                crate::error::GetWebACLForResourceErrorKind::WafInvalidParameterException(
                    inner,
                ) => Error::WafInvalidParameterException(inner),
                crate::error::GetWebACLForResourceErrorKind::WafNonexistentItemException(inner) => {
                    Error::WafNonexistentItemException(inner)
                }
                crate::error::GetWebACLForResourceErrorKind::WafUnavailableEntityException(
                    inner,
                ) => Error::WafUnavailableEntityException(inner),
                crate::error::GetWebACLForResourceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListAvailableManagedRuleGroupsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListAvailableManagedRuleGroupsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ListAvailableManagedRuleGroupsErrorKind::WafInternalErrorException(inner) => Error::WafInternalErrorException(inner),
                crate::error::ListAvailableManagedRuleGroupsErrorKind::WafInvalidOperationException(inner) => Error::WafInvalidOperationException(inner),
                crate::error::ListAvailableManagedRuleGroupsErrorKind::WafInvalidParameterException(inner) => Error::WafInvalidParameterException(inner),
                crate::error::ListAvailableManagedRuleGroupsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListIPSetsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListIPSetsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListIPSetsErrorKind::WafInternalErrorException(inner) => {
                    Error::WafInternalErrorException(inner)
                }
                crate::error::ListIPSetsErrorKind::WafInvalidOperationException(inner) => {
                    Error::WafInvalidOperationException(inner)
                }
                crate::error::ListIPSetsErrorKind::WafInvalidParameterException(inner) => {
                    Error::WafInvalidParameterException(inner)
                }
                crate::error::ListIPSetsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListLoggingConfigurationsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListLoggingConfigurationsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListLoggingConfigurationsErrorKind::WafInternalErrorException(
                    inner,
                ) => Error::WafInternalErrorException(inner),
                crate::error::ListLoggingConfigurationsErrorKind::WafInvalidOperationException(
                    inner,
                ) => Error::WafInvalidOperationException(inner),
                crate::error::ListLoggingConfigurationsErrorKind::WafInvalidParameterException(
                    inner,
                ) => Error::WafInvalidParameterException(inner),
                crate::error::ListLoggingConfigurationsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListRegexPatternSetsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListRegexPatternSetsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListRegexPatternSetsErrorKind::WafInternalErrorException(inner) => {
                    Error::WafInternalErrorException(inner)
                }
                crate::error::ListRegexPatternSetsErrorKind::WafInvalidOperationException(
                    inner,
                ) => Error::WafInvalidOperationException(inner),
                crate::error::ListRegexPatternSetsErrorKind::WafInvalidParameterException(
                    inner,
                ) => Error::WafInvalidParameterException(inner),
                crate::error::ListRegexPatternSetsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListResourcesForWebACLError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListResourcesForWebACLError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListResourcesForWebACLErrorKind::WafInternalErrorException(inner) => {
                    Error::WafInternalErrorException(inner)
                }
                crate::error::ListResourcesForWebACLErrorKind::WafInvalidOperationException(
                    inner,
                ) => Error::WafInvalidOperationException(inner),
                crate::error::ListResourcesForWebACLErrorKind::WafInvalidParameterException(
                    inner,
                ) => Error::WafInvalidParameterException(inner),
                crate::error::ListResourcesForWebACLErrorKind::WafNonexistentItemException(
                    inner,
                ) => Error::WafNonexistentItemException(inner),
                crate::error::ListResourcesForWebACLErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListRuleGroupsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListRuleGroupsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListRuleGroupsErrorKind::WafInternalErrorException(inner) => {
                    Error::WafInternalErrorException(inner)
                }
                crate::error::ListRuleGroupsErrorKind::WafInvalidOperationException(inner) => {
                    Error::WafInvalidOperationException(inner)
                }
                crate::error::ListRuleGroupsErrorKind::WafInvalidParameterException(inner) => {
                    Error::WafInvalidParameterException(inner)
                }
                crate::error::ListRuleGroupsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTagsForResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTagsForResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ListTagsForResourceErrorKind::WafInternalErrorException(inner) => Error::WafInternalErrorException(inner),
                crate::error::ListTagsForResourceErrorKind::WafInvalidOperationException(inner) => Error::WafInvalidOperationException(inner),
                crate::error::ListTagsForResourceErrorKind::WafInvalidParameterException(inner) => Error::WafInvalidParameterException(inner),
                crate::error::ListTagsForResourceErrorKind::WafNonexistentItemException(inner) => Error::WafNonexistentItemException(inner),
                crate::error::ListTagsForResourceErrorKind::WafTagOperationException(inner) => Error::WafTagOperationException(inner),
                crate::error::ListTagsForResourceErrorKind::WafTagOperationInternalErrorException(inner) => Error::WafTagOperationInternalErrorException(inner),
                crate::error::ListTagsForResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListWebACLsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListWebACLsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListWebACLsErrorKind::WafInternalErrorException(inner) => {
                    Error::WafInternalErrorException(inner)
                }
                crate::error::ListWebACLsErrorKind::WafInvalidOperationException(inner) => {
                    Error::WafInvalidOperationException(inner)
                }
                crate::error::ListWebACLsErrorKind::WafInvalidParameterException(inner) => {
                    Error::WafInvalidParameterException(inner)
                }
                crate::error::ListWebACLsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutLoggingConfigurationError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::PutLoggingConfigurationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::PutLoggingConfigurationErrorKind::WafInternalErrorException(inner) => Error::WafInternalErrorException(inner),
                crate::error::PutLoggingConfigurationErrorKind::WafInvalidOperationException(inner) => Error::WafInvalidOperationException(inner),
                crate::error::PutLoggingConfigurationErrorKind::WafInvalidParameterException(inner) => Error::WafInvalidParameterException(inner),
                crate::error::PutLoggingConfigurationErrorKind::WafLimitsExceededException(inner) => Error::WafLimitsExceededException(inner),
                crate::error::PutLoggingConfigurationErrorKind::WafNonexistentItemException(inner) => Error::WafNonexistentItemException(inner),
                crate::error::PutLoggingConfigurationErrorKind::WafOptimisticLockException(inner) => Error::WafOptimisticLockException(inner),
                crate::error::PutLoggingConfigurationErrorKind::WafServiceLinkedRoleErrorException(inner) => Error::WafServiceLinkedRoleErrorException(inner),
                crate::error::PutLoggingConfigurationErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutPermissionPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutPermissionPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutPermissionPolicyErrorKind::WafInternalErrorException(inner) => {
                    Error::WafInternalErrorException(inner)
                }
                crate::error::PutPermissionPolicyErrorKind::WafInvalidParameterException(inner) => {
                    Error::WafInvalidParameterException(inner)
                }
                crate::error::PutPermissionPolicyErrorKind::WafInvalidPermissionPolicyException(
                    inner,
                ) => Error::WafInvalidPermissionPolicyException(inner),
                crate::error::PutPermissionPolicyErrorKind::WafNonexistentItemException(inner) => {
                    Error::WafNonexistentItemException(inner)
                }
                crate::error::PutPermissionPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TagResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::TagResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TagResourceErrorKind::WafInternalErrorException(inner) => {
                    Error::WafInternalErrorException(inner)
                }
                crate::error::TagResourceErrorKind::WafInvalidOperationException(inner) => {
                    Error::WafInvalidOperationException(inner)
                }
                crate::error::TagResourceErrorKind::WafInvalidParameterException(inner) => {
                    Error::WafInvalidParameterException(inner)
                }
                crate::error::TagResourceErrorKind::WafLimitsExceededException(inner) => {
                    Error::WafLimitsExceededException(inner)
                }
                crate::error::TagResourceErrorKind::WafNonexistentItemException(inner) => {
                    Error::WafNonexistentItemException(inner)
                }
                crate::error::TagResourceErrorKind::WafTagOperationException(inner) => {
                    Error::WafTagOperationException(inner)
                }
                crate::error::TagResourceErrorKind::WafTagOperationInternalErrorException(
                    inner,
                ) => Error::WafTagOperationInternalErrorException(inner),
                crate::error::TagResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UntagResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UntagResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UntagResourceErrorKind::WafInternalErrorException(inner) => {
                    Error::WafInternalErrorException(inner)
                }
                crate::error::UntagResourceErrorKind::WafInvalidOperationException(inner) => {
                    Error::WafInvalidOperationException(inner)
                }
                crate::error::UntagResourceErrorKind::WafInvalidParameterException(inner) => {
                    Error::WafInvalidParameterException(inner)
                }
                crate::error::UntagResourceErrorKind::WafNonexistentItemException(inner) => {
                    Error::WafNonexistentItemException(inner)
                }
                crate::error::UntagResourceErrorKind::WafTagOperationException(inner) => {
                    Error::WafTagOperationException(inner)
                }
                crate::error::UntagResourceErrorKind::WafTagOperationInternalErrorException(
                    inner,
                ) => Error::WafTagOperationInternalErrorException(inner),
                crate::error::UntagResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateIPSetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateIPSetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateIPSetErrorKind::WafDuplicateItemException(inner) => {
                    Error::WafDuplicateItemException(inner)
                }
                crate::error::UpdateIPSetErrorKind::WafInternalErrorException(inner) => {
                    Error::WafInternalErrorException(inner)
                }
                crate::error::UpdateIPSetErrorKind::WafInvalidOperationException(inner) => {
                    Error::WafInvalidOperationException(inner)
                }
                crate::error::UpdateIPSetErrorKind::WafInvalidParameterException(inner) => {
                    Error::WafInvalidParameterException(inner)
                }
                crate::error::UpdateIPSetErrorKind::WafLimitsExceededException(inner) => {
                    Error::WafLimitsExceededException(inner)
                }
                crate::error::UpdateIPSetErrorKind::WafNonexistentItemException(inner) => {
                    Error::WafNonexistentItemException(inner)
                }
                crate::error::UpdateIPSetErrorKind::WafOptimisticLockException(inner) => {
                    Error::WafOptimisticLockException(inner)
                }
                crate::error::UpdateIPSetErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateRegexPatternSetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateRegexPatternSetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateRegexPatternSetErrorKind::WafDuplicateItemException(inner) => {
                    Error::WafDuplicateItemException(inner)
                }
                crate::error::UpdateRegexPatternSetErrorKind::WafInternalErrorException(inner) => {
                    Error::WafInternalErrorException(inner)
                }
                crate::error::UpdateRegexPatternSetErrorKind::WafInvalidOperationException(
                    inner,
                ) => Error::WafInvalidOperationException(inner),
                crate::error::UpdateRegexPatternSetErrorKind::WafInvalidParameterException(
                    inner,
                ) => Error::WafInvalidParameterException(inner),
                crate::error::UpdateRegexPatternSetErrorKind::WafLimitsExceededException(inner) => {
                    Error::WafLimitsExceededException(inner)
                }
                crate::error::UpdateRegexPatternSetErrorKind::WafNonexistentItemException(
                    inner,
                ) => Error::WafNonexistentItemException(inner),
                crate::error::UpdateRegexPatternSetErrorKind::WafOptimisticLockException(inner) => {
                    Error::WafOptimisticLockException(inner)
                }
                crate::error::UpdateRegexPatternSetErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateRuleGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateRuleGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateRuleGroupErrorKind::WafDuplicateItemException(inner) => {
                    Error::WafDuplicateItemException(inner)
                }
                crate::error::UpdateRuleGroupErrorKind::WafInternalErrorException(inner) => {
                    Error::WafInternalErrorException(inner)
                }
                crate::error::UpdateRuleGroupErrorKind::WafInvalidOperationException(inner) => {
                    Error::WafInvalidOperationException(inner)
                }
                crate::error::UpdateRuleGroupErrorKind::WafInvalidParameterException(inner) => {
                    Error::WafInvalidParameterException(inner)
                }
                crate::error::UpdateRuleGroupErrorKind::WafLimitsExceededException(inner) => {
                    Error::WafLimitsExceededException(inner)
                }
                crate::error::UpdateRuleGroupErrorKind::WafNonexistentItemException(inner) => {
                    Error::WafNonexistentItemException(inner)
                }
                crate::error::UpdateRuleGroupErrorKind::WafOptimisticLockException(inner) => {
                    Error::WafOptimisticLockException(inner)
                }
                crate::error::UpdateRuleGroupErrorKind::WafSubscriptionNotFoundException(inner) => {
                    Error::WafSubscriptionNotFoundException(inner)
                }
                crate::error::UpdateRuleGroupErrorKind::WafUnavailableEntityException(inner) => {
                    Error::WafUnavailableEntityException(inner)
                }
                crate::error::UpdateRuleGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateWebACLError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateWebACLError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateWebACLErrorKind::WafDuplicateItemException(inner) => {
                    Error::WafDuplicateItemException(inner)
                }
                crate::error::UpdateWebACLErrorKind::WafInternalErrorException(inner) => {
                    Error::WafInternalErrorException(inner)
                }
                crate::error::UpdateWebACLErrorKind::WafInvalidOperationException(inner) => {
                    Error::WafInvalidOperationException(inner)
                }
                crate::error::UpdateWebACLErrorKind::WafInvalidParameterException(inner) => {
                    Error::WafInvalidParameterException(inner)
                }
                crate::error::UpdateWebACLErrorKind::WafInvalidResourceException(inner) => {
                    Error::WafInvalidResourceException(inner)
                }
                crate::error::UpdateWebACLErrorKind::WafLimitsExceededException(inner) => {
                    Error::WafLimitsExceededException(inner)
                }
                crate::error::UpdateWebACLErrorKind::WafNonexistentItemException(inner) => {
                    Error::WafNonexistentItemException(inner)
                }
                crate::error::UpdateWebACLErrorKind::WafOptimisticLockException(inner) => {
                    Error::WafOptimisticLockException(inner)
                }
                crate::error::UpdateWebACLErrorKind::WafSubscriptionNotFoundException(inner) => {
                    Error::WafSubscriptionNotFoundException(inner)
                }
                crate::error::UpdateWebACLErrorKind::WafUnavailableEntityException(inner) => {
                    Error::WafUnavailableEntityException(inner)
                }
                crate::error::UpdateWebACLErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
