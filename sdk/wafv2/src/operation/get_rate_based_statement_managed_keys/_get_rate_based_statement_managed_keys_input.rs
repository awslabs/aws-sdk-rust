// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetRateBasedStatementManagedKeysInput {
    /// <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. </p>
    /// <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    /// <ul>
    /// <li> <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p> </li>
    /// <li> <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p> </li>
    /// </ul>
    pub scope: ::std::option::Option<crate::types::Scope>,
    /// <p>The name of the web ACL. You cannot change the name of a web ACL after you create it.</p>
    pub web_acl_name: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier for the web ACL. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
    pub web_acl_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the rule group reference statement in your web ACL. This is required only when you have the rate-based rule nested inside a rule group. </p>
    pub rule_group_rule_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the rate-based rule to get the keys for. If you have the rule defined inside a rule group that you're using in your web ACL, also provide the name of the rule group reference statement in the request parameter <code>RuleGroupRuleName</code>.</p>
    pub rule_name: ::std::option::Option<::std::string::String>,
}
impl GetRateBasedStatementManagedKeysInput {
    /// <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. </p>
    /// <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    /// <ul>
    /// <li> <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p> </li>
    /// <li> <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p> </li>
    /// </ul>
    pub fn scope(&self) -> ::std::option::Option<&crate::types::Scope> {
        self.scope.as_ref()
    }
    /// <p>The name of the web ACL. You cannot change the name of a web ACL after you create it.</p>
    pub fn web_acl_name(&self) -> ::std::option::Option<&str> {
        self.web_acl_name.as_deref()
    }
    /// <p>The unique identifier for the web ACL. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
    pub fn web_acl_id(&self) -> ::std::option::Option<&str> {
        self.web_acl_id.as_deref()
    }
    /// <p>The name of the rule group reference statement in your web ACL. This is required only when you have the rate-based rule nested inside a rule group. </p>
    pub fn rule_group_rule_name(&self) -> ::std::option::Option<&str> {
        self.rule_group_rule_name.as_deref()
    }
    /// <p>The name of the rate-based rule to get the keys for. If you have the rule defined inside a rule group that you're using in your web ACL, also provide the name of the rule group reference statement in the request parameter <code>RuleGroupRuleName</code>.</p>
    pub fn rule_name(&self) -> ::std::option::Option<&str> {
        self.rule_name.as_deref()
    }
}
impl GetRateBasedStatementManagedKeysInput {
    /// Creates a new builder-style object to manufacture [`GetRateBasedStatementManagedKeysInput`](crate::operation::get_rate_based_statement_managed_keys::GetRateBasedStatementManagedKeysInput).
    pub fn builder() -> crate::operation::get_rate_based_statement_managed_keys::builders::GetRateBasedStatementManagedKeysInputBuilder {
        crate::operation::get_rate_based_statement_managed_keys::builders::GetRateBasedStatementManagedKeysInputBuilder::default()
    }
}

/// A builder for [`GetRateBasedStatementManagedKeysInput`](crate::operation::get_rate_based_statement_managed_keys::GetRateBasedStatementManagedKeysInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetRateBasedStatementManagedKeysInputBuilder {
    pub(crate) scope: ::std::option::Option<crate::types::Scope>,
    pub(crate) web_acl_name: ::std::option::Option<::std::string::String>,
    pub(crate) web_acl_id: ::std::option::Option<::std::string::String>,
    pub(crate) rule_group_rule_name: ::std::option::Option<::std::string::String>,
    pub(crate) rule_name: ::std::option::Option<::std::string::String>,
}
impl GetRateBasedStatementManagedKeysInputBuilder {
    /// <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. </p>
    /// <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    /// <ul>
    /// <li> <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p> </li>
    /// <li> <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p> </li>
    /// </ul>
    /// This field is required.
    pub fn scope(mut self, input: crate::types::Scope) -> Self {
        self.scope = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. </p>
    /// <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    /// <ul>
    /// <li> <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p> </li>
    /// <li> <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p> </li>
    /// </ul>
    pub fn set_scope(mut self, input: ::std::option::Option<crate::types::Scope>) -> Self {
        self.scope = input;
        self
    }
    /// <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. </p>
    /// <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    /// <ul>
    /// <li> <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p> </li>
    /// <li> <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p> </li>
    /// </ul>
    pub fn get_scope(&self) -> &::std::option::Option<crate::types::Scope> {
        &self.scope
    }
    /// <p>The name of the web ACL. You cannot change the name of a web ACL after you create it.</p>
    /// This field is required.
    pub fn web_acl_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.web_acl_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the web ACL. You cannot change the name of a web ACL after you create it.</p>
    pub fn set_web_acl_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.web_acl_name = input;
        self
    }
    /// <p>The name of the web ACL. You cannot change the name of a web ACL after you create it.</p>
    pub fn get_web_acl_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.web_acl_name
    }
    /// <p>The unique identifier for the web ACL. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
    /// This field is required.
    pub fn web_acl_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.web_acl_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the web ACL. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
    pub fn set_web_acl_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.web_acl_id = input;
        self
    }
    /// <p>The unique identifier for the web ACL. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
    pub fn get_web_acl_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.web_acl_id
    }
    /// <p>The name of the rule group reference statement in your web ACL. This is required only when you have the rate-based rule nested inside a rule group. </p>
    pub fn rule_group_rule_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_group_rule_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the rule group reference statement in your web ACL. This is required only when you have the rate-based rule nested inside a rule group. </p>
    pub fn set_rule_group_rule_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_group_rule_name = input;
        self
    }
    /// <p>The name of the rule group reference statement in your web ACL. This is required only when you have the rate-based rule nested inside a rule group. </p>
    pub fn get_rule_group_rule_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_group_rule_name
    }
    /// <p>The name of the rate-based rule to get the keys for. If you have the rule defined inside a rule group that you're using in your web ACL, also provide the name of the rule group reference statement in the request parameter <code>RuleGroupRuleName</code>.</p>
    /// This field is required.
    pub fn rule_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the rate-based rule to get the keys for. If you have the rule defined inside a rule group that you're using in your web ACL, also provide the name of the rule group reference statement in the request parameter <code>RuleGroupRuleName</code>.</p>
    pub fn set_rule_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_name = input;
        self
    }
    /// <p>The name of the rate-based rule to get the keys for. If you have the rule defined inside a rule group that you're using in your web ACL, also provide the name of the rule group reference statement in the request parameter <code>RuleGroupRuleName</code>.</p>
    pub fn get_rule_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_name
    }
    /// Consumes the builder and constructs a [`GetRateBasedStatementManagedKeysInput`](crate::operation::get_rate_based_statement_managed_keys::GetRateBasedStatementManagedKeysInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_rate_based_statement_managed_keys::GetRateBasedStatementManagedKeysInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::get_rate_based_statement_managed_keys::GetRateBasedStatementManagedKeysInput {
                scope: self.scope,
                web_acl_name: self.web_acl_name,
                web_acl_id: self.web_acl_id,
                rule_group_rule_name: self.rule_group_rule_name,
                rule_name: self.rule_name,
            },
        )
    }
}
