// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_resources_for_web_acl::_list_resources_for_web_acl_output::ListResourcesForWebAclOutputBuilder;

pub use crate::operation::list_resources_for_web_acl::_list_resources_for_web_acl_input::ListResourcesForWebAclInputBuilder;

/// Fluent builder constructing a request to `ListResourcesForWebACL`.
///
/// <p>Retrieves an array of the Amazon Resource Names (ARNs) for the regional resources that are associated with the specified web ACL. If you want the list of Amazon CloudFront resources, use the CloudFront call <code>ListDistributionsByWebACLId</code>. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListResourcesForWebACLFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner:
        crate::operation::list_resources_for_web_acl::builders::ListResourcesForWebAclInputBuilder,
}
impl ListResourcesForWebACLFluentBuilder {
    /// Creates a new `ListResourcesForWebACL`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::list_resources_for_web_acl::ListResourcesForWebACL,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::list_resources_for_web_acl::ListResourcesForWebACLError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::list_resources_for_web_acl::ListResourcesForWebAclOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::list_resources_for_web_acl::ListResourcesForWebACLError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the web ACL.</p>
    pub fn web_acl_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.web_acl_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the web ACL.</p>
    pub fn set_web_acl_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_web_acl_arn(input);
        self
    }
    /// <p>Used for web ACLs that are scoped for regional applications. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, a Amazon Cognito user pool, or an App Runner service. </p> <note>
    /// <p>If you don't provide a resource type, the call uses the resource type <code>APPLICATION_LOAD_BALANCER</code>. </p>
    /// </note>
    /// <p>Default: <code>APPLICATION_LOAD_BALANCER</code> </p>
    pub fn resource_type(mut self, input: crate::types::ResourceType) -> Self {
        self.inner = self.inner.resource_type(input);
        self
    }
    /// <p>Used for web ACLs that are scoped for regional applications. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, a Amazon Cognito user pool, or an App Runner service. </p> <note>
    /// <p>If you don't provide a resource type, the call uses the resource type <code>APPLICATION_LOAD_BALANCER</code>. </p>
    /// </note>
    /// <p>Default: <code>APPLICATION_LOAD_BALANCER</code> </p>
    pub fn set_resource_type(
        mut self,
        input: std::option::Option<crate::types::ResourceType>,
    ) -> Self {
        self.inner = self.inner.set_resource_type(input);
        self
    }
}
