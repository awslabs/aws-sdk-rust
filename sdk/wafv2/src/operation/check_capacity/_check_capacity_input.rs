// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CheckCapacityInput {
    /// <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, or an Amazon Cognito user pool. </p>
    /// <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    /// <ul>
    /// <li> <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p> </li>
    /// <li> <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub scope: std::option::Option<crate::types::Scope>,
    /// <p>An array of <code>Rule</code> that you're configuring to use in a rule group or web ACL. </p>
    #[doc(hidden)]
    pub rules: std::option::Option<std::vec::Vec<crate::types::Rule>>,
}
impl CheckCapacityInput {
    /// <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, or an Amazon Cognito user pool. </p>
    /// <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    /// <ul>
    /// <li> <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p> </li>
    /// <li> <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p> </li>
    /// </ul>
    pub fn scope(&self) -> std::option::Option<&crate::types::Scope> {
        self.scope.as_ref()
    }
    /// <p>An array of <code>Rule</code> that you're configuring to use in a rule group or web ACL. </p>
    pub fn rules(&self) -> std::option::Option<&[crate::types::Rule]> {
        self.rules.as_deref()
    }
}
impl CheckCapacityInput {
    /// Creates a new builder-style object to manufacture [`CheckCapacityInput`](crate::operation::check_capacity::CheckCapacityInput).
    pub fn builder() -> crate::operation::check_capacity::builders::CheckCapacityInputBuilder {
        crate::operation::check_capacity::builders::CheckCapacityInputBuilder::default()
    }
}

/// A builder for [`CheckCapacityInput`](crate::operation::check_capacity::CheckCapacityInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CheckCapacityInputBuilder {
    pub(crate) scope: std::option::Option<crate::types::Scope>,
    pub(crate) rules: std::option::Option<std::vec::Vec<crate::types::Rule>>,
}
impl CheckCapacityInputBuilder {
    /// <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, or an Amazon Cognito user pool. </p>
    /// <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    /// <ul>
    /// <li> <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p> </li>
    /// <li> <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p> </li>
    /// </ul>
    pub fn scope(mut self, input: crate::types::Scope) -> Self {
        self.scope = Some(input);
        self
    }
    /// <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, or an Amazon Cognito user pool. </p>
    /// <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    /// <ul>
    /// <li> <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p> </li>
    /// <li> <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p> </li>
    /// </ul>
    pub fn set_scope(mut self, input: std::option::Option<crate::types::Scope>) -> Self {
        self.scope = input;
        self
    }
    /// Appends an item to `rules`.
    ///
    /// To override the contents of this collection use [`set_rules`](Self::set_rules).
    ///
    /// <p>An array of <code>Rule</code> that you're configuring to use in a rule group or web ACL. </p>
    pub fn rules(mut self, input: crate::types::Rule) -> Self {
        let mut v = self.rules.unwrap_or_default();
        v.push(input);
        self.rules = Some(v);
        self
    }
    /// <p>An array of <code>Rule</code> that you're configuring to use in a rule group or web ACL. </p>
    pub fn set_rules(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Rule>>,
    ) -> Self {
        self.rules = input;
        self
    }
    /// Consumes the builder and constructs a [`CheckCapacityInput`](crate::operation::check_capacity::CheckCapacityInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::check_capacity::CheckCapacityInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::check_capacity::CheckCapacityInput {
            scope: self.scope,
            rules: self.rules,
        })
    }
}
