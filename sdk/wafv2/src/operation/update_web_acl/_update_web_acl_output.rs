// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateWebAclOutput {
    /// <p>A token used for optimistic locking. WAF returns this token to your <code>update</code> requests. You use <code>NextLockToken</code> in the same manner as you use <code>LockToken</code>. </p>
    #[doc(hidden)]
    pub next_lock_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateWebAclOutput {
    /// <p>A token used for optimistic locking. WAF returns this token to your <code>update</code> requests. You use <code>NextLockToken</code> in the same manner as you use <code>LockToken</code>. </p>
    pub fn next_lock_token(&self) -> std::option::Option<&str> {
        self.next_lock_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateWebAclOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateWebAclOutput {
    /// Creates a new builder-style object to manufacture [`UpdateWebAclOutput`](crate::operation::update_web_acl::UpdateWebAclOutput).
    pub fn builder() -> crate::operation::update_web_acl::builders::UpdateWebAclOutputBuilder {
        crate::operation::update_web_acl::builders::UpdateWebAclOutputBuilder::default()
    }
}

/// A builder for [`UpdateWebAclOutput`](crate::operation::update_web_acl::UpdateWebAclOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateWebAclOutputBuilder {
    pub(crate) next_lock_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateWebAclOutputBuilder {
    /// <p>A token used for optimistic locking. WAF returns this token to your <code>update</code> requests. You use <code>NextLockToken</code> in the same manner as you use <code>LockToken</code>. </p>
    pub fn next_lock_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_lock_token = Some(input.into());
        self
    }
    /// <p>A token used for optimistic locking. WAF returns this token to your <code>update</code> requests. You use <code>NextLockToken</code> in the same manner as you use <code>LockToken</code>. </p>
    pub fn set_next_lock_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_lock_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateWebAclOutput`](crate::operation::update_web_acl::UpdateWebAclOutput).
    pub fn build(self) -> crate::operation::update_web_acl::UpdateWebAclOutput {
        crate::operation::update_web_acl::UpdateWebAclOutput {
            next_lock_token: self.next_lock_token,
            _request_id: self._request_id,
        }
    }
}
