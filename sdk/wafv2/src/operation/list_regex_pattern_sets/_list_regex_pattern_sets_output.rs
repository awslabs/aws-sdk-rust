// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListRegexPatternSetsOutput {
    /// <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a <code>NextMarker</code> value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
    #[doc(hidden)]
    pub next_marker: std::option::Option<std::string::String>,
    /// <p></p>
    #[doc(hidden)]
    pub regex_pattern_sets:
        std::option::Option<std::vec::Vec<crate::types::RegexPatternSetSummary>>,
    _request_id: Option<String>,
}
impl ListRegexPatternSetsOutput {
    /// <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a <code>NextMarker</code> value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
    pub fn next_marker(&self) -> std::option::Option<&str> {
        self.next_marker.as_deref()
    }
    /// <p></p>
    pub fn regex_pattern_sets(
        &self,
    ) -> std::option::Option<&[crate::types::RegexPatternSetSummary]> {
        self.regex_pattern_sets.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListRegexPatternSetsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListRegexPatternSetsOutput {
    /// Creates a new builder-style object to manufacture [`ListRegexPatternSetsOutput`](crate::operation::list_regex_pattern_sets::ListRegexPatternSetsOutput).
    pub fn builder(
    ) -> crate::operation::list_regex_pattern_sets::builders::ListRegexPatternSetsOutputBuilder
    {
        crate::operation::list_regex_pattern_sets::builders::ListRegexPatternSetsOutputBuilder::default()
    }
}

/// A builder for [`ListRegexPatternSetsOutput`](crate::operation::list_regex_pattern_sets::ListRegexPatternSetsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListRegexPatternSetsOutputBuilder {
    pub(crate) next_marker: std::option::Option<std::string::String>,
    pub(crate) regex_pattern_sets:
        std::option::Option<std::vec::Vec<crate::types::RegexPatternSetSummary>>,
    _request_id: Option<String>,
}
impl ListRegexPatternSetsOutputBuilder {
    /// <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a <code>NextMarker</code> value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
    pub fn next_marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_marker = Some(input.into());
        self
    }
    /// <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a <code>NextMarker</code> value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
    pub fn set_next_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_marker = input;
        self
    }
    /// Appends an item to `regex_pattern_sets`.
    ///
    /// To override the contents of this collection use [`set_regex_pattern_sets`](Self::set_regex_pattern_sets).
    ///
    /// <p></p>
    pub fn regex_pattern_sets(mut self, input: crate::types::RegexPatternSetSummary) -> Self {
        let mut v = self.regex_pattern_sets.unwrap_or_default();
        v.push(input);
        self.regex_pattern_sets = Some(v);
        self
    }
    /// <p></p>
    pub fn set_regex_pattern_sets(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RegexPatternSetSummary>>,
    ) -> Self {
        self.regex_pattern_sets = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListRegexPatternSetsOutput`](crate::operation::list_regex_pattern_sets::ListRegexPatternSetsOutput).
    pub fn build(self) -> crate::operation::list_regex_pattern_sets::ListRegexPatternSetsOutput {
        crate::operation::list_regex_pattern_sets::ListRegexPatternSetsOutput {
            next_marker: self.next_marker,
            regex_pattern_sets: self.regex_pattern_sets,
            _request_id: self._request_id,
        }
    }
}
