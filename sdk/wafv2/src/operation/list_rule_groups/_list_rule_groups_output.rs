// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListRuleGroupsOutput {
    /// <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a <code>NextMarker</code> value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
    #[doc(hidden)]
    pub next_marker: std::option::Option<std::string::String>,
    /// <p></p>
    #[doc(hidden)]
    pub rule_groups: std::option::Option<std::vec::Vec<crate::types::RuleGroupSummary>>,
    _request_id: Option<String>,
}
impl ListRuleGroupsOutput {
    /// <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a <code>NextMarker</code> value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
    pub fn next_marker(&self) -> std::option::Option<&str> {
        self.next_marker.as_deref()
    }
    /// <p></p>
    pub fn rule_groups(&self) -> std::option::Option<&[crate::types::RuleGroupSummary]> {
        self.rule_groups.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListRuleGroupsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListRuleGroupsOutput {
    /// Creates a new builder-style object to manufacture [`ListRuleGroupsOutput`](crate::operation::list_rule_groups::ListRuleGroupsOutput).
    pub fn builder() -> crate::operation::list_rule_groups::builders::ListRuleGroupsOutputBuilder {
        crate::operation::list_rule_groups::builders::ListRuleGroupsOutputBuilder::default()
    }
}

/// A builder for [`ListRuleGroupsOutput`](crate::operation::list_rule_groups::ListRuleGroupsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListRuleGroupsOutputBuilder {
    pub(crate) next_marker: std::option::Option<std::string::String>,
    pub(crate) rule_groups: std::option::Option<std::vec::Vec<crate::types::RuleGroupSummary>>,
    _request_id: Option<String>,
}
impl ListRuleGroupsOutputBuilder {
    /// <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a <code>NextMarker</code> value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
    pub fn next_marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_marker = Some(input.into());
        self
    }
    /// <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a <code>NextMarker</code> value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
    pub fn set_next_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_marker = input;
        self
    }
    /// Appends an item to `rule_groups`.
    ///
    /// To override the contents of this collection use [`set_rule_groups`](Self::set_rule_groups).
    ///
    /// <p></p>
    pub fn rule_groups(mut self, input: crate::types::RuleGroupSummary) -> Self {
        let mut v = self.rule_groups.unwrap_or_default();
        v.push(input);
        self.rule_groups = Some(v);
        self
    }
    /// <p></p>
    pub fn set_rule_groups(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RuleGroupSummary>>,
    ) -> Self {
        self.rule_groups = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListRuleGroupsOutput`](crate::operation::list_rule_groups::ListRuleGroupsOutput).
    pub fn build(self) -> crate::operation::list_rule_groups::ListRuleGroupsOutput {
        crate::operation::list_rule_groups::ListRuleGroupsOutput {
            next_marker: self.next_marker,
            rule_groups: self.rule_groups,
            _request_id: self._request_id,
        }
    }
}
