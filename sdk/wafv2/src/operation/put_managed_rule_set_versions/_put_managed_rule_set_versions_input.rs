// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutManagedRuleSetVersionsInput {
    /// <p>The name of the managed rule set. You use this, along with the rule set ID, to identify the rule set.</p>
    /// <p>This name is assigned to the corresponding managed rule group, which your customers can access and use. </p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, or an Amazon Cognito user pool. </p>
    /// <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    /// <ul>
    /// <li> <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p> </li>
    /// <li> <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub scope: std::option::Option<crate::types::Scope>,
    /// <p>A unique identifier for the managed rule set. The ID is returned in the responses to commands like <code>list</code>. You provide it to operations like <code>get</code> and <code>update</code>.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>A token used for optimistic locking. WAF returns a token to your <code>get</code> and <code>list</code> requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like <code>update</code> and <code>delete</code>. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another <code>get</code>, and use the new token returned by that operation. </p>
    #[doc(hidden)]
    pub lock_token: std::option::Option<std::string::String>,
    /// <p>The version of the named managed rule group that you'd like your customers to choose, from among your version offerings. </p>
    #[doc(hidden)]
    pub recommended_version: std::option::Option<std::string::String>,
    /// <p>The versions of the named managed rule group that you want to offer to your customers. </p>
    #[doc(hidden)]
    pub versions_to_publish: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::VersionToPublish>,
    >,
}
impl PutManagedRuleSetVersionsInput {
    /// <p>The name of the managed rule set. You use this, along with the rule set ID, to identify the rule set.</p>
    /// <p>This name is assigned to the corresponding managed rule group, which your customers can access and use. </p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, or an Amazon Cognito user pool. </p>
    /// <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    /// <ul>
    /// <li> <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p> </li>
    /// <li> <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p> </li>
    /// </ul>
    pub fn scope(&self) -> std::option::Option<&crate::types::Scope> {
        self.scope.as_ref()
    }
    /// <p>A unique identifier for the managed rule set. The ID is returned in the responses to commands like <code>list</code>. You provide it to operations like <code>get</code> and <code>update</code>.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>A token used for optimistic locking. WAF returns a token to your <code>get</code> and <code>list</code> requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like <code>update</code> and <code>delete</code>. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another <code>get</code>, and use the new token returned by that operation. </p>
    pub fn lock_token(&self) -> std::option::Option<&str> {
        self.lock_token.as_deref()
    }
    /// <p>The version of the named managed rule group that you'd like your customers to choose, from among your version offerings. </p>
    pub fn recommended_version(&self) -> std::option::Option<&str> {
        self.recommended_version.as_deref()
    }
    /// <p>The versions of the named managed rule group that you want to offer to your customers. </p>
    pub fn versions_to_publish(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::types::VersionToPublish>,
    > {
        self.versions_to_publish.as_ref()
    }
}
impl PutManagedRuleSetVersionsInput {
    /// Creates a new builder-style object to manufacture [`PutManagedRuleSetVersionsInput`](crate::operation::put_managed_rule_set_versions::PutManagedRuleSetVersionsInput).
    pub fn builder() -> crate::operation::put_managed_rule_set_versions::builders::PutManagedRuleSetVersionsInputBuilder{
        crate::operation::put_managed_rule_set_versions::builders::PutManagedRuleSetVersionsInputBuilder::default()
    }
}

/// A builder for [`PutManagedRuleSetVersionsInput`](crate::operation::put_managed_rule_set_versions::PutManagedRuleSetVersionsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PutManagedRuleSetVersionsInputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) scope: std::option::Option<crate::types::Scope>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) lock_token: std::option::Option<std::string::String>,
    pub(crate) recommended_version: std::option::Option<std::string::String>,
    pub(crate) versions_to_publish: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::VersionToPublish>,
    >,
}
impl PutManagedRuleSetVersionsInputBuilder {
    /// <p>The name of the managed rule set. You use this, along with the rule set ID, to identify the rule set.</p>
    /// <p>This name is assigned to the corresponding managed rule group, which your customers can access and use. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the managed rule set. You use this, along with the rule set ID, to identify the rule set.</p>
    /// <p>This name is assigned to the corresponding managed rule group, which your customers can access and use. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, or an Amazon Cognito user pool. </p>
    /// <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    /// <ul>
    /// <li> <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p> </li>
    /// <li> <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p> </li>
    /// </ul>
    pub fn scope(mut self, input: crate::types::Scope) -> Self {
        self.scope = Some(input);
        self
    }
    /// <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, or an Amazon Cognito user pool. </p>
    /// <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    /// <ul>
    /// <li> <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p> </li>
    /// <li> <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p> </li>
    /// </ul>
    pub fn set_scope(mut self, input: std::option::Option<crate::types::Scope>) -> Self {
        self.scope = input;
        self
    }
    /// <p>A unique identifier for the managed rule set. The ID is returned in the responses to commands like <code>list</code>. You provide it to operations like <code>get</code> and <code>update</code>.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>A unique identifier for the managed rule set. The ID is returned in the responses to commands like <code>list</code>. You provide it to operations like <code>get</code> and <code>update</code>.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>A token used for optimistic locking. WAF returns a token to your <code>get</code> and <code>list</code> requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like <code>update</code> and <code>delete</code>. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another <code>get</code>, and use the new token returned by that operation. </p>
    pub fn lock_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.lock_token = Some(input.into());
        self
    }
    /// <p>A token used for optimistic locking. WAF returns a token to your <code>get</code> and <code>list</code> requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like <code>update</code> and <code>delete</code>. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another <code>get</code>, and use the new token returned by that operation. </p>
    pub fn set_lock_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.lock_token = input;
        self
    }
    /// <p>The version of the named managed rule group that you'd like your customers to choose, from among your version offerings. </p>
    pub fn recommended_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.recommended_version = Some(input.into());
        self
    }
    /// <p>The version of the named managed rule group that you'd like your customers to choose, from among your version offerings. </p>
    pub fn set_recommended_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.recommended_version = input;
        self
    }
    /// Adds a key-value pair to `versions_to_publish`.
    ///
    /// To override the contents of this collection use [`set_versions_to_publish`](Self::set_versions_to_publish).
    ///
    /// <p>The versions of the named managed rule group that you want to offer to your customers. </p>
    pub fn versions_to_publish(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::VersionToPublish,
    ) -> Self {
        let mut hash_map = self.versions_to_publish.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.versions_to_publish = Some(hash_map);
        self
    }
    /// <p>The versions of the named managed rule group that you want to offer to your customers. </p>
    pub fn set_versions_to_publish(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::VersionToPublish>,
        >,
    ) -> Self {
        self.versions_to_publish = input;
        self
    }
    /// Consumes the builder and constructs a [`PutManagedRuleSetVersionsInput`](crate::operation::put_managed_rule_set_versions::PutManagedRuleSetVersionsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::put_managed_rule_set_versions::PutManagedRuleSetVersionsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::put_managed_rule_set_versions::PutManagedRuleSetVersionsInput {
                name: self.name,
                scope: self.scope,
                id: self.id,
                lock_token: self.lock_token,
                recommended_version: self.recommended_version,
                versions_to_publish: self.versions_to_publish,
            },
        )
    }
}
