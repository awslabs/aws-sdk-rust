// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CheckCapacity`](crate::client::fluent_builders::CheckCapacity) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`scope(Scope)`](crate::client::fluent_builders::CheckCapacity::scope) / [`set_scope(Option<Scope>)`](crate::client::fluent_builders::CheckCapacity::set_scope): <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, or an Amazon Cognito user pool. </p>  <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>  <ul>   <li> <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p> </li>   <li> <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p> </li>  </ul>
    ///   - [`rules(Vec<Rule>)`](crate::client::fluent_builders::CheckCapacity::rules) / [`set_rules(Option<Vec<Rule>>)`](crate::client::fluent_builders::CheckCapacity::set_rules): <p>An array of <code>Rule</code> that you're configuring to use in a rule group or web ACL. </p>
    /// - On success, responds with [`CheckCapacityOutput`](crate::output::CheckCapacityOutput) with field(s):
    ///   - [`capacity(i64)`](crate::output::CheckCapacityOutput::capacity): <p>The capacity required by the rules and scope.</p>
    /// - On failure, responds with [`SdkError<CheckCapacityError>`](crate::error::CheckCapacityError)
    pub fn check_capacity(&self) -> crate::client::fluent_builders::CheckCapacity {
        crate::client::fluent_builders::CheckCapacity::new(self.handle.clone())
    }
}
