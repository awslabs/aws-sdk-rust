// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateRegexPatternSet`](crate::client::fluent_builders::CreateRegexPatternSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateRegexPatternSet::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateRegexPatternSet::set_name): <p>The name of the set. You cannot change the name after you create the set.</p>
    ///   - [`scope(Scope)`](crate::client::fluent_builders::CreateRegexPatternSet::scope) / [`set_scope(Option<Scope>)`](crate::client::fluent_builders::CreateRegexPatternSet::set_scope): <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, or an Amazon Cognito user pool. </p>  <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>  <ul>   <li> <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p> </li>   <li> <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p> </li>  </ul>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateRegexPatternSet::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateRegexPatternSet::set_description): <p>A description of the set that helps with identification. </p>
    ///   - [`regular_expression_list(Vec<Regex>)`](crate::client::fluent_builders::CreateRegexPatternSet::regular_expression_list) / [`set_regular_expression_list(Option<Vec<Regex>>)`](crate::client::fluent_builders::CreateRegexPatternSet::set_regular_expression_list): <p>Array of regular expression strings. </p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateRegexPatternSet::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateRegexPatternSet::set_tags): <p>An array of key:value pairs to associate with the resource.</p>
    /// - On success, responds with [`CreateRegexPatternSetOutput`](crate::output::CreateRegexPatternSetOutput) with field(s):
    ///   - [`summary(Option<RegexPatternSetSummary>)`](crate::output::CreateRegexPatternSetOutput::summary): <p>High-level information about a <code>RegexPatternSet</code>, returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage a <code>RegexPatternSet</code>, and the ARN, that you provide to the <code>RegexPatternSetReferenceStatement</code> to use the pattern set in a <code>Rule</code>.</p>
    /// - On failure, responds with [`SdkError<CreateRegexPatternSetError>`](crate::error::CreateRegexPatternSetError)
    pub fn create_regex_pattern_set(
        &self,
    ) -> crate::client::fluent_builders::CreateRegexPatternSet {
        crate::client::fluent_builders::CreateRegexPatternSet::new(self.handle.clone())
    }
}
