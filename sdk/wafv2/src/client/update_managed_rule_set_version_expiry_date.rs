// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateManagedRuleSetVersionExpiryDate`](crate::operation::update_managed_rule_set_version_expiry_date::builders::UpdateManagedRuleSetVersionExpiryDateFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::operation::update_managed_rule_set_version_expiry_date::builders::UpdateManagedRuleSetVersionExpiryDateFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::update_managed_rule_set_version_expiry_date::builders::UpdateManagedRuleSetVersionExpiryDateFluentBuilder::set_name):<br>required: **true**<br><p>The name of the managed rule set. You use this, along with the rule set ID, to identify the rule set.</p>  <p>This name is assigned to the corresponding managed rule group, which your customers can access and use. </p><br>
    ///   - [`scope(Scope)`](crate::operation::update_managed_rule_set_version_expiry_date::builders::UpdateManagedRuleSetVersionExpiryDateFluentBuilder::scope) / [`set_scope(Option<Scope>)`](crate::operation::update_managed_rule_set_version_expiry_date::builders::UpdateManagedRuleSetVersionExpiryDateFluentBuilder::set_scope):<br>required: **true**<br><p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. </p>  <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>  <ul>   <li> <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p> </li>   <li> <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p> </li>  </ul><br>
    ///   - [`id(impl Into<String>)`](crate::operation::update_managed_rule_set_version_expiry_date::builders::UpdateManagedRuleSetVersionExpiryDateFluentBuilder::id) / [`set_id(Option<String>)`](crate::operation::update_managed_rule_set_version_expiry_date::builders::UpdateManagedRuleSetVersionExpiryDateFluentBuilder::set_id):<br>required: **true**<br><p>A unique identifier for the managed rule set. The ID is returned in the responses to commands like <code>list</code>. You provide it to operations like <code>get</code> and <code>update</code>.</p><br>
    ///   - [`lock_token(impl Into<String>)`](crate::operation::update_managed_rule_set_version_expiry_date::builders::UpdateManagedRuleSetVersionExpiryDateFluentBuilder::lock_token) / [`set_lock_token(Option<String>)`](crate::operation::update_managed_rule_set_version_expiry_date::builders::UpdateManagedRuleSetVersionExpiryDateFluentBuilder::set_lock_token):<br>required: **true**<br><p>A token used for optimistic locking. WAF returns a token to your <code>get</code> and <code>list</code> requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like <code>update</code> and <code>delete</code>. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another <code>get</code>, and use the new token returned by that operation. </p><br>
    ///   - [`version_to_expire(impl Into<String>)`](crate::operation::update_managed_rule_set_version_expiry_date::builders::UpdateManagedRuleSetVersionExpiryDateFluentBuilder::version_to_expire) / [`set_version_to_expire(Option<String>)`](crate::operation::update_managed_rule_set_version_expiry_date::builders::UpdateManagedRuleSetVersionExpiryDateFluentBuilder::set_version_to_expire):<br>required: **true**<br><p>The version that you want to remove from your list of offerings for the named managed rule group. </p><br>
    ///   - [`expiry_timestamp(DateTime)`](crate::operation::update_managed_rule_set_version_expiry_date::builders::UpdateManagedRuleSetVersionExpiryDateFluentBuilder::expiry_timestamp) / [`set_expiry_timestamp(Option<DateTime>)`](crate::operation::update_managed_rule_set_version_expiry_date::builders::UpdateManagedRuleSetVersionExpiryDateFluentBuilder::set_expiry_timestamp):<br>required: **true**<br><p>The time that you want the version to expire.</p>  <p>Times are in Coordinated Universal Time (UTC) format. UTC format includes the special designator, Z. For example, "2016-09-27T14:50Z". </p><br>
    /// - On success, responds with [`UpdateManagedRuleSetVersionExpiryDateOutput`](crate::operation::update_managed_rule_set_version_expiry_date::UpdateManagedRuleSetVersionExpiryDateOutput) with field(s):
    ///   - [`expiring_version(Option<String>)`](crate::operation::update_managed_rule_set_version_expiry_date::UpdateManagedRuleSetVersionExpiryDateOutput::expiring_version): <p>The version that is set to expire. </p>
    ///   - [`expiry_timestamp(Option<DateTime>)`](crate::operation::update_managed_rule_set_version_expiry_date::UpdateManagedRuleSetVersionExpiryDateOutput::expiry_timestamp): <p>The time that the version will expire. </p>  <p>Times are in Coordinated Universal Time (UTC) format. UTC format includes the special designator, Z. For example, "2016-09-27T14:50Z". </p>
    ///   - [`next_lock_token(Option<String>)`](crate::operation::update_managed_rule_set_version_expiry_date::UpdateManagedRuleSetVersionExpiryDateOutput::next_lock_token): <p>A token used for optimistic locking. WAF returns a token to your <code>get</code> and <code>list</code> requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like <code>update</code> and <code>delete</code>. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another <code>get</code>, and use the new token returned by that operation. </p>
    /// - On failure, responds with [`SdkError<UpdateManagedRuleSetVersionExpiryDateError>`](crate::operation::update_managed_rule_set_version_expiry_date::UpdateManagedRuleSetVersionExpiryDateError)
    pub fn update_managed_rule_set_version_expiry_date(
        &self,
    ) -> crate::operation::update_managed_rule_set_version_expiry_date::builders::UpdateManagedRuleSetVersionExpiryDateFluentBuilder {
        crate::operation::update_managed_rule_set_version_expiry_date::builders::UpdateManagedRuleSetVersionExpiryDateFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
