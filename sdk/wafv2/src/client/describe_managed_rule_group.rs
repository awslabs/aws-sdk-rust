// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DescribeManagedRuleGroup`](crate::client::fluent_builders::DescribeManagedRuleGroup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`vendor_name(impl Into<String>)`](crate::client::fluent_builders::DescribeManagedRuleGroup::vendor_name) / [`set_vendor_name(Option<String>)`](crate::client::fluent_builders::DescribeManagedRuleGroup::set_vendor_name): <p>The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::DescribeManagedRuleGroup::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::DescribeManagedRuleGroup::set_name): <p>The name of the managed rule group. You use this, along with the vendor name, to identify the rule group.</p>
    ///   - [`scope(Scope)`](crate::client::fluent_builders::DescribeManagedRuleGroup::scope) / [`set_scope(Option<Scope>)`](crate::client::fluent_builders::DescribeManagedRuleGroup::set_scope): <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, or an Amazon Cognito user pool. </p>  <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>  <ul>   <li> <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p> </li>   <li> <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p> </li>  </ul>
    ///   - [`version_name(impl Into<String>)`](crate::client::fluent_builders::DescribeManagedRuleGroup::version_name) / [`set_version_name(Option<String>)`](crate::client::fluent_builders::DescribeManagedRuleGroup::set_version_name): <p>The version of the rule group. You can only use a version that is not scheduled for expiration. If you don't provide this, WAF uses the vendor's default version. </p>
    /// - On success, responds with [`DescribeManagedRuleGroupOutput`](crate::output::DescribeManagedRuleGroupOutput) with field(s):
    ///   - [`version_name(Option<String>)`](crate::output::DescribeManagedRuleGroupOutput::version_name): <p>The managed rule group's version. </p>
    ///   - [`sns_topic_arn(Option<String>)`](crate::output::DescribeManagedRuleGroupOutput::sns_topic_arn): <p>The Amazon resource name (ARN) of the Amazon Simple Notification Service SNS topic that's used to record changes to the managed rule group. You can subscribe to the SNS topic to receive notifications when the managed rule group is modified, such as for new versions and for version expiration. For more information, see the <a href="https://docs.aws.amazon.com/sns/latest/dg/welcome.html">Amazon Simple Notification Service Developer Guide</a>.</p>
    ///   - [`capacity(i64)`](crate::output::DescribeManagedRuleGroupOutput::capacity): <p>The web ACL capacity units (WCUs) required for this rule group. WAF uses web ACL capacity units (WCU) to calculate and control the operating resources that are used to run your rules, rule groups, and web ACLs. WAF calculates capacity differently for each rule type, to reflect each rule's relative cost. Rule group capacity is fixed at creation, so users can plan their web ACL WCU usage when they use a rule group. The WCU limit for web ACLs is 1,500. </p>
    ///   - [`rules(Option<Vec<RuleSummary>>)`](crate::output::DescribeManagedRuleGroupOutput::rules): <p></p>
    ///   - [`label_namespace(Option<String>)`](crate::output::DescribeManagedRuleGroupOutput::label_namespace): <p>The label namespace prefix for this rule group. All labels added by rules in this rule group have this prefix. </p>  <ul>   <li> <p>The syntax for the label namespace prefix for a managed rule group is the following: </p> <p> <code>awswaf:managed:     <vendor>      :      <rule group name></rule>     </vendor></code>:</p> </li>   <li> <p>When a rule with a label matches a web request, WAF adds the fully qualified label to the request. A fully qualified label is made up of the label namespace from the rule group or web ACL where the rule is defined and the label from the rule, separated by a colon: </p> <p> <code><label namespace>:<label from rule></label></label></code> </p> </li>  </ul>
    ///   - [`available_labels(Option<Vec<LabelSummary>>)`](crate::output::DescribeManagedRuleGroupOutput::available_labels): <p>The labels that one or more rules in this rule group add to matching web requests. These labels are defined in the <code>RuleLabels</code> for a <code>Rule</code>.</p>
    ///   - [`consumed_labels(Option<Vec<LabelSummary>>)`](crate::output::DescribeManagedRuleGroupOutput::consumed_labels): <p>The labels that one or more rules in this rule group match against in label match statements. These labels are defined in a <code>LabelMatchStatement</code> specification, in the <code>Statement</code> definition of a rule. </p>
    /// - On failure, responds with [`SdkError<DescribeManagedRuleGroupError>`](crate::error::DescribeManagedRuleGroupError)
    pub fn describe_managed_rule_group(
        &self,
    ) -> crate::client::fluent_builders::DescribeManagedRuleGroup {
        crate::client::fluent_builders::DescribeManagedRuleGroup::new(self.handle.clone())
    }
}
