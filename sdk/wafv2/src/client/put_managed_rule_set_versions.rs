// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`PutManagedRuleSetVersions`](crate::operation::put_managed_rule_set_versions::builders::PutManagedRuleSetVersionsFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::operation::put_managed_rule_set_versions::builders::PutManagedRuleSetVersionsFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::put_managed_rule_set_versions::builders::PutManagedRuleSetVersionsFluentBuilder::set_name): <p>The name of the managed rule set. You use this, along with the rule set ID, to identify the rule set.</p>  <p>This name is assigned to the corresponding managed rule group, which your customers can access and use. </p>
    ///   - [`scope(Scope)`](crate::operation::put_managed_rule_set_versions::builders::PutManagedRuleSetVersionsFluentBuilder::scope) / [`set_scope(Option<Scope>)`](crate::operation::put_managed_rule_set_versions::builders::PutManagedRuleSetVersionsFluentBuilder::set_scope): <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, a Amazon Cognito user pool, or an App Runner service. </p>  <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>  <ul>   <li> <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p> </li>   <li> <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p> </li>  </ul>
    ///   - [`id(impl Into<String>)`](crate::operation::put_managed_rule_set_versions::builders::PutManagedRuleSetVersionsFluentBuilder::id) / [`set_id(Option<String>)`](crate::operation::put_managed_rule_set_versions::builders::PutManagedRuleSetVersionsFluentBuilder::set_id): <p>A unique identifier for the managed rule set. The ID is returned in the responses to commands like <code>list</code>. You provide it to operations like <code>get</code> and <code>update</code>.</p>
    ///   - [`lock_token(impl Into<String>)`](crate::operation::put_managed_rule_set_versions::builders::PutManagedRuleSetVersionsFluentBuilder::lock_token) / [`set_lock_token(Option<String>)`](crate::operation::put_managed_rule_set_versions::builders::PutManagedRuleSetVersionsFluentBuilder::set_lock_token): <p>A token used for optimistic locking. WAF returns a token to your <code>get</code> and <code>list</code> requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like <code>update</code> and <code>delete</code>. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another <code>get</code>, and use the new token returned by that operation. </p>
    ///   - [`recommended_version(impl Into<String>)`](crate::operation::put_managed_rule_set_versions::builders::PutManagedRuleSetVersionsFluentBuilder::recommended_version) / [`set_recommended_version(Option<String>)`](crate::operation::put_managed_rule_set_versions::builders::PutManagedRuleSetVersionsFluentBuilder::set_recommended_version): <p>The version of the named managed rule group that you'd like your customers to choose, from among your version offerings. </p>
    ///   - [`versions_to_publish(HashMap<String, VersionToPublish>)`](crate::operation::put_managed_rule_set_versions::builders::PutManagedRuleSetVersionsFluentBuilder::versions_to_publish) / [`set_versions_to_publish(Option<HashMap<String, VersionToPublish>>)`](crate::operation::put_managed_rule_set_versions::builders::PutManagedRuleSetVersionsFluentBuilder::set_versions_to_publish): <p>The versions of the named managed rule group that you want to offer to your customers. </p>
    /// - On success, responds with [`PutManagedRuleSetVersionsOutput`](crate::operation::put_managed_rule_set_versions::PutManagedRuleSetVersionsOutput) with field(s):
    ///   - [`next_lock_token(Option<String>)`](crate::operation::put_managed_rule_set_versions::PutManagedRuleSetVersionsOutput::next_lock_token): <p>A token used for optimistic locking. WAF returns a token to your <code>get</code> and <code>list</code> requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like <code>update</code> and <code>delete</code>. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another <code>get</code>, and use the new token returned by that operation. </p>
    /// - On failure, responds with [`SdkError<PutManagedRuleSetVersionsError>`](crate::operation::put_managed_rule_set_versions::PutManagedRuleSetVersionsError)
    pub fn put_managed_rule_set_versions(&self) -> crate::operation::put_managed_rule_set_versions::builders::PutManagedRuleSetVersionsFluentBuilder{
        crate::operation::put_managed_rule_set_versions::builders::PutManagedRuleSetVersionsFluentBuilder::new(self.handle.clone())
    }
}
