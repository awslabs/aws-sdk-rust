// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_managed_rule_group_statement(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ManagedRuleGroupStatement,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.vendor_name {
        object.key("VendorName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.name {
        object.key("Name").string(var_2.as_str());
    }
    if let Some(var_3) = &input.version {
        object.key("Version").string(var_3.as_str());
    }
    if let Some(var_4) = &input.excluded_rules {
        let mut array_5 = object.key("ExcludedRules").start_array();
        for item_6 in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_excluded_rule::ser_excluded_rule(
                    &mut object_7,
                    item_6,
                )?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.scope_down_statement {
        #[allow(unused_mut)]
        let mut object_9 = object.key("ScopeDownStatement").start_object();
        crate::protocol_serde::shape_statement::ser_statement(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.managed_rule_group_configs {
        let mut array_11 = object.key("ManagedRuleGroupConfigs").start_array();
        for item_12 in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_13 = array_11.value().start_object();
                crate::protocol_serde::shape_managed_rule_group_config::ser_managed_rule_group_config(&mut object_13, item_12)?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    if let Some(var_14) = &input.rule_action_overrides {
        let mut array_15 = object.key("RuleActionOverrides").start_array();
        for item_16 in var_14 {
            {
                #[allow(unused_mut)]
                let mut object_17 = array_15.value().start_object();
                crate::protocol_serde::shape_rule_action_override::ser_rule_action_override(
                    &mut object_17,
                    item_16,
                )?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    Ok(())
}

pub(crate) fn de_managed_rule_group_statement<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::ManagedRuleGroupStatement>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ManagedRuleGroupStatementBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "VendorName" => {
                                builder = builder.set_vendor_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Name" => {
                                builder = builder.set_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Version" => {
                                builder = builder.set_version(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ExcludedRules" => {
                                builder = builder.set_excluded_rules(
                                    crate::protocol_serde::shape_excluded_rules::de_excluded_rules(
                                        tokens,
                                    )?,
                                );
                            }
                            "ScopeDownStatement" => {
                                builder = builder.set_scope_down_statement(
                                    crate::protocol_serde::shape_statement::de_statement(tokens)?
                                        .map(Box::new),
                                );
                            }
                            "ManagedRuleGroupConfigs" => {
                                builder = builder.set_managed_rule_group_configs(
                                    crate::protocol_serde::shape_managed_rule_group_configs::de_managed_rule_group_configs(tokens)?
                                );
                            }
                            "RuleActionOverrides" => {
                                builder = builder.set_rule_action_overrides(
                                    crate::protocol_serde::shape_rule_action_overrides::de_rule_action_overrides(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
