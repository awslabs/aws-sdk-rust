// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_rule(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::Rule,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("Name").string(input.name.as_str());
    }
    {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.priority).into()),
        );
    }
    if let Some(var_1) = &input.statement {
        #[allow(unused_mut)]
        let mut object_2 = object.key("Statement").start_object();
        crate::protocol_serde::shape_statement::ser_statement(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.action {
        #[allow(unused_mut)]
        let mut object_4 = object.key("Action").start_object();
        crate::protocol_serde::shape_rule_action::ser_rule_action(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.override_action {
        #[allow(unused_mut)]
        let mut object_6 = object.key("OverrideAction").start_object();
        crate::protocol_serde::shape_override_action::ser_override_action(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.rule_labels {
        let mut array_8 = object.key("RuleLabels").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_label::ser_label(&mut object_10, item_9)?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if let Some(var_11) = &input.visibility_config {
        #[allow(unused_mut)]
        let mut object_12 = object.key("VisibilityConfig").start_object();
        crate::protocol_serde::shape_visibility_config::ser_visibility_config(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.captcha_config {
        #[allow(unused_mut)]
        let mut object_14 = object.key("CaptchaConfig").start_object();
        crate::protocol_serde::shape_captcha_config::ser_captcha_config(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.challenge_config {
        #[allow(unused_mut)]
        let mut object_16 = object.key("ChallengeConfig").start_object();
        crate::protocol_serde::shape_challenge_config::ser_challenge_config(&mut object_16, var_15)?;
        object_16.finish();
    }
    Ok(())
}

pub(crate) fn de_rule<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::Rule>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::RuleBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "Name" => {
                            builder = builder.set_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Priority" => {
                            builder = builder.set_priority(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "Statement" => {
                            builder = builder.set_statement(crate::protocol_serde::shape_statement::de_statement(tokens)?);
                        }
                        "Action" => {
                            builder = builder.set_action(crate::protocol_serde::shape_rule_action::de_rule_action(tokens)?);
                        }
                        "OverrideAction" => {
                            builder = builder.set_override_action(crate::protocol_serde::shape_override_action::de_override_action(tokens)?);
                        }
                        "RuleLabels" => {
                            builder = builder.set_rule_labels(crate::protocol_serde::shape_labels::de_labels(tokens)?);
                        }
                        "VisibilityConfig" => {
                            builder = builder.set_visibility_config(crate::protocol_serde::shape_visibility_config::de_visibility_config(tokens)?);
                        }
                        "CaptchaConfig" => {
                            builder = builder.set_captcha_config(crate::protocol_serde::shape_captcha_config::de_captcha_config(tokens)?);
                        }
                        "ChallengeConfig" => {
                            builder = builder.set_challenge_config(crate::protocol_serde::shape_challenge_config::de_challenge_config(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::rule_correct_errors(builder).build().map_err(|err| {
                ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err)
            })?))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
