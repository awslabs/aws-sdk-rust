// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_web_acl<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<Option<crate::types::WebAcl>, aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::WebAclBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "Name" => {
                                builder = builder.set_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Id" => {
                                builder = builder.set_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ARN" => {
                                builder = builder.set_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "DefaultAction" => {
                                builder = builder.set_default_action(
                                    crate::protocol_serde::shape_default_action::de_default_action(
                                        tokens,
                                    )?,
                                );
                            }
                            "Description" => {
                                builder = builder.set_description(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Rules" => {
                                builder = builder.set_rules(
                                    crate::protocol_serde::shape_rules::de_rules(tokens)?,
                                );
                            }
                            "VisibilityConfig" => {
                                builder = builder.set_visibility_config(
                                    crate::protocol_serde::shape_visibility_config::de_visibility_config(tokens)?
                                );
                            }
                            "Capacity" => {
                                builder = builder.set_capacity(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i64::try_from)
                                    .transpose()?,
                                );
                            }
                            "PreProcessFirewallManagerRuleGroups" => {
                                builder = builder.set_pre_process_firewall_manager_rule_groups(
                                    crate::protocol_serde::shape_firewall_manager_rule_groups::de_firewall_manager_rule_groups(tokens)?
                                );
                            }
                            "PostProcessFirewallManagerRuleGroups" => {
                                builder = builder.set_post_process_firewall_manager_rule_groups(
                                    crate::protocol_serde::shape_firewall_manager_rule_groups::de_firewall_manager_rule_groups(tokens)?
                                );
                            }
                            "ManagedByFirewallManager" => {
                                builder = builder.set_managed_by_firewall_manager(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "LabelNamespace" => {
                                builder = builder.set_label_namespace(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "CustomResponseBodies" => {
                                builder = builder.set_custom_response_bodies(
                                    crate::protocol_serde::shape_custom_response_bodies::de_custom_response_bodies(tokens)?
                                );
                            }
                            "CaptchaConfig" => {
                                builder = builder.set_captcha_config(
                                    crate::protocol_serde::shape_captcha_config::de_captcha_config(
                                        tokens,
                                    )?,
                                );
                            }
                            "ChallengeConfig" => {
                                builder = builder.set_challenge_config(
                                    crate::protocol_serde::shape_challenge_config::de_challenge_config(tokens)?
                                );
                            }
                            "TokenDomains" => {
                                builder = builder.set_token_domains(
                                    crate::protocol_serde::shape_token_domains::de_token_domains(
                                        tokens,
                                    )?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
