// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_field_to_match(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::FieldToMatch,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.single_header {
        #[allow(unused_mut)]
        let mut object_2 = object.key("SingleHeader").start_object();
        crate::protocol_serde::shape_single_header::ser_single_header(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.single_query_argument {
        #[allow(unused_mut)]
        let mut object_4 = object.key("SingleQueryArgument").start_object();
        crate::protocol_serde::shape_single_query_argument::ser_single_query_argument(
            &mut object_4,
            var_3,
        )?;
        object_4.finish();
    }
    if let Some(var_5) = &input.all_query_arguments {
        #[allow(unused_mut)]
        let mut object_6 = object.key("AllQueryArguments").start_object();
        crate::protocol_serde::shape_all_query_arguments::ser_all_query_arguments(
            &mut object_6,
            var_5,
        )?;
        object_6.finish();
    }
    if let Some(var_7) = &input.uri_path {
        #[allow(unused_mut)]
        let mut object_8 = object.key("UriPath").start_object();
        crate::protocol_serde::shape_uri_path::ser_uri_path(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.query_string {
        #[allow(unused_mut)]
        let mut object_10 = object.key("QueryString").start_object();
        crate::protocol_serde::shape_query_string::ser_query_string(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.body {
        #[allow(unused_mut)]
        let mut object_12 = object.key("Body").start_object();
        crate::protocol_serde::shape_body::ser_body(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.method {
        #[allow(unused_mut)]
        let mut object_14 = object.key("Method").start_object();
        crate::protocol_serde::shape_method::ser_method(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.json_body {
        #[allow(unused_mut)]
        let mut object_16 = object.key("JsonBody").start_object();
        crate::protocol_serde::shape_json_body::ser_json_body(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.headers {
        #[allow(unused_mut)]
        let mut object_18 = object.key("Headers").start_object();
        crate::protocol_serde::shape_headers::ser_headers(&mut object_18, var_17)?;
        object_18.finish();
    }
    if let Some(var_19) = &input.cookies {
        #[allow(unused_mut)]
        let mut object_20 = object.key("Cookies").start_object();
        crate::protocol_serde::shape_cookies::ser_cookies(&mut object_20, var_19)?;
        object_20.finish();
    }
    Ok(())
}

pub(crate) fn de_field_to_match<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<Option<crate::types::FieldToMatch>, aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::FieldToMatchBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "SingleHeader" => {
                                builder = builder.set_single_header(
                                    crate::protocol_serde::shape_single_header::de_single_header(
                                        tokens,
                                    )?,
                                );
                            }
                            "SingleQueryArgument" => {
                                builder = builder.set_single_query_argument(
                                    crate::protocol_serde::shape_single_query_argument::de_single_query_argument(tokens)?
                                );
                            }
                            "AllQueryArguments" => {
                                builder = builder.set_all_query_arguments(
                                    crate::protocol_serde::shape_all_query_arguments::de_all_query_arguments(tokens)?
                                );
                            }
                            "UriPath" => {
                                builder = builder.set_uri_path(
                                    crate::protocol_serde::shape_uri_path::de_uri_path(tokens)?,
                                );
                            }
                            "QueryString" => {
                                builder = builder.set_query_string(
                                    crate::protocol_serde::shape_query_string::de_query_string(
                                        tokens,
                                    )?,
                                );
                            }
                            "Body" => {
                                builder = builder
                                    .set_body(crate::protocol_serde::shape_body::de_body(tokens)?);
                            }
                            "Method" => {
                                builder = builder.set_method(
                                    crate::protocol_serde::shape_method::de_method(tokens)?,
                                );
                            }
                            "JsonBody" => {
                                builder = builder.set_json_body(
                                    crate::protocol_serde::shape_json_body::de_json_body(tokens)?,
                                );
                            }
                            "Headers" => {
                                builder = builder.set_headers(
                                    crate::protocol_serde::shape_headers::de_headers(tokens)?,
                                );
                            }
                            "Cookies" => {
                                builder = builder.set_cookies(
                                    crate::protocol_serde::shape_cookies::de_cookies(tokens)?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
