// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_statement(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::Statement,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.byte_match_statement {
        #[allow(unused_mut)]
        let mut object_2 = object.key("ByteMatchStatement").start_object();
        crate::protocol_serde::shape_byte_match_statement::ser_byte_match_statement(
            &mut object_2,
            var_1,
        )?;
        object_2.finish();
    }
    if let Some(var_3) = &input.sqli_match_statement {
        #[allow(unused_mut)]
        let mut object_4 = object.key("SqliMatchStatement").start_object();
        crate::protocol_serde::shape_sqli_match_statement::ser_sqli_match_statement(
            &mut object_4,
            var_3,
        )?;
        object_4.finish();
    }
    if let Some(var_5) = &input.xss_match_statement {
        #[allow(unused_mut)]
        let mut object_6 = object.key("XssMatchStatement").start_object();
        crate::protocol_serde::shape_xss_match_statement::ser_xss_match_statement(
            &mut object_6,
            var_5,
        )?;
        object_6.finish();
    }
    if let Some(var_7) = &input.size_constraint_statement {
        #[allow(unused_mut)]
        let mut object_8 = object.key("SizeConstraintStatement").start_object();
        crate::protocol_serde::shape_size_constraint_statement::ser_size_constraint_statement(
            &mut object_8,
            var_7,
        )?;
        object_8.finish();
    }
    if let Some(var_9) = &input.geo_match_statement {
        #[allow(unused_mut)]
        let mut object_10 = object.key("GeoMatchStatement").start_object();
        crate::protocol_serde::shape_geo_match_statement::ser_geo_match_statement(
            &mut object_10,
            var_9,
        )?;
        object_10.finish();
    }
    if let Some(var_11) = &input.rule_group_reference_statement {
        #[allow(unused_mut)]
        let mut object_12 = object.key("RuleGroupReferenceStatement").start_object();
        crate::protocol_serde::shape_rule_group_reference_statement::ser_rule_group_reference_statement(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.ip_set_reference_statement {
        #[allow(unused_mut)]
        let mut object_14 = object.key("IPSetReferenceStatement").start_object();
        crate::protocol_serde::shape_ip_set_reference_statement::ser_ip_set_reference_statement(
            &mut object_14,
            var_13,
        )?;
        object_14.finish();
    }
    if let Some(var_15) = &input.regex_pattern_set_reference_statement {
        #[allow(unused_mut)]
        let mut object_16 = object
            .key("RegexPatternSetReferenceStatement")
            .start_object();
        crate::protocol_serde::shape_regex_pattern_set_reference_statement::ser_regex_pattern_set_reference_statement(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.rate_based_statement {
        #[allow(unused_mut)]
        let mut object_18 = object.key("RateBasedStatement").start_object();
        crate::protocol_serde::shape_rate_based_statement::ser_rate_based_statement(
            &mut object_18,
            var_17,
        )?;
        object_18.finish();
    }
    if let Some(var_19) = &input.and_statement {
        #[allow(unused_mut)]
        let mut object_20 = object.key("AndStatement").start_object();
        crate::protocol_serde::shape_and_statement::ser_and_statement(&mut object_20, var_19)?;
        object_20.finish();
    }
    if let Some(var_21) = &input.or_statement {
        #[allow(unused_mut)]
        let mut object_22 = object.key("OrStatement").start_object();
        crate::protocol_serde::shape_or_statement::ser_or_statement(&mut object_22, var_21)?;
        object_22.finish();
    }
    if let Some(var_23) = &input.not_statement {
        #[allow(unused_mut)]
        let mut object_24 = object.key("NotStatement").start_object();
        crate::protocol_serde::shape_not_statement::ser_not_statement(&mut object_24, var_23)?;
        object_24.finish();
    }
    if let Some(var_25) = &input.managed_rule_group_statement {
        #[allow(unused_mut)]
        let mut object_26 = object.key("ManagedRuleGroupStatement").start_object();
        crate::protocol_serde::shape_managed_rule_group_statement::ser_managed_rule_group_statement(&mut object_26, var_25)?;
        object_26.finish();
    }
    if let Some(var_27) = &input.label_match_statement {
        #[allow(unused_mut)]
        let mut object_28 = object.key("LabelMatchStatement").start_object();
        crate::protocol_serde::shape_label_match_statement::ser_label_match_statement(
            &mut object_28,
            var_27,
        )?;
        object_28.finish();
    }
    if let Some(var_29) = &input.regex_match_statement {
        #[allow(unused_mut)]
        let mut object_30 = object.key("RegexMatchStatement").start_object();
        crate::protocol_serde::shape_regex_match_statement::ser_regex_match_statement(
            &mut object_30,
            var_29,
        )?;
        object_30.finish();
    }
    Ok(())
}

pub(crate) fn de_statement<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<Option<crate::types::Statement>, aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::StatementBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "ByteMatchStatement" => {
                                builder = builder.set_byte_match_statement(
                                    crate::protocol_serde::shape_byte_match_statement::de_byte_match_statement(tokens)?
                                );
                            }
                            "SqliMatchStatement" => {
                                builder = builder.set_sqli_match_statement(
                                    crate::protocol_serde::shape_sqli_match_statement::de_sqli_match_statement(tokens)?
                                );
                            }
                            "XssMatchStatement" => {
                                builder = builder.set_xss_match_statement(
                                    crate::protocol_serde::shape_xss_match_statement::de_xss_match_statement(tokens)?
                                );
                            }
                            "SizeConstraintStatement" => {
                                builder = builder.set_size_constraint_statement(
                                    crate::protocol_serde::shape_size_constraint_statement::de_size_constraint_statement(tokens)?
                                );
                            }
                            "GeoMatchStatement" => {
                                builder = builder.set_geo_match_statement(
                                    crate::protocol_serde::shape_geo_match_statement::de_geo_match_statement(tokens)?
                                );
                            }
                            "RuleGroupReferenceStatement" => {
                                builder = builder.set_rule_group_reference_statement(
                                    crate::protocol_serde::shape_rule_group_reference_statement::de_rule_group_reference_statement(tokens)?
                                );
                            }
                            "IPSetReferenceStatement" => {
                                builder = builder.set_ip_set_reference_statement(
                                    crate::protocol_serde::shape_ip_set_reference_statement::de_ip_set_reference_statement(tokens)?
                                );
                            }
                            "RegexPatternSetReferenceStatement" => {
                                builder = builder.set_regex_pattern_set_reference_statement(
                                    crate::protocol_serde::shape_regex_pattern_set_reference_statement::de_regex_pattern_set_reference_statement(tokens)?
                                );
                            }
                            "RateBasedStatement" => {
                                builder = builder.set_rate_based_statement(
                                    crate::protocol_serde::shape_rate_based_statement::de_rate_based_statement(tokens)?
                                );
                            }
                            "AndStatement" => {
                                builder = builder.set_and_statement(
                                    crate::protocol_serde::shape_and_statement::de_and_statement(
                                        tokens,
                                    )?,
                                );
                            }
                            "OrStatement" => {
                                builder = builder.set_or_statement(
                                    crate::protocol_serde::shape_or_statement::de_or_statement(
                                        tokens,
                                    )?,
                                );
                            }
                            "NotStatement" => {
                                builder = builder.set_not_statement(
                                    crate::protocol_serde::shape_not_statement::de_not_statement(
                                        tokens,
                                    )?,
                                );
                            }
                            "ManagedRuleGroupStatement" => {
                                builder = builder.set_managed_rule_group_statement(
                                    crate::protocol_serde::shape_managed_rule_group_statement::de_managed_rule_group_statement(tokens)?
                                );
                            }
                            "LabelMatchStatement" => {
                                builder = builder.set_label_match_statement(
                                    crate::protocol_serde::shape_label_match_statement::de_label_match_statement(tokens)?
                                );
                            }
                            "RegexMatchStatement" => {
                                builder = builder.set_regex_match_statement(
                                    crate::protocol_serde::shape_regex_match_statement::de_regex_match_statement(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
