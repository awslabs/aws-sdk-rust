// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_delete_web_acl_http_error(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<crate::operation::delete_web_acl::DeleteWebAclOutput, crate::operation::delete_web_acl::DeleteWebACLError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::delete_web_acl::DeleteWebACLError::unhandled)?;
    generic_builder = ::aws_http::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::delete_web_acl::DeleteWebACLError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "WAFAssociatedItemException" => crate::operation::delete_web_acl::DeleteWebACLError::WafAssociatedItemException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::WafAssociatedItemExceptionBuilder::default();
                output =
                    crate::protocol_serde::shape_waf_associated_item_exception::de_waf_associated_item_exception_json_err(_response_body, output)
                        .map_err(crate::operation::delete_web_acl::DeleteWebACLError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "WAFInternalErrorException" => crate::operation::delete_web_acl::DeleteWebACLError::WafInternalErrorException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::WafInternalErrorExceptionBuilder::default();
                output = crate::protocol_serde::shape_waf_internal_error_exception::de_waf_internal_error_exception_json_err(_response_body, output)
                    .map_err(crate::operation::delete_web_acl::DeleteWebACLError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "WAFInvalidOperationException" => crate::operation::delete_web_acl::DeleteWebACLError::WafInvalidOperationException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::WafInvalidOperationExceptionBuilder::default();
                output =
                    crate::protocol_serde::shape_waf_invalid_operation_exception::de_waf_invalid_operation_exception_json_err(_response_body, output)
                        .map_err(crate::operation::delete_web_acl::DeleteWebACLError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "WAFInvalidParameterException" => crate::operation::delete_web_acl::DeleteWebACLError::WafInvalidParameterException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::WafInvalidParameterExceptionBuilder::default();
                output =
                    crate::protocol_serde::shape_waf_invalid_parameter_exception::de_waf_invalid_parameter_exception_json_err(_response_body, output)
                        .map_err(crate::operation::delete_web_acl::DeleteWebACLError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "WAFNonexistentItemException" => crate::operation::delete_web_acl::DeleteWebACLError::WafNonexistentItemException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::WafNonexistentItemExceptionBuilder::default();
                output =
                    crate::protocol_serde::shape_waf_nonexistent_item_exception::de_waf_nonexistent_item_exception_json_err(_response_body, output)
                        .map_err(crate::operation::delete_web_acl::DeleteWebACLError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "WAFOptimisticLockException" => crate::operation::delete_web_acl::DeleteWebACLError::WafOptimisticLockException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::WafOptimisticLockExceptionBuilder::default();
                output =
                    crate::protocol_serde::shape_waf_optimistic_lock_exception::de_waf_optimistic_lock_exception_json_err(_response_body, output)
                        .map_err(crate::operation::delete_web_acl::DeleteWebACLError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "WAFTagOperationException" => crate::operation::delete_web_acl::DeleteWebACLError::WafTagOperationException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::WafTagOperationExceptionBuilder::default();
                output = crate::protocol_serde::shape_waf_tag_operation_exception::de_waf_tag_operation_exception_json_err(_response_body, output)
                    .map_err(crate::operation::delete_web_acl::DeleteWebACLError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "WAFTagOperationInternalErrorException" => {
            crate::operation::delete_web_acl::DeleteWebACLError::WafTagOperationInternalErrorException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::WafTagOperationInternalErrorExceptionBuilder::default();
                    output = crate::protocol_serde::shape_waf_tag_operation_internal_error_exception::de_waf_tag_operation_internal_error_exception_json_err(_response_body, output).map_err(crate::operation::delete_web_acl::DeleteWebACLError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::operation::delete_web_acl::DeleteWebACLError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_delete_web_acl_http_response(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<crate::operation::delete_web_acl::DeleteWebAclOutput, crate::operation::delete_web_acl::DeleteWebACLError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::delete_web_acl::builders::DeleteWebAclOutputBuilder::default();
        output._set_request_id(::aws_http::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}

pub fn ser_delete_web_acl_input(
    input: &crate::operation::delete_web_acl::DeleteWebAclInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    let mut object = ::aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_delete_web_acl_input::ser_delete_web_acl_input(&mut object, input)?;
    object.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
