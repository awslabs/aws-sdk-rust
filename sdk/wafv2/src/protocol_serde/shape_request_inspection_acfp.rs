// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_request_inspection_acfp(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::RequestInspectionAcfp,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("PayloadType").string(input.payload_type.as_str());
    }
    if let Some(var_1) = &input.username_field {
        #[allow(unused_mut)]
        let mut object_2 = object.key("UsernameField").start_object();
        crate::protocol_serde::shape_username_field::ser_username_field(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.password_field {
        #[allow(unused_mut)]
        let mut object_4 = object.key("PasswordField").start_object();
        crate::protocol_serde::shape_password_field::ser_password_field(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.email_field {
        #[allow(unused_mut)]
        let mut object_6 = object.key("EmailField").start_object();
        crate::protocol_serde::shape_email_field::ser_email_field(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.phone_number_fields {
        let mut array_8 = object.key("PhoneNumberFields").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_phone_number_field::ser_phone_number_field(&mut object_10, item_9)?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if let Some(var_11) = &input.address_fields {
        let mut array_12 = object.key("AddressFields").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_address_field::ser_address_field(&mut object_14, item_13)?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    Ok(())
}

pub(crate) fn de_request_inspection_acfp<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::RequestInspectionAcfp>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::RequestInspectionAcfpBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "PayloadType" => {
                            builder = builder.set_payload_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::PayloadType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "UsernameField" => {
                            builder = builder.set_username_field(crate::protocol_serde::shape_username_field::de_username_field(tokens)?);
                        }
                        "PasswordField" => {
                            builder = builder.set_password_field(crate::protocol_serde::shape_password_field::de_password_field(tokens)?);
                        }
                        "EmailField" => {
                            builder = builder.set_email_field(crate::protocol_serde::shape_email_field::de_email_field(tokens)?);
                        }
                        "PhoneNumberFields" => {
                            builder =
                                builder.set_phone_number_fields(crate::protocol_serde::shape_phone_number_fields::de_phone_number_fields(tokens)?);
                        }
                        "AddressFields" => {
                            builder = builder.set_address_fields(crate::protocol_serde::shape_address_fields::de_address_fields(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::request_inspection_acfp_correct_errors(builder).build().map_err(
                |err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err),
            )?))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
