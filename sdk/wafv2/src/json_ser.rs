// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_web_acl_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateWebAclInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.web_acl_arn {
        object.key("WebACLArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.resource_arn {
        object.key("ResourceArn").string(var_2.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_check_capacity_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CheckCapacityInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3) = &input.scope {
        object.key("Scope").string(var_3.as_str());
    }
    if let Some(var_4) = &input.rules {
        let mut array_5 = object.key("Rules").start_array();
        for item_6 in var_4 {
            {
                let mut object_7 = array_5.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_ip_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateIpSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_8) = &input.name {
        object.key("Name").string(var_8.as_str());
    }
    if let Some(var_9) = &input.scope {
        object.key("Scope").string(var_9.as_str());
    }
    if let Some(var_10) = &input.description {
        object.key("Description").string(var_10.as_str());
    }
    if let Some(var_11) = &input.ip_address_version {
        object.key("IPAddressVersion").string(var_11.as_str());
    }
    if let Some(var_12) = &input.addresses {
        let mut array_13 = object.key("Addresses").start_array();
        for item_14 in var_12 {
            {
                array_13.value().string(item_14.as_str());
            }
        }
        array_13.finish();
    }
    if let Some(var_15) = &input.tags {
        let mut array_16 = object.key("Tags").start_array();
        for item_17 in var_15 {
            {
                let mut object_18 = array_16.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_18, item_17)?;
                object_18.finish();
            }
        }
        array_16.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_regex_pattern_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRegexPatternSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_19) = &input.name {
        object.key("Name").string(var_19.as_str());
    }
    if let Some(var_20) = &input.scope {
        object.key("Scope").string(var_20.as_str());
    }
    if let Some(var_21) = &input.description {
        object.key("Description").string(var_21.as_str());
    }
    if let Some(var_22) = &input.regular_expression_list {
        let mut array_23 = object.key("RegularExpressionList").start_array();
        for item_24 in var_22 {
            {
                let mut object_25 = array_23.value().start_object();
                crate::json_ser::serialize_structure_crate_model_regex(&mut object_25, item_24)?;
                object_25.finish();
            }
        }
        array_23.finish();
    }
    if let Some(var_26) = &input.tags {
        let mut array_27 = object.key("Tags").start_array();
        for item_28 in var_26 {
            {
                let mut object_29 = array_27.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_29, item_28)?;
                object_29.finish();
            }
        }
        array_27.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_rule_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRuleGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_30) = &input.name {
        object.key("Name").string(var_30.as_str());
    }
    if let Some(var_31) = &input.scope {
        object.key("Scope").string(var_31.as_str());
    }
    {
        object.key("Capacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.capacity).into()),
        );
    }
    if let Some(var_32) = &input.description {
        object.key("Description").string(var_32.as_str());
    }
    if let Some(var_33) = &input.rules {
        let mut array_34 = object.key("Rules").start_array();
        for item_35 in var_33 {
            {
                let mut object_36 = array_34.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule(&mut object_36, item_35)?;
                object_36.finish();
            }
        }
        array_34.finish();
    }
    if let Some(var_37) = &input.visibility_config {
        let mut object_38 = object.key("VisibilityConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_visibility_config(&mut object_38, var_37)?;
        object_38.finish();
    }
    if let Some(var_39) = &input.tags {
        let mut array_40 = object.key("Tags").start_array();
        for item_41 in var_39 {
            {
                let mut object_42 = array_40.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_42, item_41)?;
                object_42.finish();
            }
        }
        array_40.finish();
    }
    if let Some(var_43) = &input.custom_response_bodies {
        let mut object_44 = object.key("CustomResponseBodies").start_object();
        for (key_45, value_46) in var_43 {
            {
                let mut object_47 = object_44.key(key_45).start_object();
                crate::json_ser::serialize_structure_crate_model_custom_response_body(
                    &mut object_47,
                    value_46,
                )?;
                object_47.finish();
            }
        }
        object_44.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_web_acl_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWebAclInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_48) = &input.name {
        object.key("Name").string(var_48.as_str());
    }
    if let Some(var_49) = &input.scope {
        object.key("Scope").string(var_49.as_str());
    }
    if let Some(var_50) = &input.default_action {
        let mut object_51 = object.key("DefaultAction").start_object();
        crate::json_ser::serialize_structure_crate_model_default_action(&mut object_51, var_50)?;
        object_51.finish();
    }
    if let Some(var_52) = &input.description {
        object.key("Description").string(var_52.as_str());
    }
    if let Some(var_53) = &input.rules {
        let mut array_54 = object.key("Rules").start_array();
        for item_55 in var_53 {
            {
                let mut object_56 = array_54.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule(&mut object_56, item_55)?;
                object_56.finish();
            }
        }
        array_54.finish();
    }
    if let Some(var_57) = &input.visibility_config {
        let mut object_58 = object.key("VisibilityConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_visibility_config(&mut object_58, var_57)?;
        object_58.finish();
    }
    if let Some(var_59) = &input.tags {
        let mut array_60 = object.key("Tags").start_array();
        for item_61 in var_59 {
            {
                let mut object_62 = array_60.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_62, item_61)?;
                object_62.finish();
            }
        }
        array_60.finish();
    }
    if let Some(var_63) = &input.custom_response_bodies {
        let mut object_64 = object.key("CustomResponseBodies").start_object();
        for (key_65, value_66) in var_63 {
            {
                let mut object_67 = object_64.key(key_65).start_object();
                crate::json_ser::serialize_structure_crate_model_custom_response_body(
                    &mut object_67,
                    value_66,
                )?;
                object_67.finish();
            }
        }
        object_64.finish();
    }
    if let Some(var_68) = &input.captcha_config {
        let mut object_69 = object.key("CaptchaConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_captcha_config(&mut object_69, var_68)?;
        object_69.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_firewall_manager_rule_groups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFirewallManagerRuleGroupsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_70) = &input.web_acl_arn {
        object.key("WebACLArn").string(var_70.as_str());
    }
    if let Some(var_71) = &input.web_acl_lock_token {
        object.key("WebACLLockToken").string(var_71.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_ip_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteIpSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_72) = &input.name {
        object.key("Name").string(var_72.as_str());
    }
    if let Some(var_73) = &input.scope {
        object.key("Scope").string(var_73.as_str());
    }
    if let Some(var_74) = &input.id {
        object.key("Id").string(var_74.as_str());
    }
    if let Some(var_75) = &input.lock_token {
        object.key("LockToken").string(var_75.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_logging_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteLoggingConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_76) = &input.resource_arn {
        object.key("ResourceArn").string(var_76.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_permission_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePermissionPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_77) = &input.resource_arn {
        object.key("ResourceArn").string(var_77.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_regex_pattern_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRegexPatternSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_78) = &input.name {
        object.key("Name").string(var_78.as_str());
    }
    if let Some(var_79) = &input.scope {
        object.key("Scope").string(var_79.as_str());
    }
    if let Some(var_80) = &input.id {
        object.key("Id").string(var_80.as_str());
    }
    if let Some(var_81) = &input.lock_token {
        object.key("LockToken").string(var_81.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_rule_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRuleGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_82) = &input.name {
        object.key("Name").string(var_82.as_str());
    }
    if let Some(var_83) = &input.scope {
        object.key("Scope").string(var_83.as_str());
    }
    if let Some(var_84) = &input.id {
        object.key("Id").string(var_84.as_str());
    }
    if let Some(var_85) = &input.lock_token {
        object.key("LockToken").string(var_85.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_web_acl_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteWebAclInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_86) = &input.name {
        object.key("Name").string(var_86.as_str());
    }
    if let Some(var_87) = &input.scope {
        object.key("Scope").string(var_87.as_str());
    }
    if let Some(var_88) = &input.id {
        object.key("Id").string(var_88.as_str());
    }
    if let Some(var_89) = &input.lock_token {
        object.key("LockToken").string(var_89.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_managed_rule_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeManagedRuleGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_90) = &input.vendor_name {
        object.key("VendorName").string(var_90.as_str());
    }
    if let Some(var_91) = &input.name {
        object.key("Name").string(var_91.as_str());
    }
    if let Some(var_92) = &input.scope {
        object.key("Scope").string(var_92.as_str());
    }
    if let Some(var_93) = &input.version_name {
        object.key("VersionName").string(var_93.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_web_acl_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateWebAclInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_94) = &input.resource_arn {
        object.key("ResourceArn").string(var_94.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ip_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetIpSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_95) = &input.name {
        object.key("Name").string(var_95.as_str());
    }
    if let Some(var_96) = &input.scope {
        object.key("Scope").string(var_96.as_str());
    }
    if let Some(var_97) = &input.id {
        object.key("Id").string(var_97.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_logging_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetLoggingConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_98) = &input.resource_arn {
        object.key("ResourceArn").string(var_98.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_managed_rule_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetManagedRuleSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_99) = &input.name {
        object.key("Name").string(var_99.as_str());
    }
    if let Some(var_100) = &input.scope {
        object.key("Scope").string(var_100.as_str());
    }
    if let Some(var_101) = &input.id {
        object.key("Id").string(var_101.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_permission_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPermissionPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_102) = &input.resource_arn {
        object.key("ResourceArn").string(var_102.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_rate_based_statement_managed_keys_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRateBasedStatementManagedKeysInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_103) = &input.scope {
        object.key("Scope").string(var_103.as_str());
    }
    if let Some(var_104) = &input.web_acl_name {
        object.key("WebACLName").string(var_104.as_str());
    }
    if let Some(var_105) = &input.web_acl_id {
        object.key("WebACLId").string(var_105.as_str());
    }
    if let Some(var_106) = &input.rule_group_rule_name {
        object.key("RuleGroupRuleName").string(var_106.as_str());
    }
    if let Some(var_107) = &input.rule_name {
        object.key("RuleName").string(var_107.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_regex_pattern_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRegexPatternSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_108) = &input.name {
        object.key("Name").string(var_108.as_str());
    }
    if let Some(var_109) = &input.scope {
        object.key("Scope").string(var_109.as_str());
    }
    if let Some(var_110) = &input.id {
        object.key("Id").string(var_110.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_rule_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRuleGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_111) = &input.name {
        object.key("Name").string(var_111.as_str());
    }
    if let Some(var_112) = &input.scope {
        object.key("Scope").string(var_112.as_str());
    }
    if let Some(var_113) = &input.id {
        object.key("Id").string(var_113.as_str());
    }
    if let Some(var_114) = &input.arn {
        object.key("ARN").string(var_114.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_sampled_requests_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSampledRequestsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_115) = &input.web_acl_arn {
        object.key("WebAclArn").string(var_115.as_str());
    }
    if let Some(var_116) = &input.rule_metric_name {
        object.key("RuleMetricName").string(var_116.as_str());
    }
    if let Some(var_117) = &input.scope {
        object.key("Scope").string(var_117.as_str());
    }
    if let Some(var_118) = &input.time_window {
        let mut object_119 = object.key("TimeWindow").start_object();
        crate::json_ser::serialize_structure_crate_model_time_window(&mut object_119, var_118)?;
        object_119.finish();
    }
    {
        object.key("MaxItems").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_items).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_web_acl_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWebAclInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_120) = &input.name {
        object.key("Name").string(var_120.as_str());
    }
    if let Some(var_121) = &input.scope {
        object.key("Scope").string(var_121.as_str());
    }
    if let Some(var_122) = &input.id {
        object.key("Id").string(var_122.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_web_acl_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWebAclForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_123) = &input.resource_arn {
        object.key("ResourceArn").string(var_123.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_available_managed_rule_groups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAvailableManagedRuleGroupsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_124) = &input.scope {
        object.key("Scope").string(var_124.as_str());
    }
    if let Some(var_125) = &input.next_marker {
        object.key("NextMarker").string(var_125.as_str());
    }
    if let Some(var_126) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_126).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_available_managed_rule_group_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAvailableManagedRuleGroupVersionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_127) = &input.vendor_name {
        object.key("VendorName").string(var_127.as_str());
    }
    if let Some(var_128) = &input.name {
        object.key("Name").string(var_128.as_str());
    }
    if let Some(var_129) = &input.scope {
        object.key("Scope").string(var_129.as_str());
    }
    if let Some(var_130) = &input.next_marker {
        object.key("NextMarker").string(var_130.as_str());
    }
    if let Some(var_131) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_131).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_ip_sets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListIpSetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_132) = &input.scope {
        object.key("Scope").string(var_132.as_str());
    }
    if let Some(var_133) = &input.next_marker {
        object.key("NextMarker").string(var_133.as_str());
    }
    if let Some(var_134) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_134).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_logging_configurations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListLoggingConfigurationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_135) = &input.scope {
        object.key("Scope").string(var_135.as_str());
    }
    if let Some(var_136) = &input.next_marker {
        object.key("NextMarker").string(var_136.as_str());
    }
    if let Some(var_137) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_137).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_managed_rule_sets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListManagedRuleSetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_138) = &input.scope {
        object.key("Scope").string(var_138.as_str());
    }
    if let Some(var_139) = &input.next_marker {
        object.key("NextMarker").string(var_139.as_str());
    }
    if let Some(var_140) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_140).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_regex_pattern_sets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListRegexPatternSetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_141) = &input.scope {
        object.key("Scope").string(var_141.as_str());
    }
    if let Some(var_142) = &input.next_marker {
        object.key("NextMarker").string(var_142.as_str());
    }
    if let Some(var_143) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_143).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_resources_for_web_acl_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListResourcesForWebAclInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_144) = &input.web_acl_arn {
        object.key("WebACLArn").string(var_144.as_str());
    }
    if let Some(var_145) = &input.resource_type {
        object.key("ResourceType").string(var_145.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_rule_groups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListRuleGroupsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_146) = &input.scope {
        object.key("Scope").string(var_146.as_str());
    }
    if let Some(var_147) = &input.next_marker {
        object.key("NextMarker").string(var_147.as_str());
    }
    if let Some(var_148) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_148).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_149) = &input.next_marker {
        object.key("NextMarker").string(var_149.as_str());
    }
    if let Some(var_150) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_150).into()),
        );
    }
    if let Some(var_151) = &input.resource_arn {
        object.key("ResourceARN").string(var_151.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_web_ac_ls_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListWebAcLsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_152) = &input.scope {
        object.key("Scope").string(var_152.as_str());
    }
    if let Some(var_153) = &input.next_marker {
        object.key("NextMarker").string(var_153.as_str());
    }
    if let Some(var_154) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_154).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_logging_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutLoggingConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_155) = &input.logging_configuration {
        let mut object_156 = object.key("LoggingConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_logging_configuration(
            &mut object_156,
            var_155,
        )?;
        object_156.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_managed_rule_set_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutManagedRuleSetVersionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_157) = &input.name {
        object.key("Name").string(var_157.as_str());
    }
    if let Some(var_158) = &input.scope {
        object.key("Scope").string(var_158.as_str());
    }
    if let Some(var_159) = &input.id {
        object.key("Id").string(var_159.as_str());
    }
    if let Some(var_160) = &input.lock_token {
        object.key("LockToken").string(var_160.as_str());
    }
    if let Some(var_161) = &input.recommended_version {
        object.key("RecommendedVersion").string(var_161.as_str());
    }
    if let Some(var_162) = &input.versions_to_publish {
        let mut object_163 = object.key("VersionsToPublish").start_object();
        for (key_164, value_165) in var_162 {
            {
                let mut object_166 = object_163.key(key_164).start_object();
                crate::json_ser::serialize_structure_crate_model_version_to_publish(
                    &mut object_166,
                    value_165,
                )?;
                object_166.finish();
            }
        }
        object_163.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_permission_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutPermissionPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_167) = &input.resource_arn {
        object.key("ResourceArn").string(var_167.as_str());
    }
    if let Some(var_168) = &input.policy {
        object.key("Policy").string(var_168.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_169) = &input.resource_arn {
        object.key("ResourceARN").string(var_169.as_str());
    }
    if let Some(var_170) = &input.tags {
        let mut array_171 = object.key("Tags").start_array();
        for item_172 in var_170 {
            {
                let mut object_173 = array_171.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_173, item_172)?;
                object_173.finish();
            }
        }
        array_171.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_174) = &input.resource_arn {
        object.key("ResourceARN").string(var_174.as_str());
    }
    if let Some(var_175) = &input.tag_keys {
        let mut array_176 = object.key("TagKeys").start_array();
        for item_177 in var_175 {
            {
                array_176.value().string(item_177.as_str());
            }
        }
        array_176.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_ip_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateIpSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_178) = &input.name {
        object.key("Name").string(var_178.as_str());
    }
    if let Some(var_179) = &input.scope {
        object.key("Scope").string(var_179.as_str());
    }
    if let Some(var_180) = &input.id {
        object.key("Id").string(var_180.as_str());
    }
    if let Some(var_181) = &input.description {
        object.key("Description").string(var_181.as_str());
    }
    if let Some(var_182) = &input.addresses {
        let mut array_183 = object.key("Addresses").start_array();
        for item_184 in var_182 {
            {
                array_183.value().string(item_184.as_str());
            }
        }
        array_183.finish();
    }
    if let Some(var_185) = &input.lock_token {
        object.key("LockToken").string(var_185.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_managed_rule_set_version_expiry_date_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateManagedRuleSetVersionExpiryDateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_186) = &input.name {
        object.key("Name").string(var_186.as_str());
    }
    if let Some(var_187) = &input.scope {
        object.key("Scope").string(var_187.as_str());
    }
    if let Some(var_188) = &input.id {
        object.key("Id").string(var_188.as_str());
    }
    if let Some(var_189) = &input.lock_token {
        object.key("LockToken").string(var_189.as_str());
    }
    if let Some(var_190) = &input.version_to_expire {
        object.key("VersionToExpire").string(var_190.as_str());
    }
    if let Some(var_191) = &input.expiry_timestamp {
        object
            .key("ExpiryTimestamp")
            .date_time(var_191, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_regex_pattern_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRegexPatternSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_192) = &input.name {
        object.key("Name").string(var_192.as_str());
    }
    if let Some(var_193) = &input.scope {
        object.key("Scope").string(var_193.as_str());
    }
    if let Some(var_194) = &input.id {
        object.key("Id").string(var_194.as_str());
    }
    if let Some(var_195) = &input.description {
        object.key("Description").string(var_195.as_str());
    }
    if let Some(var_196) = &input.regular_expression_list {
        let mut array_197 = object.key("RegularExpressionList").start_array();
        for item_198 in var_196 {
            {
                let mut object_199 = array_197.value().start_object();
                crate::json_ser::serialize_structure_crate_model_regex(&mut object_199, item_198)?;
                object_199.finish();
            }
        }
        array_197.finish();
    }
    if let Some(var_200) = &input.lock_token {
        object.key("LockToken").string(var_200.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_rule_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRuleGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_201) = &input.name {
        object.key("Name").string(var_201.as_str());
    }
    if let Some(var_202) = &input.scope {
        object.key("Scope").string(var_202.as_str());
    }
    if let Some(var_203) = &input.id {
        object.key("Id").string(var_203.as_str());
    }
    if let Some(var_204) = &input.description {
        object.key("Description").string(var_204.as_str());
    }
    if let Some(var_205) = &input.rules {
        let mut array_206 = object.key("Rules").start_array();
        for item_207 in var_205 {
            {
                let mut object_208 = array_206.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule(&mut object_208, item_207)?;
                object_208.finish();
            }
        }
        array_206.finish();
    }
    if let Some(var_209) = &input.visibility_config {
        let mut object_210 = object.key("VisibilityConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_visibility_config(
            &mut object_210,
            var_209,
        )?;
        object_210.finish();
    }
    if let Some(var_211) = &input.lock_token {
        object.key("LockToken").string(var_211.as_str());
    }
    if let Some(var_212) = &input.custom_response_bodies {
        let mut object_213 = object.key("CustomResponseBodies").start_object();
        for (key_214, value_215) in var_212 {
            {
                let mut object_216 = object_213.key(key_214).start_object();
                crate::json_ser::serialize_structure_crate_model_custom_response_body(
                    &mut object_216,
                    value_215,
                )?;
                object_216.finish();
            }
        }
        object_213.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_web_acl_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWebAclInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_217) = &input.name {
        object.key("Name").string(var_217.as_str());
    }
    if let Some(var_218) = &input.scope {
        object.key("Scope").string(var_218.as_str());
    }
    if let Some(var_219) = &input.id {
        object.key("Id").string(var_219.as_str());
    }
    if let Some(var_220) = &input.default_action {
        let mut object_221 = object.key("DefaultAction").start_object();
        crate::json_ser::serialize_structure_crate_model_default_action(&mut object_221, var_220)?;
        object_221.finish();
    }
    if let Some(var_222) = &input.description {
        object.key("Description").string(var_222.as_str());
    }
    if let Some(var_223) = &input.rules {
        let mut array_224 = object.key("Rules").start_array();
        for item_225 in var_223 {
            {
                let mut object_226 = array_224.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule(&mut object_226, item_225)?;
                object_226.finish();
            }
        }
        array_224.finish();
    }
    if let Some(var_227) = &input.visibility_config {
        let mut object_228 = object.key("VisibilityConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_visibility_config(
            &mut object_228,
            var_227,
        )?;
        object_228.finish();
    }
    if let Some(var_229) = &input.lock_token {
        object.key("LockToken").string(var_229.as_str());
    }
    if let Some(var_230) = &input.custom_response_bodies {
        let mut object_231 = object.key("CustomResponseBodies").start_object();
        for (key_232, value_233) in var_230 {
            {
                let mut object_234 = object_231.key(key_232).start_object();
                crate::json_ser::serialize_structure_crate_model_custom_response_body(
                    &mut object_234,
                    value_233,
                )?;
                object_234.finish();
            }
        }
        object_231.finish();
    }
    if let Some(var_235) = &input.captcha_config {
        let mut object_236 = object.key("CaptchaConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_captcha_config(&mut object_236, var_235)?;
        object_236.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Rule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_237) = &input.name {
        object.key("Name").string(var_237.as_str());
    }
    {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.priority).into()),
        );
    }
    if let Some(var_238) = &input.statement {
        let mut object_239 = object.key("Statement").start_object();
        crate::json_ser::serialize_structure_crate_model_statement(&mut object_239, var_238)?;
        object_239.finish();
    }
    if let Some(var_240) = &input.action {
        let mut object_241 = object.key("Action").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_action(&mut object_241, var_240)?;
        object_241.finish();
    }
    if let Some(var_242) = &input.override_action {
        let mut object_243 = object.key("OverrideAction").start_object();
        crate::json_ser::serialize_structure_crate_model_override_action(&mut object_243, var_242)?;
        object_243.finish();
    }
    if let Some(var_244) = &input.rule_labels {
        let mut array_245 = object.key("RuleLabels").start_array();
        for item_246 in var_244 {
            {
                let mut object_247 = array_245.value().start_object();
                crate::json_ser::serialize_structure_crate_model_label(&mut object_247, item_246)?;
                object_247.finish();
            }
        }
        array_245.finish();
    }
    if let Some(var_248) = &input.visibility_config {
        let mut object_249 = object.key("VisibilityConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_visibility_config(
            &mut object_249,
            var_248,
        )?;
        object_249.finish();
    }
    if let Some(var_250) = &input.captcha_config {
        let mut object_251 = object.key("CaptchaConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_captcha_config(&mut object_251, var_250)?;
        object_251.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_252) = &input.key {
        object.key("Key").string(var_252.as_str());
    }
    if let Some(var_253) = &input.value {
        object.key("Value").string(var_253.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_regex(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Regex,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_254) = &input.regex_string {
        object.key("RegexString").string(var_254.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_visibility_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VisibilityConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object
            .key("SampledRequestsEnabled")
            .boolean(input.sampled_requests_enabled);
    }
    {
        object
            .key("CloudWatchMetricsEnabled")
            .boolean(input.cloud_watch_metrics_enabled);
    }
    if let Some(var_255) = &input.metric_name {
        object.key("MetricName").string(var_255.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_response_body(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomResponseBody,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_256) = &input.content_type {
        object.key("ContentType").string(var_256.as_str());
    }
    if let Some(var_257) = &input.content {
        object.key("Content").string(var_257.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_default_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DefaultAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_258) = &input.block {
        let mut object_259 = object.key("Block").start_object();
        crate::json_ser::serialize_structure_crate_model_block_action(&mut object_259, var_258)?;
        object_259.finish();
    }
    if let Some(var_260) = &input.allow {
        let mut object_261 = object.key("Allow").start_object();
        crate::json_ser::serialize_structure_crate_model_allow_action(&mut object_261, var_260)?;
        object_261.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_captcha_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CaptchaConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_262) = &input.immunity_time_property {
        let mut object_263 = object.key("ImmunityTimeProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_immunity_time_property(
            &mut object_263,
            var_262,
        )?;
        object_263.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_time_window(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TimeWindow,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_264) = &input.start_time {
        object
            .key("StartTime")
            .date_time(var_264, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_265) = &input.end_time {
        object
            .key("EndTime")
            .date_time(var_265, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_logging_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoggingConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_266) = &input.resource_arn {
        object.key("ResourceArn").string(var_266.as_str());
    }
    if let Some(var_267) = &input.log_destination_configs {
        let mut array_268 = object.key("LogDestinationConfigs").start_array();
        for item_269 in var_267 {
            {
                array_268.value().string(item_269.as_str());
            }
        }
        array_268.finish();
    }
    if let Some(var_270) = &input.redacted_fields {
        let mut array_271 = object.key("RedactedFields").start_array();
        for item_272 in var_270 {
            {
                let mut object_273 = array_271.value().start_object();
                crate::json_ser::serialize_structure_crate_model_field_to_match(
                    &mut object_273,
                    item_272,
                )?;
                object_273.finish();
            }
        }
        array_271.finish();
    }
    if input.managed_by_firewall_manager {
        object
            .key("ManagedByFirewallManager")
            .boolean(input.managed_by_firewall_manager);
    }
    if let Some(var_274) = &input.logging_filter {
        let mut object_275 = object.key("LoggingFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_logging_filter(&mut object_275, var_274)?;
        object_275.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_version_to_publish(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VersionToPublish,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_276) = &input.associated_rule_group_arn {
        object
            .key("AssociatedRuleGroupArn")
            .string(var_276.as_str());
    }
    if let Some(var_277) = &input.forecasted_lifetime {
        object.key("ForecastedLifetime").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_277).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_statement(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Statement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_278) = &input.byte_match_statement {
        let mut object_279 = object.key("ByteMatchStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_byte_match_statement(
            &mut object_279,
            var_278,
        )?;
        object_279.finish();
    }
    if let Some(var_280) = &input.sqli_match_statement {
        let mut object_281 = object.key("SqliMatchStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_sqli_match_statement(
            &mut object_281,
            var_280,
        )?;
        object_281.finish();
    }
    if let Some(var_282) = &input.xss_match_statement {
        let mut object_283 = object.key("XssMatchStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_xss_match_statement(
            &mut object_283,
            var_282,
        )?;
        object_283.finish();
    }
    if let Some(var_284) = &input.size_constraint_statement {
        let mut object_285 = object.key("SizeConstraintStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_size_constraint_statement(
            &mut object_285,
            var_284,
        )?;
        object_285.finish();
    }
    if let Some(var_286) = &input.geo_match_statement {
        let mut object_287 = object.key("GeoMatchStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_geo_match_statement(
            &mut object_287,
            var_286,
        )?;
        object_287.finish();
    }
    if let Some(var_288) = &input.rule_group_reference_statement {
        let mut object_289 = object.key("RuleGroupReferenceStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_group_reference_statement(
            &mut object_289,
            var_288,
        )?;
        object_289.finish();
    }
    if let Some(var_290) = &input.ip_set_reference_statement {
        let mut object_291 = object.key("IPSetReferenceStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_ip_set_reference_statement(
            &mut object_291,
            var_290,
        )?;
        object_291.finish();
    }
    if let Some(var_292) = &input.regex_pattern_set_reference_statement {
        let mut object_293 = object
            .key("RegexPatternSetReferenceStatement")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_regex_pattern_set_reference_statement(
            &mut object_293,
            var_292,
        )?;
        object_293.finish();
    }
    if let Some(var_294) = &input.rate_based_statement {
        let mut object_295 = object.key("RateBasedStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_rate_based_statement(
            &mut object_295,
            var_294,
        )?;
        object_295.finish();
    }
    if let Some(var_296) = &input.and_statement {
        let mut object_297 = object.key("AndStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_and_statement(&mut object_297, var_296)?;
        object_297.finish();
    }
    if let Some(var_298) = &input.or_statement {
        let mut object_299 = object.key("OrStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_or_statement(&mut object_299, var_298)?;
        object_299.finish();
    }
    if let Some(var_300) = &input.not_statement {
        let mut object_301 = object.key("NotStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_not_statement(&mut object_301, var_300)?;
        object_301.finish();
    }
    if let Some(var_302) = &input.managed_rule_group_statement {
        let mut object_303 = object.key("ManagedRuleGroupStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_managed_rule_group_statement(
            &mut object_303,
            var_302,
        )?;
        object_303.finish();
    }
    if let Some(var_304) = &input.label_match_statement {
        let mut object_305 = object.key("LabelMatchStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_label_match_statement(
            &mut object_305,
            var_304,
        )?;
        object_305.finish();
    }
    if let Some(var_306) = &input.regex_match_statement {
        let mut object_307 = object.key("RegexMatchStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_regex_match_statement(
            &mut object_307,
            var_306,
        )?;
        object_307.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_308) = &input.block {
        let mut object_309 = object.key("Block").start_object();
        crate::json_ser::serialize_structure_crate_model_block_action(&mut object_309, var_308)?;
        object_309.finish();
    }
    if let Some(var_310) = &input.allow {
        let mut object_311 = object.key("Allow").start_object();
        crate::json_ser::serialize_structure_crate_model_allow_action(&mut object_311, var_310)?;
        object_311.finish();
    }
    if let Some(var_312) = &input.count {
        let mut object_313 = object.key("Count").start_object();
        crate::json_ser::serialize_structure_crate_model_count_action(&mut object_313, var_312)?;
        object_313.finish();
    }
    if let Some(var_314) = &input.captcha {
        let mut object_315 = object.key("Captcha").start_object();
        crate::json_ser::serialize_structure_crate_model_captcha_action(&mut object_315, var_314)?;
        object_315.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_override_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OverrideAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_316) = &input.count {
        let mut object_317 = object.key("Count").start_object();
        crate::json_ser::serialize_structure_crate_model_count_action(&mut object_317, var_316)?;
        object_317.finish();
    }
    if let Some(var_318) = &input.none {
        let mut object_319 = object.key("None").start_object();
        crate::json_ser::serialize_structure_crate_model_none_action(&mut object_319, var_318)?;
        object_319.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_label(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Label,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_320) = &input.name {
        object.key("Name").string(var_320.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_block_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BlockAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_321) = &input.custom_response {
        let mut object_322 = object.key("CustomResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_response(&mut object_322, var_321)?;
        object_322.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_allow_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AllowAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_323) = &input.custom_request_handling {
        let mut object_324 = object.key("CustomRequestHandling").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_request_handling(
            &mut object_324,
            var_323,
        )?;
        object_324.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_immunity_time_property(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImmunityTimeProperty,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_325) = &input.immunity_time {
        object.key("ImmunityTime").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_325).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_field_to_match(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FieldToMatch,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_326) = &input.single_header {
        let mut object_327 = object.key("SingleHeader").start_object();
        crate::json_ser::serialize_structure_crate_model_single_header(&mut object_327, var_326)?;
        object_327.finish();
    }
    if let Some(var_328) = &input.single_query_argument {
        let mut object_329 = object.key("SingleQueryArgument").start_object();
        crate::json_ser::serialize_structure_crate_model_single_query_argument(
            &mut object_329,
            var_328,
        )?;
        object_329.finish();
    }
    if let Some(var_330) = &input.all_query_arguments {
        let mut object_331 = object.key("AllQueryArguments").start_object();
        crate::json_ser::serialize_structure_crate_model_all_query_arguments(
            &mut object_331,
            var_330,
        )?;
        object_331.finish();
    }
    if let Some(var_332) = &input.uri_path {
        let mut object_333 = object.key("UriPath").start_object();
        crate::json_ser::serialize_structure_crate_model_uri_path(&mut object_333, var_332)?;
        object_333.finish();
    }
    if let Some(var_334) = &input.query_string {
        let mut object_335 = object.key("QueryString").start_object();
        crate::json_ser::serialize_structure_crate_model_query_string(&mut object_335, var_334)?;
        object_335.finish();
    }
    if let Some(var_336) = &input.body {
        let mut object_337 = object.key("Body").start_object();
        crate::json_ser::serialize_structure_crate_model_body(&mut object_337, var_336)?;
        object_337.finish();
    }
    if let Some(var_338) = &input.method {
        let mut object_339 = object.key("Method").start_object();
        crate::json_ser::serialize_structure_crate_model_method(&mut object_339, var_338)?;
        object_339.finish();
    }
    if let Some(var_340) = &input.json_body {
        let mut object_341 = object.key("JsonBody").start_object();
        crate::json_ser::serialize_structure_crate_model_json_body(&mut object_341, var_340)?;
        object_341.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_logging_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoggingFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_342) = &input.filters {
        let mut array_343 = object.key("Filters").start_array();
        for item_344 in var_342 {
            {
                let mut object_345 = array_343.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_345, item_344)?;
                object_345.finish();
            }
        }
        array_343.finish();
    }
    if let Some(var_346) = &input.default_behavior {
        object.key("DefaultBehavior").string(var_346.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_byte_match_statement(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ByteMatchStatement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_347) = &input.search_string {
        object
            .key("SearchString")
            .string_unchecked(&aws_smithy_types::base64::encode(var_347));
    }
    if let Some(var_348) = &input.field_to_match {
        let mut object_349 = object.key("FieldToMatch").start_object();
        crate::json_ser::serialize_structure_crate_model_field_to_match(&mut object_349, var_348)?;
        object_349.finish();
    }
    if let Some(var_350) = &input.text_transformations {
        let mut array_351 = object.key("TextTransformations").start_array();
        for item_352 in var_350 {
            {
                let mut object_353 = array_351.value().start_object();
                crate::json_ser::serialize_structure_crate_model_text_transformation(
                    &mut object_353,
                    item_352,
                )?;
                object_353.finish();
            }
        }
        array_351.finish();
    }
    if let Some(var_354) = &input.positional_constraint {
        object.key("PositionalConstraint").string(var_354.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sqli_match_statement(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SqliMatchStatement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_355) = &input.field_to_match {
        let mut object_356 = object.key("FieldToMatch").start_object();
        crate::json_ser::serialize_structure_crate_model_field_to_match(&mut object_356, var_355)?;
        object_356.finish();
    }
    if let Some(var_357) = &input.text_transformations {
        let mut array_358 = object.key("TextTransformations").start_array();
        for item_359 in var_357 {
            {
                let mut object_360 = array_358.value().start_object();
                crate::json_ser::serialize_structure_crate_model_text_transformation(
                    &mut object_360,
                    item_359,
                )?;
                object_360.finish();
            }
        }
        array_358.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_xss_match_statement(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::XssMatchStatement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_361) = &input.field_to_match {
        let mut object_362 = object.key("FieldToMatch").start_object();
        crate::json_ser::serialize_structure_crate_model_field_to_match(&mut object_362, var_361)?;
        object_362.finish();
    }
    if let Some(var_363) = &input.text_transformations {
        let mut array_364 = object.key("TextTransformations").start_array();
        for item_365 in var_363 {
            {
                let mut object_366 = array_364.value().start_object();
                crate::json_ser::serialize_structure_crate_model_text_transformation(
                    &mut object_366,
                    item_365,
                )?;
                object_366.finish();
            }
        }
        array_364.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_size_constraint_statement(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SizeConstraintStatement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_367) = &input.field_to_match {
        let mut object_368 = object.key("FieldToMatch").start_object();
        crate::json_ser::serialize_structure_crate_model_field_to_match(&mut object_368, var_367)?;
        object_368.finish();
    }
    if let Some(var_369) = &input.comparison_operator {
        object.key("ComparisonOperator").string(var_369.as_str());
    }
    {
        object.key("Size").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.size).into()),
        );
    }
    if let Some(var_370) = &input.text_transformations {
        let mut array_371 = object.key("TextTransformations").start_array();
        for item_372 in var_370 {
            {
                let mut object_373 = array_371.value().start_object();
                crate::json_ser::serialize_structure_crate_model_text_transformation(
                    &mut object_373,
                    item_372,
                )?;
                object_373.finish();
            }
        }
        array_371.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_geo_match_statement(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GeoMatchStatement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_374) = &input.country_codes {
        let mut array_375 = object.key("CountryCodes").start_array();
        for item_376 in var_374 {
            {
                array_375.value().string(item_376.as_str());
            }
        }
        array_375.finish();
    }
    if let Some(var_377) = &input.forwarded_ip_config {
        let mut object_378 = object.key("ForwardedIPConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_forwarded_ip_config(
            &mut object_378,
            var_377,
        )?;
        object_378.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_reference_statement(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupReferenceStatement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_379) = &input.arn {
        object.key("ARN").string(var_379.as_str());
    }
    if let Some(var_380) = &input.excluded_rules {
        let mut array_381 = object.key("ExcludedRules").start_array();
        for item_382 in var_380 {
            {
                let mut object_383 = array_381.value().start_object();
                crate::json_ser::serialize_structure_crate_model_excluded_rule(
                    &mut object_383,
                    item_382,
                )?;
                object_383.finish();
            }
        }
        array_381.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ip_set_reference_statement(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IpSetReferenceStatement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_384) = &input.arn {
        object.key("ARN").string(var_384.as_str());
    }
    if let Some(var_385) = &input.ip_set_forwarded_ip_config {
        let mut object_386 = object.key("IPSetForwardedIPConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_ip_set_forwarded_ip_config(
            &mut object_386,
            var_385,
        )?;
        object_386.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_regex_pattern_set_reference_statement(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RegexPatternSetReferenceStatement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_387) = &input.arn {
        object.key("ARN").string(var_387.as_str());
    }
    if let Some(var_388) = &input.field_to_match {
        let mut object_389 = object.key("FieldToMatch").start_object();
        crate::json_ser::serialize_structure_crate_model_field_to_match(&mut object_389, var_388)?;
        object_389.finish();
    }
    if let Some(var_390) = &input.text_transformations {
        let mut array_391 = object.key("TextTransformations").start_array();
        for item_392 in var_390 {
            {
                let mut object_393 = array_391.value().start_object();
                crate::json_ser::serialize_structure_crate_model_text_transformation(
                    &mut object_393,
                    item_392,
                )?;
                object_393.finish();
            }
        }
        array_391.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rate_based_statement(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RateBasedStatement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_394) = &input.aggregate_key_type {
        object.key("AggregateKeyType").string(var_394.as_str());
    }
    if let Some(var_395) = &input.scope_down_statement {
        let mut object_396 = object.key("ScopeDownStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_statement(&mut object_396, var_395)?;
        object_396.finish();
    }
    if let Some(var_397) = &input.forwarded_ip_config {
        let mut object_398 = object.key("ForwardedIPConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_forwarded_ip_config(
            &mut object_398,
            var_397,
        )?;
        object_398.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_and_statement(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AndStatement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_399) = &input.statements {
        let mut array_400 = object.key("Statements").start_array();
        for item_401 in var_399 {
            {
                let mut object_402 = array_400.value().start_object();
                crate::json_ser::serialize_structure_crate_model_statement(
                    &mut object_402,
                    item_401,
                )?;
                object_402.finish();
            }
        }
        array_400.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_or_statement(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OrStatement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_403) = &input.statements {
        let mut array_404 = object.key("Statements").start_array();
        for item_405 in var_403 {
            {
                let mut object_406 = array_404.value().start_object();
                crate::json_ser::serialize_structure_crate_model_statement(
                    &mut object_406,
                    item_405,
                )?;
                object_406.finish();
            }
        }
        array_404.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_not_statement(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NotStatement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_407) = &input.statement {
        let mut object_408 = object.key("Statement").start_object();
        crate::json_ser::serialize_structure_crate_model_statement(&mut object_408, var_407)?;
        object_408.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_managed_rule_group_statement(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ManagedRuleGroupStatement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_409) = &input.vendor_name {
        object.key("VendorName").string(var_409.as_str());
    }
    if let Some(var_410) = &input.name {
        object.key("Name").string(var_410.as_str());
    }
    if let Some(var_411) = &input.version {
        object.key("Version").string(var_411.as_str());
    }
    if let Some(var_412) = &input.excluded_rules {
        let mut array_413 = object.key("ExcludedRules").start_array();
        for item_414 in var_412 {
            {
                let mut object_415 = array_413.value().start_object();
                crate::json_ser::serialize_structure_crate_model_excluded_rule(
                    &mut object_415,
                    item_414,
                )?;
                object_415.finish();
            }
        }
        array_413.finish();
    }
    if let Some(var_416) = &input.scope_down_statement {
        let mut object_417 = object.key("ScopeDownStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_statement(&mut object_417, var_416)?;
        object_417.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_label_match_statement(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelMatchStatement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_418) = &input.scope {
        object.key("Scope").string(var_418.as_str());
    }
    if let Some(var_419) = &input.key {
        object.key("Key").string(var_419.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_regex_match_statement(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RegexMatchStatement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_420) = &input.regex_string {
        object.key("RegexString").string(var_420.as_str());
    }
    if let Some(var_421) = &input.field_to_match {
        let mut object_422 = object.key("FieldToMatch").start_object();
        crate::json_ser::serialize_structure_crate_model_field_to_match(&mut object_422, var_421)?;
        object_422.finish();
    }
    if let Some(var_423) = &input.text_transformations {
        let mut array_424 = object.key("TextTransformations").start_array();
        for item_425 in var_423 {
            {
                let mut object_426 = array_424.value().start_object();
                crate::json_ser::serialize_structure_crate_model_text_transformation(
                    &mut object_426,
                    item_425,
                )?;
                object_426.finish();
            }
        }
        array_424.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_count_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CountAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_427) = &input.custom_request_handling {
        let mut object_428 = object.key("CustomRequestHandling").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_request_handling(
            &mut object_428,
            var_427,
        )?;
        object_428.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_captcha_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CaptchaAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_429) = &input.custom_request_handling {
        let mut object_430 = object.key("CustomRequestHandling").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_request_handling(
            &mut object_430,
            var_429,
        )?;
        object_430.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_none_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NoneAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let (_, _) = (object, input);
    Ok(())
}

pub fn serialize_structure_crate_model_custom_response(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomResponse,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_431) = &input.response_code {
        object.key("ResponseCode").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_431).into()),
        );
    }
    if let Some(var_432) = &input.custom_response_body_key {
        object.key("CustomResponseBodyKey").string(var_432.as_str());
    }
    if let Some(var_433) = &input.response_headers {
        let mut array_434 = object.key("ResponseHeaders").start_array();
        for item_435 in var_433 {
            {
                let mut object_436 = array_434.value().start_object();
                crate::json_ser::serialize_structure_crate_model_custom_http_header(
                    &mut object_436,
                    item_435,
                )?;
                object_436.finish();
            }
        }
        array_434.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_request_handling(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomRequestHandling,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_437) = &input.insert_headers {
        let mut array_438 = object.key("InsertHeaders").start_array();
        for item_439 in var_437 {
            {
                let mut object_440 = array_438.value().start_object();
                crate::json_ser::serialize_structure_crate_model_custom_http_header(
                    &mut object_440,
                    item_439,
                )?;
                object_440.finish();
            }
        }
        array_438.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_single_header(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SingleHeader,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_441) = &input.name {
        object.key("Name").string(var_441.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_single_query_argument(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SingleQueryArgument,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_442) = &input.name {
        object.key("Name").string(var_442.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_all_query_arguments(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AllQueryArguments,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let (_, _) = (object, input);
    Ok(())
}

pub fn serialize_structure_crate_model_uri_path(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UriPath,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let (_, _) = (object, input);
    Ok(())
}

pub fn serialize_structure_crate_model_query_string(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::QueryString,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let (_, _) = (object, input);
    Ok(())
}

pub fn serialize_structure_crate_model_body(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Body,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let (_, _) = (object, input);
    Ok(())
}

pub fn serialize_structure_crate_model_method(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Method,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let (_, _) = (object, input);
    Ok(())
}

pub fn serialize_structure_crate_model_json_body(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JsonBody,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_443) = &input.match_pattern {
        let mut object_444 = object.key("MatchPattern").start_object();
        crate::json_ser::serialize_structure_crate_model_json_match_pattern(
            &mut object_444,
            var_443,
        )?;
        object_444.finish();
    }
    if let Some(var_445) = &input.match_scope {
        object.key("MatchScope").string(var_445.as_str());
    }
    if let Some(var_446) = &input.invalid_fallback_behavior {
        object
            .key("InvalidFallbackBehavior")
            .string(var_446.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Filter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_447) = &input.behavior {
        object.key("Behavior").string(var_447.as_str());
    }
    if let Some(var_448) = &input.requirement {
        object.key("Requirement").string(var_448.as_str());
    }
    if let Some(var_449) = &input.conditions {
        let mut array_450 = object.key("Conditions").start_array();
        for item_451 in var_449 {
            {
                let mut object_452 = array_450.value().start_object();
                crate::json_ser::serialize_structure_crate_model_condition(
                    &mut object_452,
                    item_451,
                )?;
                object_452.finish();
            }
        }
        array_450.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_text_transformation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TextTransformation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.priority).into()),
        );
    }
    if let Some(var_453) = &input.r#type {
        object.key("Type").string(var_453.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_forwarded_ip_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ForwardedIpConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_454) = &input.header_name {
        object.key("HeaderName").string(var_454.as_str());
    }
    if let Some(var_455) = &input.fallback_behavior {
        object.key("FallbackBehavior").string(var_455.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_excluded_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExcludedRule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_456) = &input.name {
        object.key("Name").string(var_456.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ip_set_forwarded_ip_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IpSetForwardedIpConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_457) = &input.header_name {
        object.key("HeaderName").string(var_457.as_str());
    }
    if let Some(var_458) = &input.fallback_behavior {
        object.key("FallbackBehavior").string(var_458.as_str());
    }
    if let Some(var_459) = &input.position {
        object.key("Position").string(var_459.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_http_header(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomHttpHeader,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_460) = &input.name {
        object.key("Name").string(var_460.as_str());
    }
    if let Some(var_461) = &input.value {
        object.key("Value").string(var_461.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_json_match_pattern(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JsonMatchPattern,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_462) = &input.all {
        let mut object_463 = object.key("All").start_object();
        crate::json_ser::serialize_structure_crate_model_all(&mut object_463, var_462)?;
        object_463.finish();
    }
    if let Some(var_464) = &input.included_paths {
        let mut array_465 = object.key("IncludedPaths").start_array();
        for item_466 in var_464 {
            {
                array_465.value().string(item_466.as_str());
            }
        }
        array_465.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Condition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_467) = &input.action_condition {
        let mut object_468 = object.key("ActionCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_action_condition(
            &mut object_468,
            var_467,
        )?;
        object_468.finish();
    }
    if let Some(var_469) = &input.label_name_condition {
        let mut object_470 = object.key("LabelNameCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_label_name_condition(
            &mut object_470,
            var_469,
        )?;
        object_470.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_all(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::All,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let (_, _) = (object, input);
    Ok(())
}

pub fn serialize_structure_crate_model_action_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ActionCondition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_471) = &input.action {
        object.key("Action").string(var_471.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_label_name_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelNameCondition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_472) = &input.label_name {
        object.key("LabelName").string(var_472.as_str());
    }
    Ok(())
}
