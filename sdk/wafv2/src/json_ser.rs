// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_web_acl_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateWebAclInput,
) {
    if let Some(var_1) = &input.web_acl_arn {
        object.key("WebACLArn").string(var_1);
    }
    if let Some(var_2) = &input.resource_arn {
        object.key("ResourceArn").string(var_2);
    }
}

pub fn serialize_structure_crate_input_check_capacity_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CheckCapacityInput,
) {
    if let Some(var_3) = &input.scope {
        object.key("Scope").string(var_3.as_str());
    }
    if let Some(var_4) = &input.rules {
        let mut array_5 = object.key("Rules").start_array();
        for item_6 in var_4 {
            {
                let mut object_7 = array_5.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule(&mut object_7, item_6);
                object_7.finish();
            }
        }
        array_5.finish();
    }
}

pub fn serialize_structure_crate_input_create_ip_set_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateIpSetInput,
) {
    if let Some(var_8) = &input.name {
        object.key("Name").string(var_8);
    }
    if let Some(var_9) = &input.scope {
        object.key("Scope").string(var_9.as_str());
    }
    if let Some(var_10) = &input.description {
        object.key("Description").string(var_10);
    }
    if let Some(var_11) = &input.ip_address_version {
        object.key("IPAddressVersion").string(var_11.as_str());
    }
    if let Some(var_12) = &input.addresses {
        let mut array_13 = object.key("Addresses").start_array();
        for item_14 in var_12 {
            {
                array_13.value().string(item_14);
            }
        }
        array_13.finish();
    }
    if let Some(var_15) = &input.tags {
        let mut array_16 = object.key("Tags").start_array();
        for item_17 in var_15 {
            {
                let mut object_18 = array_16.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_18, item_17);
                object_18.finish();
            }
        }
        array_16.finish();
    }
}

pub fn serialize_structure_crate_input_create_regex_pattern_set_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRegexPatternSetInput,
) {
    if let Some(var_19) = &input.name {
        object.key("Name").string(var_19);
    }
    if let Some(var_20) = &input.scope {
        object.key("Scope").string(var_20.as_str());
    }
    if let Some(var_21) = &input.description {
        object.key("Description").string(var_21);
    }
    if let Some(var_22) = &input.regular_expression_list {
        let mut array_23 = object.key("RegularExpressionList").start_array();
        for item_24 in var_22 {
            {
                let mut object_25 = array_23.value().start_object();
                crate::json_ser::serialize_structure_crate_model_regex(&mut object_25, item_24);
                object_25.finish();
            }
        }
        array_23.finish();
    }
    if let Some(var_26) = &input.tags {
        let mut array_27 = object.key("Tags").start_array();
        for item_28 in var_26 {
            {
                let mut object_29 = array_27.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_29, item_28);
                object_29.finish();
            }
        }
        array_27.finish();
    }
}

pub fn serialize_structure_crate_input_create_rule_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRuleGroupInput,
) {
    if let Some(var_30) = &input.name {
        object.key("Name").string(var_30);
    }
    if let Some(var_31) = &input.scope {
        object.key("Scope").string(var_31.as_str());
    }
    {
        object.key("Capacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.capacity).into()),
        );
    }
    if let Some(var_32) = &input.description {
        object.key("Description").string(var_32);
    }
    if let Some(var_33) = &input.rules {
        let mut array_34 = object.key("Rules").start_array();
        for item_35 in var_33 {
            {
                let mut object_36 = array_34.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule(&mut object_36, item_35);
                object_36.finish();
            }
        }
        array_34.finish();
    }
    if let Some(var_37) = &input.visibility_config {
        let mut object_38 = object.key("VisibilityConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_visibility_config(&mut object_38, var_37);
        object_38.finish();
    }
    if let Some(var_39) = &input.tags {
        let mut array_40 = object.key("Tags").start_array();
        for item_41 in var_39 {
            {
                let mut object_42 = array_40.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_42, item_41);
                object_42.finish();
            }
        }
        array_40.finish();
    }
    if let Some(var_43) = &input.custom_response_bodies {
        let mut object_44 = object.key("CustomResponseBodies").start_object();
        for (key_45, value_46) in var_43 {
            {
                let mut object_47 = object_44.key(key_45).start_object();
                crate::json_ser::serialize_structure_crate_model_custom_response_body(
                    &mut object_47,
                    value_46,
                );
                object_47.finish();
            }
        }
        object_44.finish();
    }
}

pub fn serialize_structure_crate_input_create_web_acl_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWebAclInput,
) {
    if let Some(var_48) = &input.name {
        object.key("Name").string(var_48);
    }
    if let Some(var_49) = &input.scope {
        object.key("Scope").string(var_49.as_str());
    }
    if let Some(var_50) = &input.default_action {
        let mut object_51 = object.key("DefaultAction").start_object();
        crate::json_ser::serialize_structure_crate_model_default_action(&mut object_51, var_50);
        object_51.finish();
    }
    if let Some(var_52) = &input.description {
        object.key("Description").string(var_52);
    }
    if let Some(var_53) = &input.rules {
        let mut array_54 = object.key("Rules").start_array();
        for item_55 in var_53 {
            {
                let mut object_56 = array_54.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule(&mut object_56, item_55);
                object_56.finish();
            }
        }
        array_54.finish();
    }
    if let Some(var_57) = &input.visibility_config {
        let mut object_58 = object.key("VisibilityConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_visibility_config(&mut object_58, var_57);
        object_58.finish();
    }
    if let Some(var_59) = &input.tags {
        let mut array_60 = object.key("Tags").start_array();
        for item_61 in var_59 {
            {
                let mut object_62 = array_60.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_62, item_61);
                object_62.finish();
            }
        }
        array_60.finish();
    }
    if let Some(var_63) = &input.custom_response_bodies {
        let mut object_64 = object.key("CustomResponseBodies").start_object();
        for (key_65, value_66) in var_63 {
            {
                let mut object_67 = object_64.key(key_65).start_object();
                crate::json_ser::serialize_structure_crate_model_custom_response_body(
                    &mut object_67,
                    value_66,
                );
                object_67.finish();
            }
        }
        object_64.finish();
    }
}

pub fn serialize_structure_crate_input_delete_firewall_manager_rule_groups_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFirewallManagerRuleGroupsInput,
) {
    if let Some(var_68) = &input.web_acl_arn {
        object.key("WebACLArn").string(var_68);
    }
    if let Some(var_69) = &input.web_acl_lock_token {
        object.key("WebACLLockToken").string(var_69);
    }
}

pub fn serialize_structure_crate_input_delete_ip_set_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteIpSetInput,
) {
    if let Some(var_70) = &input.name {
        object.key("Name").string(var_70);
    }
    if let Some(var_71) = &input.scope {
        object.key("Scope").string(var_71.as_str());
    }
    if let Some(var_72) = &input.id {
        object.key("Id").string(var_72);
    }
    if let Some(var_73) = &input.lock_token {
        object.key("LockToken").string(var_73);
    }
}

pub fn serialize_structure_crate_input_delete_logging_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteLoggingConfigurationInput,
) {
    if let Some(var_74) = &input.resource_arn {
        object.key("ResourceArn").string(var_74);
    }
}

pub fn serialize_structure_crate_input_delete_permission_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePermissionPolicyInput,
) {
    if let Some(var_75) = &input.resource_arn {
        object.key("ResourceArn").string(var_75);
    }
}

pub fn serialize_structure_crate_input_delete_regex_pattern_set_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRegexPatternSetInput,
) {
    if let Some(var_76) = &input.name {
        object.key("Name").string(var_76);
    }
    if let Some(var_77) = &input.scope {
        object.key("Scope").string(var_77.as_str());
    }
    if let Some(var_78) = &input.id {
        object.key("Id").string(var_78);
    }
    if let Some(var_79) = &input.lock_token {
        object.key("LockToken").string(var_79);
    }
}

pub fn serialize_structure_crate_input_delete_rule_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRuleGroupInput,
) {
    if let Some(var_80) = &input.name {
        object.key("Name").string(var_80);
    }
    if let Some(var_81) = &input.scope {
        object.key("Scope").string(var_81.as_str());
    }
    if let Some(var_82) = &input.id {
        object.key("Id").string(var_82);
    }
    if let Some(var_83) = &input.lock_token {
        object.key("LockToken").string(var_83);
    }
}

pub fn serialize_structure_crate_input_delete_web_acl_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteWebAclInput,
) {
    if let Some(var_84) = &input.name {
        object.key("Name").string(var_84);
    }
    if let Some(var_85) = &input.scope {
        object.key("Scope").string(var_85.as_str());
    }
    if let Some(var_86) = &input.id {
        object.key("Id").string(var_86);
    }
    if let Some(var_87) = &input.lock_token {
        object.key("LockToken").string(var_87);
    }
}

pub fn serialize_structure_crate_input_describe_managed_rule_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeManagedRuleGroupInput,
) {
    if let Some(var_88) = &input.vendor_name {
        object.key("VendorName").string(var_88);
    }
    if let Some(var_89) = &input.name {
        object.key("Name").string(var_89);
    }
    if let Some(var_90) = &input.scope {
        object.key("Scope").string(var_90.as_str());
    }
    if let Some(var_91) = &input.version_name {
        object.key("VersionName").string(var_91);
    }
}

pub fn serialize_structure_crate_input_disassociate_web_acl_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateWebAclInput,
) {
    if let Some(var_92) = &input.resource_arn {
        object.key("ResourceArn").string(var_92);
    }
}

pub fn serialize_structure_crate_input_get_ip_set_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetIpSetInput,
) {
    if let Some(var_93) = &input.name {
        object.key("Name").string(var_93);
    }
    if let Some(var_94) = &input.scope {
        object.key("Scope").string(var_94.as_str());
    }
    if let Some(var_95) = &input.id {
        object.key("Id").string(var_95);
    }
}

pub fn serialize_structure_crate_input_get_logging_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetLoggingConfigurationInput,
) {
    if let Some(var_96) = &input.resource_arn {
        object.key("ResourceArn").string(var_96);
    }
}

pub fn serialize_structure_crate_input_get_managed_rule_set_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetManagedRuleSetInput,
) {
    if let Some(var_97) = &input.name {
        object.key("Name").string(var_97);
    }
    if let Some(var_98) = &input.scope {
        object.key("Scope").string(var_98.as_str());
    }
    if let Some(var_99) = &input.id {
        object.key("Id").string(var_99);
    }
}

pub fn serialize_structure_crate_input_get_permission_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPermissionPolicyInput,
) {
    if let Some(var_100) = &input.resource_arn {
        object.key("ResourceArn").string(var_100);
    }
}

pub fn serialize_structure_crate_input_get_rate_based_statement_managed_keys_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRateBasedStatementManagedKeysInput,
) {
    if let Some(var_101) = &input.scope {
        object.key("Scope").string(var_101.as_str());
    }
    if let Some(var_102) = &input.web_acl_name {
        object.key("WebACLName").string(var_102);
    }
    if let Some(var_103) = &input.web_acl_id {
        object.key("WebACLId").string(var_103);
    }
    if let Some(var_104) = &input.rule_group_rule_name {
        object.key("RuleGroupRuleName").string(var_104);
    }
    if let Some(var_105) = &input.rule_name {
        object.key("RuleName").string(var_105);
    }
}

pub fn serialize_structure_crate_input_get_regex_pattern_set_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRegexPatternSetInput,
) {
    if let Some(var_106) = &input.name {
        object.key("Name").string(var_106);
    }
    if let Some(var_107) = &input.scope {
        object.key("Scope").string(var_107.as_str());
    }
    if let Some(var_108) = &input.id {
        object.key("Id").string(var_108);
    }
}

pub fn serialize_structure_crate_input_get_rule_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRuleGroupInput,
) {
    if let Some(var_109) = &input.name {
        object.key("Name").string(var_109);
    }
    if let Some(var_110) = &input.scope {
        object.key("Scope").string(var_110.as_str());
    }
    if let Some(var_111) = &input.id {
        object.key("Id").string(var_111);
    }
    if let Some(var_112) = &input.arn {
        object.key("ARN").string(var_112);
    }
}

pub fn serialize_structure_crate_input_get_sampled_requests_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSampledRequestsInput,
) {
    if let Some(var_113) = &input.web_acl_arn {
        object.key("WebAclArn").string(var_113);
    }
    if let Some(var_114) = &input.rule_metric_name {
        object.key("RuleMetricName").string(var_114);
    }
    if let Some(var_115) = &input.scope {
        object.key("Scope").string(var_115.as_str());
    }
    if let Some(var_116) = &input.time_window {
        let mut object_117 = object.key("TimeWindow").start_object();
        crate::json_ser::serialize_structure_crate_model_time_window(&mut object_117, var_116);
        object_117.finish();
    }
    {
        object.key("MaxItems").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_items).into()),
        );
    }
}

pub fn serialize_structure_crate_input_get_web_acl_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWebAclInput,
) {
    if let Some(var_118) = &input.name {
        object.key("Name").string(var_118);
    }
    if let Some(var_119) = &input.scope {
        object.key("Scope").string(var_119.as_str());
    }
    if let Some(var_120) = &input.id {
        object.key("Id").string(var_120);
    }
}

pub fn serialize_structure_crate_input_get_web_acl_for_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWebAclForResourceInput,
) {
    if let Some(var_121) = &input.resource_arn {
        object.key("ResourceArn").string(var_121);
    }
}

pub fn serialize_structure_crate_input_list_available_managed_rule_groups_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAvailableManagedRuleGroupsInput,
) {
    if let Some(var_122) = &input.scope {
        object.key("Scope").string(var_122.as_str());
    }
    if let Some(var_123) = &input.next_marker {
        object.key("NextMarker").string(var_123);
    }
    if let Some(var_124) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_124).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_available_managed_rule_group_versions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAvailableManagedRuleGroupVersionsInput,
) {
    if let Some(var_125) = &input.vendor_name {
        object.key("VendorName").string(var_125);
    }
    if let Some(var_126) = &input.name {
        object.key("Name").string(var_126);
    }
    if let Some(var_127) = &input.scope {
        object.key("Scope").string(var_127.as_str());
    }
    if let Some(var_128) = &input.next_marker {
        object.key("NextMarker").string(var_128);
    }
    if let Some(var_129) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_129).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_ip_sets_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListIpSetsInput,
) {
    if let Some(var_130) = &input.scope {
        object.key("Scope").string(var_130.as_str());
    }
    if let Some(var_131) = &input.next_marker {
        object.key("NextMarker").string(var_131);
    }
    if let Some(var_132) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_132).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_logging_configurations_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListLoggingConfigurationsInput,
) {
    if let Some(var_133) = &input.scope {
        object.key("Scope").string(var_133.as_str());
    }
    if let Some(var_134) = &input.next_marker {
        object.key("NextMarker").string(var_134);
    }
    if let Some(var_135) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_135).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_managed_rule_sets_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListManagedRuleSetsInput,
) {
    if let Some(var_136) = &input.scope {
        object.key("Scope").string(var_136.as_str());
    }
    if let Some(var_137) = &input.next_marker {
        object.key("NextMarker").string(var_137);
    }
    if let Some(var_138) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_138).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_regex_pattern_sets_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListRegexPatternSetsInput,
) {
    if let Some(var_139) = &input.scope {
        object.key("Scope").string(var_139.as_str());
    }
    if let Some(var_140) = &input.next_marker {
        object.key("NextMarker").string(var_140);
    }
    if let Some(var_141) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_141).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_resources_for_web_acl_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListResourcesForWebAclInput,
) {
    if let Some(var_142) = &input.web_acl_arn {
        object.key("WebACLArn").string(var_142);
    }
    if let Some(var_143) = &input.resource_type {
        object.key("ResourceType").string(var_143.as_str());
    }
}

pub fn serialize_structure_crate_input_list_rule_groups_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListRuleGroupsInput,
) {
    if let Some(var_144) = &input.scope {
        object.key("Scope").string(var_144.as_str());
    }
    if let Some(var_145) = &input.next_marker {
        object.key("NextMarker").string(var_145);
    }
    if let Some(var_146) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_146).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) {
    if let Some(var_147) = &input.next_marker {
        object.key("NextMarker").string(var_147);
    }
    if let Some(var_148) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_148).into()),
        );
    }
    if let Some(var_149) = &input.resource_arn {
        object.key("ResourceARN").string(var_149);
    }
}

pub fn serialize_structure_crate_input_list_web_ac_ls_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListWebAcLsInput,
) {
    if let Some(var_150) = &input.scope {
        object.key("Scope").string(var_150.as_str());
    }
    if let Some(var_151) = &input.next_marker {
        object.key("NextMarker").string(var_151);
    }
    if let Some(var_152) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_152).into()),
        );
    }
}

pub fn serialize_structure_crate_input_put_logging_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutLoggingConfigurationInput,
) {
    if let Some(var_153) = &input.logging_configuration {
        let mut object_154 = object.key("LoggingConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_logging_configuration(
            &mut object_154,
            var_153,
        );
        object_154.finish();
    }
}

pub fn serialize_structure_crate_input_put_managed_rule_set_versions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutManagedRuleSetVersionsInput,
) {
    if let Some(var_155) = &input.name {
        object.key("Name").string(var_155);
    }
    if let Some(var_156) = &input.scope {
        object.key("Scope").string(var_156.as_str());
    }
    if let Some(var_157) = &input.id {
        object.key("Id").string(var_157);
    }
    if let Some(var_158) = &input.lock_token {
        object.key("LockToken").string(var_158);
    }
    if let Some(var_159) = &input.recommended_version {
        object.key("RecommendedVersion").string(var_159);
    }
    if let Some(var_160) = &input.versions_to_publish {
        let mut object_161 = object.key("VersionsToPublish").start_object();
        for (key_162, value_163) in var_160 {
            {
                let mut object_164 = object_161.key(key_162).start_object();
                crate::json_ser::serialize_structure_crate_model_version_to_publish(
                    &mut object_164,
                    value_163,
                );
                object_164.finish();
            }
        }
        object_161.finish();
    }
}

pub fn serialize_structure_crate_input_put_permission_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutPermissionPolicyInput,
) {
    if let Some(var_165) = &input.resource_arn {
        object.key("ResourceArn").string(var_165);
    }
    if let Some(var_166) = &input.policy {
        object.key("Policy").string(var_166);
    }
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_167) = &input.resource_arn {
        object.key("ResourceARN").string(var_167);
    }
    if let Some(var_168) = &input.tags {
        let mut array_169 = object.key("Tags").start_array();
        for item_170 in var_168 {
            {
                let mut object_171 = array_169.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_171, item_170);
                object_171.finish();
            }
        }
        array_169.finish();
    }
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) {
    if let Some(var_172) = &input.resource_arn {
        object.key("ResourceARN").string(var_172);
    }
    if let Some(var_173) = &input.tag_keys {
        let mut array_174 = object.key("TagKeys").start_array();
        for item_175 in var_173 {
            {
                array_174.value().string(item_175);
            }
        }
        array_174.finish();
    }
}

pub fn serialize_structure_crate_input_update_ip_set_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateIpSetInput,
) {
    if let Some(var_176) = &input.name {
        object.key("Name").string(var_176);
    }
    if let Some(var_177) = &input.scope {
        object.key("Scope").string(var_177.as_str());
    }
    if let Some(var_178) = &input.id {
        object.key("Id").string(var_178);
    }
    if let Some(var_179) = &input.description {
        object.key("Description").string(var_179);
    }
    if let Some(var_180) = &input.addresses {
        let mut array_181 = object.key("Addresses").start_array();
        for item_182 in var_180 {
            {
                array_181.value().string(item_182);
            }
        }
        array_181.finish();
    }
    if let Some(var_183) = &input.lock_token {
        object.key("LockToken").string(var_183);
    }
}

pub fn serialize_structure_crate_input_update_managed_rule_set_version_expiry_date_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateManagedRuleSetVersionExpiryDateInput,
) {
    if let Some(var_184) = &input.name {
        object.key("Name").string(var_184);
    }
    if let Some(var_185) = &input.scope {
        object.key("Scope").string(var_185.as_str());
    }
    if let Some(var_186) = &input.id {
        object.key("Id").string(var_186);
    }
    if let Some(var_187) = &input.lock_token {
        object.key("LockToken").string(var_187);
    }
    if let Some(var_188) = &input.version_to_expire {
        object.key("VersionToExpire").string(var_188);
    }
    if let Some(var_189) = &input.expiry_timestamp {
        object
            .key("ExpiryTimestamp")
            .instant(var_189, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_crate_input_update_regex_pattern_set_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRegexPatternSetInput,
) {
    if let Some(var_190) = &input.name {
        object.key("Name").string(var_190);
    }
    if let Some(var_191) = &input.scope {
        object.key("Scope").string(var_191.as_str());
    }
    if let Some(var_192) = &input.id {
        object.key("Id").string(var_192);
    }
    if let Some(var_193) = &input.description {
        object.key("Description").string(var_193);
    }
    if let Some(var_194) = &input.regular_expression_list {
        let mut array_195 = object.key("RegularExpressionList").start_array();
        for item_196 in var_194 {
            {
                let mut object_197 = array_195.value().start_object();
                crate::json_ser::serialize_structure_crate_model_regex(&mut object_197, item_196);
                object_197.finish();
            }
        }
        array_195.finish();
    }
    if let Some(var_198) = &input.lock_token {
        object.key("LockToken").string(var_198);
    }
}

pub fn serialize_structure_crate_input_update_rule_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRuleGroupInput,
) {
    if let Some(var_199) = &input.name {
        object.key("Name").string(var_199);
    }
    if let Some(var_200) = &input.scope {
        object.key("Scope").string(var_200.as_str());
    }
    if let Some(var_201) = &input.id {
        object.key("Id").string(var_201);
    }
    if let Some(var_202) = &input.description {
        object.key("Description").string(var_202);
    }
    if let Some(var_203) = &input.rules {
        let mut array_204 = object.key("Rules").start_array();
        for item_205 in var_203 {
            {
                let mut object_206 = array_204.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule(&mut object_206, item_205);
                object_206.finish();
            }
        }
        array_204.finish();
    }
    if let Some(var_207) = &input.visibility_config {
        let mut object_208 = object.key("VisibilityConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_visibility_config(
            &mut object_208,
            var_207,
        );
        object_208.finish();
    }
    if let Some(var_209) = &input.lock_token {
        object.key("LockToken").string(var_209);
    }
    if let Some(var_210) = &input.custom_response_bodies {
        let mut object_211 = object.key("CustomResponseBodies").start_object();
        for (key_212, value_213) in var_210 {
            {
                let mut object_214 = object_211.key(key_212).start_object();
                crate::json_ser::serialize_structure_crate_model_custom_response_body(
                    &mut object_214,
                    value_213,
                );
                object_214.finish();
            }
        }
        object_211.finish();
    }
}

pub fn serialize_structure_crate_input_update_web_acl_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWebAclInput,
) {
    if let Some(var_215) = &input.name {
        object.key("Name").string(var_215);
    }
    if let Some(var_216) = &input.scope {
        object.key("Scope").string(var_216.as_str());
    }
    if let Some(var_217) = &input.id {
        object.key("Id").string(var_217);
    }
    if let Some(var_218) = &input.default_action {
        let mut object_219 = object.key("DefaultAction").start_object();
        crate::json_ser::serialize_structure_crate_model_default_action(&mut object_219, var_218);
        object_219.finish();
    }
    if let Some(var_220) = &input.description {
        object.key("Description").string(var_220);
    }
    if let Some(var_221) = &input.rules {
        let mut array_222 = object.key("Rules").start_array();
        for item_223 in var_221 {
            {
                let mut object_224 = array_222.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule(&mut object_224, item_223);
                object_224.finish();
            }
        }
        array_222.finish();
    }
    if let Some(var_225) = &input.visibility_config {
        let mut object_226 = object.key("VisibilityConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_visibility_config(
            &mut object_226,
            var_225,
        );
        object_226.finish();
    }
    if let Some(var_227) = &input.lock_token {
        object.key("LockToken").string(var_227);
    }
    if let Some(var_228) = &input.custom_response_bodies {
        let mut object_229 = object.key("CustomResponseBodies").start_object();
        for (key_230, value_231) in var_228 {
            {
                let mut object_232 = object_229.key(key_230).start_object();
                crate::json_ser::serialize_structure_crate_model_custom_response_body(
                    &mut object_232,
                    value_231,
                );
                object_232.finish();
            }
        }
        object_229.finish();
    }
}

pub fn serialize_structure_crate_model_rule(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Rule,
) {
    if let Some(var_233) = &input.name {
        object.key("Name").string(var_233);
    }
    {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.priority).into()),
        );
    }
    if let Some(var_234) = &input.statement {
        let mut object_235 = object.key("Statement").start_object();
        crate::json_ser::serialize_structure_crate_model_statement(&mut object_235, var_234);
        object_235.finish();
    }
    if let Some(var_236) = &input.action {
        let mut object_237 = object.key("Action").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_action(&mut object_237, var_236);
        object_237.finish();
    }
    if let Some(var_238) = &input.override_action {
        let mut object_239 = object.key("OverrideAction").start_object();
        crate::json_ser::serialize_structure_crate_model_override_action(&mut object_239, var_238);
        object_239.finish();
    }
    if let Some(var_240) = &input.rule_labels {
        let mut array_241 = object.key("RuleLabels").start_array();
        for item_242 in var_240 {
            {
                let mut object_243 = array_241.value().start_object();
                crate::json_ser::serialize_structure_crate_model_label(&mut object_243, item_242);
                object_243.finish();
            }
        }
        array_241.finish();
    }
    if let Some(var_244) = &input.visibility_config {
        let mut object_245 = object.key("VisibilityConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_visibility_config(
            &mut object_245,
            var_244,
        );
        object_245.finish();
    }
}

pub fn serialize_structure_crate_model_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_246) = &input.key {
        object.key("Key").string(var_246);
    }
    if let Some(var_247) = &input.value {
        object.key("Value").string(var_247);
    }
}

pub fn serialize_structure_crate_model_regex(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Regex,
) {
    if let Some(var_248) = &input.regex_string {
        object.key("RegexString").string(var_248);
    }
}

pub fn serialize_structure_crate_model_visibility_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VisibilityConfig,
) {
    {
        object
            .key("SampledRequestsEnabled")
            .boolean(input.sampled_requests_enabled);
    }
    {
        object
            .key("CloudWatchMetricsEnabled")
            .boolean(input.cloud_watch_metrics_enabled);
    }
    if let Some(var_249) = &input.metric_name {
        object.key("MetricName").string(var_249);
    }
}

pub fn serialize_structure_crate_model_custom_response_body(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomResponseBody,
) {
    if let Some(var_250) = &input.content_type {
        object.key("ContentType").string(var_250.as_str());
    }
    if let Some(var_251) = &input.content {
        object.key("Content").string(var_251);
    }
}

pub fn serialize_structure_crate_model_default_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DefaultAction,
) {
    if let Some(var_252) = &input.block {
        let mut object_253 = object.key("Block").start_object();
        crate::json_ser::serialize_structure_crate_model_block_action(&mut object_253, var_252);
        object_253.finish();
    }
    if let Some(var_254) = &input.allow {
        let mut object_255 = object.key("Allow").start_object();
        crate::json_ser::serialize_structure_crate_model_allow_action(&mut object_255, var_254);
        object_255.finish();
    }
}

pub fn serialize_structure_crate_model_time_window(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TimeWindow,
) {
    if let Some(var_256) = &input.start_time {
        object
            .key("StartTime")
            .instant(var_256, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_257) = &input.end_time {
        object
            .key("EndTime")
            .instant(var_257, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_crate_model_logging_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoggingConfiguration,
) {
    if let Some(var_258) = &input.resource_arn {
        object.key("ResourceArn").string(var_258);
    }
    if let Some(var_259) = &input.log_destination_configs {
        let mut array_260 = object.key("LogDestinationConfigs").start_array();
        for item_261 in var_259 {
            {
                array_260.value().string(item_261);
            }
        }
        array_260.finish();
    }
    if let Some(var_262) = &input.redacted_fields {
        let mut array_263 = object.key("RedactedFields").start_array();
        for item_264 in var_262 {
            {
                let mut object_265 = array_263.value().start_object();
                crate::json_ser::serialize_structure_crate_model_field_to_match(
                    &mut object_265,
                    item_264,
                );
                object_265.finish();
            }
        }
        array_263.finish();
    }
    if input.managed_by_firewall_manager {
        object
            .key("ManagedByFirewallManager")
            .boolean(input.managed_by_firewall_manager);
    }
    if let Some(var_266) = &input.logging_filter {
        let mut object_267 = object.key("LoggingFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_logging_filter(&mut object_267, var_266);
        object_267.finish();
    }
}

pub fn serialize_structure_crate_model_version_to_publish(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VersionToPublish,
) {
    if let Some(var_268) = &input.associated_rule_group_arn {
        object.key("AssociatedRuleGroupArn").string(var_268);
    }
    if let Some(var_269) = &input.forecasted_lifetime {
        object.key("ForecastedLifetime").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_269).into()),
        );
    }
}

pub fn serialize_structure_crate_model_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Statement,
) {
    if let Some(var_270) = &input.byte_match_statement {
        let mut object_271 = object.key("ByteMatchStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_byte_match_statement(
            &mut object_271,
            var_270,
        );
        object_271.finish();
    }
    if let Some(var_272) = &input.sqli_match_statement {
        let mut object_273 = object.key("SqliMatchStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_sqli_match_statement(
            &mut object_273,
            var_272,
        );
        object_273.finish();
    }
    if let Some(var_274) = &input.xss_match_statement {
        let mut object_275 = object.key("XssMatchStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_xss_match_statement(
            &mut object_275,
            var_274,
        );
        object_275.finish();
    }
    if let Some(var_276) = &input.size_constraint_statement {
        let mut object_277 = object.key("SizeConstraintStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_size_constraint_statement(
            &mut object_277,
            var_276,
        );
        object_277.finish();
    }
    if let Some(var_278) = &input.geo_match_statement {
        let mut object_279 = object.key("GeoMatchStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_geo_match_statement(
            &mut object_279,
            var_278,
        );
        object_279.finish();
    }
    if let Some(var_280) = &input.rule_group_reference_statement {
        let mut object_281 = object.key("RuleGroupReferenceStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_group_reference_statement(
            &mut object_281,
            var_280,
        );
        object_281.finish();
    }
    if let Some(var_282) = &input.ip_set_reference_statement {
        let mut object_283 = object.key("IPSetReferenceStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_ip_set_reference_statement(
            &mut object_283,
            var_282,
        );
        object_283.finish();
    }
    if let Some(var_284) = &input.regex_pattern_set_reference_statement {
        let mut object_285 = object
            .key("RegexPatternSetReferenceStatement")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_regex_pattern_set_reference_statement(
            &mut object_285,
            var_284,
        );
        object_285.finish();
    }
    if let Some(var_286) = &input.rate_based_statement {
        let mut object_287 = object.key("RateBasedStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_rate_based_statement(
            &mut object_287,
            var_286,
        );
        object_287.finish();
    }
    if let Some(var_288) = &input.and_statement {
        let mut object_289 = object.key("AndStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_and_statement(&mut object_289, var_288);
        object_289.finish();
    }
    if let Some(var_290) = &input.or_statement {
        let mut object_291 = object.key("OrStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_or_statement(&mut object_291, var_290);
        object_291.finish();
    }
    if let Some(var_292) = &input.not_statement {
        let mut object_293 = object.key("NotStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_not_statement(&mut object_293, var_292);
        object_293.finish();
    }
    if let Some(var_294) = &input.managed_rule_group_statement {
        let mut object_295 = object.key("ManagedRuleGroupStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_managed_rule_group_statement(
            &mut object_295,
            var_294,
        );
        object_295.finish();
    }
    if let Some(var_296) = &input.label_match_statement {
        let mut object_297 = object.key("LabelMatchStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_label_match_statement(
            &mut object_297,
            var_296,
        );
        object_297.finish();
    }
    if let Some(var_298) = &input.regex_match_statement {
        let mut object_299 = object.key("RegexMatchStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_regex_match_statement(
            &mut object_299,
            var_298,
        );
        object_299.finish();
    }
}

pub fn serialize_structure_crate_model_rule_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleAction,
) {
    if let Some(var_300) = &input.block {
        let mut object_301 = object.key("Block").start_object();
        crate::json_ser::serialize_structure_crate_model_block_action(&mut object_301, var_300);
        object_301.finish();
    }
    if let Some(var_302) = &input.allow {
        let mut object_303 = object.key("Allow").start_object();
        crate::json_ser::serialize_structure_crate_model_allow_action(&mut object_303, var_302);
        object_303.finish();
    }
    if let Some(var_304) = &input.count {
        let mut object_305 = object.key("Count").start_object();
        crate::json_ser::serialize_structure_crate_model_count_action(&mut object_305, var_304);
        object_305.finish();
    }
}

pub fn serialize_structure_crate_model_override_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OverrideAction,
) {
    if let Some(var_306) = &input.count {
        let mut object_307 = object.key("Count").start_object();
        crate::json_ser::serialize_structure_crate_model_count_action(&mut object_307, var_306);
        object_307.finish();
    }
    if let Some(var_308) = &input.none {
        let mut object_309 = object.key("None").start_object();
        crate::json_ser::serialize_structure_crate_model_none_action(&mut object_309, var_308);
        object_309.finish();
    }
}

pub fn serialize_structure_crate_model_label(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Label,
) {
    if let Some(var_310) = &input.name {
        object.key("Name").string(var_310);
    }
}

pub fn serialize_structure_crate_model_block_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BlockAction,
) {
    if let Some(var_311) = &input.custom_response {
        let mut object_312 = object.key("CustomResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_response(&mut object_312, var_311);
        object_312.finish();
    }
}

pub fn serialize_structure_crate_model_allow_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AllowAction,
) {
    if let Some(var_313) = &input.custom_request_handling {
        let mut object_314 = object.key("CustomRequestHandling").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_request_handling(
            &mut object_314,
            var_313,
        );
        object_314.finish();
    }
}

pub fn serialize_structure_crate_model_field_to_match(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FieldToMatch,
) {
    if let Some(var_315) = &input.single_header {
        let mut object_316 = object.key("SingleHeader").start_object();
        crate::json_ser::serialize_structure_crate_model_single_header(&mut object_316, var_315);
        object_316.finish();
    }
    if let Some(var_317) = &input.single_query_argument {
        let mut object_318 = object.key("SingleQueryArgument").start_object();
        crate::json_ser::serialize_structure_crate_model_single_query_argument(
            &mut object_318,
            var_317,
        );
        object_318.finish();
    }
    if let Some(var_319) = &input.all_query_arguments {
        let mut object_320 = object.key("AllQueryArguments").start_object();
        crate::json_ser::serialize_structure_crate_model_all_query_arguments(
            &mut object_320,
            var_319,
        );
        object_320.finish();
    }
    if let Some(var_321) = &input.uri_path {
        let mut object_322 = object.key("UriPath").start_object();
        crate::json_ser::serialize_structure_crate_model_uri_path(&mut object_322, var_321);
        object_322.finish();
    }
    if let Some(var_323) = &input.query_string {
        let mut object_324 = object.key("QueryString").start_object();
        crate::json_ser::serialize_structure_crate_model_query_string(&mut object_324, var_323);
        object_324.finish();
    }
    if let Some(var_325) = &input.body {
        let mut object_326 = object.key("Body").start_object();
        crate::json_ser::serialize_structure_crate_model_body(&mut object_326, var_325);
        object_326.finish();
    }
    if let Some(var_327) = &input.method {
        let mut object_328 = object.key("Method").start_object();
        crate::json_ser::serialize_structure_crate_model_method(&mut object_328, var_327);
        object_328.finish();
    }
    if let Some(var_329) = &input.json_body {
        let mut object_330 = object.key("JsonBody").start_object();
        crate::json_ser::serialize_structure_crate_model_json_body(&mut object_330, var_329);
        object_330.finish();
    }
}

pub fn serialize_structure_crate_model_logging_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoggingFilter,
) {
    if let Some(var_331) = &input.filters {
        let mut array_332 = object.key("Filters").start_array();
        for item_333 in var_331 {
            {
                let mut object_334 = array_332.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_334, item_333);
                object_334.finish();
            }
        }
        array_332.finish();
    }
    if let Some(var_335) = &input.default_behavior {
        object.key("DefaultBehavior").string(var_335.as_str());
    }
}

pub fn serialize_structure_crate_model_byte_match_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ByteMatchStatement,
) {
    if let Some(var_336) = &input.search_string {
        object
            .key("SearchString")
            .string_unchecked(&smithy_types::base64::encode(var_336));
    }
    if let Some(var_337) = &input.field_to_match {
        let mut object_338 = object.key("FieldToMatch").start_object();
        crate::json_ser::serialize_structure_crate_model_field_to_match(&mut object_338, var_337);
        object_338.finish();
    }
    if let Some(var_339) = &input.text_transformations {
        let mut array_340 = object.key("TextTransformations").start_array();
        for item_341 in var_339 {
            {
                let mut object_342 = array_340.value().start_object();
                crate::json_ser::serialize_structure_crate_model_text_transformation(
                    &mut object_342,
                    item_341,
                );
                object_342.finish();
            }
        }
        array_340.finish();
    }
    if let Some(var_343) = &input.positional_constraint {
        object.key("PositionalConstraint").string(var_343.as_str());
    }
}

pub fn serialize_structure_crate_model_sqli_match_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SqliMatchStatement,
) {
    if let Some(var_344) = &input.field_to_match {
        let mut object_345 = object.key("FieldToMatch").start_object();
        crate::json_ser::serialize_structure_crate_model_field_to_match(&mut object_345, var_344);
        object_345.finish();
    }
    if let Some(var_346) = &input.text_transformations {
        let mut array_347 = object.key("TextTransformations").start_array();
        for item_348 in var_346 {
            {
                let mut object_349 = array_347.value().start_object();
                crate::json_ser::serialize_structure_crate_model_text_transformation(
                    &mut object_349,
                    item_348,
                );
                object_349.finish();
            }
        }
        array_347.finish();
    }
}

pub fn serialize_structure_crate_model_xss_match_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::XssMatchStatement,
) {
    if let Some(var_350) = &input.field_to_match {
        let mut object_351 = object.key("FieldToMatch").start_object();
        crate::json_ser::serialize_structure_crate_model_field_to_match(&mut object_351, var_350);
        object_351.finish();
    }
    if let Some(var_352) = &input.text_transformations {
        let mut array_353 = object.key("TextTransformations").start_array();
        for item_354 in var_352 {
            {
                let mut object_355 = array_353.value().start_object();
                crate::json_ser::serialize_structure_crate_model_text_transformation(
                    &mut object_355,
                    item_354,
                );
                object_355.finish();
            }
        }
        array_353.finish();
    }
}

pub fn serialize_structure_crate_model_size_constraint_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SizeConstraintStatement,
) {
    if let Some(var_356) = &input.field_to_match {
        let mut object_357 = object.key("FieldToMatch").start_object();
        crate::json_ser::serialize_structure_crate_model_field_to_match(&mut object_357, var_356);
        object_357.finish();
    }
    if let Some(var_358) = &input.comparison_operator {
        object.key("ComparisonOperator").string(var_358.as_str());
    }
    {
        object.key("Size").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.size).into()),
        );
    }
    if let Some(var_359) = &input.text_transformations {
        let mut array_360 = object.key("TextTransformations").start_array();
        for item_361 in var_359 {
            {
                let mut object_362 = array_360.value().start_object();
                crate::json_ser::serialize_structure_crate_model_text_transformation(
                    &mut object_362,
                    item_361,
                );
                object_362.finish();
            }
        }
        array_360.finish();
    }
}

pub fn serialize_structure_crate_model_geo_match_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GeoMatchStatement,
) {
    if let Some(var_363) = &input.country_codes {
        let mut array_364 = object.key("CountryCodes").start_array();
        for item_365 in var_363 {
            {
                array_364.value().string(item_365.as_str());
            }
        }
        array_364.finish();
    }
    if let Some(var_366) = &input.forwarded_ip_config {
        let mut object_367 = object.key("ForwardedIPConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_forwarded_ip_config(
            &mut object_367,
            var_366,
        );
        object_367.finish();
    }
}

pub fn serialize_structure_crate_model_rule_group_reference_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupReferenceStatement,
) {
    if let Some(var_368) = &input.arn {
        object.key("ARN").string(var_368);
    }
    if let Some(var_369) = &input.excluded_rules {
        let mut array_370 = object.key("ExcludedRules").start_array();
        for item_371 in var_369 {
            {
                let mut object_372 = array_370.value().start_object();
                crate::json_ser::serialize_structure_crate_model_excluded_rule(
                    &mut object_372,
                    item_371,
                );
                object_372.finish();
            }
        }
        array_370.finish();
    }
}

pub fn serialize_structure_crate_model_ip_set_reference_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IpSetReferenceStatement,
) {
    if let Some(var_373) = &input.arn {
        object.key("ARN").string(var_373);
    }
    if let Some(var_374) = &input.ip_set_forwarded_ip_config {
        let mut object_375 = object.key("IPSetForwardedIPConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_ip_set_forwarded_ip_config(
            &mut object_375,
            var_374,
        );
        object_375.finish();
    }
}

pub fn serialize_structure_crate_model_regex_pattern_set_reference_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RegexPatternSetReferenceStatement,
) {
    if let Some(var_376) = &input.arn {
        object.key("ARN").string(var_376);
    }
    if let Some(var_377) = &input.field_to_match {
        let mut object_378 = object.key("FieldToMatch").start_object();
        crate::json_ser::serialize_structure_crate_model_field_to_match(&mut object_378, var_377);
        object_378.finish();
    }
    if let Some(var_379) = &input.text_transformations {
        let mut array_380 = object.key("TextTransformations").start_array();
        for item_381 in var_379 {
            {
                let mut object_382 = array_380.value().start_object();
                crate::json_ser::serialize_structure_crate_model_text_transformation(
                    &mut object_382,
                    item_381,
                );
                object_382.finish();
            }
        }
        array_380.finish();
    }
}

pub fn serialize_structure_crate_model_rate_based_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RateBasedStatement,
) {
    {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_383) = &input.aggregate_key_type {
        object.key("AggregateKeyType").string(var_383.as_str());
    }
    if let Some(var_384) = &input.scope_down_statement {
        let mut object_385 = object.key("ScopeDownStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_statement(&mut object_385, var_384);
        object_385.finish();
    }
    if let Some(var_386) = &input.forwarded_ip_config {
        let mut object_387 = object.key("ForwardedIPConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_forwarded_ip_config(
            &mut object_387,
            var_386,
        );
        object_387.finish();
    }
}

pub fn serialize_structure_crate_model_and_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AndStatement,
) {
    if let Some(var_388) = &input.statements {
        let mut array_389 = object.key("Statements").start_array();
        for item_390 in var_388 {
            {
                let mut object_391 = array_389.value().start_object();
                crate::json_ser::serialize_structure_crate_model_statement(
                    &mut object_391,
                    item_390,
                );
                object_391.finish();
            }
        }
        array_389.finish();
    }
}

pub fn serialize_structure_crate_model_or_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OrStatement,
) {
    if let Some(var_392) = &input.statements {
        let mut array_393 = object.key("Statements").start_array();
        for item_394 in var_392 {
            {
                let mut object_395 = array_393.value().start_object();
                crate::json_ser::serialize_structure_crate_model_statement(
                    &mut object_395,
                    item_394,
                );
                object_395.finish();
            }
        }
        array_393.finish();
    }
}

pub fn serialize_structure_crate_model_not_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NotStatement,
) {
    if let Some(var_396) = &input.statement {
        let mut object_397 = object.key("Statement").start_object();
        crate::json_ser::serialize_structure_crate_model_statement(&mut object_397, var_396);
        object_397.finish();
    }
}

pub fn serialize_structure_crate_model_managed_rule_group_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ManagedRuleGroupStatement,
) {
    if let Some(var_398) = &input.vendor_name {
        object.key("VendorName").string(var_398);
    }
    if let Some(var_399) = &input.name {
        object.key("Name").string(var_399);
    }
    if let Some(var_400) = &input.version {
        object.key("Version").string(var_400);
    }
    if let Some(var_401) = &input.excluded_rules {
        let mut array_402 = object.key("ExcludedRules").start_array();
        for item_403 in var_401 {
            {
                let mut object_404 = array_402.value().start_object();
                crate::json_ser::serialize_structure_crate_model_excluded_rule(
                    &mut object_404,
                    item_403,
                );
                object_404.finish();
            }
        }
        array_402.finish();
    }
    if let Some(var_405) = &input.scope_down_statement {
        let mut object_406 = object.key("ScopeDownStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_statement(&mut object_406, var_405);
        object_406.finish();
    }
}

pub fn serialize_structure_crate_model_label_match_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelMatchStatement,
) {
    if let Some(var_407) = &input.scope {
        object.key("Scope").string(var_407.as_str());
    }
    if let Some(var_408) = &input.key {
        object.key("Key").string(var_408);
    }
}

pub fn serialize_structure_crate_model_regex_match_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RegexMatchStatement,
) {
    if let Some(var_409) = &input.regex_string {
        object.key("RegexString").string(var_409);
    }
    if let Some(var_410) = &input.field_to_match {
        let mut object_411 = object.key("FieldToMatch").start_object();
        crate::json_ser::serialize_structure_crate_model_field_to_match(&mut object_411, var_410);
        object_411.finish();
    }
    if let Some(var_412) = &input.text_transformations {
        let mut array_413 = object.key("TextTransformations").start_array();
        for item_414 in var_412 {
            {
                let mut object_415 = array_413.value().start_object();
                crate::json_ser::serialize_structure_crate_model_text_transformation(
                    &mut object_415,
                    item_414,
                );
                object_415.finish();
            }
        }
        array_413.finish();
    }
}

pub fn serialize_structure_crate_model_count_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CountAction,
) {
    if let Some(var_416) = &input.custom_request_handling {
        let mut object_417 = object.key("CustomRequestHandling").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_request_handling(
            &mut object_417,
            var_416,
        );
        object_417.finish();
    }
}

pub fn serialize_structure_crate_model_none_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NoneAction,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_crate_model_custom_response(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomResponse,
) {
    if let Some(var_418) = &input.response_code {
        object.key("ResponseCode").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_418).into()),
        );
    }
    if let Some(var_419) = &input.custom_response_body_key {
        object.key("CustomResponseBodyKey").string(var_419);
    }
    if let Some(var_420) = &input.response_headers {
        let mut array_421 = object.key("ResponseHeaders").start_array();
        for item_422 in var_420 {
            {
                let mut object_423 = array_421.value().start_object();
                crate::json_ser::serialize_structure_crate_model_custom_http_header(
                    &mut object_423,
                    item_422,
                );
                object_423.finish();
            }
        }
        array_421.finish();
    }
}

pub fn serialize_structure_crate_model_custom_request_handling(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomRequestHandling,
) {
    if let Some(var_424) = &input.insert_headers {
        let mut array_425 = object.key("InsertHeaders").start_array();
        for item_426 in var_424 {
            {
                let mut object_427 = array_425.value().start_object();
                crate::json_ser::serialize_structure_crate_model_custom_http_header(
                    &mut object_427,
                    item_426,
                );
                object_427.finish();
            }
        }
        array_425.finish();
    }
}

pub fn serialize_structure_crate_model_single_header(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SingleHeader,
) {
    if let Some(var_428) = &input.name {
        object.key("Name").string(var_428);
    }
}

pub fn serialize_structure_crate_model_single_query_argument(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SingleQueryArgument,
) {
    if let Some(var_429) = &input.name {
        object.key("Name").string(var_429);
    }
}

pub fn serialize_structure_crate_model_all_query_arguments(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AllQueryArguments,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_crate_model_uri_path(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UriPath,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_crate_model_query_string(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::QueryString,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_crate_model_body(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Body,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_crate_model_method(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Method,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_crate_model_json_body(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JsonBody,
) {
    if let Some(var_430) = &input.match_pattern {
        let mut object_431 = object.key("MatchPattern").start_object();
        crate::json_ser::serialize_structure_crate_model_json_match_pattern(
            &mut object_431,
            var_430,
        );
        object_431.finish();
    }
    if let Some(var_432) = &input.match_scope {
        object.key("MatchScope").string(var_432.as_str());
    }
    if let Some(var_433) = &input.invalid_fallback_behavior {
        object
            .key("InvalidFallbackBehavior")
            .string(var_433.as_str());
    }
}

pub fn serialize_structure_crate_model_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Filter,
) {
    if let Some(var_434) = &input.behavior {
        object.key("Behavior").string(var_434.as_str());
    }
    if let Some(var_435) = &input.requirement {
        object.key("Requirement").string(var_435.as_str());
    }
    if let Some(var_436) = &input.conditions {
        let mut array_437 = object.key("Conditions").start_array();
        for item_438 in var_436 {
            {
                let mut object_439 = array_437.value().start_object();
                crate::json_ser::serialize_structure_crate_model_condition(
                    &mut object_439,
                    item_438,
                );
                object_439.finish();
            }
        }
        array_437.finish();
    }
}

pub fn serialize_structure_crate_model_text_transformation(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TextTransformation,
) {
    {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.priority).into()),
        );
    }
    if let Some(var_440) = &input.r#type {
        object.key("Type").string(var_440.as_str());
    }
}

pub fn serialize_structure_crate_model_forwarded_ip_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ForwardedIpConfig,
) {
    if let Some(var_441) = &input.header_name {
        object.key("HeaderName").string(var_441);
    }
    if let Some(var_442) = &input.fallback_behavior {
        object.key("FallbackBehavior").string(var_442.as_str());
    }
}

pub fn serialize_structure_crate_model_excluded_rule(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExcludedRule,
) {
    if let Some(var_443) = &input.name {
        object.key("Name").string(var_443);
    }
}

pub fn serialize_structure_crate_model_ip_set_forwarded_ip_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IpSetForwardedIpConfig,
) {
    if let Some(var_444) = &input.header_name {
        object.key("HeaderName").string(var_444);
    }
    if let Some(var_445) = &input.fallback_behavior {
        object.key("FallbackBehavior").string(var_445.as_str());
    }
    if let Some(var_446) = &input.position {
        object.key("Position").string(var_446.as_str());
    }
}

pub fn serialize_structure_crate_model_custom_http_header(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomHttpHeader,
) {
    if let Some(var_447) = &input.name {
        object.key("Name").string(var_447);
    }
    if let Some(var_448) = &input.value {
        object.key("Value").string(var_448);
    }
}

pub fn serialize_structure_crate_model_json_match_pattern(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JsonMatchPattern,
) {
    if let Some(var_449) = &input.all {
        let mut object_450 = object.key("All").start_object();
        crate::json_ser::serialize_structure_crate_model_all(&mut object_450, var_449);
        object_450.finish();
    }
    if let Some(var_451) = &input.included_paths {
        let mut array_452 = object.key("IncludedPaths").start_array();
        for item_453 in var_451 {
            {
                array_452.value().string(item_453);
            }
        }
        array_452.finish();
    }
}

pub fn serialize_structure_crate_model_condition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Condition,
) {
    if let Some(var_454) = &input.action_condition {
        let mut object_455 = object.key("ActionCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_action_condition(&mut object_455, var_454);
        object_455.finish();
    }
    if let Some(var_456) = &input.label_name_condition {
        let mut object_457 = object.key("LabelNameCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_label_name_condition(
            &mut object_457,
            var_456,
        );
        object_457.finish();
    }
}

pub fn serialize_structure_crate_model_all(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::All,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_crate_model_action_condition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ActionCondition,
) {
    if let Some(var_458) = &input.action {
        object.key("Action").string(var_458.as_str());
    }
}

pub fn serialize_structure_crate_model_label_name_condition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelNameCondition,
) {
    if let Some(var_459) = &input.label_name {
        object.key("LabelName").string(var_459);
    }
}
