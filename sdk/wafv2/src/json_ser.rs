// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_associate_web_acl_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateWebAclInput,
) {
    if let Some(var_1) = &input.web_acl_arn {
        object.key("WebACLArn").string(var_1);
    }
    if let Some(var_2) = &input.resource_arn {
        object.key("ResourceArn").string(var_2);
    }
}

pub fn serialize_structure_check_capacity_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CheckCapacityInput,
) {
    if let Some(var_3) = &input.scope {
        object.key("Scope").string(var_3.as_str());
    }
    if let Some(var_4) = &input.rules {
        let mut array_5 = object.key("Rules").start_array();
        for item_6 in var_4 {
            {
                let mut object_7 = array_5.value().start_object();
                crate::json_ser::serialize_structure_rule(&mut object_7, item_6);
                object_7.finish();
            }
        }
        array_5.finish();
    }
}

pub fn serialize_structure_create_ip_set_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateIpSetInput,
) {
    if let Some(var_8) = &input.name {
        object.key("Name").string(var_8);
    }
    if let Some(var_9) = &input.scope {
        object.key("Scope").string(var_9.as_str());
    }
    if let Some(var_10) = &input.description {
        object.key("Description").string(var_10);
    }
    if let Some(var_11) = &input.ip_address_version {
        object.key("IPAddressVersion").string(var_11.as_str());
    }
    if let Some(var_12) = &input.addresses {
        let mut array_13 = object.key("Addresses").start_array();
        for item_14 in var_12 {
            {
                array_13.value().string(item_14);
            }
        }
        array_13.finish();
    }
    if let Some(var_15) = &input.tags {
        let mut array_16 = object.key("Tags").start_array();
        for item_17 in var_15 {
            {
                let mut object_18 = array_16.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_18, item_17);
                object_18.finish();
            }
        }
        array_16.finish();
    }
}

pub fn serialize_structure_create_regex_pattern_set_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRegexPatternSetInput,
) {
    if let Some(var_19) = &input.name {
        object.key("Name").string(var_19);
    }
    if let Some(var_20) = &input.scope {
        object.key("Scope").string(var_20.as_str());
    }
    if let Some(var_21) = &input.description {
        object.key("Description").string(var_21);
    }
    if let Some(var_22) = &input.regular_expression_list {
        let mut array_23 = object.key("RegularExpressionList").start_array();
        for item_24 in var_22 {
            {
                let mut object_25 = array_23.value().start_object();
                crate::json_ser::serialize_structure_regex(&mut object_25, item_24);
                object_25.finish();
            }
        }
        array_23.finish();
    }
    if let Some(var_26) = &input.tags {
        let mut array_27 = object.key("Tags").start_array();
        for item_28 in var_26 {
            {
                let mut object_29 = array_27.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_29, item_28);
                object_29.finish();
            }
        }
        array_27.finish();
    }
}

pub fn serialize_structure_create_rule_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRuleGroupInput,
) {
    if let Some(var_30) = &input.name {
        object.key("Name").string(var_30);
    }
    if let Some(var_31) = &input.scope {
        object.key("Scope").string(var_31.as_str());
    }
    {
        object.key("Capacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.capacity).into()),
        );
    }
    if let Some(var_32) = &input.description {
        object.key("Description").string(var_32);
    }
    if let Some(var_33) = &input.rules {
        let mut array_34 = object.key("Rules").start_array();
        for item_35 in var_33 {
            {
                let mut object_36 = array_34.value().start_object();
                crate::json_ser::serialize_structure_rule(&mut object_36, item_35);
                object_36.finish();
            }
        }
        array_34.finish();
    }
    if let Some(var_37) = &input.visibility_config {
        let mut object_38 = object.key("VisibilityConfig").start_object();
        crate::json_ser::serialize_structure_visibility_config(&mut object_38, var_37);
        object_38.finish();
    }
    if let Some(var_39) = &input.tags {
        let mut array_40 = object.key("Tags").start_array();
        for item_41 in var_39 {
            {
                let mut object_42 = array_40.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_42, item_41);
                object_42.finish();
            }
        }
        array_40.finish();
    }
    if let Some(var_43) = &input.custom_response_bodies {
        let mut object_44 = object.key("CustomResponseBodies").start_object();
        for (key_45, value_46) in var_43 {
            {
                let mut object_47 = object_44.key(key_45).start_object();
                crate::json_ser::serialize_structure_custom_response_body(&mut object_47, value_46);
                object_47.finish();
            }
        }
        object_44.finish();
    }
}

pub fn serialize_structure_create_web_acl_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWebAclInput,
) {
    if let Some(var_48) = &input.name {
        object.key("Name").string(var_48);
    }
    if let Some(var_49) = &input.scope {
        object.key("Scope").string(var_49.as_str());
    }
    if let Some(var_50) = &input.default_action {
        let mut object_51 = object.key("DefaultAction").start_object();
        crate::json_ser::serialize_structure_default_action(&mut object_51, var_50);
        object_51.finish();
    }
    if let Some(var_52) = &input.description {
        object.key("Description").string(var_52);
    }
    if let Some(var_53) = &input.rules {
        let mut array_54 = object.key("Rules").start_array();
        for item_55 in var_53 {
            {
                let mut object_56 = array_54.value().start_object();
                crate::json_ser::serialize_structure_rule(&mut object_56, item_55);
                object_56.finish();
            }
        }
        array_54.finish();
    }
    if let Some(var_57) = &input.visibility_config {
        let mut object_58 = object.key("VisibilityConfig").start_object();
        crate::json_ser::serialize_structure_visibility_config(&mut object_58, var_57);
        object_58.finish();
    }
    if let Some(var_59) = &input.tags {
        let mut array_60 = object.key("Tags").start_array();
        for item_61 in var_59 {
            {
                let mut object_62 = array_60.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_62, item_61);
                object_62.finish();
            }
        }
        array_60.finish();
    }
    if let Some(var_63) = &input.custom_response_bodies {
        let mut object_64 = object.key("CustomResponseBodies").start_object();
        for (key_65, value_66) in var_63 {
            {
                let mut object_67 = object_64.key(key_65).start_object();
                crate::json_ser::serialize_structure_custom_response_body(&mut object_67, value_66);
                object_67.finish();
            }
        }
        object_64.finish();
    }
}

pub fn serialize_structure_delete_firewall_manager_rule_groups_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFirewallManagerRuleGroupsInput,
) {
    if let Some(var_68) = &input.web_acl_arn {
        object.key("WebACLArn").string(var_68);
    }
    if let Some(var_69) = &input.web_acl_lock_token {
        object.key("WebACLLockToken").string(var_69);
    }
}

pub fn serialize_structure_delete_ip_set_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteIpSetInput,
) {
    if let Some(var_70) = &input.name {
        object.key("Name").string(var_70);
    }
    if let Some(var_71) = &input.scope {
        object.key("Scope").string(var_71.as_str());
    }
    if let Some(var_72) = &input.id {
        object.key("Id").string(var_72);
    }
    if let Some(var_73) = &input.lock_token {
        object.key("LockToken").string(var_73);
    }
}

pub fn serialize_structure_delete_logging_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteLoggingConfigurationInput,
) {
    if let Some(var_74) = &input.resource_arn {
        object.key("ResourceArn").string(var_74);
    }
}

pub fn serialize_structure_delete_permission_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePermissionPolicyInput,
) {
    if let Some(var_75) = &input.resource_arn {
        object.key("ResourceArn").string(var_75);
    }
}

pub fn serialize_structure_delete_regex_pattern_set_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRegexPatternSetInput,
) {
    if let Some(var_76) = &input.name {
        object.key("Name").string(var_76);
    }
    if let Some(var_77) = &input.scope {
        object.key("Scope").string(var_77.as_str());
    }
    if let Some(var_78) = &input.id {
        object.key("Id").string(var_78);
    }
    if let Some(var_79) = &input.lock_token {
        object.key("LockToken").string(var_79);
    }
}

pub fn serialize_structure_delete_rule_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRuleGroupInput,
) {
    if let Some(var_80) = &input.name {
        object.key("Name").string(var_80);
    }
    if let Some(var_81) = &input.scope {
        object.key("Scope").string(var_81.as_str());
    }
    if let Some(var_82) = &input.id {
        object.key("Id").string(var_82);
    }
    if let Some(var_83) = &input.lock_token {
        object.key("LockToken").string(var_83);
    }
}

pub fn serialize_structure_delete_web_acl_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteWebAclInput,
) {
    if let Some(var_84) = &input.name {
        object.key("Name").string(var_84);
    }
    if let Some(var_85) = &input.scope {
        object.key("Scope").string(var_85.as_str());
    }
    if let Some(var_86) = &input.id {
        object.key("Id").string(var_86);
    }
    if let Some(var_87) = &input.lock_token {
        object.key("LockToken").string(var_87);
    }
}

pub fn serialize_structure_describe_managed_rule_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeManagedRuleGroupInput,
) {
    if let Some(var_88) = &input.vendor_name {
        object.key("VendorName").string(var_88);
    }
    if let Some(var_89) = &input.name {
        object.key("Name").string(var_89);
    }
    if let Some(var_90) = &input.scope {
        object.key("Scope").string(var_90.as_str());
    }
}

pub fn serialize_structure_disassociate_web_acl_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateWebAclInput,
) {
    if let Some(var_91) = &input.resource_arn {
        object.key("ResourceArn").string(var_91);
    }
}

pub fn serialize_structure_get_ip_set_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetIpSetInput,
) {
    if let Some(var_92) = &input.name {
        object.key("Name").string(var_92);
    }
    if let Some(var_93) = &input.scope {
        object.key("Scope").string(var_93.as_str());
    }
    if let Some(var_94) = &input.id {
        object.key("Id").string(var_94);
    }
}

pub fn serialize_structure_get_logging_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetLoggingConfigurationInput,
) {
    if let Some(var_95) = &input.resource_arn {
        object.key("ResourceArn").string(var_95);
    }
}

pub fn serialize_structure_get_permission_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPermissionPolicyInput,
) {
    if let Some(var_96) = &input.resource_arn {
        object.key("ResourceArn").string(var_96);
    }
}

pub fn serialize_structure_get_rate_based_statement_managed_keys_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRateBasedStatementManagedKeysInput,
) {
    if let Some(var_97) = &input.scope {
        object.key("Scope").string(var_97.as_str());
    }
    if let Some(var_98) = &input.web_acl_name {
        object.key("WebACLName").string(var_98);
    }
    if let Some(var_99) = &input.web_acl_id {
        object.key("WebACLId").string(var_99);
    }
    if let Some(var_100) = &input.rule_name {
        object.key("RuleName").string(var_100);
    }
}

pub fn serialize_structure_get_regex_pattern_set_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRegexPatternSetInput,
) {
    if let Some(var_101) = &input.name {
        object.key("Name").string(var_101);
    }
    if let Some(var_102) = &input.scope {
        object.key("Scope").string(var_102.as_str());
    }
    if let Some(var_103) = &input.id {
        object.key("Id").string(var_103);
    }
}

pub fn serialize_structure_get_rule_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRuleGroupInput,
) {
    if let Some(var_104) = &input.name {
        object.key("Name").string(var_104);
    }
    if let Some(var_105) = &input.scope {
        object.key("Scope").string(var_105.as_str());
    }
    if let Some(var_106) = &input.id {
        object.key("Id").string(var_106);
    }
    if let Some(var_107) = &input.arn {
        object.key("ARN").string(var_107);
    }
}

pub fn serialize_structure_get_sampled_requests_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSampledRequestsInput,
) {
    if let Some(var_108) = &input.web_acl_arn {
        object.key("WebAclArn").string(var_108);
    }
    if let Some(var_109) = &input.rule_metric_name {
        object.key("RuleMetricName").string(var_109);
    }
    if let Some(var_110) = &input.scope {
        object.key("Scope").string(var_110.as_str());
    }
    if let Some(var_111) = &input.time_window {
        let mut object_112 = object.key("TimeWindow").start_object();
        crate::json_ser::serialize_structure_time_window(&mut object_112, var_111);
        object_112.finish();
    }
    {
        object.key("MaxItems").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_items).into()),
        );
    }
}

pub fn serialize_structure_get_web_acl_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWebAclInput,
) {
    if let Some(var_113) = &input.name {
        object.key("Name").string(var_113);
    }
    if let Some(var_114) = &input.scope {
        object.key("Scope").string(var_114.as_str());
    }
    if let Some(var_115) = &input.id {
        object.key("Id").string(var_115);
    }
}

pub fn serialize_structure_get_web_acl_for_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWebAclForResourceInput,
) {
    if let Some(var_116) = &input.resource_arn {
        object.key("ResourceArn").string(var_116);
    }
}

pub fn serialize_structure_list_available_managed_rule_groups_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAvailableManagedRuleGroupsInput,
) {
    if let Some(var_117) = &input.scope {
        object.key("Scope").string(var_117.as_str());
    }
    if let Some(var_118) = &input.next_marker {
        object.key("NextMarker").string(var_118);
    }
    if let Some(var_119) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_119).into()),
        );
    }
}

pub fn serialize_structure_list_ip_sets_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListIpSetsInput,
) {
    if let Some(var_120) = &input.scope {
        object.key("Scope").string(var_120.as_str());
    }
    if let Some(var_121) = &input.next_marker {
        object.key("NextMarker").string(var_121);
    }
    if let Some(var_122) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_122).into()),
        );
    }
}

pub fn serialize_structure_list_logging_configurations_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListLoggingConfigurationsInput,
) {
    if let Some(var_123) = &input.scope {
        object.key("Scope").string(var_123.as_str());
    }
    if let Some(var_124) = &input.next_marker {
        object.key("NextMarker").string(var_124);
    }
    if let Some(var_125) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_125).into()),
        );
    }
}

pub fn serialize_structure_list_regex_pattern_sets_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListRegexPatternSetsInput,
) {
    if let Some(var_126) = &input.scope {
        object.key("Scope").string(var_126.as_str());
    }
    if let Some(var_127) = &input.next_marker {
        object.key("NextMarker").string(var_127);
    }
    if let Some(var_128) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_128).into()),
        );
    }
}

pub fn serialize_structure_list_resources_for_web_acl_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListResourcesForWebAclInput,
) {
    if let Some(var_129) = &input.web_acl_arn {
        object.key("WebACLArn").string(var_129);
    }
    if let Some(var_130) = &input.resource_type {
        object.key("ResourceType").string(var_130.as_str());
    }
}

pub fn serialize_structure_list_rule_groups_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListRuleGroupsInput,
) {
    if let Some(var_131) = &input.scope {
        object.key("Scope").string(var_131.as_str());
    }
    if let Some(var_132) = &input.next_marker {
        object.key("NextMarker").string(var_132);
    }
    if let Some(var_133) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_133).into()),
        );
    }
}

pub fn serialize_structure_list_tags_for_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) {
    if let Some(var_134) = &input.next_marker {
        object.key("NextMarker").string(var_134);
    }
    if let Some(var_135) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_135).into()),
        );
    }
    if let Some(var_136) = &input.resource_arn {
        object.key("ResourceARN").string(var_136);
    }
}

pub fn serialize_structure_list_web_ac_ls_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListWebAcLsInput,
) {
    if let Some(var_137) = &input.scope {
        object.key("Scope").string(var_137.as_str());
    }
    if let Some(var_138) = &input.next_marker {
        object.key("NextMarker").string(var_138);
    }
    if let Some(var_139) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_139).into()),
        );
    }
}

pub fn serialize_structure_put_logging_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutLoggingConfigurationInput,
) {
    if let Some(var_140) = &input.logging_configuration {
        let mut object_141 = object.key("LoggingConfiguration").start_object();
        crate::json_ser::serialize_structure_logging_configuration(&mut object_141, var_140);
        object_141.finish();
    }
}

pub fn serialize_structure_put_permission_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutPermissionPolicyInput,
) {
    if let Some(var_142) = &input.resource_arn {
        object.key("ResourceArn").string(var_142);
    }
    if let Some(var_143) = &input.policy {
        object.key("Policy").string(var_143);
    }
}

pub fn serialize_structure_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_144) = &input.resource_arn {
        object.key("ResourceARN").string(var_144);
    }
    if let Some(var_145) = &input.tags {
        let mut array_146 = object.key("Tags").start_array();
        for item_147 in var_145 {
            {
                let mut object_148 = array_146.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_148, item_147);
                object_148.finish();
            }
        }
        array_146.finish();
    }
}

pub fn serialize_structure_untag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) {
    if let Some(var_149) = &input.resource_arn {
        object.key("ResourceARN").string(var_149);
    }
    if let Some(var_150) = &input.tag_keys {
        let mut array_151 = object.key("TagKeys").start_array();
        for item_152 in var_150 {
            {
                array_151.value().string(item_152);
            }
        }
        array_151.finish();
    }
}

pub fn serialize_structure_update_ip_set_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateIpSetInput,
) {
    if let Some(var_153) = &input.name {
        object.key("Name").string(var_153);
    }
    if let Some(var_154) = &input.scope {
        object.key("Scope").string(var_154.as_str());
    }
    if let Some(var_155) = &input.id {
        object.key("Id").string(var_155);
    }
    if let Some(var_156) = &input.description {
        object.key("Description").string(var_156);
    }
    if let Some(var_157) = &input.addresses {
        let mut array_158 = object.key("Addresses").start_array();
        for item_159 in var_157 {
            {
                array_158.value().string(item_159);
            }
        }
        array_158.finish();
    }
    if let Some(var_160) = &input.lock_token {
        object.key("LockToken").string(var_160);
    }
}

pub fn serialize_structure_update_regex_pattern_set_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRegexPatternSetInput,
) {
    if let Some(var_161) = &input.name {
        object.key("Name").string(var_161);
    }
    if let Some(var_162) = &input.scope {
        object.key("Scope").string(var_162.as_str());
    }
    if let Some(var_163) = &input.id {
        object.key("Id").string(var_163);
    }
    if let Some(var_164) = &input.description {
        object.key("Description").string(var_164);
    }
    if let Some(var_165) = &input.regular_expression_list {
        let mut array_166 = object.key("RegularExpressionList").start_array();
        for item_167 in var_165 {
            {
                let mut object_168 = array_166.value().start_object();
                crate::json_ser::serialize_structure_regex(&mut object_168, item_167);
                object_168.finish();
            }
        }
        array_166.finish();
    }
    if let Some(var_169) = &input.lock_token {
        object.key("LockToken").string(var_169);
    }
}

pub fn serialize_structure_update_rule_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRuleGroupInput,
) {
    if let Some(var_170) = &input.name {
        object.key("Name").string(var_170);
    }
    if let Some(var_171) = &input.scope {
        object.key("Scope").string(var_171.as_str());
    }
    if let Some(var_172) = &input.id {
        object.key("Id").string(var_172);
    }
    if let Some(var_173) = &input.description {
        object.key("Description").string(var_173);
    }
    if let Some(var_174) = &input.rules {
        let mut array_175 = object.key("Rules").start_array();
        for item_176 in var_174 {
            {
                let mut object_177 = array_175.value().start_object();
                crate::json_ser::serialize_structure_rule(&mut object_177, item_176);
                object_177.finish();
            }
        }
        array_175.finish();
    }
    if let Some(var_178) = &input.visibility_config {
        let mut object_179 = object.key("VisibilityConfig").start_object();
        crate::json_ser::serialize_structure_visibility_config(&mut object_179, var_178);
        object_179.finish();
    }
    if let Some(var_180) = &input.lock_token {
        object.key("LockToken").string(var_180);
    }
    if let Some(var_181) = &input.custom_response_bodies {
        let mut object_182 = object.key("CustomResponseBodies").start_object();
        for (key_183, value_184) in var_181 {
            {
                let mut object_185 = object_182.key(key_183).start_object();
                crate::json_ser::serialize_structure_custom_response_body(
                    &mut object_185,
                    value_184,
                );
                object_185.finish();
            }
        }
        object_182.finish();
    }
}

pub fn serialize_structure_update_web_acl_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWebAclInput,
) {
    if let Some(var_186) = &input.name {
        object.key("Name").string(var_186);
    }
    if let Some(var_187) = &input.scope {
        object.key("Scope").string(var_187.as_str());
    }
    if let Some(var_188) = &input.id {
        object.key("Id").string(var_188);
    }
    if let Some(var_189) = &input.default_action {
        let mut object_190 = object.key("DefaultAction").start_object();
        crate::json_ser::serialize_structure_default_action(&mut object_190, var_189);
        object_190.finish();
    }
    if let Some(var_191) = &input.description {
        object.key("Description").string(var_191);
    }
    if let Some(var_192) = &input.rules {
        let mut array_193 = object.key("Rules").start_array();
        for item_194 in var_192 {
            {
                let mut object_195 = array_193.value().start_object();
                crate::json_ser::serialize_structure_rule(&mut object_195, item_194);
                object_195.finish();
            }
        }
        array_193.finish();
    }
    if let Some(var_196) = &input.visibility_config {
        let mut object_197 = object.key("VisibilityConfig").start_object();
        crate::json_ser::serialize_structure_visibility_config(&mut object_197, var_196);
        object_197.finish();
    }
    if let Some(var_198) = &input.lock_token {
        object.key("LockToken").string(var_198);
    }
    if let Some(var_199) = &input.custom_response_bodies {
        let mut object_200 = object.key("CustomResponseBodies").start_object();
        for (key_201, value_202) in var_199 {
            {
                let mut object_203 = object_200.key(key_201).start_object();
                crate::json_ser::serialize_structure_custom_response_body(
                    &mut object_203,
                    value_202,
                );
                object_203.finish();
            }
        }
        object_200.finish();
    }
}

pub fn serialize_structure_rule(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Rule,
) {
    if let Some(var_204) = &input.name {
        object.key("Name").string(var_204);
    }
    {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.priority).into()),
        );
    }
    if let Some(var_205) = &input.statement {
        let mut object_206 = object.key("Statement").start_object();
        crate::json_ser::serialize_structure_statement(&mut object_206, var_205);
        object_206.finish();
    }
    if let Some(var_207) = &input.action {
        let mut object_208 = object.key("Action").start_object();
        crate::json_ser::serialize_structure_rule_action(&mut object_208, var_207);
        object_208.finish();
    }
    if let Some(var_209) = &input.override_action {
        let mut object_210 = object.key("OverrideAction").start_object();
        crate::json_ser::serialize_structure_override_action(&mut object_210, var_209);
        object_210.finish();
    }
    if let Some(var_211) = &input.rule_labels {
        let mut array_212 = object.key("RuleLabels").start_array();
        for item_213 in var_211 {
            {
                let mut object_214 = array_212.value().start_object();
                crate::json_ser::serialize_structure_label(&mut object_214, item_213);
                object_214.finish();
            }
        }
        array_212.finish();
    }
    if let Some(var_215) = &input.visibility_config {
        let mut object_216 = object.key("VisibilityConfig").start_object();
        crate::json_ser::serialize_structure_visibility_config(&mut object_216, var_215);
        object_216.finish();
    }
}

pub fn serialize_structure_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_217) = &input.key {
        object.key("Key").string(var_217);
    }
    if let Some(var_218) = &input.value {
        object.key("Value").string(var_218);
    }
}

pub fn serialize_structure_regex(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Regex,
) {
    if let Some(var_219) = &input.regex_string {
        object.key("RegexString").string(var_219);
    }
}

pub fn serialize_structure_visibility_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VisibilityConfig,
) {
    {
        object
            .key("SampledRequestsEnabled")
            .boolean(input.sampled_requests_enabled);
    }
    {
        object
            .key("CloudWatchMetricsEnabled")
            .boolean(input.cloud_watch_metrics_enabled);
    }
    if let Some(var_220) = &input.metric_name {
        object.key("MetricName").string(var_220);
    }
}

pub fn serialize_structure_custom_response_body(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomResponseBody,
) {
    if let Some(var_221) = &input.content_type {
        object.key("ContentType").string(var_221.as_str());
    }
    if let Some(var_222) = &input.content {
        object.key("Content").string(var_222);
    }
}

pub fn serialize_structure_default_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DefaultAction,
) {
    if let Some(var_223) = &input.block {
        let mut object_224 = object.key("Block").start_object();
        crate::json_ser::serialize_structure_block_action(&mut object_224, var_223);
        object_224.finish();
    }
    if let Some(var_225) = &input.allow {
        let mut object_226 = object.key("Allow").start_object();
        crate::json_ser::serialize_structure_allow_action(&mut object_226, var_225);
        object_226.finish();
    }
}

pub fn serialize_structure_time_window(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TimeWindow,
) {
    if let Some(var_227) = &input.start_time {
        object
            .key("StartTime")
            .instant(var_227, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_228) = &input.end_time {
        object
            .key("EndTime")
            .instant(var_228, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_logging_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoggingConfiguration,
) {
    if let Some(var_229) = &input.resource_arn {
        object.key("ResourceArn").string(var_229);
    }
    if let Some(var_230) = &input.log_destination_configs {
        let mut array_231 = object.key("LogDestinationConfigs").start_array();
        for item_232 in var_230 {
            {
                array_231.value().string(item_232);
            }
        }
        array_231.finish();
    }
    if let Some(var_233) = &input.redacted_fields {
        let mut array_234 = object.key("RedactedFields").start_array();
        for item_235 in var_233 {
            {
                let mut object_236 = array_234.value().start_object();
                crate::json_ser::serialize_structure_field_to_match(&mut object_236, item_235);
                object_236.finish();
            }
        }
        array_234.finish();
    }
    if input.managed_by_firewall_manager {
        object
            .key("ManagedByFirewallManager")
            .boolean(input.managed_by_firewall_manager);
    }
    if let Some(var_237) = &input.logging_filter {
        let mut object_238 = object.key("LoggingFilter").start_object();
        crate::json_ser::serialize_structure_logging_filter(&mut object_238, var_237);
        object_238.finish();
    }
}

pub fn serialize_structure_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Statement,
) {
    if let Some(var_239) = &input.byte_match_statement {
        let mut object_240 = object.key("ByteMatchStatement").start_object();
        crate::json_ser::serialize_structure_byte_match_statement(&mut object_240, var_239);
        object_240.finish();
    }
    if let Some(var_241) = &input.sqli_match_statement {
        let mut object_242 = object.key("SqliMatchStatement").start_object();
        crate::json_ser::serialize_structure_sqli_match_statement(&mut object_242, var_241);
        object_242.finish();
    }
    if let Some(var_243) = &input.xss_match_statement {
        let mut object_244 = object.key("XssMatchStatement").start_object();
        crate::json_ser::serialize_structure_xss_match_statement(&mut object_244, var_243);
        object_244.finish();
    }
    if let Some(var_245) = &input.size_constraint_statement {
        let mut object_246 = object.key("SizeConstraintStatement").start_object();
        crate::json_ser::serialize_structure_size_constraint_statement(&mut object_246, var_245);
        object_246.finish();
    }
    if let Some(var_247) = &input.geo_match_statement {
        let mut object_248 = object.key("GeoMatchStatement").start_object();
        crate::json_ser::serialize_structure_geo_match_statement(&mut object_248, var_247);
        object_248.finish();
    }
    if let Some(var_249) = &input.rule_group_reference_statement {
        let mut object_250 = object.key("RuleGroupReferenceStatement").start_object();
        crate::json_ser::serialize_structure_rule_group_reference_statement(
            &mut object_250,
            var_249,
        );
        object_250.finish();
    }
    if let Some(var_251) = &input.ip_set_reference_statement {
        let mut object_252 = object.key("IPSetReferenceStatement").start_object();
        crate::json_ser::serialize_structure_ip_set_reference_statement(&mut object_252, var_251);
        object_252.finish();
    }
    if let Some(var_253) = &input.regex_pattern_set_reference_statement {
        let mut object_254 = object
            .key("RegexPatternSetReferenceStatement")
            .start_object();
        crate::json_ser::serialize_structure_regex_pattern_set_reference_statement(
            &mut object_254,
            var_253,
        );
        object_254.finish();
    }
    if let Some(var_255) = &input.rate_based_statement {
        let mut object_256 = object.key("RateBasedStatement").start_object();
        crate::json_ser::serialize_structure_rate_based_statement(&mut object_256, var_255);
        object_256.finish();
    }
    if let Some(var_257) = &input.and_statement {
        let mut object_258 = object.key("AndStatement").start_object();
        crate::json_ser::serialize_structure_and_statement(&mut object_258, var_257);
        object_258.finish();
    }
    if let Some(var_259) = &input.or_statement {
        let mut object_260 = object.key("OrStatement").start_object();
        crate::json_ser::serialize_structure_or_statement(&mut object_260, var_259);
        object_260.finish();
    }
    if let Some(var_261) = &input.not_statement {
        let mut object_262 = object.key("NotStatement").start_object();
        crate::json_ser::serialize_structure_not_statement(&mut object_262, var_261);
        object_262.finish();
    }
    if let Some(var_263) = &input.managed_rule_group_statement {
        let mut object_264 = object.key("ManagedRuleGroupStatement").start_object();
        crate::json_ser::serialize_structure_managed_rule_group_statement(&mut object_264, var_263);
        object_264.finish();
    }
    if let Some(var_265) = &input.label_match_statement {
        let mut object_266 = object.key("LabelMatchStatement").start_object();
        crate::json_ser::serialize_structure_label_match_statement(&mut object_266, var_265);
        object_266.finish();
    }
}

pub fn serialize_structure_rule_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleAction,
) {
    if let Some(var_267) = &input.block {
        let mut object_268 = object.key("Block").start_object();
        crate::json_ser::serialize_structure_block_action(&mut object_268, var_267);
        object_268.finish();
    }
    if let Some(var_269) = &input.allow {
        let mut object_270 = object.key("Allow").start_object();
        crate::json_ser::serialize_structure_allow_action(&mut object_270, var_269);
        object_270.finish();
    }
    if let Some(var_271) = &input.count {
        let mut object_272 = object.key("Count").start_object();
        crate::json_ser::serialize_structure_count_action(&mut object_272, var_271);
        object_272.finish();
    }
}

pub fn serialize_structure_override_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OverrideAction,
) {
    if let Some(var_273) = &input.count {
        let mut object_274 = object.key("Count").start_object();
        crate::json_ser::serialize_structure_count_action(&mut object_274, var_273);
        object_274.finish();
    }
    if let Some(var_275) = &input.none {
        let mut object_276 = object.key("None").start_object();
        crate::json_ser::serialize_structure_none_action(&mut object_276, var_275);
        object_276.finish();
    }
}

pub fn serialize_structure_label(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Label,
) {
    if let Some(var_277) = &input.name {
        object.key("Name").string(var_277);
    }
}

pub fn serialize_structure_block_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BlockAction,
) {
    if let Some(var_278) = &input.custom_response {
        let mut object_279 = object.key("CustomResponse").start_object();
        crate::json_ser::serialize_structure_custom_response(&mut object_279, var_278);
        object_279.finish();
    }
}

pub fn serialize_structure_allow_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AllowAction,
) {
    if let Some(var_280) = &input.custom_request_handling {
        let mut object_281 = object.key("CustomRequestHandling").start_object();
        crate::json_ser::serialize_structure_custom_request_handling(&mut object_281, var_280);
        object_281.finish();
    }
}

pub fn serialize_structure_field_to_match(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FieldToMatch,
) {
    if let Some(var_282) = &input.single_header {
        let mut object_283 = object.key("SingleHeader").start_object();
        crate::json_ser::serialize_structure_single_header(&mut object_283, var_282);
        object_283.finish();
    }
    if let Some(var_284) = &input.single_query_argument {
        let mut object_285 = object.key("SingleQueryArgument").start_object();
        crate::json_ser::serialize_structure_single_query_argument(&mut object_285, var_284);
        object_285.finish();
    }
    if let Some(var_286) = &input.all_query_arguments {
        let mut object_287 = object.key("AllQueryArguments").start_object();
        crate::json_ser::serialize_structure_all_query_arguments(&mut object_287, var_286);
        object_287.finish();
    }
    if let Some(var_288) = &input.uri_path {
        let mut object_289 = object.key("UriPath").start_object();
        crate::json_ser::serialize_structure_uri_path(&mut object_289, var_288);
        object_289.finish();
    }
    if let Some(var_290) = &input.query_string {
        let mut object_291 = object.key("QueryString").start_object();
        crate::json_ser::serialize_structure_query_string(&mut object_291, var_290);
        object_291.finish();
    }
    if let Some(var_292) = &input.body {
        let mut object_293 = object.key("Body").start_object();
        crate::json_ser::serialize_structure_body(&mut object_293, var_292);
        object_293.finish();
    }
    if let Some(var_294) = &input.method {
        let mut object_295 = object.key("Method").start_object();
        crate::json_ser::serialize_structure_method(&mut object_295, var_294);
        object_295.finish();
    }
    if let Some(var_296) = &input.json_body {
        let mut object_297 = object.key("JsonBody").start_object();
        crate::json_ser::serialize_structure_json_body(&mut object_297, var_296);
        object_297.finish();
    }
}

pub fn serialize_structure_logging_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoggingFilter,
) {
    if let Some(var_298) = &input.filters {
        let mut array_299 = object.key("Filters").start_array();
        for item_300 in var_298 {
            {
                let mut object_301 = array_299.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_301, item_300);
                object_301.finish();
            }
        }
        array_299.finish();
    }
    if let Some(var_302) = &input.default_behavior {
        object.key("DefaultBehavior").string(var_302.as_str());
    }
}

pub fn serialize_structure_byte_match_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ByteMatchStatement,
) {
    if let Some(var_303) = &input.search_string {
        object
            .key("SearchString")
            .string_unchecked(&smithy_types::base64::encode(var_303));
    }
    if let Some(var_304) = &input.field_to_match {
        let mut object_305 = object.key("FieldToMatch").start_object();
        crate::json_ser::serialize_structure_field_to_match(&mut object_305, var_304);
        object_305.finish();
    }
    if let Some(var_306) = &input.text_transformations {
        let mut array_307 = object.key("TextTransformations").start_array();
        for item_308 in var_306 {
            {
                let mut object_309 = array_307.value().start_object();
                crate::json_ser::serialize_structure_text_transformation(&mut object_309, item_308);
                object_309.finish();
            }
        }
        array_307.finish();
    }
    if let Some(var_310) = &input.positional_constraint {
        object.key("PositionalConstraint").string(var_310.as_str());
    }
}

pub fn serialize_structure_sqli_match_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SqliMatchStatement,
) {
    if let Some(var_311) = &input.field_to_match {
        let mut object_312 = object.key("FieldToMatch").start_object();
        crate::json_ser::serialize_structure_field_to_match(&mut object_312, var_311);
        object_312.finish();
    }
    if let Some(var_313) = &input.text_transformations {
        let mut array_314 = object.key("TextTransformations").start_array();
        for item_315 in var_313 {
            {
                let mut object_316 = array_314.value().start_object();
                crate::json_ser::serialize_structure_text_transformation(&mut object_316, item_315);
                object_316.finish();
            }
        }
        array_314.finish();
    }
}

pub fn serialize_structure_xss_match_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::XssMatchStatement,
) {
    if let Some(var_317) = &input.field_to_match {
        let mut object_318 = object.key("FieldToMatch").start_object();
        crate::json_ser::serialize_structure_field_to_match(&mut object_318, var_317);
        object_318.finish();
    }
    if let Some(var_319) = &input.text_transformations {
        let mut array_320 = object.key("TextTransformations").start_array();
        for item_321 in var_319 {
            {
                let mut object_322 = array_320.value().start_object();
                crate::json_ser::serialize_structure_text_transformation(&mut object_322, item_321);
                object_322.finish();
            }
        }
        array_320.finish();
    }
}

pub fn serialize_structure_size_constraint_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SizeConstraintStatement,
) {
    if let Some(var_323) = &input.field_to_match {
        let mut object_324 = object.key("FieldToMatch").start_object();
        crate::json_ser::serialize_structure_field_to_match(&mut object_324, var_323);
        object_324.finish();
    }
    if let Some(var_325) = &input.comparison_operator {
        object.key("ComparisonOperator").string(var_325.as_str());
    }
    {
        object.key("Size").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.size).into()),
        );
    }
    if let Some(var_326) = &input.text_transformations {
        let mut array_327 = object.key("TextTransformations").start_array();
        for item_328 in var_326 {
            {
                let mut object_329 = array_327.value().start_object();
                crate::json_ser::serialize_structure_text_transformation(&mut object_329, item_328);
                object_329.finish();
            }
        }
        array_327.finish();
    }
}

pub fn serialize_structure_geo_match_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GeoMatchStatement,
) {
    if let Some(var_330) = &input.country_codes {
        let mut array_331 = object.key("CountryCodes").start_array();
        for item_332 in var_330 {
            {
                array_331.value().string(item_332.as_str());
            }
        }
        array_331.finish();
    }
    if let Some(var_333) = &input.forwarded_ip_config {
        let mut object_334 = object.key("ForwardedIPConfig").start_object();
        crate::json_ser::serialize_structure_forwarded_ip_config(&mut object_334, var_333);
        object_334.finish();
    }
}

pub fn serialize_structure_rule_group_reference_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupReferenceStatement,
) {
    if let Some(var_335) = &input.arn {
        object.key("ARN").string(var_335);
    }
    if let Some(var_336) = &input.excluded_rules {
        let mut array_337 = object.key("ExcludedRules").start_array();
        for item_338 in var_336 {
            {
                let mut object_339 = array_337.value().start_object();
                crate::json_ser::serialize_structure_excluded_rule(&mut object_339, item_338);
                object_339.finish();
            }
        }
        array_337.finish();
    }
}

pub fn serialize_structure_ip_set_reference_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IpSetReferenceStatement,
) {
    if let Some(var_340) = &input.arn {
        object.key("ARN").string(var_340);
    }
    if let Some(var_341) = &input.ip_set_forwarded_ip_config {
        let mut object_342 = object.key("IPSetForwardedIPConfig").start_object();
        crate::json_ser::serialize_structure_ip_set_forwarded_ip_config(&mut object_342, var_341);
        object_342.finish();
    }
}

pub fn serialize_structure_regex_pattern_set_reference_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RegexPatternSetReferenceStatement,
) {
    if let Some(var_343) = &input.arn {
        object.key("ARN").string(var_343);
    }
    if let Some(var_344) = &input.field_to_match {
        let mut object_345 = object.key("FieldToMatch").start_object();
        crate::json_ser::serialize_structure_field_to_match(&mut object_345, var_344);
        object_345.finish();
    }
    if let Some(var_346) = &input.text_transformations {
        let mut array_347 = object.key("TextTransformations").start_array();
        for item_348 in var_346 {
            {
                let mut object_349 = array_347.value().start_object();
                crate::json_ser::serialize_structure_text_transformation(&mut object_349, item_348);
                object_349.finish();
            }
        }
        array_347.finish();
    }
}

pub fn serialize_structure_rate_based_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RateBasedStatement,
) {
    {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_350) = &input.aggregate_key_type {
        object.key("AggregateKeyType").string(var_350.as_str());
    }
    if let Some(var_351) = &input.scope_down_statement {
        let mut object_352 = object.key("ScopeDownStatement").start_object();
        crate::json_ser::serialize_structure_statement(&mut object_352, var_351);
        object_352.finish();
    }
    if let Some(var_353) = &input.forwarded_ip_config {
        let mut object_354 = object.key("ForwardedIPConfig").start_object();
        crate::json_ser::serialize_structure_forwarded_ip_config(&mut object_354, var_353);
        object_354.finish();
    }
}

pub fn serialize_structure_and_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AndStatement,
) {
    if let Some(var_355) = &input.statements {
        let mut array_356 = object.key("Statements").start_array();
        for item_357 in var_355 {
            {
                let mut object_358 = array_356.value().start_object();
                crate::json_ser::serialize_structure_statement(&mut object_358, item_357);
                object_358.finish();
            }
        }
        array_356.finish();
    }
}

pub fn serialize_structure_or_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OrStatement,
) {
    if let Some(var_359) = &input.statements {
        let mut array_360 = object.key("Statements").start_array();
        for item_361 in var_359 {
            {
                let mut object_362 = array_360.value().start_object();
                crate::json_ser::serialize_structure_statement(&mut object_362, item_361);
                object_362.finish();
            }
        }
        array_360.finish();
    }
}

pub fn serialize_structure_not_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NotStatement,
) {
    if let Some(var_363) = &input.statement {
        let mut object_364 = object.key("Statement").start_object();
        crate::json_ser::serialize_structure_statement(&mut object_364, var_363);
        object_364.finish();
    }
}

pub fn serialize_structure_managed_rule_group_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ManagedRuleGroupStatement,
) {
    if let Some(var_365) = &input.vendor_name {
        object.key("VendorName").string(var_365);
    }
    if let Some(var_366) = &input.name {
        object.key("Name").string(var_366);
    }
    if let Some(var_367) = &input.excluded_rules {
        let mut array_368 = object.key("ExcludedRules").start_array();
        for item_369 in var_367 {
            {
                let mut object_370 = array_368.value().start_object();
                crate::json_ser::serialize_structure_excluded_rule(&mut object_370, item_369);
                object_370.finish();
            }
        }
        array_368.finish();
    }
    if let Some(var_371) = &input.scope_down_statement {
        let mut object_372 = object.key("ScopeDownStatement").start_object();
        crate::json_ser::serialize_structure_statement(&mut object_372, var_371);
        object_372.finish();
    }
}

pub fn serialize_structure_label_match_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelMatchStatement,
) {
    if let Some(var_373) = &input.scope {
        object.key("Scope").string(var_373.as_str());
    }
    if let Some(var_374) = &input.key {
        object.key("Key").string(var_374);
    }
}

pub fn serialize_structure_count_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CountAction,
) {
    if let Some(var_375) = &input.custom_request_handling {
        let mut object_376 = object.key("CustomRequestHandling").start_object();
        crate::json_ser::serialize_structure_custom_request_handling(&mut object_376, var_375);
        object_376.finish();
    }
}

pub fn serialize_structure_none_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NoneAction,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_custom_response(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomResponse,
) {
    if let Some(var_377) = &input.response_code {
        object.key("ResponseCode").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_377).into()),
        );
    }
    if let Some(var_378) = &input.custom_response_body_key {
        object.key("CustomResponseBodyKey").string(var_378);
    }
    if let Some(var_379) = &input.response_headers {
        let mut array_380 = object.key("ResponseHeaders").start_array();
        for item_381 in var_379 {
            {
                let mut object_382 = array_380.value().start_object();
                crate::json_ser::serialize_structure_custom_http_header(&mut object_382, item_381);
                object_382.finish();
            }
        }
        array_380.finish();
    }
}

pub fn serialize_structure_custom_request_handling(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomRequestHandling,
) {
    if let Some(var_383) = &input.insert_headers {
        let mut array_384 = object.key("InsertHeaders").start_array();
        for item_385 in var_383 {
            {
                let mut object_386 = array_384.value().start_object();
                crate::json_ser::serialize_structure_custom_http_header(&mut object_386, item_385);
                object_386.finish();
            }
        }
        array_384.finish();
    }
}

pub fn serialize_structure_single_header(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SingleHeader,
) {
    if let Some(var_387) = &input.name {
        object.key("Name").string(var_387);
    }
}

pub fn serialize_structure_single_query_argument(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SingleQueryArgument,
) {
    if let Some(var_388) = &input.name {
        object.key("Name").string(var_388);
    }
}

pub fn serialize_structure_all_query_arguments(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AllQueryArguments,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_uri_path(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UriPath,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_query_string(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::QueryString,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_body(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Body,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_method(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Method,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_json_body(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JsonBody,
) {
    if let Some(var_389) = &input.match_pattern {
        let mut object_390 = object.key("MatchPattern").start_object();
        crate::json_ser::serialize_structure_json_match_pattern(&mut object_390, var_389);
        object_390.finish();
    }
    if let Some(var_391) = &input.match_scope {
        object.key("MatchScope").string(var_391.as_str());
    }
    if let Some(var_392) = &input.invalid_fallback_behavior {
        object
            .key("InvalidFallbackBehavior")
            .string(var_392.as_str());
    }
}

pub fn serialize_structure_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Filter,
) {
    if let Some(var_393) = &input.behavior {
        object.key("Behavior").string(var_393.as_str());
    }
    if let Some(var_394) = &input.requirement {
        object.key("Requirement").string(var_394.as_str());
    }
    if let Some(var_395) = &input.conditions {
        let mut array_396 = object.key("Conditions").start_array();
        for item_397 in var_395 {
            {
                let mut object_398 = array_396.value().start_object();
                crate::json_ser::serialize_structure_condition(&mut object_398, item_397);
                object_398.finish();
            }
        }
        array_396.finish();
    }
}

pub fn serialize_structure_text_transformation(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TextTransformation,
) {
    {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.priority).into()),
        );
    }
    if let Some(var_399) = &input.r#type {
        object.key("Type").string(var_399.as_str());
    }
}

pub fn serialize_structure_forwarded_ip_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ForwardedIpConfig,
) {
    if let Some(var_400) = &input.header_name {
        object.key("HeaderName").string(var_400);
    }
    if let Some(var_401) = &input.fallback_behavior {
        object.key("FallbackBehavior").string(var_401.as_str());
    }
}

pub fn serialize_structure_excluded_rule(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExcludedRule,
) {
    if let Some(var_402) = &input.name {
        object.key("Name").string(var_402);
    }
}

pub fn serialize_structure_ip_set_forwarded_ip_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IpSetForwardedIpConfig,
) {
    if let Some(var_403) = &input.header_name {
        object.key("HeaderName").string(var_403);
    }
    if let Some(var_404) = &input.fallback_behavior {
        object.key("FallbackBehavior").string(var_404.as_str());
    }
    if let Some(var_405) = &input.position {
        object.key("Position").string(var_405.as_str());
    }
}

pub fn serialize_structure_custom_http_header(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomHttpHeader,
) {
    if let Some(var_406) = &input.name {
        object.key("Name").string(var_406);
    }
    if let Some(var_407) = &input.value {
        object.key("Value").string(var_407);
    }
}

pub fn serialize_structure_json_match_pattern(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JsonMatchPattern,
) {
    if let Some(var_408) = &input.all {
        let mut object_409 = object.key("All").start_object();
        crate::json_ser::serialize_structure_all(&mut object_409, var_408);
        object_409.finish();
    }
    if let Some(var_410) = &input.included_paths {
        let mut array_411 = object.key("IncludedPaths").start_array();
        for item_412 in var_410 {
            {
                array_411.value().string(item_412);
            }
        }
        array_411.finish();
    }
}

pub fn serialize_structure_condition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Condition,
) {
    if let Some(var_413) = &input.action_condition {
        let mut object_414 = object.key("ActionCondition").start_object();
        crate::json_ser::serialize_structure_action_condition(&mut object_414, var_413);
        object_414.finish();
    }
    if let Some(var_415) = &input.label_name_condition {
        let mut object_416 = object.key("LabelNameCondition").start_object();
        crate::json_ser::serialize_structure_label_name_condition(&mut object_416, var_415);
        object_416.finish();
    }
}

pub fn serialize_structure_all(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::All,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_action_condition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ActionCondition,
) {
    if let Some(var_417) = &input.action {
        object.key("Action").string(var_417.as_str());
    }
}

pub fn serialize_structure_label_name_condition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelNameCondition,
) {
    if let Some(var_418) = &input.label_name {
        object.key("LabelName").string(var_418);
    }
}
