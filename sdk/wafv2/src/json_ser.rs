// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_web_acl_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateWebAclInput,
) {
    if let Some(var_1) = &input.web_acl_arn {
        object.key("WebACLArn").string(var_1);
    }
    if let Some(var_2) = &input.resource_arn {
        object.key("ResourceArn").string(var_2);
    }
}

pub fn serialize_structure_crate_input_check_capacity_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CheckCapacityInput,
) {
    if let Some(var_3) = &input.scope {
        object.key("Scope").string(var_3.as_str());
    }
    if let Some(var_4) = &input.rules {
        let mut array_5 = object.key("Rules").start_array();
        for item_6 in var_4 {
            {
                let mut object_7 = array_5.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule(&mut object_7, item_6);
                object_7.finish();
            }
        }
        array_5.finish();
    }
}

pub fn serialize_structure_crate_input_create_ip_set_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateIpSetInput,
) {
    if let Some(var_8) = &input.name {
        object.key("Name").string(var_8);
    }
    if let Some(var_9) = &input.scope {
        object.key("Scope").string(var_9.as_str());
    }
    if let Some(var_10) = &input.description {
        object.key("Description").string(var_10);
    }
    if let Some(var_11) = &input.ip_address_version {
        object.key("IPAddressVersion").string(var_11.as_str());
    }
    if let Some(var_12) = &input.addresses {
        let mut array_13 = object.key("Addresses").start_array();
        for item_14 in var_12 {
            {
                array_13.value().string(item_14);
            }
        }
        array_13.finish();
    }
    if let Some(var_15) = &input.tags {
        let mut array_16 = object.key("Tags").start_array();
        for item_17 in var_15 {
            {
                let mut object_18 = array_16.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_18, item_17);
                object_18.finish();
            }
        }
        array_16.finish();
    }
}

pub fn serialize_structure_crate_input_create_regex_pattern_set_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRegexPatternSetInput,
) {
    if let Some(var_19) = &input.name {
        object.key("Name").string(var_19);
    }
    if let Some(var_20) = &input.scope {
        object.key("Scope").string(var_20.as_str());
    }
    if let Some(var_21) = &input.description {
        object.key("Description").string(var_21);
    }
    if let Some(var_22) = &input.regular_expression_list {
        let mut array_23 = object.key("RegularExpressionList").start_array();
        for item_24 in var_22 {
            {
                let mut object_25 = array_23.value().start_object();
                crate::json_ser::serialize_structure_crate_model_regex(&mut object_25, item_24);
                object_25.finish();
            }
        }
        array_23.finish();
    }
    if let Some(var_26) = &input.tags {
        let mut array_27 = object.key("Tags").start_array();
        for item_28 in var_26 {
            {
                let mut object_29 = array_27.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_29, item_28);
                object_29.finish();
            }
        }
        array_27.finish();
    }
}

pub fn serialize_structure_crate_input_create_rule_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRuleGroupInput,
) {
    if let Some(var_30) = &input.name {
        object.key("Name").string(var_30);
    }
    if let Some(var_31) = &input.scope {
        object.key("Scope").string(var_31.as_str());
    }
    {
        object.key("Capacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.capacity).into()),
        );
    }
    if let Some(var_32) = &input.description {
        object.key("Description").string(var_32);
    }
    if let Some(var_33) = &input.rules {
        let mut array_34 = object.key("Rules").start_array();
        for item_35 in var_33 {
            {
                let mut object_36 = array_34.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule(&mut object_36, item_35);
                object_36.finish();
            }
        }
        array_34.finish();
    }
    if let Some(var_37) = &input.visibility_config {
        let mut object_38 = object.key("VisibilityConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_visibility_config(&mut object_38, var_37);
        object_38.finish();
    }
    if let Some(var_39) = &input.tags {
        let mut array_40 = object.key("Tags").start_array();
        for item_41 in var_39 {
            {
                let mut object_42 = array_40.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_42, item_41);
                object_42.finish();
            }
        }
        array_40.finish();
    }
    if let Some(var_43) = &input.custom_response_bodies {
        let mut object_44 = object.key("CustomResponseBodies").start_object();
        for (key_45, value_46) in var_43 {
            {
                let mut object_47 = object_44.key(key_45).start_object();
                crate::json_ser::serialize_structure_crate_model_custom_response_body(
                    &mut object_47,
                    value_46,
                );
                object_47.finish();
            }
        }
        object_44.finish();
    }
}

pub fn serialize_structure_crate_input_create_web_acl_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWebAclInput,
) {
    if let Some(var_48) = &input.name {
        object.key("Name").string(var_48);
    }
    if let Some(var_49) = &input.scope {
        object.key("Scope").string(var_49.as_str());
    }
    if let Some(var_50) = &input.default_action {
        let mut object_51 = object.key("DefaultAction").start_object();
        crate::json_ser::serialize_structure_crate_model_default_action(&mut object_51, var_50);
        object_51.finish();
    }
    if let Some(var_52) = &input.description {
        object.key("Description").string(var_52);
    }
    if let Some(var_53) = &input.rules {
        let mut array_54 = object.key("Rules").start_array();
        for item_55 in var_53 {
            {
                let mut object_56 = array_54.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule(&mut object_56, item_55);
                object_56.finish();
            }
        }
        array_54.finish();
    }
    if let Some(var_57) = &input.visibility_config {
        let mut object_58 = object.key("VisibilityConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_visibility_config(&mut object_58, var_57);
        object_58.finish();
    }
    if let Some(var_59) = &input.tags {
        let mut array_60 = object.key("Tags").start_array();
        for item_61 in var_59 {
            {
                let mut object_62 = array_60.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_62, item_61);
                object_62.finish();
            }
        }
        array_60.finish();
    }
    if let Some(var_63) = &input.custom_response_bodies {
        let mut object_64 = object.key("CustomResponseBodies").start_object();
        for (key_65, value_66) in var_63 {
            {
                let mut object_67 = object_64.key(key_65).start_object();
                crate::json_ser::serialize_structure_crate_model_custom_response_body(
                    &mut object_67,
                    value_66,
                );
                object_67.finish();
            }
        }
        object_64.finish();
    }
}

pub fn serialize_structure_crate_input_delete_firewall_manager_rule_groups_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFirewallManagerRuleGroupsInput,
) {
    if let Some(var_68) = &input.web_acl_arn {
        object.key("WebACLArn").string(var_68);
    }
    if let Some(var_69) = &input.web_acl_lock_token {
        object.key("WebACLLockToken").string(var_69);
    }
}

pub fn serialize_structure_crate_input_delete_ip_set_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteIpSetInput,
) {
    if let Some(var_70) = &input.name {
        object.key("Name").string(var_70);
    }
    if let Some(var_71) = &input.scope {
        object.key("Scope").string(var_71.as_str());
    }
    if let Some(var_72) = &input.id {
        object.key("Id").string(var_72);
    }
    if let Some(var_73) = &input.lock_token {
        object.key("LockToken").string(var_73);
    }
}

pub fn serialize_structure_crate_input_delete_logging_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteLoggingConfigurationInput,
) {
    if let Some(var_74) = &input.resource_arn {
        object.key("ResourceArn").string(var_74);
    }
}

pub fn serialize_structure_crate_input_delete_permission_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePermissionPolicyInput,
) {
    if let Some(var_75) = &input.resource_arn {
        object.key("ResourceArn").string(var_75);
    }
}

pub fn serialize_structure_crate_input_delete_regex_pattern_set_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRegexPatternSetInput,
) {
    if let Some(var_76) = &input.name {
        object.key("Name").string(var_76);
    }
    if let Some(var_77) = &input.scope {
        object.key("Scope").string(var_77.as_str());
    }
    if let Some(var_78) = &input.id {
        object.key("Id").string(var_78);
    }
    if let Some(var_79) = &input.lock_token {
        object.key("LockToken").string(var_79);
    }
}

pub fn serialize_structure_crate_input_delete_rule_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRuleGroupInput,
) {
    if let Some(var_80) = &input.name {
        object.key("Name").string(var_80);
    }
    if let Some(var_81) = &input.scope {
        object.key("Scope").string(var_81.as_str());
    }
    if let Some(var_82) = &input.id {
        object.key("Id").string(var_82);
    }
    if let Some(var_83) = &input.lock_token {
        object.key("LockToken").string(var_83);
    }
}

pub fn serialize_structure_crate_input_delete_web_acl_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteWebAclInput,
) {
    if let Some(var_84) = &input.name {
        object.key("Name").string(var_84);
    }
    if let Some(var_85) = &input.scope {
        object.key("Scope").string(var_85.as_str());
    }
    if let Some(var_86) = &input.id {
        object.key("Id").string(var_86);
    }
    if let Some(var_87) = &input.lock_token {
        object.key("LockToken").string(var_87);
    }
}

pub fn serialize_structure_crate_input_describe_managed_rule_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeManagedRuleGroupInput,
) {
    if let Some(var_88) = &input.vendor_name {
        object.key("VendorName").string(var_88);
    }
    if let Some(var_89) = &input.name {
        object.key("Name").string(var_89);
    }
    if let Some(var_90) = &input.scope {
        object.key("Scope").string(var_90.as_str());
    }
    if let Some(var_91) = &input.version_name {
        object.key("VersionName").string(var_91);
    }
}

pub fn serialize_structure_crate_input_disassociate_web_acl_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateWebAclInput,
) {
    if let Some(var_92) = &input.resource_arn {
        object.key("ResourceArn").string(var_92);
    }
}

pub fn serialize_structure_crate_input_get_ip_set_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetIpSetInput,
) {
    if let Some(var_93) = &input.name {
        object.key("Name").string(var_93);
    }
    if let Some(var_94) = &input.scope {
        object.key("Scope").string(var_94.as_str());
    }
    if let Some(var_95) = &input.id {
        object.key("Id").string(var_95);
    }
}

pub fn serialize_structure_crate_input_get_logging_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetLoggingConfigurationInput,
) {
    if let Some(var_96) = &input.resource_arn {
        object.key("ResourceArn").string(var_96);
    }
}

pub fn serialize_structure_crate_input_get_managed_rule_set_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetManagedRuleSetInput,
) {
    if let Some(var_97) = &input.name {
        object.key("Name").string(var_97);
    }
    if let Some(var_98) = &input.scope {
        object.key("Scope").string(var_98.as_str());
    }
    if let Some(var_99) = &input.id {
        object.key("Id").string(var_99);
    }
}

pub fn serialize_structure_crate_input_get_permission_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPermissionPolicyInput,
) {
    if let Some(var_100) = &input.resource_arn {
        object.key("ResourceArn").string(var_100);
    }
}

pub fn serialize_structure_crate_input_get_rate_based_statement_managed_keys_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRateBasedStatementManagedKeysInput,
) {
    if let Some(var_101) = &input.scope {
        object.key("Scope").string(var_101.as_str());
    }
    if let Some(var_102) = &input.web_acl_name {
        object.key("WebACLName").string(var_102);
    }
    if let Some(var_103) = &input.web_acl_id {
        object.key("WebACLId").string(var_103);
    }
    if let Some(var_104) = &input.rule_name {
        object.key("RuleName").string(var_104);
    }
}

pub fn serialize_structure_crate_input_get_regex_pattern_set_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRegexPatternSetInput,
) {
    if let Some(var_105) = &input.name {
        object.key("Name").string(var_105);
    }
    if let Some(var_106) = &input.scope {
        object.key("Scope").string(var_106.as_str());
    }
    if let Some(var_107) = &input.id {
        object.key("Id").string(var_107);
    }
}

pub fn serialize_structure_crate_input_get_rule_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRuleGroupInput,
) {
    if let Some(var_108) = &input.name {
        object.key("Name").string(var_108);
    }
    if let Some(var_109) = &input.scope {
        object.key("Scope").string(var_109.as_str());
    }
    if let Some(var_110) = &input.id {
        object.key("Id").string(var_110);
    }
    if let Some(var_111) = &input.arn {
        object.key("ARN").string(var_111);
    }
}

pub fn serialize_structure_crate_input_get_sampled_requests_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSampledRequestsInput,
) {
    if let Some(var_112) = &input.web_acl_arn {
        object.key("WebAclArn").string(var_112);
    }
    if let Some(var_113) = &input.rule_metric_name {
        object.key("RuleMetricName").string(var_113);
    }
    if let Some(var_114) = &input.scope {
        object.key("Scope").string(var_114.as_str());
    }
    if let Some(var_115) = &input.time_window {
        let mut object_116 = object.key("TimeWindow").start_object();
        crate::json_ser::serialize_structure_crate_model_time_window(&mut object_116, var_115);
        object_116.finish();
    }
    {
        object.key("MaxItems").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_items).into()),
        );
    }
}

pub fn serialize_structure_crate_input_get_web_acl_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWebAclInput,
) {
    if let Some(var_117) = &input.name {
        object.key("Name").string(var_117);
    }
    if let Some(var_118) = &input.scope {
        object.key("Scope").string(var_118.as_str());
    }
    if let Some(var_119) = &input.id {
        object.key("Id").string(var_119);
    }
}

pub fn serialize_structure_crate_input_get_web_acl_for_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWebAclForResourceInput,
) {
    if let Some(var_120) = &input.resource_arn {
        object.key("ResourceArn").string(var_120);
    }
}

pub fn serialize_structure_crate_input_list_available_managed_rule_groups_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAvailableManagedRuleGroupsInput,
) {
    if let Some(var_121) = &input.scope {
        object.key("Scope").string(var_121.as_str());
    }
    if let Some(var_122) = &input.next_marker {
        object.key("NextMarker").string(var_122);
    }
    if let Some(var_123) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_123).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_available_managed_rule_group_versions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAvailableManagedRuleGroupVersionsInput,
) {
    if let Some(var_124) = &input.vendor_name {
        object.key("VendorName").string(var_124);
    }
    if let Some(var_125) = &input.name {
        object.key("Name").string(var_125);
    }
    if let Some(var_126) = &input.scope {
        object.key("Scope").string(var_126.as_str());
    }
    if let Some(var_127) = &input.next_marker {
        object.key("NextMarker").string(var_127);
    }
    if let Some(var_128) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_128).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_ip_sets_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListIpSetsInput,
) {
    if let Some(var_129) = &input.scope {
        object.key("Scope").string(var_129.as_str());
    }
    if let Some(var_130) = &input.next_marker {
        object.key("NextMarker").string(var_130);
    }
    if let Some(var_131) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_131).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_logging_configurations_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListLoggingConfigurationsInput,
) {
    if let Some(var_132) = &input.scope {
        object.key("Scope").string(var_132.as_str());
    }
    if let Some(var_133) = &input.next_marker {
        object.key("NextMarker").string(var_133);
    }
    if let Some(var_134) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_134).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_managed_rule_sets_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListManagedRuleSetsInput,
) {
    if let Some(var_135) = &input.scope {
        object.key("Scope").string(var_135.as_str());
    }
    if let Some(var_136) = &input.next_marker {
        object.key("NextMarker").string(var_136);
    }
    if let Some(var_137) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_137).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_regex_pattern_sets_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListRegexPatternSetsInput,
) {
    if let Some(var_138) = &input.scope {
        object.key("Scope").string(var_138.as_str());
    }
    if let Some(var_139) = &input.next_marker {
        object.key("NextMarker").string(var_139);
    }
    if let Some(var_140) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_140).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_resources_for_web_acl_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListResourcesForWebAclInput,
) {
    if let Some(var_141) = &input.web_acl_arn {
        object.key("WebACLArn").string(var_141);
    }
    if let Some(var_142) = &input.resource_type {
        object.key("ResourceType").string(var_142.as_str());
    }
}

pub fn serialize_structure_crate_input_list_rule_groups_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListRuleGroupsInput,
) {
    if let Some(var_143) = &input.scope {
        object.key("Scope").string(var_143.as_str());
    }
    if let Some(var_144) = &input.next_marker {
        object.key("NextMarker").string(var_144);
    }
    if let Some(var_145) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_145).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) {
    if let Some(var_146) = &input.next_marker {
        object.key("NextMarker").string(var_146);
    }
    if let Some(var_147) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_147).into()),
        );
    }
    if let Some(var_148) = &input.resource_arn {
        object.key("ResourceARN").string(var_148);
    }
}

pub fn serialize_structure_crate_input_list_web_ac_ls_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListWebAcLsInput,
) {
    if let Some(var_149) = &input.scope {
        object.key("Scope").string(var_149.as_str());
    }
    if let Some(var_150) = &input.next_marker {
        object.key("NextMarker").string(var_150);
    }
    if let Some(var_151) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_151).into()),
        );
    }
}

pub fn serialize_structure_crate_input_put_logging_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutLoggingConfigurationInput,
) {
    if let Some(var_152) = &input.logging_configuration {
        let mut object_153 = object.key("LoggingConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_logging_configuration(
            &mut object_153,
            var_152,
        );
        object_153.finish();
    }
}

pub fn serialize_structure_crate_input_put_managed_rule_set_versions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutManagedRuleSetVersionsInput,
) {
    if let Some(var_154) = &input.name {
        object.key("Name").string(var_154);
    }
    if let Some(var_155) = &input.scope {
        object.key("Scope").string(var_155.as_str());
    }
    if let Some(var_156) = &input.id {
        object.key("Id").string(var_156);
    }
    if let Some(var_157) = &input.lock_token {
        object.key("LockToken").string(var_157);
    }
    if let Some(var_158) = &input.recommended_version {
        object.key("RecommendedVersion").string(var_158);
    }
    if let Some(var_159) = &input.versions_to_publish {
        let mut object_160 = object.key("VersionsToPublish").start_object();
        for (key_161, value_162) in var_159 {
            {
                let mut object_163 = object_160.key(key_161).start_object();
                crate::json_ser::serialize_structure_crate_model_version_to_publish(
                    &mut object_163,
                    value_162,
                );
                object_163.finish();
            }
        }
        object_160.finish();
    }
}

pub fn serialize_structure_crate_input_put_permission_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutPermissionPolicyInput,
) {
    if let Some(var_164) = &input.resource_arn {
        object.key("ResourceArn").string(var_164);
    }
    if let Some(var_165) = &input.policy {
        object.key("Policy").string(var_165);
    }
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_166) = &input.resource_arn {
        object.key("ResourceARN").string(var_166);
    }
    if let Some(var_167) = &input.tags {
        let mut array_168 = object.key("Tags").start_array();
        for item_169 in var_167 {
            {
                let mut object_170 = array_168.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_170, item_169);
                object_170.finish();
            }
        }
        array_168.finish();
    }
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) {
    if let Some(var_171) = &input.resource_arn {
        object.key("ResourceARN").string(var_171);
    }
    if let Some(var_172) = &input.tag_keys {
        let mut array_173 = object.key("TagKeys").start_array();
        for item_174 in var_172 {
            {
                array_173.value().string(item_174);
            }
        }
        array_173.finish();
    }
}

pub fn serialize_structure_crate_input_update_ip_set_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateIpSetInput,
) {
    if let Some(var_175) = &input.name {
        object.key("Name").string(var_175);
    }
    if let Some(var_176) = &input.scope {
        object.key("Scope").string(var_176.as_str());
    }
    if let Some(var_177) = &input.id {
        object.key("Id").string(var_177);
    }
    if let Some(var_178) = &input.description {
        object.key("Description").string(var_178);
    }
    if let Some(var_179) = &input.addresses {
        let mut array_180 = object.key("Addresses").start_array();
        for item_181 in var_179 {
            {
                array_180.value().string(item_181);
            }
        }
        array_180.finish();
    }
    if let Some(var_182) = &input.lock_token {
        object.key("LockToken").string(var_182);
    }
}

pub fn serialize_structure_crate_input_update_managed_rule_set_version_expiry_date_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateManagedRuleSetVersionExpiryDateInput,
) {
    if let Some(var_183) = &input.name {
        object.key("Name").string(var_183);
    }
    if let Some(var_184) = &input.scope {
        object.key("Scope").string(var_184.as_str());
    }
    if let Some(var_185) = &input.id {
        object.key("Id").string(var_185);
    }
    if let Some(var_186) = &input.lock_token {
        object.key("LockToken").string(var_186);
    }
    if let Some(var_187) = &input.version_to_expire {
        object.key("VersionToExpire").string(var_187);
    }
    if let Some(var_188) = &input.expiry_timestamp {
        object
            .key("ExpiryTimestamp")
            .instant(var_188, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_crate_input_update_regex_pattern_set_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRegexPatternSetInput,
) {
    if let Some(var_189) = &input.name {
        object.key("Name").string(var_189);
    }
    if let Some(var_190) = &input.scope {
        object.key("Scope").string(var_190.as_str());
    }
    if let Some(var_191) = &input.id {
        object.key("Id").string(var_191);
    }
    if let Some(var_192) = &input.description {
        object.key("Description").string(var_192);
    }
    if let Some(var_193) = &input.regular_expression_list {
        let mut array_194 = object.key("RegularExpressionList").start_array();
        for item_195 in var_193 {
            {
                let mut object_196 = array_194.value().start_object();
                crate::json_ser::serialize_structure_crate_model_regex(&mut object_196, item_195);
                object_196.finish();
            }
        }
        array_194.finish();
    }
    if let Some(var_197) = &input.lock_token {
        object.key("LockToken").string(var_197);
    }
}

pub fn serialize_structure_crate_input_update_rule_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRuleGroupInput,
) {
    if let Some(var_198) = &input.name {
        object.key("Name").string(var_198);
    }
    if let Some(var_199) = &input.scope {
        object.key("Scope").string(var_199.as_str());
    }
    if let Some(var_200) = &input.id {
        object.key("Id").string(var_200);
    }
    if let Some(var_201) = &input.description {
        object.key("Description").string(var_201);
    }
    if let Some(var_202) = &input.rules {
        let mut array_203 = object.key("Rules").start_array();
        for item_204 in var_202 {
            {
                let mut object_205 = array_203.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule(&mut object_205, item_204);
                object_205.finish();
            }
        }
        array_203.finish();
    }
    if let Some(var_206) = &input.visibility_config {
        let mut object_207 = object.key("VisibilityConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_visibility_config(
            &mut object_207,
            var_206,
        );
        object_207.finish();
    }
    if let Some(var_208) = &input.lock_token {
        object.key("LockToken").string(var_208);
    }
    if let Some(var_209) = &input.custom_response_bodies {
        let mut object_210 = object.key("CustomResponseBodies").start_object();
        for (key_211, value_212) in var_209 {
            {
                let mut object_213 = object_210.key(key_211).start_object();
                crate::json_ser::serialize_structure_crate_model_custom_response_body(
                    &mut object_213,
                    value_212,
                );
                object_213.finish();
            }
        }
        object_210.finish();
    }
}

pub fn serialize_structure_crate_input_update_web_acl_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWebAclInput,
) {
    if let Some(var_214) = &input.name {
        object.key("Name").string(var_214);
    }
    if let Some(var_215) = &input.scope {
        object.key("Scope").string(var_215.as_str());
    }
    if let Some(var_216) = &input.id {
        object.key("Id").string(var_216);
    }
    if let Some(var_217) = &input.default_action {
        let mut object_218 = object.key("DefaultAction").start_object();
        crate::json_ser::serialize_structure_crate_model_default_action(&mut object_218, var_217);
        object_218.finish();
    }
    if let Some(var_219) = &input.description {
        object.key("Description").string(var_219);
    }
    if let Some(var_220) = &input.rules {
        let mut array_221 = object.key("Rules").start_array();
        for item_222 in var_220 {
            {
                let mut object_223 = array_221.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule(&mut object_223, item_222);
                object_223.finish();
            }
        }
        array_221.finish();
    }
    if let Some(var_224) = &input.visibility_config {
        let mut object_225 = object.key("VisibilityConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_visibility_config(
            &mut object_225,
            var_224,
        );
        object_225.finish();
    }
    if let Some(var_226) = &input.lock_token {
        object.key("LockToken").string(var_226);
    }
    if let Some(var_227) = &input.custom_response_bodies {
        let mut object_228 = object.key("CustomResponseBodies").start_object();
        for (key_229, value_230) in var_227 {
            {
                let mut object_231 = object_228.key(key_229).start_object();
                crate::json_ser::serialize_structure_crate_model_custom_response_body(
                    &mut object_231,
                    value_230,
                );
                object_231.finish();
            }
        }
        object_228.finish();
    }
}

pub fn serialize_structure_crate_model_rule(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Rule,
) {
    if let Some(var_232) = &input.name {
        object.key("Name").string(var_232);
    }
    {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.priority).into()),
        );
    }
    if let Some(var_233) = &input.statement {
        let mut object_234 = object.key("Statement").start_object();
        crate::json_ser::serialize_structure_crate_model_statement(&mut object_234, var_233);
        object_234.finish();
    }
    if let Some(var_235) = &input.action {
        let mut object_236 = object.key("Action").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_action(&mut object_236, var_235);
        object_236.finish();
    }
    if let Some(var_237) = &input.override_action {
        let mut object_238 = object.key("OverrideAction").start_object();
        crate::json_ser::serialize_structure_crate_model_override_action(&mut object_238, var_237);
        object_238.finish();
    }
    if let Some(var_239) = &input.rule_labels {
        let mut array_240 = object.key("RuleLabels").start_array();
        for item_241 in var_239 {
            {
                let mut object_242 = array_240.value().start_object();
                crate::json_ser::serialize_structure_crate_model_label(&mut object_242, item_241);
                object_242.finish();
            }
        }
        array_240.finish();
    }
    if let Some(var_243) = &input.visibility_config {
        let mut object_244 = object.key("VisibilityConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_visibility_config(
            &mut object_244,
            var_243,
        );
        object_244.finish();
    }
}

pub fn serialize_structure_crate_model_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_245) = &input.key {
        object.key("Key").string(var_245);
    }
    if let Some(var_246) = &input.value {
        object.key("Value").string(var_246);
    }
}

pub fn serialize_structure_crate_model_regex(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Regex,
) {
    if let Some(var_247) = &input.regex_string {
        object.key("RegexString").string(var_247);
    }
}

pub fn serialize_structure_crate_model_visibility_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VisibilityConfig,
) {
    {
        object
            .key("SampledRequestsEnabled")
            .boolean(input.sampled_requests_enabled);
    }
    {
        object
            .key("CloudWatchMetricsEnabled")
            .boolean(input.cloud_watch_metrics_enabled);
    }
    if let Some(var_248) = &input.metric_name {
        object.key("MetricName").string(var_248);
    }
}

pub fn serialize_structure_crate_model_custom_response_body(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomResponseBody,
) {
    if let Some(var_249) = &input.content_type {
        object.key("ContentType").string(var_249.as_str());
    }
    if let Some(var_250) = &input.content {
        object.key("Content").string(var_250);
    }
}

pub fn serialize_structure_crate_model_default_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DefaultAction,
) {
    if let Some(var_251) = &input.block {
        let mut object_252 = object.key("Block").start_object();
        crate::json_ser::serialize_structure_crate_model_block_action(&mut object_252, var_251);
        object_252.finish();
    }
    if let Some(var_253) = &input.allow {
        let mut object_254 = object.key("Allow").start_object();
        crate::json_ser::serialize_structure_crate_model_allow_action(&mut object_254, var_253);
        object_254.finish();
    }
}

pub fn serialize_structure_crate_model_time_window(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TimeWindow,
) {
    if let Some(var_255) = &input.start_time {
        object
            .key("StartTime")
            .instant(var_255, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_256) = &input.end_time {
        object
            .key("EndTime")
            .instant(var_256, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_crate_model_logging_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoggingConfiguration,
) {
    if let Some(var_257) = &input.resource_arn {
        object.key("ResourceArn").string(var_257);
    }
    if let Some(var_258) = &input.log_destination_configs {
        let mut array_259 = object.key("LogDestinationConfigs").start_array();
        for item_260 in var_258 {
            {
                array_259.value().string(item_260);
            }
        }
        array_259.finish();
    }
    if let Some(var_261) = &input.redacted_fields {
        let mut array_262 = object.key("RedactedFields").start_array();
        for item_263 in var_261 {
            {
                let mut object_264 = array_262.value().start_object();
                crate::json_ser::serialize_structure_crate_model_field_to_match(
                    &mut object_264,
                    item_263,
                );
                object_264.finish();
            }
        }
        array_262.finish();
    }
    if input.managed_by_firewall_manager {
        object
            .key("ManagedByFirewallManager")
            .boolean(input.managed_by_firewall_manager);
    }
    if let Some(var_265) = &input.logging_filter {
        let mut object_266 = object.key("LoggingFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_logging_filter(&mut object_266, var_265);
        object_266.finish();
    }
}

pub fn serialize_structure_crate_model_version_to_publish(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VersionToPublish,
) {
    if let Some(var_267) = &input.associated_rule_group_arn {
        object.key("AssociatedRuleGroupArn").string(var_267);
    }
    if let Some(var_268) = &input.forecasted_lifetime {
        object.key("ForecastedLifetime").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_268).into()),
        );
    }
}

pub fn serialize_structure_crate_model_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Statement,
) {
    if let Some(var_269) = &input.byte_match_statement {
        let mut object_270 = object.key("ByteMatchStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_byte_match_statement(
            &mut object_270,
            var_269,
        );
        object_270.finish();
    }
    if let Some(var_271) = &input.sqli_match_statement {
        let mut object_272 = object.key("SqliMatchStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_sqli_match_statement(
            &mut object_272,
            var_271,
        );
        object_272.finish();
    }
    if let Some(var_273) = &input.xss_match_statement {
        let mut object_274 = object.key("XssMatchStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_xss_match_statement(
            &mut object_274,
            var_273,
        );
        object_274.finish();
    }
    if let Some(var_275) = &input.size_constraint_statement {
        let mut object_276 = object.key("SizeConstraintStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_size_constraint_statement(
            &mut object_276,
            var_275,
        );
        object_276.finish();
    }
    if let Some(var_277) = &input.geo_match_statement {
        let mut object_278 = object.key("GeoMatchStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_geo_match_statement(
            &mut object_278,
            var_277,
        );
        object_278.finish();
    }
    if let Some(var_279) = &input.rule_group_reference_statement {
        let mut object_280 = object.key("RuleGroupReferenceStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_group_reference_statement(
            &mut object_280,
            var_279,
        );
        object_280.finish();
    }
    if let Some(var_281) = &input.ip_set_reference_statement {
        let mut object_282 = object.key("IPSetReferenceStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_ip_set_reference_statement(
            &mut object_282,
            var_281,
        );
        object_282.finish();
    }
    if let Some(var_283) = &input.regex_pattern_set_reference_statement {
        let mut object_284 = object
            .key("RegexPatternSetReferenceStatement")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_regex_pattern_set_reference_statement(
            &mut object_284,
            var_283,
        );
        object_284.finish();
    }
    if let Some(var_285) = &input.rate_based_statement {
        let mut object_286 = object.key("RateBasedStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_rate_based_statement(
            &mut object_286,
            var_285,
        );
        object_286.finish();
    }
    if let Some(var_287) = &input.and_statement {
        let mut object_288 = object.key("AndStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_and_statement(&mut object_288, var_287);
        object_288.finish();
    }
    if let Some(var_289) = &input.or_statement {
        let mut object_290 = object.key("OrStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_or_statement(&mut object_290, var_289);
        object_290.finish();
    }
    if let Some(var_291) = &input.not_statement {
        let mut object_292 = object.key("NotStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_not_statement(&mut object_292, var_291);
        object_292.finish();
    }
    if let Some(var_293) = &input.managed_rule_group_statement {
        let mut object_294 = object.key("ManagedRuleGroupStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_managed_rule_group_statement(
            &mut object_294,
            var_293,
        );
        object_294.finish();
    }
    if let Some(var_295) = &input.label_match_statement {
        let mut object_296 = object.key("LabelMatchStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_label_match_statement(
            &mut object_296,
            var_295,
        );
        object_296.finish();
    }
}

pub fn serialize_structure_crate_model_rule_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleAction,
) {
    if let Some(var_297) = &input.block {
        let mut object_298 = object.key("Block").start_object();
        crate::json_ser::serialize_structure_crate_model_block_action(&mut object_298, var_297);
        object_298.finish();
    }
    if let Some(var_299) = &input.allow {
        let mut object_300 = object.key("Allow").start_object();
        crate::json_ser::serialize_structure_crate_model_allow_action(&mut object_300, var_299);
        object_300.finish();
    }
    if let Some(var_301) = &input.count {
        let mut object_302 = object.key("Count").start_object();
        crate::json_ser::serialize_structure_crate_model_count_action(&mut object_302, var_301);
        object_302.finish();
    }
}

pub fn serialize_structure_crate_model_override_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OverrideAction,
) {
    if let Some(var_303) = &input.count {
        let mut object_304 = object.key("Count").start_object();
        crate::json_ser::serialize_structure_crate_model_count_action(&mut object_304, var_303);
        object_304.finish();
    }
    if let Some(var_305) = &input.none {
        let mut object_306 = object.key("None").start_object();
        crate::json_ser::serialize_structure_crate_model_none_action(&mut object_306, var_305);
        object_306.finish();
    }
}

pub fn serialize_structure_crate_model_label(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Label,
) {
    if let Some(var_307) = &input.name {
        object.key("Name").string(var_307);
    }
}

pub fn serialize_structure_crate_model_block_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BlockAction,
) {
    if let Some(var_308) = &input.custom_response {
        let mut object_309 = object.key("CustomResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_response(&mut object_309, var_308);
        object_309.finish();
    }
}

pub fn serialize_structure_crate_model_allow_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AllowAction,
) {
    if let Some(var_310) = &input.custom_request_handling {
        let mut object_311 = object.key("CustomRequestHandling").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_request_handling(
            &mut object_311,
            var_310,
        );
        object_311.finish();
    }
}

pub fn serialize_structure_crate_model_field_to_match(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FieldToMatch,
) {
    if let Some(var_312) = &input.single_header {
        let mut object_313 = object.key("SingleHeader").start_object();
        crate::json_ser::serialize_structure_crate_model_single_header(&mut object_313, var_312);
        object_313.finish();
    }
    if let Some(var_314) = &input.single_query_argument {
        let mut object_315 = object.key("SingleQueryArgument").start_object();
        crate::json_ser::serialize_structure_crate_model_single_query_argument(
            &mut object_315,
            var_314,
        );
        object_315.finish();
    }
    if let Some(var_316) = &input.all_query_arguments {
        let mut object_317 = object.key("AllQueryArguments").start_object();
        crate::json_ser::serialize_structure_crate_model_all_query_arguments(
            &mut object_317,
            var_316,
        );
        object_317.finish();
    }
    if let Some(var_318) = &input.uri_path {
        let mut object_319 = object.key("UriPath").start_object();
        crate::json_ser::serialize_structure_crate_model_uri_path(&mut object_319, var_318);
        object_319.finish();
    }
    if let Some(var_320) = &input.query_string {
        let mut object_321 = object.key("QueryString").start_object();
        crate::json_ser::serialize_structure_crate_model_query_string(&mut object_321, var_320);
        object_321.finish();
    }
    if let Some(var_322) = &input.body {
        let mut object_323 = object.key("Body").start_object();
        crate::json_ser::serialize_structure_crate_model_body(&mut object_323, var_322);
        object_323.finish();
    }
    if let Some(var_324) = &input.method {
        let mut object_325 = object.key("Method").start_object();
        crate::json_ser::serialize_structure_crate_model_method(&mut object_325, var_324);
        object_325.finish();
    }
    if let Some(var_326) = &input.json_body {
        let mut object_327 = object.key("JsonBody").start_object();
        crate::json_ser::serialize_structure_crate_model_json_body(&mut object_327, var_326);
        object_327.finish();
    }
}

pub fn serialize_structure_crate_model_logging_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoggingFilter,
) {
    if let Some(var_328) = &input.filters {
        let mut array_329 = object.key("Filters").start_array();
        for item_330 in var_328 {
            {
                let mut object_331 = array_329.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_331, item_330);
                object_331.finish();
            }
        }
        array_329.finish();
    }
    if let Some(var_332) = &input.default_behavior {
        object.key("DefaultBehavior").string(var_332.as_str());
    }
}

pub fn serialize_structure_crate_model_byte_match_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ByteMatchStatement,
) {
    if let Some(var_333) = &input.search_string {
        object
            .key("SearchString")
            .string_unchecked(&smithy_types::base64::encode(var_333));
    }
    if let Some(var_334) = &input.field_to_match {
        let mut object_335 = object.key("FieldToMatch").start_object();
        crate::json_ser::serialize_structure_crate_model_field_to_match(&mut object_335, var_334);
        object_335.finish();
    }
    if let Some(var_336) = &input.text_transformations {
        let mut array_337 = object.key("TextTransformations").start_array();
        for item_338 in var_336 {
            {
                let mut object_339 = array_337.value().start_object();
                crate::json_ser::serialize_structure_crate_model_text_transformation(
                    &mut object_339,
                    item_338,
                );
                object_339.finish();
            }
        }
        array_337.finish();
    }
    if let Some(var_340) = &input.positional_constraint {
        object.key("PositionalConstraint").string(var_340.as_str());
    }
}

pub fn serialize_structure_crate_model_sqli_match_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SqliMatchStatement,
) {
    if let Some(var_341) = &input.field_to_match {
        let mut object_342 = object.key("FieldToMatch").start_object();
        crate::json_ser::serialize_structure_crate_model_field_to_match(&mut object_342, var_341);
        object_342.finish();
    }
    if let Some(var_343) = &input.text_transformations {
        let mut array_344 = object.key("TextTransformations").start_array();
        for item_345 in var_343 {
            {
                let mut object_346 = array_344.value().start_object();
                crate::json_ser::serialize_structure_crate_model_text_transformation(
                    &mut object_346,
                    item_345,
                );
                object_346.finish();
            }
        }
        array_344.finish();
    }
}

pub fn serialize_structure_crate_model_xss_match_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::XssMatchStatement,
) {
    if let Some(var_347) = &input.field_to_match {
        let mut object_348 = object.key("FieldToMatch").start_object();
        crate::json_ser::serialize_structure_crate_model_field_to_match(&mut object_348, var_347);
        object_348.finish();
    }
    if let Some(var_349) = &input.text_transformations {
        let mut array_350 = object.key("TextTransformations").start_array();
        for item_351 in var_349 {
            {
                let mut object_352 = array_350.value().start_object();
                crate::json_ser::serialize_structure_crate_model_text_transformation(
                    &mut object_352,
                    item_351,
                );
                object_352.finish();
            }
        }
        array_350.finish();
    }
}

pub fn serialize_structure_crate_model_size_constraint_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SizeConstraintStatement,
) {
    if let Some(var_353) = &input.field_to_match {
        let mut object_354 = object.key("FieldToMatch").start_object();
        crate::json_ser::serialize_structure_crate_model_field_to_match(&mut object_354, var_353);
        object_354.finish();
    }
    if let Some(var_355) = &input.comparison_operator {
        object.key("ComparisonOperator").string(var_355.as_str());
    }
    {
        object.key("Size").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.size).into()),
        );
    }
    if let Some(var_356) = &input.text_transformations {
        let mut array_357 = object.key("TextTransformations").start_array();
        for item_358 in var_356 {
            {
                let mut object_359 = array_357.value().start_object();
                crate::json_ser::serialize_structure_crate_model_text_transformation(
                    &mut object_359,
                    item_358,
                );
                object_359.finish();
            }
        }
        array_357.finish();
    }
}

pub fn serialize_structure_crate_model_geo_match_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GeoMatchStatement,
) {
    if let Some(var_360) = &input.country_codes {
        let mut array_361 = object.key("CountryCodes").start_array();
        for item_362 in var_360 {
            {
                array_361.value().string(item_362.as_str());
            }
        }
        array_361.finish();
    }
    if let Some(var_363) = &input.forwarded_ip_config {
        let mut object_364 = object.key("ForwardedIPConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_forwarded_ip_config(
            &mut object_364,
            var_363,
        );
        object_364.finish();
    }
}

pub fn serialize_structure_crate_model_rule_group_reference_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupReferenceStatement,
) {
    if let Some(var_365) = &input.arn {
        object.key("ARN").string(var_365);
    }
    if let Some(var_366) = &input.excluded_rules {
        let mut array_367 = object.key("ExcludedRules").start_array();
        for item_368 in var_366 {
            {
                let mut object_369 = array_367.value().start_object();
                crate::json_ser::serialize_structure_crate_model_excluded_rule(
                    &mut object_369,
                    item_368,
                );
                object_369.finish();
            }
        }
        array_367.finish();
    }
}

pub fn serialize_structure_crate_model_ip_set_reference_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IpSetReferenceStatement,
) {
    if let Some(var_370) = &input.arn {
        object.key("ARN").string(var_370);
    }
    if let Some(var_371) = &input.ip_set_forwarded_ip_config {
        let mut object_372 = object.key("IPSetForwardedIPConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_ip_set_forwarded_ip_config(
            &mut object_372,
            var_371,
        );
        object_372.finish();
    }
}

pub fn serialize_structure_crate_model_regex_pattern_set_reference_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RegexPatternSetReferenceStatement,
) {
    if let Some(var_373) = &input.arn {
        object.key("ARN").string(var_373);
    }
    if let Some(var_374) = &input.field_to_match {
        let mut object_375 = object.key("FieldToMatch").start_object();
        crate::json_ser::serialize_structure_crate_model_field_to_match(&mut object_375, var_374);
        object_375.finish();
    }
    if let Some(var_376) = &input.text_transformations {
        let mut array_377 = object.key("TextTransformations").start_array();
        for item_378 in var_376 {
            {
                let mut object_379 = array_377.value().start_object();
                crate::json_ser::serialize_structure_crate_model_text_transformation(
                    &mut object_379,
                    item_378,
                );
                object_379.finish();
            }
        }
        array_377.finish();
    }
}

pub fn serialize_structure_crate_model_rate_based_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RateBasedStatement,
) {
    {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_380) = &input.aggregate_key_type {
        object.key("AggregateKeyType").string(var_380.as_str());
    }
    if let Some(var_381) = &input.scope_down_statement {
        let mut object_382 = object.key("ScopeDownStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_statement(&mut object_382, var_381);
        object_382.finish();
    }
    if let Some(var_383) = &input.forwarded_ip_config {
        let mut object_384 = object.key("ForwardedIPConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_forwarded_ip_config(
            &mut object_384,
            var_383,
        );
        object_384.finish();
    }
}

pub fn serialize_structure_crate_model_and_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AndStatement,
) {
    if let Some(var_385) = &input.statements {
        let mut array_386 = object.key("Statements").start_array();
        for item_387 in var_385 {
            {
                let mut object_388 = array_386.value().start_object();
                crate::json_ser::serialize_structure_crate_model_statement(
                    &mut object_388,
                    item_387,
                );
                object_388.finish();
            }
        }
        array_386.finish();
    }
}

pub fn serialize_structure_crate_model_or_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OrStatement,
) {
    if let Some(var_389) = &input.statements {
        let mut array_390 = object.key("Statements").start_array();
        for item_391 in var_389 {
            {
                let mut object_392 = array_390.value().start_object();
                crate::json_ser::serialize_structure_crate_model_statement(
                    &mut object_392,
                    item_391,
                );
                object_392.finish();
            }
        }
        array_390.finish();
    }
}

pub fn serialize_structure_crate_model_not_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NotStatement,
) {
    if let Some(var_393) = &input.statement {
        let mut object_394 = object.key("Statement").start_object();
        crate::json_ser::serialize_structure_crate_model_statement(&mut object_394, var_393);
        object_394.finish();
    }
}

pub fn serialize_structure_crate_model_managed_rule_group_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ManagedRuleGroupStatement,
) {
    if let Some(var_395) = &input.vendor_name {
        object.key("VendorName").string(var_395);
    }
    if let Some(var_396) = &input.name {
        object.key("Name").string(var_396);
    }
    if let Some(var_397) = &input.version {
        object.key("Version").string(var_397);
    }
    if let Some(var_398) = &input.excluded_rules {
        let mut array_399 = object.key("ExcludedRules").start_array();
        for item_400 in var_398 {
            {
                let mut object_401 = array_399.value().start_object();
                crate::json_ser::serialize_structure_crate_model_excluded_rule(
                    &mut object_401,
                    item_400,
                );
                object_401.finish();
            }
        }
        array_399.finish();
    }
    if let Some(var_402) = &input.scope_down_statement {
        let mut object_403 = object.key("ScopeDownStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_statement(&mut object_403, var_402);
        object_403.finish();
    }
}

pub fn serialize_structure_crate_model_label_match_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelMatchStatement,
) {
    if let Some(var_404) = &input.scope {
        object.key("Scope").string(var_404.as_str());
    }
    if let Some(var_405) = &input.key {
        object.key("Key").string(var_405);
    }
}

pub fn serialize_structure_crate_model_count_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CountAction,
) {
    if let Some(var_406) = &input.custom_request_handling {
        let mut object_407 = object.key("CustomRequestHandling").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_request_handling(
            &mut object_407,
            var_406,
        );
        object_407.finish();
    }
}

pub fn serialize_structure_crate_model_none_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NoneAction,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_crate_model_custom_response(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomResponse,
) {
    if let Some(var_408) = &input.response_code {
        object.key("ResponseCode").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_408).into()),
        );
    }
    if let Some(var_409) = &input.custom_response_body_key {
        object.key("CustomResponseBodyKey").string(var_409);
    }
    if let Some(var_410) = &input.response_headers {
        let mut array_411 = object.key("ResponseHeaders").start_array();
        for item_412 in var_410 {
            {
                let mut object_413 = array_411.value().start_object();
                crate::json_ser::serialize_structure_crate_model_custom_http_header(
                    &mut object_413,
                    item_412,
                );
                object_413.finish();
            }
        }
        array_411.finish();
    }
}

pub fn serialize_structure_crate_model_custom_request_handling(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomRequestHandling,
) {
    if let Some(var_414) = &input.insert_headers {
        let mut array_415 = object.key("InsertHeaders").start_array();
        for item_416 in var_414 {
            {
                let mut object_417 = array_415.value().start_object();
                crate::json_ser::serialize_structure_crate_model_custom_http_header(
                    &mut object_417,
                    item_416,
                );
                object_417.finish();
            }
        }
        array_415.finish();
    }
}

pub fn serialize_structure_crate_model_single_header(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SingleHeader,
) {
    if let Some(var_418) = &input.name {
        object.key("Name").string(var_418);
    }
}

pub fn serialize_structure_crate_model_single_query_argument(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SingleQueryArgument,
) {
    if let Some(var_419) = &input.name {
        object.key("Name").string(var_419);
    }
}

pub fn serialize_structure_crate_model_all_query_arguments(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AllQueryArguments,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_crate_model_uri_path(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UriPath,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_crate_model_query_string(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::QueryString,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_crate_model_body(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Body,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_crate_model_method(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Method,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_crate_model_json_body(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JsonBody,
) {
    if let Some(var_420) = &input.match_pattern {
        let mut object_421 = object.key("MatchPattern").start_object();
        crate::json_ser::serialize_structure_crate_model_json_match_pattern(
            &mut object_421,
            var_420,
        );
        object_421.finish();
    }
    if let Some(var_422) = &input.match_scope {
        object.key("MatchScope").string(var_422.as_str());
    }
    if let Some(var_423) = &input.invalid_fallback_behavior {
        object
            .key("InvalidFallbackBehavior")
            .string(var_423.as_str());
    }
}

pub fn serialize_structure_crate_model_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Filter,
) {
    if let Some(var_424) = &input.behavior {
        object.key("Behavior").string(var_424.as_str());
    }
    if let Some(var_425) = &input.requirement {
        object.key("Requirement").string(var_425.as_str());
    }
    if let Some(var_426) = &input.conditions {
        let mut array_427 = object.key("Conditions").start_array();
        for item_428 in var_426 {
            {
                let mut object_429 = array_427.value().start_object();
                crate::json_ser::serialize_structure_crate_model_condition(
                    &mut object_429,
                    item_428,
                );
                object_429.finish();
            }
        }
        array_427.finish();
    }
}

pub fn serialize_structure_crate_model_text_transformation(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TextTransformation,
) {
    {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.priority).into()),
        );
    }
    if let Some(var_430) = &input.r#type {
        object.key("Type").string(var_430.as_str());
    }
}

pub fn serialize_structure_crate_model_forwarded_ip_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ForwardedIpConfig,
) {
    if let Some(var_431) = &input.header_name {
        object.key("HeaderName").string(var_431);
    }
    if let Some(var_432) = &input.fallback_behavior {
        object.key("FallbackBehavior").string(var_432.as_str());
    }
}

pub fn serialize_structure_crate_model_excluded_rule(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExcludedRule,
) {
    if let Some(var_433) = &input.name {
        object.key("Name").string(var_433);
    }
}

pub fn serialize_structure_crate_model_ip_set_forwarded_ip_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IpSetForwardedIpConfig,
) {
    if let Some(var_434) = &input.header_name {
        object.key("HeaderName").string(var_434);
    }
    if let Some(var_435) = &input.fallback_behavior {
        object.key("FallbackBehavior").string(var_435.as_str());
    }
    if let Some(var_436) = &input.position {
        object.key("Position").string(var_436.as_str());
    }
}

pub fn serialize_structure_crate_model_custom_http_header(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomHttpHeader,
) {
    if let Some(var_437) = &input.name {
        object.key("Name").string(var_437);
    }
    if let Some(var_438) = &input.value {
        object.key("Value").string(var_438);
    }
}

pub fn serialize_structure_crate_model_json_match_pattern(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JsonMatchPattern,
) {
    if let Some(var_439) = &input.all {
        let mut object_440 = object.key("All").start_object();
        crate::json_ser::serialize_structure_crate_model_all(&mut object_440, var_439);
        object_440.finish();
    }
    if let Some(var_441) = &input.included_paths {
        let mut array_442 = object.key("IncludedPaths").start_array();
        for item_443 in var_441 {
            {
                array_442.value().string(item_443);
            }
        }
        array_442.finish();
    }
}

pub fn serialize_structure_crate_model_condition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Condition,
) {
    if let Some(var_444) = &input.action_condition {
        let mut object_445 = object.key("ActionCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_action_condition(&mut object_445, var_444);
        object_445.finish();
    }
    if let Some(var_446) = &input.label_name_condition {
        let mut object_447 = object.key("LabelNameCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_label_name_condition(
            &mut object_447,
            var_446,
        );
        object_447.finish();
    }
}

pub fn serialize_structure_crate_model_all(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::All,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_crate_model_action_condition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ActionCondition,
) {
    if let Some(var_448) = &input.action {
        object.key("Action").string(var_448.as_str());
    }
}

pub fn serialize_structure_crate_model_label_name_condition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelNameCondition,
) {
    if let Some(var_449) = &input.label_name {
        object.key("LabelName").string(var_449);
    }
}
