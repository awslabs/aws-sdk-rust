// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_web_acl_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateWebAclInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.web_acl_arn {
        object.key("WebACLArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.resource_arn {
        object.key("ResourceArn").string(var_2.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_check_capacity_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CheckCapacityInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3) = &input.scope {
        object.key("Scope").string(var_3.as_str());
    }
    if let Some(var_4) = &input.rules {
        let mut array_5 = object.key("Rules").start_array();
        for item_6 in var_4 {
            {
                let mut object_7 = array_5.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_ip_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateIpSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_8) = &input.name {
        object.key("Name").string(var_8.as_str());
    }
    if let Some(var_9) = &input.scope {
        object.key("Scope").string(var_9.as_str());
    }
    if let Some(var_10) = &input.description {
        object.key("Description").string(var_10.as_str());
    }
    if let Some(var_11) = &input.ip_address_version {
        object.key("IPAddressVersion").string(var_11.as_str());
    }
    if let Some(var_12) = &input.addresses {
        let mut array_13 = object.key("Addresses").start_array();
        for item_14 in var_12 {
            {
                array_13.value().string(item_14.as_str());
            }
        }
        array_13.finish();
    }
    if let Some(var_15) = &input.tags {
        let mut array_16 = object.key("Tags").start_array();
        for item_17 in var_15 {
            {
                let mut object_18 = array_16.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_18, item_17)?;
                object_18.finish();
            }
        }
        array_16.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_regex_pattern_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRegexPatternSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_19) = &input.name {
        object.key("Name").string(var_19.as_str());
    }
    if let Some(var_20) = &input.scope {
        object.key("Scope").string(var_20.as_str());
    }
    if let Some(var_21) = &input.description {
        object.key("Description").string(var_21.as_str());
    }
    if let Some(var_22) = &input.regular_expression_list {
        let mut array_23 = object.key("RegularExpressionList").start_array();
        for item_24 in var_22 {
            {
                let mut object_25 = array_23.value().start_object();
                crate::json_ser::serialize_structure_crate_model_regex(&mut object_25, item_24)?;
                object_25.finish();
            }
        }
        array_23.finish();
    }
    if let Some(var_26) = &input.tags {
        let mut array_27 = object.key("Tags").start_array();
        for item_28 in var_26 {
            {
                let mut object_29 = array_27.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_29, item_28)?;
                object_29.finish();
            }
        }
        array_27.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_rule_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRuleGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_30) = &input.name {
        object.key("Name").string(var_30.as_str());
    }
    if let Some(var_31) = &input.scope {
        object.key("Scope").string(var_31.as_str());
    }
    {
        object.key("Capacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.capacity).into()),
        );
    }
    if let Some(var_32) = &input.description {
        object.key("Description").string(var_32.as_str());
    }
    if let Some(var_33) = &input.rules {
        let mut array_34 = object.key("Rules").start_array();
        for item_35 in var_33 {
            {
                let mut object_36 = array_34.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule(&mut object_36, item_35)?;
                object_36.finish();
            }
        }
        array_34.finish();
    }
    if let Some(var_37) = &input.visibility_config {
        let mut object_38 = object.key("VisibilityConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_visibility_config(&mut object_38, var_37)?;
        object_38.finish();
    }
    if let Some(var_39) = &input.tags {
        let mut array_40 = object.key("Tags").start_array();
        for item_41 in var_39 {
            {
                let mut object_42 = array_40.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_42, item_41)?;
                object_42.finish();
            }
        }
        array_40.finish();
    }
    if let Some(var_43) = &input.custom_response_bodies {
        let mut object_44 = object.key("CustomResponseBodies").start_object();
        for (key_45, value_46) in var_43 {
            {
                let mut object_47 = object_44.key(key_45).start_object();
                crate::json_ser::serialize_structure_crate_model_custom_response_body(
                    &mut object_47,
                    value_46,
                )?;
                object_47.finish();
            }
        }
        object_44.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_web_acl_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWebAclInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_48) = &input.name {
        object.key("Name").string(var_48.as_str());
    }
    if let Some(var_49) = &input.scope {
        object.key("Scope").string(var_49.as_str());
    }
    if let Some(var_50) = &input.default_action {
        let mut object_51 = object.key("DefaultAction").start_object();
        crate::json_ser::serialize_structure_crate_model_default_action(&mut object_51, var_50)?;
        object_51.finish();
    }
    if let Some(var_52) = &input.description {
        object.key("Description").string(var_52.as_str());
    }
    if let Some(var_53) = &input.rules {
        let mut array_54 = object.key("Rules").start_array();
        for item_55 in var_53 {
            {
                let mut object_56 = array_54.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule(&mut object_56, item_55)?;
                object_56.finish();
            }
        }
        array_54.finish();
    }
    if let Some(var_57) = &input.visibility_config {
        let mut object_58 = object.key("VisibilityConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_visibility_config(&mut object_58, var_57)?;
        object_58.finish();
    }
    if let Some(var_59) = &input.tags {
        let mut array_60 = object.key("Tags").start_array();
        for item_61 in var_59 {
            {
                let mut object_62 = array_60.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_62, item_61)?;
                object_62.finish();
            }
        }
        array_60.finish();
    }
    if let Some(var_63) = &input.custom_response_bodies {
        let mut object_64 = object.key("CustomResponseBodies").start_object();
        for (key_65, value_66) in var_63 {
            {
                let mut object_67 = object_64.key(key_65).start_object();
                crate::json_ser::serialize_structure_crate_model_custom_response_body(
                    &mut object_67,
                    value_66,
                )?;
                object_67.finish();
            }
        }
        object_64.finish();
    }
    if let Some(var_68) = &input.captcha_config {
        let mut object_69 = object.key("CaptchaConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_captcha_config(&mut object_69, var_68)?;
        object_69.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_firewall_manager_rule_groups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFirewallManagerRuleGroupsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_70) = &input.web_acl_arn {
        object.key("WebACLArn").string(var_70.as_str());
    }
    if let Some(var_71) = &input.web_acl_lock_token {
        object.key("WebACLLockToken").string(var_71.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_ip_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteIpSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_72) = &input.name {
        object.key("Name").string(var_72.as_str());
    }
    if let Some(var_73) = &input.scope {
        object.key("Scope").string(var_73.as_str());
    }
    if let Some(var_74) = &input.id {
        object.key("Id").string(var_74.as_str());
    }
    if let Some(var_75) = &input.lock_token {
        object.key("LockToken").string(var_75.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_logging_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteLoggingConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_76) = &input.resource_arn {
        object.key("ResourceArn").string(var_76.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_permission_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePermissionPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_77) = &input.resource_arn {
        object.key("ResourceArn").string(var_77.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_regex_pattern_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRegexPatternSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_78) = &input.name {
        object.key("Name").string(var_78.as_str());
    }
    if let Some(var_79) = &input.scope {
        object.key("Scope").string(var_79.as_str());
    }
    if let Some(var_80) = &input.id {
        object.key("Id").string(var_80.as_str());
    }
    if let Some(var_81) = &input.lock_token {
        object.key("LockToken").string(var_81.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_rule_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRuleGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_82) = &input.name {
        object.key("Name").string(var_82.as_str());
    }
    if let Some(var_83) = &input.scope {
        object.key("Scope").string(var_83.as_str());
    }
    if let Some(var_84) = &input.id {
        object.key("Id").string(var_84.as_str());
    }
    if let Some(var_85) = &input.lock_token {
        object.key("LockToken").string(var_85.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_web_acl_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteWebAclInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_86) = &input.name {
        object.key("Name").string(var_86.as_str());
    }
    if let Some(var_87) = &input.scope {
        object.key("Scope").string(var_87.as_str());
    }
    if let Some(var_88) = &input.id {
        object.key("Id").string(var_88.as_str());
    }
    if let Some(var_89) = &input.lock_token {
        object.key("LockToken").string(var_89.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_managed_rule_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeManagedRuleGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_90) = &input.vendor_name {
        object.key("VendorName").string(var_90.as_str());
    }
    if let Some(var_91) = &input.name {
        object.key("Name").string(var_91.as_str());
    }
    if let Some(var_92) = &input.scope {
        object.key("Scope").string(var_92.as_str());
    }
    if let Some(var_93) = &input.version_name {
        object.key("VersionName").string(var_93.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_web_acl_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateWebAclInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_94) = &input.resource_arn {
        object.key("ResourceArn").string(var_94.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_generate_mobile_sdk_release_url_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GenerateMobileSdkReleaseUrlInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_95) = &input.platform {
        object.key("Platform").string(var_95.as_str());
    }
    if let Some(var_96) = &input.release_version {
        object.key("ReleaseVersion").string(var_96.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ip_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetIpSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_97) = &input.name {
        object.key("Name").string(var_97.as_str());
    }
    if let Some(var_98) = &input.scope {
        object.key("Scope").string(var_98.as_str());
    }
    if let Some(var_99) = &input.id {
        object.key("Id").string(var_99.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_logging_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetLoggingConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_100) = &input.resource_arn {
        object.key("ResourceArn").string(var_100.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_managed_rule_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetManagedRuleSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_101) = &input.name {
        object.key("Name").string(var_101.as_str());
    }
    if let Some(var_102) = &input.scope {
        object.key("Scope").string(var_102.as_str());
    }
    if let Some(var_103) = &input.id {
        object.key("Id").string(var_103.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_mobile_sdk_release_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMobileSdkReleaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_104) = &input.platform {
        object.key("Platform").string(var_104.as_str());
    }
    if let Some(var_105) = &input.release_version {
        object.key("ReleaseVersion").string(var_105.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_permission_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPermissionPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_106) = &input.resource_arn {
        object.key("ResourceArn").string(var_106.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_rate_based_statement_managed_keys_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRateBasedStatementManagedKeysInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_107) = &input.scope {
        object.key("Scope").string(var_107.as_str());
    }
    if let Some(var_108) = &input.web_acl_name {
        object.key("WebACLName").string(var_108.as_str());
    }
    if let Some(var_109) = &input.web_acl_id {
        object.key("WebACLId").string(var_109.as_str());
    }
    if let Some(var_110) = &input.rule_group_rule_name {
        object.key("RuleGroupRuleName").string(var_110.as_str());
    }
    if let Some(var_111) = &input.rule_name {
        object.key("RuleName").string(var_111.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_regex_pattern_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRegexPatternSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_112) = &input.name {
        object.key("Name").string(var_112.as_str());
    }
    if let Some(var_113) = &input.scope {
        object.key("Scope").string(var_113.as_str());
    }
    if let Some(var_114) = &input.id {
        object.key("Id").string(var_114.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_rule_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRuleGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_115) = &input.name {
        object.key("Name").string(var_115.as_str());
    }
    if let Some(var_116) = &input.scope {
        object.key("Scope").string(var_116.as_str());
    }
    if let Some(var_117) = &input.id {
        object.key("Id").string(var_117.as_str());
    }
    if let Some(var_118) = &input.arn {
        object.key("ARN").string(var_118.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_sampled_requests_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSampledRequestsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_119) = &input.web_acl_arn {
        object.key("WebAclArn").string(var_119.as_str());
    }
    if let Some(var_120) = &input.rule_metric_name {
        object.key("RuleMetricName").string(var_120.as_str());
    }
    if let Some(var_121) = &input.scope {
        object.key("Scope").string(var_121.as_str());
    }
    if let Some(var_122) = &input.time_window {
        let mut object_123 = object.key("TimeWindow").start_object();
        crate::json_ser::serialize_structure_crate_model_time_window(&mut object_123, var_122)?;
        object_123.finish();
    }
    {
        object.key("MaxItems").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_items).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_web_acl_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWebAclInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_124) = &input.name {
        object.key("Name").string(var_124.as_str());
    }
    if let Some(var_125) = &input.scope {
        object.key("Scope").string(var_125.as_str());
    }
    if let Some(var_126) = &input.id {
        object.key("Id").string(var_126.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_web_acl_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWebAclForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_127) = &input.resource_arn {
        object.key("ResourceArn").string(var_127.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_available_managed_rule_groups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAvailableManagedRuleGroupsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_128) = &input.scope {
        object.key("Scope").string(var_128.as_str());
    }
    if let Some(var_129) = &input.next_marker {
        object.key("NextMarker").string(var_129.as_str());
    }
    if let Some(var_130) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_130).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_available_managed_rule_group_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAvailableManagedRuleGroupVersionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_131) = &input.vendor_name {
        object.key("VendorName").string(var_131.as_str());
    }
    if let Some(var_132) = &input.name {
        object.key("Name").string(var_132.as_str());
    }
    if let Some(var_133) = &input.scope {
        object.key("Scope").string(var_133.as_str());
    }
    if let Some(var_134) = &input.next_marker {
        object.key("NextMarker").string(var_134.as_str());
    }
    if let Some(var_135) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_135).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_ip_sets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListIpSetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_136) = &input.scope {
        object.key("Scope").string(var_136.as_str());
    }
    if let Some(var_137) = &input.next_marker {
        object.key("NextMarker").string(var_137.as_str());
    }
    if let Some(var_138) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_138).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_logging_configurations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListLoggingConfigurationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_139) = &input.scope {
        object.key("Scope").string(var_139.as_str());
    }
    if let Some(var_140) = &input.next_marker {
        object.key("NextMarker").string(var_140.as_str());
    }
    if let Some(var_141) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_141).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_managed_rule_sets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListManagedRuleSetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_142) = &input.scope {
        object.key("Scope").string(var_142.as_str());
    }
    if let Some(var_143) = &input.next_marker {
        object.key("NextMarker").string(var_143.as_str());
    }
    if let Some(var_144) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_144).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_mobile_sdk_releases_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMobileSdkReleasesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_145) = &input.platform {
        object.key("Platform").string(var_145.as_str());
    }
    if let Some(var_146) = &input.next_marker {
        object.key("NextMarker").string(var_146.as_str());
    }
    if let Some(var_147) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_147).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_regex_pattern_sets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListRegexPatternSetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_148) = &input.scope {
        object.key("Scope").string(var_148.as_str());
    }
    if let Some(var_149) = &input.next_marker {
        object.key("NextMarker").string(var_149.as_str());
    }
    if let Some(var_150) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_150).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_resources_for_web_acl_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListResourcesForWebAclInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_151) = &input.web_acl_arn {
        object.key("WebACLArn").string(var_151.as_str());
    }
    if let Some(var_152) = &input.resource_type {
        object.key("ResourceType").string(var_152.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_rule_groups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListRuleGroupsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_153) = &input.scope {
        object.key("Scope").string(var_153.as_str());
    }
    if let Some(var_154) = &input.next_marker {
        object.key("NextMarker").string(var_154.as_str());
    }
    if let Some(var_155) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_155).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_156) = &input.next_marker {
        object.key("NextMarker").string(var_156.as_str());
    }
    if let Some(var_157) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_157).into()),
        );
    }
    if let Some(var_158) = &input.resource_arn {
        object.key("ResourceARN").string(var_158.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_web_ac_ls_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListWebAcLsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_159) = &input.scope {
        object.key("Scope").string(var_159.as_str());
    }
    if let Some(var_160) = &input.next_marker {
        object.key("NextMarker").string(var_160.as_str());
    }
    if let Some(var_161) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_161).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_logging_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutLoggingConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_162) = &input.logging_configuration {
        let mut object_163 = object.key("LoggingConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_logging_configuration(
            &mut object_163,
            var_162,
        )?;
        object_163.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_managed_rule_set_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutManagedRuleSetVersionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_164) = &input.name {
        object.key("Name").string(var_164.as_str());
    }
    if let Some(var_165) = &input.scope {
        object.key("Scope").string(var_165.as_str());
    }
    if let Some(var_166) = &input.id {
        object.key("Id").string(var_166.as_str());
    }
    if let Some(var_167) = &input.lock_token {
        object.key("LockToken").string(var_167.as_str());
    }
    if let Some(var_168) = &input.recommended_version {
        object.key("RecommendedVersion").string(var_168.as_str());
    }
    if let Some(var_169) = &input.versions_to_publish {
        let mut object_170 = object.key("VersionsToPublish").start_object();
        for (key_171, value_172) in var_169 {
            {
                let mut object_173 = object_170.key(key_171).start_object();
                crate::json_ser::serialize_structure_crate_model_version_to_publish(
                    &mut object_173,
                    value_172,
                )?;
                object_173.finish();
            }
        }
        object_170.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_permission_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutPermissionPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_174) = &input.resource_arn {
        object.key("ResourceArn").string(var_174.as_str());
    }
    if let Some(var_175) = &input.policy {
        object.key("Policy").string(var_175.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_176) = &input.resource_arn {
        object.key("ResourceARN").string(var_176.as_str());
    }
    if let Some(var_177) = &input.tags {
        let mut array_178 = object.key("Tags").start_array();
        for item_179 in var_177 {
            {
                let mut object_180 = array_178.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_180, item_179)?;
                object_180.finish();
            }
        }
        array_178.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_181) = &input.resource_arn {
        object.key("ResourceARN").string(var_181.as_str());
    }
    if let Some(var_182) = &input.tag_keys {
        let mut array_183 = object.key("TagKeys").start_array();
        for item_184 in var_182 {
            {
                array_183.value().string(item_184.as_str());
            }
        }
        array_183.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_ip_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateIpSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_185) = &input.name {
        object.key("Name").string(var_185.as_str());
    }
    if let Some(var_186) = &input.scope {
        object.key("Scope").string(var_186.as_str());
    }
    if let Some(var_187) = &input.id {
        object.key("Id").string(var_187.as_str());
    }
    if let Some(var_188) = &input.description {
        object.key("Description").string(var_188.as_str());
    }
    if let Some(var_189) = &input.addresses {
        let mut array_190 = object.key("Addresses").start_array();
        for item_191 in var_189 {
            {
                array_190.value().string(item_191.as_str());
            }
        }
        array_190.finish();
    }
    if let Some(var_192) = &input.lock_token {
        object.key("LockToken").string(var_192.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_managed_rule_set_version_expiry_date_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateManagedRuleSetVersionExpiryDateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_193) = &input.name {
        object.key("Name").string(var_193.as_str());
    }
    if let Some(var_194) = &input.scope {
        object.key("Scope").string(var_194.as_str());
    }
    if let Some(var_195) = &input.id {
        object.key("Id").string(var_195.as_str());
    }
    if let Some(var_196) = &input.lock_token {
        object.key("LockToken").string(var_196.as_str());
    }
    if let Some(var_197) = &input.version_to_expire {
        object.key("VersionToExpire").string(var_197.as_str());
    }
    if let Some(var_198) = &input.expiry_timestamp {
        object
            .key("ExpiryTimestamp")
            .date_time(var_198, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_regex_pattern_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRegexPatternSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_199) = &input.name {
        object.key("Name").string(var_199.as_str());
    }
    if let Some(var_200) = &input.scope {
        object.key("Scope").string(var_200.as_str());
    }
    if let Some(var_201) = &input.id {
        object.key("Id").string(var_201.as_str());
    }
    if let Some(var_202) = &input.description {
        object.key("Description").string(var_202.as_str());
    }
    if let Some(var_203) = &input.regular_expression_list {
        let mut array_204 = object.key("RegularExpressionList").start_array();
        for item_205 in var_203 {
            {
                let mut object_206 = array_204.value().start_object();
                crate::json_ser::serialize_structure_crate_model_regex(&mut object_206, item_205)?;
                object_206.finish();
            }
        }
        array_204.finish();
    }
    if let Some(var_207) = &input.lock_token {
        object.key("LockToken").string(var_207.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_rule_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRuleGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_208) = &input.name {
        object.key("Name").string(var_208.as_str());
    }
    if let Some(var_209) = &input.scope {
        object.key("Scope").string(var_209.as_str());
    }
    if let Some(var_210) = &input.id {
        object.key("Id").string(var_210.as_str());
    }
    if let Some(var_211) = &input.description {
        object.key("Description").string(var_211.as_str());
    }
    if let Some(var_212) = &input.rules {
        let mut array_213 = object.key("Rules").start_array();
        for item_214 in var_212 {
            {
                let mut object_215 = array_213.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule(&mut object_215, item_214)?;
                object_215.finish();
            }
        }
        array_213.finish();
    }
    if let Some(var_216) = &input.visibility_config {
        let mut object_217 = object.key("VisibilityConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_visibility_config(
            &mut object_217,
            var_216,
        )?;
        object_217.finish();
    }
    if let Some(var_218) = &input.lock_token {
        object.key("LockToken").string(var_218.as_str());
    }
    if let Some(var_219) = &input.custom_response_bodies {
        let mut object_220 = object.key("CustomResponseBodies").start_object();
        for (key_221, value_222) in var_219 {
            {
                let mut object_223 = object_220.key(key_221).start_object();
                crate::json_ser::serialize_structure_crate_model_custom_response_body(
                    &mut object_223,
                    value_222,
                )?;
                object_223.finish();
            }
        }
        object_220.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_web_acl_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWebAclInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_224) = &input.name {
        object.key("Name").string(var_224.as_str());
    }
    if let Some(var_225) = &input.scope {
        object.key("Scope").string(var_225.as_str());
    }
    if let Some(var_226) = &input.id {
        object.key("Id").string(var_226.as_str());
    }
    if let Some(var_227) = &input.default_action {
        let mut object_228 = object.key("DefaultAction").start_object();
        crate::json_ser::serialize_structure_crate_model_default_action(&mut object_228, var_227)?;
        object_228.finish();
    }
    if let Some(var_229) = &input.description {
        object.key("Description").string(var_229.as_str());
    }
    if let Some(var_230) = &input.rules {
        let mut array_231 = object.key("Rules").start_array();
        for item_232 in var_230 {
            {
                let mut object_233 = array_231.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule(&mut object_233, item_232)?;
                object_233.finish();
            }
        }
        array_231.finish();
    }
    if let Some(var_234) = &input.visibility_config {
        let mut object_235 = object.key("VisibilityConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_visibility_config(
            &mut object_235,
            var_234,
        )?;
        object_235.finish();
    }
    if let Some(var_236) = &input.lock_token {
        object.key("LockToken").string(var_236.as_str());
    }
    if let Some(var_237) = &input.custom_response_bodies {
        let mut object_238 = object.key("CustomResponseBodies").start_object();
        for (key_239, value_240) in var_237 {
            {
                let mut object_241 = object_238.key(key_239).start_object();
                crate::json_ser::serialize_structure_crate_model_custom_response_body(
                    &mut object_241,
                    value_240,
                )?;
                object_241.finish();
            }
        }
        object_238.finish();
    }
    if let Some(var_242) = &input.captcha_config {
        let mut object_243 = object.key("CaptchaConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_captcha_config(&mut object_243, var_242)?;
        object_243.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Rule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_244) = &input.name {
        object.key("Name").string(var_244.as_str());
    }
    {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.priority).into()),
        );
    }
    if let Some(var_245) = &input.statement {
        let mut object_246 = object.key("Statement").start_object();
        crate::json_ser::serialize_structure_crate_model_statement(&mut object_246, var_245)?;
        object_246.finish();
    }
    if let Some(var_247) = &input.action {
        let mut object_248 = object.key("Action").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_action(&mut object_248, var_247)?;
        object_248.finish();
    }
    if let Some(var_249) = &input.override_action {
        let mut object_250 = object.key("OverrideAction").start_object();
        crate::json_ser::serialize_structure_crate_model_override_action(&mut object_250, var_249)?;
        object_250.finish();
    }
    if let Some(var_251) = &input.rule_labels {
        let mut array_252 = object.key("RuleLabels").start_array();
        for item_253 in var_251 {
            {
                let mut object_254 = array_252.value().start_object();
                crate::json_ser::serialize_structure_crate_model_label(&mut object_254, item_253)?;
                object_254.finish();
            }
        }
        array_252.finish();
    }
    if let Some(var_255) = &input.visibility_config {
        let mut object_256 = object.key("VisibilityConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_visibility_config(
            &mut object_256,
            var_255,
        )?;
        object_256.finish();
    }
    if let Some(var_257) = &input.captcha_config {
        let mut object_258 = object.key("CaptchaConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_captcha_config(&mut object_258, var_257)?;
        object_258.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_259) = &input.key {
        object.key("Key").string(var_259.as_str());
    }
    if let Some(var_260) = &input.value {
        object.key("Value").string(var_260.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_regex(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Regex,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_261) = &input.regex_string {
        object.key("RegexString").string(var_261.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_visibility_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VisibilityConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object
            .key("SampledRequestsEnabled")
            .boolean(input.sampled_requests_enabled);
    }
    {
        object
            .key("CloudWatchMetricsEnabled")
            .boolean(input.cloud_watch_metrics_enabled);
    }
    if let Some(var_262) = &input.metric_name {
        object.key("MetricName").string(var_262.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_response_body(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomResponseBody,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_263) = &input.content_type {
        object.key("ContentType").string(var_263.as_str());
    }
    if let Some(var_264) = &input.content {
        object.key("Content").string(var_264.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_default_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DefaultAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_265) = &input.block {
        let mut object_266 = object.key("Block").start_object();
        crate::json_ser::serialize_structure_crate_model_block_action(&mut object_266, var_265)?;
        object_266.finish();
    }
    if let Some(var_267) = &input.allow {
        let mut object_268 = object.key("Allow").start_object();
        crate::json_ser::serialize_structure_crate_model_allow_action(&mut object_268, var_267)?;
        object_268.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_captcha_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CaptchaConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_269) = &input.immunity_time_property {
        let mut object_270 = object.key("ImmunityTimeProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_immunity_time_property(
            &mut object_270,
            var_269,
        )?;
        object_270.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_time_window(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TimeWindow,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_271) = &input.start_time {
        object
            .key("StartTime")
            .date_time(var_271, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_272) = &input.end_time {
        object
            .key("EndTime")
            .date_time(var_272, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_logging_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoggingConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_273) = &input.resource_arn {
        object.key("ResourceArn").string(var_273.as_str());
    }
    if let Some(var_274) = &input.log_destination_configs {
        let mut array_275 = object.key("LogDestinationConfigs").start_array();
        for item_276 in var_274 {
            {
                array_275.value().string(item_276.as_str());
            }
        }
        array_275.finish();
    }
    if let Some(var_277) = &input.redacted_fields {
        let mut array_278 = object.key("RedactedFields").start_array();
        for item_279 in var_277 {
            {
                let mut object_280 = array_278.value().start_object();
                crate::json_ser::serialize_structure_crate_model_field_to_match(
                    &mut object_280,
                    item_279,
                )?;
                object_280.finish();
            }
        }
        array_278.finish();
    }
    if input.managed_by_firewall_manager {
        object
            .key("ManagedByFirewallManager")
            .boolean(input.managed_by_firewall_manager);
    }
    if let Some(var_281) = &input.logging_filter {
        let mut object_282 = object.key("LoggingFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_logging_filter(&mut object_282, var_281)?;
        object_282.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_version_to_publish(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VersionToPublish,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_283) = &input.associated_rule_group_arn {
        object
            .key("AssociatedRuleGroupArn")
            .string(var_283.as_str());
    }
    if let Some(var_284) = &input.forecasted_lifetime {
        object.key("ForecastedLifetime").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_284).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_statement(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Statement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_285) = &input.byte_match_statement {
        let mut object_286 = object.key("ByteMatchStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_byte_match_statement(
            &mut object_286,
            var_285,
        )?;
        object_286.finish();
    }
    if let Some(var_287) = &input.sqli_match_statement {
        let mut object_288 = object.key("SqliMatchStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_sqli_match_statement(
            &mut object_288,
            var_287,
        )?;
        object_288.finish();
    }
    if let Some(var_289) = &input.xss_match_statement {
        let mut object_290 = object.key("XssMatchStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_xss_match_statement(
            &mut object_290,
            var_289,
        )?;
        object_290.finish();
    }
    if let Some(var_291) = &input.size_constraint_statement {
        let mut object_292 = object.key("SizeConstraintStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_size_constraint_statement(
            &mut object_292,
            var_291,
        )?;
        object_292.finish();
    }
    if let Some(var_293) = &input.geo_match_statement {
        let mut object_294 = object.key("GeoMatchStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_geo_match_statement(
            &mut object_294,
            var_293,
        )?;
        object_294.finish();
    }
    if let Some(var_295) = &input.rule_group_reference_statement {
        let mut object_296 = object.key("RuleGroupReferenceStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_group_reference_statement(
            &mut object_296,
            var_295,
        )?;
        object_296.finish();
    }
    if let Some(var_297) = &input.ip_set_reference_statement {
        let mut object_298 = object.key("IPSetReferenceStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_ip_set_reference_statement(
            &mut object_298,
            var_297,
        )?;
        object_298.finish();
    }
    if let Some(var_299) = &input.regex_pattern_set_reference_statement {
        let mut object_300 = object
            .key("RegexPatternSetReferenceStatement")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_regex_pattern_set_reference_statement(
            &mut object_300,
            var_299,
        )?;
        object_300.finish();
    }
    if let Some(var_301) = &input.rate_based_statement {
        let mut object_302 = object.key("RateBasedStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_rate_based_statement(
            &mut object_302,
            var_301,
        )?;
        object_302.finish();
    }
    if let Some(var_303) = &input.and_statement {
        let mut object_304 = object.key("AndStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_and_statement(&mut object_304, var_303)?;
        object_304.finish();
    }
    if let Some(var_305) = &input.or_statement {
        let mut object_306 = object.key("OrStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_or_statement(&mut object_306, var_305)?;
        object_306.finish();
    }
    if let Some(var_307) = &input.not_statement {
        let mut object_308 = object.key("NotStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_not_statement(&mut object_308, var_307)?;
        object_308.finish();
    }
    if let Some(var_309) = &input.managed_rule_group_statement {
        let mut object_310 = object.key("ManagedRuleGroupStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_managed_rule_group_statement(
            &mut object_310,
            var_309,
        )?;
        object_310.finish();
    }
    if let Some(var_311) = &input.label_match_statement {
        let mut object_312 = object.key("LabelMatchStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_label_match_statement(
            &mut object_312,
            var_311,
        )?;
        object_312.finish();
    }
    if let Some(var_313) = &input.regex_match_statement {
        let mut object_314 = object.key("RegexMatchStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_regex_match_statement(
            &mut object_314,
            var_313,
        )?;
        object_314.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_315) = &input.block {
        let mut object_316 = object.key("Block").start_object();
        crate::json_ser::serialize_structure_crate_model_block_action(&mut object_316, var_315)?;
        object_316.finish();
    }
    if let Some(var_317) = &input.allow {
        let mut object_318 = object.key("Allow").start_object();
        crate::json_ser::serialize_structure_crate_model_allow_action(&mut object_318, var_317)?;
        object_318.finish();
    }
    if let Some(var_319) = &input.count {
        let mut object_320 = object.key("Count").start_object();
        crate::json_ser::serialize_structure_crate_model_count_action(&mut object_320, var_319)?;
        object_320.finish();
    }
    if let Some(var_321) = &input.captcha {
        let mut object_322 = object.key("Captcha").start_object();
        crate::json_ser::serialize_structure_crate_model_captcha_action(&mut object_322, var_321)?;
        object_322.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_override_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OverrideAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_323) = &input.count {
        let mut object_324 = object.key("Count").start_object();
        crate::json_ser::serialize_structure_crate_model_count_action(&mut object_324, var_323)?;
        object_324.finish();
    }
    if let Some(var_325) = &input.none {
        let mut object_326 = object.key("None").start_object();
        crate::json_ser::serialize_structure_crate_model_none_action(&mut object_326, var_325)?;
        object_326.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_label(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Label,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_327) = &input.name {
        object.key("Name").string(var_327.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_block_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BlockAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_328) = &input.custom_response {
        let mut object_329 = object.key("CustomResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_response(&mut object_329, var_328)?;
        object_329.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_allow_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AllowAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_330) = &input.custom_request_handling {
        let mut object_331 = object.key("CustomRequestHandling").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_request_handling(
            &mut object_331,
            var_330,
        )?;
        object_331.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_immunity_time_property(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImmunityTimeProperty,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_332) = &input.immunity_time {
        object.key("ImmunityTime").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_332).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_field_to_match(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FieldToMatch,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_333) = &input.single_header {
        let mut object_334 = object.key("SingleHeader").start_object();
        crate::json_ser::serialize_structure_crate_model_single_header(&mut object_334, var_333)?;
        object_334.finish();
    }
    if let Some(var_335) = &input.single_query_argument {
        let mut object_336 = object.key("SingleQueryArgument").start_object();
        crate::json_ser::serialize_structure_crate_model_single_query_argument(
            &mut object_336,
            var_335,
        )?;
        object_336.finish();
    }
    if let Some(var_337) = &input.all_query_arguments {
        let mut object_338 = object.key("AllQueryArguments").start_object();
        crate::json_ser::serialize_structure_crate_model_all_query_arguments(
            &mut object_338,
            var_337,
        )?;
        object_338.finish();
    }
    if let Some(var_339) = &input.uri_path {
        let mut object_340 = object.key("UriPath").start_object();
        crate::json_ser::serialize_structure_crate_model_uri_path(&mut object_340, var_339)?;
        object_340.finish();
    }
    if let Some(var_341) = &input.query_string {
        let mut object_342 = object.key("QueryString").start_object();
        crate::json_ser::serialize_structure_crate_model_query_string(&mut object_342, var_341)?;
        object_342.finish();
    }
    if let Some(var_343) = &input.body {
        let mut object_344 = object.key("Body").start_object();
        crate::json_ser::serialize_structure_crate_model_body(&mut object_344, var_343)?;
        object_344.finish();
    }
    if let Some(var_345) = &input.method {
        let mut object_346 = object.key("Method").start_object();
        crate::json_ser::serialize_structure_crate_model_method(&mut object_346, var_345)?;
        object_346.finish();
    }
    if let Some(var_347) = &input.json_body {
        let mut object_348 = object.key("JsonBody").start_object();
        crate::json_ser::serialize_structure_crate_model_json_body(&mut object_348, var_347)?;
        object_348.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_logging_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoggingFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_349) = &input.filters {
        let mut array_350 = object.key("Filters").start_array();
        for item_351 in var_349 {
            {
                let mut object_352 = array_350.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_352, item_351)?;
                object_352.finish();
            }
        }
        array_350.finish();
    }
    if let Some(var_353) = &input.default_behavior {
        object.key("DefaultBehavior").string(var_353.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_byte_match_statement(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ByteMatchStatement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_354) = &input.search_string {
        object
            .key("SearchString")
            .string_unchecked(&aws_smithy_types::base64::encode(var_354));
    }
    if let Some(var_355) = &input.field_to_match {
        let mut object_356 = object.key("FieldToMatch").start_object();
        crate::json_ser::serialize_structure_crate_model_field_to_match(&mut object_356, var_355)?;
        object_356.finish();
    }
    if let Some(var_357) = &input.text_transformations {
        let mut array_358 = object.key("TextTransformations").start_array();
        for item_359 in var_357 {
            {
                let mut object_360 = array_358.value().start_object();
                crate::json_ser::serialize_structure_crate_model_text_transformation(
                    &mut object_360,
                    item_359,
                )?;
                object_360.finish();
            }
        }
        array_358.finish();
    }
    if let Some(var_361) = &input.positional_constraint {
        object.key("PositionalConstraint").string(var_361.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sqli_match_statement(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SqliMatchStatement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_362) = &input.field_to_match {
        let mut object_363 = object.key("FieldToMatch").start_object();
        crate::json_ser::serialize_structure_crate_model_field_to_match(&mut object_363, var_362)?;
        object_363.finish();
    }
    if let Some(var_364) = &input.text_transformations {
        let mut array_365 = object.key("TextTransformations").start_array();
        for item_366 in var_364 {
            {
                let mut object_367 = array_365.value().start_object();
                crate::json_ser::serialize_structure_crate_model_text_transformation(
                    &mut object_367,
                    item_366,
                )?;
                object_367.finish();
            }
        }
        array_365.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_xss_match_statement(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::XssMatchStatement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_368) = &input.field_to_match {
        let mut object_369 = object.key("FieldToMatch").start_object();
        crate::json_ser::serialize_structure_crate_model_field_to_match(&mut object_369, var_368)?;
        object_369.finish();
    }
    if let Some(var_370) = &input.text_transformations {
        let mut array_371 = object.key("TextTransformations").start_array();
        for item_372 in var_370 {
            {
                let mut object_373 = array_371.value().start_object();
                crate::json_ser::serialize_structure_crate_model_text_transformation(
                    &mut object_373,
                    item_372,
                )?;
                object_373.finish();
            }
        }
        array_371.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_size_constraint_statement(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SizeConstraintStatement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_374) = &input.field_to_match {
        let mut object_375 = object.key("FieldToMatch").start_object();
        crate::json_ser::serialize_structure_crate_model_field_to_match(&mut object_375, var_374)?;
        object_375.finish();
    }
    if let Some(var_376) = &input.comparison_operator {
        object.key("ComparisonOperator").string(var_376.as_str());
    }
    {
        object.key("Size").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.size).into()),
        );
    }
    if let Some(var_377) = &input.text_transformations {
        let mut array_378 = object.key("TextTransformations").start_array();
        for item_379 in var_377 {
            {
                let mut object_380 = array_378.value().start_object();
                crate::json_ser::serialize_structure_crate_model_text_transformation(
                    &mut object_380,
                    item_379,
                )?;
                object_380.finish();
            }
        }
        array_378.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_geo_match_statement(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GeoMatchStatement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_381) = &input.country_codes {
        let mut array_382 = object.key("CountryCodes").start_array();
        for item_383 in var_381 {
            {
                array_382.value().string(item_383.as_str());
            }
        }
        array_382.finish();
    }
    if let Some(var_384) = &input.forwarded_ip_config {
        let mut object_385 = object.key("ForwardedIPConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_forwarded_ip_config(
            &mut object_385,
            var_384,
        )?;
        object_385.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_reference_statement(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupReferenceStatement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_386) = &input.arn {
        object.key("ARN").string(var_386.as_str());
    }
    if let Some(var_387) = &input.excluded_rules {
        let mut array_388 = object.key("ExcludedRules").start_array();
        for item_389 in var_387 {
            {
                let mut object_390 = array_388.value().start_object();
                crate::json_ser::serialize_structure_crate_model_excluded_rule(
                    &mut object_390,
                    item_389,
                )?;
                object_390.finish();
            }
        }
        array_388.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ip_set_reference_statement(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IpSetReferenceStatement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_391) = &input.arn {
        object.key("ARN").string(var_391.as_str());
    }
    if let Some(var_392) = &input.ip_set_forwarded_ip_config {
        let mut object_393 = object.key("IPSetForwardedIPConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_ip_set_forwarded_ip_config(
            &mut object_393,
            var_392,
        )?;
        object_393.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_regex_pattern_set_reference_statement(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RegexPatternSetReferenceStatement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_394) = &input.arn {
        object.key("ARN").string(var_394.as_str());
    }
    if let Some(var_395) = &input.field_to_match {
        let mut object_396 = object.key("FieldToMatch").start_object();
        crate::json_ser::serialize_structure_crate_model_field_to_match(&mut object_396, var_395)?;
        object_396.finish();
    }
    if let Some(var_397) = &input.text_transformations {
        let mut array_398 = object.key("TextTransformations").start_array();
        for item_399 in var_397 {
            {
                let mut object_400 = array_398.value().start_object();
                crate::json_ser::serialize_structure_crate_model_text_transformation(
                    &mut object_400,
                    item_399,
                )?;
                object_400.finish();
            }
        }
        array_398.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rate_based_statement(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RateBasedStatement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_401) = &input.aggregate_key_type {
        object.key("AggregateKeyType").string(var_401.as_str());
    }
    if let Some(var_402) = &input.scope_down_statement {
        let mut object_403 = object.key("ScopeDownStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_statement(&mut object_403, var_402)?;
        object_403.finish();
    }
    if let Some(var_404) = &input.forwarded_ip_config {
        let mut object_405 = object.key("ForwardedIPConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_forwarded_ip_config(
            &mut object_405,
            var_404,
        )?;
        object_405.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_and_statement(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AndStatement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_406) = &input.statements {
        let mut array_407 = object.key("Statements").start_array();
        for item_408 in var_406 {
            {
                let mut object_409 = array_407.value().start_object();
                crate::json_ser::serialize_structure_crate_model_statement(
                    &mut object_409,
                    item_408,
                )?;
                object_409.finish();
            }
        }
        array_407.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_or_statement(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OrStatement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_410) = &input.statements {
        let mut array_411 = object.key("Statements").start_array();
        for item_412 in var_410 {
            {
                let mut object_413 = array_411.value().start_object();
                crate::json_ser::serialize_structure_crate_model_statement(
                    &mut object_413,
                    item_412,
                )?;
                object_413.finish();
            }
        }
        array_411.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_not_statement(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NotStatement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_414) = &input.statement {
        let mut object_415 = object.key("Statement").start_object();
        crate::json_ser::serialize_structure_crate_model_statement(&mut object_415, var_414)?;
        object_415.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_managed_rule_group_statement(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ManagedRuleGroupStatement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_416) = &input.vendor_name {
        object.key("VendorName").string(var_416.as_str());
    }
    if let Some(var_417) = &input.name {
        object.key("Name").string(var_417.as_str());
    }
    if let Some(var_418) = &input.version {
        object.key("Version").string(var_418.as_str());
    }
    if let Some(var_419) = &input.excluded_rules {
        let mut array_420 = object.key("ExcludedRules").start_array();
        for item_421 in var_419 {
            {
                let mut object_422 = array_420.value().start_object();
                crate::json_ser::serialize_structure_crate_model_excluded_rule(
                    &mut object_422,
                    item_421,
                )?;
                object_422.finish();
            }
        }
        array_420.finish();
    }
    if let Some(var_423) = &input.scope_down_statement {
        let mut object_424 = object.key("ScopeDownStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_statement(&mut object_424, var_423)?;
        object_424.finish();
    }
    if let Some(var_425) = &input.managed_rule_group_configs {
        let mut array_426 = object.key("ManagedRuleGroupConfigs").start_array();
        for item_427 in var_425 {
            {
                let mut object_428 = array_426.value().start_object();
                crate::json_ser::serialize_structure_crate_model_managed_rule_group_config(
                    &mut object_428,
                    item_427,
                )?;
                object_428.finish();
            }
        }
        array_426.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_label_match_statement(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelMatchStatement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_429) = &input.scope {
        object.key("Scope").string(var_429.as_str());
    }
    if let Some(var_430) = &input.key {
        object.key("Key").string(var_430.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_regex_match_statement(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RegexMatchStatement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_431) = &input.regex_string {
        object.key("RegexString").string(var_431.as_str());
    }
    if let Some(var_432) = &input.field_to_match {
        let mut object_433 = object.key("FieldToMatch").start_object();
        crate::json_ser::serialize_structure_crate_model_field_to_match(&mut object_433, var_432)?;
        object_433.finish();
    }
    if let Some(var_434) = &input.text_transformations {
        let mut array_435 = object.key("TextTransformations").start_array();
        for item_436 in var_434 {
            {
                let mut object_437 = array_435.value().start_object();
                crate::json_ser::serialize_structure_crate_model_text_transformation(
                    &mut object_437,
                    item_436,
                )?;
                object_437.finish();
            }
        }
        array_435.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_count_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CountAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_438) = &input.custom_request_handling {
        let mut object_439 = object.key("CustomRequestHandling").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_request_handling(
            &mut object_439,
            var_438,
        )?;
        object_439.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_captcha_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CaptchaAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_440) = &input.custom_request_handling {
        let mut object_441 = object.key("CustomRequestHandling").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_request_handling(
            &mut object_441,
            var_440,
        )?;
        object_441.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_none_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NoneAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let (_, _) = (object, input);
    Ok(())
}

pub fn serialize_structure_crate_model_custom_response(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomResponse,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_442) = &input.response_code {
        object.key("ResponseCode").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_442).into()),
        );
    }
    if let Some(var_443) = &input.custom_response_body_key {
        object.key("CustomResponseBodyKey").string(var_443.as_str());
    }
    if let Some(var_444) = &input.response_headers {
        let mut array_445 = object.key("ResponseHeaders").start_array();
        for item_446 in var_444 {
            {
                let mut object_447 = array_445.value().start_object();
                crate::json_ser::serialize_structure_crate_model_custom_http_header(
                    &mut object_447,
                    item_446,
                )?;
                object_447.finish();
            }
        }
        array_445.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_request_handling(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomRequestHandling,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_448) = &input.insert_headers {
        let mut array_449 = object.key("InsertHeaders").start_array();
        for item_450 in var_448 {
            {
                let mut object_451 = array_449.value().start_object();
                crate::json_ser::serialize_structure_crate_model_custom_http_header(
                    &mut object_451,
                    item_450,
                )?;
                object_451.finish();
            }
        }
        array_449.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_single_header(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SingleHeader,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_452) = &input.name {
        object.key("Name").string(var_452.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_single_query_argument(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SingleQueryArgument,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_453) = &input.name {
        object.key("Name").string(var_453.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_all_query_arguments(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AllQueryArguments,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let (_, _) = (object, input);
    Ok(())
}

pub fn serialize_structure_crate_model_uri_path(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UriPath,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let (_, _) = (object, input);
    Ok(())
}

pub fn serialize_structure_crate_model_query_string(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::QueryString,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let (_, _) = (object, input);
    Ok(())
}

pub fn serialize_structure_crate_model_body(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Body,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let (_, _) = (object, input);
    Ok(())
}

pub fn serialize_structure_crate_model_method(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Method,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let (_, _) = (object, input);
    Ok(())
}

pub fn serialize_structure_crate_model_json_body(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JsonBody,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_454) = &input.match_pattern {
        let mut object_455 = object.key("MatchPattern").start_object();
        crate::json_ser::serialize_structure_crate_model_json_match_pattern(
            &mut object_455,
            var_454,
        )?;
        object_455.finish();
    }
    if let Some(var_456) = &input.match_scope {
        object.key("MatchScope").string(var_456.as_str());
    }
    if let Some(var_457) = &input.invalid_fallback_behavior {
        object
            .key("InvalidFallbackBehavior")
            .string(var_457.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Filter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_458) = &input.behavior {
        object.key("Behavior").string(var_458.as_str());
    }
    if let Some(var_459) = &input.requirement {
        object.key("Requirement").string(var_459.as_str());
    }
    if let Some(var_460) = &input.conditions {
        let mut array_461 = object.key("Conditions").start_array();
        for item_462 in var_460 {
            {
                let mut object_463 = array_461.value().start_object();
                crate::json_ser::serialize_structure_crate_model_condition(
                    &mut object_463,
                    item_462,
                )?;
                object_463.finish();
            }
        }
        array_461.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_text_transformation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TextTransformation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.priority).into()),
        );
    }
    if let Some(var_464) = &input.r#type {
        object.key("Type").string(var_464.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_forwarded_ip_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ForwardedIpConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_465) = &input.header_name {
        object.key("HeaderName").string(var_465.as_str());
    }
    if let Some(var_466) = &input.fallback_behavior {
        object.key("FallbackBehavior").string(var_466.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_excluded_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExcludedRule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_467) = &input.name {
        object.key("Name").string(var_467.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ip_set_forwarded_ip_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IpSetForwardedIpConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_468) = &input.header_name {
        object.key("HeaderName").string(var_468.as_str());
    }
    if let Some(var_469) = &input.fallback_behavior {
        object.key("FallbackBehavior").string(var_469.as_str());
    }
    if let Some(var_470) = &input.position {
        object.key("Position").string(var_470.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_managed_rule_group_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ManagedRuleGroupConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_471) = &input.login_path {
        object.key("LoginPath").string(var_471.as_str());
    }
    if let Some(var_472) = &input.payload_type {
        object.key("PayloadType").string(var_472.as_str());
    }
    if let Some(var_473) = &input.username_field {
        let mut object_474 = object.key("UsernameField").start_object();
        crate::json_ser::serialize_structure_crate_model_username_field(&mut object_474, var_473)?;
        object_474.finish();
    }
    if let Some(var_475) = &input.password_field {
        let mut object_476 = object.key("PasswordField").start_object();
        crate::json_ser::serialize_structure_crate_model_password_field(&mut object_476, var_475)?;
        object_476.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_http_header(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomHttpHeader,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_477) = &input.name {
        object.key("Name").string(var_477.as_str());
    }
    if let Some(var_478) = &input.value {
        object.key("Value").string(var_478.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_json_match_pattern(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JsonMatchPattern,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_479) = &input.all {
        let mut object_480 = object.key("All").start_object();
        crate::json_ser::serialize_structure_crate_model_all(&mut object_480, var_479)?;
        object_480.finish();
    }
    if let Some(var_481) = &input.included_paths {
        let mut array_482 = object.key("IncludedPaths").start_array();
        for item_483 in var_481 {
            {
                array_482.value().string(item_483.as_str());
            }
        }
        array_482.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Condition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_484) = &input.action_condition {
        let mut object_485 = object.key("ActionCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_action_condition(
            &mut object_485,
            var_484,
        )?;
        object_485.finish();
    }
    if let Some(var_486) = &input.label_name_condition {
        let mut object_487 = object.key("LabelNameCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_label_name_condition(
            &mut object_487,
            var_486,
        )?;
        object_487.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_username_field(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UsernameField,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_488) = &input.identifier {
        object.key("Identifier").string(var_488.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_password_field(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PasswordField,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_489) = &input.identifier {
        object.key("Identifier").string(var_489.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_all(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::All,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let (_, _) = (object, input);
    Ok(())
}

pub fn serialize_structure_crate_model_action_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ActionCondition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_490) = &input.action {
        object.key("Action").string(var_490.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_label_name_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelNameCondition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_491) = &input.label_name {
        object.key("LabelName").string(var_491.as_str());
    }
    Ok(())
}
