// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The container that you specified in the request already exists or is being updated.</p>
    ContainerInUseException(crate::error::ContainerInUseException),
    /// <p>The container that you specified in the request does not exist.</p>
    ContainerNotFoundException(crate::error::ContainerNotFoundException),
    /// <p>The CORS policy that you specified in the request does not exist.</p>
    CorsPolicyNotFoundException(crate::error::CorsPolicyNotFoundException),
    /// <p>The service is temporarily unavailable.</p>
    InternalServerError(crate::error::InternalServerError),
    /// <p>A service limit has been exceeded.</p>
    LimitExceededException(crate::error::LimitExceededException),
    /// <p>The policy that you specified in the request does not exist.</p>
    PolicyNotFoundException(crate::error::PolicyNotFoundException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ContainerInUseException(inner) => inner.fmt(f),
            Error::ContainerNotFoundException(inner) => inner.fmt(f),
            Error::CorsPolicyNotFoundException(inner) => inner.fmt(f),
            Error::InternalServerError(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::PolicyNotFoundException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateContainerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateContainerError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateContainerError> for Error {
    fn from(err: crate::error::CreateContainerError) -> Self {
        match err {
            crate::error::CreateContainerError::ContainerInUseException(inner) => {
                Error::ContainerInUseException(inner)
            }
            crate::error::CreateContainerError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::CreateContainerError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateContainerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteContainerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteContainerError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteContainerError> for Error {
    fn from(err: crate::error::DeleteContainerError) -> Self {
        match err {
            crate::error::DeleteContainerError::ContainerInUseException(inner) => {
                Error::ContainerInUseException(inner)
            }
            crate::error::DeleteContainerError::ContainerNotFoundException(inner) => {
                Error::ContainerNotFoundException(inner)
            }
            crate::error::DeleteContainerError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DeleteContainerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteContainerPolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteContainerPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteContainerPolicyError> for Error {
    fn from(err: crate::error::DeleteContainerPolicyError) -> Self {
        match err {
            crate::error::DeleteContainerPolicyError::ContainerInUseException(inner) => {
                Error::ContainerInUseException(inner)
            }
            crate::error::DeleteContainerPolicyError::ContainerNotFoundException(inner) => {
                Error::ContainerNotFoundException(inner)
            }
            crate::error::DeleteContainerPolicyError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DeleteContainerPolicyError::PolicyNotFoundException(inner) => {
                Error::PolicyNotFoundException(inner)
            }
            crate::error::DeleteContainerPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteCorsPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteCorsPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteCorsPolicyError> for Error {
    fn from(err: crate::error::DeleteCorsPolicyError) -> Self {
        match err {
            crate::error::DeleteCorsPolicyError::ContainerInUseException(inner) => {
                Error::ContainerInUseException(inner)
            }
            crate::error::DeleteCorsPolicyError::ContainerNotFoundException(inner) => {
                Error::ContainerNotFoundException(inner)
            }
            crate::error::DeleteCorsPolicyError::CorsPolicyNotFoundException(inner) => {
                Error::CorsPolicyNotFoundException(inner)
            }
            crate::error::DeleteCorsPolicyError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DeleteCorsPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteLifecyclePolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteLifecyclePolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteLifecyclePolicyError> for Error {
    fn from(err: crate::error::DeleteLifecyclePolicyError) -> Self {
        match err {
            crate::error::DeleteLifecyclePolicyError::ContainerInUseException(inner) => {
                Error::ContainerInUseException(inner)
            }
            crate::error::DeleteLifecyclePolicyError::ContainerNotFoundException(inner) => {
                Error::ContainerNotFoundException(inner)
            }
            crate::error::DeleteLifecyclePolicyError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DeleteLifecyclePolicyError::PolicyNotFoundException(inner) => {
                Error::PolicyNotFoundException(inner)
            }
            crate::error::DeleteLifecyclePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteMetricPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteMetricPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteMetricPolicyError> for Error {
    fn from(err: crate::error::DeleteMetricPolicyError) -> Self {
        match err {
            crate::error::DeleteMetricPolicyError::ContainerInUseException(inner) => {
                Error::ContainerInUseException(inner)
            }
            crate::error::DeleteMetricPolicyError::ContainerNotFoundException(inner) => {
                Error::ContainerNotFoundException(inner)
            }
            crate::error::DeleteMetricPolicyError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DeleteMetricPolicyError::PolicyNotFoundException(inner) => {
                Error::PolicyNotFoundException(inner)
            }
            crate::error::DeleteMetricPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeContainerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeContainerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeContainerError> for Error {
    fn from(err: crate::error::DescribeContainerError) -> Self {
        match err {
            crate::error::DescribeContainerError::ContainerNotFoundException(inner) => {
                Error::ContainerNotFoundException(inner)
            }
            crate::error::DescribeContainerError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeContainerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetContainerPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetContainerPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetContainerPolicyError> for Error {
    fn from(err: crate::error::GetContainerPolicyError) -> Self {
        match err {
            crate::error::GetContainerPolicyError::ContainerInUseException(inner) => {
                Error::ContainerInUseException(inner)
            }
            crate::error::GetContainerPolicyError::ContainerNotFoundException(inner) => {
                Error::ContainerNotFoundException(inner)
            }
            crate::error::GetContainerPolicyError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::GetContainerPolicyError::PolicyNotFoundException(inner) => {
                Error::PolicyNotFoundException(inner)
            }
            crate::error::GetContainerPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetCorsPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetCorsPolicyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetCorsPolicyError> for Error {
    fn from(err: crate::error::GetCorsPolicyError) -> Self {
        match err {
            crate::error::GetCorsPolicyError::ContainerInUseException(inner) => {
                Error::ContainerInUseException(inner)
            }
            crate::error::GetCorsPolicyError::ContainerNotFoundException(inner) => {
                Error::ContainerNotFoundException(inner)
            }
            crate::error::GetCorsPolicyError::CorsPolicyNotFoundException(inner) => {
                Error::CorsPolicyNotFoundException(inner)
            }
            crate::error::GetCorsPolicyError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::GetCorsPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetLifecyclePolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetLifecyclePolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetLifecyclePolicyError> for Error {
    fn from(err: crate::error::GetLifecyclePolicyError) -> Self {
        match err {
            crate::error::GetLifecyclePolicyError::ContainerInUseException(inner) => {
                Error::ContainerInUseException(inner)
            }
            crate::error::GetLifecyclePolicyError::ContainerNotFoundException(inner) => {
                Error::ContainerNotFoundException(inner)
            }
            crate::error::GetLifecyclePolicyError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::GetLifecyclePolicyError::PolicyNotFoundException(inner) => {
                Error::PolicyNotFoundException(inner)
            }
            crate::error::GetLifecyclePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetMetricPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetMetricPolicyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetMetricPolicyError> for Error {
    fn from(err: crate::error::GetMetricPolicyError) -> Self {
        match err {
            crate::error::GetMetricPolicyError::ContainerInUseException(inner) => {
                Error::ContainerInUseException(inner)
            }
            crate::error::GetMetricPolicyError::ContainerNotFoundException(inner) => {
                Error::ContainerNotFoundException(inner)
            }
            crate::error::GetMetricPolicyError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::GetMetricPolicyError::PolicyNotFoundException(inner) => {
                Error::PolicyNotFoundException(inner)
            }
            crate::error::GetMetricPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListContainersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListContainersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListContainersError> for Error {
    fn from(err: crate::error::ListContainersError) -> Self {
        match err {
            crate::error::ListContainersError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::ListContainersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::ContainerInUseException(inner) => {
                Error::ContainerInUseException(inner)
            }
            crate::error::ListTagsForResourceError::ContainerNotFoundException(inner) => {
                Error::ContainerNotFoundException(inner)
            }
            crate::error::ListTagsForResourceError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutContainerPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutContainerPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutContainerPolicyError> for Error {
    fn from(err: crate::error::PutContainerPolicyError) -> Self {
        match err {
            crate::error::PutContainerPolicyError::ContainerInUseException(inner) => {
                Error::ContainerInUseException(inner)
            }
            crate::error::PutContainerPolicyError::ContainerNotFoundException(inner) => {
                Error::ContainerNotFoundException(inner)
            }
            crate::error::PutContainerPolicyError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::PutContainerPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutCorsPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutCorsPolicyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutCorsPolicyError> for Error {
    fn from(err: crate::error::PutCorsPolicyError) -> Self {
        match err {
            crate::error::PutCorsPolicyError::ContainerInUseException(inner) => {
                Error::ContainerInUseException(inner)
            }
            crate::error::PutCorsPolicyError::ContainerNotFoundException(inner) => {
                Error::ContainerNotFoundException(inner)
            }
            crate::error::PutCorsPolicyError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::PutCorsPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutLifecyclePolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutLifecyclePolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutLifecyclePolicyError> for Error {
    fn from(err: crate::error::PutLifecyclePolicyError) -> Self {
        match err {
            crate::error::PutLifecyclePolicyError::ContainerInUseException(inner) => {
                Error::ContainerInUseException(inner)
            }
            crate::error::PutLifecyclePolicyError::ContainerNotFoundException(inner) => {
                Error::ContainerNotFoundException(inner)
            }
            crate::error::PutLifecyclePolicyError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::PutLifecyclePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutMetricPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutMetricPolicyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutMetricPolicyError> for Error {
    fn from(err: crate::error::PutMetricPolicyError) -> Self {
        match err {
            crate::error::PutMetricPolicyError::ContainerInUseException(inner) => {
                Error::ContainerInUseException(inner)
            }
            crate::error::PutMetricPolicyError::ContainerNotFoundException(inner) => {
                Error::ContainerNotFoundException(inner)
            }
            crate::error::PutMetricPolicyError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::PutMetricPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartAccessLoggingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartAccessLoggingError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartAccessLoggingError> for Error {
    fn from(err: crate::error::StartAccessLoggingError) -> Self {
        match err {
            crate::error::StartAccessLoggingError::ContainerInUseException(inner) => {
                Error::ContainerInUseException(inner)
            }
            crate::error::StartAccessLoggingError::ContainerNotFoundException(inner) => {
                Error::ContainerNotFoundException(inner)
            }
            crate::error::StartAccessLoggingError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::StartAccessLoggingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopAccessLoggingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StopAccessLoggingError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopAccessLoggingError> for Error {
    fn from(err: crate::error::StopAccessLoggingError) -> Self {
        match err {
            crate::error::StopAccessLoggingError::ContainerInUseException(inner) => {
                Error::ContainerInUseException(inner)
            }
            crate::error::StopAccessLoggingError::ContainerNotFoundException(inner) => {
                Error::ContainerNotFoundException(inner)
            }
            crate::error::StopAccessLoggingError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::StopAccessLoggingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::ContainerInUseException(inner) => {
                Error::ContainerInUseException(inner)
            }
            crate::error::TagResourceError::ContainerNotFoundException(inner) => {
                Error::ContainerNotFoundException(inner)
            }
            crate::error::TagResourceError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::ContainerInUseException(inner) => {
                Error::ContainerInUseException(inner)
            }
            crate::error::UntagResourceError::ContainerNotFoundException(inner) => {
                Error::ContainerNotFoundException(inner)
            }
            crate::error::UntagResourceError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::ContainerInUseException(e) => e.request_id(),
            Self::ContainerNotFoundException(e) => e.request_id(),
            Self::CorsPolicyNotFoundException(e) => e.request_id(),
            Self::InternalServerError(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::PolicyNotFoundException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
