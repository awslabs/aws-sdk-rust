// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    ContainerInUseException(crate::error::ContainerInUseException),
    ContainerNotFoundException(crate::error::ContainerNotFoundException),
    CorsPolicyNotFoundException(crate::error::CorsPolicyNotFoundException),
    InternalServerError(crate::error::InternalServerError),
    LimitExceededException(crate::error::LimitExceededException),
    PolicyNotFoundException(crate::error::PolicyNotFoundException),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ContainerInUseException(inner) => inner.fmt(f),
            Error::ContainerNotFoundException(inner) => inner.fmt(f),
            Error::CorsPolicyNotFoundException(inner) => inner.fmt(f),
            Error::InternalServerError(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::PolicyNotFoundException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateContainerError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateContainerError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateContainerErrorKind::ContainerInUseException(inner) => {
                    Error::ContainerInUseException(inner)
                }
                crate::error::CreateContainerErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::CreateContainerErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::CreateContainerErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteContainerError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteContainerError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteContainerErrorKind::ContainerInUseException(inner) => {
                    Error::ContainerInUseException(inner)
                }
                crate::error::DeleteContainerErrorKind::ContainerNotFoundException(inner) => {
                    Error::ContainerNotFoundException(inner)
                }
                crate::error::DeleteContainerErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DeleteContainerErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteContainerPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteContainerPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteContainerPolicyErrorKind::ContainerInUseException(inner) => {
                    Error::ContainerInUseException(inner)
                }
                crate::error::DeleteContainerPolicyErrorKind::ContainerNotFoundException(inner) => {
                    Error::ContainerNotFoundException(inner)
                }
                crate::error::DeleteContainerPolicyErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DeleteContainerPolicyErrorKind::PolicyNotFoundException(inner) => {
                    Error::PolicyNotFoundException(inner)
                }
                crate::error::DeleteContainerPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteCorsPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteCorsPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteCorsPolicyErrorKind::ContainerInUseException(inner) => {
                    Error::ContainerInUseException(inner)
                }
                crate::error::DeleteCorsPolicyErrorKind::ContainerNotFoundException(inner) => {
                    Error::ContainerNotFoundException(inner)
                }
                crate::error::DeleteCorsPolicyErrorKind::CorsPolicyNotFoundException(inner) => {
                    Error::CorsPolicyNotFoundException(inner)
                }
                crate::error::DeleteCorsPolicyErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DeleteCorsPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteLifecyclePolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteLifecyclePolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteLifecyclePolicyErrorKind::ContainerInUseException(inner) => {
                    Error::ContainerInUseException(inner)
                }
                crate::error::DeleteLifecyclePolicyErrorKind::ContainerNotFoundException(inner) => {
                    Error::ContainerNotFoundException(inner)
                }
                crate::error::DeleteLifecyclePolicyErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DeleteLifecyclePolicyErrorKind::PolicyNotFoundException(inner) => {
                    Error::PolicyNotFoundException(inner)
                }
                crate::error::DeleteLifecyclePolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteMetricPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteMetricPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteMetricPolicyErrorKind::ContainerInUseException(inner) => {
                    Error::ContainerInUseException(inner)
                }
                crate::error::DeleteMetricPolicyErrorKind::ContainerNotFoundException(inner) => {
                    Error::ContainerNotFoundException(inner)
                }
                crate::error::DeleteMetricPolicyErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DeleteMetricPolicyErrorKind::PolicyNotFoundException(inner) => {
                    Error::PolicyNotFoundException(inner)
                }
                crate::error::DeleteMetricPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeContainerError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeContainerError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeContainerErrorKind::ContainerNotFoundException(inner) => {
                    Error::ContainerNotFoundException(inner)
                }
                crate::error::DescribeContainerErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DescribeContainerErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetContainerPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetContainerPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetContainerPolicyErrorKind::ContainerInUseException(inner) => {
                    Error::ContainerInUseException(inner)
                }
                crate::error::GetContainerPolicyErrorKind::ContainerNotFoundException(inner) => {
                    Error::ContainerNotFoundException(inner)
                }
                crate::error::GetContainerPolicyErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::GetContainerPolicyErrorKind::PolicyNotFoundException(inner) => {
                    Error::PolicyNotFoundException(inner)
                }
                crate::error::GetContainerPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetCorsPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetCorsPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetCorsPolicyErrorKind::ContainerInUseException(inner) => {
                    Error::ContainerInUseException(inner)
                }
                crate::error::GetCorsPolicyErrorKind::ContainerNotFoundException(inner) => {
                    Error::ContainerNotFoundException(inner)
                }
                crate::error::GetCorsPolicyErrorKind::CorsPolicyNotFoundException(inner) => {
                    Error::CorsPolicyNotFoundException(inner)
                }
                crate::error::GetCorsPolicyErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::GetCorsPolicyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetLifecyclePolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetLifecyclePolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetLifecyclePolicyErrorKind::ContainerInUseException(inner) => {
                    Error::ContainerInUseException(inner)
                }
                crate::error::GetLifecyclePolicyErrorKind::ContainerNotFoundException(inner) => {
                    Error::ContainerNotFoundException(inner)
                }
                crate::error::GetLifecyclePolicyErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::GetLifecyclePolicyErrorKind::PolicyNotFoundException(inner) => {
                    Error::PolicyNotFoundException(inner)
                }
                crate::error::GetLifecyclePolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetMetricPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetMetricPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetMetricPolicyErrorKind::ContainerInUseException(inner) => {
                    Error::ContainerInUseException(inner)
                }
                crate::error::GetMetricPolicyErrorKind::ContainerNotFoundException(inner) => {
                    Error::ContainerNotFoundException(inner)
                }
                crate::error::GetMetricPolicyErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::GetMetricPolicyErrorKind::PolicyNotFoundException(inner) => {
                    Error::PolicyNotFoundException(inner)
                }
                crate::error::GetMetricPolicyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListContainersError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListContainersError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListContainersErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::ListContainersErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTagsForResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTagsForResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTagsForResourceErrorKind::ContainerInUseException(inner) => {
                    Error::ContainerInUseException(inner)
                }
                crate::error::ListTagsForResourceErrorKind::ContainerNotFoundException(inner) => {
                    Error::ContainerNotFoundException(inner)
                }
                crate::error::ListTagsForResourceErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::ListTagsForResourceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutContainerPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutContainerPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutContainerPolicyErrorKind::ContainerInUseException(inner) => {
                    Error::ContainerInUseException(inner)
                }
                crate::error::PutContainerPolicyErrorKind::ContainerNotFoundException(inner) => {
                    Error::ContainerNotFoundException(inner)
                }
                crate::error::PutContainerPolicyErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::PutContainerPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutCorsPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutCorsPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutCorsPolicyErrorKind::ContainerInUseException(inner) => {
                    Error::ContainerInUseException(inner)
                }
                crate::error::PutCorsPolicyErrorKind::ContainerNotFoundException(inner) => {
                    Error::ContainerNotFoundException(inner)
                }
                crate::error::PutCorsPolicyErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::PutCorsPolicyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutLifecyclePolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutLifecyclePolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutLifecyclePolicyErrorKind::ContainerInUseException(inner) => {
                    Error::ContainerInUseException(inner)
                }
                crate::error::PutLifecyclePolicyErrorKind::ContainerNotFoundException(inner) => {
                    Error::ContainerNotFoundException(inner)
                }
                crate::error::PutLifecyclePolicyErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::PutLifecyclePolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutMetricPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutMetricPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutMetricPolicyErrorKind::ContainerInUseException(inner) => {
                    Error::ContainerInUseException(inner)
                }
                crate::error::PutMetricPolicyErrorKind::ContainerNotFoundException(inner) => {
                    Error::ContainerNotFoundException(inner)
                }
                crate::error::PutMetricPolicyErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::PutMetricPolicyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StartAccessLoggingError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StartAccessLoggingError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StartAccessLoggingErrorKind::ContainerInUseException(inner) => {
                    Error::ContainerInUseException(inner)
                }
                crate::error::StartAccessLoggingErrorKind::ContainerNotFoundException(inner) => {
                    Error::ContainerNotFoundException(inner)
                }
                crate::error::StartAccessLoggingErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::StartAccessLoggingErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StopAccessLoggingError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StopAccessLoggingError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StopAccessLoggingErrorKind::ContainerInUseException(inner) => {
                    Error::ContainerInUseException(inner)
                }
                crate::error::StopAccessLoggingErrorKind::ContainerNotFoundException(inner) => {
                    Error::ContainerNotFoundException(inner)
                }
                crate::error::StopAccessLoggingErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::StopAccessLoggingErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TagResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::TagResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TagResourceErrorKind::ContainerInUseException(inner) => {
                    Error::ContainerInUseException(inner)
                }
                crate::error::TagResourceErrorKind::ContainerNotFoundException(inner) => {
                    Error::ContainerNotFoundException(inner)
                }
                crate::error::TagResourceErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::TagResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UntagResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UntagResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UntagResourceErrorKind::ContainerInUseException(inner) => {
                    Error::ContainerInUseException(inner)
                }
                crate::error::UntagResourceErrorKind::ContainerNotFoundException(inner) => {
                    Error::ContainerNotFoundException(inner)
                }
                crate::error::UntagResourceErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::UntagResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
