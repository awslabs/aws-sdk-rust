// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn create_container_output_correct_errors(
    mut builder: crate::operation::create_container::builders::CreateContainerOutputBuilder,
) -> crate::operation::create_container::builders::CreateContainerOutputBuilder {
    if builder.container.is_none() {
        builder.container = {
            let builder = crate::types::builders::ContainerBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn get_container_policy_output_correct_errors(
    mut builder: crate::operation::get_container_policy::builders::GetContainerPolicyOutputBuilder,
) -> crate::operation::get_container_policy::builders::GetContainerPolicyOutputBuilder {
    if builder.policy.is_none() {
        builder.policy = Some(Default::default())
    }
    builder
}

pub(crate) fn get_cors_policy_output_correct_errors(
    mut builder: crate::operation::get_cors_policy::builders::GetCorsPolicyOutputBuilder,
) -> crate::operation::get_cors_policy::builders::GetCorsPolicyOutputBuilder {
    if builder.cors_policy.is_none() {
        builder.cors_policy = Some(Default::default())
    }
    builder
}

pub(crate) fn get_lifecycle_policy_output_correct_errors(
    mut builder: crate::operation::get_lifecycle_policy::builders::GetLifecyclePolicyOutputBuilder,
) -> crate::operation::get_lifecycle_policy::builders::GetLifecyclePolicyOutputBuilder {
    if builder.lifecycle_policy.is_none() {
        builder.lifecycle_policy = Some(Default::default())
    }
    builder
}

pub(crate) fn get_metric_policy_output_correct_errors(
    mut builder: crate::operation::get_metric_policy::builders::GetMetricPolicyOutputBuilder,
) -> crate::operation::get_metric_policy::builders::GetMetricPolicyOutputBuilder {
    if builder.metric_policy.is_none() {
        builder.metric_policy = {
            let builder = crate::types::builders::MetricPolicyBuilder::default();
            crate::serde_util::metric_policy_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn list_containers_output_correct_errors(
    mut builder: crate::operation::list_containers::builders::ListContainersOutputBuilder,
) -> crate::operation::list_containers::builders::ListContainersOutputBuilder {
    if builder.containers.is_none() {
        builder.containers = Some(Default::default())
    }
    builder
}

pub(crate) fn metric_policy_correct_errors(mut builder: crate::types::builders::MetricPolicyBuilder) -> crate::types::builders::MetricPolicyBuilder {
    if builder.container_level_metrics.is_none() {
        builder.container_level_metrics = "no value was set".parse::<crate::types::ContainerLevelMetrics>().ok()
    }
    builder
}

pub(crate) fn cors_rule_correct_errors(mut builder: crate::types::builders::CorsRuleBuilder) -> crate::types::builders::CorsRuleBuilder {
    if builder.allowed_origins.is_none() {
        builder.allowed_origins = Some(Default::default())
    }
    if builder.allowed_headers.is_none() {
        builder.allowed_headers = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    builder
}

pub(crate) fn metric_policy_rule_correct_errors(
    mut builder: crate::types::builders::MetricPolicyRuleBuilder,
) -> crate::types::builders::MetricPolicyRuleBuilder {
    if builder.object_group.is_none() {
        builder.object_group = Some(Default::default())
    }
    if builder.object_group_name.is_none() {
        builder.object_group_name = Some(Default::default())
    }
    builder
}
