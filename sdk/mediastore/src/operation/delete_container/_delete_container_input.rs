// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteContainerInput {
    /// <p>The name of the container to delete. </p>
    #[doc(hidden)]
    pub container_name: std::option::Option<std::string::String>,
}
impl DeleteContainerInput {
    /// <p>The name of the container to delete. </p>
    pub fn container_name(&self) -> std::option::Option<&str> {
        self.container_name.as_deref()
    }
}
impl DeleteContainerInput {
    /// Creates a new builder-style object to manufacture [`DeleteContainerInput`](crate::operation::delete_container::DeleteContainerInput).
    pub fn builder() -> crate::operation::delete_container::builders::DeleteContainerInputBuilder {
        crate::operation::delete_container::builders::DeleteContainerInputBuilder::default()
    }
}

/// A builder for [`DeleteContainerInput`](crate::operation::delete_container::DeleteContainerInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteContainerInputBuilder {
    pub(crate) container_name: std::option::Option<std::string::String>,
}
impl DeleteContainerInputBuilder {
    /// <p>The name of the container to delete. </p>
    pub fn container_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.container_name = Some(input.into());
        self
    }
    /// <p>The name of the container to delete. </p>
    pub fn set_container_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.container_name = input;
        self
    }
    /// Consumes the builder and constructs a [`DeleteContainerInput`](crate::operation::delete_container::DeleteContainerInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::delete_container::DeleteContainerInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::delete_container::DeleteContainerInput {
            container_name: self.container_name,
        })
    }
}
