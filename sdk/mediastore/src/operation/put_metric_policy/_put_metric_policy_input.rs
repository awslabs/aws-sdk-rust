// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutMetricPolicyInput {
    /// <p>The name of the container that you want to add the metric policy to.</p>
    #[doc(hidden)]
    pub container_name: std::option::Option<std::string::String>,
    /// <p>The metric policy that you want to associate with the container. In the policy, you must indicate whether you want MediaStore to send container-level metrics. You can also include up to five rules to define groups of objects that you want MediaStore to send object-level metrics for. If you include rules in the policy, construct each rule with both of the following:</p>
    /// <ul>
    /// <li> <p>An object group that defines which objects to include in the group. The definition can be a path or a file name, but it can't have more than 900 characters. Valid characters are: a-z, A-Z, 0-9, _ (underscore), = (equal), : (colon), . (period), - (hyphen), ~ (tilde), / (forward slash), and * (asterisk). Wildcards (*) are acceptable.</p> </li>
    /// <li> <p>An object group name that allows you to refer to the object group. The name can't have more than 30 characters. Valid characters are: a-z, A-Z, 0-9, and _ (underscore).</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub metric_policy: std::option::Option<crate::types::MetricPolicy>,
}
impl PutMetricPolicyInput {
    /// <p>The name of the container that you want to add the metric policy to.</p>
    pub fn container_name(&self) -> std::option::Option<&str> {
        self.container_name.as_deref()
    }
    /// <p>The metric policy that you want to associate with the container. In the policy, you must indicate whether you want MediaStore to send container-level metrics. You can also include up to five rules to define groups of objects that you want MediaStore to send object-level metrics for. If you include rules in the policy, construct each rule with both of the following:</p>
    /// <ul>
    /// <li> <p>An object group that defines which objects to include in the group. The definition can be a path or a file name, but it can't have more than 900 characters. Valid characters are: a-z, A-Z, 0-9, _ (underscore), = (equal), : (colon), . (period), - (hyphen), ~ (tilde), / (forward slash), and * (asterisk). Wildcards (*) are acceptable.</p> </li>
    /// <li> <p>An object group name that allows you to refer to the object group. The name can't have more than 30 characters. Valid characters are: a-z, A-Z, 0-9, and _ (underscore).</p> </li>
    /// </ul>
    pub fn metric_policy(&self) -> std::option::Option<&crate::types::MetricPolicy> {
        self.metric_policy.as_ref()
    }
}
impl PutMetricPolicyInput {
    /// Creates a new builder-style object to manufacture [`PutMetricPolicyInput`](crate::operation::put_metric_policy::PutMetricPolicyInput).
    pub fn builder() -> crate::operation::put_metric_policy::builders::PutMetricPolicyInputBuilder {
        crate::operation::put_metric_policy::builders::PutMetricPolicyInputBuilder::default()
    }
}

/// A builder for [`PutMetricPolicyInput`](crate::operation::put_metric_policy::PutMetricPolicyInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PutMetricPolicyInputBuilder {
    pub(crate) container_name: std::option::Option<std::string::String>,
    pub(crate) metric_policy: std::option::Option<crate::types::MetricPolicy>,
}
impl PutMetricPolicyInputBuilder {
    /// <p>The name of the container that you want to add the metric policy to.</p>
    pub fn container_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.container_name = Some(input.into());
        self
    }
    /// <p>The name of the container that you want to add the metric policy to.</p>
    pub fn set_container_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.container_name = input;
        self
    }
    /// <p>The metric policy that you want to associate with the container. In the policy, you must indicate whether you want MediaStore to send container-level metrics. You can also include up to five rules to define groups of objects that you want MediaStore to send object-level metrics for. If you include rules in the policy, construct each rule with both of the following:</p>
    /// <ul>
    /// <li> <p>An object group that defines which objects to include in the group. The definition can be a path or a file name, but it can't have more than 900 characters. Valid characters are: a-z, A-Z, 0-9, _ (underscore), = (equal), : (colon), . (period), - (hyphen), ~ (tilde), / (forward slash), and * (asterisk). Wildcards (*) are acceptable.</p> </li>
    /// <li> <p>An object group name that allows you to refer to the object group. The name can't have more than 30 characters. Valid characters are: a-z, A-Z, 0-9, and _ (underscore).</p> </li>
    /// </ul>
    pub fn metric_policy(mut self, input: crate::types::MetricPolicy) -> Self {
        self.metric_policy = Some(input);
        self
    }
    /// <p>The metric policy that you want to associate with the container. In the policy, you must indicate whether you want MediaStore to send container-level metrics. You can also include up to five rules to define groups of objects that you want MediaStore to send object-level metrics for. If you include rules in the policy, construct each rule with both of the following:</p>
    /// <ul>
    /// <li> <p>An object group that defines which objects to include in the group. The definition can be a path or a file name, but it can't have more than 900 characters. Valid characters are: a-z, A-Z, 0-9, _ (underscore), = (equal), : (colon), . (period), - (hyphen), ~ (tilde), / (forward slash), and * (asterisk). Wildcards (*) are acceptable.</p> </li>
    /// <li> <p>An object group name that allows you to refer to the object group. The name can't have more than 30 characters. Valid characters are: a-z, A-Z, 0-9, and _ (underscore).</p> </li>
    /// </ul>
    pub fn set_metric_policy(
        mut self,
        input: std::option::Option<crate::types::MetricPolicy>,
    ) -> Self {
        self.metric_policy = input;
        self
    }
    /// Consumes the builder and constructs a [`PutMetricPolicyInput`](crate::operation::put_metric_policy::PutMetricPolicyInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::put_metric_policy::PutMetricPolicyInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::put_metric_policy::PutMetricPolicyInput {
            container_name: self.container_name,
            metric_policy: self.metric_policy,
        })
    }
}
