// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartAccessLoggingInput {
    /// <p>The name of the container that you want to start access logging on.</p>
    pub container_name: ::std::option::Option<::std::string::String>,
}
impl StartAccessLoggingInput {
    /// <p>The name of the container that you want to start access logging on.</p>
    pub fn container_name(&self) -> ::std::option::Option<&str> {
        self.container_name.as_deref()
    }
}
impl StartAccessLoggingInput {
    /// Creates a new builder-style object to manufacture [`StartAccessLoggingInput`](crate::operation::start_access_logging::StartAccessLoggingInput).
    pub fn builder() -> crate::operation::start_access_logging::builders::StartAccessLoggingInputBuilder {
        crate::operation::start_access_logging::builders::StartAccessLoggingInputBuilder::default()
    }
}

/// A builder for [`StartAccessLoggingInput`](crate::operation::start_access_logging::StartAccessLoggingInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StartAccessLoggingInputBuilder {
    pub(crate) container_name: ::std::option::Option<::std::string::String>,
}
impl StartAccessLoggingInputBuilder {
    /// <p>The name of the container that you want to start access logging on.</p>
    /// This field is required.
    pub fn container_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.container_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the container that you want to start access logging on.</p>
    pub fn set_container_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.container_name = input;
        self
    }
    /// <p>The name of the container that you want to start access logging on.</p>
    pub fn get_container_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.container_name
    }
    /// Consumes the builder and constructs a [`StartAccessLoggingInput`](crate::operation::start_access_logging::StartAccessLoggingInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::start_access_logging::StartAccessLoggingInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::start_access_logging::StartAccessLoggingInput {
            container_name: self.container_name,
        })
    }
}
