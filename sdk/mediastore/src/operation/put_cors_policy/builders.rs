// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::put_cors_policy::_put_cors_policy_output::PutCorsPolicyOutputBuilder;

pub use crate::operation::put_cors_policy::_put_cors_policy_input::PutCorsPolicyInputBuilder;

/// Fluent builder constructing a request to `PutCorsPolicy`.
///
/// <p>Sets the cross-origin resource sharing (CORS) configuration on a container so that the container can service cross-origin requests. For example, you might want to enable a request whose origin is http://www.example.com to access your AWS Elemental MediaStore container at my.example.container.com by using the browser's XMLHttpRequest capability.</p>
/// <p>To enable CORS on a container, you attach a CORS policy to the container. In the CORS policy, you configure rules that identify origins and the HTTP methods that can be executed on your container. The policy can contain up to 398,000 characters. You can add up to 100 rules to a CORS policy. If more than one rule applies, the service uses the first applicable rule listed.</p>
/// <p>To learn more about CORS, see <a href="https://docs.aws.amazon.com/mediastore/latest/ug/cors-policy.html">Cross-Origin Resource Sharing (CORS) in AWS Elemental MediaStore</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct PutCorsPolicyFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::put_cors_policy::builders::PutCorsPolicyInputBuilder,
}
impl PutCorsPolicyFluentBuilder {
    /// Creates a new `PutCorsPolicy`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::put_cors_policy::PutCorsPolicy,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::put_cors_policy::PutCorsPolicyError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::put_cors_policy::PutCorsPolicyOutput,
        aws_smithy_http::result::SdkError<crate::operation::put_cors_policy::PutCorsPolicyError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the container that you want to assign the CORS policy to.</p>
    pub fn container_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.container_name(input.into());
        self
    }
    /// <p>The name of the container that you want to assign the CORS policy to.</p>
    pub fn set_container_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_container_name(input);
        self
    }
    /// Appends an item to `CorsPolicy`.
    ///
    /// To override the contents of this collection use [`set_cors_policy`](Self::set_cors_policy).
    ///
    /// <p>The CORS policy to apply to the container. </p>
    pub fn cors_policy(mut self, input: crate::types::CorsRule) -> Self {
        self.inner = self.inner.cors_policy(input);
        self
    }
    /// <p>The CORS policy to apply to the container. </p>
    pub fn set_cors_policy(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::CorsRule>>,
    ) -> Self {
        self.inner = self.inner.set_cors_policy(input);
        self
    }
}
