// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::put_container_policy::_put_container_policy_output::PutContainerPolicyOutputBuilder;

pub use crate::operation::put_container_policy::_put_container_policy_input::PutContainerPolicyInputBuilder;

/// Fluent builder constructing a request to `PutContainerPolicy`.
///
/// <p>Creates an access policy for the specified container to restrict the users and clients that can access it. For information about the data that is included in an access policy, see the <a href="https://aws.amazon.com/documentation/iam/">AWS Identity and Access Management User Guide</a>.</p>
/// <p>For this release of the REST API, you can create only one policy for a container. If you enter <code>PutContainerPolicy</code> twice, the second command modifies the existing policy. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct PutContainerPolicyFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::put_container_policy::builders::PutContainerPolicyInputBuilder,
}
impl PutContainerPolicyFluentBuilder {
    /// Creates a new `PutContainerPolicy`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::put_container_policy::PutContainerPolicy,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::put_container_policy::PutContainerPolicyError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::put_container_policy::PutContainerPolicyOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::put_container_policy::PutContainerPolicyError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the container.</p>
    pub fn container_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.container_name(input.into());
        self
    }
    /// <p>The name of the container.</p>
    pub fn set_container_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_container_name(input);
        self
    }
    /// <p>The contents of the policy, which includes the following: </p>
    /// <ul>
    /// <li> <p>One <code>Version</code> tag</p> </li>
    /// <li> <p>One <code>Statement</code> tag that contains the standard tags for the policy.</p> </li>
    /// </ul>
    pub fn policy(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.policy(input.into());
        self
    }
    /// <p>The contents of the policy, which includes the following: </p>
    /// <ul>
    /// <li> <p>One <code>Version</code> tag</p> </li>
    /// <li> <p>One <code>Statement</code> tag that contains the standard tags for the policy.</p> </li>
    /// </ul>
    pub fn set_policy(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_policy(input);
        self
    }
}
