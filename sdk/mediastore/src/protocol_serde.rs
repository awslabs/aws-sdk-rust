// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) mod shape_create_container;

pub fn parse_http_error_metadata(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    aws_smithy_types::error::metadata::Builder,
    aws_smithy_json::deserialize::error::DeserializeError,
> {
    crate::json_errors::parse_error_metadata(response.body(), response.headers())
}

pub(crate) mod shape_delete_container;

pub(crate) mod shape_delete_container_policy;

pub(crate) mod shape_delete_cors_policy;

pub(crate) mod shape_delete_lifecycle_policy;

pub(crate) mod shape_delete_metric_policy;

pub(crate) mod shape_describe_container;

pub(crate) mod shape_get_container_policy;

pub(crate) mod shape_get_cors_policy;

pub(crate) mod shape_get_lifecycle_policy;

pub(crate) mod shape_get_metric_policy;

pub(crate) mod shape_list_containers;

pub(crate) mod shape_list_tags_for_resource;

pub(crate) mod shape_put_container_policy;

pub(crate) mod shape_put_cors_policy;

pub(crate) mod shape_put_lifecycle_policy;

pub(crate) mod shape_put_metric_policy;

pub(crate) mod shape_start_access_logging;

pub(crate) mod shape_stop_access_logging;

pub(crate) mod shape_tag_resource;

pub(crate) mod shape_untag_resource;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_container_in_use_exception;

pub(crate) mod shape_container_not_found_exception;

pub(crate) mod shape_cors_policy_not_found_exception;

pub(crate) mod shape_create_container_input;

pub(crate) mod shape_delete_container_input;

pub(crate) mod shape_delete_container_policy_input;

pub(crate) mod shape_delete_cors_policy_input;

pub(crate) mod shape_delete_lifecycle_policy_input;

pub(crate) mod shape_delete_metric_policy_input;

pub(crate) mod shape_describe_container_input;

pub(crate) mod shape_get_container_policy_input;

pub(crate) mod shape_get_cors_policy_input;

pub(crate) mod shape_get_lifecycle_policy_input;

pub(crate) mod shape_get_metric_policy_input;

pub(crate) mod shape_internal_server_error;

pub(crate) mod shape_limit_exceeded_exception;

pub(crate) mod shape_list_containers_input;

pub(crate) mod shape_list_tags_for_resource_input;

pub(crate) mod shape_policy_not_found_exception;

pub(crate) mod shape_put_container_policy_input;

pub(crate) mod shape_put_cors_policy_input;

pub(crate) mod shape_put_lifecycle_policy_input;

pub(crate) mod shape_put_metric_policy_input;

pub(crate) mod shape_start_access_logging_input;

pub(crate) mod shape_stop_access_logging_input;

pub(crate) mod shape_tag_resource_input;

pub(crate) mod shape_untag_resource_input;

pub(crate) mod shape_container;

pub(crate) mod shape_container_list;

pub(crate) mod shape_cors_policy;

pub(crate) mod shape_cors_rule;

pub(crate) mod shape_metric_policy;

pub(crate) mod shape_tag;

pub(crate) mod shape_tag_list;

pub(crate) mod shape_metric_policy_rule;

pub(crate) mod shape_metric_policy_rules;

pub(crate) mod shape_allowed_headers;

pub(crate) mod shape_allowed_methods;

pub(crate) mod shape_allowed_origins;

pub(crate) mod shape_expose_headers;
