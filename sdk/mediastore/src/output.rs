// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UntagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UntagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput).
pub mod untag_resource_output {

    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput).
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for TagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput).
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

/// See [`TagResourceOutput`](crate::output::TagResourceOutput).
pub mod tag_resource_output {

    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput).
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StopAccessLoggingOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for StopAccessLoggingOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StopAccessLoggingOutput {
    /// Creates a new builder-style object to manufacture [`StopAccessLoggingOutput`](crate::output::StopAccessLoggingOutput).
    pub fn builder() -> crate::output::stop_access_logging_output::Builder {
        crate::output::stop_access_logging_output::Builder::default()
    }
}

/// See [`StopAccessLoggingOutput`](crate::output::StopAccessLoggingOutput).
pub mod stop_access_logging_output {

    /// A builder for [`StopAccessLoggingOutput`](crate::output::StopAccessLoggingOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StopAccessLoggingOutput`](crate::output::StopAccessLoggingOutput).
        pub fn build(self) -> crate::output::StopAccessLoggingOutput {
            crate::output::StopAccessLoggingOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartAccessLoggingOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for StartAccessLoggingOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartAccessLoggingOutput {
    /// Creates a new builder-style object to manufacture [`StartAccessLoggingOutput`](crate::output::StartAccessLoggingOutput).
    pub fn builder() -> crate::output::start_access_logging_output::Builder {
        crate::output::start_access_logging_output::Builder::default()
    }
}

/// See [`StartAccessLoggingOutput`](crate::output::StartAccessLoggingOutput).
pub mod start_access_logging_output {

    /// A builder for [`StartAccessLoggingOutput`](crate::output::StartAccessLoggingOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StartAccessLoggingOutput`](crate::output::StartAccessLoggingOutput).
        pub fn build(self) -> crate::output::StartAccessLoggingOutput {
            crate::output::StartAccessLoggingOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutMetricPolicyOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for PutMetricPolicyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl PutMetricPolicyOutput {
    /// Creates a new builder-style object to manufacture [`PutMetricPolicyOutput`](crate::output::PutMetricPolicyOutput).
    pub fn builder() -> crate::output::put_metric_policy_output::Builder {
        crate::output::put_metric_policy_output::Builder::default()
    }
}

/// See [`PutMetricPolicyOutput`](crate::output::PutMetricPolicyOutput).
pub mod put_metric_policy_output {

    /// A builder for [`PutMetricPolicyOutput`](crate::output::PutMetricPolicyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PutMetricPolicyOutput`](crate::output::PutMetricPolicyOutput).
        pub fn build(self) -> crate::output::PutMetricPolicyOutput {
            crate::output::PutMetricPolicyOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutLifecyclePolicyOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for PutLifecyclePolicyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl PutLifecyclePolicyOutput {
    /// Creates a new builder-style object to manufacture [`PutLifecyclePolicyOutput`](crate::output::PutLifecyclePolicyOutput).
    pub fn builder() -> crate::output::put_lifecycle_policy_output::Builder {
        crate::output::put_lifecycle_policy_output::Builder::default()
    }
}

/// See [`PutLifecyclePolicyOutput`](crate::output::PutLifecyclePolicyOutput).
pub mod put_lifecycle_policy_output {

    /// A builder for [`PutLifecyclePolicyOutput`](crate::output::PutLifecyclePolicyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PutLifecyclePolicyOutput`](crate::output::PutLifecyclePolicyOutput).
        pub fn build(self) -> crate::output::PutLifecyclePolicyOutput {
            crate::output::PutLifecyclePolicyOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutCorsPolicyOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for PutCorsPolicyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl PutCorsPolicyOutput {
    /// Creates a new builder-style object to manufacture [`PutCorsPolicyOutput`](crate::output::PutCorsPolicyOutput).
    pub fn builder() -> crate::output::put_cors_policy_output::Builder {
        crate::output::put_cors_policy_output::Builder::default()
    }
}

/// See [`PutCorsPolicyOutput`](crate::output::PutCorsPolicyOutput).
pub mod put_cors_policy_output {

    /// A builder for [`PutCorsPolicyOutput`](crate::output::PutCorsPolicyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PutCorsPolicyOutput`](crate::output::PutCorsPolicyOutput).
        pub fn build(self) -> crate::output::PutCorsPolicyOutput {
            crate::output::PutCorsPolicyOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutContainerPolicyOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for PutContainerPolicyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl PutContainerPolicyOutput {
    /// Creates a new builder-style object to manufacture [`PutContainerPolicyOutput`](crate::output::PutContainerPolicyOutput).
    pub fn builder() -> crate::output::put_container_policy_output::Builder {
        crate::output::put_container_policy_output::Builder::default()
    }
}

/// See [`PutContainerPolicyOutput`](crate::output::PutContainerPolicyOutput).
pub mod put_container_policy_output {

    /// A builder for [`PutContainerPolicyOutput`](crate::output::PutContainerPolicyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PutContainerPolicyOutput`](crate::output::PutContainerPolicyOutput).
        pub fn build(self) -> crate::output::PutContainerPolicyOutput {
            crate::output::PutContainerPolicyOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTagsForResourceOutput {
    /// <p>An array of key:value pairs that are assigned to the container.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    _request_id: Option<String>,
}
impl ListTagsForResourceOutput {
    /// <p>An array of key:value pairs that are assigned to the container.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::model::Tag]> {
        self.tags.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListTagsForResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
pub mod list_tags_for_resource_output {

    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>An array of key:value pairs that are assigned to the container.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input);
            self.tags = Some(v);
            self
        }
        /// <p>An array of key:value pairs that are assigned to the container.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput {
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListContainersOutput {
    /// <p>The names of the containers.</p>
    #[doc(hidden)]
    pub containers: std::option::Option<std::vec::Vec<crate::model::Container>>,
    /// <p> <code>NextToken</code> is the token to use in the next call to <code>ListContainers</code>. This token is returned only if you included the <code>MaxResults</code> tag in the original command, and only if there are still containers to return. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListContainersOutput {
    /// <p>The names of the containers.</p>
    pub fn containers(&self) -> std::option::Option<&[crate::model::Container]> {
        self.containers.as_deref()
    }
    /// <p> <code>NextToken</code> is the token to use in the next call to <code>ListContainers</code>. This token is returned only if you included the <code>MaxResults</code> tag in the original command, and only if there are still containers to return. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListContainersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListContainersOutput {
    /// Creates a new builder-style object to manufacture [`ListContainersOutput`](crate::output::ListContainersOutput).
    pub fn builder() -> crate::output::list_containers_output::Builder {
        crate::output::list_containers_output::Builder::default()
    }
}

/// See [`ListContainersOutput`](crate::output::ListContainersOutput).
pub mod list_containers_output {

    /// A builder for [`ListContainersOutput`](crate::output::ListContainersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) containers: std::option::Option<std::vec::Vec<crate::model::Container>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `containers`.
        ///
        /// To override the contents of this collection use [`set_containers`](Self::set_containers).
        ///
        /// <p>The names of the containers.</p>
        pub fn containers(mut self, input: crate::model::Container) -> Self {
            let mut v = self.containers.unwrap_or_default();
            v.push(input);
            self.containers = Some(v);
            self
        }
        /// <p>The names of the containers.</p>
        pub fn set_containers(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Container>>,
        ) -> Self {
            self.containers = input;
            self
        }
        /// <p> <code>NextToken</code> is the token to use in the next call to <code>ListContainers</code>. This token is returned only if you included the <code>MaxResults</code> tag in the original command, and only if there are still containers to return. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p> <code>NextToken</code> is the token to use in the next call to <code>ListContainers</code>. This token is returned only if you included the <code>MaxResults</code> tag in the original command, and only if there are still containers to return. </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListContainersOutput`](crate::output::ListContainersOutput).
        pub fn build(self) -> crate::output::ListContainersOutput {
            crate::output::ListContainersOutput {
                containers: self.containers,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetMetricPolicyOutput {
    /// <p>The metric policy that is associated with the specific container.</p>
    #[doc(hidden)]
    pub metric_policy: std::option::Option<crate::model::MetricPolicy>,
    _request_id: Option<String>,
}
impl GetMetricPolicyOutput {
    /// <p>The metric policy that is associated with the specific container.</p>
    pub fn metric_policy(&self) -> std::option::Option<&crate::model::MetricPolicy> {
        self.metric_policy.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetMetricPolicyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetMetricPolicyOutput {
    /// Creates a new builder-style object to manufacture [`GetMetricPolicyOutput`](crate::output::GetMetricPolicyOutput).
    pub fn builder() -> crate::output::get_metric_policy_output::Builder {
        crate::output::get_metric_policy_output::Builder::default()
    }
}

/// See [`GetMetricPolicyOutput`](crate::output::GetMetricPolicyOutput).
pub mod get_metric_policy_output {

    /// A builder for [`GetMetricPolicyOutput`](crate::output::GetMetricPolicyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) metric_policy: std::option::Option<crate::model::MetricPolicy>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The metric policy that is associated with the specific container.</p>
        pub fn metric_policy(mut self, input: crate::model::MetricPolicy) -> Self {
            self.metric_policy = Some(input);
            self
        }
        /// <p>The metric policy that is associated with the specific container.</p>
        pub fn set_metric_policy(
            mut self,
            input: std::option::Option<crate::model::MetricPolicy>,
        ) -> Self {
            self.metric_policy = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetMetricPolicyOutput`](crate::output::GetMetricPolicyOutput).
        pub fn build(self) -> crate::output::GetMetricPolicyOutput {
            crate::output::GetMetricPolicyOutput {
                metric_policy: self.metric_policy,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetLifecyclePolicyOutput {
    /// <p>The object lifecycle policy that is assigned to the container.</p>
    #[doc(hidden)]
    pub lifecycle_policy: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetLifecyclePolicyOutput {
    /// <p>The object lifecycle policy that is assigned to the container.</p>
    pub fn lifecycle_policy(&self) -> std::option::Option<&str> {
        self.lifecycle_policy.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetLifecyclePolicyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetLifecyclePolicyOutput {
    /// Creates a new builder-style object to manufacture [`GetLifecyclePolicyOutput`](crate::output::GetLifecyclePolicyOutput).
    pub fn builder() -> crate::output::get_lifecycle_policy_output::Builder {
        crate::output::get_lifecycle_policy_output::Builder::default()
    }
}

/// See [`GetLifecyclePolicyOutput`](crate::output::GetLifecyclePolicyOutput).
pub mod get_lifecycle_policy_output {

    /// A builder for [`GetLifecyclePolicyOutput`](crate::output::GetLifecyclePolicyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) lifecycle_policy: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The object lifecycle policy that is assigned to the container.</p>
        pub fn lifecycle_policy(mut self, input: impl Into<std::string::String>) -> Self {
            self.lifecycle_policy = Some(input.into());
            self
        }
        /// <p>The object lifecycle policy that is assigned to the container.</p>
        pub fn set_lifecycle_policy(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.lifecycle_policy = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetLifecyclePolicyOutput`](crate::output::GetLifecyclePolicyOutput).
        pub fn build(self) -> crate::output::GetLifecyclePolicyOutput {
            crate::output::GetLifecyclePolicyOutput {
                lifecycle_policy: self.lifecycle_policy,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetCorsPolicyOutput {
    /// <p>The CORS policy assigned to the container.</p>
    #[doc(hidden)]
    pub cors_policy: std::option::Option<std::vec::Vec<crate::model::CorsRule>>,
    _request_id: Option<String>,
}
impl GetCorsPolicyOutput {
    /// <p>The CORS policy assigned to the container.</p>
    pub fn cors_policy(&self) -> std::option::Option<&[crate::model::CorsRule]> {
        self.cors_policy.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetCorsPolicyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetCorsPolicyOutput {
    /// Creates a new builder-style object to manufacture [`GetCorsPolicyOutput`](crate::output::GetCorsPolicyOutput).
    pub fn builder() -> crate::output::get_cors_policy_output::Builder {
        crate::output::get_cors_policy_output::Builder::default()
    }
}

/// See [`GetCorsPolicyOutput`](crate::output::GetCorsPolicyOutput).
pub mod get_cors_policy_output {

    /// A builder for [`GetCorsPolicyOutput`](crate::output::GetCorsPolicyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cors_policy: std::option::Option<std::vec::Vec<crate::model::CorsRule>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `cors_policy`.
        ///
        /// To override the contents of this collection use [`set_cors_policy`](Self::set_cors_policy).
        ///
        /// <p>The CORS policy assigned to the container.</p>
        pub fn cors_policy(mut self, input: crate::model::CorsRule) -> Self {
            let mut v = self.cors_policy.unwrap_or_default();
            v.push(input);
            self.cors_policy = Some(v);
            self
        }
        /// <p>The CORS policy assigned to the container.</p>
        pub fn set_cors_policy(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CorsRule>>,
        ) -> Self {
            self.cors_policy = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetCorsPolicyOutput`](crate::output::GetCorsPolicyOutput).
        pub fn build(self) -> crate::output::GetCorsPolicyOutput {
            crate::output::GetCorsPolicyOutput {
                cors_policy: self.cors_policy,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetContainerPolicyOutput {
    /// <p>The contents of the access policy.</p>
    #[doc(hidden)]
    pub policy: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetContainerPolicyOutput {
    /// <p>The contents of the access policy.</p>
    pub fn policy(&self) -> std::option::Option<&str> {
        self.policy.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetContainerPolicyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetContainerPolicyOutput {
    /// Creates a new builder-style object to manufacture [`GetContainerPolicyOutput`](crate::output::GetContainerPolicyOutput).
    pub fn builder() -> crate::output::get_container_policy_output::Builder {
        crate::output::get_container_policy_output::Builder::default()
    }
}

/// See [`GetContainerPolicyOutput`](crate::output::GetContainerPolicyOutput).
pub mod get_container_policy_output {

    /// A builder for [`GetContainerPolicyOutput`](crate::output::GetContainerPolicyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) policy: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The contents of the access policy.</p>
        pub fn policy(mut self, input: impl Into<std::string::String>) -> Self {
            self.policy = Some(input.into());
            self
        }
        /// <p>The contents of the access policy.</p>
        pub fn set_policy(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.policy = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetContainerPolicyOutput`](crate::output::GetContainerPolicyOutput).
        pub fn build(self) -> crate::output::GetContainerPolicyOutput {
            crate::output::GetContainerPolicyOutput {
                policy: self.policy,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeContainerOutput {
    /// <p>The name of the queried container.</p>
    #[doc(hidden)]
    pub container: std::option::Option<crate::model::Container>,
    _request_id: Option<String>,
}
impl DescribeContainerOutput {
    /// <p>The name of the queried container.</p>
    pub fn container(&self) -> std::option::Option<&crate::model::Container> {
        self.container.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeContainerOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeContainerOutput {
    /// Creates a new builder-style object to manufacture [`DescribeContainerOutput`](crate::output::DescribeContainerOutput).
    pub fn builder() -> crate::output::describe_container_output::Builder {
        crate::output::describe_container_output::Builder::default()
    }
}

/// See [`DescribeContainerOutput`](crate::output::DescribeContainerOutput).
pub mod describe_container_output {

    /// A builder for [`DescribeContainerOutput`](crate::output::DescribeContainerOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) container: std::option::Option<crate::model::Container>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The name of the queried container.</p>
        pub fn container(mut self, input: crate::model::Container) -> Self {
            self.container = Some(input);
            self
        }
        /// <p>The name of the queried container.</p>
        pub fn set_container(
            mut self,
            input: std::option::Option<crate::model::Container>,
        ) -> Self {
            self.container = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeContainerOutput`](crate::output::DescribeContainerOutput).
        pub fn build(self) -> crate::output::DescribeContainerOutput {
            crate::output::DescribeContainerOutput {
                container: self.container,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteMetricPolicyOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteMetricPolicyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteMetricPolicyOutput {
    /// Creates a new builder-style object to manufacture [`DeleteMetricPolicyOutput`](crate::output::DeleteMetricPolicyOutput).
    pub fn builder() -> crate::output::delete_metric_policy_output::Builder {
        crate::output::delete_metric_policy_output::Builder::default()
    }
}

/// See [`DeleteMetricPolicyOutput`](crate::output::DeleteMetricPolicyOutput).
pub mod delete_metric_policy_output {

    /// A builder for [`DeleteMetricPolicyOutput`](crate::output::DeleteMetricPolicyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteMetricPolicyOutput`](crate::output::DeleteMetricPolicyOutput).
        pub fn build(self) -> crate::output::DeleteMetricPolicyOutput {
            crate::output::DeleteMetricPolicyOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteLifecyclePolicyOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteLifecyclePolicyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteLifecyclePolicyOutput {
    /// Creates a new builder-style object to manufacture [`DeleteLifecyclePolicyOutput`](crate::output::DeleteLifecyclePolicyOutput).
    pub fn builder() -> crate::output::delete_lifecycle_policy_output::Builder {
        crate::output::delete_lifecycle_policy_output::Builder::default()
    }
}

/// See [`DeleteLifecyclePolicyOutput`](crate::output::DeleteLifecyclePolicyOutput).
pub mod delete_lifecycle_policy_output {

    /// A builder for [`DeleteLifecyclePolicyOutput`](crate::output::DeleteLifecyclePolicyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteLifecyclePolicyOutput`](crate::output::DeleteLifecyclePolicyOutput).
        pub fn build(self) -> crate::output::DeleteLifecyclePolicyOutput {
            crate::output::DeleteLifecyclePolicyOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteCorsPolicyOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteCorsPolicyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteCorsPolicyOutput {
    /// Creates a new builder-style object to manufacture [`DeleteCorsPolicyOutput`](crate::output::DeleteCorsPolicyOutput).
    pub fn builder() -> crate::output::delete_cors_policy_output::Builder {
        crate::output::delete_cors_policy_output::Builder::default()
    }
}

/// See [`DeleteCorsPolicyOutput`](crate::output::DeleteCorsPolicyOutput).
pub mod delete_cors_policy_output {

    /// A builder for [`DeleteCorsPolicyOutput`](crate::output::DeleteCorsPolicyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteCorsPolicyOutput`](crate::output::DeleteCorsPolicyOutput).
        pub fn build(self) -> crate::output::DeleteCorsPolicyOutput {
            crate::output::DeleteCorsPolicyOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteContainerPolicyOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteContainerPolicyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteContainerPolicyOutput {
    /// Creates a new builder-style object to manufacture [`DeleteContainerPolicyOutput`](crate::output::DeleteContainerPolicyOutput).
    pub fn builder() -> crate::output::delete_container_policy_output::Builder {
        crate::output::delete_container_policy_output::Builder::default()
    }
}

/// See [`DeleteContainerPolicyOutput`](crate::output::DeleteContainerPolicyOutput).
pub mod delete_container_policy_output {

    /// A builder for [`DeleteContainerPolicyOutput`](crate::output::DeleteContainerPolicyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteContainerPolicyOutput`](crate::output::DeleteContainerPolicyOutput).
        pub fn build(self) -> crate::output::DeleteContainerPolicyOutput {
            crate::output::DeleteContainerPolicyOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteContainerOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteContainerOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteContainerOutput {
    /// Creates a new builder-style object to manufacture [`DeleteContainerOutput`](crate::output::DeleteContainerOutput).
    pub fn builder() -> crate::output::delete_container_output::Builder {
        crate::output::delete_container_output::Builder::default()
    }
}

/// See [`DeleteContainerOutput`](crate::output::DeleteContainerOutput).
pub mod delete_container_output {

    /// A builder for [`DeleteContainerOutput`](crate::output::DeleteContainerOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteContainerOutput`](crate::output::DeleteContainerOutput).
        pub fn build(self) -> crate::output::DeleteContainerOutput {
            crate::output::DeleteContainerOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateContainerOutput {
    /// <p>ContainerARN: The Amazon Resource Name (ARN) of the newly created container. The ARN has the following format: arn:aws:<region>
    /// :
    /// <account that owns this container>
    /// :container/
    /// <name of container>
    /// . For example: arn:aws:mediastore:us-west-2:111122223333:container/movies
    /// </name>
    /// </account>
    /// </region></p>
    /// <p>ContainerName: The container name as specified in the request.</p>
    /// <p>CreationTime: Unix time stamp.</p>
    /// <p>Status: The status of container creation or deletion. The status is one of the following: <code>CREATING</code>, <code>ACTIVE</code>, or <code>DELETING</code>. While the service is creating the container, the status is <code>CREATING</code>. When an endpoint is available, the status changes to <code>ACTIVE</code>.</p>
    /// <p>The return value does not include the container's endpoint. To make downstream requests, you must obtain this value by using <code>DescribeContainer</code> or <code>ListContainers</code>.</p>
    #[doc(hidden)]
    pub container: std::option::Option<crate::model::Container>,
    _request_id: Option<String>,
}
impl CreateContainerOutput {
    /// <p>ContainerARN: The Amazon Resource Name (ARN) of the newly created container. The ARN has the following format: arn:aws:<region>
    /// :
    /// <account that owns this container>
    /// :container/
    /// <name of container>
    /// . For example: arn:aws:mediastore:us-west-2:111122223333:container/movies
    /// </name>
    /// </account>
    /// </region></p>
    /// <p>ContainerName: The container name as specified in the request.</p>
    /// <p>CreationTime: Unix time stamp.</p>
    /// <p>Status: The status of container creation or deletion. The status is one of the following: <code>CREATING</code>, <code>ACTIVE</code>, or <code>DELETING</code>. While the service is creating the container, the status is <code>CREATING</code>. When an endpoint is available, the status changes to <code>ACTIVE</code>.</p>
    /// <p>The return value does not include the container's endpoint. To make downstream requests, you must obtain this value by using <code>DescribeContainer</code> or <code>ListContainers</code>.</p>
    pub fn container(&self) -> std::option::Option<&crate::model::Container> {
        self.container.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateContainerOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateContainerOutput {
    /// Creates a new builder-style object to manufacture [`CreateContainerOutput`](crate::output::CreateContainerOutput).
    pub fn builder() -> crate::output::create_container_output::Builder {
        crate::output::create_container_output::Builder::default()
    }
}

/// See [`CreateContainerOutput`](crate::output::CreateContainerOutput).
pub mod create_container_output {

    /// A builder for [`CreateContainerOutput`](crate::output::CreateContainerOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) container: std::option::Option<crate::model::Container>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>ContainerARN: The Amazon Resource Name (ARN) of the newly created container. The ARN has the following format: arn:aws:<region>
        /// :
        /// <account that owns this container>
        /// :container/
        /// <name of container>
        /// . For example: arn:aws:mediastore:us-west-2:111122223333:container/movies
        /// </name>
        /// </account>
        /// </region></p>
        /// <p>ContainerName: The container name as specified in the request.</p>
        /// <p>CreationTime: Unix time stamp.</p>
        /// <p>Status: The status of container creation or deletion. The status is one of the following: <code>CREATING</code>, <code>ACTIVE</code>, or <code>DELETING</code>. While the service is creating the container, the status is <code>CREATING</code>. When an endpoint is available, the status changes to <code>ACTIVE</code>.</p>
        /// <p>The return value does not include the container's endpoint. To make downstream requests, you must obtain this value by using <code>DescribeContainer</code> or <code>ListContainers</code>.</p>
        pub fn container(mut self, input: crate::model::Container) -> Self {
            self.container = Some(input);
            self
        }
        /// <p>ContainerARN: The Amazon Resource Name (ARN) of the newly created container. The ARN has the following format: arn:aws:<region>
        /// :
        /// <account that owns this container>
        /// :container/
        /// <name of container>
        /// . For example: arn:aws:mediastore:us-west-2:111122223333:container/movies
        /// </name>
        /// </account>
        /// </region></p>
        /// <p>ContainerName: The container name as specified in the request.</p>
        /// <p>CreationTime: Unix time stamp.</p>
        /// <p>Status: The status of container creation or deletion. The status is one of the following: <code>CREATING</code>, <code>ACTIVE</code>, or <code>DELETING</code>. While the service is creating the container, the status is <code>CREATING</code>. When an endpoint is available, the status changes to <code>ACTIVE</code>.</p>
        /// <p>The return value does not include the container's endpoint. To make downstream requests, you must obtain this value by using <code>DescribeContainer</code> or <code>ListContainers</code>.</p>
        pub fn set_container(
            mut self,
            input: std::option::Option<crate::model::Container>,
        ) -> Self {
            self.container = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateContainerOutput`](crate::output::CreateContainerOutput).
        pub fn build(self) -> crate::output::CreateContainerOutput {
            crate::output::CreateContainerOutput {
                container: self.container,
                _request_id: self._request_id,
            }
        }
    }
}
