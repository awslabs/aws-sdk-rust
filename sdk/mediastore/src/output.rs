// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UntagResourceOutput {}
impl std::fmt::Debug for UntagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UntagResourceOutput");
        formatter.finish()
    }
}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput)
pub mod untag_resource_output {
    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput)
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {}
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TagResourceOutput {}
impl std::fmt::Debug for TagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TagResourceOutput");
        formatter.finish()
    }
}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput)
pub mod tag_resource_output {
    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput)
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {}
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput)
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StopAccessLoggingOutput {}
impl std::fmt::Debug for StopAccessLoggingOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StopAccessLoggingOutput");
        formatter.finish()
    }
}
/// See [`StopAccessLoggingOutput`](crate::output::StopAccessLoggingOutput)
pub mod stop_access_logging_output {
    /// A builder for [`StopAccessLoggingOutput`](crate::output::StopAccessLoggingOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`StopAccessLoggingOutput`](crate::output::StopAccessLoggingOutput)
        pub fn build(self) -> crate::output::StopAccessLoggingOutput {
            crate::output::StopAccessLoggingOutput {}
        }
    }
}
impl StopAccessLoggingOutput {
    /// Creates a new builder-style object to manufacture [`StopAccessLoggingOutput`](crate::output::StopAccessLoggingOutput)
    pub fn builder() -> crate::output::stop_access_logging_output::Builder {
        crate::output::stop_access_logging_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StartAccessLoggingOutput {}
impl std::fmt::Debug for StartAccessLoggingOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StartAccessLoggingOutput");
        formatter.finish()
    }
}
/// See [`StartAccessLoggingOutput`](crate::output::StartAccessLoggingOutput)
pub mod start_access_logging_output {
    /// A builder for [`StartAccessLoggingOutput`](crate::output::StartAccessLoggingOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`StartAccessLoggingOutput`](crate::output::StartAccessLoggingOutput)
        pub fn build(self) -> crate::output::StartAccessLoggingOutput {
            crate::output::StartAccessLoggingOutput {}
        }
    }
}
impl StartAccessLoggingOutput {
    /// Creates a new builder-style object to manufacture [`StartAccessLoggingOutput`](crate::output::StartAccessLoggingOutput)
    pub fn builder() -> crate::output::start_access_logging_output::Builder {
        crate::output::start_access_logging_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutMetricPolicyOutput {}
impl std::fmt::Debug for PutMetricPolicyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutMetricPolicyOutput");
        formatter.finish()
    }
}
/// See [`PutMetricPolicyOutput`](crate::output::PutMetricPolicyOutput)
pub mod put_metric_policy_output {
    /// A builder for [`PutMetricPolicyOutput`](crate::output::PutMetricPolicyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`PutMetricPolicyOutput`](crate::output::PutMetricPolicyOutput)
        pub fn build(self) -> crate::output::PutMetricPolicyOutput {
            crate::output::PutMetricPolicyOutput {}
        }
    }
}
impl PutMetricPolicyOutput {
    /// Creates a new builder-style object to manufacture [`PutMetricPolicyOutput`](crate::output::PutMetricPolicyOutput)
    pub fn builder() -> crate::output::put_metric_policy_output::Builder {
        crate::output::put_metric_policy_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutLifecyclePolicyOutput {}
impl std::fmt::Debug for PutLifecyclePolicyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutLifecyclePolicyOutput");
        formatter.finish()
    }
}
/// See [`PutLifecyclePolicyOutput`](crate::output::PutLifecyclePolicyOutput)
pub mod put_lifecycle_policy_output {
    /// A builder for [`PutLifecyclePolicyOutput`](crate::output::PutLifecyclePolicyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`PutLifecyclePolicyOutput`](crate::output::PutLifecyclePolicyOutput)
        pub fn build(self) -> crate::output::PutLifecyclePolicyOutput {
            crate::output::PutLifecyclePolicyOutput {}
        }
    }
}
impl PutLifecyclePolicyOutput {
    /// Creates a new builder-style object to manufacture [`PutLifecyclePolicyOutput`](crate::output::PutLifecyclePolicyOutput)
    pub fn builder() -> crate::output::put_lifecycle_policy_output::Builder {
        crate::output::put_lifecycle_policy_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutCorsPolicyOutput {}
impl std::fmt::Debug for PutCorsPolicyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutCorsPolicyOutput");
        formatter.finish()
    }
}
/// See [`PutCorsPolicyOutput`](crate::output::PutCorsPolicyOutput)
pub mod put_cors_policy_output {
    /// A builder for [`PutCorsPolicyOutput`](crate::output::PutCorsPolicyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`PutCorsPolicyOutput`](crate::output::PutCorsPolicyOutput)
        pub fn build(self) -> crate::output::PutCorsPolicyOutput {
            crate::output::PutCorsPolicyOutput {}
        }
    }
}
impl PutCorsPolicyOutput {
    /// Creates a new builder-style object to manufacture [`PutCorsPolicyOutput`](crate::output::PutCorsPolicyOutput)
    pub fn builder() -> crate::output::put_cors_policy_output::Builder {
        crate::output::put_cors_policy_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutContainerPolicyOutput {}
impl std::fmt::Debug for PutContainerPolicyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutContainerPolicyOutput");
        formatter.finish()
    }
}
/// See [`PutContainerPolicyOutput`](crate::output::PutContainerPolicyOutput)
pub mod put_container_policy_output {
    /// A builder for [`PutContainerPolicyOutput`](crate::output::PutContainerPolicyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`PutContainerPolicyOutput`](crate::output::PutContainerPolicyOutput)
        pub fn build(self) -> crate::output::PutContainerPolicyOutput {
            crate::output::PutContainerPolicyOutput {}
        }
    }
}
impl PutContainerPolicyOutput {
    /// Creates a new builder-style object to manufacture [`PutContainerPolicyOutput`](crate::output::PutContainerPolicyOutput)
    pub fn builder() -> crate::output::put_container_policy_output::Builder {
        crate::output::put_container_policy_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTagsForResourceOutput {
    /// <p>An array of key:value pairs that are assigned to the container.</p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl std::fmt::Debug for ListTagsForResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTagsForResourceOutput");
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
pub mod list_tags_for_resource_output {
    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>An array of key:value pairs that are assigned to the container.</p>
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        /// <p>An array of key:value pairs that are assigned to the container.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput { tags: self.tags }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListContainersOutput {
    /// <p>The names of the containers.</p>
    pub containers: std::option::Option<std::vec::Vec<crate::model::Container>>,
    /// <p>
    /// <code>NextToken</code> is the token to use in the next call to <code>ListContainers</code>.
    /// This token is returned only if you included the <code>MaxResults</code> tag in the original
    /// command, and only if there are still containers to return. </p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListContainersOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListContainersOutput");
        formatter.field("containers", &self.containers);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListContainersOutput`](crate::output::ListContainersOutput)
pub mod list_containers_output {
    /// A builder for [`ListContainersOutput`](crate::output::ListContainersOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) containers: std::option::Option<std::vec::Vec<crate::model::Container>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `containers`.
        ///
        /// To override the contents of this collection use [`set_containers`](Self::set_containers).
        ///
        /// <p>The names of the containers.</p>
        pub fn containers(mut self, input: impl Into<crate::model::Container>) -> Self {
            let mut v = self.containers.unwrap_or_default();
            v.push(input.into());
            self.containers = Some(v);
            self
        }
        /// <p>The names of the containers.</p>
        pub fn set_containers(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Container>>,
        ) -> Self {
            self.containers = input;
            self
        }
        /// <p>
        /// <code>NextToken</code> is the token to use in the next call to <code>ListContainers</code>.
        /// This token is returned only if you included the <code>MaxResults</code> tag in the original
        /// command, and only if there are still containers to return. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>
        /// <code>NextToken</code> is the token to use in the next call to <code>ListContainers</code>.
        /// This token is returned only if you included the <code>MaxResults</code> tag in the original
        /// command, and only if there are still containers to return. </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListContainersOutput`](crate::output::ListContainersOutput)
        pub fn build(self) -> crate::output::ListContainersOutput {
            crate::output::ListContainersOutput {
                containers: self.containers,
                next_token: self.next_token,
            }
        }
    }
}
impl ListContainersOutput {
    /// Creates a new builder-style object to manufacture [`ListContainersOutput`](crate::output::ListContainersOutput)
    pub fn builder() -> crate::output::list_containers_output::Builder {
        crate::output::list_containers_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetMetricPolicyOutput {
    /// <p>The metric policy that is associated with the specific container.</p>
    pub metric_policy: std::option::Option<crate::model::MetricPolicy>,
}
impl std::fmt::Debug for GetMetricPolicyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetMetricPolicyOutput");
        formatter.field("metric_policy", &self.metric_policy);
        formatter.finish()
    }
}
/// See [`GetMetricPolicyOutput`](crate::output::GetMetricPolicyOutput)
pub mod get_metric_policy_output {
    /// A builder for [`GetMetricPolicyOutput`](crate::output::GetMetricPolicyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) metric_policy: std::option::Option<crate::model::MetricPolicy>,
    }
    impl Builder {
        /// <p>The metric policy that is associated with the specific container.</p>
        pub fn metric_policy(mut self, input: crate::model::MetricPolicy) -> Self {
            self.metric_policy = Some(input);
            self
        }
        /// <p>The metric policy that is associated with the specific container.</p>
        pub fn set_metric_policy(
            mut self,
            input: std::option::Option<crate::model::MetricPolicy>,
        ) -> Self {
            self.metric_policy = input;
            self
        }
        /// Consumes the builder and constructs a [`GetMetricPolicyOutput`](crate::output::GetMetricPolicyOutput)
        pub fn build(self) -> crate::output::GetMetricPolicyOutput {
            crate::output::GetMetricPolicyOutput {
                metric_policy: self.metric_policy,
            }
        }
    }
}
impl GetMetricPolicyOutput {
    /// Creates a new builder-style object to manufacture [`GetMetricPolicyOutput`](crate::output::GetMetricPolicyOutput)
    pub fn builder() -> crate::output::get_metric_policy_output::Builder {
        crate::output::get_metric_policy_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetLifecyclePolicyOutput {
    /// <p>The object lifecycle policy that is assigned to the container.</p>
    pub lifecycle_policy: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for GetLifecyclePolicyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetLifecyclePolicyOutput");
        formatter.field("lifecycle_policy", &self.lifecycle_policy);
        formatter.finish()
    }
}
/// See [`GetLifecyclePolicyOutput`](crate::output::GetLifecyclePolicyOutput)
pub mod get_lifecycle_policy_output {
    /// A builder for [`GetLifecyclePolicyOutput`](crate::output::GetLifecyclePolicyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) lifecycle_policy: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The object lifecycle policy that is assigned to the container.</p>
        pub fn lifecycle_policy(mut self, input: impl Into<std::string::String>) -> Self {
            self.lifecycle_policy = Some(input.into());
            self
        }
        /// <p>The object lifecycle policy that is assigned to the container.</p>
        pub fn set_lifecycle_policy(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.lifecycle_policy = input;
            self
        }
        /// Consumes the builder and constructs a [`GetLifecyclePolicyOutput`](crate::output::GetLifecyclePolicyOutput)
        pub fn build(self) -> crate::output::GetLifecyclePolicyOutput {
            crate::output::GetLifecyclePolicyOutput {
                lifecycle_policy: self.lifecycle_policy,
            }
        }
    }
}
impl GetLifecyclePolicyOutput {
    /// Creates a new builder-style object to manufacture [`GetLifecyclePolicyOutput`](crate::output::GetLifecyclePolicyOutput)
    pub fn builder() -> crate::output::get_lifecycle_policy_output::Builder {
        crate::output::get_lifecycle_policy_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetCorsPolicyOutput {
    /// <p>The CORS policy assigned to the container.</p>
    pub cors_policy: std::option::Option<std::vec::Vec<crate::model::CorsRule>>,
}
impl std::fmt::Debug for GetCorsPolicyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetCorsPolicyOutput");
        formatter.field("cors_policy", &self.cors_policy);
        formatter.finish()
    }
}
/// See [`GetCorsPolicyOutput`](crate::output::GetCorsPolicyOutput)
pub mod get_cors_policy_output {
    /// A builder for [`GetCorsPolicyOutput`](crate::output::GetCorsPolicyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cors_policy: std::option::Option<std::vec::Vec<crate::model::CorsRule>>,
    }
    impl Builder {
        /// Appends an item to `cors_policy`.
        ///
        /// To override the contents of this collection use [`set_cors_policy`](Self::set_cors_policy).
        ///
        /// <p>The CORS policy assigned to the container.</p>
        pub fn cors_policy(mut self, input: impl Into<crate::model::CorsRule>) -> Self {
            let mut v = self.cors_policy.unwrap_or_default();
            v.push(input.into());
            self.cors_policy = Some(v);
            self
        }
        /// <p>The CORS policy assigned to the container.</p>
        pub fn set_cors_policy(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CorsRule>>,
        ) -> Self {
            self.cors_policy = input;
            self
        }
        /// Consumes the builder and constructs a [`GetCorsPolicyOutput`](crate::output::GetCorsPolicyOutput)
        pub fn build(self) -> crate::output::GetCorsPolicyOutput {
            crate::output::GetCorsPolicyOutput {
                cors_policy: self.cors_policy,
            }
        }
    }
}
impl GetCorsPolicyOutput {
    /// Creates a new builder-style object to manufacture [`GetCorsPolicyOutput`](crate::output::GetCorsPolicyOutput)
    pub fn builder() -> crate::output::get_cors_policy_output::Builder {
        crate::output::get_cors_policy_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetContainerPolicyOutput {
    /// <p>The contents of the access policy.</p>
    pub policy: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for GetContainerPolicyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetContainerPolicyOutput");
        formatter.field("policy", &self.policy);
        formatter.finish()
    }
}
/// See [`GetContainerPolicyOutput`](crate::output::GetContainerPolicyOutput)
pub mod get_container_policy_output {
    /// A builder for [`GetContainerPolicyOutput`](crate::output::GetContainerPolicyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) policy: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The contents of the access policy.</p>
        pub fn policy(mut self, input: impl Into<std::string::String>) -> Self {
            self.policy = Some(input.into());
            self
        }
        /// <p>The contents of the access policy.</p>
        pub fn set_policy(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.policy = input;
            self
        }
        /// Consumes the builder and constructs a [`GetContainerPolicyOutput`](crate::output::GetContainerPolicyOutput)
        pub fn build(self) -> crate::output::GetContainerPolicyOutput {
            crate::output::GetContainerPolicyOutput {
                policy: self.policy,
            }
        }
    }
}
impl GetContainerPolicyOutput {
    /// Creates a new builder-style object to manufacture [`GetContainerPolicyOutput`](crate::output::GetContainerPolicyOutput)
    pub fn builder() -> crate::output::get_container_policy_output::Builder {
        crate::output::get_container_policy_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeContainerOutput {
    /// <p>The name of the queried container.</p>
    pub container: std::option::Option<crate::model::Container>,
}
impl std::fmt::Debug for DescribeContainerOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeContainerOutput");
        formatter.field("container", &self.container);
        formatter.finish()
    }
}
/// See [`DescribeContainerOutput`](crate::output::DescribeContainerOutput)
pub mod describe_container_output {
    /// A builder for [`DescribeContainerOutput`](crate::output::DescribeContainerOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) container: std::option::Option<crate::model::Container>,
    }
    impl Builder {
        /// <p>The name of the queried container.</p>
        pub fn container(mut self, input: crate::model::Container) -> Self {
            self.container = Some(input);
            self
        }
        /// <p>The name of the queried container.</p>
        pub fn set_container(
            mut self,
            input: std::option::Option<crate::model::Container>,
        ) -> Self {
            self.container = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeContainerOutput`](crate::output::DescribeContainerOutput)
        pub fn build(self) -> crate::output::DescribeContainerOutput {
            crate::output::DescribeContainerOutput {
                container: self.container,
            }
        }
    }
}
impl DescribeContainerOutput {
    /// Creates a new builder-style object to manufacture [`DescribeContainerOutput`](crate::output::DescribeContainerOutput)
    pub fn builder() -> crate::output::describe_container_output::Builder {
        crate::output::describe_container_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteMetricPolicyOutput {}
impl std::fmt::Debug for DeleteMetricPolicyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteMetricPolicyOutput");
        formatter.finish()
    }
}
/// See [`DeleteMetricPolicyOutput`](crate::output::DeleteMetricPolicyOutput)
pub mod delete_metric_policy_output {
    /// A builder for [`DeleteMetricPolicyOutput`](crate::output::DeleteMetricPolicyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteMetricPolicyOutput`](crate::output::DeleteMetricPolicyOutput)
        pub fn build(self) -> crate::output::DeleteMetricPolicyOutput {
            crate::output::DeleteMetricPolicyOutput {}
        }
    }
}
impl DeleteMetricPolicyOutput {
    /// Creates a new builder-style object to manufacture [`DeleteMetricPolicyOutput`](crate::output::DeleteMetricPolicyOutput)
    pub fn builder() -> crate::output::delete_metric_policy_output::Builder {
        crate::output::delete_metric_policy_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteLifecyclePolicyOutput {}
impl std::fmt::Debug for DeleteLifecyclePolicyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteLifecyclePolicyOutput");
        formatter.finish()
    }
}
/// See [`DeleteLifecyclePolicyOutput`](crate::output::DeleteLifecyclePolicyOutput)
pub mod delete_lifecycle_policy_output {
    /// A builder for [`DeleteLifecyclePolicyOutput`](crate::output::DeleteLifecyclePolicyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteLifecyclePolicyOutput`](crate::output::DeleteLifecyclePolicyOutput)
        pub fn build(self) -> crate::output::DeleteLifecyclePolicyOutput {
            crate::output::DeleteLifecyclePolicyOutput {}
        }
    }
}
impl DeleteLifecyclePolicyOutput {
    /// Creates a new builder-style object to manufacture [`DeleteLifecyclePolicyOutput`](crate::output::DeleteLifecyclePolicyOutput)
    pub fn builder() -> crate::output::delete_lifecycle_policy_output::Builder {
        crate::output::delete_lifecycle_policy_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteCorsPolicyOutput {}
impl std::fmt::Debug for DeleteCorsPolicyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteCorsPolicyOutput");
        formatter.finish()
    }
}
/// See [`DeleteCorsPolicyOutput`](crate::output::DeleteCorsPolicyOutput)
pub mod delete_cors_policy_output {
    /// A builder for [`DeleteCorsPolicyOutput`](crate::output::DeleteCorsPolicyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteCorsPolicyOutput`](crate::output::DeleteCorsPolicyOutput)
        pub fn build(self) -> crate::output::DeleteCorsPolicyOutput {
            crate::output::DeleteCorsPolicyOutput {}
        }
    }
}
impl DeleteCorsPolicyOutput {
    /// Creates a new builder-style object to manufacture [`DeleteCorsPolicyOutput`](crate::output::DeleteCorsPolicyOutput)
    pub fn builder() -> crate::output::delete_cors_policy_output::Builder {
        crate::output::delete_cors_policy_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteContainerPolicyOutput {}
impl std::fmt::Debug for DeleteContainerPolicyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteContainerPolicyOutput");
        formatter.finish()
    }
}
/// See [`DeleteContainerPolicyOutput`](crate::output::DeleteContainerPolicyOutput)
pub mod delete_container_policy_output {
    /// A builder for [`DeleteContainerPolicyOutput`](crate::output::DeleteContainerPolicyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteContainerPolicyOutput`](crate::output::DeleteContainerPolicyOutput)
        pub fn build(self) -> crate::output::DeleteContainerPolicyOutput {
            crate::output::DeleteContainerPolicyOutput {}
        }
    }
}
impl DeleteContainerPolicyOutput {
    /// Creates a new builder-style object to manufacture [`DeleteContainerPolicyOutput`](crate::output::DeleteContainerPolicyOutput)
    pub fn builder() -> crate::output::delete_container_policy_output::Builder {
        crate::output::delete_container_policy_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteContainerOutput {}
impl std::fmt::Debug for DeleteContainerOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteContainerOutput");
        formatter.finish()
    }
}
/// See [`DeleteContainerOutput`](crate::output::DeleteContainerOutput)
pub mod delete_container_output {
    /// A builder for [`DeleteContainerOutput`](crate::output::DeleteContainerOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteContainerOutput`](crate::output::DeleteContainerOutput)
        pub fn build(self) -> crate::output::DeleteContainerOutput {
            crate::output::DeleteContainerOutput {}
        }
    }
}
impl DeleteContainerOutput {
    /// Creates a new builder-style object to manufacture [`DeleteContainerOutput`](crate::output::DeleteContainerOutput)
    pub fn builder() -> crate::output::delete_container_output::Builder {
        crate::output::delete_container_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateContainerOutput {
    /// <p>ContainerARN: The Amazon Resource Name (ARN) of the newly created container. The ARN
    /// has the following format: arn:aws:<region>:<account that owns this
    /// container>:container/<name of container>. For example:
    /// arn:aws:mediastore:us-west-2:111122223333:container/movies </p>
    /// <p>ContainerName: The container name as specified in the request.</p>
    /// <p>CreationTime: Unix time stamp.</p>
    /// <p>Status: The status of container creation or deletion. The status is one of the
    /// following: <code>CREATING</code>, <code>ACTIVE</code>, or <code>DELETING</code>. While the
    /// service is creating the container, the status is <code>CREATING</code>. When an endpoint is
    /// available, the status changes to <code>ACTIVE</code>.</p>
    /// <p>The return value does not include the container's endpoint. To make downstream
    /// requests, you must obtain this value by using <a>DescribeContainer</a> or <a>ListContainers</a>.</p>
    pub container: std::option::Option<crate::model::Container>,
}
impl std::fmt::Debug for CreateContainerOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateContainerOutput");
        formatter.field("container", &self.container);
        formatter.finish()
    }
}
/// See [`CreateContainerOutput`](crate::output::CreateContainerOutput)
pub mod create_container_output {
    /// A builder for [`CreateContainerOutput`](crate::output::CreateContainerOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) container: std::option::Option<crate::model::Container>,
    }
    impl Builder {
        /// <p>ContainerARN: The Amazon Resource Name (ARN) of the newly created container. The ARN
        /// has the following format: arn:aws:<region>:<account that owns this
        /// container>:container/<name of container>. For example:
        /// arn:aws:mediastore:us-west-2:111122223333:container/movies </p>
        /// <p>ContainerName: The container name as specified in the request.</p>
        /// <p>CreationTime: Unix time stamp.</p>
        /// <p>Status: The status of container creation or deletion. The status is one of the
        /// following: <code>CREATING</code>, <code>ACTIVE</code>, or <code>DELETING</code>. While the
        /// service is creating the container, the status is <code>CREATING</code>. When an endpoint is
        /// available, the status changes to <code>ACTIVE</code>.</p>
        /// <p>The return value does not include the container's endpoint. To make downstream
        /// requests, you must obtain this value by using <a>DescribeContainer</a> or <a>ListContainers</a>.</p>
        pub fn container(mut self, input: crate::model::Container) -> Self {
            self.container = Some(input);
            self
        }
        /// <p>ContainerARN: The Amazon Resource Name (ARN) of the newly created container. The ARN
        /// has the following format: arn:aws:<region>:<account that owns this
        /// container>:container/<name of container>. For example:
        /// arn:aws:mediastore:us-west-2:111122223333:container/movies </p>
        /// <p>ContainerName: The container name as specified in the request.</p>
        /// <p>CreationTime: Unix time stamp.</p>
        /// <p>Status: The status of container creation or deletion. The status is one of the
        /// following: <code>CREATING</code>, <code>ACTIVE</code>, or <code>DELETING</code>. While the
        /// service is creating the container, the status is <code>CREATING</code>. When an endpoint is
        /// available, the status changes to <code>ACTIVE</code>.</p>
        /// <p>The return value does not include the container's endpoint. To make downstream
        /// requests, you must obtain this value by using <a>DescribeContainer</a> or <a>ListContainers</a>.</p>
        pub fn set_container(
            mut self,
            input: std::option::Option<crate::model::Container>,
        ) -> Self {
            self.container = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateContainerOutput`](crate::output::CreateContainerOutput)
        pub fn build(self) -> crate::output::CreateContainerOutput {
            crate::output::CreateContainerOutput {
                container: self.container,
            }
        }
    }
}
impl CreateContainerOutput {
    /// Creates a new builder-style object to manufacture [`CreateContainerOutput`](crate::output::CreateContainerOutput)
    pub fn builder() -> crate::output::create_container_output::Builder {
        crate::output::create_container_output::Builder::default()
    }
}
