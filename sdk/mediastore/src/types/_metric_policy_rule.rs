// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A setting that enables metrics at the object level. Each rule contains an object group and an object group name. If the policy includes the MetricPolicyRules parameter, you must include at least one rule. Each metric policy can include up to five rules by default. You can also <a href="https://console.aws.amazon.com/servicequotas/home?region=us-east-1#!/services/mediastore/quotas">request a quota increase</a> to allow up to 300 rules per policy.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MetricPolicyRule {
    /// <p>A path or file name that defines which objects to include in the group. Wildcards (*) are acceptable.</p>
    pub object_group: ::std::string::String,
    /// <p>A name that allows you to refer to the object group.</p>
    pub object_group_name: ::std::string::String,
}
impl MetricPolicyRule {
    /// <p>A path or file name that defines which objects to include in the group. Wildcards (*) are acceptable.</p>
    pub fn object_group(&self) -> &str {
        use std::ops::Deref;
        self.object_group.deref()
    }
    /// <p>A name that allows you to refer to the object group.</p>
    pub fn object_group_name(&self) -> &str {
        use std::ops::Deref;
        self.object_group_name.deref()
    }
}
impl MetricPolicyRule {
    /// Creates a new builder-style object to manufacture [`MetricPolicyRule`](crate::types::MetricPolicyRule).
    pub fn builder() -> crate::types::builders::MetricPolicyRuleBuilder {
        crate::types::builders::MetricPolicyRuleBuilder::default()
    }
}

/// A builder for [`MetricPolicyRule`](crate::types::MetricPolicyRule).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MetricPolicyRuleBuilder {
    pub(crate) object_group: ::std::option::Option<::std::string::String>,
    pub(crate) object_group_name: ::std::option::Option<::std::string::String>,
}
impl MetricPolicyRuleBuilder {
    /// <p>A path or file name that defines which objects to include in the group. Wildcards (*) are acceptable.</p>
    /// This field is required.
    pub fn object_group(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.object_group = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A path or file name that defines which objects to include in the group. Wildcards (*) are acceptable.</p>
    pub fn set_object_group(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.object_group = input;
        self
    }
    /// <p>A path or file name that defines which objects to include in the group. Wildcards (*) are acceptable.</p>
    pub fn get_object_group(&self) -> &::std::option::Option<::std::string::String> {
        &self.object_group
    }
    /// <p>A name that allows you to refer to the object group.</p>
    /// This field is required.
    pub fn object_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.object_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name that allows you to refer to the object group.</p>
    pub fn set_object_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.object_group_name = input;
        self
    }
    /// <p>A name that allows you to refer to the object group.</p>
    pub fn get_object_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.object_group_name
    }
    /// Consumes the builder and constructs a [`MetricPolicyRule`](crate::types::MetricPolicyRule).
    /// This method will fail if any of the following fields are not set:
    /// - [`object_group`](crate::types::builders::MetricPolicyRuleBuilder::object_group)
    /// - [`object_group_name`](crate::types::builders::MetricPolicyRuleBuilder::object_group_name)
    pub fn build(self) -> ::std::result::Result<crate::types::MetricPolicyRule, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MetricPolicyRule {
            object_group: self.object_group.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "object_group",
                    "object_group was not specified but it is required when building MetricPolicyRule",
                )
            })?,
            object_group_name: self.object_group_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "object_group_name",
                    "object_group_name was not specified but it is required when building MetricPolicyRule",
                )
            })?,
        })
    }
}
