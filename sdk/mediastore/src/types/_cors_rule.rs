// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A rule for a CORS policy. You can add up to 100 rules to a CORS policy. If more than one rule applies, the service uses the first applicable rule listed.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CorsRule {
    /// <p>One or more response headers that you want users to be able to access from their applications (for example, from a JavaScript <code>XMLHttpRequest</code> object).</p>
    /// <p>Each CORS rule must have at least one <code>AllowedOrigins</code> element. The string value can include only one wildcard character (*), for example, http://*.example.com. Additionally, you can specify only one wildcard character to allow cross-origin access for all origins.</p>
    #[doc(hidden)]
    pub allowed_origins: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Identifies an HTTP method that the origin that is specified in the rule is allowed to execute.</p>
    /// <p>Each CORS rule must contain at least one <code>AllowedMethods</code> and one <code>AllowedOrigins</code> element.</p>
    #[doc(hidden)]
    pub allowed_methods: std::option::Option<std::vec::Vec<crate::types::MethodName>>,
    /// <p>Specifies which headers are allowed in a preflight <code>OPTIONS</code> request through the <code>Access-Control-Request-Headers</code> header. Each header name that is specified in <code>Access-Control-Request-Headers</code> must have a corresponding entry in the rule. Only the headers that were requested are sent back. </p>
    /// <p>This element can contain only one wildcard character (*).</p>
    #[doc(hidden)]
    pub allowed_headers: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The time in seconds that your browser caches the preflight response for the specified resource.</p>
    /// <p>A CORS rule can have only one <code>MaxAgeSeconds</code> element.</p>
    #[doc(hidden)]
    pub max_age_seconds: i32,
    /// <p>One or more headers in the response that you want users to be able to access from their applications (for example, from a JavaScript <code>XMLHttpRequest</code> object).</p>
    /// <p>This element is optional for each rule.</p>
    #[doc(hidden)]
    pub expose_headers: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl CorsRule {
    /// <p>One or more response headers that you want users to be able to access from their applications (for example, from a JavaScript <code>XMLHttpRequest</code> object).</p>
    /// <p>Each CORS rule must have at least one <code>AllowedOrigins</code> element. The string value can include only one wildcard character (*), for example, http://*.example.com. Additionally, you can specify only one wildcard character to allow cross-origin access for all origins.</p>
    pub fn allowed_origins(&self) -> std::option::Option<&[std::string::String]> {
        self.allowed_origins.as_deref()
    }
    /// <p>Identifies an HTTP method that the origin that is specified in the rule is allowed to execute.</p>
    /// <p>Each CORS rule must contain at least one <code>AllowedMethods</code> and one <code>AllowedOrigins</code> element.</p>
    pub fn allowed_methods(&self) -> std::option::Option<&[crate::types::MethodName]> {
        self.allowed_methods.as_deref()
    }
    /// <p>Specifies which headers are allowed in a preflight <code>OPTIONS</code> request through the <code>Access-Control-Request-Headers</code> header. Each header name that is specified in <code>Access-Control-Request-Headers</code> must have a corresponding entry in the rule. Only the headers that were requested are sent back. </p>
    /// <p>This element can contain only one wildcard character (*).</p>
    pub fn allowed_headers(&self) -> std::option::Option<&[std::string::String]> {
        self.allowed_headers.as_deref()
    }
    /// <p>The time in seconds that your browser caches the preflight response for the specified resource.</p>
    /// <p>A CORS rule can have only one <code>MaxAgeSeconds</code> element.</p>
    pub fn max_age_seconds(&self) -> i32 {
        self.max_age_seconds
    }
    /// <p>One or more headers in the response that you want users to be able to access from their applications (for example, from a JavaScript <code>XMLHttpRequest</code> object).</p>
    /// <p>This element is optional for each rule.</p>
    pub fn expose_headers(&self) -> std::option::Option<&[std::string::String]> {
        self.expose_headers.as_deref()
    }
}
impl CorsRule {
    /// Creates a new builder-style object to manufacture [`CorsRule`](crate::types::CorsRule).
    pub fn builder() -> crate::types::builders::CorsRuleBuilder {
        crate::types::builders::CorsRuleBuilder::default()
    }
}

/// A builder for [`CorsRule`](crate::types::CorsRule).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CorsRuleBuilder {
    pub(crate) allowed_origins: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) allowed_methods: std::option::Option<std::vec::Vec<crate::types::MethodName>>,
    pub(crate) allowed_headers: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) max_age_seconds: std::option::Option<i32>,
    pub(crate) expose_headers: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl CorsRuleBuilder {
    /// Appends an item to `allowed_origins`.
    ///
    /// To override the contents of this collection use [`set_allowed_origins`](Self::set_allowed_origins).
    ///
    /// <p>One or more response headers that you want users to be able to access from their applications (for example, from a JavaScript <code>XMLHttpRequest</code> object).</p>
    /// <p>Each CORS rule must have at least one <code>AllowedOrigins</code> element. The string value can include only one wildcard character (*), for example, http://*.example.com. Additionally, you can specify only one wildcard character to allow cross-origin access for all origins.</p>
    pub fn allowed_origins(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.allowed_origins.unwrap_or_default();
        v.push(input.into());
        self.allowed_origins = Some(v);
        self
    }
    /// <p>One or more response headers that you want users to be able to access from their applications (for example, from a JavaScript <code>XMLHttpRequest</code> object).</p>
    /// <p>Each CORS rule must have at least one <code>AllowedOrigins</code> element. The string value can include only one wildcard character (*), for example, http://*.example.com. Additionally, you can specify only one wildcard character to allow cross-origin access for all origins.</p>
    pub fn set_allowed_origins(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.allowed_origins = input;
        self
    }
    /// Appends an item to `allowed_methods`.
    ///
    /// To override the contents of this collection use [`set_allowed_methods`](Self::set_allowed_methods).
    ///
    /// <p>Identifies an HTTP method that the origin that is specified in the rule is allowed to execute.</p>
    /// <p>Each CORS rule must contain at least one <code>AllowedMethods</code> and one <code>AllowedOrigins</code> element.</p>
    pub fn allowed_methods(mut self, input: crate::types::MethodName) -> Self {
        let mut v = self.allowed_methods.unwrap_or_default();
        v.push(input);
        self.allowed_methods = Some(v);
        self
    }
    /// <p>Identifies an HTTP method that the origin that is specified in the rule is allowed to execute.</p>
    /// <p>Each CORS rule must contain at least one <code>AllowedMethods</code> and one <code>AllowedOrigins</code> element.</p>
    pub fn set_allowed_methods(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::MethodName>>,
    ) -> Self {
        self.allowed_methods = input;
        self
    }
    /// Appends an item to `allowed_headers`.
    ///
    /// To override the contents of this collection use [`set_allowed_headers`](Self::set_allowed_headers).
    ///
    /// <p>Specifies which headers are allowed in a preflight <code>OPTIONS</code> request through the <code>Access-Control-Request-Headers</code> header. Each header name that is specified in <code>Access-Control-Request-Headers</code> must have a corresponding entry in the rule. Only the headers that were requested are sent back. </p>
    /// <p>This element can contain only one wildcard character (*).</p>
    pub fn allowed_headers(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.allowed_headers.unwrap_or_default();
        v.push(input.into());
        self.allowed_headers = Some(v);
        self
    }
    /// <p>Specifies which headers are allowed in a preflight <code>OPTIONS</code> request through the <code>Access-Control-Request-Headers</code> header. Each header name that is specified in <code>Access-Control-Request-Headers</code> must have a corresponding entry in the rule. Only the headers that were requested are sent back. </p>
    /// <p>This element can contain only one wildcard character (*).</p>
    pub fn set_allowed_headers(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.allowed_headers = input;
        self
    }
    /// <p>The time in seconds that your browser caches the preflight response for the specified resource.</p>
    /// <p>A CORS rule can have only one <code>MaxAgeSeconds</code> element.</p>
    pub fn max_age_seconds(mut self, input: i32) -> Self {
        self.max_age_seconds = Some(input);
        self
    }
    /// <p>The time in seconds that your browser caches the preflight response for the specified resource.</p>
    /// <p>A CORS rule can have only one <code>MaxAgeSeconds</code> element.</p>
    pub fn set_max_age_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.max_age_seconds = input;
        self
    }
    /// Appends an item to `expose_headers`.
    ///
    /// To override the contents of this collection use [`set_expose_headers`](Self::set_expose_headers).
    ///
    /// <p>One or more headers in the response that you want users to be able to access from their applications (for example, from a JavaScript <code>XMLHttpRequest</code> object).</p>
    /// <p>This element is optional for each rule.</p>
    pub fn expose_headers(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.expose_headers.unwrap_or_default();
        v.push(input.into());
        self.expose_headers = Some(v);
        self
    }
    /// <p>One or more headers in the response that you want users to be able to access from their applications (for example, from a JavaScript <code>XMLHttpRequest</code> object).</p>
    /// <p>This element is optional for each rule.</p>
    pub fn set_expose_headers(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.expose_headers = input;
        self
    }
    /// Consumes the builder and constructs a [`CorsRule`](crate::types::CorsRule).
    pub fn build(self) -> crate::types::CorsRule {
        crate::types::CorsRule {
            allowed_origins: self.allowed_origins,
            allowed_methods: self.allowed_methods,
            allowed_headers: self.allowed_headers,
            max_age_seconds: self.max_age_seconds.unwrap_or_default(),
            expose_headers: self.expose_headers,
        }
    }
}
