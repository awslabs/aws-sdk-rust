// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateBillingGroupInput {
    /// <p>The Amazon Resource Name (ARN) of the billing group being updated. </p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the billing group. The names must be unique to each billing group. </p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The status of the billing group. Only one of the valid values can be used. </p>
    pub status: ::std::option::Option<crate::types::BillingGroupStatus>,
    /// <p> The preferences and settings that will be used to compute the Amazon Web Services charges for a billing group. </p>
    pub computation_preference: ::std::option::Option<crate::types::ComputationPreference>,
    /// <p>A description of the billing group. </p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Specifies if the billing group has automatic account association (<code>AutoAssociate</code>) enabled.</p>
    pub account_grouping: ::std::option::Option<crate::types::UpdateBillingGroupAccountGrouping>,
}
impl UpdateBillingGroupInput {
    /// <p>The Amazon Resource Name (ARN) of the billing group being updated. </p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the billing group. The names must be unique to each billing group. </p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The status of the billing group. Only one of the valid values can be used. </p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::BillingGroupStatus> {
        self.status.as_ref()
    }
    /// <p> The preferences and settings that will be used to compute the Amazon Web Services charges for a billing group. </p>
    pub fn computation_preference(&self) -> ::std::option::Option<&crate::types::ComputationPreference> {
        self.computation_preference.as_ref()
    }
    /// <p>A description of the billing group. </p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Specifies if the billing group has automatic account association (<code>AutoAssociate</code>) enabled.</p>
    pub fn account_grouping(&self) -> ::std::option::Option<&crate::types::UpdateBillingGroupAccountGrouping> {
        self.account_grouping.as_ref()
    }
}
impl ::std::fmt::Debug for UpdateBillingGroupInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateBillingGroupInput");
        formatter.field("arn", &self.arn);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.field("computation_preference", &self.computation_preference);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("account_grouping", &self.account_grouping);
        formatter.finish()
    }
}
impl UpdateBillingGroupInput {
    /// Creates a new builder-style object to manufacture [`UpdateBillingGroupInput`](crate::operation::update_billing_group::UpdateBillingGroupInput).
    pub fn builder() -> crate::operation::update_billing_group::builders::UpdateBillingGroupInputBuilder {
        crate::operation::update_billing_group::builders::UpdateBillingGroupInputBuilder::default()
    }
}

/// A builder for [`UpdateBillingGroupInput`](crate::operation::update_billing_group::UpdateBillingGroupInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct UpdateBillingGroupInputBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::BillingGroupStatus>,
    pub(crate) computation_preference: ::std::option::Option<crate::types::ComputationPreference>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) account_grouping: ::std::option::Option<crate::types::UpdateBillingGroupAccountGrouping>,
}
impl UpdateBillingGroupInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the billing group being updated. </p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the billing group being updated. </p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the billing group being updated. </p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The name of the billing group. The names must be unique to each billing group. </p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the billing group. The names must be unique to each billing group. </p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the billing group. The names must be unique to each billing group. </p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The status of the billing group. Only one of the valid values can be used. </p>
    pub fn status(mut self, input: crate::types::BillingGroupStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the billing group. Only one of the valid values can be used. </p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::BillingGroupStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the billing group. Only one of the valid values can be used. </p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::BillingGroupStatus> {
        &self.status
    }
    /// <p> The preferences and settings that will be used to compute the Amazon Web Services charges for a billing group. </p>
    pub fn computation_preference(mut self, input: crate::types::ComputationPreference) -> Self {
        self.computation_preference = ::std::option::Option::Some(input);
        self
    }
    /// <p> The preferences and settings that will be used to compute the Amazon Web Services charges for a billing group. </p>
    pub fn set_computation_preference(mut self, input: ::std::option::Option<crate::types::ComputationPreference>) -> Self {
        self.computation_preference = input;
        self
    }
    /// <p> The preferences and settings that will be used to compute the Amazon Web Services charges for a billing group. </p>
    pub fn get_computation_preference(&self) -> &::std::option::Option<crate::types::ComputationPreference> {
        &self.computation_preference
    }
    /// <p>A description of the billing group. </p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the billing group. </p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the billing group. </p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Specifies if the billing group has automatic account association (<code>AutoAssociate</code>) enabled.</p>
    pub fn account_grouping(mut self, input: crate::types::UpdateBillingGroupAccountGrouping) -> Self {
        self.account_grouping = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies if the billing group has automatic account association (<code>AutoAssociate</code>) enabled.</p>
    pub fn set_account_grouping(mut self, input: ::std::option::Option<crate::types::UpdateBillingGroupAccountGrouping>) -> Self {
        self.account_grouping = input;
        self
    }
    /// <p>Specifies if the billing group has automatic account association (<code>AutoAssociate</code>) enabled.</p>
    pub fn get_account_grouping(&self) -> &::std::option::Option<crate::types::UpdateBillingGroupAccountGrouping> {
        &self.account_grouping
    }
    /// Consumes the builder and constructs a [`UpdateBillingGroupInput`](crate::operation::update_billing_group::UpdateBillingGroupInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_billing_group::UpdateBillingGroupInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_billing_group::UpdateBillingGroupInput {
            arn: self.arn,
            name: self.name,
            status: self.status,
            computation_preference: self.computation_preference,
            description: self.description,
            account_grouping: self.account_grouping,
        })
    }
}
impl ::std::fmt::Debug for UpdateBillingGroupInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateBillingGroupInputBuilder");
        formatter.field("arn", &self.arn);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.field("computation_preference", &self.computation_preference);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("account_grouping", &self.account_grouping);
        formatter.finish()
    }
}
