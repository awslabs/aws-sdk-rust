// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateBillingGroupInput {
    /// <p>The Amazon Resource Name (ARN) of the billing group being updated. </p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The name of the billing group. The names must be unique to each billing group. </p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The status of the billing group. Only one of the valid values can be used. </p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::BillingGroupStatus>,
    /// <p> The preferences and settings that will be used to compute the Amazon Web Services charges for a billing group. </p>
    #[doc(hidden)]
    pub computation_preference: std::option::Option<crate::types::ComputationPreference>,
    /// <p>A description of the billing group. </p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
}
impl UpdateBillingGroupInput {
    /// <p>The Amazon Resource Name (ARN) of the billing group being updated. </p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the billing group. The names must be unique to each billing group. </p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The status of the billing group. Only one of the valid values can be used. </p>
    pub fn status(&self) -> std::option::Option<&crate::types::BillingGroupStatus> {
        self.status.as_ref()
    }
    /// <p> The preferences and settings that will be used to compute the Amazon Web Services charges for a billing group. </p>
    pub fn computation_preference(
        &self,
    ) -> std::option::Option<&crate::types::ComputationPreference> {
        self.computation_preference.as_ref()
    }
    /// <p>A description of the billing group. </p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl std::fmt::Debug for UpdateBillingGroupInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateBillingGroupInput");
        formatter.field("arn", &self.arn);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.field("computation_preference", &self.computation_preference);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl UpdateBillingGroupInput {
    /// Creates a new builder-style object to manufacture [`UpdateBillingGroupInput`](crate::operation::update_billing_group::UpdateBillingGroupInput).
    pub fn builder(
    ) -> crate::operation::update_billing_group::builders::UpdateBillingGroupInputBuilder {
        crate::operation::update_billing_group::builders::UpdateBillingGroupInputBuilder::default()
    }
}

/// A builder for [`UpdateBillingGroupInput`](crate::operation::update_billing_group::UpdateBillingGroupInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct UpdateBillingGroupInputBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::BillingGroupStatus>,
    pub(crate) computation_preference: std::option::Option<crate::types::ComputationPreference>,
    pub(crate) description: std::option::Option<std::string::String>,
}
impl UpdateBillingGroupInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the billing group being updated. </p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the billing group being updated. </p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The name of the billing group. The names must be unique to each billing group. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the billing group. The names must be unique to each billing group. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The status of the billing group. Only one of the valid values can be used. </p>
    pub fn status(mut self, input: crate::types::BillingGroupStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the billing group. Only one of the valid values can be used. </p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::BillingGroupStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p> The preferences and settings that will be used to compute the Amazon Web Services charges for a billing group. </p>
    pub fn computation_preference(mut self, input: crate::types::ComputationPreference) -> Self {
        self.computation_preference = Some(input);
        self
    }
    /// <p> The preferences and settings that will be used to compute the Amazon Web Services charges for a billing group. </p>
    pub fn set_computation_preference(
        mut self,
        input: std::option::Option<crate::types::ComputationPreference>,
    ) -> Self {
        self.computation_preference = input;
        self
    }
    /// <p>A description of the billing group. </p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the billing group. </p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateBillingGroupInput`](crate::operation::update_billing_group::UpdateBillingGroupInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_billing_group::UpdateBillingGroupInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_billing_group::UpdateBillingGroupInput {
                arn: self.arn,
                name: self.name,
                status: self.status,
                computation_preference: self.computation_preference,
                description: self.description,
            },
        )
    }
}
impl std::fmt::Debug for UpdateBillingGroupInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateBillingGroupInputBuilder");
        formatter.field("arn", &self.arn);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.field("computation_preference", &self.computation_preference);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
