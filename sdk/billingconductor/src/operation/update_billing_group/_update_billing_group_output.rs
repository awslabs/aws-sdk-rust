// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateBillingGroupOutput {
    /// <p>The Amazon Resource Name (ARN) of the billing group that was updated. </p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p> The name of the billing group. The names must be unique to each billing group. </p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p> A description of the billing group. </p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p> The account ID that serves as the main account in a billing group. </p>
    #[doc(hidden)]
    pub primary_account_id: std::option::Option<std::string::String>,
    /// <p> The Amazon Resource Name (ARN) of the pricing plan to compute Amazon Web Services charges for the billing group. </p>
    #[doc(hidden)]
    pub pricing_plan_arn: std::option::Option<std::string::String>,
    /// <p> The number of accounts in the particular billing group. </p>
    #[doc(hidden)]
    pub size: i64,
    /// <p> The most recent time when the billing group was modified. </p>
    #[doc(hidden)]
    pub last_modified_time: i64,
    /// <p> The status of the billing group. Only one of the valid values can be used. </p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::BillingGroupStatus>,
    /// <p> The reason why the billing group is in its current status. </p>
    #[doc(hidden)]
    pub status_reason: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateBillingGroupOutput {
    /// <p>The Amazon Resource Name (ARN) of the billing group that was updated. </p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p> The name of the billing group. The names must be unique to each billing group. </p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p> A description of the billing group. </p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p> The account ID that serves as the main account in a billing group. </p>
    pub fn primary_account_id(&self) -> std::option::Option<&str> {
        self.primary_account_id.as_deref()
    }
    /// <p> The Amazon Resource Name (ARN) of the pricing plan to compute Amazon Web Services charges for the billing group. </p>
    pub fn pricing_plan_arn(&self) -> std::option::Option<&str> {
        self.pricing_plan_arn.as_deref()
    }
    /// <p> The number of accounts in the particular billing group. </p>
    pub fn size(&self) -> i64 {
        self.size
    }
    /// <p> The most recent time when the billing group was modified. </p>
    pub fn last_modified_time(&self) -> i64 {
        self.last_modified_time
    }
    /// <p> The status of the billing group. Only one of the valid values can be used. </p>
    pub fn status(&self) -> std::option::Option<&crate::types::BillingGroupStatus> {
        self.status.as_ref()
    }
    /// <p> The reason why the billing group is in its current status. </p>
    pub fn status_reason(&self) -> std::option::Option<&str> {
        self.status_reason.as_deref()
    }
}
impl std::fmt::Debug for UpdateBillingGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateBillingGroupOutput");
        formatter.field("arn", &self.arn);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("primary_account_id", &self.primary_account_id);
        formatter.field("pricing_plan_arn", &self.pricing_plan_arn);
        formatter.field("size", &self.size);
        formatter.field("last_modified_time", &self.last_modified_time);
        formatter.field("status", &self.status);
        formatter.field("status_reason", &self.status_reason);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl aws_http::request_id::RequestId for UpdateBillingGroupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateBillingGroupOutput {
    /// Creates a new builder-style object to manufacture [`UpdateBillingGroupOutput`](crate::operation::update_billing_group::UpdateBillingGroupOutput).
    pub fn builder(
    ) -> crate::operation::update_billing_group::builders::UpdateBillingGroupOutputBuilder {
        crate::operation::update_billing_group::builders::UpdateBillingGroupOutputBuilder::default()
    }
}

/// A builder for [`UpdateBillingGroupOutput`](crate::operation::update_billing_group::UpdateBillingGroupOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct UpdateBillingGroupOutputBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) primary_account_id: std::option::Option<std::string::String>,
    pub(crate) pricing_plan_arn: std::option::Option<std::string::String>,
    pub(crate) size: std::option::Option<i64>,
    pub(crate) last_modified_time: std::option::Option<i64>,
    pub(crate) status: std::option::Option<crate::types::BillingGroupStatus>,
    pub(crate) status_reason: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateBillingGroupOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the billing group that was updated. </p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the billing group that was updated. </p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p> The name of the billing group. The names must be unique to each billing group. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p> The name of the billing group. The names must be unique to each billing group. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p> A description of the billing group. </p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p> A description of the billing group. </p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p> The account ID that serves as the main account in a billing group. </p>
    pub fn primary_account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.primary_account_id = Some(input.into());
        self
    }
    /// <p> The account ID that serves as the main account in a billing group. </p>
    pub fn set_primary_account_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.primary_account_id = input;
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the pricing plan to compute Amazon Web Services charges for the billing group. </p>
    pub fn pricing_plan_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.pricing_plan_arn = Some(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the pricing plan to compute Amazon Web Services charges for the billing group. </p>
    pub fn set_pricing_plan_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.pricing_plan_arn = input;
        self
    }
    /// <p> The number of accounts in the particular billing group. </p>
    pub fn size(mut self, input: i64) -> Self {
        self.size = Some(input);
        self
    }
    /// <p> The number of accounts in the particular billing group. </p>
    pub fn set_size(mut self, input: std::option::Option<i64>) -> Self {
        self.size = input;
        self
    }
    /// <p> The most recent time when the billing group was modified. </p>
    pub fn last_modified_time(mut self, input: i64) -> Self {
        self.last_modified_time = Some(input);
        self
    }
    /// <p> The most recent time when the billing group was modified. </p>
    pub fn set_last_modified_time(mut self, input: std::option::Option<i64>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p> The status of the billing group. Only one of the valid values can be used. </p>
    pub fn status(mut self, input: crate::types::BillingGroupStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p> The status of the billing group. Only one of the valid values can be used. </p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::BillingGroupStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p> The reason why the billing group is in its current status. </p>
    pub fn status_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_reason = Some(input.into());
        self
    }
    /// <p> The reason why the billing group is in its current status. </p>
    pub fn set_status_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateBillingGroupOutput`](crate::operation::update_billing_group::UpdateBillingGroupOutput).
    pub fn build(self) -> crate::operation::update_billing_group::UpdateBillingGroupOutput {
        crate::operation::update_billing_group::UpdateBillingGroupOutput {
            arn: self.arn,
            name: self.name,
            description: self.description,
            primary_account_id: self.primary_account_id,
            pricing_plan_arn: self.pricing_plan_arn,
            size: self.size.unwrap_or_default(),
            last_modified_time: self.last_modified_time.unwrap_or_default(),
            status: self.status,
            status_reason: self.status_reason,
            _request_id: self._request_id,
        }
    }
}
impl std::fmt::Debug for UpdateBillingGroupOutputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateBillingGroupOutputBuilder");
        formatter.field("arn", &self.arn);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("primary_account_id", &self.primary_account_id);
        formatter.field("pricing_plan_arn", &self.pricing_plan_arn);
        formatter.field("size", &self.size);
        formatter.field("last_modified_time", &self.last_modified_time);
        formatter.field("status", &self.status);
        formatter.field("status_reason", &self.status_reason);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
