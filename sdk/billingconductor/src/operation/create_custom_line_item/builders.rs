// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_custom_line_item::_create_custom_line_item_output::CreateCustomLineItemOutputBuilder;

pub use crate::operation::create_custom_line_item::_create_custom_line_item_input::CreateCustomLineItemInputBuilder;

impl crate::operation::create_custom_line_item::builders::CreateCustomLineItemInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_custom_line_item::CreateCustomLineItemOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_custom_line_item::CreateCustomLineItemError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_custom_line_item();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateCustomLineItem`.
///
/// <p>Creates a custom line item that can be used to create a one-time fixed charge that can be applied to a single billing group for the current or previous billing period. The one-time fixed charge is either a fee or discount.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateCustomLineItemFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_custom_line_item::builders::CreateCustomLineItemInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_custom_line_item::CreateCustomLineItemOutput,
        crate::operation::create_custom_line_item::CreateCustomLineItemError,
    > for CreateCustomLineItemFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_custom_line_item::CreateCustomLineItemOutput,
            crate::operation::create_custom_line_item::CreateCustomLineItemError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateCustomLineItemFluentBuilder {
    /// Creates a new `CreateCustomLineItem`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateCustomLineItem as a reference.
    pub fn as_input(&self) -> &crate::operation::create_custom_line_item::builders::CreateCustomLineItemInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_custom_line_item::CreateCustomLineItemOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_custom_line_item::CreateCustomLineItemError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_custom_line_item::CreateCustomLineItem::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_custom_line_item::CreateCustomLineItem::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_custom_line_item::CreateCustomLineItemOutput,
        crate::operation::create_custom_line_item::CreateCustomLineItemError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The token that is needed to support idempotency. Idempotency isn't currently supported, but will be implemented in a future update.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>The token that is needed to support idempotency. Idempotency isn't currently supported, but will be implemented in a future update.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>The token that is needed to support idempotency. Idempotency isn't currently supported, but will be implemented in a future update.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
    /// <p>The name of the custom line item.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the custom line item.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The name of the custom line item.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    /// <p>The description of the custom line item. This is shown on the Bills page in association with the charge value.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The description of the custom line item. This is shown on the Bills page in association with the charge value.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The description of the custom line item. This is shown on the Bills page in association with the charge value.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    /// <p>The Amazon Resource Name (ARN) that references the billing group where the custom line item applies to.</p>
    pub fn billing_group_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.billing_group_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that references the billing group where the custom line item applies to.</p>
    pub fn set_billing_group_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_billing_group_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) that references the billing group where the custom line item applies to.</p>
    pub fn get_billing_group_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_billing_group_arn()
    }
    /// <p>A time range for which the custom line item is effective.</p>
    pub fn billing_period_range(mut self, input: crate::types::CustomLineItemBillingPeriodRange) -> Self {
        self.inner = self.inner.billing_period_range(input);
        self
    }
    /// <p>A time range for which the custom line item is effective.</p>
    pub fn set_billing_period_range(mut self, input: ::std::option::Option<crate::types::CustomLineItemBillingPeriodRange>) -> Self {
        self.inner = self.inner.set_billing_period_range(input);
        self
    }
    /// <p>A time range for which the custom line item is effective.</p>
    pub fn get_billing_period_range(&self) -> &::std::option::Option<crate::types::CustomLineItemBillingPeriodRange> {
        self.inner.get_billing_period_range()
    }
    ///
    /// Adds a key-value pair to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A map that contains tag keys and tag values that are attached to a custom line item.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>A map that contains tag keys and tag values that are attached to a custom line item.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>A map that contains tag keys and tag values that are attached to a custom line item.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_tags()
    }
    /// <p>A <code>CustomLineItemChargeDetails</code> that describes the charge details for a custom line item.</p>
    pub fn charge_details(mut self, input: crate::types::CustomLineItemChargeDetails) -> Self {
        self.inner = self.inner.charge_details(input);
        self
    }
    /// <p>A <code>CustomLineItemChargeDetails</code> that describes the charge details for a custom line item.</p>
    pub fn set_charge_details(mut self, input: ::std::option::Option<crate::types::CustomLineItemChargeDetails>) -> Self {
        self.inner = self.inner.set_charge_details(input);
        self
    }
    /// <p>A <code>CustomLineItemChargeDetails</code> that describes the charge details for a custom line item.</p>
    pub fn get_charge_details(&self) -> &::std::option::Option<crate::types::CustomLineItemChargeDetails> {
        self.inner.get_charge_details()
    }
    /// <p>The Amazon Web Services account in which this custom line item will be applied to.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.account_id(input.into());
        self
    }
    /// <p>The Amazon Web Services account in which this custom line item will be applied to.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_account_id(input);
        self
    }
    /// <p>The Amazon Web Services account in which this custom line item will be applied to.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_account_id()
    }
}
