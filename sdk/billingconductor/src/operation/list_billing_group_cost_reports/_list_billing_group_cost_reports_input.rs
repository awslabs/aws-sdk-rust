// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListBillingGroupCostReportsInput {
    /// <p>The preferred billing period for your report. </p>
    pub billing_period: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of reports to retrieve. </p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The pagination token that's used on subsequent calls to get reports. </p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>A <code>ListBillingGroupCostReportsFilter</code> to specify billing groups to retrieve reports from. </p>
    pub filters: ::std::option::Option<crate::types::ListBillingGroupCostReportsFilter>,
}
impl ListBillingGroupCostReportsInput {
    /// <p>The preferred billing period for your report. </p>
    pub fn billing_period(&self) -> ::std::option::Option<&str> {
        self.billing_period.as_deref()
    }
    /// <p>The maximum number of reports to retrieve. </p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The pagination token that's used on subsequent calls to get reports. </p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>A <code>ListBillingGroupCostReportsFilter</code> to specify billing groups to retrieve reports from. </p>
    pub fn filters(&self) -> ::std::option::Option<&crate::types::ListBillingGroupCostReportsFilter> {
        self.filters.as_ref()
    }
}
impl ListBillingGroupCostReportsInput {
    /// Creates a new builder-style object to manufacture [`ListBillingGroupCostReportsInput`](crate::operation::list_billing_group_cost_reports::ListBillingGroupCostReportsInput).
    pub fn builder() -> crate::operation::list_billing_group_cost_reports::builders::ListBillingGroupCostReportsInputBuilder {
        crate::operation::list_billing_group_cost_reports::builders::ListBillingGroupCostReportsInputBuilder::default()
    }
}

/// A builder for [`ListBillingGroupCostReportsInput`](crate::operation::list_billing_group_cost_reports::ListBillingGroupCostReportsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListBillingGroupCostReportsInputBuilder {
    pub(crate) billing_period: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) filters: ::std::option::Option<crate::types::ListBillingGroupCostReportsFilter>,
}
impl ListBillingGroupCostReportsInputBuilder {
    /// <p>The preferred billing period for your report. </p>
    pub fn billing_period(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.billing_period = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The preferred billing period for your report. </p>
    pub fn set_billing_period(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.billing_period = input;
        self
    }
    /// <p>The preferred billing period for your report. </p>
    pub fn get_billing_period(&self) -> &::std::option::Option<::std::string::String> {
        &self.billing_period
    }
    /// <p>The maximum number of reports to retrieve. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of reports to retrieve. </p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of reports to retrieve. </p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The pagination token that's used on subsequent calls to get reports. </p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pagination token that's used on subsequent calls to get reports. </p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The pagination token that's used on subsequent calls to get reports. </p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>A <code>ListBillingGroupCostReportsFilter</code> to specify billing groups to retrieve reports from. </p>
    pub fn filters(mut self, input: crate::types::ListBillingGroupCostReportsFilter) -> Self {
        self.filters = ::std::option::Option::Some(input);
        self
    }
    /// <p>A <code>ListBillingGroupCostReportsFilter</code> to specify billing groups to retrieve reports from. </p>
    pub fn set_filters(mut self, input: ::std::option::Option<crate::types::ListBillingGroupCostReportsFilter>) -> Self {
        self.filters = input;
        self
    }
    /// <p>A <code>ListBillingGroupCostReportsFilter</code> to specify billing groups to retrieve reports from. </p>
    pub fn get_filters(&self) -> &::std::option::Option<crate::types::ListBillingGroupCostReportsFilter> {
        &self.filters
    }
    /// Consumes the builder and constructs a [`ListBillingGroupCostReportsInput`](crate::operation::list_billing_group_cost_reports::ListBillingGroupCostReportsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_billing_group_cost_reports::ListBillingGroupCostReportsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_billing_group_cost_reports::ListBillingGroupCostReportsInput {
            billing_period: self.billing_period,
            max_results: self.max_results,
            next_token: self.next_token,
            filters: self.filters,
        })
    }
}
