// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_account_associations::_list_account_associations_output::ListAccountAssociationsOutputBuilder;

pub use crate::operation::list_account_associations::_list_account_associations_input::ListAccountAssociationsInputBuilder;

impl crate::operation::list_account_associations::builders::ListAccountAssociationsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::list_account_associations::ListAccountAssociationsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_account_associations::ListAccountAssociationsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.list_account_associations();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ListAccountAssociations`.
///
/// <p>This is a paginated call to list linked accounts that are linked to the payer account for the specified time period. If no information is provided, the current billing period is used. The response will optionally include the billing group that's associated with the linked account.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ListAccountAssociationsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_account_associations::builders::ListAccountAssociationsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::list_account_associations::ListAccountAssociationsOutput,
        crate::operation::list_account_associations::ListAccountAssociationsError,
    > for ListAccountAssociationsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::list_account_associations::ListAccountAssociationsOutput,
            crate::operation::list_account_associations::ListAccountAssociationsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ListAccountAssociationsFluentBuilder {
    /// Creates a new `ListAccountAssociations`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ListAccountAssociations as a reference.
    pub fn as_input(&self) -> &crate::operation::list_account_associations::builders::ListAccountAssociationsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_account_associations::ListAccountAssociationsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_account_associations::ListAccountAssociationsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::list_account_associations::ListAccountAssociations::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::list_account_associations::ListAccountAssociations::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::list_account_associations::ListAccountAssociationsOutput,
        crate::operation::list_account_associations::ListAccountAssociationsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_account_associations::paginator::ListAccountAssociationsPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(self) -> crate::operation::list_account_associations::paginator::ListAccountAssociationsPaginator {
        crate::operation::list_account_associations::paginator::ListAccountAssociationsPaginator::new(self.handle, self.inner)
    }
    /// <p>The preferred billing period to get account associations.</p>
    pub fn billing_period(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.billing_period(input.into());
        self
    }
    /// <p>The preferred billing period to get account associations.</p>
    pub fn set_billing_period(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_billing_period(input);
        self
    }
    /// <p>The preferred billing period to get account associations.</p>
    pub fn get_billing_period(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_billing_period()
    }
    /// <p>The filter on the account ID of the linked account, or any of the following:</p>
    /// <p><code>MONITORED</code>: linked accounts that are associated to billing groups.</p>
    /// <p><code>UNMONITORED</code>: linked accounts that aren't associated to billing groups.</p>
    /// <p><code>Billing Group Arn</code>: linked accounts that are associated to the provided billing group Arn.</p>
    pub fn filters(mut self, input: crate::types::ListAccountAssociationsFilter) -> Self {
        self.inner = self.inner.filters(input);
        self
    }
    /// <p>The filter on the account ID of the linked account, or any of the following:</p>
    /// <p><code>MONITORED</code>: linked accounts that are associated to billing groups.</p>
    /// <p><code>UNMONITORED</code>: linked accounts that aren't associated to billing groups.</p>
    /// <p><code>Billing Group Arn</code>: linked accounts that are associated to the provided billing group Arn.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<crate::types::ListAccountAssociationsFilter>) -> Self {
        self.inner = self.inner.set_filters(input);
        self
    }
    /// <p>The filter on the account ID of the linked account, or any of the following:</p>
    /// <p><code>MONITORED</code>: linked accounts that are associated to billing groups.</p>
    /// <p><code>UNMONITORED</code>: linked accounts that aren't associated to billing groups.</p>
    /// <p><code>Billing Group Arn</code>: linked accounts that are associated to the provided billing group Arn.</p>
    pub fn get_filters(&self) -> &::std::option::Option<crate::types::ListAccountAssociationsFilter> {
        self.inner.get_filters()
    }
    /// <p>The pagination token that's used on subsequent calls to retrieve accounts.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The pagination token that's used on subsequent calls to retrieve accounts.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The pagination token that's used on subsequent calls to retrieve accounts.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
}
