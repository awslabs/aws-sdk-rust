// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListAccountAssociationsInput {
    /// <p> The preferred billing period to get account associations. </p>
    #[doc(hidden)]
    pub billing_period: std::option::Option<std::string::String>,
    /// <p>The filter on the account ID of the linked account, or any of the following:</p>
    /// <p> <code>MONITORED</code>: linked accounts that are associated to billing groups.</p>
    /// <p> <code>UNMONITORED</code>: linked accounts that aren't associated to billing groups.</p>
    /// <p> <code>Billing Group Arn</code>: linked accounts that are associated to the provided billing group Arn. </p>
    #[doc(hidden)]
    pub filters: std::option::Option<crate::types::ListAccountAssociationsFilter>,
    /// <p> The pagination token that's used on subsequent calls to retrieve accounts. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListAccountAssociationsInput {
    /// <p> The preferred billing period to get account associations. </p>
    pub fn billing_period(&self) -> std::option::Option<&str> {
        self.billing_period.as_deref()
    }
    /// <p>The filter on the account ID of the linked account, or any of the following:</p>
    /// <p> <code>MONITORED</code>: linked accounts that are associated to billing groups.</p>
    /// <p> <code>UNMONITORED</code>: linked accounts that aren't associated to billing groups.</p>
    /// <p> <code>Billing Group Arn</code>: linked accounts that are associated to the provided billing group Arn. </p>
    pub fn filters(&self) -> std::option::Option<&crate::types::ListAccountAssociationsFilter> {
        self.filters.as_ref()
    }
    /// <p> The pagination token that's used on subsequent calls to retrieve accounts. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListAccountAssociationsInput {
    /// Creates a new builder-style object to manufacture [`ListAccountAssociationsInput`](crate::operation::list_account_associations::ListAccountAssociationsInput).
    pub fn builder(
    ) -> crate::operation::list_account_associations::builders::ListAccountAssociationsInputBuilder
    {
        crate::operation::list_account_associations::builders::ListAccountAssociationsInputBuilder::default()
    }
}

/// A builder for [`ListAccountAssociationsInput`](crate::operation::list_account_associations::ListAccountAssociationsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListAccountAssociationsInputBuilder {
    pub(crate) billing_period: std::option::Option<std::string::String>,
    pub(crate) filters: std::option::Option<crate::types::ListAccountAssociationsFilter>,
    pub(crate) next_token: std::option::Option<std::string::String>,
}
impl ListAccountAssociationsInputBuilder {
    /// <p> The preferred billing period to get account associations. </p>
    pub fn billing_period(mut self, input: impl Into<std::string::String>) -> Self {
        self.billing_period = Some(input.into());
        self
    }
    /// <p> The preferred billing period to get account associations. </p>
    pub fn set_billing_period(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.billing_period = input;
        self
    }
    /// <p>The filter on the account ID of the linked account, or any of the following:</p>
    /// <p> <code>MONITORED</code>: linked accounts that are associated to billing groups.</p>
    /// <p> <code>UNMONITORED</code>: linked accounts that aren't associated to billing groups.</p>
    /// <p> <code>Billing Group Arn</code>: linked accounts that are associated to the provided billing group Arn. </p>
    pub fn filters(mut self, input: crate::types::ListAccountAssociationsFilter) -> Self {
        self.filters = Some(input);
        self
    }
    /// <p>The filter on the account ID of the linked account, or any of the following:</p>
    /// <p> <code>MONITORED</code>: linked accounts that are associated to billing groups.</p>
    /// <p> <code>UNMONITORED</code>: linked accounts that aren't associated to billing groups.</p>
    /// <p> <code>Billing Group Arn</code>: linked accounts that are associated to the provided billing group Arn. </p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<crate::types::ListAccountAssociationsFilter>,
    ) -> Self {
        self.filters = input;
        self
    }
    /// <p> The pagination token that's used on subsequent calls to retrieve accounts. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p> The pagination token that's used on subsequent calls to retrieve accounts. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Consumes the builder and constructs a [`ListAccountAssociationsInput`](crate::operation::list_account_associations::ListAccountAssociationsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_account_associations::ListAccountAssociationsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_account_associations::ListAccountAssociationsInput {
                billing_period: self.billing_period,
                filters: self.filters,
                next_token: self.next_token,
            },
        )
    }
}
