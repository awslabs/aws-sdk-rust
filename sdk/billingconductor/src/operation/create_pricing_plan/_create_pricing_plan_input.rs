// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreatePricingPlanInput {
    /// <p> The token that is needed to support idempotency. Idempotency isn't currently supported, but will be implemented in a future update. </p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The name of the pricing plan. The names must be unique to each pricing plan. </p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the pricing plan. </p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p> A list of Amazon Resource Names (ARNs) that define the pricing plan parameters. </p>
    pub pricing_rule_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p> A map that contains tag keys and tag values that are attached to a pricing plan. </p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreatePricingPlanInput {
    /// <p> The token that is needed to support idempotency. Idempotency isn't currently supported, but will be implemented in a future update. </p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The name of the pricing plan. The names must be unique to each pricing plan. </p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the pricing plan. </p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p> A list of Amazon Resource Names (ARNs) that define the pricing plan parameters. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.pricing_rule_arns.is_none()`.
    pub fn pricing_rule_arns(&self) -> &[::std::string::String] {
        self.pricing_rule_arns.as_deref().unwrap_or_default()
    }
    /// <p> A map that contains tag keys and tag values that are attached to a pricing plan. </p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::std::fmt::Debug for CreatePricingPlanInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreatePricingPlanInput");
        formatter.field("client_token", &self.client_token);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("pricing_rule_arns", &self.pricing_rule_arns);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
impl CreatePricingPlanInput {
    /// Creates a new builder-style object to manufacture [`CreatePricingPlanInput`](crate::operation::create_pricing_plan::CreatePricingPlanInput).
    pub fn builder() -> crate::operation::create_pricing_plan::builders::CreatePricingPlanInputBuilder {
        crate::operation::create_pricing_plan::builders::CreatePricingPlanInputBuilder::default()
    }
}

/// A builder for [`CreatePricingPlanInput`](crate::operation::create_pricing_plan::CreatePricingPlanInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct CreatePricingPlanInputBuilder {
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) pricing_rule_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreatePricingPlanInputBuilder {
    /// <p> The token that is needed to support idempotency. Idempotency isn't currently supported, but will be implemented in a future update. </p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The token that is needed to support idempotency. Idempotency isn't currently supported, but will be implemented in a future update. </p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p> The token that is needed to support idempotency. Idempotency isn't currently supported, but will be implemented in a future update. </p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The name of the pricing plan. The names must be unique to each pricing plan. </p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the pricing plan. The names must be unique to each pricing plan. </p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the pricing plan. The names must be unique to each pricing plan. </p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the pricing plan. </p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the pricing plan. </p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the pricing plan. </p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `pricing_rule_arns`.
    ///
    /// To override the contents of this collection use [`set_pricing_rule_arns`](Self::set_pricing_rule_arns).
    ///
    /// <p> A list of Amazon Resource Names (ARNs) that define the pricing plan parameters. </p>
    pub fn pricing_rule_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.pricing_rule_arns.unwrap_or_default();
        v.push(input.into());
        self.pricing_rule_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p> A list of Amazon Resource Names (ARNs) that define the pricing plan parameters. </p>
    pub fn set_pricing_rule_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.pricing_rule_arns = input;
        self
    }
    /// <p> A list of Amazon Resource Names (ARNs) that define the pricing plan parameters. </p>
    pub fn get_pricing_rule_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.pricing_rule_arns
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p> A map that contains tag keys and tag values that are attached to a pricing plan. </p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p> A map that contains tag keys and tag values that are attached to a pricing plan. </p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p> A map that contains tag keys and tag values that are attached to a pricing plan. </p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreatePricingPlanInput`](crate::operation::create_pricing_plan::CreatePricingPlanInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_pricing_plan::CreatePricingPlanInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_pricing_plan::CreatePricingPlanInput {
            client_token: self.client_token,
            name: self.name,
            description: self.description,
            pricing_rule_arns: self.pricing_rule_arns,
            tags: self.tags,
        })
    }
}
impl ::std::fmt::Debug for CreatePricingPlanInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreatePricingPlanInputBuilder");
        formatter.field("client_token", &self.client_token);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("pricing_rule_arns", &self.pricing_rule_arns);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
