// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_billing_group_cost_report::_get_billing_group_cost_report_output::GetBillingGroupCostReportOutputBuilder;

pub use crate::operation::get_billing_group_cost_report::_get_billing_group_cost_report_input::GetBillingGroupCostReportInputBuilder;

impl crate::operation::get_billing_group_cost_report::builders::GetBillingGroupCostReportInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::get_billing_group_cost_report::GetBillingGroupCostReportOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_billing_group_cost_report::GetBillingGroupCostReportError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.get_billing_group_cost_report();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `GetBillingGroupCostReport`.
///
/// <p>Retrieves the margin summary report, which includes the Amazon Web Services cost and charged amount (pro forma cost) by Amazon Web Service for a specific billing group.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GetBillingGroupCostReportFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_billing_group_cost_report::builders::GetBillingGroupCostReportInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::get_billing_group_cost_report::GetBillingGroupCostReportOutput,
        crate::operation::get_billing_group_cost_report::GetBillingGroupCostReportError,
    > for GetBillingGroupCostReportFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::get_billing_group_cost_report::GetBillingGroupCostReportOutput,
            crate::operation::get_billing_group_cost_report::GetBillingGroupCostReportError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl GetBillingGroupCostReportFluentBuilder {
    /// Creates a new `GetBillingGroupCostReport`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the GetBillingGroupCostReport as a reference.
    pub fn as_input(&self) -> &crate::operation::get_billing_group_cost_report::builders::GetBillingGroupCostReportInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_billing_group_cost_report::GetBillingGroupCostReportOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_billing_group_cost_report::GetBillingGroupCostReportError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::get_billing_group_cost_report::GetBillingGroupCostReport::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::get_billing_group_cost_report::GetBillingGroupCostReport::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::get_billing_group_cost_report::GetBillingGroupCostReportOutput,
        crate::operation::get_billing_group_cost_report::GetBillingGroupCostReportError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::get_billing_group_cost_report::paginator::GetBillingGroupCostReportPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(self) -> crate::operation::get_billing_group_cost_report::paginator::GetBillingGroupCostReportPaginator {
        crate::operation::get_billing_group_cost_report::paginator::GetBillingGroupCostReportPaginator::new(self.handle, self.inner)
    }
    /// <p>The Amazon Resource Number (ARN) that uniquely identifies the billing group.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.arn(input.into());
        self
    }
    /// <p>The Amazon Resource Number (ARN) that uniquely identifies the billing group.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_arn(input);
        self
    }
    /// <p>The Amazon Resource Number (ARN) that uniquely identifies the billing group.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_arn()
    }
    /// <p>A time range for which the margin summary is effective. You can specify up to 12 months.</p>
    pub fn billing_period_range(mut self, input: crate::types::BillingPeriodRange) -> Self {
        self.inner = self.inner.billing_period_range(input);
        self
    }
    /// <p>A time range for which the margin summary is effective. You can specify up to 12 months.</p>
    pub fn set_billing_period_range(mut self, input: ::std::option::Option<crate::types::BillingPeriodRange>) -> Self {
        self.inner = self.inner.set_billing_period_range(input);
        self
    }
    /// <p>A time range for which the margin summary is effective. You can specify up to 12 months.</p>
    pub fn get_billing_period_range(&self) -> &::std::option::Option<crate::types::BillingPeriodRange> {
        self.inner.get_billing_period_range()
    }
    ///
    /// Appends an item to `GroupBy`.
    ///
    /// To override the contents of this collection use [`set_group_by`](Self::set_group_by).
    ///
    /// <p>A list of strings that specify the attributes that are used to break down costs in the margin summary reports for the billing group. For example, you can view your costs by the Amazon Web Service name or the billing period.</p>
    pub fn group_by(mut self, input: crate::types::GroupByAttributeName) -> Self {
        self.inner = self.inner.group_by(input);
        self
    }
    /// <p>A list of strings that specify the attributes that are used to break down costs in the margin summary reports for the billing group. For example, you can view your costs by the Amazon Web Service name or the billing period.</p>
    pub fn set_group_by(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GroupByAttributeName>>) -> Self {
        self.inner = self.inner.set_group_by(input);
        self
    }
    /// <p>A list of strings that specify the attributes that are used to break down costs in the margin summary reports for the billing group. For example, you can view your costs by the Amazon Web Service name or the billing period.</p>
    pub fn get_group_by(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GroupByAttributeName>> {
        self.inner.get_group_by()
    }
    /// <p>The maximum number of margin summary reports to retrieve.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of margin summary reports to retrieve.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The maximum number of margin summary reports to retrieve.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
    /// <p>The pagination token used on subsequent calls to get reports.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The pagination token used on subsequent calls to get reports.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The pagination token used on subsequent calls to get reports.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
}
