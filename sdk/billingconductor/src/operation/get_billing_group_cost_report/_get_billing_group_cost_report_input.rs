// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetBillingGroupCostReportInput {
    /// <p>The Amazon Resource Number (ARN) that uniquely identifies the billing group.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>A time range for which the margin summary is effective. You can specify up to 12 months.</p>
    pub billing_period_range: ::std::option::Option<crate::types::BillingPeriodRange>,
    /// <p>A list of strings that specify the attributes that are used to break down costs in the margin summary reports for the billing group. For example, you can view your costs by the Amazon Web Services service name or the billing period.</p>
    pub group_by: ::std::option::Option<::std::vec::Vec<crate::types::GroupByAttributeName>>,
    /// <p>The maximum number of margin summary reports to retrieve.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The pagination token used on subsequent calls to get reports.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl GetBillingGroupCostReportInput {
    /// <p>The Amazon Resource Number (ARN) that uniquely identifies the billing group.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>A time range for which the margin summary is effective. You can specify up to 12 months.</p>
    pub fn billing_period_range(&self) -> ::std::option::Option<&crate::types::BillingPeriodRange> {
        self.billing_period_range.as_ref()
    }
    /// <p>A list of strings that specify the attributes that are used to break down costs in the margin summary reports for the billing group. For example, you can view your costs by the Amazon Web Services service name or the billing period.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.group_by.is_none()`.
    pub fn group_by(&self) -> &[crate::types::GroupByAttributeName] {
        self.group_by.as_deref().unwrap_or_default()
    }
    /// <p>The maximum number of margin summary reports to retrieve.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The pagination token used on subsequent calls to get reports.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl GetBillingGroupCostReportInput {
    /// Creates a new builder-style object to manufacture [`GetBillingGroupCostReportInput`](crate::operation::get_billing_group_cost_report::GetBillingGroupCostReportInput).
    pub fn builder() -> crate::operation::get_billing_group_cost_report::builders::GetBillingGroupCostReportInputBuilder {
        crate::operation::get_billing_group_cost_report::builders::GetBillingGroupCostReportInputBuilder::default()
    }
}

/// A builder for [`GetBillingGroupCostReportInput`](crate::operation::get_billing_group_cost_report::GetBillingGroupCostReportInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetBillingGroupCostReportInputBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) billing_period_range: ::std::option::Option<crate::types::BillingPeriodRange>,
    pub(crate) group_by: ::std::option::Option<::std::vec::Vec<crate::types::GroupByAttributeName>>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl GetBillingGroupCostReportInputBuilder {
    /// <p>The Amazon Resource Number (ARN) that uniquely identifies the billing group.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Number (ARN) that uniquely identifies the billing group.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Number (ARN) that uniquely identifies the billing group.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>A time range for which the margin summary is effective. You can specify up to 12 months.</p>
    pub fn billing_period_range(mut self, input: crate::types::BillingPeriodRange) -> Self {
        self.billing_period_range = ::std::option::Option::Some(input);
        self
    }
    /// <p>A time range for which the margin summary is effective. You can specify up to 12 months.</p>
    pub fn set_billing_period_range(mut self, input: ::std::option::Option<crate::types::BillingPeriodRange>) -> Self {
        self.billing_period_range = input;
        self
    }
    /// <p>A time range for which the margin summary is effective. You can specify up to 12 months.</p>
    pub fn get_billing_period_range(&self) -> &::std::option::Option<crate::types::BillingPeriodRange> {
        &self.billing_period_range
    }
    /// Appends an item to `group_by`.
    ///
    /// To override the contents of this collection use [`set_group_by`](Self::set_group_by).
    ///
    /// <p>A list of strings that specify the attributes that are used to break down costs in the margin summary reports for the billing group. For example, you can view your costs by the Amazon Web Services service name or the billing period.</p>
    pub fn group_by(mut self, input: crate::types::GroupByAttributeName) -> Self {
        let mut v = self.group_by.unwrap_or_default();
        v.push(input);
        self.group_by = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of strings that specify the attributes that are used to break down costs in the margin summary reports for the billing group. For example, you can view your costs by the Amazon Web Services service name or the billing period.</p>
    pub fn set_group_by(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GroupByAttributeName>>) -> Self {
        self.group_by = input;
        self
    }
    /// <p>A list of strings that specify the attributes that are used to break down costs in the margin summary reports for the billing group. For example, you can view your costs by the Amazon Web Services service name or the billing period.</p>
    pub fn get_group_by(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GroupByAttributeName>> {
        &self.group_by
    }
    /// <p>The maximum number of margin summary reports to retrieve.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of margin summary reports to retrieve.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of margin summary reports to retrieve.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The pagination token used on subsequent calls to get reports.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pagination token used on subsequent calls to get reports.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The pagination token used on subsequent calls to get reports.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`GetBillingGroupCostReportInput`](crate::operation::get_billing_group_cost_report::GetBillingGroupCostReportInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_billing_group_cost_report::GetBillingGroupCostReportInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_billing_group_cost_report::GetBillingGroupCostReportInput {
            arn: self.arn,
            billing_period_range: self.billing_period_range,
            group_by: self.group_by,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
