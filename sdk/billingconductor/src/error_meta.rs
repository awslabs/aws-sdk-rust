// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You do not have sufficient access to perform this action. </p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>You can cause an inconsistent state by updating or deleting a resource. </p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>An unexpected error occurred while processing a request. </p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>The request references a resource that doesn't exist. </p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>The request would cause a service limit to exceed. </p>
    ServiceLimitExceededException(crate::types::error::ServiceLimitExceededException),
    /// <p>The request was denied due to request throttling. </p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The input doesn't match with the constraints specified by Amazon Web Services services.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceLimitExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::associate_accounts::AssociateAccountsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::associate_accounts::AssociateAccountsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_accounts::AssociateAccountsError> for Error {
    fn from(err: crate::operation::associate_accounts::AssociateAccountsError) -> Self {
        match err {
            crate::operation::associate_accounts::AssociateAccountsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::associate_accounts::AssociateAccountsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::associate_accounts::AssociateAccountsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::associate_accounts::AssociateAccountsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::associate_accounts::AssociateAccountsError::ServiceLimitExceededException(inner) => Error::ServiceLimitExceededException(inner),
            crate::operation::associate_accounts::AssociateAccountsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::associate_accounts::AssociateAccountsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::associate_accounts::AssociateAccountsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::associate_pricing_rules::AssociatePricingRulesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::associate_pricing_rules::AssociatePricingRulesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_pricing_rules::AssociatePricingRulesError> for Error {
    fn from(err: crate::operation::associate_pricing_rules::AssociatePricingRulesError) -> Self {
        match err {
            crate::operation::associate_pricing_rules::AssociatePricingRulesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::associate_pricing_rules::AssociatePricingRulesError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::associate_pricing_rules::AssociatePricingRulesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::associate_pricing_rules::AssociatePricingRulesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::associate_pricing_rules::AssociatePricingRulesError::ServiceLimitExceededException(inner) => Error::ServiceLimitExceededException(inner),
            crate::operation::associate_pricing_rules::AssociatePricingRulesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::associate_pricing_rules::AssociatePricingRulesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::associate_pricing_rules::AssociatePricingRulesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::batch_associate_resources_to_custom_line_item::BatchAssociateResourcesToCustomLineItemError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::batch_associate_resources_to_custom_line_item::BatchAssociateResourcesToCustomLineItemError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::batch_associate_resources_to_custom_line_item::BatchAssociateResourcesToCustomLineItemError> for Error {
    fn from(err: crate::operation::batch_associate_resources_to_custom_line_item::BatchAssociateResourcesToCustomLineItemError) -> Self {
        match err {
            crate::operation::batch_associate_resources_to_custom_line_item::BatchAssociateResourcesToCustomLineItemError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::batch_associate_resources_to_custom_line_item::BatchAssociateResourcesToCustomLineItemError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::batch_associate_resources_to_custom_line_item::BatchAssociateResourcesToCustomLineItemError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::batch_associate_resources_to_custom_line_item::BatchAssociateResourcesToCustomLineItemError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::batch_associate_resources_to_custom_line_item::BatchAssociateResourcesToCustomLineItemError::ServiceLimitExceededException(inner) => Error::ServiceLimitExceededException(inner),
            crate::operation::batch_associate_resources_to_custom_line_item::BatchAssociateResourcesToCustomLineItemError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_associate_resources_to_custom_line_item::BatchAssociateResourcesToCustomLineItemError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::batch_associate_resources_to_custom_line_item::BatchAssociateResourcesToCustomLineItemError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::batch_disassociate_resources_from_custom_line_item::BatchDisassociateResourcesFromCustomLineItemError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::batch_disassociate_resources_from_custom_line_item::BatchDisassociateResourcesFromCustomLineItemError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::batch_disassociate_resources_from_custom_line_item::BatchDisassociateResourcesFromCustomLineItemError> for Error {
    fn from(err: crate::operation::batch_disassociate_resources_from_custom_line_item::BatchDisassociateResourcesFromCustomLineItemError) -> Self {
        match err {
            crate::operation::batch_disassociate_resources_from_custom_line_item::BatchDisassociateResourcesFromCustomLineItemError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::batch_disassociate_resources_from_custom_line_item::BatchDisassociateResourcesFromCustomLineItemError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::batch_disassociate_resources_from_custom_line_item::BatchDisassociateResourcesFromCustomLineItemError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::batch_disassociate_resources_from_custom_line_item::BatchDisassociateResourcesFromCustomLineItemError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::batch_disassociate_resources_from_custom_line_item::BatchDisassociateResourcesFromCustomLineItemError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_disassociate_resources_from_custom_line_item::BatchDisassociateResourcesFromCustomLineItemError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::batch_disassociate_resources_from_custom_line_item::BatchDisassociateResourcesFromCustomLineItemError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_billing_group::CreateBillingGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_billing_group::CreateBillingGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_billing_group::CreateBillingGroupError> for Error {
    fn from(err: crate::operation::create_billing_group::CreateBillingGroupError) -> Self {
        match err {
            crate::operation::create_billing_group::CreateBillingGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_billing_group::CreateBillingGroupError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_billing_group::CreateBillingGroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_billing_group::CreateBillingGroupError::ServiceLimitExceededException(inner) => Error::ServiceLimitExceededException(inner),
            crate::operation::create_billing_group::CreateBillingGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_billing_group::CreateBillingGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_billing_group::CreateBillingGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_custom_line_item::CreateCustomLineItemError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_custom_line_item::CreateCustomLineItemError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_custom_line_item::CreateCustomLineItemError> for Error {
    fn from(err: crate::operation::create_custom_line_item::CreateCustomLineItemError) -> Self {
        match err {
            crate::operation::create_custom_line_item::CreateCustomLineItemError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_custom_line_item::CreateCustomLineItemError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_custom_line_item::CreateCustomLineItemError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_custom_line_item::CreateCustomLineItemError::ServiceLimitExceededException(inner) => Error::ServiceLimitExceededException(inner),
            crate::operation::create_custom_line_item::CreateCustomLineItemError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_custom_line_item::CreateCustomLineItemError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_custom_line_item::CreateCustomLineItemError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_pricing_plan::CreatePricingPlanError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_pricing_plan::CreatePricingPlanError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_pricing_plan::CreatePricingPlanError> for Error {
    fn from(err: crate::operation::create_pricing_plan::CreatePricingPlanError) -> Self {
        match err {
            crate::operation::create_pricing_plan::CreatePricingPlanError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_pricing_plan::CreatePricingPlanError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_pricing_plan::CreatePricingPlanError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_pricing_plan::CreatePricingPlanError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_pricing_plan::CreatePricingPlanError::ServiceLimitExceededException(inner) => Error::ServiceLimitExceededException(inner),
            crate::operation::create_pricing_plan::CreatePricingPlanError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_pricing_plan::CreatePricingPlanError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_pricing_plan::CreatePricingPlanError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_pricing_rule::CreatePricingRuleError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_pricing_rule::CreatePricingRuleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_pricing_rule::CreatePricingRuleError> for Error {
    fn from(err: crate::operation::create_pricing_rule::CreatePricingRuleError) -> Self {
        match err {
            crate::operation::create_pricing_rule::CreatePricingRuleError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_pricing_rule::CreatePricingRuleError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_pricing_rule::CreatePricingRuleError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_pricing_rule::CreatePricingRuleError::ServiceLimitExceededException(inner) => Error::ServiceLimitExceededException(inner),
            crate::operation::create_pricing_rule::CreatePricingRuleError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_pricing_rule::CreatePricingRuleError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_pricing_rule::CreatePricingRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_billing_group::DeleteBillingGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_billing_group::DeleteBillingGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_billing_group::DeleteBillingGroupError> for Error {
    fn from(err: crate::operation::delete_billing_group::DeleteBillingGroupError) -> Self {
        match err {
            crate::operation::delete_billing_group::DeleteBillingGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_billing_group::DeleteBillingGroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_billing_group::DeleteBillingGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_billing_group::DeleteBillingGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_billing_group::DeleteBillingGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_custom_line_item::DeleteCustomLineItemError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_custom_line_item::DeleteCustomLineItemError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_custom_line_item::DeleteCustomLineItemError> for Error {
    fn from(err: crate::operation::delete_custom_line_item::DeleteCustomLineItemError) -> Self {
        match err {
            crate::operation::delete_custom_line_item::DeleteCustomLineItemError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_custom_line_item::DeleteCustomLineItemError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_custom_line_item::DeleteCustomLineItemError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_custom_line_item::DeleteCustomLineItemError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_custom_line_item::DeleteCustomLineItemError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_custom_line_item::DeleteCustomLineItemError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_pricing_plan::DeletePricingPlanError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_pricing_plan::DeletePricingPlanError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_pricing_plan::DeletePricingPlanError> for Error {
    fn from(err: crate::operation::delete_pricing_plan::DeletePricingPlanError) -> Self {
        match err {
            crate::operation::delete_pricing_plan::DeletePricingPlanError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_pricing_plan::DeletePricingPlanError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_pricing_plan::DeletePricingPlanError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_pricing_plan::DeletePricingPlanError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_pricing_plan::DeletePricingPlanError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_pricing_plan::DeletePricingPlanError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_pricing_rule::DeletePricingRuleError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_pricing_rule::DeletePricingRuleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_pricing_rule::DeletePricingRuleError> for Error {
    fn from(err: crate::operation::delete_pricing_rule::DeletePricingRuleError) -> Self {
        match err {
            crate::operation::delete_pricing_rule::DeletePricingRuleError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_pricing_rule::DeletePricingRuleError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_pricing_rule::DeletePricingRuleError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_pricing_rule::DeletePricingRuleError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_pricing_rule::DeletePricingRuleError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_pricing_rule::DeletePricingRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::disassociate_accounts::DisassociateAccountsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::disassociate_accounts::DisassociateAccountsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disassociate_accounts::DisassociateAccountsError> for Error {
    fn from(err: crate::operation::disassociate_accounts::DisassociateAccountsError) -> Self {
        match err {
            crate::operation::disassociate_accounts::DisassociateAccountsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::disassociate_accounts::DisassociateAccountsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::disassociate_accounts::DisassociateAccountsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::disassociate_accounts::DisassociateAccountsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::disassociate_accounts::DisassociateAccountsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::disassociate_accounts::DisassociateAccountsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::disassociate_accounts::DisassociateAccountsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::disassociate_pricing_rules::DisassociatePricingRulesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::disassociate_pricing_rules::DisassociatePricingRulesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disassociate_pricing_rules::DisassociatePricingRulesError> for Error {
    fn from(
        err: crate::operation::disassociate_pricing_rules::DisassociatePricingRulesError,
    ) -> Self {
        match err {
            crate::operation::disassociate_pricing_rules::DisassociatePricingRulesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::disassociate_pricing_rules::DisassociatePricingRulesError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::disassociate_pricing_rules::DisassociatePricingRulesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::disassociate_pricing_rules::DisassociatePricingRulesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::disassociate_pricing_rules::DisassociatePricingRulesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::disassociate_pricing_rules::DisassociatePricingRulesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::disassociate_pricing_rules::DisassociatePricingRulesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_account_associations::ListAccountAssociationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_account_associations::ListAccountAssociationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_account_associations::ListAccountAssociationsError> for Error {
    fn from(
        err: crate::operation::list_account_associations::ListAccountAssociationsError,
    ) -> Self {
        match err {
            crate::operation::list_account_associations::ListAccountAssociationsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_account_associations::ListAccountAssociationsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_account_associations::ListAccountAssociationsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_account_associations::ListAccountAssociationsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_account_associations::ListAccountAssociationsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_account_associations::ListAccountAssociationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_billing_group_cost_reports::ListBillingGroupCostReportsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_billing_group_cost_reports::ListBillingGroupCostReportsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_billing_group_cost_reports::ListBillingGroupCostReportsError>
    for Error
{
    fn from(
        err: crate::operation::list_billing_group_cost_reports::ListBillingGroupCostReportsError,
    ) -> Self {
        match err {
            crate::operation::list_billing_group_cost_reports::ListBillingGroupCostReportsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_billing_group_cost_reports::ListBillingGroupCostReportsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_billing_group_cost_reports::ListBillingGroupCostReportsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_billing_group_cost_reports::ListBillingGroupCostReportsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_billing_group_cost_reports::ListBillingGroupCostReportsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_billing_group_cost_reports::ListBillingGroupCostReportsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_billing_groups::ListBillingGroupsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_billing_groups::ListBillingGroupsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_billing_groups::ListBillingGroupsError> for Error {
    fn from(err: crate::operation::list_billing_groups::ListBillingGroupsError) -> Self {
        match err {
            crate::operation::list_billing_groups::ListBillingGroupsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_billing_groups::ListBillingGroupsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_billing_groups::ListBillingGroupsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_billing_groups::ListBillingGroupsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_billing_groups::ListBillingGroupsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_billing_groups::ListBillingGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_custom_line_items::ListCustomLineItemsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_custom_line_items::ListCustomLineItemsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_custom_line_items::ListCustomLineItemsError> for Error {
    fn from(err: crate::operation::list_custom_line_items::ListCustomLineItemsError) -> Self {
        match err {
            crate::operation::list_custom_line_items::ListCustomLineItemsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_custom_line_items::ListCustomLineItemsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_custom_line_items::ListCustomLineItemsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_custom_line_items::ListCustomLineItemsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_custom_line_items::ListCustomLineItemsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_custom_line_items::ListCustomLineItemsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_custom_line_item_versions::ListCustomLineItemVersionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_custom_line_item_versions::ListCustomLineItemVersionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_custom_line_item_versions::ListCustomLineItemVersionsError>
    for Error
{
    fn from(
        err: crate::operation::list_custom_line_item_versions::ListCustomLineItemVersionsError,
    ) -> Self {
        match err {
            crate::operation::list_custom_line_item_versions::ListCustomLineItemVersionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_custom_line_item_versions::ListCustomLineItemVersionsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_custom_line_item_versions::ListCustomLineItemVersionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_custom_line_item_versions::ListCustomLineItemVersionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_custom_line_item_versions::ListCustomLineItemVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_pricing_plans::ListPricingPlansError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_pricing_plans::ListPricingPlansError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_pricing_plans::ListPricingPlansError> for Error {
    fn from(err: crate::operation::list_pricing_plans::ListPricingPlansError) -> Self {
        match err {
            crate::operation::list_pricing_plans::ListPricingPlansError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_pricing_plans::ListPricingPlansError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_pricing_plans::ListPricingPlansError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_pricing_plans::ListPricingPlansError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_pricing_plans::ListPricingPlansError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_pricing_plans_associated_with_pricing_rule::ListPricingPlansAssociatedWithPricingRuleError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_pricing_plans_associated_with_pricing_rule::ListPricingPlansAssociatedWithPricingRuleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::list_pricing_plans_associated_with_pricing_rule::ListPricingPlansAssociatedWithPricingRuleError> for Error {
    fn from(err: crate::operation::list_pricing_plans_associated_with_pricing_rule::ListPricingPlansAssociatedWithPricingRuleError) -> Self {
        match err {
            crate::operation::list_pricing_plans_associated_with_pricing_rule::ListPricingPlansAssociatedWithPricingRuleError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_pricing_plans_associated_with_pricing_rule::ListPricingPlansAssociatedWithPricingRuleError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_pricing_plans_associated_with_pricing_rule::ListPricingPlansAssociatedWithPricingRuleError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_pricing_plans_associated_with_pricing_rule::ListPricingPlansAssociatedWithPricingRuleError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_pricing_plans_associated_with_pricing_rule::ListPricingPlansAssociatedWithPricingRuleError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_pricing_plans_associated_with_pricing_rule::ListPricingPlansAssociatedWithPricingRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_pricing_rules::ListPricingRulesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_pricing_rules::ListPricingRulesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_pricing_rules::ListPricingRulesError> for Error {
    fn from(err: crate::operation::list_pricing_rules::ListPricingRulesError) -> Self {
        match err {
            crate::operation::list_pricing_rules::ListPricingRulesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_pricing_rules::ListPricingRulesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_pricing_rules::ListPricingRulesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_pricing_rules::ListPricingRulesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_pricing_rules::ListPricingRulesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_pricing_rules_associated_to_pricing_plan::ListPricingRulesAssociatedToPricingPlanError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_pricing_rules_associated_to_pricing_plan::ListPricingRulesAssociatedToPricingPlanError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::list_pricing_rules_associated_to_pricing_plan::ListPricingRulesAssociatedToPricingPlanError> for Error {
    fn from(err: crate::operation::list_pricing_rules_associated_to_pricing_plan::ListPricingRulesAssociatedToPricingPlanError) -> Self {
        match err {
            crate::operation::list_pricing_rules_associated_to_pricing_plan::ListPricingRulesAssociatedToPricingPlanError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_pricing_rules_associated_to_pricing_plan::ListPricingRulesAssociatedToPricingPlanError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_pricing_rules_associated_to_pricing_plan::ListPricingRulesAssociatedToPricingPlanError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_pricing_rules_associated_to_pricing_plan::ListPricingRulesAssociatedToPricingPlanError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_pricing_rules_associated_to_pricing_plan::ListPricingRulesAssociatedToPricingPlanError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_pricing_rules_associated_to_pricing_plan::ListPricingRulesAssociatedToPricingPlanError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_resources_associated_to_custom_line_item::ListResourcesAssociatedToCustomLineItemError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_resources_associated_to_custom_line_item::ListResourcesAssociatedToCustomLineItemError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::list_resources_associated_to_custom_line_item::ListResourcesAssociatedToCustomLineItemError> for Error {
    fn from(err: crate::operation::list_resources_associated_to_custom_line_item::ListResourcesAssociatedToCustomLineItemError) -> Self {
        match err {
            crate::operation::list_resources_associated_to_custom_line_item::ListResourcesAssociatedToCustomLineItemError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_resources_associated_to_custom_line_item::ListResourcesAssociatedToCustomLineItemError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_resources_associated_to_custom_line_item::ListResourcesAssociatedToCustomLineItemError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_resources_associated_to_custom_line_item::ListResourcesAssociatedToCustomLineItemError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_resources_associated_to_custom_line_item::ListResourcesAssociatedToCustomLineItemError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_resources_associated_to_custom_line_item::ListResourcesAssociatedToCustomLineItemError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::untag_resource::UntagResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_billing_group::UpdateBillingGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_billing_group::UpdateBillingGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_billing_group::UpdateBillingGroupError> for Error {
    fn from(err: crate::operation::update_billing_group::UpdateBillingGroupError) -> Self {
        match err {
            crate::operation::update_billing_group::UpdateBillingGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_billing_group::UpdateBillingGroupError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_billing_group::UpdateBillingGroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_billing_group::UpdateBillingGroupError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_billing_group::UpdateBillingGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_billing_group::UpdateBillingGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_billing_group::UpdateBillingGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_custom_line_item::UpdateCustomLineItemError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_custom_line_item::UpdateCustomLineItemError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_custom_line_item::UpdateCustomLineItemError> for Error {
    fn from(err: crate::operation::update_custom_line_item::UpdateCustomLineItemError) -> Self {
        match err {
            crate::operation::update_custom_line_item::UpdateCustomLineItemError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_custom_line_item::UpdateCustomLineItemError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_custom_line_item::UpdateCustomLineItemError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_custom_line_item::UpdateCustomLineItemError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_custom_line_item::UpdateCustomLineItemError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_custom_line_item::UpdateCustomLineItemError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_pricing_plan::UpdatePricingPlanError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_pricing_plan::UpdatePricingPlanError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_pricing_plan::UpdatePricingPlanError> for Error {
    fn from(err: crate::operation::update_pricing_plan::UpdatePricingPlanError) -> Self {
        match err {
            crate::operation::update_pricing_plan::UpdatePricingPlanError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_pricing_plan::UpdatePricingPlanError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_pricing_plan::UpdatePricingPlanError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_pricing_plan::UpdatePricingPlanError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_pricing_plan::UpdatePricingPlanError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_pricing_plan::UpdatePricingPlanError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_pricing_plan::UpdatePricingPlanError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_pricing_rule::UpdatePricingRuleError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_pricing_rule::UpdatePricingRuleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_pricing_rule::UpdatePricingRuleError> for Error {
    fn from(err: crate::operation::update_pricing_rule::UpdatePricingRuleError) -> Self {
        match err {
            crate::operation::update_pricing_rule::UpdatePricingRuleError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_pricing_rule::UpdatePricingRuleError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_pricing_rule::UpdatePricingRuleError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_pricing_rule::UpdatePricingRuleError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_pricing_rule::UpdatePricingRuleError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_pricing_rule::UpdatePricingRuleError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_pricing_rule::UpdatePricingRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceLimitExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
