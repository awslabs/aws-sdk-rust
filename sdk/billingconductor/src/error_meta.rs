// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You do not have sufficient access to perform this action. </p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>You can cause an inconsistent state by updating or deleting a resource. </p>
    ConflictException(crate::error::ConflictException),
    /// <p>An unexpected error occurred while processing a request. </p>
    InternalServerException(crate::error::InternalServerException),
    /// <p>The request references a resource that doesn't exist. </p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>The request would cause a service limit to exceed. </p>
    ServiceLimitExceededException(crate::error::ServiceLimitExceededException),
    /// <p>The request was denied due to request throttling. </p>
    ThrottlingException(crate::error::ThrottlingException),
    /// <p>The input doesn't match with the constraints specified by Amazon Web Services services.</p>
    ValidationException(crate::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceLimitExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociateAccountsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AssociateAccountsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateAccountsError> for Error {
    fn from(err: crate::error::AssociateAccountsError) -> Self {
        match err {
            crate::error::AssociateAccountsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::AssociateAccountsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::AssociateAccountsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::AssociateAccountsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AssociateAccountsError::ServiceLimitExceededException(inner) => {
                Error::ServiceLimitExceededException(inner)
            }
            crate::error::AssociateAccountsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::AssociateAccountsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::AssociateAccountsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociatePricingRulesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AssociatePricingRulesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociatePricingRulesError> for Error {
    fn from(err: crate::error::AssociatePricingRulesError) -> Self {
        match err {
            crate::error::AssociatePricingRulesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::AssociatePricingRulesError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::AssociatePricingRulesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::AssociatePricingRulesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AssociatePricingRulesError::ServiceLimitExceededException(inner) => {
                Error::ServiceLimitExceededException(inner)
            }
            crate::error::AssociatePricingRulesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::AssociatePricingRulesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::AssociatePricingRulesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::BatchAssociateResourcesToCustomLineItemError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::BatchAssociateResourcesToCustomLineItemError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchAssociateResourcesToCustomLineItemError> for Error {
    fn from(err: crate::error::BatchAssociateResourcesToCustomLineItemError) -> Self {
        match err {
            crate::error::BatchAssociateResourcesToCustomLineItemError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::BatchAssociateResourcesToCustomLineItemError::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::BatchAssociateResourcesToCustomLineItemError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::BatchAssociateResourcesToCustomLineItemError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::BatchAssociateResourcesToCustomLineItemError::ServiceLimitExceededException(inner) => Error::ServiceLimitExceededException(inner),
            crate::error::BatchAssociateResourcesToCustomLineItemError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::BatchAssociateResourcesToCustomLineItemError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::BatchAssociateResourcesToCustomLineItemError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::BatchDisassociateResourcesFromCustomLineItemError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::BatchDisassociateResourcesFromCustomLineItemError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchDisassociateResourcesFromCustomLineItemError> for Error {
    fn from(err: crate::error::BatchDisassociateResourcesFromCustomLineItemError) -> Self {
        match err {
            crate::error::BatchDisassociateResourcesFromCustomLineItemError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::BatchDisassociateResourcesFromCustomLineItemError::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::BatchDisassociateResourcesFromCustomLineItemError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::BatchDisassociateResourcesFromCustomLineItemError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::BatchDisassociateResourcesFromCustomLineItemError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::BatchDisassociateResourcesFromCustomLineItemError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::BatchDisassociateResourcesFromCustomLineItemError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateBillingGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateBillingGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateBillingGroupError> for Error {
    fn from(err: crate::error::CreateBillingGroupError) -> Self {
        match err {
            crate::error::CreateBillingGroupError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateBillingGroupError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateBillingGroupError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateBillingGroupError::ServiceLimitExceededException(inner) => {
                Error::ServiceLimitExceededException(inner)
            }
            crate::error::CreateBillingGroupError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateBillingGroupError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateBillingGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateCustomLineItemError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateCustomLineItemError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateCustomLineItemError> for Error {
    fn from(err: crate::error::CreateCustomLineItemError) -> Self {
        match err {
            crate::error::CreateCustomLineItemError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateCustomLineItemError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateCustomLineItemError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateCustomLineItemError::ServiceLimitExceededException(inner) => {
                Error::ServiceLimitExceededException(inner)
            }
            crate::error::CreateCustomLineItemError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateCustomLineItemError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateCustomLineItemError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreatePricingPlanError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreatePricingPlanError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreatePricingPlanError> for Error {
    fn from(err: crate::error::CreatePricingPlanError) -> Self {
        match err {
            crate::error::CreatePricingPlanError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreatePricingPlanError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreatePricingPlanError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreatePricingPlanError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreatePricingPlanError::ServiceLimitExceededException(inner) => {
                Error::ServiceLimitExceededException(inner)
            }
            crate::error::CreatePricingPlanError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreatePricingPlanError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreatePricingPlanError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreatePricingRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreatePricingRuleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreatePricingRuleError> for Error {
    fn from(err: crate::error::CreatePricingRuleError) -> Self {
        match err {
            crate::error::CreatePricingRuleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreatePricingRuleError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreatePricingRuleError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreatePricingRuleError::ServiceLimitExceededException(inner) => {
                Error::ServiceLimitExceededException(inner)
            }
            crate::error::CreatePricingRuleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreatePricingRuleError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreatePricingRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteBillingGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteBillingGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteBillingGroupError> for Error {
    fn from(err: crate::error::DeleteBillingGroupError) -> Self {
        match err {
            crate::error::DeleteBillingGroupError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteBillingGroupError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteBillingGroupError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteBillingGroupError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteBillingGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteCustomLineItemError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteCustomLineItemError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteCustomLineItemError> for Error {
    fn from(err: crate::error::DeleteCustomLineItemError) -> Self {
        match err {
            crate::error::DeleteCustomLineItemError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteCustomLineItemError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteCustomLineItemError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteCustomLineItemError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteCustomLineItemError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteCustomLineItemError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeletePricingPlanError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeletePricingPlanError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeletePricingPlanError> for Error {
    fn from(err: crate::error::DeletePricingPlanError) -> Self {
        match err {
            crate::error::DeletePricingPlanError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeletePricingPlanError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeletePricingPlanError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeletePricingPlanError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeletePricingPlanError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeletePricingPlanError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeletePricingRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeletePricingRuleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeletePricingRuleError> for Error {
    fn from(err: crate::error::DeletePricingRuleError) -> Self {
        match err {
            crate::error::DeletePricingRuleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeletePricingRuleError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeletePricingRuleError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeletePricingRuleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeletePricingRuleError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeletePricingRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisassociateAccountsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DisassociateAccountsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateAccountsError> for Error {
    fn from(err: crate::error::DisassociateAccountsError) -> Self {
        match err {
            crate::error::DisassociateAccountsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DisassociateAccountsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DisassociateAccountsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DisassociateAccountsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DisassociateAccountsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DisassociateAccountsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DisassociateAccountsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisassociatePricingRulesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DisassociatePricingRulesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociatePricingRulesError> for Error {
    fn from(err: crate::error::DisassociatePricingRulesError) -> Self {
        match err {
            crate::error::DisassociatePricingRulesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DisassociatePricingRulesError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DisassociatePricingRulesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DisassociatePricingRulesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DisassociatePricingRulesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DisassociatePricingRulesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DisassociatePricingRulesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAccountAssociationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListAccountAssociationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAccountAssociationsError> for Error {
    fn from(err: crate::error::ListAccountAssociationsError) -> Self {
        match err {
            crate::error::ListAccountAssociationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListAccountAssociationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListAccountAssociationsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListAccountAssociationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListAccountAssociationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListAccountAssociationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListBillingGroupCostReportsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListBillingGroupCostReportsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListBillingGroupCostReportsError> for Error {
    fn from(err: crate::error::ListBillingGroupCostReportsError) -> Self {
        match err {
            crate::error::ListBillingGroupCostReportsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListBillingGroupCostReportsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListBillingGroupCostReportsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListBillingGroupCostReportsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListBillingGroupCostReportsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListBillingGroupCostReportsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListBillingGroupsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListBillingGroupsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListBillingGroupsError> for Error {
    fn from(err: crate::error::ListBillingGroupsError) -> Self {
        match err {
            crate::error::ListBillingGroupsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListBillingGroupsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListBillingGroupsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListBillingGroupsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListBillingGroupsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListBillingGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListCustomLineItemsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListCustomLineItemsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListCustomLineItemsError> for Error {
    fn from(err: crate::error::ListCustomLineItemsError) -> Self {
        match err {
            crate::error::ListCustomLineItemsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListCustomLineItemsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListCustomLineItemsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListCustomLineItemsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListCustomLineItemsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListCustomLineItemsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListCustomLineItemVersionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListCustomLineItemVersionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListCustomLineItemVersionsError> for Error {
    fn from(err: crate::error::ListCustomLineItemVersionsError) -> Self {
        match err {
            crate::error::ListCustomLineItemVersionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListCustomLineItemVersionsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListCustomLineItemVersionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListCustomLineItemVersionsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListCustomLineItemVersionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListPricingPlansError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListPricingPlansError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListPricingPlansError> for Error {
    fn from(err: crate::error::ListPricingPlansError) -> Self {
        match err {
            crate::error::ListPricingPlansError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListPricingPlansError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListPricingPlansError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListPricingPlansError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListPricingPlansError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::ListPricingPlansAssociatedWithPricingRuleError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListPricingPlansAssociatedWithPricingRuleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListPricingPlansAssociatedWithPricingRuleError> for Error {
    fn from(err: crate::error::ListPricingPlansAssociatedWithPricingRuleError) -> Self {
        match err {
            crate::error::ListPricingPlansAssociatedWithPricingRuleError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListPricingPlansAssociatedWithPricingRuleError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListPricingPlansAssociatedWithPricingRuleError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListPricingPlansAssociatedWithPricingRuleError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListPricingPlansAssociatedWithPricingRuleError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListPricingPlansAssociatedWithPricingRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListPricingRulesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListPricingRulesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListPricingRulesError> for Error {
    fn from(err: crate::error::ListPricingRulesError) -> Self {
        match err {
            crate::error::ListPricingRulesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListPricingRulesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListPricingRulesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListPricingRulesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListPricingRulesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::ListPricingRulesAssociatedToPricingPlanError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListPricingRulesAssociatedToPricingPlanError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListPricingRulesAssociatedToPricingPlanError> for Error {
    fn from(err: crate::error::ListPricingRulesAssociatedToPricingPlanError) -> Self {
        match err {
            crate::error::ListPricingRulesAssociatedToPricingPlanError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListPricingRulesAssociatedToPricingPlanError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListPricingRulesAssociatedToPricingPlanError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListPricingRulesAssociatedToPricingPlanError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListPricingRulesAssociatedToPricingPlanError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListPricingRulesAssociatedToPricingPlanError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::ListResourcesAssociatedToCustomLineItemError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListResourcesAssociatedToCustomLineItemError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListResourcesAssociatedToCustomLineItemError> for Error {
    fn from(err: crate::error::ListResourcesAssociatedToCustomLineItemError) -> Self {
        match err {
            crate::error::ListResourcesAssociatedToCustomLineItemError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListResourcesAssociatedToCustomLineItemError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListResourcesAssociatedToCustomLineItemError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListResourcesAssociatedToCustomLineItemError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListResourcesAssociatedToCustomLineItemError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListResourcesAssociatedToCustomLineItemError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListTagsForResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListTagsForResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::TagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::TagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::TagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UntagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UntagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UntagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UntagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateBillingGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateBillingGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateBillingGroupError> for Error {
    fn from(err: crate::error::UpdateBillingGroupError) -> Self {
        match err {
            crate::error::UpdateBillingGroupError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateBillingGroupError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateBillingGroupError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateBillingGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateBillingGroupError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateBillingGroupError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateBillingGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateCustomLineItemError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateCustomLineItemError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateCustomLineItemError> for Error {
    fn from(err: crate::error::UpdateCustomLineItemError) -> Self {
        match err {
            crate::error::UpdateCustomLineItemError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateCustomLineItemError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateCustomLineItemError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateCustomLineItemError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateCustomLineItemError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateCustomLineItemError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdatePricingPlanError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdatePricingPlanError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdatePricingPlanError> for Error {
    fn from(err: crate::error::UpdatePricingPlanError) -> Self {
        match err {
            crate::error::UpdatePricingPlanError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdatePricingPlanError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdatePricingPlanError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdatePricingPlanError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdatePricingPlanError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdatePricingPlanError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdatePricingPlanError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdatePricingRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdatePricingRuleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdatePricingRuleError> for Error {
    fn from(err: crate::error::UpdatePricingRuleError) -> Self {
        match err {
            crate::error::UpdatePricingRuleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdatePricingRuleError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdatePricingRuleError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdatePricingRuleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdatePricingRuleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdatePricingRuleError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdatePricingRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceLimitExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
