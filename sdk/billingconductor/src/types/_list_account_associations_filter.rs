// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The filter on the account ID of the linked account, or any of the following:</p>
/// <p> <code>MONITORED</code>: linked accounts that are associated to billing groups.</p>
/// <p> <code>UNMONITORED</code>: linked accounts that are not associated to billing groups.</p>
/// <p> <code>Billing Group Arn</code>: linked accounts that are associated to the provided Billing Group Arn.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListAccountAssociationsFilter {
    /// <p> <code>MONITORED</code>: linked accounts that are associated to billing groups.</p>
    /// <p> <code>UNMONITORED</code>: linked accounts that are not associated to billing groups.</p>
    /// <p> <code>Billing Group Arn</code>: linked accounts that are associated to the provided Billing Group Arn.</p>
    pub association: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services account ID to filter on.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p> The list of Amazon Web Services IDs to retrieve their associated billing group for a given time range. </p>
    pub account_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ListAccountAssociationsFilter {
    /// <p> <code>MONITORED</code>: linked accounts that are associated to billing groups.</p>
    /// <p> <code>UNMONITORED</code>: linked accounts that are not associated to billing groups.</p>
    /// <p> <code>Billing Group Arn</code>: linked accounts that are associated to the provided Billing Group Arn.</p>
    pub fn association(&self) -> ::std::option::Option<&str> {
        self.association.as_deref()
    }
    /// <p>The Amazon Web Services account ID to filter on.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p> The list of Amazon Web Services IDs to retrieve their associated billing group for a given time range. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.account_ids.is_none()`.
    pub fn account_ids(&self) -> &[::std::string::String] {
        self.account_ids.as_deref().unwrap_or_default()
    }
}
impl ListAccountAssociationsFilter {
    /// Creates a new builder-style object to manufacture [`ListAccountAssociationsFilter`](crate::types::ListAccountAssociationsFilter).
    pub fn builder() -> crate::types::builders::ListAccountAssociationsFilterBuilder {
        crate::types::builders::ListAccountAssociationsFilterBuilder::default()
    }
}

/// A builder for [`ListAccountAssociationsFilter`](crate::types::ListAccountAssociationsFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListAccountAssociationsFilterBuilder {
    pub(crate) association: ::std::option::Option<::std::string::String>,
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) account_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ListAccountAssociationsFilterBuilder {
    /// <p> <code>MONITORED</code>: linked accounts that are associated to billing groups.</p>
    /// <p> <code>UNMONITORED</code>: linked accounts that are not associated to billing groups.</p>
    /// <p> <code>Billing Group Arn</code>: linked accounts that are associated to the provided Billing Group Arn.</p>
    pub fn association(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.association = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> <code>MONITORED</code>: linked accounts that are associated to billing groups.</p>
    /// <p> <code>UNMONITORED</code>: linked accounts that are not associated to billing groups.</p>
    /// <p> <code>Billing Group Arn</code>: linked accounts that are associated to the provided Billing Group Arn.</p>
    pub fn set_association(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.association = input;
        self
    }
    /// <p> <code>MONITORED</code>: linked accounts that are associated to billing groups.</p>
    /// <p> <code>UNMONITORED</code>: linked accounts that are not associated to billing groups.</p>
    /// <p> <code>Billing Group Arn</code>: linked accounts that are associated to the provided Billing Group Arn.</p>
    pub fn get_association(&self) -> &::std::option::Option<::std::string::String> {
        &self.association
    }
    /// <p>The Amazon Web Services account ID to filter on.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID to filter on.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID to filter on.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// Appends an item to `account_ids`.
    ///
    /// To override the contents of this collection use [`set_account_ids`](Self::set_account_ids).
    ///
    /// <p> The list of Amazon Web Services IDs to retrieve their associated billing group for a given time range. </p>
    pub fn account_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.account_ids.unwrap_or_default();
        v.push(input.into());
        self.account_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p> The list of Amazon Web Services IDs to retrieve their associated billing group for a given time range. </p>
    pub fn set_account_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.account_ids = input;
        self
    }
    /// <p> The list of Amazon Web Services IDs to retrieve their associated billing group for a given time range. </p>
    pub fn get_account_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.account_ids
    }
    /// Consumes the builder and constructs a [`ListAccountAssociationsFilter`](crate::types::ListAccountAssociationsFilter).
    pub fn build(self) -> crate::types::ListAccountAssociationsFilter {
        crate::types::ListAccountAssociationsFilter {
            association: self.association,
            account_id: self.account_id,
            account_ids: self.account_ids,
        }
    }
}
