// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The filter on the account ID of the linked account, or any of the following:</p>
/// <p> <code>MONITORED</code>: linked accounts that are associated to billing groups.</p>
/// <p> <code>UNMONITORED</code>: linked accounts that are not associated to billing groups.</p>
/// <p> <code>Billing Group Arn</code>: linked accounts that are associated to the provided Billing Group Arn. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListAccountAssociationsFilter {
    /// <p> <code>MONITORED</code>: linked accounts that are associated to billing groups.</p>
    /// <p> <code>UNMONITORED</code>: linked accounts that are not associated to billing groups.</p>
    /// <p> <code>Billing Group Arn</code>: linked accounts that are associated to the provided Billing Group Arn. </p>
    #[doc(hidden)]
    pub association: std::option::Option<std::string::String>,
    /// <p> The Amazon Web Services account ID to filter on. </p>
    #[doc(hidden)]
    pub account_id: std::option::Option<std::string::String>,
}
impl ListAccountAssociationsFilter {
    /// <p> <code>MONITORED</code>: linked accounts that are associated to billing groups.</p>
    /// <p> <code>UNMONITORED</code>: linked accounts that are not associated to billing groups.</p>
    /// <p> <code>Billing Group Arn</code>: linked accounts that are associated to the provided Billing Group Arn. </p>
    pub fn association(&self) -> std::option::Option<&str> {
        self.association.as_deref()
    }
    /// <p> The Amazon Web Services account ID to filter on. </p>
    pub fn account_id(&self) -> std::option::Option<&str> {
        self.account_id.as_deref()
    }
}
impl ListAccountAssociationsFilter {
    /// Creates a new builder-style object to manufacture [`ListAccountAssociationsFilter`](crate::types::ListAccountAssociationsFilter).
    pub fn builder() -> crate::types::builders::ListAccountAssociationsFilterBuilder {
        crate::types::builders::ListAccountAssociationsFilterBuilder::default()
    }
}

/// A builder for [`ListAccountAssociationsFilter`](crate::types::ListAccountAssociationsFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListAccountAssociationsFilterBuilder {
    pub(crate) association: std::option::Option<std::string::String>,
    pub(crate) account_id: std::option::Option<std::string::String>,
}
impl ListAccountAssociationsFilterBuilder {
    /// <p> <code>MONITORED</code>: linked accounts that are associated to billing groups.</p>
    /// <p> <code>UNMONITORED</code>: linked accounts that are not associated to billing groups.</p>
    /// <p> <code>Billing Group Arn</code>: linked accounts that are associated to the provided Billing Group Arn. </p>
    pub fn association(mut self, input: impl Into<std::string::String>) -> Self {
        self.association = Some(input.into());
        self
    }
    /// <p> <code>MONITORED</code>: linked accounts that are associated to billing groups.</p>
    /// <p> <code>UNMONITORED</code>: linked accounts that are not associated to billing groups.</p>
    /// <p> <code>Billing Group Arn</code>: linked accounts that are associated to the provided Billing Group Arn. </p>
    pub fn set_association(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.association = input;
        self
    }
    /// <p> The Amazon Web Services account ID to filter on. </p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.account_id = Some(input.into());
        self
    }
    /// <p> The Amazon Web Services account ID to filter on. </p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// Consumes the builder and constructs a [`ListAccountAssociationsFilter`](crate::types::ListAccountAssociationsFilter).
    pub fn build(self) -> crate::types::ListAccountAssociationsFilter {
        crate::types::ListAccountAssociationsFilter {
            association: self.association,
            account_id: self.account_id,
        }
    }
}
