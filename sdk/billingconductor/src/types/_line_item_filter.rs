// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A representation of the line item filter for your custom line item. You can use line item filters to include or exclude specific resource values from the billing group's total cost. For example, if you create a custom line item and you want to filter out a value, such as Savings Plan discounts, you can update <code>LineItemFilter</code> to exclude it.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LineItemFilter {
    /// <p>The attribute of the line item filter. This specifies what attribute that you can filter on.</p>
    pub attribute: crate::types::LineItemFilterAttributeName,
    /// <p>The match criteria of the line item filter. This parameter specifies whether not to include the resource value from the billing group total cost.</p>
    pub match_option: crate::types::MatchOption,
    /// <p>The values of the line item filter. This specifies the values to filter on. Currently, you can only exclude Savings Plan discounts.</p>
    pub values: ::std::vec::Vec<crate::types::LineItemFilterValue>,
}
impl LineItemFilter {
    /// <p>The attribute of the line item filter. This specifies what attribute that you can filter on.</p>
    pub fn attribute(&self) -> &crate::types::LineItemFilterAttributeName {
        &self.attribute
    }
    /// <p>The match criteria of the line item filter. This parameter specifies whether not to include the resource value from the billing group total cost.</p>
    pub fn match_option(&self) -> &crate::types::MatchOption {
        &self.match_option
    }
    /// <p>The values of the line item filter. This specifies the values to filter on. Currently, you can only exclude Savings Plan discounts.</p>
    pub fn values(&self) -> &[crate::types::LineItemFilterValue] {
        use std::ops::Deref;
        self.values.deref()
    }
}
impl LineItemFilter {
    /// Creates a new builder-style object to manufacture [`LineItemFilter`](crate::types::LineItemFilter).
    pub fn builder() -> crate::types::builders::LineItemFilterBuilder {
        crate::types::builders::LineItemFilterBuilder::default()
    }
}

/// A builder for [`LineItemFilter`](crate::types::LineItemFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LineItemFilterBuilder {
    pub(crate) attribute: ::std::option::Option<crate::types::LineItemFilterAttributeName>,
    pub(crate) match_option: ::std::option::Option<crate::types::MatchOption>,
    pub(crate) values: ::std::option::Option<::std::vec::Vec<crate::types::LineItemFilterValue>>,
}
impl LineItemFilterBuilder {
    /// <p>The attribute of the line item filter. This specifies what attribute that you can filter on.</p>
    /// This field is required.
    pub fn attribute(mut self, input: crate::types::LineItemFilterAttributeName) -> Self {
        self.attribute = ::std::option::Option::Some(input);
        self
    }
    /// <p>The attribute of the line item filter. This specifies what attribute that you can filter on.</p>
    pub fn set_attribute(mut self, input: ::std::option::Option<crate::types::LineItemFilterAttributeName>) -> Self {
        self.attribute = input;
        self
    }
    /// <p>The attribute of the line item filter. This specifies what attribute that you can filter on.</p>
    pub fn get_attribute(&self) -> &::std::option::Option<crate::types::LineItemFilterAttributeName> {
        &self.attribute
    }
    /// <p>The match criteria of the line item filter. This parameter specifies whether not to include the resource value from the billing group total cost.</p>
    /// This field is required.
    pub fn match_option(mut self, input: crate::types::MatchOption) -> Self {
        self.match_option = ::std::option::Option::Some(input);
        self
    }
    /// <p>The match criteria of the line item filter. This parameter specifies whether not to include the resource value from the billing group total cost.</p>
    pub fn set_match_option(mut self, input: ::std::option::Option<crate::types::MatchOption>) -> Self {
        self.match_option = input;
        self
    }
    /// <p>The match criteria of the line item filter. This parameter specifies whether not to include the resource value from the billing group total cost.</p>
    pub fn get_match_option(&self) -> &::std::option::Option<crate::types::MatchOption> {
        &self.match_option
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>The values of the line item filter. This specifies the values to filter on. Currently, you can only exclude Savings Plan discounts.</p>
    pub fn values(mut self, input: crate::types::LineItemFilterValue) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input);
        self.values = ::std::option::Option::Some(v);
        self
    }
    /// <p>The values of the line item filter. This specifies the values to filter on. Currently, you can only exclude Savings Plan discounts.</p>
    pub fn set_values(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LineItemFilterValue>>) -> Self {
        self.values = input;
        self
    }
    /// <p>The values of the line item filter. This specifies the values to filter on. Currently, you can only exclude Savings Plan discounts.</p>
    pub fn get_values(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LineItemFilterValue>> {
        &self.values
    }
    /// Consumes the builder and constructs a [`LineItemFilter`](crate::types::LineItemFilter).
    /// This method will fail if any of the following fields are not set:
    /// - [`attribute`](crate::types::builders::LineItemFilterBuilder::attribute)
    /// - [`match_option`](crate::types::builders::LineItemFilterBuilder::match_option)
    /// - [`values`](crate::types::builders::LineItemFilterBuilder::values)
    pub fn build(self) -> ::std::result::Result<crate::types::LineItemFilter, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::LineItemFilter {
            attribute: self.attribute.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "attribute",
                    "attribute was not specified but it is required when building LineItemFilter",
                )
            })?,
            match_option: self.match_option.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "match_option",
                    "match_option was not specified but it is required when building LineItemFilter",
                )
            })?,
            values: self.values.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "values",
                    "values was not specified but it is required when building LineItemFilter",
                )
            })?,
        })
    }
}
