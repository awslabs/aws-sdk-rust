// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The filter that specifies criteria that the pricing rules returned by the <code>ListPricingRules</code> API will adhere to. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListPricingRulesFilter {
    /// <p> A list containing the pricing rule Amazon Resource Names (ARNs) to include in the API response. </p>
    #[doc(hidden)]
    pub arns: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ListPricingRulesFilter {
    /// <p> A list containing the pricing rule Amazon Resource Names (ARNs) to include in the API response. </p>
    pub fn arns(&self) -> std::option::Option<&[std::string::String]> {
        self.arns.as_deref()
    }
}
impl ListPricingRulesFilter {
    /// Creates a new builder-style object to manufacture [`ListPricingRulesFilter`](crate::types::ListPricingRulesFilter).
    pub fn builder() -> crate::types::builders::ListPricingRulesFilterBuilder {
        crate::types::builders::ListPricingRulesFilterBuilder::default()
    }
}

/// A builder for [`ListPricingRulesFilter`](crate::types::ListPricingRulesFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListPricingRulesFilterBuilder {
    pub(crate) arns: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ListPricingRulesFilterBuilder {
    /// Appends an item to `arns`.
    ///
    /// To override the contents of this collection use [`set_arns`](Self::set_arns).
    ///
    /// <p> A list containing the pricing rule Amazon Resource Names (ARNs) to include in the API response. </p>
    pub fn arns(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.arns.unwrap_or_default();
        v.push(input.into());
        self.arns = Some(v);
        self
    }
    /// <p> A list containing the pricing rule Amazon Resource Names (ARNs) to include in the API response. </p>
    pub fn set_arns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.arns = input;
        self
    }
    /// Consumes the builder and constructs a [`ListPricingRulesFilter`](crate::types::ListPricingRulesFilter).
    pub fn build(self) -> crate::types::ListPricingRulesFilter {
        crate::types::ListPricingRulesFilter { arns: self.arns }
    }
}
