// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A representation of a pricing plan. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PricingPlanListElement {
    /// <p>The name of a pricing plan. </p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The pricing plan Amazon Resource Names (ARN). This can be used to uniquely identify a pricing plan. </p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The pricing plan description. </p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p> The pricing rules count that's currently associated with this pricing plan list element. </p>
    #[doc(hidden)]
    pub size: i64,
    /// <p> The time when the pricing plan was created. </p>
    #[doc(hidden)]
    pub creation_time: i64,
    /// <p> The most recent time when the pricing plan was modified. </p>
    #[doc(hidden)]
    pub last_modified_time: i64,
}
impl PricingPlanListElement {
    /// <p>The name of a pricing plan. </p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The pricing plan Amazon Resource Names (ARN). This can be used to uniquely identify a pricing plan. </p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The pricing plan description. </p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p> The pricing rules count that's currently associated with this pricing plan list element. </p>
    pub fn size(&self) -> i64 {
        self.size
    }
    /// <p> The time when the pricing plan was created. </p>
    pub fn creation_time(&self) -> i64 {
        self.creation_time
    }
    /// <p> The most recent time when the pricing plan was modified. </p>
    pub fn last_modified_time(&self) -> i64 {
        self.last_modified_time
    }
}
impl std::fmt::Debug for PricingPlanListElement {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PricingPlanListElement");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("arn", &self.arn);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("size", &self.size);
        formatter.field("creation_time", &self.creation_time);
        formatter.field("last_modified_time", &self.last_modified_time);
        formatter.finish()
    }
}
impl PricingPlanListElement {
    /// Creates a new builder-style object to manufacture [`PricingPlanListElement`](crate::types::PricingPlanListElement).
    pub fn builder() -> crate::types::builders::PricingPlanListElementBuilder {
        crate::types::builders::PricingPlanListElementBuilder::default()
    }
}

/// A builder for [`PricingPlanListElement`](crate::types::PricingPlanListElement).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct PricingPlanListElementBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) size: std::option::Option<i64>,
    pub(crate) creation_time: std::option::Option<i64>,
    pub(crate) last_modified_time: std::option::Option<i64>,
}
impl PricingPlanListElementBuilder {
    /// <p>The name of a pricing plan. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of a pricing plan. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The pricing plan Amazon Resource Names (ARN). This can be used to uniquely identify a pricing plan. </p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The pricing plan Amazon Resource Names (ARN). This can be used to uniquely identify a pricing plan. </p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The pricing plan description. </p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The pricing plan description. </p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p> The pricing rules count that's currently associated with this pricing plan list element. </p>
    pub fn size(mut self, input: i64) -> Self {
        self.size = Some(input);
        self
    }
    /// <p> The pricing rules count that's currently associated with this pricing plan list element. </p>
    pub fn set_size(mut self, input: std::option::Option<i64>) -> Self {
        self.size = input;
        self
    }
    /// <p> The time when the pricing plan was created. </p>
    pub fn creation_time(mut self, input: i64) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p> The time when the pricing plan was created. </p>
    pub fn set_creation_time(mut self, input: std::option::Option<i64>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p> The most recent time when the pricing plan was modified. </p>
    pub fn last_modified_time(mut self, input: i64) -> Self {
        self.last_modified_time = Some(input);
        self
    }
    /// <p> The most recent time when the pricing plan was modified. </p>
    pub fn set_last_modified_time(mut self, input: std::option::Option<i64>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// Consumes the builder and constructs a [`PricingPlanListElement`](crate::types::PricingPlanListElement).
    pub fn build(self) -> crate::types::PricingPlanListElement {
        crate::types::PricingPlanListElement {
            name: self.name,
            arn: self.arn,
            description: self.description,
            size: self.size.unwrap_or_default(),
            creation_time: self.creation_time.unwrap_or_default(),
            last_modified_time: self.last_modified_time.unwrap_or_default(),
        }
    }
}
impl std::fmt::Debug for PricingPlanListElementBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PricingPlanListElementBuilder");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("arn", &self.arn);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("size", &self.size);
        formatter.field("creation_time", &self.creation_time);
        formatter.field("last_modified_time", &self.last_modified_time);
        formatter.finish()
    }
}
