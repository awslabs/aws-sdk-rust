// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn service_limit_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceLimitExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceLimitExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.limit_code.is_none() {
        builder.limit_code = Some(Default::default())
    }
    if builder.service_code.is_none() {
        builder.service_code = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn list_custom_line_item_charge_details_correct_errors(
    mut builder: crate::types::builders::ListCustomLineItemChargeDetailsBuilder,
) -> crate::types::builders::ListCustomLineItemChargeDetailsBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::CustomLineItemType>().ok()
    }
    builder
}

pub(crate) fn update_tiering_input_correct_errors(
    mut builder: crate::types::builders::UpdateTieringInputBuilder,
) -> crate::types::builders::UpdateTieringInputBuilder {
    if builder.free_tier.is_none() {
        builder.free_tier = {
            let builder = crate::types::builders::UpdateFreeTierConfigBuilder::default();
            crate::serde_util::update_free_tier_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn list_custom_line_item_flat_charge_details_correct_errors(
    mut builder: crate::types::builders::ListCustomLineItemFlatChargeDetailsBuilder,
) -> crate::types::builders::ListCustomLineItemFlatChargeDetailsBuilder {
    if builder.charge_value.is_none() {
        builder.charge_value = Some(Default::default())
    }
    builder
}

pub(crate) fn list_custom_line_item_percentage_charge_details_correct_errors(
    mut builder: crate::types::builders::ListCustomLineItemPercentageChargeDetailsBuilder,
) -> crate::types::builders::ListCustomLineItemPercentageChargeDetailsBuilder {
    if builder.percentage_value.is_none() {
        builder.percentage_value = Some(Default::default())
    }
    builder
}

pub(crate) fn update_free_tier_config_correct_errors(
    mut builder: crate::types::builders::UpdateFreeTierConfigBuilder,
) -> crate::types::builders::UpdateFreeTierConfigBuilder {
    if builder.activated.is_none() {
        builder.activated = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn computation_preference_correct_errors(
    mut builder: crate::types::builders::ComputationPreferenceBuilder,
) -> crate::types::builders::ComputationPreferenceBuilder {
    if builder.pricing_plan_arn.is_none() {
        builder.pricing_plan_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn line_item_filter_correct_errors(
    mut builder: crate::types::builders::LineItemFilterBuilder,
) -> crate::types::builders::LineItemFilterBuilder {
    if builder.attribute.is_none() {
        builder.attribute = "no value was set".parse::<crate::types::LineItemFilterAttributeName>().ok()
    }
    if builder.match_option.is_none() {
        builder.match_option = "no value was set".parse::<crate::types::MatchOption>().ok()
    }
    if builder.values.is_none() {
        builder.values = Some(Default::default())
    }
    builder
}

pub(crate) fn tiering_correct_errors(mut builder: crate::types::builders::TieringBuilder) -> crate::types::builders::TieringBuilder {
    if builder.free_tier.is_none() {
        builder.free_tier = {
            let builder = crate::types::builders::FreeTierConfigBuilder::default();
            crate::serde_util::free_tier_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn free_tier_config_correct_errors(
    mut builder: crate::types::builders::FreeTierConfigBuilder,
) -> crate::types::builders::FreeTierConfigBuilder {
    if builder.activated.is_none() {
        builder.activated = Some(Default::default())
    }
    builder
}
