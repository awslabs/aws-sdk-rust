// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_accounts_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateAccountsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.account_ids {
        let mut array_2 = object.key("AccountIds").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.arn {
        object.key("Arn").string(var_4.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_pricing_rules_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociatePricingRulesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_5) = &input.arn {
        object.key("Arn").string(var_5.as_str());
    }
    if let Some(var_6) = &input.pricing_rule_arns {
        let mut array_7 = object.key("PricingRuleArns").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_associate_resources_to_custom_line_item_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchAssociateResourcesToCustomLineItemInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_9) = &input.billing_period_range {
        let mut object_10 = object.key("BillingPeriodRange").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_line_item_billing_period_range(
            &mut object_10,
            var_9,
        )?;
        object_10.finish();
    }
    if let Some(var_11) = &input.resource_arns {
        let mut array_12 = object.key("ResourceArns").start_array();
        for item_13 in var_11 {
            {
                array_12.value().string(item_13.as_str());
            }
        }
        array_12.finish();
    }
    if let Some(var_14) = &input.target_arn {
        object.key("TargetArn").string(var_14.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_disassociate_resources_from_custom_line_item_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDisassociateResourcesFromCustomLineItemInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_15) = &input.billing_period_range {
        let mut object_16 = object.key("BillingPeriodRange").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_line_item_billing_period_range(
            &mut object_16,
            var_15,
        )?;
        object_16.finish();
    }
    if let Some(var_17) = &input.resource_arns {
        let mut array_18 = object.key("ResourceArns").start_array();
        for item_19 in var_17 {
            {
                array_18.value().string(item_19.as_str());
            }
        }
        array_18.finish();
    }
    if let Some(var_20) = &input.target_arn {
        object.key("TargetArn").string(var_20.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_billing_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBillingGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_21) = &input.account_grouping {
        let mut object_22 = object.key("AccountGrouping").start_object();
        crate::json_ser::serialize_structure_crate_model_account_grouping(&mut object_22, var_21)?;
        object_22.finish();
    }
    if let Some(var_23) = &input.computation_preference {
        let mut object_24 = object.key("ComputationPreference").start_object();
        crate::json_ser::serialize_structure_crate_model_computation_preference(
            &mut object_24,
            var_23,
        )?;
        object_24.finish();
    }
    if let Some(var_25) = &input.description {
        object.key("Description").string(var_25.as_str());
    }
    if let Some(var_26) = &input.name {
        object.key("Name").string(var_26.as_str());
    }
    if let Some(var_27) = &input.primary_account_id {
        object.key("PrimaryAccountId").string(var_27.as_str());
    }
    if let Some(var_28) = &input.tags {
        let mut object_29 = object.key("Tags").start_object();
        for (key_30, value_31) in var_28 {
            {
                object_29.key(key_30).string(value_31.as_str());
            }
        }
        object_29.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_custom_line_item_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCustomLineItemInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_32) = &input.billing_group_arn {
        object.key("BillingGroupArn").string(var_32.as_str());
    }
    if let Some(var_33) = &input.billing_period_range {
        let mut object_34 = object.key("BillingPeriodRange").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_line_item_billing_period_range(
            &mut object_34,
            var_33,
        )?;
        object_34.finish();
    }
    if let Some(var_35) = &input.charge_details {
        let mut object_36 = object.key("ChargeDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_line_item_charge_details(
            &mut object_36,
            var_35,
        )?;
        object_36.finish();
    }
    if let Some(var_37) = &input.description {
        object.key("Description").string(var_37.as_str());
    }
    if let Some(var_38) = &input.name {
        object.key("Name").string(var_38.as_str());
    }
    if let Some(var_39) = &input.tags {
        let mut object_40 = object.key("Tags").start_object();
        for (key_41, value_42) in var_39 {
            {
                object_40.key(key_41).string(value_42.as_str());
            }
        }
        object_40.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_pricing_plan_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePricingPlanInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_43) = &input.description {
        object.key("Description").string(var_43.as_str());
    }
    if let Some(var_44) = &input.name {
        object.key("Name").string(var_44.as_str());
    }
    if let Some(var_45) = &input.pricing_rule_arns {
        let mut array_46 = object.key("PricingRuleArns").start_array();
        for item_47 in var_45 {
            {
                array_46.value().string(item_47.as_str());
            }
        }
        array_46.finish();
    }
    if let Some(var_48) = &input.tags {
        let mut object_49 = object.key("Tags").start_object();
        for (key_50, value_51) in var_48 {
            {
                object_49.key(key_50).string(value_51.as_str());
            }
        }
        object_49.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_pricing_rule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePricingRuleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_52) = &input.description {
        object.key("Description").string(var_52.as_str());
    }
    if let Some(var_53) = &input.modifier_percentage {
        object.key("ModifierPercentage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_53).into()),
        );
    }
    if let Some(var_54) = &input.name {
        object.key("Name").string(var_54.as_str());
    }
    if let Some(var_55) = &input.scope {
        object.key("Scope").string(var_55.as_str());
    }
    if let Some(var_56) = &input.service {
        object.key("Service").string(var_56.as_str());
    }
    if let Some(var_57) = &input.tags {
        let mut object_58 = object.key("Tags").start_object();
        for (key_59, value_60) in var_57 {
            {
                object_58.key(key_59).string(value_60.as_str());
            }
        }
        object_58.finish();
    }
    if let Some(var_61) = &input.r#type {
        object.key("Type").string(var_61.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_billing_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteBillingGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_62) = &input.arn {
        object.key("Arn").string(var_62.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_custom_line_item_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteCustomLineItemInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_63) = &input.arn {
        object.key("Arn").string(var_63.as_str());
    }
    if let Some(var_64) = &input.billing_period_range {
        let mut object_65 = object.key("BillingPeriodRange").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_line_item_billing_period_range(
            &mut object_65,
            var_64,
        )?;
        object_65.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_pricing_plan_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePricingPlanInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_66) = &input.arn {
        object.key("Arn").string(var_66.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_pricing_rule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePricingRuleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_67) = &input.arn {
        object.key("Arn").string(var_67.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_accounts_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateAccountsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_68) = &input.account_ids {
        let mut array_69 = object.key("AccountIds").start_array();
        for item_70 in var_68 {
            {
                array_69.value().string(item_70.as_str());
            }
        }
        array_69.finish();
    }
    if let Some(var_71) = &input.arn {
        object.key("Arn").string(var_71.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_pricing_rules_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociatePricingRulesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_72) = &input.arn {
        object.key("Arn").string(var_72.as_str());
    }
    if let Some(var_73) = &input.pricing_rule_arns {
        let mut array_74 = object.key("PricingRuleArns").start_array();
        for item_75 in var_73 {
            {
                array_74.value().string(item_75.as_str());
            }
        }
        array_74.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_account_associations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAccountAssociationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_76) = &input.billing_period {
        object.key("BillingPeriod").string(var_76.as_str());
    }
    if let Some(var_77) = &input.filters {
        let mut object_78 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_list_account_associations_filter(
            &mut object_78,
            var_77,
        )?;
        object_78.finish();
    }
    if let Some(var_79) = &input.next_token {
        object.key("NextToken").string(var_79.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_billing_group_cost_reports_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBillingGroupCostReportsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_80) = &input.billing_period {
        object.key("BillingPeriod").string(var_80.as_str());
    }
    if let Some(var_81) = &input.filters {
        let mut object_82 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_list_billing_group_cost_reports_filter(
            &mut object_82,
            var_81,
        )?;
        object_82.finish();
    }
    if let Some(var_83) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_83).into()),
        );
    }
    if let Some(var_84) = &input.next_token {
        object.key("NextToken").string(var_84.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_billing_groups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBillingGroupsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_85) = &input.billing_period {
        object.key("BillingPeriod").string(var_85.as_str());
    }
    if let Some(var_86) = &input.filters {
        let mut object_87 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_list_billing_groups_filter(
            &mut object_87,
            var_86,
        )?;
        object_87.finish();
    }
    if let Some(var_88) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_88).into()),
        );
    }
    if let Some(var_89) = &input.next_token {
        object.key("NextToken").string(var_89.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_custom_line_items_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCustomLineItemsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_90) = &input.billing_period {
        object.key("BillingPeriod").string(var_90.as_str());
    }
    if let Some(var_91) = &input.filters {
        let mut object_92 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_list_custom_line_items_filter(
            &mut object_92,
            var_91,
        )?;
        object_92.finish();
    }
    if let Some(var_93) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_93).into()),
        );
    }
    if let Some(var_94) = &input.next_token {
        object.key("NextToken").string(var_94.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_pricing_plans_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPricingPlansInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_95) = &input.billing_period {
        object.key("BillingPeriod").string(var_95.as_str());
    }
    if let Some(var_96) = &input.filters {
        let mut object_97 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_list_pricing_plans_filter(
            &mut object_97,
            var_96,
        )?;
        object_97.finish();
    }
    if let Some(var_98) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_98).into()),
        );
    }
    if let Some(var_99) = &input.next_token {
        object.key("NextToken").string(var_99.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_pricing_plans_associated_with_pricing_rule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPricingPlansAssociatedWithPricingRuleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_100) = &input.billing_period {
        object.key("BillingPeriod").string(var_100.as_str());
    }
    if let Some(var_101) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_101).into()),
        );
    }
    if let Some(var_102) = &input.next_token {
        object.key("NextToken").string(var_102.as_str());
    }
    if let Some(var_103) = &input.pricing_rule_arn {
        object.key("PricingRuleArn").string(var_103.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_pricing_rules_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPricingRulesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_104) = &input.billing_period {
        object.key("BillingPeriod").string(var_104.as_str());
    }
    if let Some(var_105) = &input.filters {
        let mut object_106 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_list_pricing_rules_filter(
            &mut object_106,
            var_105,
        )?;
        object_106.finish();
    }
    if let Some(var_107) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_107).into()),
        );
    }
    if let Some(var_108) = &input.next_token {
        object.key("NextToken").string(var_108.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_pricing_rules_associated_to_pricing_plan_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPricingRulesAssociatedToPricingPlanInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_109) = &input.billing_period {
        object.key("BillingPeriod").string(var_109.as_str());
    }
    if let Some(var_110) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_110).into()),
        );
    }
    if let Some(var_111) = &input.next_token {
        object.key("NextToken").string(var_111.as_str());
    }
    if let Some(var_112) = &input.pricing_plan_arn {
        object.key("PricingPlanArn").string(var_112.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_resources_associated_to_custom_line_item_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListResourcesAssociatedToCustomLineItemInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_113) = &input.arn {
        object.key("Arn").string(var_113.as_str());
    }
    if let Some(var_114) = &input.billing_period {
        object.key("BillingPeriod").string(var_114.as_str());
    }
    if let Some(var_115) = &input.filters {
        let mut object_116 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_list_resources_associated_to_custom_line_item_filter(&mut object_116, var_115)?;
        object_116.finish();
    }
    if let Some(var_117) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_117).into()),
        );
    }
    if let Some(var_118) = &input.next_token {
        object.key("NextToken").string(var_118.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_119) = &input.tags {
        let mut object_120 = object.key("Tags").start_object();
        for (key_121, value_122) in var_119 {
            {
                object_120.key(key_121).string(value_122.as_str());
            }
        }
        object_120.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_billing_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateBillingGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_123) = &input.arn {
        object.key("Arn").string(var_123.as_str());
    }
    if let Some(var_124) = &input.computation_preference {
        let mut object_125 = object.key("ComputationPreference").start_object();
        crate::json_ser::serialize_structure_crate_model_computation_preference(
            &mut object_125,
            var_124,
        )?;
        object_125.finish();
    }
    if let Some(var_126) = &input.description {
        object.key("Description").string(var_126.as_str());
    }
    if let Some(var_127) = &input.name {
        object.key("Name").string(var_127.as_str());
    }
    if let Some(var_128) = &input.status {
        object.key("Status").string(var_128.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_custom_line_item_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCustomLineItemInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_129) = &input.arn {
        object.key("Arn").string(var_129.as_str());
    }
    if let Some(var_130) = &input.billing_period_range {
        let mut object_131 = object.key("BillingPeriodRange").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_line_item_billing_period_range(
            &mut object_131,
            var_130,
        )?;
        object_131.finish();
    }
    if let Some(var_132) = &input.charge_details {
        let mut object_133 = object.key("ChargeDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_update_custom_line_item_charge_details(
            &mut object_133,
            var_132,
        )?;
        object_133.finish();
    }
    if let Some(var_134) = &input.description {
        object.key("Description").string(var_134.as_str());
    }
    if let Some(var_135) = &input.name {
        object.key("Name").string(var_135.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_pricing_plan_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePricingPlanInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_136) = &input.arn {
        object.key("Arn").string(var_136.as_str());
    }
    if let Some(var_137) = &input.description {
        object.key("Description").string(var_137.as_str());
    }
    if let Some(var_138) = &input.name {
        object.key("Name").string(var_138.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_pricing_rule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePricingRuleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_139) = &input.arn {
        object.key("Arn").string(var_139.as_str());
    }
    if let Some(var_140) = &input.description {
        object.key("Description").string(var_140.as_str());
    }
    if let Some(var_141) = &input.modifier_percentage {
        object.key("ModifierPercentage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_141).into()),
        );
    }
    if let Some(var_142) = &input.name {
        object.key("Name").string(var_142.as_str());
    }
    if let Some(var_143) = &input.r#type {
        object.key("Type").string(var_143.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_line_item_billing_period_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomLineItemBillingPeriodRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_144) = &input.inclusive_start_billing_period {
        object
            .key("InclusiveStartBillingPeriod")
            .string(var_144.as_str());
    }
    if let Some(var_145) = &input.exclusive_end_billing_period {
        object
            .key("ExclusiveEndBillingPeriod")
            .string(var_145.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_account_grouping(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AccountGrouping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_146) = &input.linked_account_ids {
        let mut array_147 = object.key("LinkedAccountIds").start_array();
        for item_148 in var_146 {
            {
                array_147.value().string(item_148.as_str());
            }
        }
        array_147.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_computation_preference(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComputationPreference,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_149) = &input.pricing_plan_arn {
        object.key("PricingPlanArn").string(var_149.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_line_item_charge_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomLineItemChargeDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_150) = &input.flat {
        let mut object_151 = object.key("Flat").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_line_item_flat_charge_details(
            &mut object_151,
            var_150,
        )?;
        object_151.finish();
    }
    if let Some(var_152) = &input.percentage {
        let mut object_153 = object.key("Percentage").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_line_item_percentage_charge_details(&mut object_153, var_152)?;
        object_153.finish();
    }
    if let Some(var_154) = &input.r#type {
        object.key("Type").string(var_154.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_list_account_associations_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ListAccountAssociationsFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_155) = &input.association {
        object.key("Association").string(var_155.as_str());
    }
    if let Some(var_156) = &input.account_id {
        object.key("AccountId").string(var_156.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_list_billing_group_cost_reports_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ListBillingGroupCostReportsFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_157) = &input.billing_group_arns {
        let mut array_158 = object.key("BillingGroupArns").start_array();
        for item_159 in var_157 {
            {
                array_158.value().string(item_159.as_str());
            }
        }
        array_158.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_list_billing_groups_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ListBillingGroupsFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_160) = &input.arns {
        let mut array_161 = object.key("Arns").start_array();
        for item_162 in var_160 {
            {
                array_161.value().string(item_162.as_str());
            }
        }
        array_161.finish();
    }
    if let Some(var_163) = &input.pricing_plan {
        object.key("PricingPlan").string(var_163.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_list_custom_line_items_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ListCustomLineItemsFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_164) = &input.names {
        let mut array_165 = object.key("Names").start_array();
        for item_166 in var_164 {
            {
                array_165.value().string(item_166.as_str());
            }
        }
        array_165.finish();
    }
    if let Some(var_167) = &input.billing_groups {
        let mut array_168 = object.key("BillingGroups").start_array();
        for item_169 in var_167 {
            {
                array_168.value().string(item_169.as_str());
            }
        }
        array_168.finish();
    }
    if let Some(var_170) = &input.arns {
        let mut array_171 = object.key("Arns").start_array();
        for item_172 in var_170 {
            {
                array_171.value().string(item_172.as_str());
            }
        }
        array_171.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_list_pricing_plans_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ListPricingPlansFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_173) = &input.arns {
        let mut array_174 = object.key("Arns").start_array();
        for item_175 in var_173 {
            {
                array_174.value().string(item_175.as_str());
            }
        }
        array_174.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_list_pricing_rules_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ListPricingRulesFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_176) = &input.arns {
        let mut array_177 = object.key("Arns").start_array();
        for item_178 in var_176 {
            {
                array_177.value().string(item_178.as_str());
            }
        }
        array_177.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_list_resources_associated_to_custom_line_item_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ListResourcesAssociatedToCustomLineItemFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_179) = &input.relationship {
        object.key("Relationship").string(var_179.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_custom_line_item_charge_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateCustomLineItemChargeDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_180) = &input.flat {
        let mut object_181 = object.key("Flat").start_object();
        crate::json_ser::serialize_structure_crate_model_update_custom_line_item_flat_charge_details(&mut object_181, var_180)?;
        object_181.finish();
    }
    if let Some(var_182) = &input.percentage {
        let mut object_183 = object.key("Percentage").start_object();
        crate::json_ser::serialize_structure_crate_model_update_custom_line_item_percentage_charge_details(&mut object_183, var_182)?;
        object_183.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_line_item_flat_charge_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomLineItemFlatChargeDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_184) = &input.charge_value {
        object.key("ChargeValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_184).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_line_item_percentage_charge_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomLineItemPercentageChargeDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_185) = &input.percentage_value {
        object.key("PercentageValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_185).into()),
        );
    }
    if let Some(var_186) = &input.associated_values {
        let mut array_187 = object.key("AssociatedValues").start_array();
        for item_188 in var_186 {
            {
                array_187.value().string(item_188.as_str());
            }
        }
        array_187.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_custom_line_item_flat_charge_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateCustomLineItemFlatChargeDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_189) = &input.charge_value {
        object.key("ChargeValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_189).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_custom_line_item_percentage_charge_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateCustomLineItemPercentageChargeDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_190) = &input.percentage_value {
        object.key("PercentageValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_190).into()),
        );
    }
    Ok(())
}
