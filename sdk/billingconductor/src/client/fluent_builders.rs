// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Fluent builder constructing a request to `AssociateAccounts`.
///
/// <p>Connects an array of account IDs in a consolidated billing family to a predefined billing group. The account IDs must be a part of the consolidated billing family during the current month, and not already associated with another billing group. The maximum number of accounts that can be associated in one call is 30. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct AssociateAccounts {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::associate_accounts_input::Builder,
}
impl AssociateAccounts {
    /// Creates a new `AssociateAccounts`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::AssociateAccounts,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::AssociateAccountsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::AssociateAccountsOutput,
        aws_smithy_http::result::SdkError<crate::error::AssociateAccountsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The Amazon Resource Name (ARN) of the billing group that associates the array of account IDs. </p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.arn(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the billing group that associates the array of account IDs. </p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_arn(input);
        self
    }
    /// Appends an item to `AccountIds`.
    ///
    /// To override the contents of this collection use [`set_account_ids`](Self::set_account_ids).
    ///
    /// <p> The associating array of account IDs. </p>
    pub fn account_ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.account_ids(input.into());
        self
    }
    /// <p> The associating array of account IDs. </p>
    pub fn set_account_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_account_ids(input);
        self
    }
}

/// Fluent builder constructing a request to `AssociatePricingRules`.
///
/// <p>Connects an array of <code>PricingRuleArns</code> to a defined <code>PricingPlan</code>. The maximum number <code>PricingRuleArn</code> that can be associated in one call is 30. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct AssociatePricingRules {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::associate_pricing_rules_input::Builder,
}
impl AssociatePricingRules {
    /// Creates a new `AssociatePricingRules`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::AssociatePricingRules,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::AssociatePricingRulesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::AssociatePricingRulesOutput,
        aws_smithy_http::result::SdkError<crate::error::AssociatePricingRulesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The <code>PricingPlanArn</code> that the <code>PricingRuleArns</code> are associated with. </p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.arn(input.into());
        self
    }
    /// <p> The <code>PricingPlanArn</code> that the <code>PricingRuleArns</code> are associated with. </p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_arn(input);
        self
    }
    /// Appends an item to `PricingRuleArns`.
    ///
    /// To override the contents of this collection use [`set_pricing_rule_arns`](Self::set_pricing_rule_arns).
    ///
    /// <p> The <code>PricingRuleArns</code> that are associated with the Pricing Plan. </p>
    pub fn pricing_rule_arns(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pricing_rule_arns(input.into());
        self
    }
    /// <p> The <code>PricingRuleArns</code> that are associated with the Pricing Plan. </p>
    pub fn set_pricing_rule_arns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_pricing_rule_arns(input);
        self
    }
}

/// Fluent builder constructing a request to `BatchAssociateResourcesToCustomLineItem`.
///
/// <p> Associates a batch of resources to a percentage custom line item. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct BatchAssociateResourcesToCustomLineItem {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::batch_associate_resources_to_custom_line_item_input::Builder,
}
impl BatchAssociateResourcesToCustomLineItem {
    /// Creates a new `BatchAssociateResourcesToCustomLineItem`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::BatchAssociateResourcesToCustomLineItem,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::error::BatchAssociateResourcesToCustomLineItemError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::BatchAssociateResourcesToCustomLineItemOutput,
        aws_smithy_http::result::SdkError<
            crate::error::BatchAssociateResourcesToCustomLineItemError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> A percentage custom line item ARN to associate the resources to. </p>
    pub fn target_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.target_arn(input.into());
        self
    }
    /// <p> A percentage custom line item ARN to associate the resources to. </p>
    pub fn set_target_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_target_arn(input);
        self
    }
    /// Appends an item to `ResourceArns`.
    ///
    /// To override the contents of this collection use [`set_resource_arns`](Self::set_resource_arns).
    ///
    /// <p> A list containing the ARNs of the resources to be associated. </p>
    pub fn resource_arns(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arns(input.into());
        self
    }
    /// <p> A list containing the ARNs of the resources to be associated. </p>
    pub fn set_resource_arns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_resource_arns(input);
        self
    }
    /// <p> The billing period range in which the custom line item request will be applied. </p>
    pub fn billing_period_range(
        mut self,
        input: crate::model::CustomLineItemBillingPeriodRange,
    ) -> Self {
        self.inner = self.inner.billing_period_range(input);
        self
    }
    /// <p> The billing period range in which the custom line item request will be applied. </p>
    pub fn set_billing_period_range(
        mut self,
        input: std::option::Option<crate::model::CustomLineItemBillingPeriodRange>,
    ) -> Self {
        self.inner = self.inner.set_billing_period_range(input);
        self
    }
}

/// Fluent builder constructing a request to `BatchDisassociateResourcesFromCustomLineItem`.
///
/// <p> Disassociates a batch of resources from a percentage custom line item. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct BatchDisassociateResourcesFromCustomLineItem {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::batch_disassociate_resources_from_custom_line_item_input::Builder,
}
impl BatchDisassociateResourcesFromCustomLineItem {
    /// Creates a new `BatchDisassociateResourcesFromCustomLineItem`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::BatchDisassociateResourcesFromCustomLineItem,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::error::BatchDisassociateResourcesFromCustomLineItemError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::BatchDisassociateResourcesFromCustomLineItemOutput,
        aws_smithy_http::result::SdkError<
            crate::error::BatchDisassociateResourcesFromCustomLineItemError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> A percentage custom line item ARN to disassociate the resources from. </p>
    pub fn target_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.target_arn(input.into());
        self
    }
    /// <p> A percentage custom line item ARN to disassociate the resources from. </p>
    pub fn set_target_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_target_arn(input);
        self
    }
    /// Appends an item to `ResourceArns`.
    ///
    /// To override the contents of this collection use [`set_resource_arns`](Self::set_resource_arns).
    ///
    /// <p> A list containing the ARNs of resources to be disassociated. </p>
    pub fn resource_arns(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arns(input.into());
        self
    }
    /// <p> A list containing the ARNs of resources to be disassociated. </p>
    pub fn set_resource_arns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_resource_arns(input);
        self
    }
    /// <p> The billing period range in which the custom line item request will be applied. </p>
    pub fn billing_period_range(
        mut self,
        input: crate::model::CustomLineItemBillingPeriodRange,
    ) -> Self {
        self.inner = self.inner.billing_period_range(input);
        self
    }
    /// <p> The billing period range in which the custom line item request will be applied. </p>
    pub fn set_billing_period_range(
        mut self,
        input: std::option::Option<crate::model::CustomLineItemBillingPeriodRange>,
    ) -> Self {
        self.inner = self.inner.set_billing_period_range(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateBillingGroup`.
///
/// <p> Creates a billing group that resembles a consolidated billing family that Amazon Web Services charges, based off of the predefined pricing plan computation. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateBillingGroup {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_billing_group_input::Builder,
}
impl CreateBillingGroup {
    /// Creates a new `CreateBillingGroup`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateBillingGroup,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateBillingGroupError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateBillingGroupOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateBillingGroupError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The token that is needed to support idempotency. Idempotency isn't currently supported, but will be implemented in a future update. </p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p> The token that is needed to support idempotency. Idempotency isn't currently supported, but will be implemented in a future update. </p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p> The billing group name. The names must be unique. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p> The billing group name. The names must be unique. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p> The set of accounts that will be under the billing group. The set of accounts resemble the linked accounts in a consolidated family. </p>
    pub fn account_grouping(mut self, input: crate::model::AccountGrouping) -> Self {
        self.inner = self.inner.account_grouping(input);
        self
    }
    /// <p> The set of accounts that will be under the billing group. The set of accounts resemble the linked accounts in a consolidated family. </p>
    pub fn set_account_grouping(
        mut self,
        input: std::option::Option<crate::model::AccountGrouping>,
    ) -> Self {
        self.inner = self.inner.set_account_grouping(input);
        self
    }
    /// <p> The preferences and settings that will be used to compute the Amazon Web Services charges for a billing group. </p>
    pub fn computation_preference(mut self, input: crate::model::ComputationPreference) -> Self {
        self.inner = self.inner.computation_preference(input);
        self
    }
    /// <p> The preferences and settings that will be used to compute the Amazon Web Services charges for a billing group. </p>
    pub fn set_computation_preference(
        mut self,
        input: std::option::Option<crate::model::ComputationPreference>,
    ) -> Self {
        self.inner = self.inner.set_computation_preference(input);
        self
    }
    /// <p> The account ID that serves as the main account in a billing group. </p>
    pub fn primary_account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.primary_account_id(input.into());
        self
    }
    /// <p> The account ID that serves as the main account in a billing group. </p>
    pub fn set_primary_account_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_primary_account_id(input);
        self
    }
    /// <p>The description of the billing group. </p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The description of the billing group. </p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// Adds a key-value pair to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p> A map that contains tag keys and tag values that are attached to a billing group. This feature isn't available during the beta. </p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p> A map that contains tag keys and tag values that are attached to a billing group. This feature isn't available during the beta. </p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateCustomLineItem`.
///
/// <p> Creates a custom line item that can be used to create a one-time fixed charge that can be applied to a single billing group for the current or previous billing period. The one-time fixed charge is either a fee or discount. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateCustomLineItem {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_custom_line_item_input::Builder,
}
impl CreateCustomLineItem {
    /// Creates a new `CreateCustomLineItem`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateCustomLineItem,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateCustomLineItemError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateCustomLineItemOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateCustomLineItemError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The token that is needed to support idempotency. Idempotency isn't currently supported, but will be implemented in a future update. </p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p> The token that is needed to support idempotency. Idempotency isn't currently supported, but will be implemented in a future update. </p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p> The name of the custom line item. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p> The name of the custom line item. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p> The description of the custom line item. This is shown on the Bills page in association with the charge value. </p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p> The description of the custom line item. This is shown on the Bills page in association with the charge value. </p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p> The Amazon Resource Name (ARN) that references the billing group where the custom line item applies to. </p>
    pub fn billing_group_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.billing_group_arn(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) that references the billing group where the custom line item applies to. </p>
    pub fn set_billing_group_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_billing_group_arn(input);
        self
    }
    /// <p> A time range for which the custom line item is effective. </p>
    pub fn billing_period_range(
        mut self,
        input: crate::model::CustomLineItemBillingPeriodRange,
    ) -> Self {
        self.inner = self.inner.billing_period_range(input);
        self
    }
    /// <p> A time range for which the custom line item is effective. </p>
    pub fn set_billing_period_range(
        mut self,
        input: std::option::Option<crate::model::CustomLineItemBillingPeriodRange>,
    ) -> Self {
        self.inner = self.inner.set_billing_period_range(input);
        self
    }
    /// Adds a key-value pair to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p> A map that contains tag keys and tag values that are attached to a custom line item. </p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p> A map that contains tag keys and tag values that are attached to a custom line item. </p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p> A <code>CustomLineItemChargeDetails</code> that describes the charge details for a custom line item. </p>
    pub fn charge_details(mut self, input: crate::model::CustomLineItemChargeDetails) -> Self {
        self.inner = self.inner.charge_details(input);
        self
    }
    /// <p> A <code>CustomLineItemChargeDetails</code> that describes the charge details for a custom line item. </p>
    pub fn set_charge_details(
        mut self,
        input: std::option::Option<crate::model::CustomLineItemChargeDetails>,
    ) -> Self {
        self.inner = self.inner.set_charge_details(input);
        self
    }
}

/// Fluent builder constructing a request to `CreatePricingPlan`.
///
/// <p>Creates a pricing plan that is used for computing Amazon Web Services charges for billing groups. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreatePricingPlan {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_pricing_plan_input::Builder,
}
impl CreatePricingPlan {
    /// Creates a new `CreatePricingPlan`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreatePricingPlan,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreatePricingPlanError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreatePricingPlanOutput,
        aws_smithy_http::result::SdkError<crate::error::CreatePricingPlanError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The token that is needed to support idempotency. Idempotency isn't currently supported, but will be implemented in a future update. </p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p> The token that is needed to support idempotency. Idempotency isn't currently supported, but will be implemented in a future update. </p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>The name of the pricing plan. The names must be unique to each pricing plan. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the pricing plan. The names must be unique to each pricing plan. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The description of the pricing plan. </p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The description of the pricing plan. </p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// Appends an item to `PricingRuleArns`.
    ///
    /// To override the contents of this collection use [`set_pricing_rule_arns`](Self::set_pricing_rule_arns).
    ///
    /// <p> A list of Amazon Resource Names (ARNs) that define the pricing plan parameters. </p>
    pub fn pricing_rule_arns(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pricing_rule_arns(input.into());
        self
    }
    /// <p> A list of Amazon Resource Names (ARNs) that define the pricing plan parameters. </p>
    pub fn set_pricing_rule_arns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_pricing_rule_arns(input);
        self
    }
    /// Adds a key-value pair to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p> A map that contains tag keys and tag values that are attached to a pricing plan. </p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p> A map that contains tag keys and tag values that are attached to a pricing plan. </p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `CreatePricingRule`.
///
/// <p> Creates a pricing rule can be associated to a pricing plan, or a set of pricing plans. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreatePricingRule {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_pricing_rule_input::Builder,
}
impl CreatePricingRule {
    /// Creates a new `CreatePricingRule`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreatePricingRule,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreatePricingRuleError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreatePricingRuleOutput,
        aws_smithy_http::result::SdkError<crate::error::CreatePricingRuleError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The token that's needed to support idempotency. Idempotency isn't currently supported, but will be implemented in a future update. </p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p> The token that's needed to support idempotency. Idempotency isn't currently supported, but will be implemented in a future update. </p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p> The pricing rule name. The names must be unique to each pricing rule. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p> The pricing rule name. The names must be unique to each pricing rule. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p> The pricing rule description. </p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p> The pricing rule description. </p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p> The scope of pricing rule that indicates if it's globally applicable, or it's service-specific. </p>
    pub fn scope(mut self, input: crate::model::PricingRuleScope) -> Self {
        self.inner = self.inner.scope(input);
        self
    }
    /// <p> The scope of pricing rule that indicates if it's globally applicable, or it's service-specific. </p>
    pub fn set_scope(mut self, input: std::option::Option<crate::model::PricingRuleScope>) -> Self {
        self.inner = self.inner.set_scope(input);
        self
    }
    /// <p> The type of pricing rule. </p>
    pub fn r#type(mut self, input: crate::model::PricingRuleType) -> Self {
        self.inner = self.inner.r#type(input);
        self
    }
    /// <p> The type of pricing rule. </p>
    pub fn set_type(mut self, input: std::option::Option<crate::model::PricingRuleType>) -> Self {
        self.inner = self.inner.set_type(input);
        self
    }
    /// <p> A percentage modifier that's applied on the public pricing rates. </p>
    pub fn modifier_percentage(mut self, input: f64) -> Self {
        self.inner = self.inner.modifier_percentage(input);
        self
    }
    /// <p> A percentage modifier that's applied on the public pricing rates. </p>
    pub fn set_modifier_percentage(mut self, input: std::option::Option<f64>) -> Self {
        self.inner = self.inner.set_modifier_percentage(input);
        self
    }
    /// <p> If the <code>Scope</code> attribute is set to <code>SERVICE</code> or <code>SKU</code>, the attribute indicates which service the <code>PricingRule</code> is applicable for. </p>
    pub fn service(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.service(input.into());
        self
    }
    /// <p> If the <code>Scope</code> attribute is set to <code>SERVICE</code> or <code>SKU</code>, the attribute indicates which service the <code>PricingRule</code> is applicable for. </p>
    pub fn set_service(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_service(input);
        self
    }
    /// Adds a key-value pair to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p> A map that contains tag keys and tag values that are attached to a pricing rule. </p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p> A map that contains tag keys and tag values that are attached to a pricing rule. </p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p> The seller of services provided by Amazon Web Services, their affiliates, or third-party providers selling services via Amazon Web Services Marketplace. </p>
    pub fn billing_entity(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.billing_entity(input.into());
        self
    }
    /// <p> The seller of services provided by Amazon Web Services, their affiliates, or third-party providers selling services via Amazon Web Services Marketplace. </p>
    pub fn set_billing_entity(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_billing_entity(input);
        self
    }
    /// <p> The set of tiering configurations for the pricing rule. </p>
    pub fn tiering(mut self, input: crate::model::CreateTieringInput) -> Self {
        self.inner = self.inner.tiering(input);
        self
    }
    /// <p> The set of tiering configurations for the pricing rule. </p>
    pub fn set_tiering(
        mut self,
        input: std::option::Option<crate::model::CreateTieringInput>,
    ) -> Self {
        self.inner = self.inner.set_tiering(input);
        self
    }
    /// <p> Usage type is the unit that each service uses to measure the usage of a specific type of resource.</p>
    /// <p>If the <code>Scope</code> attribute is set to <code>SKU</code>, this attribute indicates which usage type the <code>PricingRule</code> is modifying. For example, <code>USW2-BoxUsage:m2.2xlarge</code> describes an<code> M2 High Memory Double Extra Large</code> instance in the US West (Oregon) Region. </p>
    pub fn usage_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.usage_type(input.into());
        self
    }
    /// <p> Usage type is the unit that each service uses to measure the usage of a specific type of resource.</p>
    /// <p>If the <code>Scope</code> attribute is set to <code>SKU</code>, this attribute indicates which usage type the <code>PricingRule</code> is modifying. For example, <code>USW2-BoxUsage:m2.2xlarge</code> describes an<code> M2 High Memory Double Extra Large</code> instance in the US West (Oregon) Region. </p>
    pub fn set_usage_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_usage_type(input);
        self
    }
    /// <p> Operation is the specific Amazon Web Services action covered by this line item. This describes the specific usage of the line item.</p>
    /// <p> If the <code>Scope</code> attribute is set to <code>SKU</code>, this attribute indicates which operation the <code>PricingRule</code> is modifying. For example, a value of <code>RunInstances:0202</code> indicates the operation of running an Amazon EC2 instance.</p>
    pub fn operation(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.operation(input.into());
        self
    }
    /// <p> Operation is the specific Amazon Web Services action covered by this line item. This describes the specific usage of the line item.</p>
    /// <p> If the <code>Scope</code> attribute is set to <code>SKU</code>, this attribute indicates which operation the <code>PricingRule</code> is modifying. For example, a value of <code>RunInstances:0202</code> indicates the operation of running an Amazon EC2 instance.</p>
    pub fn set_operation(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_operation(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteBillingGroup`.
///
/// <p> Deletes a billing group. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteBillingGroup {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_billing_group_input::Builder,
}
impl DeleteBillingGroup {
    /// Creates a new `DeleteBillingGroup`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteBillingGroup,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteBillingGroupError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteBillingGroupOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteBillingGroupError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the billing group that you're deleting.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the billing group that you're deleting.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteCustomLineItem`.
///
/// <p> Deletes the custom line item identified by the given ARN in the current, or previous billing period. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteCustomLineItem {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_custom_line_item_input::Builder,
}
impl DeleteCustomLineItem {
    /// Creates a new `DeleteCustomLineItem`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteCustomLineItem,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteCustomLineItemError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteCustomLineItemOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteCustomLineItemError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The ARN of the custom line item to be deleted. </p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.arn(input.into());
        self
    }
    /// <p> The ARN of the custom line item to be deleted. </p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_arn(input);
        self
    }
    /// <p> The billing period range in which the custom line item request will be applied. </p>
    pub fn billing_period_range(
        mut self,
        input: crate::model::CustomLineItemBillingPeriodRange,
    ) -> Self {
        self.inner = self.inner.billing_period_range(input);
        self
    }
    /// <p> The billing period range in which the custom line item request will be applied. </p>
    pub fn set_billing_period_range(
        mut self,
        input: std::option::Option<crate::model::CustomLineItemBillingPeriodRange>,
    ) -> Self {
        self.inner = self.inner.set_billing_period_range(input);
        self
    }
}

/// Fluent builder constructing a request to `DeletePricingPlan`.
///
/// <p>Deletes a pricing plan. The pricing plan must not be associated with any billing groups to delete successfully.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeletePricingPlan {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_pricing_plan_input::Builder,
}
impl DeletePricingPlan {
    /// Creates a new `DeletePricingPlan`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeletePricingPlan,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeletePricingPlanError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeletePricingPlanOutput,
        aws_smithy_http::result::SdkError<crate::error::DeletePricingPlanError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the pricing plan that you're deleting. </p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the pricing plan that you're deleting. </p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `DeletePricingRule`.
///
/// <p> Deletes the pricing rule that's identified by the input Amazon Resource Name (ARN). </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeletePricingRule {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_pricing_rule_input::Builder,
}
impl DeletePricingRule {
    /// Creates a new `DeletePricingRule`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeletePricingRule,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeletePricingRuleError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeletePricingRuleOutput,
        aws_smithy_http::result::SdkError<crate::error::DeletePricingRuleError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The Amazon Resource Name (ARN) of the pricing rule that you are deleting. </p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.arn(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the pricing rule that you are deleting. </p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `DisassociateAccounts`.
///
/// <p>Removes the specified list of account IDs from the given billing group. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateAccounts {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::disassociate_accounts_input::Builder,
}
impl DisassociateAccounts {
    /// Creates a new `DisassociateAccounts`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DisassociateAccounts,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DisassociateAccountsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DisassociateAccountsOutput,
        aws_smithy_http::result::SdkError<crate::error::DisassociateAccountsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the billing group that the array of account IDs will disassociate from. </p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the billing group that the array of account IDs will disassociate from. </p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_arn(input);
        self
    }
    /// Appends an item to `AccountIds`.
    ///
    /// To override the contents of this collection use [`set_account_ids`](Self::set_account_ids).
    ///
    /// <p>The array of account IDs to disassociate. </p>
    pub fn account_ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.account_ids(input.into());
        self
    }
    /// <p>The array of account IDs to disassociate. </p>
    pub fn set_account_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_account_ids(input);
        self
    }
}

/// Fluent builder constructing a request to `DisassociatePricingRules`.
///
/// <p> Disassociates a list of pricing rules from a pricing plan. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DisassociatePricingRules {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::disassociate_pricing_rules_input::Builder,
}
impl DisassociatePricingRules {
    /// Creates a new `DisassociatePricingRules`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DisassociatePricingRules,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DisassociatePricingRulesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DisassociatePricingRulesOutput,
        aws_smithy_http::result::SdkError<crate::error::DisassociatePricingRulesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The pricing plan Amazon Resource Name (ARN) to disassociate pricing rules from. </p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.arn(input.into());
        self
    }
    /// <p> The pricing plan Amazon Resource Name (ARN) to disassociate pricing rules from. </p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_arn(input);
        self
    }
    /// Appends an item to `PricingRuleArns`.
    ///
    /// To override the contents of this collection use [`set_pricing_rule_arns`](Self::set_pricing_rule_arns).
    ///
    /// <p> A list containing the Amazon Resource Name (ARN) of the pricing rules that will be disassociated. </p>
    pub fn pricing_rule_arns(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pricing_rule_arns(input.into());
        self
    }
    /// <p> A list containing the Amazon Resource Name (ARN) of the pricing rules that will be disassociated. </p>
    pub fn set_pricing_rule_arns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_pricing_rule_arns(input);
        self
    }
}

/// Fluent builder constructing a request to `ListAccountAssociations`.
///
/// <p> This is a paginated call to list linked accounts that are linked to the payer account for the specified time period. If no information is provided, the current billing period is used. The response will optionally include the billing group that's associated with the linked account.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListAccountAssociations {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_account_associations_input::Builder,
}
impl ListAccountAssociations {
    /// Creates a new `ListAccountAssociations`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListAccountAssociations,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListAccountAssociationsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListAccountAssociationsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListAccountAssociationsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListAccountAssociationsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListAccountAssociationsPaginator {
        crate::paginator::ListAccountAssociationsPaginator::new(self.handle, self.inner)
    }
    /// <p> The preferred billing period to get account associations. </p>
    pub fn billing_period(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.billing_period(input.into());
        self
    }
    /// <p> The preferred billing period to get account associations. </p>
    pub fn set_billing_period(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_billing_period(input);
        self
    }
    /// <p>The filter on the account ID of the linked account, or any of the following:</p>
    /// <p> <code>MONITORED</code>: linked accounts that are associated to billing groups.</p>
    /// <p> <code>UNMONITORED</code>: linked accounts that aren't associated to billing groups.</p>
    /// <p> <code>Billing Group Arn</code>: linked accounts that are associated to the provided billing group Arn. </p>
    pub fn filters(mut self, input: crate::model::ListAccountAssociationsFilter) -> Self {
        self.inner = self.inner.filters(input);
        self
    }
    /// <p>The filter on the account ID of the linked account, or any of the following:</p>
    /// <p> <code>MONITORED</code>: linked accounts that are associated to billing groups.</p>
    /// <p> <code>UNMONITORED</code>: linked accounts that aren't associated to billing groups.</p>
    /// <p> <code>Billing Group Arn</code>: linked accounts that are associated to the provided billing group Arn. </p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<crate::model::ListAccountAssociationsFilter>,
    ) -> Self {
        self.inner = self.inner.set_filters(input);
        self
    }
    /// <p> The pagination token that's used on subsequent calls to retrieve accounts. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> The pagination token that's used on subsequent calls to retrieve accounts. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListBillingGroupCostReports`.
///
/// <p>A paginated call to retrieve a summary report of actual Amazon Web Services charges and the calculated Amazon Web Services charges based on the associated pricing plan of a billing group.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListBillingGroupCostReports {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_billing_group_cost_reports_input::Builder,
}
impl ListBillingGroupCostReports {
    /// Creates a new `ListBillingGroupCostReports`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListBillingGroupCostReports,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListBillingGroupCostReportsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListBillingGroupCostReportsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListBillingGroupCostReportsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListBillingGroupCostReportsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListBillingGroupCostReportsPaginator {
        crate::paginator::ListBillingGroupCostReportsPaginator::new(self.handle, self.inner)
    }
    /// <p>The preferred billing period for your report. </p>
    pub fn billing_period(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.billing_period(input.into());
        self
    }
    /// <p>The preferred billing period for your report. </p>
    pub fn set_billing_period(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_billing_period(input);
        self
    }
    /// <p>The maximum number of reports to retrieve. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of reports to retrieve. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The pagination token that's used on subsequent calls to get reports. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The pagination token that's used on subsequent calls to get reports. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>A <code>ListBillingGroupCostReportsFilter</code> to specify billing groups to retrieve reports from. </p>
    pub fn filters(mut self, input: crate::model::ListBillingGroupCostReportsFilter) -> Self {
        self.inner = self.inner.filters(input);
        self
    }
    /// <p>A <code>ListBillingGroupCostReportsFilter</code> to specify billing groups to retrieve reports from. </p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<crate::model::ListBillingGroupCostReportsFilter>,
    ) -> Self {
        self.inner = self.inner.set_filters(input);
        self
    }
}

/// Fluent builder constructing a request to `ListBillingGroups`.
///
/// <p>A paginated call to retrieve a list of billing groups for the given billing period. If you don't provide a billing group, the current billing period is used.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListBillingGroups {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_billing_groups_input::Builder,
}
impl ListBillingGroups {
    /// Creates a new `ListBillingGroups`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListBillingGroups,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListBillingGroupsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListBillingGroupsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListBillingGroupsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListBillingGroupsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListBillingGroupsPaginator {
        crate::paginator::ListBillingGroupsPaginator::new(self.handle, self.inner)
    }
    /// <p>The preferred billing period to get billing groups. </p>
    pub fn billing_period(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.billing_period(input.into());
        self
    }
    /// <p>The preferred billing period to get billing groups. </p>
    pub fn set_billing_period(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_billing_period(input);
        self
    }
    /// <p>The maximum number of billing groups to retrieve. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of billing groups to retrieve. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The pagination token that's used on subsequent calls to get billing groups. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The pagination token that's used on subsequent calls to get billing groups. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>A <code>ListBillingGroupsFilter</code> that specifies the billing group and pricing plan to retrieve billing group information. </p>
    pub fn filters(mut self, input: crate::model::ListBillingGroupsFilter) -> Self {
        self.inner = self.inner.filters(input);
        self
    }
    /// <p>A <code>ListBillingGroupsFilter</code> that specifies the billing group and pricing plan to retrieve billing group information. </p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<crate::model::ListBillingGroupsFilter>,
    ) -> Self {
        self.inner = self.inner.set_filters(input);
        self
    }
}

/// Fluent builder constructing a request to `ListCustomLineItems`.
///
/// <p> A paginated call to get a list of all custom line items (FFLIs) for the given billing period. If you don't provide a billing period, the current billing period is used. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListCustomLineItems {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_custom_line_items_input::Builder,
}
impl ListCustomLineItems {
    /// Creates a new `ListCustomLineItems`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListCustomLineItems,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListCustomLineItemsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListCustomLineItemsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListCustomLineItemsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListCustomLineItemsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListCustomLineItemsPaginator {
        crate::paginator::ListCustomLineItemsPaginator::new(self.handle, self.inner)
    }
    /// <p> The preferred billing period to get custom line items (FFLIs). </p>
    pub fn billing_period(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.billing_period(input.into());
        self
    }
    /// <p> The preferred billing period to get custom line items (FFLIs). </p>
    pub fn set_billing_period(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_billing_period(input);
        self
    }
    /// <p> The maximum number of billing groups to retrieve. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p> The maximum number of billing groups to retrieve. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p> The pagination token that's used on subsequent calls to get custom line items (FFLIs). </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> The pagination token that's used on subsequent calls to get custom line items (FFLIs). </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>A <code>ListCustomLineItemsFilter</code> that specifies the custom line item names and/or billing group Amazon Resource Names (ARNs) to retrieve FFLI information.</p>
    pub fn filters(mut self, input: crate::model::ListCustomLineItemsFilter) -> Self {
        self.inner = self.inner.filters(input);
        self
    }
    /// <p>A <code>ListCustomLineItemsFilter</code> that specifies the custom line item names and/or billing group Amazon Resource Names (ARNs) to retrieve FFLI information.</p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<crate::model::ListCustomLineItemsFilter>,
    ) -> Self {
        self.inner = self.inner.set_filters(input);
        self
    }
}

/// Fluent builder constructing a request to `ListCustomLineItemVersions`.
///
/// <p>A paginated call to get a list of all custom line item versions.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListCustomLineItemVersions {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_custom_line_item_versions_input::Builder,
}
impl ListCustomLineItemVersions {
    /// Creates a new `ListCustomLineItemVersions`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListCustomLineItemVersions,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListCustomLineItemVersionsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListCustomLineItemVersionsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListCustomLineItemVersionsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListCustomLineItemVersionsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListCustomLineItemVersionsPaginator {
        crate::paginator::ListCustomLineItemVersionsPaginator::new(self.handle, self.inner)
    }
    /// <p>The Amazon Resource Name (ARN) for the custom line item.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the custom line item.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_arn(input);
        self
    }
    /// <p>The maximum number of custom line item versions to retrieve.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of custom line item versions to retrieve.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The pagination token that's used on subsequent calls to retrieve custom line item versions.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The pagination token that's used on subsequent calls to retrieve custom line item versions.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>A <code>ListCustomLineItemVersionsFilter</code> that specifies the billing period range in which the custom line item versions are applied.</p>
    pub fn filters(mut self, input: crate::model::ListCustomLineItemVersionsFilter) -> Self {
        self.inner = self.inner.filters(input);
        self
    }
    /// <p>A <code>ListCustomLineItemVersionsFilter</code> that specifies the billing period range in which the custom line item versions are applied.</p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<crate::model::ListCustomLineItemVersionsFilter>,
    ) -> Self {
        self.inner = self.inner.set_filters(input);
        self
    }
}

/// Fluent builder constructing a request to `ListPricingPlans`.
///
/// <p>A paginated call to get pricing plans for the given billing period. If you don't provide a billing period, the current billing period is used. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListPricingPlans {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_pricing_plans_input::Builder,
}
impl ListPricingPlans {
    /// Creates a new `ListPricingPlans`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListPricingPlans,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListPricingPlansError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListPricingPlansOutput,
        aws_smithy_http::result::SdkError<crate::error::ListPricingPlansError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListPricingPlansPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListPricingPlansPaginator {
        crate::paginator::ListPricingPlansPaginator::new(self.handle, self.inner)
    }
    /// <p>The preferred billing period to get pricing plan. </p>
    pub fn billing_period(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.billing_period(input.into());
        self
    }
    /// <p>The preferred billing period to get pricing plan. </p>
    pub fn set_billing_period(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_billing_period(input);
        self
    }
    /// <p>A <code>ListPricingPlansFilter</code> that specifies the Amazon Resource Name (ARNs) of pricing plans to retrieve pricing plans information.</p>
    pub fn filters(mut self, input: crate::model::ListPricingPlansFilter) -> Self {
        self.inner = self.inner.filters(input);
        self
    }
    /// <p>A <code>ListPricingPlansFilter</code> that specifies the Amazon Resource Name (ARNs) of pricing plans to retrieve pricing plans information.</p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<crate::model::ListPricingPlansFilter>,
    ) -> Self {
        self.inner = self.inner.set_filters(input);
        self
    }
    /// <p>The maximum number of pricing plans to retrieve.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of pricing plans to retrieve.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The pagination token that's used on subsequent call to get pricing plans. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The pagination token that's used on subsequent call to get pricing plans. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListPricingPlansAssociatedWithPricingRule`.
///
/// <p> A list of the pricing plans that are associated with a pricing rule. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListPricingPlansAssociatedWithPricingRule {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_pricing_plans_associated_with_pricing_rule_input::Builder,
}
impl ListPricingPlansAssociatedWithPricingRule {
    /// Creates a new `ListPricingPlansAssociatedWithPricingRule`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListPricingPlansAssociatedWithPricingRule,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::error::ListPricingPlansAssociatedWithPricingRuleError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListPricingPlansAssociatedWithPricingRuleOutput,
        aws_smithy_http::result::SdkError<
            crate::error::ListPricingPlansAssociatedWithPricingRuleError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListPricingPlansAssociatedWithPricingRulePaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::paginator::ListPricingPlansAssociatedWithPricingRulePaginator {
        crate::paginator::ListPricingPlansAssociatedWithPricingRulePaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// <p> The pricing plan billing period for which associations will be listed. </p>
    pub fn billing_period(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.billing_period(input.into());
        self
    }
    /// <p> The pricing plan billing period for which associations will be listed. </p>
    pub fn set_billing_period(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_billing_period(input);
        self
    }
    /// <p> The pricing rule Amazon Resource Name (ARN) for which associations will be listed. </p>
    pub fn pricing_rule_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pricing_rule_arn(input.into());
        self
    }
    /// <p> The pricing rule Amazon Resource Name (ARN) for which associations will be listed. </p>
    pub fn set_pricing_rule_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_pricing_rule_arn(input);
        self
    }
    /// <p> The optional maximum number of pricing rule associations to retrieve. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p> The optional maximum number of pricing rule associations to retrieve. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p> The optional pagination token returned by a previous call. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> The optional pagination token returned by a previous call. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListPricingRules`.
///
/// <p> Describes a pricing rule that can be associated to a pricing plan, or set of pricing plans. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListPricingRules {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_pricing_rules_input::Builder,
}
impl ListPricingRules {
    /// Creates a new `ListPricingRules`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListPricingRules,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListPricingRulesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListPricingRulesOutput,
        aws_smithy_http::result::SdkError<crate::error::ListPricingRulesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListPricingRulesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListPricingRulesPaginator {
        crate::paginator::ListPricingRulesPaginator::new(self.handle, self.inner)
    }
    /// <p> The preferred billing period to get the pricing plan. </p>
    pub fn billing_period(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.billing_period(input.into());
        self
    }
    /// <p> The preferred billing period to get the pricing plan. </p>
    pub fn set_billing_period(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_billing_period(input);
        self
    }
    /// <p> A <code>DescribePricingRuleFilter</code> that specifies the Amazon Resource Name (ARNs) of pricing rules to retrieve pricing rules information. </p>
    pub fn filters(mut self, input: crate::model::ListPricingRulesFilter) -> Self {
        self.inner = self.inner.filters(input);
        self
    }
    /// <p> A <code>DescribePricingRuleFilter</code> that specifies the Amazon Resource Name (ARNs) of pricing rules to retrieve pricing rules information. </p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<crate::model::ListPricingRulesFilter>,
    ) -> Self {
        self.inner = self.inner.set_filters(input);
        self
    }
    /// <p> The maximum number of pricing rules to retrieve. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p> The maximum number of pricing rules to retrieve. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p> The pagination token that's used on subsequent call to get pricing rules. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> The pagination token that's used on subsequent call to get pricing rules. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListPricingRulesAssociatedToPricingPlan`.
///
/// <p> Lists the pricing rules that are associated with a pricing plan. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListPricingRulesAssociatedToPricingPlan {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_pricing_rules_associated_to_pricing_plan_input::Builder,
}
impl ListPricingRulesAssociatedToPricingPlan {
    /// Creates a new `ListPricingRulesAssociatedToPricingPlan`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListPricingRulesAssociatedToPricingPlan,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::error::ListPricingRulesAssociatedToPricingPlanError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListPricingRulesAssociatedToPricingPlanOutput,
        aws_smithy_http::result::SdkError<
            crate::error::ListPricingRulesAssociatedToPricingPlanError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListPricingRulesAssociatedToPricingPlanPaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::paginator::ListPricingRulesAssociatedToPricingPlanPaginator {
        crate::paginator::ListPricingRulesAssociatedToPricingPlanPaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// <p> The billing period for which the pricing rule associations are to be listed. </p>
    pub fn billing_period(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.billing_period(input.into());
        self
    }
    /// <p> The billing period for which the pricing rule associations are to be listed. </p>
    pub fn set_billing_period(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_billing_period(input);
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the pricing plan for which associations are to be listed.</p>
    pub fn pricing_plan_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pricing_plan_arn(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the pricing plan for which associations are to be listed.</p>
    pub fn set_pricing_plan_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_pricing_plan_arn(input);
        self
    }
    /// <p>The optional maximum number of pricing rule associations to retrieve.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The optional maximum number of pricing rule associations to retrieve.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p> The optional pagination token returned by a previous call. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> The optional pagination token returned by a previous call. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListResourcesAssociatedToCustomLineItem`.
///
/// <p> List the resources that are associated to a custom line item. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListResourcesAssociatedToCustomLineItem {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_resources_associated_to_custom_line_item_input::Builder,
}
impl ListResourcesAssociatedToCustomLineItem {
    /// Creates a new `ListResourcesAssociatedToCustomLineItem`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListResourcesAssociatedToCustomLineItem,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::error::ListResourcesAssociatedToCustomLineItemError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListResourcesAssociatedToCustomLineItemOutput,
        aws_smithy_http::result::SdkError<
            crate::error::ListResourcesAssociatedToCustomLineItemError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListResourcesAssociatedToCustomLineItemPaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::paginator::ListResourcesAssociatedToCustomLineItemPaginator {
        crate::paginator::ListResourcesAssociatedToCustomLineItemPaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// <p> The billing period for which the resource associations will be listed. </p>
    pub fn billing_period(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.billing_period(input.into());
        self
    }
    /// <p> The billing period for which the resource associations will be listed. </p>
    pub fn set_billing_period(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_billing_period(input);
        self
    }
    /// <p> The ARN of the custom line item for which the resource associations will be listed. </p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.arn(input.into());
        self
    }
    /// <p> The ARN of the custom line item for which the resource associations will be listed. </p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_arn(input);
        self
    }
    /// <p> (Optional) The maximum number of resource associations to be retrieved. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p> (Optional) The maximum number of resource associations to be retrieved. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p> (Optional) The pagination token that's returned by a previous request. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> (Optional) The pagination token that's returned by a previous request. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p> (Optional) A <code>ListResourcesAssociatedToCustomLineItemFilter</code> that can specify the types of resources that should be retrieved. </p>
    pub fn filters(
        mut self,
        input: crate::model::ListResourcesAssociatedToCustomLineItemFilter,
    ) -> Self {
        self.inner = self.inner.filters(input);
        self
    }
    /// <p> (Optional) A <code>ListResourcesAssociatedToCustomLineItemFilter</code> that can specify the types of resources that should be retrieved. </p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<crate::model::ListResourcesAssociatedToCustomLineItemFilter>,
    ) -> Self {
        self.inner = self.inner.set_filters(input);
        self
    }
}

/// Fluent builder constructing a request to `ListTagsForResource`.
///
/// <p> A list the tags for a resource. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_tags_for_resource_input::Builder,
}
impl ListTagsForResource {
    /// Creates a new `ListTagsForResource`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListTagsForResource,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListTagsForResourceOutput,
        aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The Amazon Resource Name (ARN) that identifies the resource to list the tags. </p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) that identifies the resource to list the tags. </p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `TagResource`.
///
/// <p> Associates the specified tags to a resource with the specified <code>resourceArn</code>. If existing tags on a resource are not specified in the request parameters, they are not changed. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::tag_resource_input::Builder,
}
impl TagResource {
    /// Creates a new `TagResource`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::TagResource,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::TagResourceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::TagResourceOutput,
        aws_smithy_http::result::SdkError<crate::error::TagResourceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The Amazon Resource Name (ARN) of the resource to which to add tags. </p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the resource to which to add tags. </p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
    /// Adds a key-value pair to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p> The tags to add to the resource as a list of key-value pairs. </p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p> The tags to add to the resource as a list of key-value pairs. </p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `UntagResource`.
///
/// <p> Deletes specified tags from a resource. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::untag_resource_input::Builder,
}
impl UntagResource {
    /// Creates a new `UntagResource`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UntagResource,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UntagResourceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UntagResourceOutput,
        aws_smithy_http::result::SdkError<crate::error::UntagResourceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The Amazon Resource Name (ARN) of the resource to which to delete tags. </p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the resource to which to delete tags. </p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
    /// Appends an item to `TagKeys`.
    ///
    /// To override the contents of this collection use [`set_tag_keys`](Self::set_tag_keys).
    ///
    /// <p> The tags to delete from the resource as a list of key-value pairs. </p>
    pub fn tag_keys(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.tag_keys(input.into());
        self
    }
    /// <p> The tags to delete from the resource as a list of key-value pairs. </p>
    pub fn set_tag_keys(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_tag_keys(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateBillingGroup`.
///
/// <p>This updates an existing billing group. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateBillingGroup {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_billing_group_input::Builder,
}
impl UpdateBillingGroup {
    /// Creates a new `UpdateBillingGroup`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateBillingGroup,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateBillingGroupError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateBillingGroupOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateBillingGroupError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the billing group being updated. </p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the billing group being updated. </p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_arn(input);
        self
    }
    /// <p>The name of the billing group. The names must be unique to each billing group. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the billing group. The names must be unique to each billing group. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The status of the billing group. Only one of the valid values can be used. </p>
    pub fn status(mut self, input: crate::model::BillingGroupStatus) -> Self {
        self.inner = self.inner.status(input);
        self
    }
    /// <p>The status of the billing group. Only one of the valid values can be used. </p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::model::BillingGroupStatus>,
    ) -> Self {
        self.inner = self.inner.set_status(input);
        self
    }
    /// <p> The preferences and settings that will be used to compute the Amazon Web Services charges for a billing group. </p>
    pub fn computation_preference(mut self, input: crate::model::ComputationPreference) -> Self {
        self.inner = self.inner.computation_preference(input);
        self
    }
    /// <p> The preferences and settings that will be used to compute the Amazon Web Services charges for a billing group. </p>
    pub fn set_computation_preference(
        mut self,
        input: std::option::Option<crate::model::ComputationPreference>,
    ) -> Self {
        self.inner = self.inner.set_computation_preference(input);
        self
    }
    /// <p>A description of the billing group. </p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A description of the billing group. </p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateCustomLineItem`.
///
/// <p> Update an existing custom line item in the current or previous billing period. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateCustomLineItem {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_custom_line_item_input::Builder,
}
impl UpdateCustomLineItem {
    /// Creates a new `UpdateCustomLineItem`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateCustomLineItem,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateCustomLineItemError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateCustomLineItemOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateCustomLineItemError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The ARN of the custom line item to be updated. </p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.arn(input.into());
        self
    }
    /// <p> The ARN of the custom line item to be updated. </p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_arn(input);
        self
    }
    /// <p> The new name for the custom line item. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p> The new name for the custom line item. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p> The new line item description of the custom line item. </p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p> The new line item description of the custom line item. </p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p> A <code>ListCustomLineItemChargeDetails</code> containing the new charge details for the custom line item. </p>
    pub fn charge_details(
        mut self,
        input: crate::model::UpdateCustomLineItemChargeDetails,
    ) -> Self {
        self.inner = self.inner.charge_details(input);
        self
    }
    /// <p> A <code>ListCustomLineItemChargeDetails</code> containing the new charge details for the custom line item. </p>
    pub fn set_charge_details(
        mut self,
        input: std::option::Option<crate::model::UpdateCustomLineItemChargeDetails>,
    ) -> Self {
        self.inner = self.inner.set_charge_details(input);
        self
    }
    /// <p> The billing period range in which the custom line item request will be applied. </p>
    pub fn billing_period_range(
        mut self,
        input: crate::model::CustomLineItemBillingPeriodRange,
    ) -> Self {
        self.inner = self.inner.billing_period_range(input);
        self
    }
    /// <p> The billing period range in which the custom line item request will be applied. </p>
    pub fn set_billing_period_range(
        mut self,
        input: std::option::Option<crate::model::CustomLineItemBillingPeriodRange>,
    ) -> Self {
        self.inner = self.inner.set_billing_period_range(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdatePricingPlan`.
///
/// <p>This updates an existing pricing plan. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdatePricingPlan {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_pricing_plan_input::Builder,
}
impl UpdatePricingPlan {
    /// Creates a new `UpdatePricingPlan`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdatePricingPlan,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdatePricingPlanError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdatePricingPlanOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdatePricingPlanError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the pricing plan that you're updating. </p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the pricing plan that you're updating. </p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_arn(input);
        self
    }
    /// <p>The name of the pricing plan. The name must be unique to each pricing plan. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the pricing plan. The name must be unique to each pricing plan. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The description of the pricing plan. </p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The description of the pricing plan. </p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdatePricingRule`.
///
/// <p> Updates an existing pricing rule. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdatePricingRule {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_pricing_rule_input::Builder,
}
impl UpdatePricingRule {
    /// Creates a new `UpdatePricingRule`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdatePricingRule,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdatePricingRuleError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdatePricingRuleOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdatePricingRuleError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The Amazon Resource Name (ARN) of the pricing rule to update. </p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.arn(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the pricing rule to update. </p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_arn(input);
        self
    }
    /// <p> The new name of the pricing rule. The name must be unique to each pricing rule. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p> The new name of the pricing rule. The name must be unique to each pricing rule. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p> The new description for the pricing rule. </p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p> The new description for the pricing rule. </p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p> The new pricing rule type. </p>
    pub fn r#type(mut self, input: crate::model::PricingRuleType) -> Self {
        self.inner = self.inner.r#type(input);
        self
    }
    /// <p> The new pricing rule type. </p>
    pub fn set_type(mut self, input: std::option::Option<crate::model::PricingRuleType>) -> Self {
        self.inner = self.inner.set_type(input);
        self
    }
    /// <p> The new modifier to show pricing plan rates as a percentage. </p>
    pub fn modifier_percentage(mut self, input: f64) -> Self {
        self.inner = self.inner.modifier_percentage(input);
        self
    }
    /// <p> The new modifier to show pricing plan rates as a percentage. </p>
    pub fn set_modifier_percentage(mut self, input: std::option::Option<f64>) -> Self {
        self.inner = self.inner.set_modifier_percentage(input);
        self
    }
    /// <p> The set of tiering configurations for the pricing rule. </p>
    pub fn tiering(mut self, input: crate::model::UpdateTieringInput) -> Self {
        self.inner = self.inner.tiering(input);
        self
    }
    /// <p> The set of tiering configurations for the pricing rule. </p>
    pub fn set_tiering(
        mut self,
        input: std::option::Option<crate::model::UpdateTieringInput>,
    ) -> Self {
        self.inner = self.inner.set_tiering(input);
        self
    }
}
