// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a Amazon Web Services Service Catalog AppRegistry attribute group that is rich metadata which describes an application and its components.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AttributeGroup {
    /// <p>The globally unique attribute group identifier of the attribute group.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The Amazon resource name (ARN) that specifies the attribute group across services.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The name of the attribute group.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The description of the attribute group that the user provides.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The ISO-8601 formatted timestamp of the moment the attribute group was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The ISO-8601 formatted timestamp of the moment the attribute group was last updated. This time is the same as the creationTime for a newly created attribute group.</p>
    #[doc(hidden)]
    pub last_update_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Key-value pairs you can use to associate with the attribute group.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl AttributeGroup {
    /// <p>The globally unique attribute group identifier of the attribute group.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The Amazon resource name (ARN) that specifies the attribute group across services.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the attribute group.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the attribute group that the user provides.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The ISO-8601 formatted timestamp of the moment the attribute group was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The ISO-8601 formatted timestamp of the moment the attribute group was last updated. This time is the same as the creationTime for a newly created attribute group.</p>
    pub fn last_update_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_update_time.as_ref()
    }
    /// <p>Key-value pairs you can use to associate with the attribute group.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl AttributeGroup {
    /// Creates a new builder-style object to manufacture [`AttributeGroup`](crate::model::AttributeGroup).
    pub fn builder() -> crate::model::attribute_group::Builder {
        crate::model::attribute_group::Builder::default()
    }
}

/// See [`AttributeGroup`](crate::model::AttributeGroup).
pub mod attribute_group {

    /// A builder for [`AttributeGroup`](crate::model::AttributeGroup).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) last_update_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        /// <p>The globally unique attribute group identifier of the attribute group.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The globally unique attribute group identifier of the attribute group.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The Amazon resource name (ARN) that specifies the attribute group across services.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon resource name (ARN) that specifies the attribute group across services.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The name of the attribute group.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the attribute group.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The description of the attribute group that the user provides.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The description of the attribute group that the user provides.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The ISO-8601 formatted timestamp of the moment the attribute group was created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>The ISO-8601 formatted timestamp of the moment the attribute group was created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        /// <p>The ISO-8601 formatted timestamp of the moment the attribute group was last updated. This time is the same as the creationTime for a newly created attribute group.</p>
        pub fn last_update_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.last_update_time = Some(input);
            self
        }
        /// <p>The ISO-8601 formatted timestamp of the moment the attribute group was last updated. This time is the same as the creationTime for a newly created attribute group.</p>
        pub fn set_last_update_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.last_update_time = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>Key-value pairs you can use to associate with the attribute group.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>Key-value pairs you can use to associate with the attribute group.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`AttributeGroup`](crate::model::AttributeGroup).
        pub fn build(self) -> crate::model::AttributeGroup {
            crate::model::AttributeGroup {
                id: self.id,
                arn: self.arn,
                name: self.name,
                description: self.description,
                creation_time: self.creation_time,
                last_update_time: self.last_update_time,
                tags: self.tags,
            }
        }
    }
}

/// <p>Represents a Amazon Web Services Service Catalog AppRegistry application that is the top-level node in a hierarchy of related cloud resource abstractions.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Application {
    /// <p>The identifier of the application.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The Amazon resource name (ARN) that specifies the application across services.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The name of the application. The name must be unique in the region in which you are creating the application.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The description of the application.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The ISO-8601 formatted timestamp of the moment when the application was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p> The ISO-8601 formatted timestamp of the moment when the application was last updated.</p>
    #[doc(hidden)]
    pub last_update_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Key-value pairs you can use to associate with the application.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl Application {
    /// <p>The identifier of the application.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The Amazon resource name (ARN) that specifies the application across services.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the application. The name must be unique in the region in which you are creating the application.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the application.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The ISO-8601 formatted timestamp of the moment when the application was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p> The ISO-8601 formatted timestamp of the moment when the application was last updated.</p>
    pub fn last_update_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_update_time.as_ref()
    }
    /// <p>Key-value pairs you can use to associate with the application.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl Application {
    /// Creates a new builder-style object to manufacture [`Application`](crate::model::Application).
    pub fn builder() -> crate::model::application::Builder {
        crate::model::application::Builder::default()
    }
}

/// See [`Application`](crate::model::Application).
pub mod application {

    /// A builder for [`Application`](crate::model::Application).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) last_update_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        /// <p>The identifier of the application.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The identifier of the application.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The Amazon resource name (ARN) that specifies the application across services.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon resource name (ARN) that specifies the application across services.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The name of the application. The name must be unique in the region in which you are creating the application.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the application. The name must be unique in the region in which you are creating the application.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The description of the application.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The description of the application.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The ISO-8601 formatted timestamp of the moment when the application was created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>The ISO-8601 formatted timestamp of the moment when the application was created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        /// <p> The ISO-8601 formatted timestamp of the moment when the application was last updated.</p>
        pub fn last_update_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.last_update_time = Some(input);
            self
        }
        /// <p> The ISO-8601 formatted timestamp of the moment when the application was last updated.</p>
        pub fn set_last_update_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.last_update_time = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>Key-value pairs you can use to associate with the application.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>Key-value pairs you can use to associate with the application.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`Application`](crate::model::Application).
        pub fn build(self) -> crate::model::Application {
            crate::model::Application {
                id: self.id,
                arn: self.arn,
                name: self.name,
                description: self.description,
                creation_time: self.creation_time,
                last_update_time: self.last_update_time,
                tags: self.tags,
            }
        }
    }
}

/// When writing a match expression against `SyncAction`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let syncaction = unimplemented!();
/// match syncaction {
///     SyncAction::NoAction => { /* ... */ },
///     SyncAction::StartSync => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `syncaction` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `SyncAction::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `SyncAction::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `SyncAction::NewFeature` is defined.
/// Specifically, when `syncaction` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `SyncAction::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum SyncAction {
    #[allow(missing_docs)] // documentation missing in model
    NoAction,
    #[allow(missing_docs)] // documentation missing in model
    StartSync,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::types::UnknownVariantValue),
}
impl std::convert::From<&str> for SyncAction {
    fn from(s: &str) -> Self {
        match s {
            "NO_ACTION" => SyncAction::NoAction,
            "START_SYNC" => SyncAction::StartSync,
            other => SyncAction::Unknown(crate::types::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for SyncAction {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(SyncAction::from(s))
    }
}
impl SyncAction {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            SyncAction::NoAction => "NO_ACTION",
            SyncAction::StartSync => "START_SYNC",
            SyncAction::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["NO_ACTION", "START_SYNC"]
    }
}
impl AsRef<str> for SyncAction {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// When writing a match expression against `ResourceType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let resourcetype = unimplemented!();
/// match resourcetype {
///     ResourceType::CfnStack => { /* ... */ },
///     ResourceType::ResourceTagValue => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `resourcetype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ResourceType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ResourceType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ResourceType::NewFeature` is defined.
/// Specifically, when `resourcetype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ResourceType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum ResourceType {
    #[allow(missing_docs)] // documentation missing in model
    CfnStack,
    #[allow(missing_docs)] // documentation missing in model
    ResourceTagValue,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::types::UnknownVariantValue),
}
impl std::convert::From<&str> for ResourceType {
    fn from(s: &str) -> Self {
        match s {
            "CFN_STACK" => ResourceType::CfnStack,
            "RESOURCE_TAG_VALUE" => ResourceType::ResourceTagValue,
            other => ResourceType::Unknown(crate::types::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for ResourceType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(ResourceType::from(s))
    }
}
impl ResourceType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ResourceType::CfnStack => "CFN_STACK",
            ResourceType::ResourceTagValue => "RESOURCE_TAG_VALUE",
            ResourceType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["CFN_STACK", "RESOURCE_TAG_VALUE"]
    }
}
impl AsRef<str> for ResourceType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p> Includes all of the Service Catalog AppRegistry settings. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AppRegistryConfiguration {
    /// <p> Includes the definition of a <code>tagQuery</code>. </p>
    #[doc(hidden)]
    pub tag_query_configuration: std::option::Option<crate::model::TagQueryConfiguration>,
}
impl AppRegistryConfiguration {
    /// <p> Includes the definition of a <code>tagQuery</code>. </p>
    pub fn tag_query_configuration(
        &self,
    ) -> std::option::Option<&crate::model::TagQueryConfiguration> {
        self.tag_query_configuration.as_ref()
    }
}
impl AppRegistryConfiguration {
    /// Creates a new builder-style object to manufacture [`AppRegistryConfiguration`](crate::model::AppRegistryConfiguration).
    pub fn builder() -> crate::model::app_registry_configuration::Builder {
        crate::model::app_registry_configuration::Builder::default()
    }
}

/// See [`AppRegistryConfiguration`](crate::model::AppRegistryConfiguration).
pub mod app_registry_configuration {

    /// A builder for [`AppRegistryConfiguration`](crate::model::AppRegistryConfiguration).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tag_query_configuration:
            std::option::Option<crate::model::TagQueryConfiguration>,
    }
    impl Builder {
        /// <p> Includes the definition of a <code>tagQuery</code>. </p>
        pub fn tag_query_configuration(
            mut self,
            input: crate::model::TagQueryConfiguration,
        ) -> Self {
            self.tag_query_configuration = Some(input);
            self
        }
        /// <p> Includes the definition of a <code>tagQuery</code>. </p>
        pub fn set_tag_query_configuration(
            mut self,
            input: std::option::Option<crate::model::TagQueryConfiguration>,
        ) -> Self {
            self.tag_query_configuration = input;
            self
        }
        /// Consumes the builder and constructs a [`AppRegistryConfiguration`](crate::model::AppRegistryConfiguration).
        pub fn build(self) -> crate::model::AppRegistryConfiguration {
            crate::model::AppRegistryConfiguration {
                tag_query_configuration: self.tag_query_configuration,
            }
        }
    }
}

/// <p> The definition of <code>tagQuery</code>. Specifies which resources are associated with an application. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagQueryConfiguration {
    /// <p> Condition in the IAM policy that associates resources to an application. </p>
    #[doc(hidden)]
    pub tag_key: std::option::Option<std::string::String>,
}
impl TagQueryConfiguration {
    /// <p> Condition in the IAM policy that associates resources to an application. </p>
    pub fn tag_key(&self) -> std::option::Option<&str> {
        self.tag_key.as_deref()
    }
}
impl TagQueryConfiguration {
    /// Creates a new builder-style object to manufacture [`TagQueryConfiguration`](crate::model::TagQueryConfiguration).
    pub fn builder() -> crate::model::tag_query_configuration::Builder {
        crate::model::tag_query_configuration::Builder::default()
    }
}

/// See [`TagQueryConfiguration`](crate::model::TagQueryConfiguration).
pub mod tag_query_configuration {

    /// A builder for [`TagQueryConfiguration`](crate::model::TagQueryConfiguration).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tag_key: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p> Condition in the IAM policy that associates resources to an application. </p>
        pub fn tag_key(mut self, input: impl Into<std::string::String>) -> Self {
            self.tag_key = Some(input.into());
            self
        }
        /// <p> Condition in the IAM policy that associates resources to an application. </p>
        pub fn set_tag_key(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.tag_key = input;
            self
        }
        /// Consumes the builder and constructs a [`TagQueryConfiguration`](crate::model::TagQueryConfiguration).
        pub fn build(self) -> crate::model::TagQueryConfiguration {
            crate::model::TagQueryConfiguration {
                tag_key: self.tag_key,
            }
        }
    }
}

/// <p> The details related to a specific AttributeGroup. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AttributeGroupDetails {
    /// <p>The unique identifier of the attribute group.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The Amazon resource name (ARN) that specifies the attribute group.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <important>
    /// <p> This field is no longer supported. We recommend you don't use the field when using <code>ListAttributeGroupsForApplication</code>. </p>
    /// </important>
    /// <p> The name of the attribute group. </p>
    #[deprecated(
        note = "This field is deprecated. We recommend not using the field when using ListAttributeGroupsForApplication."
    )]
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
}
impl AttributeGroupDetails {
    /// <p>The unique identifier of the attribute group.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The Amazon resource name (ARN) that specifies the attribute group.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <important>
    /// <p> This field is no longer supported. We recommend you don't use the field when using <code>ListAttributeGroupsForApplication</code>. </p>
    /// </important>
    /// <p> The name of the attribute group. </p>
    #[deprecated(
        note = "This field is deprecated. We recommend not using the field when using ListAttributeGroupsForApplication."
    )]
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
}
impl AttributeGroupDetails {
    /// Creates a new builder-style object to manufacture [`AttributeGroupDetails`](crate::model::AttributeGroupDetails).
    pub fn builder() -> crate::model::attribute_group_details::Builder {
        crate::model::attribute_group_details::Builder::default()
    }
}

/// See [`AttributeGroupDetails`](crate::model::AttributeGroupDetails).
pub mod attribute_group_details {

    /// A builder for [`AttributeGroupDetails`](crate::model::AttributeGroupDetails).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The unique identifier of the attribute group.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The unique identifier of the attribute group.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The Amazon resource name (ARN) that specifies the attribute group.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon resource name (ARN) that specifies the attribute group.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <important>
        /// <p> This field is no longer supported. We recommend you don't use the field when using <code>ListAttributeGroupsForApplication</code>. </p>
        /// </important>
        /// <p> The name of the attribute group. </p>
        #[deprecated(
            note = "This field is deprecated. We recommend not using the field when using ListAttributeGroupsForApplication."
        )]
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <important>
        /// <p> This field is no longer supported. We recommend you don't use the field when using <code>ListAttributeGroupsForApplication</code>. </p>
        /// </important>
        /// <p> The name of the attribute group. </p>
        #[deprecated(
            note = "This field is deprecated. We recommend not using the field when using ListAttributeGroupsForApplication."
        )]
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// Consumes the builder and constructs a [`AttributeGroupDetails`](crate::model::AttributeGroupDetails).
        pub fn build(self) -> crate::model::AttributeGroupDetails {
            crate::model::AttributeGroupDetails {
                id: self.id,
                arn: self.arn,
                name: self.name,
            }
        }
    }
}

/// <p>Summary of a Amazon Web Services Service Catalog AppRegistry attribute group.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AttributeGroupSummary {
    /// <p>The globally unique attribute group identifier of the attribute group.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The Amazon resource name (ARN) that specifies the attribute group across services.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The name of the attribute group.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The description of the attribute group that the user provides.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The ISO-8601 formatted timestamp of the moment the attribute group was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The ISO-8601 formatted timestamp of the moment the attribute group was last updated. This time is the same as the creationTime for a newly created attribute group.</p>
    #[doc(hidden)]
    pub last_update_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl AttributeGroupSummary {
    /// <p>The globally unique attribute group identifier of the attribute group.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The Amazon resource name (ARN) that specifies the attribute group across services.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the attribute group.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the attribute group that the user provides.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The ISO-8601 formatted timestamp of the moment the attribute group was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The ISO-8601 formatted timestamp of the moment the attribute group was last updated. This time is the same as the creationTime for a newly created attribute group.</p>
    pub fn last_update_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_update_time.as_ref()
    }
}
impl AttributeGroupSummary {
    /// Creates a new builder-style object to manufacture [`AttributeGroupSummary`](crate::model::AttributeGroupSummary).
    pub fn builder() -> crate::model::attribute_group_summary::Builder {
        crate::model::attribute_group_summary::Builder::default()
    }
}

/// See [`AttributeGroupSummary`](crate::model::AttributeGroupSummary).
pub mod attribute_group_summary {

    /// A builder for [`AttributeGroupSummary`](crate::model::AttributeGroupSummary).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) last_update_time: std::option::Option<aws_smithy_types::DateTime>,
    }
    impl Builder {
        /// <p>The globally unique attribute group identifier of the attribute group.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The globally unique attribute group identifier of the attribute group.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The Amazon resource name (ARN) that specifies the attribute group across services.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon resource name (ARN) that specifies the attribute group across services.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The name of the attribute group.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the attribute group.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The description of the attribute group that the user provides.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The description of the attribute group that the user provides.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The ISO-8601 formatted timestamp of the moment the attribute group was created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>The ISO-8601 formatted timestamp of the moment the attribute group was created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        /// <p>The ISO-8601 formatted timestamp of the moment the attribute group was last updated. This time is the same as the creationTime for a newly created attribute group.</p>
        pub fn last_update_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.last_update_time = Some(input);
            self
        }
        /// <p>The ISO-8601 formatted timestamp of the moment the attribute group was last updated. This time is the same as the creationTime for a newly created attribute group.</p>
        pub fn set_last_update_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.last_update_time = input;
            self
        }
        /// Consumes the builder and constructs a [`AttributeGroupSummary`](crate::model::AttributeGroupSummary).
        pub fn build(self) -> crate::model::AttributeGroupSummary {
            crate::model::AttributeGroupSummary {
                id: self.id,
                arn: self.arn,
                name: self.name,
                description: self.description,
                creation_time: self.creation_time,
                last_update_time: self.last_update_time,
            }
        }
    }
}

/// <p>The information about the resource.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResourceInfo {
    /// <p>The name of the resource.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The Amazon resource name (ARN) that specifies the resource across services.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p> Provides information about the Service Catalog App Registry resource type. </p>
    #[doc(hidden)]
    pub resource_type: std::option::Option<crate::model::ResourceType>,
    /// <p> The details related to the resource. </p>
    #[doc(hidden)]
    pub resource_details: std::option::Option<crate::model::ResourceDetails>,
}
impl ResourceInfo {
    /// <p>The name of the resource.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon resource name (ARN) that specifies the resource across services.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p> Provides information about the Service Catalog App Registry resource type. </p>
    pub fn resource_type(&self) -> std::option::Option<&crate::model::ResourceType> {
        self.resource_type.as_ref()
    }
    /// <p> The details related to the resource. </p>
    pub fn resource_details(&self) -> std::option::Option<&crate::model::ResourceDetails> {
        self.resource_details.as_ref()
    }
}
impl ResourceInfo {
    /// Creates a new builder-style object to manufacture [`ResourceInfo`](crate::model::ResourceInfo).
    pub fn builder() -> crate::model::resource_info::Builder {
        crate::model::resource_info::Builder::default()
    }
}

/// See [`ResourceInfo`](crate::model::ResourceInfo).
pub mod resource_info {

    /// A builder for [`ResourceInfo`](crate::model::ResourceInfo).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) resource_type: std::option::Option<crate::model::ResourceType>,
        pub(crate) resource_details: std::option::Option<crate::model::ResourceDetails>,
    }
    impl Builder {
        /// <p>The name of the resource.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the resource.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The Amazon resource name (ARN) that specifies the resource across services.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon resource name (ARN) that specifies the resource across services.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p> Provides information about the Service Catalog App Registry resource type. </p>
        pub fn resource_type(mut self, input: crate::model::ResourceType) -> Self {
            self.resource_type = Some(input);
            self
        }
        /// <p> Provides information about the Service Catalog App Registry resource type. </p>
        pub fn set_resource_type(
            mut self,
            input: std::option::Option<crate::model::ResourceType>,
        ) -> Self {
            self.resource_type = input;
            self
        }
        /// <p> The details related to the resource. </p>
        pub fn resource_details(mut self, input: crate::model::ResourceDetails) -> Self {
            self.resource_details = Some(input);
            self
        }
        /// <p> The details related to the resource. </p>
        pub fn set_resource_details(
            mut self,
            input: std::option::Option<crate::model::ResourceDetails>,
        ) -> Self {
            self.resource_details = input;
            self
        }
        /// Consumes the builder and constructs a [`ResourceInfo`](crate::model::ResourceInfo).
        pub fn build(self) -> crate::model::ResourceInfo {
            crate::model::ResourceInfo {
                name: self.name,
                arn: self.arn,
                resource_type: self.resource_type,
                resource_details: self.resource_details,
            }
        }
    }
}

/// <p> The details related to the resource. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResourceDetails {
    /// <p>The value of the tag.</p>
    #[doc(hidden)]
    pub tag_value: std::option::Option<std::string::String>,
}
impl ResourceDetails {
    /// <p>The value of the tag.</p>
    pub fn tag_value(&self) -> std::option::Option<&str> {
        self.tag_value.as_deref()
    }
}
impl ResourceDetails {
    /// Creates a new builder-style object to manufacture [`ResourceDetails`](crate::model::ResourceDetails).
    pub fn builder() -> crate::model::resource_details::Builder {
        crate::model::resource_details::Builder::default()
    }
}

/// See [`ResourceDetails`](crate::model::ResourceDetails).
pub mod resource_details {

    /// A builder for [`ResourceDetails`](crate::model::ResourceDetails).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tag_value: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The value of the tag.</p>
        pub fn tag_value(mut self, input: impl Into<std::string::String>) -> Self {
            self.tag_value = Some(input.into());
            self
        }
        /// <p>The value of the tag.</p>
        pub fn set_tag_value(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.tag_value = input;
            self
        }
        /// Consumes the builder and constructs a [`ResourceDetails`](crate::model::ResourceDetails).
        pub fn build(self) -> crate::model::ResourceDetails {
            crate::model::ResourceDetails {
                tag_value: self.tag_value,
            }
        }
    }
}

/// <p>Summary of a Amazon Web Services Service Catalog AppRegistry application.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ApplicationSummary {
    /// <p>The identifier of the application.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The Amazon resource name (ARN) that specifies the application across services.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The name of the application. The name must be unique in the region in which you are creating the application.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The description of the application.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The ISO-8601 formatted timestamp of the moment when the application was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p> The ISO-8601 formatted timestamp of the moment when the application was last updated.</p>
    #[doc(hidden)]
    pub last_update_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl ApplicationSummary {
    /// <p>The identifier of the application.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The Amazon resource name (ARN) that specifies the application across services.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the application. The name must be unique in the region in which you are creating the application.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the application.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The ISO-8601 formatted timestamp of the moment when the application was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p> The ISO-8601 formatted timestamp of the moment when the application was last updated.</p>
    pub fn last_update_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_update_time.as_ref()
    }
}
impl ApplicationSummary {
    /// Creates a new builder-style object to manufacture [`ApplicationSummary`](crate::model::ApplicationSummary).
    pub fn builder() -> crate::model::application_summary::Builder {
        crate::model::application_summary::Builder::default()
    }
}

/// See [`ApplicationSummary`](crate::model::ApplicationSummary).
pub mod application_summary {

    /// A builder for [`ApplicationSummary`](crate::model::ApplicationSummary).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) last_update_time: std::option::Option<aws_smithy_types::DateTime>,
    }
    impl Builder {
        /// <p>The identifier of the application.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The identifier of the application.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The Amazon resource name (ARN) that specifies the application across services.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon resource name (ARN) that specifies the application across services.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The name of the application. The name must be unique in the region in which you are creating the application.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the application. The name must be unique in the region in which you are creating the application.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The description of the application.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The description of the application.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The ISO-8601 formatted timestamp of the moment when the application was created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>The ISO-8601 formatted timestamp of the moment when the application was created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        /// <p> The ISO-8601 formatted timestamp of the moment when the application was last updated.</p>
        pub fn last_update_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.last_update_time = Some(input);
            self
        }
        /// <p> The ISO-8601 formatted timestamp of the moment when the application was last updated.</p>
        pub fn set_last_update_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.last_update_time = input;
            self
        }
        /// Consumes the builder and constructs a [`ApplicationSummary`](crate::model::ApplicationSummary).
        pub fn build(self) -> crate::model::ApplicationSummary {
            crate::model::ApplicationSummary {
                id: self.id,
                arn: self.arn,
                name: self.name,
                description: self.description,
                creation_time: self.creation_time,
                last_update_time: self.last_update_time,
            }
        }
    }
}

/// <p> The information about the resource.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Resource {
    /// <p>The name of the resource.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The Amazon resource name (ARN) of the resource.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The time the resource was associated with the application.</p>
    #[doc(hidden)]
    pub association_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The service integration information about the resource. </p>
    #[doc(hidden)]
    pub integrations: std::option::Option<crate::model::ResourceIntegrations>,
}
impl Resource {
    /// <p>The name of the resource.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon resource name (ARN) of the resource.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The time the resource was associated with the application.</p>
    pub fn association_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.association_time.as_ref()
    }
    /// <p>The service integration information about the resource. </p>
    pub fn integrations(&self) -> std::option::Option<&crate::model::ResourceIntegrations> {
        self.integrations.as_ref()
    }
}
impl Resource {
    /// Creates a new builder-style object to manufacture [`Resource`](crate::model::Resource).
    pub fn builder() -> crate::model::resource::Builder {
        crate::model::resource::Builder::default()
    }
}

/// See [`Resource`](crate::model::Resource).
pub mod resource {

    /// A builder for [`Resource`](crate::model::Resource).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) association_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) integrations: std::option::Option<crate::model::ResourceIntegrations>,
    }
    impl Builder {
        /// <p>The name of the resource.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the resource.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The Amazon resource name (ARN) of the resource.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon resource name (ARN) of the resource.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The time the resource was associated with the application.</p>
        pub fn association_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.association_time = Some(input);
            self
        }
        /// <p>The time the resource was associated with the application.</p>
        pub fn set_association_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.association_time = input;
            self
        }
        /// <p>The service integration information about the resource. </p>
        pub fn integrations(mut self, input: crate::model::ResourceIntegrations) -> Self {
            self.integrations = Some(input);
            self
        }
        /// <p>The service integration information about the resource. </p>
        pub fn set_integrations(
            mut self,
            input: std::option::Option<crate::model::ResourceIntegrations>,
        ) -> Self {
            self.integrations = input;
            self
        }
        /// Consumes the builder and constructs a [`Resource`](crate::model::Resource).
        pub fn build(self) -> crate::model::Resource {
            crate::model::Resource {
                name: self.name,
                arn: self.arn,
                association_time: self.association_time,
                integrations: self.integrations,
            }
        }
    }
}

/// <p>The service integration information about the resource.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResourceIntegrations {
    /// <p>The information about the integration of Resource Groups.</p>
    #[doc(hidden)]
    pub resource_group: std::option::Option<crate::model::ResourceGroup>,
}
impl ResourceIntegrations {
    /// <p>The information about the integration of Resource Groups.</p>
    pub fn resource_group(&self) -> std::option::Option<&crate::model::ResourceGroup> {
        self.resource_group.as_ref()
    }
}
impl ResourceIntegrations {
    /// Creates a new builder-style object to manufacture [`ResourceIntegrations`](crate::model::ResourceIntegrations).
    pub fn builder() -> crate::model::resource_integrations::Builder {
        crate::model::resource_integrations::Builder::default()
    }
}

/// See [`ResourceIntegrations`](crate::model::ResourceIntegrations).
pub mod resource_integrations {

    /// A builder for [`ResourceIntegrations`](crate::model::ResourceIntegrations).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) resource_group: std::option::Option<crate::model::ResourceGroup>,
    }
    impl Builder {
        /// <p>The information about the integration of Resource Groups.</p>
        pub fn resource_group(mut self, input: crate::model::ResourceGroup) -> Self {
            self.resource_group = Some(input);
            self
        }
        /// <p>The information about the integration of Resource Groups.</p>
        pub fn set_resource_group(
            mut self,
            input: std::option::Option<crate::model::ResourceGroup>,
        ) -> Self {
            self.resource_group = input;
            self
        }
        /// Consumes the builder and constructs a [`ResourceIntegrations`](crate::model::ResourceIntegrations).
        pub fn build(self) -> crate::model::ResourceIntegrations {
            crate::model::ResourceIntegrations {
                resource_group: self.resource_group,
            }
        }
    }
}

/// <p>The information about the resource group integration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResourceGroup {
    /// <p>The state of the propagation process for the resource group. The states includes:</p>
    /// <p> <code>CREATING </code>if the resource group is in the process of being created.</p>
    /// <p> <code>CREATE_COMPLETE</code> if the resource group was created successfully.</p>
    /// <p> <code>CREATE_FAILED</code> if the resource group failed to be created.</p>
    /// <p> <code>UPDATING</code> if the resource group is in the process of being updated.</p>
    /// <p> <code>UPDATE_COMPLETE</code> if the resource group updated successfully.</p>
    /// <p> <code>UPDATE_FAILED</code> if the resource group could not update successfully.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::model::ResourceGroupState>,
    /// <p>The Amazon resource name (ARN) of the resource group.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The error message that generates when the propagation process for the resource group fails.</p>
    #[doc(hidden)]
    pub error_message: std::option::Option<std::string::String>,
}
impl ResourceGroup {
    /// <p>The state of the propagation process for the resource group. The states includes:</p>
    /// <p> <code>CREATING </code>if the resource group is in the process of being created.</p>
    /// <p> <code>CREATE_COMPLETE</code> if the resource group was created successfully.</p>
    /// <p> <code>CREATE_FAILED</code> if the resource group failed to be created.</p>
    /// <p> <code>UPDATING</code> if the resource group is in the process of being updated.</p>
    /// <p> <code>UPDATE_COMPLETE</code> if the resource group updated successfully.</p>
    /// <p> <code>UPDATE_FAILED</code> if the resource group could not update successfully.</p>
    pub fn state(&self) -> std::option::Option<&crate::model::ResourceGroupState> {
        self.state.as_ref()
    }
    /// <p>The Amazon resource name (ARN) of the resource group.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The error message that generates when the propagation process for the resource group fails.</p>
    pub fn error_message(&self) -> std::option::Option<&str> {
        self.error_message.as_deref()
    }
}
impl ResourceGroup {
    /// Creates a new builder-style object to manufacture [`ResourceGroup`](crate::model::ResourceGroup).
    pub fn builder() -> crate::model::resource_group::Builder {
        crate::model::resource_group::Builder::default()
    }
}

/// See [`ResourceGroup`](crate::model::ResourceGroup).
pub mod resource_group {

    /// A builder for [`ResourceGroup`](crate::model::ResourceGroup).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) state: std::option::Option<crate::model::ResourceGroupState>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) error_message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The state of the propagation process for the resource group. The states includes:</p>
        /// <p> <code>CREATING </code>if the resource group is in the process of being created.</p>
        /// <p> <code>CREATE_COMPLETE</code> if the resource group was created successfully.</p>
        /// <p> <code>CREATE_FAILED</code> if the resource group failed to be created.</p>
        /// <p> <code>UPDATING</code> if the resource group is in the process of being updated.</p>
        /// <p> <code>UPDATE_COMPLETE</code> if the resource group updated successfully.</p>
        /// <p> <code>UPDATE_FAILED</code> if the resource group could not update successfully.</p>
        pub fn state(mut self, input: crate::model::ResourceGroupState) -> Self {
            self.state = Some(input);
            self
        }
        /// <p>The state of the propagation process for the resource group. The states includes:</p>
        /// <p> <code>CREATING </code>if the resource group is in the process of being created.</p>
        /// <p> <code>CREATE_COMPLETE</code> if the resource group was created successfully.</p>
        /// <p> <code>CREATE_FAILED</code> if the resource group failed to be created.</p>
        /// <p> <code>UPDATING</code> if the resource group is in the process of being updated.</p>
        /// <p> <code>UPDATE_COMPLETE</code> if the resource group updated successfully.</p>
        /// <p> <code>UPDATE_FAILED</code> if the resource group could not update successfully.</p>
        pub fn set_state(
            mut self,
            input: std::option::Option<crate::model::ResourceGroupState>,
        ) -> Self {
            self.state = input;
            self
        }
        /// <p>The Amazon resource name (ARN) of the resource group.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon resource name (ARN) of the resource group.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The error message that generates when the propagation process for the resource group fails.</p>
        pub fn error_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.error_message = Some(input.into());
            self
        }
        /// <p>The error message that generates when the propagation process for the resource group fails.</p>
        pub fn set_error_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.error_message = input;
            self
        }
        /// Consumes the builder and constructs a [`ResourceGroup`](crate::model::ResourceGroup).
        pub fn build(self) -> crate::model::ResourceGroup {
            crate::model::ResourceGroup {
                state: self.state,
                arn: self.arn,
                error_message: self.error_message,
            }
        }
    }
}

/// When writing a match expression against `ResourceGroupState`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let resourcegroupstate = unimplemented!();
/// match resourcegroupstate {
///     ResourceGroupState::CreateComplete => { /* ... */ },
///     ResourceGroupState::CreateFailed => { /* ... */ },
///     ResourceGroupState::Creating => { /* ... */ },
///     ResourceGroupState::UpdateComplete => { /* ... */ },
///     ResourceGroupState::UpdateFailed => { /* ... */ },
///     ResourceGroupState::Updating => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `resourcegroupstate` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ResourceGroupState::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ResourceGroupState::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ResourceGroupState::NewFeature` is defined.
/// Specifically, when `resourcegroupstate` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ResourceGroupState::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum ResourceGroupState {
    #[allow(missing_docs)] // documentation missing in model
    CreateComplete,
    #[allow(missing_docs)] // documentation missing in model
    CreateFailed,
    #[allow(missing_docs)] // documentation missing in model
    Creating,
    #[allow(missing_docs)] // documentation missing in model
    UpdateComplete,
    #[allow(missing_docs)] // documentation missing in model
    UpdateFailed,
    #[allow(missing_docs)] // documentation missing in model
    Updating,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::types::UnknownVariantValue),
}
impl std::convert::From<&str> for ResourceGroupState {
    fn from(s: &str) -> Self {
        match s {
            "CREATE_COMPLETE" => ResourceGroupState::CreateComplete,
            "CREATE_FAILED" => ResourceGroupState::CreateFailed,
            "CREATING" => ResourceGroupState::Creating,
            "UPDATE_COMPLETE" => ResourceGroupState::UpdateComplete,
            "UPDATE_FAILED" => ResourceGroupState::UpdateFailed,
            "UPDATING" => ResourceGroupState::Updating,
            other => {
                ResourceGroupState::Unknown(crate::types::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for ResourceGroupState {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(ResourceGroupState::from(s))
    }
}
impl ResourceGroupState {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ResourceGroupState::CreateComplete => "CREATE_COMPLETE",
            ResourceGroupState::CreateFailed => "CREATE_FAILED",
            ResourceGroupState::Creating => "CREATING",
            ResourceGroupState::UpdateComplete => "UPDATE_COMPLETE",
            ResourceGroupState::UpdateFailed => "UPDATE_FAILED",
            ResourceGroupState::Updating => "UPDATING",
            ResourceGroupState::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "CREATE_COMPLETE",
            "CREATE_FAILED",
            "CREATING",
            "UPDATE_COMPLETE",
            "UPDATE_FAILED",
            "UPDATING",
        ]
    }
}
impl AsRef<str> for ResourceGroupState {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p> The information about the service integration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Integrations {
    /// <p> The information about the resource group integration.</p>
    #[doc(hidden)]
    pub resource_group: std::option::Option<crate::model::ResourceGroup>,
}
impl Integrations {
    /// <p> The information about the resource group integration.</p>
    pub fn resource_group(&self) -> std::option::Option<&crate::model::ResourceGroup> {
        self.resource_group.as_ref()
    }
}
impl Integrations {
    /// Creates a new builder-style object to manufacture [`Integrations`](crate::model::Integrations).
    pub fn builder() -> crate::model::integrations::Builder {
        crate::model::integrations::Builder::default()
    }
}

/// See [`Integrations`](crate::model::Integrations).
pub mod integrations {

    /// A builder for [`Integrations`](crate::model::Integrations).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) resource_group: std::option::Option<crate::model::ResourceGroup>,
    }
    impl Builder {
        /// <p> The information about the resource group integration.</p>
        pub fn resource_group(mut self, input: crate::model::ResourceGroup) -> Self {
            self.resource_group = Some(input);
            self
        }
        /// <p> The information about the resource group integration.</p>
        pub fn set_resource_group(
            mut self,
            input: std::option::Option<crate::model::ResourceGroup>,
        ) -> Self {
            self.resource_group = input;
            self
        }
        /// Consumes the builder and constructs a [`Integrations`](crate::model::Integrations).
        pub fn build(self) -> crate::model::Integrations {
            crate::model::Integrations {
                resource_group: self.resource_group,
            }
        }
    }
}
