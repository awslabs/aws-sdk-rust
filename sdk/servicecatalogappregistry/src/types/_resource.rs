// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The information about the resource.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Resource {
    /// <p>The name of the resource.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The Amazon resource name (ARN) of the resource.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The time the resource was associated with the application.</p>
    #[doc(hidden)]
    pub association_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The service integration information about the resource. </p>
    #[doc(hidden)]
    pub integrations: std::option::Option<crate::types::ResourceIntegrations>,
}
impl Resource {
    /// <p>The name of the resource.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon resource name (ARN) of the resource.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The time the resource was associated with the application.</p>
    pub fn association_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.association_time.as_ref()
    }
    /// <p>The service integration information about the resource. </p>
    pub fn integrations(&self) -> std::option::Option<&crate::types::ResourceIntegrations> {
        self.integrations.as_ref()
    }
}
impl Resource {
    /// Creates a new builder-style object to manufacture [`Resource`](crate::types::Resource).
    pub fn builder() -> crate::types::builders::ResourceBuilder {
        crate::types::builders::ResourceBuilder::default()
    }
}

/// A builder for [`Resource`](crate::types::Resource).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResourceBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) association_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) integrations: std::option::Option<crate::types::ResourceIntegrations>,
}
impl ResourceBuilder {
    /// <p>The name of the resource.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the resource.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The Amazon resource name (ARN) of the resource.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon resource name (ARN) of the resource.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The time the resource was associated with the application.</p>
    pub fn association_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.association_time = Some(input);
        self
    }
    /// <p>The time the resource was associated with the application.</p>
    pub fn set_association_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.association_time = input;
        self
    }
    /// <p>The service integration information about the resource. </p>
    pub fn integrations(mut self, input: crate::types::ResourceIntegrations) -> Self {
        self.integrations = Some(input);
        self
    }
    /// <p>The service integration information about the resource. </p>
    pub fn set_integrations(
        mut self,
        input: std::option::Option<crate::types::ResourceIntegrations>,
    ) -> Self {
        self.integrations = input;
        self
    }
    /// Consumes the builder and constructs a [`Resource`](crate::types::Resource).
    pub fn build(self) -> crate::types::Resource {
        crate::types::Resource {
            name: self.name,
            arn: self.arn,
            association_time: self.association_time,
            integrations: self.integrations,
        }
    }
}
