// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Includes all of the Service Catalog AppRegistry settings. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AppRegistryConfiguration {
    /// <p> Includes the definition of a <code>tagQuery</code>. </p>
    #[doc(hidden)]
    pub tag_query_configuration: std::option::Option<crate::types::TagQueryConfiguration>,
}
impl AppRegistryConfiguration {
    /// <p> Includes the definition of a <code>tagQuery</code>. </p>
    pub fn tag_query_configuration(
        &self,
    ) -> std::option::Option<&crate::types::TagQueryConfiguration> {
        self.tag_query_configuration.as_ref()
    }
}
impl AppRegistryConfiguration {
    /// Creates a new builder-style object to manufacture [`AppRegistryConfiguration`](crate::types::AppRegistryConfiguration).
    pub fn builder() -> crate::types::builders::AppRegistryConfigurationBuilder {
        crate::types::builders::AppRegistryConfigurationBuilder::default()
    }
}

/// A builder for [`AppRegistryConfiguration`](crate::types::AppRegistryConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AppRegistryConfigurationBuilder {
    pub(crate) tag_query_configuration: std::option::Option<crate::types::TagQueryConfiguration>,
}
impl AppRegistryConfigurationBuilder {
    /// <p> Includes the definition of a <code>tagQuery</code>. </p>
    pub fn tag_query_configuration(mut self, input: crate::types::TagQueryConfiguration) -> Self {
        self.tag_query_configuration = Some(input);
        self
    }
    /// <p> Includes the definition of a <code>tagQuery</code>. </p>
    pub fn set_tag_query_configuration(
        mut self,
        input: std::option::Option<crate::types::TagQueryConfiguration>,
    ) -> Self {
        self.tag_query_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`AppRegistryConfiguration`](crate::types::AppRegistryConfiguration).
    pub fn build(self) -> crate::types::AppRegistryConfiguration {
        crate::types::AppRegistryConfiguration {
            tag_query_configuration: self.tag_query_configuration,
        }
    }
}
