// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The information about the resource.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResourceInfo {
    /// <p>The name of the resource.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The Amazon resource name (ARN) that specifies the resource across services.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p> Provides information about the Service Catalog App Registry resource type. </p>
    #[doc(hidden)]
    pub resource_type: std::option::Option<crate::types::ResourceType>,
    /// <p> The details related to the resource. </p>
    #[doc(hidden)]
    pub resource_details: std::option::Option<crate::types::ResourceDetails>,
}
impl ResourceInfo {
    /// <p>The name of the resource.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon resource name (ARN) that specifies the resource across services.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p> Provides information about the Service Catalog App Registry resource type. </p>
    pub fn resource_type(&self) -> std::option::Option<&crate::types::ResourceType> {
        self.resource_type.as_ref()
    }
    /// <p> The details related to the resource. </p>
    pub fn resource_details(&self) -> std::option::Option<&crate::types::ResourceDetails> {
        self.resource_details.as_ref()
    }
}
impl ResourceInfo {
    /// Creates a new builder-style object to manufacture [`ResourceInfo`](crate::types::ResourceInfo).
    pub fn builder() -> crate::types::builders::ResourceInfoBuilder {
        crate::types::builders::ResourceInfoBuilder::default()
    }
}

/// A builder for [`ResourceInfo`](crate::types::ResourceInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResourceInfoBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) resource_type: std::option::Option<crate::types::ResourceType>,
    pub(crate) resource_details: std::option::Option<crate::types::ResourceDetails>,
}
impl ResourceInfoBuilder {
    /// <p>The name of the resource.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the resource.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The Amazon resource name (ARN) that specifies the resource across services.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon resource name (ARN) that specifies the resource across services.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p> Provides information about the Service Catalog App Registry resource type. </p>
    pub fn resource_type(mut self, input: crate::types::ResourceType) -> Self {
        self.resource_type = Some(input);
        self
    }
    /// <p> Provides information about the Service Catalog App Registry resource type. </p>
    pub fn set_resource_type(
        mut self,
        input: std::option::Option<crate::types::ResourceType>,
    ) -> Self {
        self.resource_type = input;
        self
    }
    /// <p> The details related to the resource. </p>
    pub fn resource_details(mut self, input: crate::types::ResourceDetails) -> Self {
        self.resource_details = Some(input);
        self
    }
    /// <p> The details related to the resource. </p>
    pub fn set_resource_details(
        mut self,
        input: std::option::Option<crate::types::ResourceDetails>,
    ) -> Self {
        self.resource_details = input;
        self
    }
    /// Consumes the builder and constructs a [`ResourceInfo`](crate::types::ResourceInfo).
    pub fn build(self) -> crate::types::ResourceInfo {
        crate::types::ResourceInfo {
            name: self.name,
            arn: self.arn,
            resource_type: self.resource_type,
            resource_details: self.resource_details,
        }
    }
}
