// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_associated_resources::_list_associated_resources_output::ListAssociatedResourcesOutputBuilder;

pub use crate::operation::list_associated_resources::_list_associated_resources_input::ListAssociatedResourcesInputBuilder;

/// Fluent builder constructing a request to `ListAssociatedResources`.
///
/// <p> Lists all of the resources that are associated with the specified application. Results are paginated. </p> <note>
/// <p> If you share an application, and a consumer account associates a tag query to the application, all of the users who can access the application can also view the tag values in all accounts that are associated with it using this API. </p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListAssociatedResourcesFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner:
        crate::operation::list_associated_resources::builders::ListAssociatedResourcesInputBuilder,
}
impl ListAssociatedResourcesFluentBuilder {
    /// Creates a new `ListAssociatedResources`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::list_associated_resources::ListAssociatedResources,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::list_associated_resources::ListAssociatedResourcesError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::list_associated_resources::ListAssociatedResourcesOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::list_associated_resources::ListAssociatedResourcesError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_associated_resources::paginator::ListAssociatedResourcesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::operation::list_associated_resources::paginator::ListAssociatedResourcesPaginator
    {
        crate::operation::list_associated_resources::paginator::ListAssociatedResourcesPaginator::new(self.handle, self.inner)
    }
    /// <p>The name or ID of the application.</p>
    pub fn application(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.application(input.into());
        self
    }
    /// <p>The name or ID of the application.</p>
    pub fn set_application(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_application(input);
        self
    }
    /// <p>The token to use to get the next page of results after a previous API call. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token to use to get the next page of results after a previous API call. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The upper bound of the number of results to return (cannot exceed 25). If this parameter is omitted, it defaults to 25. This value is optional.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The upper bound of the number of results to return (cannot exceed 25). If this parameter is omitted, it defaults to 25. This value is optional.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}
