// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Fluent builder constructing a request to `CreateApp`.
///
/// <p> Creates a new Amplify app. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateApp {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_app_input::Builder,
}
impl CreateApp {
    /// Creates a new `CreateApp`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateApp,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateAppError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateAppOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateAppError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The name for an Amplify app. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p> The name for an Amplify app. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p> The description for an Amplify app. </p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p> The description for an Amplify app. </p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p> The repository for an Amplify app. </p>
    pub fn repository(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.repository(input.into());
        self
    }
    /// <p> The repository for an Amplify app. </p>
    pub fn set_repository(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_repository(input);
        self
    }
    /// <p> The platform for the Amplify app. For a static app, set the platform type to <code>WEB</code>. For a dynamic server-side rendered (SSR) app, set the platform type to <code>WEB_COMPUTE</code>. For an app requiring Amplify Hosting's original SSR support only, set the platform type to <code>WEB_DYNAMIC</code>.</p>
    pub fn platform(mut self, input: crate::model::Platform) -> Self {
        self.inner = self.inner.platform(input);
        self
    }
    /// <p> The platform for the Amplify app. For a static app, set the platform type to <code>WEB</code>. For a dynamic server-side rendered (SSR) app, set the platform type to <code>WEB_COMPUTE</code>. For an app requiring Amplify Hosting's original SSR support only, set the platform type to <code>WEB_DYNAMIC</code>.</p>
    pub fn set_platform(mut self, input: std::option::Option<crate::model::Platform>) -> Self {
        self.inner = self.inner.set_platform(input);
        self
    }
    /// <p> The AWS Identity and Access Management (IAM) service role for an Amplify app. </p>
    pub fn iam_service_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.iam_service_role_arn(input.into());
        self
    }
    /// <p> The AWS Identity and Access Management (IAM) service role for an Amplify app. </p>
    pub fn set_iam_service_role_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_iam_service_role_arn(input);
        self
    }
    /// <p>The OAuth token for a third-party source control system for an Amplify app. The OAuth token is used to create a webhook and a read-only deploy key using SSH cloning. The OAuth token is not stored.</p>
    /// <p>Use <code>oauthToken</code> for repository providers other than GitHub, such as Bitbucket or CodeCommit. To authorize access to GitHub as your repository provider, use <code>accessToken</code>.</p>
    /// <p>You must specify either <code>oauthToken</code> or <code>accessToken</code> when you create a new app.</p>
    /// <p>Existing Amplify apps deployed from a GitHub repository using OAuth continue to work with CI/CD. However, we strongly recommend that you migrate these apps to use the GitHub App. For more information, see <a href="https://docs.aws.amazon.com/amplify/latest/UserGuide/setting-up-GitHub-access.html#migrating-to-github-app-auth">Migrating an existing OAuth app to the Amplify GitHub App</a> in the <i>Amplify User Guide</i> .</p>
    pub fn oauth_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.oauth_token(input.into());
        self
    }
    /// <p>The OAuth token for a third-party source control system for an Amplify app. The OAuth token is used to create a webhook and a read-only deploy key using SSH cloning. The OAuth token is not stored.</p>
    /// <p>Use <code>oauthToken</code> for repository providers other than GitHub, such as Bitbucket or CodeCommit. To authorize access to GitHub as your repository provider, use <code>accessToken</code>.</p>
    /// <p>You must specify either <code>oauthToken</code> or <code>accessToken</code> when you create a new app.</p>
    /// <p>Existing Amplify apps deployed from a GitHub repository using OAuth continue to work with CI/CD. However, we strongly recommend that you migrate these apps to use the GitHub App. For more information, see <a href="https://docs.aws.amazon.com/amplify/latest/UserGuide/setting-up-GitHub-access.html#migrating-to-github-app-auth">Migrating an existing OAuth app to the Amplify GitHub App</a> in the <i>Amplify User Guide</i> .</p>
    pub fn set_oauth_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_oauth_token(input);
        self
    }
    /// <p>The personal access token for a GitHub repository for an Amplify app. The personal access token is used to authorize access to a GitHub repository using the Amplify GitHub App. The token is not stored.</p>
    /// <p>Use <code>accessToken</code> for GitHub repositories only. To authorize access to a repository provider such as Bitbucket or CodeCommit, use <code>oauthToken</code>.</p>
    /// <p>You must specify either <code>accessToken</code> or <code>oauthToken</code> when you create a new app.</p>
    /// <p>Existing Amplify apps deployed from a GitHub repository using OAuth continue to work with CI/CD. However, we strongly recommend that you migrate these apps to use the GitHub App. For more information, see <a href="https://docs.aws.amazon.com/amplify/latest/UserGuide/setting-up-GitHub-access.html#migrating-to-github-app-auth">Migrating an existing OAuth app to the Amplify GitHub App</a> in the <i>Amplify User Guide</i> .</p>
    pub fn access_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.access_token(input.into());
        self
    }
    /// <p>The personal access token for a GitHub repository for an Amplify app. The personal access token is used to authorize access to a GitHub repository using the Amplify GitHub App. The token is not stored.</p>
    /// <p>Use <code>accessToken</code> for GitHub repositories only. To authorize access to a repository provider such as Bitbucket or CodeCommit, use <code>oauthToken</code>.</p>
    /// <p>You must specify either <code>accessToken</code> or <code>oauthToken</code> when you create a new app.</p>
    /// <p>Existing Amplify apps deployed from a GitHub repository using OAuth continue to work with CI/CD. However, we strongly recommend that you migrate these apps to use the GitHub App. For more information, see <a href="https://docs.aws.amazon.com/amplify/latest/UserGuide/setting-up-GitHub-access.html#migrating-to-github-app-auth">Migrating an existing OAuth app to the Amplify GitHub App</a> in the <i>Amplify User Guide</i> .</p>
    pub fn set_access_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_access_token(input);
        self
    }
    /// Adds a key-value pair to `environmentVariables`.
    ///
    /// To override the contents of this collection use [`set_environment_variables`](Self::set_environment_variables).
    ///
    /// <p> The environment variables map for an Amplify app. </p>
    pub fn environment_variables(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.environment_variables(k.into(), v.into());
        self
    }
    /// <p> The environment variables map for an Amplify app. </p>
    pub fn set_environment_variables(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_environment_variables(input);
        self
    }
    /// <p> Enables the auto building of branches for an Amplify app. </p>
    pub fn enable_branch_auto_build(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_branch_auto_build(input);
        self
    }
    /// <p> Enables the auto building of branches for an Amplify app. </p>
    pub fn set_enable_branch_auto_build(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_branch_auto_build(input);
        self
    }
    /// <p> Automatically disconnects a branch in the Amplify Console when you delete a branch from your Git repository. </p>
    pub fn enable_branch_auto_deletion(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_branch_auto_deletion(input);
        self
    }
    /// <p> Automatically disconnects a branch in the Amplify Console when you delete a branch from your Git repository. </p>
    pub fn set_enable_branch_auto_deletion(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_branch_auto_deletion(input);
        self
    }
    /// <p> Enables basic authorization for an Amplify app. This will apply to all branches that are part of this app. </p>
    pub fn enable_basic_auth(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_basic_auth(input);
        self
    }
    /// <p> Enables basic authorization for an Amplify app. This will apply to all branches that are part of this app. </p>
    pub fn set_enable_basic_auth(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_basic_auth(input);
        self
    }
    /// <p> The credentials for basic authorization for an Amplify app. You must base64-encode the authorization credentials and provide them in the format <code>user:password</code>.</p>
    pub fn basic_auth_credentials(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.basic_auth_credentials(input.into());
        self
    }
    /// <p> The credentials for basic authorization for an Amplify app. You must base64-encode the authorization credentials and provide them in the format <code>user:password</code>.</p>
    pub fn set_basic_auth_credentials(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_basic_auth_credentials(input);
        self
    }
    /// Appends an item to `customRules`.
    ///
    /// To override the contents of this collection use [`set_custom_rules`](Self::set_custom_rules).
    ///
    /// <p> The custom rewrite and redirect rules for an Amplify app. </p>
    pub fn custom_rules(mut self, input: crate::model::CustomRule) -> Self {
        self.inner = self.inner.custom_rules(input);
        self
    }
    /// <p> The custom rewrite and redirect rules for an Amplify app. </p>
    pub fn set_custom_rules(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::CustomRule>>,
    ) -> Self {
        self.inner = self.inner.set_custom_rules(input);
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p> The tag for an Amplify app. </p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p> The tag for an Amplify app. </p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p> The build specification (build spec) for an Amplify app. </p>
    pub fn build_spec(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.build_spec(input.into());
        self
    }
    /// <p> The build specification (build spec) for an Amplify app. </p>
    pub fn set_build_spec(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_build_spec(input);
        self
    }
    /// <p>The custom HTTP headers for an Amplify app.</p>
    pub fn custom_headers(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.custom_headers(input.into());
        self
    }
    /// <p>The custom HTTP headers for an Amplify app.</p>
    pub fn set_custom_headers(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_custom_headers(input);
        self
    }
    /// <p> Enables automated branch creation for an Amplify app. </p>
    pub fn enable_auto_branch_creation(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_auto_branch_creation(input);
        self
    }
    /// <p> Enables automated branch creation for an Amplify app. </p>
    pub fn set_enable_auto_branch_creation(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_auto_branch_creation(input);
        self
    }
    /// Appends an item to `autoBranchCreationPatterns`.
    ///
    /// To override the contents of this collection use [`set_auto_branch_creation_patterns`](Self::set_auto_branch_creation_patterns).
    ///
    /// <p> The automated branch creation glob patterns for an Amplify app. </p>
    pub fn auto_branch_creation_patterns(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.auto_branch_creation_patterns(input.into());
        self
    }
    /// <p> The automated branch creation glob patterns for an Amplify app. </p>
    pub fn set_auto_branch_creation_patterns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_auto_branch_creation_patterns(input);
        self
    }
    /// <p> The automated branch creation configuration for an Amplify app. </p>
    pub fn auto_branch_creation_config(
        mut self,
        input: crate::model::AutoBranchCreationConfig,
    ) -> Self {
        self.inner = self.inner.auto_branch_creation_config(input);
        self
    }
    /// <p> The automated branch creation configuration for an Amplify app. </p>
    pub fn set_auto_branch_creation_config(
        mut self,
        input: std::option::Option<crate::model::AutoBranchCreationConfig>,
    ) -> Self {
        self.inner = self.inner.set_auto_branch_creation_config(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateBackendEnvironment`.
///
/// <p> Creates a new backend environment for an Amplify app. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateBackendEnvironment {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_backend_environment_input::Builder,
}
impl CreateBackendEnvironment {
    /// Creates a new `CreateBackendEnvironment`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateBackendEnvironment,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateBackendEnvironmentError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateBackendEnvironmentOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateBackendEnvironmentError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.app_id(input.into());
        self
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_app_id(input);
        self
    }
    /// <p> The name for the backend environment. </p>
    pub fn environment_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.environment_name(input.into());
        self
    }
    /// <p> The name for the backend environment. </p>
    pub fn set_environment_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_environment_name(input);
        self
    }
    /// <p> The AWS CloudFormation stack name of a backend environment. </p>
    pub fn stack_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.stack_name(input.into());
        self
    }
    /// <p> The AWS CloudFormation stack name of a backend environment. </p>
    pub fn set_stack_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_stack_name(input);
        self
    }
    /// <p> The name of deployment artifacts. </p>
    pub fn deployment_artifacts(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.deployment_artifacts(input.into());
        self
    }
    /// <p> The name of deployment artifacts. </p>
    pub fn set_deployment_artifacts(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_deployment_artifacts(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateBranch`.
///
/// <p> Creates a new branch for an Amplify app. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateBranch {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_branch_input::Builder,
}
impl CreateBranch {
    /// Creates a new `CreateBranch`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateBranch,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateBranchError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateBranchOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateBranchError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.app_id(input.into());
        self
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_app_id(input);
        self
    }
    /// <p> The name for the branch. </p>
    pub fn branch_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.branch_name(input.into());
        self
    }
    /// <p> The name for the branch. </p>
    pub fn set_branch_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_branch_name(input);
        self
    }
    /// <p> The description for the branch. </p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p> The description for the branch. </p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p> Describes the current stage for the branch. </p>
    pub fn stage(mut self, input: crate::model::Stage) -> Self {
        self.inner = self.inner.stage(input);
        self
    }
    /// <p> Describes the current stage for the branch. </p>
    pub fn set_stage(mut self, input: std::option::Option<crate::model::Stage>) -> Self {
        self.inner = self.inner.set_stage(input);
        self
    }
    /// <p> The framework for the branch. </p>
    pub fn framework(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.framework(input.into());
        self
    }
    /// <p> The framework for the branch. </p>
    pub fn set_framework(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_framework(input);
        self
    }
    /// <p> Enables notifications for the branch. </p>
    pub fn enable_notification(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_notification(input);
        self
    }
    /// <p> Enables notifications for the branch. </p>
    pub fn set_enable_notification(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_notification(input);
        self
    }
    /// <p> Enables auto building for the branch. </p>
    pub fn enable_auto_build(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_auto_build(input);
        self
    }
    /// <p> Enables auto building for the branch. </p>
    pub fn set_enable_auto_build(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_auto_build(input);
        self
    }
    /// Adds a key-value pair to `environmentVariables`.
    ///
    /// To override the contents of this collection use [`set_environment_variables`](Self::set_environment_variables).
    ///
    /// <p> The environment variables for the branch. </p>
    pub fn environment_variables(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.environment_variables(k.into(), v.into());
        self
    }
    /// <p> The environment variables for the branch. </p>
    pub fn set_environment_variables(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_environment_variables(input);
        self
    }
    /// <p> The basic authorization credentials for the branch. You must base64-encode the authorization credentials and provide them in the format <code>user:password</code>.</p>
    pub fn basic_auth_credentials(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.basic_auth_credentials(input.into());
        self
    }
    /// <p> The basic authorization credentials for the branch. You must base64-encode the authorization credentials and provide them in the format <code>user:password</code>.</p>
    pub fn set_basic_auth_credentials(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_basic_auth_credentials(input);
        self
    }
    /// <p> Enables basic authorization for the branch. </p>
    pub fn enable_basic_auth(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_basic_auth(input);
        self
    }
    /// <p> Enables basic authorization for the branch. </p>
    pub fn set_enable_basic_auth(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_basic_auth(input);
        self
    }
    /// <p>Enables performance mode for the branch.</p>
    /// <p>Performance mode optimizes for faster hosting performance by keeping content cached at the edge for a longer interval. When performance mode is enabled, hosting configuration or code changes can take up to 10 minutes to roll out. </p>
    pub fn enable_performance_mode(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_performance_mode(input);
        self
    }
    /// <p>Enables performance mode for the branch.</p>
    /// <p>Performance mode optimizes for faster hosting performance by keeping content cached at the edge for a longer interval. When performance mode is enabled, hosting configuration or code changes can take up to 10 minutes to roll out. </p>
    pub fn set_enable_performance_mode(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_performance_mode(input);
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p> The tag for the branch. </p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p> The tag for the branch. </p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p> The build specification (build spec) for the branch. </p>
    pub fn build_spec(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.build_spec(input.into());
        self
    }
    /// <p> The build specification (build spec) for the branch. </p>
    pub fn set_build_spec(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_build_spec(input);
        self
    }
    /// <p> The content Time To Live (TTL) for the website in seconds. </p>
    pub fn ttl(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.ttl(input.into());
        self
    }
    /// <p> The content Time To Live (TTL) for the website in seconds. </p>
    pub fn set_ttl(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_ttl(input);
        self
    }
    /// <p> The display name for a branch. This is used as the default domain prefix. </p>
    pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.display_name(input.into());
        self
    }
    /// <p> The display name for a branch. This is used as the default domain prefix. </p>
    pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_display_name(input);
        self
    }
    /// <p> Enables pull request previews for this branch. </p>
    pub fn enable_pull_request_preview(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_pull_request_preview(input);
        self
    }
    /// <p> Enables pull request previews for this branch. </p>
    pub fn set_enable_pull_request_preview(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_pull_request_preview(input);
        self
    }
    /// <p> The Amplify environment name for the pull request. </p>
    pub fn pull_request_environment_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pull_request_environment_name(input.into());
        self
    }
    /// <p> The Amplify environment name for the pull request. </p>
    pub fn set_pull_request_environment_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_pull_request_environment_name(input);
        self
    }
    /// <p> The Amazon Resource Name (ARN) for a backend environment that is part of an Amplify app. </p>
    pub fn backend_environment_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.backend_environment_arn(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) for a backend environment that is part of an Amplify app. </p>
    pub fn set_backend_environment_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_backend_environment_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateDeployment`.
///
/// <p> Creates a deployment for a manually deployed Amplify app. Manually deployed apps are not connected to a repository. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateDeployment {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_deployment_input::Builder,
}
impl CreateDeployment {
    /// Creates a new `CreateDeployment`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateDeployment,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateDeploymentError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateDeploymentOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateDeploymentError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.app_id(input.into());
        self
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_app_id(input);
        self
    }
    /// <p> The name for the branch, for the job. </p>
    pub fn branch_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.branch_name(input.into());
        self
    }
    /// <p> The name for the branch, for the job. </p>
    pub fn set_branch_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_branch_name(input);
        self
    }
    /// Adds a key-value pair to `fileMap`.
    ///
    /// To override the contents of this collection use [`set_file_map`](Self::set_file_map).
    ///
    /// <p> An optional file map that contains the file name as the key and the file content md5 hash as the value. If this argument is provided, the service will generate a unique upload URL per file. Otherwise, the service will only generate a single upload URL for the zipped files. </p>
    pub fn file_map(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.file_map(k.into(), v.into());
        self
    }
    /// <p> An optional file map that contains the file name as the key and the file content md5 hash as the value. If this argument is provided, the service will generate a unique upload URL per file. Otherwise, the service will only generate a single upload URL for the zipped files. </p>
    pub fn set_file_map(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_file_map(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateDomainAssociation`.
///
/// <p> Creates a new domain association for an Amplify app. This action associates a custom domain with the Amplify app </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateDomainAssociation {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_domain_association_input::Builder,
}
impl CreateDomainAssociation {
    /// Creates a new `CreateDomainAssociation`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateDomainAssociation,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateDomainAssociationError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateDomainAssociationOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateDomainAssociationError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.app_id(input.into());
        self
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_app_id(input);
        self
    }
    /// <p> The domain name for the domain association. </p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_name(input.into());
        self
    }
    /// <p> The domain name for the domain association. </p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_name(input);
        self
    }
    /// <p> Enables the automated creation of subdomains for branches. </p>
    pub fn enable_auto_sub_domain(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_auto_sub_domain(input);
        self
    }
    /// <p> Enables the automated creation of subdomains for branches. </p>
    pub fn set_enable_auto_sub_domain(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_auto_sub_domain(input);
        self
    }
    /// Appends an item to `subDomainSettings`.
    ///
    /// To override the contents of this collection use [`set_sub_domain_settings`](Self::set_sub_domain_settings).
    ///
    /// <p> The setting for the subdomain. </p>
    pub fn sub_domain_settings(mut self, input: crate::model::SubDomainSetting) -> Self {
        self.inner = self.inner.sub_domain_settings(input);
        self
    }
    /// <p> The setting for the subdomain. </p>
    pub fn set_sub_domain_settings(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::SubDomainSetting>>,
    ) -> Self {
        self.inner = self.inner.set_sub_domain_settings(input);
        self
    }
    /// Appends an item to `autoSubDomainCreationPatterns`.
    ///
    /// To override the contents of this collection use [`set_auto_sub_domain_creation_patterns`](Self::set_auto_sub_domain_creation_patterns).
    ///
    /// <p> Sets the branch patterns for automatic subdomain creation. </p>
    pub fn auto_sub_domain_creation_patterns(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.auto_sub_domain_creation_patterns(input.into());
        self
    }
    /// <p> Sets the branch patterns for automatic subdomain creation. </p>
    pub fn set_auto_sub_domain_creation_patterns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_auto_sub_domain_creation_patterns(input);
        self
    }
    /// <p> The required AWS Identity and Access Management (IAM) service role for the Amazon Resource Name (ARN) for automatically creating subdomains. </p>
    pub fn auto_sub_domain_iam_role(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.auto_sub_domain_iam_role(input.into());
        self
    }
    /// <p> The required AWS Identity and Access Management (IAM) service role for the Amazon Resource Name (ARN) for automatically creating subdomains. </p>
    pub fn set_auto_sub_domain_iam_role(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_auto_sub_domain_iam_role(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateWebhook`.
///
/// <p> Creates a new webhook on an Amplify app. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateWebhook {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_webhook_input::Builder,
}
impl CreateWebhook {
    /// Creates a new `CreateWebhook`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateWebhook,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateWebhookError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateWebhookOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateWebhookError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.app_id(input.into());
        self
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_app_id(input);
        self
    }
    /// <p> The name for a branch that is part of an Amplify app. </p>
    pub fn branch_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.branch_name(input.into());
        self
    }
    /// <p> The name for a branch that is part of an Amplify app. </p>
    pub fn set_branch_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_branch_name(input);
        self
    }
    /// <p> The description for a webhook. </p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p> The description for a webhook. </p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteApp`.
///
/// <p> Deletes an existing Amplify app specified by an app ID. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteApp {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_app_input::Builder,
}
impl DeleteApp {
    /// Creates a new `DeleteApp`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteApp,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteAppError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteAppOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteAppError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.app_id(input.into());
        self
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_app_id(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteBackendEnvironment`.
///
/// <p> Deletes a backend environment for an Amplify app. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteBackendEnvironment {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_backend_environment_input::Builder,
}
impl DeleteBackendEnvironment {
    /// Creates a new `DeleteBackendEnvironment`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteBackendEnvironment,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteBackendEnvironmentError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteBackendEnvironmentOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteBackendEnvironmentError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The unique ID of an Amplify app. </p>
    pub fn app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.app_id(input.into());
        self
    }
    /// <p> The unique ID of an Amplify app. </p>
    pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_app_id(input);
        self
    }
    /// <p> The name of a backend environment of an Amplify app. </p>
    pub fn environment_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.environment_name(input.into());
        self
    }
    /// <p> The name of a backend environment of an Amplify app. </p>
    pub fn set_environment_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_environment_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteBranch`.
///
/// <p> Deletes a branch for an Amplify app. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteBranch {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_branch_input::Builder,
}
impl DeleteBranch {
    /// Creates a new `DeleteBranch`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteBranch,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteBranchError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteBranchOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteBranchError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.app_id(input.into());
        self
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_app_id(input);
        self
    }
    /// <p> The name for the branch. </p>
    pub fn branch_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.branch_name(input.into());
        self
    }
    /// <p> The name for the branch. </p>
    pub fn set_branch_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_branch_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteDomainAssociation`.
///
/// <p> Deletes a domain association for an Amplify app. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDomainAssociation {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_domain_association_input::Builder,
}
impl DeleteDomainAssociation {
    /// Creates a new `DeleteDomainAssociation`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteDomainAssociation,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteDomainAssociationError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteDomainAssociationOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteDomainAssociationError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The unique id for an Amplify app. </p>
    pub fn app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.app_id(input.into());
        self
    }
    /// <p> The unique id for an Amplify app. </p>
    pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_app_id(input);
        self
    }
    /// <p> The name of the domain. </p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_name(input.into());
        self
    }
    /// <p> The name of the domain. </p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteJob`.
///
/// <p> Deletes a job for a branch of an Amplify app. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_job_input::Builder,
}
impl DeleteJob {
    /// Creates a new `DeleteJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteJobOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.app_id(input.into());
        self
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_app_id(input);
        self
    }
    /// <p> The name for the branch, for the job. </p>
    pub fn branch_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.branch_name(input.into());
        self
    }
    /// <p> The name for the branch, for the job. </p>
    pub fn set_branch_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_branch_name(input);
        self
    }
    /// <p> The unique ID for the job. </p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_id(input.into());
        self
    }
    /// <p> The unique ID for the job. </p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_job_id(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteWebhook`.
///
/// <p> Deletes a webhook. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteWebhook {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_webhook_input::Builder,
}
impl DeleteWebhook {
    /// Creates a new `DeleteWebhook`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteWebhook,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteWebhookError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteWebhookOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteWebhookError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The unique ID for a webhook. </p>
    pub fn webhook_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.webhook_id(input.into());
        self
    }
    /// <p> The unique ID for a webhook. </p>
    pub fn set_webhook_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_webhook_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GenerateAccessLogs`.
///
/// <p> Returns the website access logs for a specific time range using a presigned URL. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GenerateAccessLogs {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::generate_access_logs_input::Builder,
}
impl GenerateAccessLogs {
    /// Creates a new `GenerateAccessLogs`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GenerateAccessLogs,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GenerateAccessLogsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GenerateAccessLogsOutput,
        aws_smithy_http::result::SdkError<crate::error::GenerateAccessLogsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The time at which the logs should start. The time range specified is inclusive of the start time. </p>
    pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.start_time(input);
        self
    }
    /// <p> The time at which the logs should start. The time range specified is inclusive of the start time. </p>
    pub fn set_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_start_time(input);
        self
    }
    /// <p> The time at which the logs should end. The time range specified is inclusive of the end time. </p>
    pub fn end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.end_time(input);
        self
    }
    /// <p> The time at which the logs should end. The time range specified is inclusive of the end time. </p>
    pub fn set_end_time(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_end_time(input);
        self
    }
    /// <p> The name of the domain. </p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_name(input.into());
        self
    }
    /// <p> The name of the domain. </p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_name(input);
        self
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.app_id(input.into());
        self
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_app_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetApp`.
///
/// <p> Returns an existing Amplify app by appID. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetApp {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_app_input::Builder,
}
impl GetApp {
    /// Creates a new `GetApp`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetApp,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetAppError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetAppOutput,
        aws_smithy_http::result::SdkError<crate::error::GetAppError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.app_id(input.into());
        self
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_app_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetArtifactUrl`.
///
/// <p> Returns the artifact info that corresponds to an artifact id. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetArtifactUrl {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_artifact_url_input::Builder,
}
impl GetArtifactUrl {
    /// Creates a new `GetArtifactUrl`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetArtifactUrl,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetArtifactUrlError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetArtifactUrlOutput,
        aws_smithy_http::result::SdkError<crate::error::GetArtifactUrlError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The unique ID for an artifact. </p>
    pub fn artifact_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.artifact_id(input.into());
        self
    }
    /// <p> The unique ID for an artifact. </p>
    pub fn set_artifact_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_artifact_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetBackendEnvironment`.
///
/// <p> Returns a backend environment for an Amplify app. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetBackendEnvironment {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_backend_environment_input::Builder,
}
impl GetBackendEnvironment {
    /// Creates a new `GetBackendEnvironment`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetBackendEnvironment,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetBackendEnvironmentError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetBackendEnvironmentOutput,
        aws_smithy_http::result::SdkError<crate::error::GetBackendEnvironmentError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The unique id for an Amplify app. </p>
    pub fn app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.app_id(input.into());
        self
    }
    /// <p> The unique id for an Amplify app. </p>
    pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_app_id(input);
        self
    }
    /// <p> The name for the backend environment. </p>
    pub fn environment_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.environment_name(input.into());
        self
    }
    /// <p> The name for the backend environment. </p>
    pub fn set_environment_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_environment_name(input);
        self
    }
}

/// Fluent builder constructing a request to `GetBranch`.
///
/// <p> Returns a branch for an Amplify app. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetBranch {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_branch_input::Builder,
}
impl GetBranch {
    /// Creates a new `GetBranch`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetBranch,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetBranchError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetBranchOutput,
        aws_smithy_http::result::SdkError<crate::error::GetBranchError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.app_id(input.into());
        self
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_app_id(input);
        self
    }
    /// <p> The name for the branch. </p>
    pub fn branch_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.branch_name(input.into());
        self
    }
    /// <p> The name for the branch. </p>
    pub fn set_branch_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_branch_name(input);
        self
    }
}

/// Fluent builder constructing a request to `GetDomainAssociation`.
///
/// <p> Returns the domain information for an Amplify app. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetDomainAssociation {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_domain_association_input::Builder,
}
impl GetDomainAssociation {
    /// Creates a new `GetDomainAssociation`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetDomainAssociation,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetDomainAssociationError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetDomainAssociationOutput,
        aws_smithy_http::result::SdkError<crate::error::GetDomainAssociationError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The unique id for an Amplify app. </p>
    pub fn app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.app_id(input.into());
        self
    }
    /// <p> The unique id for an Amplify app. </p>
    pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_app_id(input);
        self
    }
    /// <p> The name of the domain. </p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_name(input.into());
        self
    }
    /// <p> The name of the domain. </p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_name(input);
        self
    }
}

/// Fluent builder constructing a request to `GetJob`.
///
/// <p> Returns a job for a branch of an Amplify app. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_job_input::Builder,
}
impl GetJob {
    /// Creates a new `GetJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetJobOutput,
        aws_smithy_http::result::SdkError<crate::error::GetJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.app_id(input.into());
        self
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_app_id(input);
        self
    }
    /// <p> The branch name for the job. </p>
    pub fn branch_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.branch_name(input.into());
        self
    }
    /// <p> The branch name for the job. </p>
    pub fn set_branch_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_branch_name(input);
        self
    }
    /// <p> The unique ID for the job. </p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_id(input.into());
        self
    }
    /// <p> The unique ID for the job. </p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_job_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetWebhook`.
///
/// <p> Returns the webhook information that corresponds to a specified webhook ID. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetWebhook {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_webhook_input::Builder,
}
impl GetWebhook {
    /// Creates a new `GetWebhook`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetWebhook,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetWebhookError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetWebhookOutput,
        aws_smithy_http::result::SdkError<crate::error::GetWebhookError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The unique ID for a webhook. </p>
    pub fn webhook_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.webhook_id(input.into());
        self
    }
    /// <p> The unique ID for a webhook. </p>
    pub fn set_webhook_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_webhook_id(input);
        self
    }
}

/// Fluent builder constructing a request to `ListApps`.
///
/// <p> Returns a list of the existing Amplify apps. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListApps {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_apps_input::Builder,
}
impl ListApps {
    /// Creates a new `ListApps`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListApps,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListAppsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListAppsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListAppsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> A pagination token. If non-null, the pagination token is returned in a result. Pass its value in another request to retrieve more entries. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> A pagination token. If non-null, the pagination token is returned in a result. Pass its value in another request to retrieve more entries. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p> The maximum number of records to list in a single response. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p> The maximum number of records to list in a single response. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListArtifacts`.
///
/// <p> Returns a list of artifacts for a specified app, branch, and job. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListArtifacts {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_artifacts_input::Builder,
}
impl ListArtifacts {
    /// Creates a new `ListArtifacts`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListArtifacts,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListArtifactsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListArtifactsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListArtifactsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.app_id(input.into());
        self
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_app_id(input);
        self
    }
    /// <p> The name of a branch that is part of an Amplify app. </p>
    pub fn branch_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.branch_name(input.into());
        self
    }
    /// <p> The name of a branch that is part of an Amplify app. </p>
    pub fn set_branch_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_branch_name(input);
        self
    }
    /// <p> The unique ID for a job. </p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_id(input.into());
        self
    }
    /// <p> The unique ID for a job. </p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_job_id(input);
        self
    }
    /// <p> A pagination token. Set to null to start listing artifacts from start. If a non-null pagination token is returned in a result, pass its value in here to list more artifacts. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> A pagination token. Set to null to start listing artifacts from start. If a non-null pagination token is returned in a result, pass its value in here to list more artifacts. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p> The maximum number of records to list in a single response. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p> The maximum number of records to list in a single response. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListBackendEnvironments`.
///
/// <p> Lists the backend environments for an Amplify app. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListBackendEnvironments {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_backend_environments_input::Builder,
}
impl ListBackendEnvironments {
    /// Creates a new `ListBackendEnvironments`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListBackendEnvironments,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListBackendEnvironmentsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListBackendEnvironmentsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListBackendEnvironmentsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.app_id(input.into());
        self
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_app_id(input);
        self
    }
    /// <p> The name of the backend environment </p>
    pub fn environment_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.environment_name(input.into());
        self
    }
    /// <p> The name of the backend environment </p>
    pub fn set_environment_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_environment_name(input);
        self
    }
    /// <p> A pagination token. Set to null to start listing backend environments from the start. If a non-null pagination token is returned in a result, pass its value in here to list more backend environments. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> A pagination token. Set to null to start listing backend environments from the start. If a non-null pagination token is returned in a result, pass its value in here to list more backend environments. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p> The maximum number of records to list in a single response. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p> The maximum number of records to list in a single response. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListBranches`.
///
/// <p> Lists the branches of an Amplify app. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListBranches {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_branches_input::Builder,
}
impl ListBranches {
    /// Creates a new `ListBranches`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListBranches,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListBranchesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListBranchesOutput,
        aws_smithy_http::result::SdkError<crate::error::ListBranchesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.app_id(input.into());
        self
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_app_id(input);
        self
    }
    /// <p> A pagination token. Set to null to start listing branches from the start. If a non-null pagination token is returned in a result, pass its value in here to list more branches. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> A pagination token. Set to null to start listing branches from the start. If a non-null pagination token is returned in a result, pass its value in here to list more branches. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p> The maximum number of records to list in a single response. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p> The maximum number of records to list in a single response. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListDomainAssociations`.
///
/// <p> Returns the domain associations for an Amplify app. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListDomainAssociations {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_domain_associations_input::Builder,
}
impl ListDomainAssociations {
    /// Creates a new `ListDomainAssociations`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListDomainAssociations,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListDomainAssociationsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListDomainAssociationsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListDomainAssociationsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.app_id(input.into());
        self
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_app_id(input);
        self
    }
    /// <p> A pagination token. Set to null to start listing apps from the start. If non-null, a pagination token is returned in a result. Pass its value in here to list more projects. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> A pagination token. Set to null to start listing apps from the start. If non-null, a pagination token is returned in a result. Pass its value in here to list more projects. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p> The maximum number of records to list in a single response. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p> The maximum number of records to list in a single response. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListJobs`.
///
/// <p> Lists the jobs for a branch of an Amplify app. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListJobs {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_jobs_input::Builder,
}
impl ListJobs {
    /// Creates a new `ListJobs`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListJobs,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListJobsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListJobsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListJobsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.app_id(input.into());
        self
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_app_id(input);
        self
    }
    /// <p> The name for a branch. </p>
    pub fn branch_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.branch_name(input.into());
        self
    }
    /// <p> The name for a branch. </p>
    pub fn set_branch_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_branch_name(input);
        self
    }
    /// <p> A pagination token. Set to null to start listing steps from the start. If a non-null pagination token is returned in a result, pass its value in here to list more steps. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> A pagination token. Set to null to start listing steps from the start. If a non-null pagination token is returned in a result, pass its value in here to list more steps. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p> The maximum number of records to list in a single response. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p> The maximum number of records to list in a single response. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListTagsForResource`.
///
/// <p> Returns a list of tags for a specified Amazon Resource Name (ARN). </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_tags_for_resource_input::Builder,
}
impl ListTagsForResource {
    /// Creates a new `ListTagsForResource`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListTagsForResource,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListTagsForResourceOutput,
        aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The Amazon Resource Name (ARN) to use to list tags. </p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) to use to list tags. </p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `ListWebhooks`.
///
/// <p> Returns a list of webhooks for an Amplify app. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListWebhooks {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_webhooks_input::Builder,
}
impl ListWebhooks {
    /// Creates a new `ListWebhooks`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListWebhooks,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListWebhooksError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListWebhooksOutput,
        aws_smithy_http::result::SdkError<crate::error::ListWebhooksError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.app_id(input.into());
        self
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_app_id(input);
        self
    }
    /// <p> A pagination token. Set to null to start listing webhooks from the start. If non-null,the pagination token is returned in a result. Pass its value in here to list more webhooks. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> A pagination token. Set to null to start listing webhooks from the start. If non-null,the pagination token is returned in a result. Pass its value in here to list more webhooks. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p> The maximum number of records to list in a single response. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p> The maximum number of records to list in a single response. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `StartDeployment`.
///
/// <p> Starts a deployment for a manually deployed app. Manually deployed apps are not connected to a repository. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StartDeployment {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::start_deployment_input::Builder,
}
impl StartDeployment {
    /// Creates a new `StartDeployment`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StartDeployment,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StartDeploymentError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StartDeploymentOutput,
        aws_smithy_http::result::SdkError<crate::error::StartDeploymentError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.app_id(input.into());
        self
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_app_id(input);
        self
    }
    /// <p> The name for the branch, for the job. </p>
    pub fn branch_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.branch_name(input.into());
        self
    }
    /// <p> The name for the branch, for the job. </p>
    pub fn set_branch_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_branch_name(input);
        self
    }
    /// <p> The job ID for this deployment, generated by the create deployment request. </p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_id(input.into());
        self
    }
    /// <p> The job ID for this deployment, generated by the create deployment request. </p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_job_id(input);
        self
    }
    /// <p> The source URL for this deployment, used when calling start deployment without create deployment. The source URL can be any HTTP GET URL that is publicly accessible and downloads a single .zip file. </p>
    pub fn source_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.source_url(input.into());
        self
    }
    /// <p> The source URL for this deployment, used when calling start deployment without create deployment. The source URL can be any HTTP GET URL that is publicly accessible and downloads a single .zip file. </p>
    pub fn set_source_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_source_url(input);
        self
    }
}

/// Fluent builder constructing a request to `StartJob`.
///
/// <p> Starts a new job for a branch of an Amplify app. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StartJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::start_job_input::Builder,
}
impl StartJob {
    /// Creates a new `StartJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StartJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StartJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StartJobOutput,
        aws_smithy_http::result::SdkError<crate::error::StartJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.app_id(input.into());
        self
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_app_id(input);
        self
    }
    /// <p> The branch name for the job. </p>
    pub fn branch_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.branch_name(input.into());
        self
    }
    /// <p> The branch name for the job. </p>
    pub fn set_branch_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_branch_name(input);
        self
    }
    /// <p> The unique ID for an existing job. This is required if the value of <code>jobType</code> is <code>RETRY</code>. </p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_id(input.into());
        self
    }
    /// <p> The unique ID for an existing job. This is required if the value of <code>jobType</code> is <code>RETRY</code>. </p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_job_id(input);
        self
    }
    /// <p> Describes the type for the job. The job type <code>RELEASE</code> starts a new job with the latest change from the specified branch. This value is available only for apps that are connected to a repository. The job type <code>RETRY</code> retries an existing job. If the job type value is <code>RETRY</code>, the <code>jobId</code> is also required. </p>
    pub fn job_type(mut self, input: crate::model::JobType) -> Self {
        self.inner = self.inner.job_type(input);
        self
    }
    /// <p> Describes the type for the job. The job type <code>RELEASE</code> starts a new job with the latest change from the specified branch. This value is available only for apps that are connected to a repository. The job type <code>RETRY</code> retries an existing job. If the job type value is <code>RETRY</code>, the <code>jobId</code> is also required. </p>
    pub fn set_job_type(mut self, input: std::option::Option<crate::model::JobType>) -> Self {
        self.inner = self.inner.set_job_type(input);
        self
    }
    /// <p> A descriptive reason for starting this job. </p>
    pub fn job_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_reason(input.into());
        self
    }
    /// <p> A descriptive reason for starting this job. </p>
    pub fn set_job_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_job_reason(input);
        self
    }
    /// <p> The commit ID from a third-party repository provider for the job. </p>
    pub fn commit_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.commit_id(input.into());
        self
    }
    /// <p> The commit ID from a third-party repository provider for the job. </p>
    pub fn set_commit_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_commit_id(input);
        self
    }
    /// <p> The commit message from a third-party repository provider for the job. </p>
    pub fn commit_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.commit_message(input.into());
        self
    }
    /// <p> The commit message from a third-party repository provider for the job. </p>
    pub fn set_commit_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_commit_message(input);
        self
    }
    /// <p> The commit date and time for the job. </p>
    pub fn commit_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.commit_time(input);
        self
    }
    /// <p> The commit date and time for the job. </p>
    pub fn set_commit_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_commit_time(input);
        self
    }
}

/// Fluent builder constructing a request to `StopJob`.
///
/// <p> Stops a job that is in progress for a branch of an Amplify app. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StopJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::stop_job_input::Builder,
}
impl StopJob {
    /// Creates a new `StopJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StopJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StopJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StopJobOutput,
        aws_smithy_http::result::SdkError<crate::error::StopJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.app_id(input.into());
        self
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_app_id(input);
        self
    }
    /// <p> The name for the branch, for the job. </p>
    pub fn branch_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.branch_name(input.into());
        self
    }
    /// <p> The name for the branch, for the job. </p>
    pub fn set_branch_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_branch_name(input);
        self
    }
    /// <p> The unique id for the job. </p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_id(input.into());
        self
    }
    /// <p> The unique id for the job. </p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_job_id(input);
        self
    }
}

/// Fluent builder constructing a request to `TagResource`.
///
/// <p> Tags the resource with a tag key and value. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::tag_resource_input::Builder,
}
impl TagResource {
    /// Creates a new `TagResource`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::TagResource,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::TagResourceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::TagResourceOutput,
        aws_smithy_http::result::SdkError<crate::error::TagResourceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The Amazon Resource Name (ARN) to use to tag a resource. </p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) to use to tag a resource. </p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p> The tags used to tag the resource. </p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p> The tags used to tag the resource. </p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `UntagResource`.
///
/// <p> Untags a resource with a specified Amazon Resource Name (ARN). </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::untag_resource_input::Builder,
}
impl UntagResource {
    /// Creates a new `UntagResource`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UntagResource,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UntagResourceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UntagResourceOutput,
        aws_smithy_http::result::SdkError<crate::error::UntagResourceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The Amazon Resource Name (ARN) to use to untag a resource. </p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) to use to untag a resource. </p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
    /// Appends an item to `tagKeys`.
    ///
    /// To override the contents of this collection use [`set_tag_keys`](Self::set_tag_keys).
    ///
    /// <p> The tag keys to use to untag a resource. </p>
    pub fn tag_keys(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.tag_keys(input.into());
        self
    }
    /// <p> The tag keys to use to untag a resource. </p>
    pub fn set_tag_keys(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_tag_keys(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateApp`.
///
/// <p> Updates an existing Amplify app. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateApp {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_app_input::Builder,
}
impl UpdateApp {
    /// Creates a new `UpdateApp`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateApp,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateAppError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateAppOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateAppError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.app_id(input.into());
        self
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_app_id(input);
        self
    }
    /// <p> The name for an Amplify app. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p> The name for an Amplify app. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p> The description for an Amplify app. </p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p> The description for an Amplify app. </p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p> The platform for the Amplify app. For a static app, set the platform type to <code>WEB</code>. For a dynamic server-side rendered (SSR) app, set the platform type to <code>WEB_COMPUTE</code>. For an app requiring Amplify Hosting's original SSR support only, set the platform type to <code>WEB_DYNAMIC</code>.</p>
    pub fn platform(mut self, input: crate::model::Platform) -> Self {
        self.inner = self.inner.platform(input);
        self
    }
    /// <p> The platform for the Amplify app. For a static app, set the platform type to <code>WEB</code>. For a dynamic server-side rendered (SSR) app, set the platform type to <code>WEB_COMPUTE</code>. For an app requiring Amplify Hosting's original SSR support only, set the platform type to <code>WEB_DYNAMIC</code>.</p>
    pub fn set_platform(mut self, input: std::option::Option<crate::model::Platform>) -> Self {
        self.inner = self.inner.set_platform(input);
        self
    }
    /// <p> The AWS Identity and Access Management (IAM) service role for an Amplify app. </p>
    pub fn iam_service_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.iam_service_role_arn(input.into());
        self
    }
    /// <p> The AWS Identity and Access Management (IAM) service role for an Amplify app. </p>
    pub fn set_iam_service_role_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_iam_service_role_arn(input);
        self
    }
    /// Adds a key-value pair to `environmentVariables`.
    ///
    /// To override the contents of this collection use [`set_environment_variables`](Self::set_environment_variables).
    ///
    /// <p> The environment variables for an Amplify app. </p>
    pub fn environment_variables(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.environment_variables(k.into(), v.into());
        self
    }
    /// <p> The environment variables for an Amplify app. </p>
    pub fn set_environment_variables(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_environment_variables(input);
        self
    }
    /// <p> Enables branch auto-building for an Amplify app. </p>
    pub fn enable_branch_auto_build(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_branch_auto_build(input);
        self
    }
    /// <p> Enables branch auto-building for an Amplify app. </p>
    pub fn set_enable_branch_auto_build(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_branch_auto_build(input);
        self
    }
    /// <p> Automatically disconnects a branch in the Amplify Console when you delete a branch from your Git repository. </p>
    pub fn enable_branch_auto_deletion(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_branch_auto_deletion(input);
        self
    }
    /// <p> Automatically disconnects a branch in the Amplify Console when you delete a branch from your Git repository. </p>
    pub fn set_enable_branch_auto_deletion(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_branch_auto_deletion(input);
        self
    }
    /// <p> Enables basic authorization for an Amplify app. </p>
    pub fn enable_basic_auth(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_basic_auth(input);
        self
    }
    /// <p> Enables basic authorization for an Amplify app. </p>
    pub fn set_enable_basic_auth(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_basic_auth(input);
        self
    }
    /// <p> The basic authorization credentials for an Amplify app. You must base64-encode the authorization credentials and provide them in the format <code>user:password</code>.</p>
    pub fn basic_auth_credentials(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.basic_auth_credentials(input.into());
        self
    }
    /// <p> The basic authorization credentials for an Amplify app. You must base64-encode the authorization credentials and provide them in the format <code>user:password</code>.</p>
    pub fn set_basic_auth_credentials(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_basic_auth_credentials(input);
        self
    }
    /// Appends an item to `customRules`.
    ///
    /// To override the contents of this collection use [`set_custom_rules`](Self::set_custom_rules).
    ///
    /// <p> The custom redirect and rewrite rules for an Amplify app. </p>
    pub fn custom_rules(mut self, input: crate::model::CustomRule) -> Self {
        self.inner = self.inner.custom_rules(input);
        self
    }
    /// <p> The custom redirect and rewrite rules for an Amplify app. </p>
    pub fn set_custom_rules(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::CustomRule>>,
    ) -> Self {
        self.inner = self.inner.set_custom_rules(input);
        self
    }
    /// <p> The build specification (build spec) for an Amplify app. </p>
    pub fn build_spec(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.build_spec(input.into());
        self
    }
    /// <p> The build specification (build spec) for an Amplify app. </p>
    pub fn set_build_spec(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_build_spec(input);
        self
    }
    /// <p>The custom HTTP headers for an Amplify app.</p>
    pub fn custom_headers(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.custom_headers(input.into());
        self
    }
    /// <p>The custom HTTP headers for an Amplify app.</p>
    pub fn set_custom_headers(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_custom_headers(input);
        self
    }
    /// <p> Enables automated branch creation for an Amplify app. </p>
    pub fn enable_auto_branch_creation(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_auto_branch_creation(input);
        self
    }
    /// <p> Enables automated branch creation for an Amplify app. </p>
    pub fn set_enable_auto_branch_creation(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_auto_branch_creation(input);
        self
    }
    /// Appends an item to `autoBranchCreationPatterns`.
    ///
    /// To override the contents of this collection use [`set_auto_branch_creation_patterns`](Self::set_auto_branch_creation_patterns).
    ///
    /// <p> Describes the automated branch creation glob patterns for an Amplify app. </p>
    pub fn auto_branch_creation_patterns(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.auto_branch_creation_patterns(input.into());
        self
    }
    /// <p> Describes the automated branch creation glob patterns for an Amplify app. </p>
    pub fn set_auto_branch_creation_patterns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_auto_branch_creation_patterns(input);
        self
    }
    /// <p> The automated branch creation configuration for an Amplify app. </p>
    pub fn auto_branch_creation_config(
        mut self,
        input: crate::model::AutoBranchCreationConfig,
    ) -> Self {
        self.inner = self.inner.auto_branch_creation_config(input);
        self
    }
    /// <p> The automated branch creation configuration for an Amplify app. </p>
    pub fn set_auto_branch_creation_config(
        mut self,
        input: std::option::Option<crate::model::AutoBranchCreationConfig>,
    ) -> Self {
        self.inner = self.inner.set_auto_branch_creation_config(input);
        self
    }
    /// <p> The name of the repository for an Amplify app </p>
    pub fn repository(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.repository(input.into());
        self
    }
    /// <p> The name of the repository for an Amplify app </p>
    pub fn set_repository(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_repository(input);
        self
    }
    /// <p>The OAuth token for a third-party source control system for an Amplify app. The OAuth token is used to create a webhook and a read-only deploy key using SSH cloning. The OAuth token is not stored.</p>
    /// <p>Use <code>oauthToken</code> for repository providers other than GitHub, such as Bitbucket or CodeCommit.</p>
    /// <p>To authorize access to GitHub as your repository provider, use <code>accessToken</code>.</p>
    /// <p>You must specify either <code>oauthToken</code> or <code>accessToken</code> when you update an app.</p>
    /// <p>Existing Amplify apps deployed from a GitHub repository using OAuth continue to work with CI/CD. However, we strongly recommend that you migrate these apps to use the GitHub App. For more information, see <a href="https://docs.aws.amazon.com/amplify/latest/UserGuide/setting-up-GitHub-access.html#migrating-to-github-app-auth">Migrating an existing OAuth app to the Amplify GitHub App</a> in the <i>Amplify User Guide</i> .</p>
    pub fn oauth_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.oauth_token(input.into());
        self
    }
    /// <p>The OAuth token for a third-party source control system for an Amplify app. The OAuth token is used to create a webhook and a read-only deploy key using SSH cloning. The OAuth token is not stored.</p>
    /// <p>Use <code>oauthToken</code> for repository providers other than GitHub, such as Bitbucket or CodeCommit.</p>
    /// <p>To authorize access to GitHub as your repository provider, use <code>accessToken</code>.</p>
    /// <p>You must specify either <code>oauthToken</code> or <code>accessToken</code> when you update an app.</p>
    /// <p>Existing Amplify apps deployed from a GitHub repository using OAuth continue to work with CI/CD. However, we strongly recommend that you migrate these apps to use the GitHub App. For more information, see <a href="https://docs.aws.amazon.com/amplify/latest/UserGuide/setting-up-GitHub-access.html#migrating-to-github-app-auth">Migrating an existing OAuth app to the Amplify GitHub App</a> in the <i>Amplify User Guide</i> .</p>
    pub fn set_oauth_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_oauth_token(input);
        self
    }
    /// <p>The personal access token for a GitHub repository for an Amplify app. The personal access token is used to authorize access to a GitHub repository using the Amplify GitHub App. The token is not stored.</p>
    /// <p>Use <code>accessToken</code> for GitHub repositories only. To authorize access to a repository provider such as Bitbucket or CodeCommit, use <code>oauthToken</code>.</p>
    /// <p>You must specify either <code>accessToken</code> or <code>oauthToken</code> when you update an app.</p>
    /// <p>Existing Amplify apps deployed from a GitHub repository using OAuth continue to work with CI/CD. However, we strongly recommend that you migrate these apps to use the GitHub App. For more information, see <a href="https://docs.aws.amazon.com/amplify/latest/UserGuide/setting-up-GitHub-access.html#migrating-to-github-app-auth">Migrating an existing OAuth app to the Amplify GitHub App</a> in the <i>Amplify User Guide</i> .</p>
    pub fn access_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.access_token(input.into());
        self
    }
    /// <p>The personal access token for a GitHub repository for an Amplify app. The personal access token is used to authorize access to a GitHub repository using the Amplify GitHub App. The token is not stored.</p>
    /// <p>Use <code>accessToken</code> for GitHub repositories only. To authorize access to a repository provider such as Bitbucket or CodeCommit, use <code>oauthToken</code>.</p>
    /// <p>You must specify either <code>accessToken</code> or <code>oauthToken</code> when you update an app.</p>
    /// <p>Existing Amplify apps deployed from a GitHub repository using OAuth continue to work with CI/CD. However, we strongly recommend that you migrate these apps to use the GitHub App. For more information, see <a href="https://docs.aws.amazon.com/amplify/latest/UserGuide/setting-up-GitHub-access.html#migrating-to-github-app-auth">Migrating an existing OAuth app to the Amplify GitHub App</a> in the <i>Amplify User Guide</i> .</p>
    pub fn set_access_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_access_token(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateBranch`.
///
/// <p> Updates a branch for an Amplify app. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateBranch {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_branch_input::Builder,
}
impl UpdateBranch {
    /// Creates a new `UpdateBranch`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateBranch,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateBranchError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateBranchOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateBranchError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.app_id(input.into());
        self
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_app_id(input);
        self
    }
    /// <p> The name for the branch. </p>
    pub fn branch_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.branch_name(input.into());
        self
    }
    /// <p> The name for the branch. </p>
    pub fn set_branch_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_branch_name(input);
        self
    }
    /// <p> The description for the branch. </p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p> The description for the branch. </p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p> The framework for the branch. </p>
    pub fn framework(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.framework(input.into());
        self
    }
    /// <p> The framework for the branch. </p>
    pub fn set_framework(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_framework(input);
        self
    }
    /// <p> Describes the current stage for the branch. </p>
    pub fn stage(mut self, input: crate::model::Stage) -> Self {
        self.inner = self.inner.stage(input);
        self
    }
    /// <p> Describes the current stage for the branch. </p>
    pub fn set_stage(mut self, input: std::option::Option<crate::model::Stage>) -> Self {
        self.inner = self.inner.set_stage(input);
        self
    }
    /// <p> Enables notifications for the branch. </p>
    pub fn enable_notification(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_notification(input);
        self
    }
    /// <p> Enables notifications for the branch. </p>
    pub fn set_enable_notification(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_notification(input);
        self
    }
    /// <p> Enables auto building for the branch. </p>
    pub fn enable_auto_build(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_auto_build(input);
        self
    }
    /// <p> Enables auto building for the branch. </p>
    pub fn set_enable_auto_build(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_auto_build(input);
        self
    }
    /// Adds a key-value pair to `environmentVariables`.
    ///
    /// To override the contents of this collection use [`set_environment_variables`](Self::set_environment_variables).
    ///
    /// <p> The environment variables for the branch. </p>
    pub fn environment_variables(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.environment_variables(k.into(), v.into());
        self
    }
    /// <p> The environment variables for the branch. </p>
    pub fn set_environment_variables(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_environment_variables(input);
        self
    }
    /// <p> The basic authorization credentials for the branch. You must base64-encode the authorization credentials and provide them in the format <code>user:password</code>.</p>
    pub fn basic_auth_credentials(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.basic_auth_credentials(input.into());
        self
    }
    /// <p> The basic authorization credentials for the branch. You must base64-encode the authorization credentials and provide them in the format <code>user:password</code>.</p>
    pub fn set_basic_auth_credentials(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_basic_auth_credentials(input);
        self
    }
    /// <p> Enables basic authorization for the branch. </p>
    pub fn enable_basic_auth(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_basic_auth(input);
        self
    }
    /// <p> Enables basic authorization for the branch. </p>
    pub fn set_enable_basic_auth(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_basic_auth(input);
        self
    }
    /// <p>Enables performance mode for the branch.</p>
    /// <p>Performance mode optimizes for faster hosting performance by keeping content cached at the edge for a longer interval. When performance mode is enabled, hosting configuration or code changes can take up to 10 minutes to roll out. </p>
    pub fn enable_performance_mode(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_performance_mode(input);
        self
    }
    /// <p>Enables performance mode for the branch.</p>
    /// <p>Performance mode optimizes for faster hosting performance by keeping content cached at the edge for a longer interval. When performance mode is enabled, hosting configuration or code changes can take up to 10 minutes to roll out. </p>
    pub fn set_enable_performance_mode(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_performance_mode(input);
        self
    }
    /// <p> The build specification (build spec) for the branch. </p>
    pub fn build_spec(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.build_spec(input.into());
        self
    }
    /// <p> The build specification (build spec) for the branch. </p>
    pub fn set_build_spec(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_build_spec(input);
        self
    }
    /// <p> The content Time to Live (TTL) for the website in seconds. </p>
    pub fn ttl(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.ttl(input.into());
        self
    }
    /// <p> The content Time to Live (TTL) for the website in seconds. </p>
    pub fn set_ttl(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_ttl(input);
        self
    }
    /// <p> The display name for a branch. This is used as the default domain prefix. </p>
    pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.display_name(input.into());
        self
    }
    /// <p> The display name for a branch. This is used as the default domain prefix. </p>
    pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_display_name(input);
        self
    }
    /// <p> Enables pull request previews for this branch. </p>
    pub fn enable_pull_request_preview(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_pull_request_preview(input);
        self
    }
    /// <p> Enables pull request previews for this branch. </p>
    pub fn set_enable_pull_request_preview(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_pull_request_preview(input);
        self
    }
    /// <p> The Amplify environment name for the pull request. </p>
    pub fn pull_request_environment_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pull_request_environment_name(input.into());
        self
    }
    /// <p> The Amplify environment name for the pull request. </p>
    pub fn set_pull_request_environment_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_pull_request_environment_name(input);
        self
    }
    /// <p> The Amazon Resource Name (ARN) for a backend environment that is part of an Amplify app. </p>
    pub fn backend_environment_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.backend_environment_arn(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) for a backend environment that is part of an Amplify app. </p>
    pub fn set_backend_environment_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_backend_environment_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateDomainAssociation`.
///
/// <p> Creates a new domain association for an Amplify app.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateDomainAssociation {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_domain_association_input::Builder,
}
impl UpdateDomainAssociation {
    /// Creates a new `UpdateDomainAssociation`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateDomainAssociation,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateDomainAssociationError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateDomainAssociationOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateDomainAssociationError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.app_id(input.into());
        self
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_app_id(input);
        self
    }
    /// <p> The name of the domain. </p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_name(input.into());
        self
    }
    /// <p> The name of the domain. </p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_name(input);
        self
    }
    /// <p> Enables the automated creation of subdomains for branches. </p>
    pub fn enable_auto_sub_domain(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_auto_sub_domain(input);
        self
    }
    /// <p> Enables the automated creation of subdomains for branches. </p>
    pub fn set_enable_auto_sub_domain(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_auto_sub_domain(input);
        self
    }
    /// Appends an item to `subDomainSettings`.
    ///
    /// To override the contents of this collection use [`set_sub_domain_settings`](Self::set_sub_domain_settings).
    ///
    /// <p> Describes the settings for the subdomain. </p>
    pub fn sub_domain_settings(mut self, input: crate::model::SubDomainSetting) -> Self {
        self.inner = self.inner.sub_domain_settings(input);
        self
    }
    /// <p> Describes the settings for the subdomain. </p>
    pub fn set_sub_domain_settings(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::SubDomainSetting>>,
    ) -> Self {
        self.inner = self.inner.set_sub_domain_settings(input);
        self
    }
    /// Appends an item to `autoSubDomainCreationPatterns`.
    ///
    /// To override the contents of this collection use [`set_auto_sub_domain_creation_patterns`](Self::set_auto_sub_domain_creation_patterns).
    ///
    /// <p> Sets the branch patterns for automatic subdomain creation. </p>
    pub fn auto_sub_domain_creation_patterns(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.auto_sub_domain_creation_patterns(input.into());
        self
    }
    /// <p> Sets the branch patterns for automatic subdomain creation. </p>
    pub fn set_auto_sub_domain_creation_patterns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_auto_sub_domain_creation_patterns(input);
        self
    }
    /// <p> The required AWS Identity and Access Management (IAM) service role for the Amazon Resource Name (ARN) for automatically creating subdomains. </p>
    pub fn auto_sub_domain_iam_role(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.auto_sub_domain_iam_role(input.into());
        self
    }
    /// <p> The required AWS Identity and Access Management (IAM) service role for the Amazon Resource Name (ARN) for automatically creating subdomains. </p>
    pub fn set_auto_sub_domain_iam_role(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_auto_sub_domain_iam_role(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateWebhook`.
///
/// <p> Updates a webhook. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateWebhook {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_webhook_input::Builder,
}
impl UpdateWebhook {
    /// Creates a new `UpdateWebhook`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateWebhook,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateWebhookError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateWebhookOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateWebhookError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The unique ID for a webhook. </p>
    pub fn webhook_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.webhook_id(input.into());
        self
    }
    /// <p> The unique ID for a webhook. </p>
    pub fn set_webhook_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_webhook_id(input);
        self
    }
    /// <p> The name for a branch that is part of an Amplify app. </p>
    pub fn branch_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.branch_name(input.into());
        self
    }
    /// <p> The name for a branch that is part of an Amplify app. </p>
    pub fn set_branch_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_branch_name(input);
        self
    }
    /// <p> The description for a webhook. </p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p> The description for a webhook. </p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
}
