// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn create_app_output_correct_errors(
    mut builder: crate::operation::create_app::builders::CreateAppOutputBuilder,
) -> crate::operation::create_app::builders::CreateAppOutputBuilder {
    if builder.app.is_none() {
        builder.app = {
            let builder = crate::types::builders::AppBuilder::default();
            crate::serde_util::app_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_backend_environment_output_correct_errors(
    mut builder: crate::operation::create_backend_environment::builders::CreateBackendEnvironmentOutputBuilder,
) -> crate::operation::create_backend_environment::builders::CreateBackendEnvironmentOutputBuilder {
    if builder.backend_environment.is_none() {
        builder.backend_environment = {
            let builder = crate::types::builders::BackendEnvironmentBuilder::default();
            crate::serde_util::backend_environment_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_branch_output_correct_errors(
    mut builder: crate::operation::create_branch::builders::CreateBranchOutputBuilder,
) -> crate::operation::create_branch::builders::CreateBranchOutputBuilder {
    if builder.branch.is_none() {
        builder.branch = {
            let builder = crate::types::builders::BranchBuilder::default();
            crate::serde_util::branch_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_deployment_output_correct_errors(
    mut builder: crate::operation::create_deployment::builders::CreateDeploymentOutputBuilder,
) -> crate::operation::create_deployment::builders::CreateDeploymentOutputBuilder {
    if builder.file_upload_urls.is_none() {
        builder.file_upload_urls = Some(Default::default())
    }
    if builder.zip_upload_url.is_none() {
        builder.zip_upload_url = Some(Default::default())
    }
    builder
}

pub(crate) fn create_domain_association_output_correct_errors(
    mut builder: crate::operation::create_domain_association::builders::CreateDomainAssociationOutputBuilder,
) -> crate::operation::create_domain_association::builders::CreateDomainAssociationOutputBuilder {
    if builder.domain_association.is_none() {
        builder.domain_association = {
            let builder = crate::types::builders::DomainAssociationBuilder::default();
            crate::serde_util::domain_association_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_webhook_output_correct_errors(
    mut builder: crate::operation::create_webhook::builders::CreateWebhookOutputBuilder,
) -> crate::operation::create_webhook::builders::CreateWebhookOutputBuilder {
    if builder.webhook.is_none() {
        builder.webhook = {
            let builder = crate::types::builders::WebhookBuilder::default();
            crate::serde_util::webhook_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn delete_app_output_correct_errors(
    mut builder: crate::operation::delete_app::builders::DeleteAppOutputBuilder,
) -> crate::operation::delete_app::builders::DeleteAppOutputBuilder {
    if builder.app.is_none() {
        builder.app = {
            let builder = crate::types::builders::AppBuilder::default();
            crate::serde_util::app_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn delete_backend_environment_output_correct_errors(
    mut builder: crate::operation::delete_backend_environment::builders::DeleteBackendEnvironmentOutputBuilder,
) -> crate::operation::delete_backend_environment::builders::DeleteBackendEnvironmentOutputBuilder {
    if builder.backend_environment.is_none() {
        builder.backend_environment = {
            let builder = crate::types::builders::BackendEnvironmentBuilder::default();
            crate::serde_util::backend_environment_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn delete_branch_output_correct_errors(
    mut builder: crate::operation::delete_branch::builders::DeleteBranchOutputBuilder,
) -> crate::operation::delete_branch::builders::DeleteBranchOutputBuilder {
    if builder.branch.is_none() {
        builder.branch = {
            let builder = crate::types::builders::BranchBuilder::default();
            crate::serde_util::branch_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn delete_domain_association_output_correct_errors(
    mut builder: crate::operation::delete_domain_association::builders::DeleteDomainAssociationOutputBuilder,
) -> crate::operation::delete_domain_association::builders::DeleteDomainAssociationOutputBuilder {
    if builder.domain_association.is_none() {
        builder.domain_association = {
            let builder = crate::types::builders::DomainAssociationBuilder::default();
            crate::serde_util::domain_association_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn delete_job_output_correct_errors(
    mut builder: crate::operation::delete_job::builders::DeleteJobOutputBuilder,
) -> crate::operation::delete_job::builders::DeleteJobOutputBuilder {
    if builder.job_summary.is_none() {
        builder.job_summary = {
            let builder = crate::types::builders::JobSummaryBuilder::default();
            crate::serde_util::job_summary_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn delete_webhook_output_correct_errors(
    mut builder: crate::operation::delete_webhook::builders::DeleteWebhookOutputBuilder,
) -> crate::operation::delete_webhook::builders::DeleteWebhookOutputBuilder {
    if builder.webhook.is_none() {
        builder.webhook = {
            let builder = crate::types::builders::WebhookBuilder::default();
            crate::serde_util::webhook_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_app_output_correct_errors(
    mut builder: crate::operation::get_app::builders::GetAppOutputBuilder,
) -> crate::operation::get_app::builders::GetAppOutputBuilder {
    if builder.app.is_none() {
        builder.app = {
            let builder = crate::types::builders::AppBuilder::default();
            crate::serde_util::app_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_artifact_url_output_correct_errors(
    mut builder: crate::operation::get_artifact_url::builders::GetArtifactUrlOutputBuilder,
) -> crate::operation::get_artifact_url::builders::GetArtifactUrlOutputBuilder {
    if builder.artifact_id.is_none() {
        builder.artifact_id = Some(Default::default())
    }
    if builder.artifact_url.is_none() {
        builder.artifact_url = Some(Default::default())
    }
    builder
}

pub(crate) fn get_backend_environment_output_correct_errors(
    mut builder: crate::operation::get_backend_environment::builders::GetBackendEnvironmentOutputBuilder,
) -> crate::operation::get_backend_environment::builders::GetBackendEnvironmentOutputBuilder {
    if builder.backend_environment.is_none() {
        builder.backend_environment = {
            let builder = crate::types::builders::BackendEnvironmentBuilder::default();
            crate::serde_util::backend_environment_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_branch_output_correct_errors(
    mut builder: crate::operation::get_branch::builders::GetBranchOutputBuilder,
) -> crate::operation::get_branch::builders::GetBranchOutputBuilder {
    if builder.branch.is_none() {
        builder.branch = {
            let builder = crate::types::builders::BranchBuilder::default();
            crate::serde_util::branch_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_domain_association_output_correct_errors(
    mut builder: crate::operation::get_domain_association::builders::GetDomainAssociationOutputBuilder,
) -> crate::operation::get_domain_association::builders::GetDomainAssociationOutputBuilder {
    if builder.domain_association.is_none() {
        builder.domain_association = {
            let builder = crate::types::builders::DomainAssociationBuilder::default();
            crate::serde_util::domain_association_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_job_output_correct_errors(
    mut builder: crate::operation::get_job::builders::GetJobOutputBuilder,
) -> crate::operation::get_job::builders::GetJobOutputBuilder {
    if builder.job.is_none() {
        builder.job = {
            let builder = crate::types::builders::JobBuilder::default();
            crate::serde_util::job_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_webhook_output_correct_errors(
    mut builder: crate::operation::get_webhook::builders::GetWebhookOutputBuilder,
) -> crate::operation::get_webhook::builders::GetWebhookOutputBuilder {
    if builder.webhook.is_none() {
        builder.webhook = {
            let builder = crate::types::builders::WebhookBuilder::default();
            crate::serde_util::webhook_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn list_apps_output_correct_errors(
    mut builder: crate::operation::list_apps::builders::ListAppsOutputBuilder,
) -> crate::operation::list_apps::builders::ListAppsOutputBuilder {
    if builder.apps.is_none() {
        builder.apps = Some(Default::default())
    }
    builder
}

pub(crate) fn list_artifacts_output_correct_errors(
    mut builder: crate::operation::list_artifacts::builders::ListArtifactsOutputBuilder,
) -> crate::operation::list_artifacts::builders::ListArtifactsOutputBuilder {
    if builder.artifacts.is_none() {
        builder.artifacts = Some(Default::default())
    }
    builder
}

pub(crate) fn list_backend_environments_output_correct_errors(
    mut builder: crate::operation::list_backend_environments::builders::ListBackendEnvironmentsOutputBuilder,
) -> crate::operation::list_backend_environments::builders::ListBackendEnvironmentsOutputBuilder {
    if builder.backend_environments.is_none() {
        builder.backend_environments = Some(Default::default())
    }
    builder
}

pub(crate) fn list_branches_output_correct_errors(
    mut builder: crate::operation::list_branches::builders::ListBranchesOutputBuilder,
) -> crate::operation::list_branches::builders::ListBranchesOutputBuilder {
    if builder.branches.is_none() {
        builder.branches = Some(Default::default())
    }
    builder
}

pub(crate) fn list_domain_associations_output_correct_errors(
    mut builder: crate::operation::list_domain_associations::builders::ListDomainAssociationsOutputBuilder,
) -> crate::operation::list_domain_associations::builders::ListDomainAssociationsOutputBuilder {
    if builder.domain_associations.is_none() {
        builder.domain_associations = Some(Default::default())
    }
    builder
}

pub(crate) fn list_jobs_output_correct_errors(
    mut builder: crate::operation::list_jobs::builders::ListJobsOutputBuilder,
) -> crate::operation::list_jobs::builders::ListJobsOutputBuilder {
    if builder.job_summaries.is_none() {
        builder.job_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn list_webhooks_output_correct_errors(
    mut builder: crate::operation::list_webhooks::builders::ListWebhooksOutputBuilder,
) -> crate::operation::list_webhooks::builders::ListWebhooksOutputBuilder {
    if builder.webhooks.is_none() {
        builder.webhooks = Some(Default::default())
    }
    builder
}

pub(crate) fn start_deployment_output_correct_errors(
    mut builder: crate::operation::start_deployment::builders::StartDeploymentOutputBuilder,
) -> crate::operation::start_deployment::builders::StartDeploymentOutputBuilder {
    if builder.job_summary.is_none() {
        builder.job_summary = {
            let builder = crate::types::builders::JobSummaryBuilder::default();
            crate::serde_util::job_summary_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn start_job_output_correct_errors(
    mut builder: crate::operation::start_job::builders::StartJobOutputBuilder,
) -> crate::operation::start_job::builders::StartJobOutputBuilder {
    if builder.job_summary.is_none() {
        builder.job_summary = {
            let builder = crate::types::builders::JobSummaryBuilder::default();
            crate::serde_util::job_summary_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn stop_job_output_correct_errors(
    mut builder: crate::operation::stop_job::builders::StopJobOutputBuilder,
) -> crate::operation::stop_job::builders::StopJobOutputBuilder {
    if builder.job_summary.is_none() {
        builder.job_summary = {
            let builder = crate::types::builders::JobSummaryBuilder::default();
            crate::serde_util::job_summary_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_app_output_correct_errors(
    mut builder: crate::operation::update_app::builders::UpdateAppOutputBuilder,
) -> crate::operation::update_app::builders::UpdateAppOutputBuilder {
    if builder.app.is_none() {
        builder.app = {
            let builder = crate::types::builders::AppBuilder::default();
            crate::serde_util::app_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_branch_output_correct_errors(
    mut builder: crate::operation::update_branch::builders::UpdateBranchOutputBuilder,
) -> crate::operation::update_branch::builders::UpdateBranchOutputBuilder {
    if builder.branch.is_none() {
        builder.branch = {
            let builder = crate::types::builders::BranchBuilder::default();
            crate::serde_util::branch_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_domain_association_output_correct_errors(
    mut builder: crate::operation::update_domain_association::builders::UpdateDomainAssociationOutputBuilder,
) -> crate::operation::update_domain_association::builders::UpdateDomainAssociationOutputBuilder {
    if builder.domain_association.is_none() {
        builder.domain_association = {
            let builder = crate::types::builders::DomainAssociationBuilder::default();
            crate::serde_util::domain_association_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_webhook_output_correct_errors(
    mut builder: crate::operation::update_webhook::builders::UpdateWebhookOutputBuilder,
) -> crate::operation::update_webhook::builders::UpdateWebhookOutputBuilder {
    if builder.webhook.is_none() {
        builder.webhook = {
            let builder = crate::types::builders::WebhookBuilder::default();
            crate::serde_util::webhook_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn app_correct_errors(mut builder: crate::types::builders::AppBuilder) -> crate::types::builders::AppBuilder {
    if builder.app_id.is_none() {
        builder.app_id = Some(Default::default())
    }
    if builder.app_arn.is_none() {
        builder.app_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.repository.is_none() {
        builder.repository = Some(Default::default())
    }
    if builder.platform.is_none() {
        builder.platform = "no value was set".parse::<crate::types::Platform>().ok()
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.environment_variables.is_none() {
        builder.environment_variables = Some(Default::default())
    }
    if builder.default_domain.is_none() {
        builder.default_domain = Some(Default::default())
    }
    if builder.enable_branch_auto_build.is_none() {
        builder.enable_branch_auto_build = Some(Default::default())
    }
    if builder.enable_basic_auth.is_none() {
        builder.enable_basic_auth = Some(Default::default())
    }
    builder
}

pub(crate) fn backend_environment_correct_errors(
    mut builder: crate::types::builders::BackendEnvironmentBuilder,
) -> crate::types::builders::BackendEnvironmentBuilder {
    if builder.backend_environment_arn.is_none() {
        builder.backend_environment_arn = Some(Default::default())
    }
    if builder.environment_name.is_none() {
        builder.environment_name = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn branch_correct_errors(mut builder: crate::types::builders::BranchBuilder) -> crate::types::builders::BranchBuilder {
    if builder.branch_arn.is_none() {
        builder.branch_arn = Some(Default::default())
    }
    if builder.branch_name.is_none() {
        builder.branch_name = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.stage.is_none() {
        builder.stage = "no value was set".parse::<crate::types::Stage>().ok()
    }
    if builder.display_name.is_none() {
        builder.display_name = Some(Default::default())
    }
    if builder.enable_notification.is_none() {
        builder.enable_notification = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.environment_variables.is_none() {
        builder.environment_variables = Some(Default::default())
    }
    if builder.enable_auto_build.is_none() {
        builder.enable_auto_build = Some(Default::default())
    }
    if builder.custom_domains.is_none() {
        builder.custom_domains = Some(Default::default())
    }
    if builder.framework.is_none() {
        builder.framework = Some(Default::default())
    }
    if builder.active_job_id.is_none() {
        builder.active_job_id = Some(Default::default())
    }
    if builder.total_number_of_jobs.is_none() {
        builder.total_number_of_jobs = Some(Default::default())
    }
    if builder.enable_basic_auth.is_none() {
        builder.enable_basic_auth = Some(Default::default())
    }
    if builder.ttl.is_none() {
        builder.ttl = Some(Default::default())
    }
    if builder.enable_pull_request_preview.is_none() {
        builder.enable_pull_request_preview = Some(Default::default())
    }
    builder
}

pub(crate) fn domain_association_correct_errors(
    mut builder: crate::types::builders::DomainAssociationBuilder,
) -> crate::types::builders::DomainAssociationBuilder {
    if builder.domain_association_arn.is_none() {
        builder.domain_association_arn = Some(Default::default())
    }
    if builder.domain_name.is_none() {
        builder.domain_name = Some(Default::default())
    }
    if builder.enable_auto_sub_domain.is_none() {
        builder.enable_auto_sub_domain = Some(Default::default())
    }
    if builder.domain_status.is_none() {
        builder.domain_status = "no value was set".parse::<crate::types::DomainStatus>().ok()
    }
    if builder.status_reason.is_none() {
        builder.status_reason = Some(Default::default())
    }
    if builder.sub_domains.is_none() {
        builder.sub_domains = Some(Default::default())
    }
    builder
}

pub(crate) fn webhook_correct_errors(mut builder: crate::types::builders::WebhookBuilder) -> crate::types::builders::WebhookBuilder {
    if builder.webhook_arn.is_none() {
        builder.webhook_arn = Some(Default::default())
    }
    if builder.webhook_id.is_none() {
        builder.webhook_id = Some(Default::default())
    }
    if builder.webhook_url.is_none() {
        builder.webhook_url = Some(Default::default())
    }
    if builder.branch_name.is_none() {
        builder.branch_name = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn job_summary_correct_errors(mut builder: crate::types::builders::JobSummaryBuilder) -> crate::types::builders::JobSummaryBuilder {
    if builder.job_arn.is_none() {
        builder.job_arn = Some(Default::default())
    }
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    if builder.commit_id.is_none() {
        builder.commit_id = Some(Default::default())
    }
    if builder.commit_message.is_none() {
        builder.commit_message = Some(Default::default())
    }
    if builder.commit_time.is_none() {
        builder.commit_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::JobStatus>().ok()
    }
    if builder.job_type.is_none() {
        builder.job_type = "no value was set".parse::<crate::types::JobType>().ok()
    }
    builder
}

pub(crate) fn job_correct_errors(mut builder: crate::types::builders::JobBuilder) -> crate::types::builders::JobBuilder {
    if builder.summary.is_none() {
        builder.summary = {
            let builder = crate::types::builders::JobSummaryBuilder::default();
            crate::serde_util::job_summary_correct_errors(builder).build().ok()
        }
    }
    if builder.steps.is_none() {
        builder.steps = Some(Default::default())
    }
    builder
}

pub(crate) fn artifact_correct_errors(mut builder: crate::types::builders::ArtifactBuilder) -> crate::types::builders::ArtifactBuilder {
    if builder.artifact_file_name.is_none() {
        builder.artifact_file_name = Some(Default::default())
    }
    if builder.artifact_id.is_none() {
        builder.artifact_id = Some(Default::default())
    }
    builder
}

pub(crate) fn custom_rule_correct_errors(mut builder: crate::types::builders::CustomRuleBuilder) -> crate::types::builders::CustomRuleBuilder {
    if builder.source.is_none() {
        builder.source = Some(Default::default())
    }
    if builder.target.is_none() {
        builder.target = Some(Default::default())
    }
    builder
}

pub(crate) fn step_correct_errors(mut builder: crate::types::builders::StepBuilder) -> crate::types::builders::StepBuilder {
    if builder.step_name.is_none() {
        builder.step_name = Some(Default::default())
    }
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::JobStatus>().ok()
    }
    if builder.end_time.is_none() {
        builder.end_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn sub_domain_correct_errors(mut builder: crate::types::builders::SubDomainBuilder) -> crate::types::builders::SubDomainBuilder {
    if builder.sub_domain_setting.is_none() {
        builder.sub_domain_setting = {
            let builder = crate::types::builders::SubDomainSettingBuilder::default();
            crate::serde_util::sub_domain_setting_correct_errors(builder).build().ok()
        }
    }
    if builder.verified.is_none() {
        builder.verified = Some(Default::default())
    }
    if builder.dns_record.is_none() {
        builder.dns_record = Some(Default::default())
    }
    builder
}

pub(crate) fn sub_domain_setting_correct_errors(
    mut builder: crate::types::builders::SubDomainSettingBuilder,
) -> crate::types::builders::SubDomainSettingBuilder {
    if builder.prefix.is_none() {
        builder.prefix = Some(Default::default())
    }
    if builder.branch_name.is_none() {
        builder.branch_name = Some(Default::default())
    }
    builder
}
