// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_app_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_app::CreateAppInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.access_token {
        object.key("accessToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.auto_branch_creation_config {
        #[allow(unused_mut)]
        let mut object_3 = object.key("autoBranchCreationConfig").start_object();
        crate::protocol_serde::shape_auto_branch_creation_config::ser_auto_branch_creation_config(
            &mut object_3,
            var_2,
        )?;
        object_3.finish();
    }
    if let Some(var_4) = &input.auto_branch_creation_patterns {
        let mut array_5 = object.key("autoBranchCreationPatterns").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.basic_auth_credentials {
        object.key("basicAuthCredentials").string(var_7.as_str());
    }
    if let Some(var_8) = &input.build_spec {
        object.key("buildSpec").string(var_8.as_str());
    }
    if let Some(var_9) = &input.custom_headers {
        object.key("customHeaders").string(var_9.as_str());
    }
    if let Some(var_10) = &input.custom_rules {
        let mut array_11 = object.key("customRules").start_array();
        for item_12 in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_13 = array_11.value().start_object();
                crate::protocol_serde::shape_custom_rule::ser_custom_rule(&mut object_13, item_12)?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    if let Some(var_14) = &input.description {
        object.key("description").string(var_14.as_str());
    }
    if let Some(var_15) = &input.enable_auto_branch_creation {
        object.key("enableAutoBranchCreation").boolean(*var_15);
    }
    if let Some(var_16) = &input.enable_basic_auth {
        object.key("enableBasicAuth").boolean(*var_16);
    }
    if let Some(var_17) = &input.enable_branch_auto_build {
        object.key("enableBranchAutoBuild").boolean(*var_17);
    }
    if let Some(var_18) = &input.enable_branch_auto_deletion {
        object.key("enableBranchAutoDeletion").boolean(*var_18);
    }
    if let Some(var_19) = &input.environment_variables {
        #[allow(unused_mut)]
        let mut object_20 = object.key("environmentVariables").start_object();
        for (key_21, value_22) in var_19 {
            {
                object_20.key(key_21.as_str()).string(value_22.as_str());
            }
        }
        object_20.finish();
    }
    if let Some(var_23) = &input.iam_service_role_arn {
        object.key("iamServiceRoleArn").string(var_23.as_str());
    }
    if let Some(var_24) = &input.name {
        object.key("name").string(var_24.as_str());
    }
    if let Some(var_25) = &input.oauth_token {
        object.key("oauthToken").string(var_25.as_str());
    }
    if let Some(var_26) = &input.platform {
        object.key("platform").string(var_26.as_str());
    }
    if let Some(var_27) = &input.repository {
        object.key("repository").string(var_27.as_str());
    }
    if let Some(var_28) = &input.tags {
        #[allow(unused_mut)]
        let mut object_29 = object.key("tags").start_object();
        for (key_30, value_31) in var_28 {
            {
                object_29.key(key_30.as_str()).string(value_31.as_str());
            }
        }
        object_29.finish();
    }
    Ok(())
}
