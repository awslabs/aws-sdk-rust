// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Describes a webhook that connects repository events to an Amplify app. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Webhook {
    /// <p> The Amazon Resource Name (ARN) for the webhook. </p>
    #[doc(hidden)]
    pub webhook_arn: std::option::Option<std::string::String>,
    /// <p> The ID of the webhook. </p>
    #[doc(hidden)]
    pub webhook_id: std::option::Option<std::string::String>,
    /// <p> The URL of the webhook. </p>
    #[doc(hidden)]
    pub webhook_url: std::option::Option<std::string::String>,
    /// <p> The name for a branch that is part of an Amplify app. </p>
    #[doc(hidden)]
    pub branch_name: std::option::Option<std::string::String>,
    /// <p> The description for a webhook. </p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p> The create date and time for a webhook. </p>
    #[doc(hidden)]
    pub create_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p> Updates the date and time for a webhook. </p>
    #[doc(hidden)]
    pub update_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl Webhook {
    /// <p> The Amazon Resource Name (ARN) for the webhook. </p>
    pub fn webhook_arn(&self) -> std::option::Option<&str> {
        self.webhook_arn.as_deref()
    }
    /// <p> The ID of the webhook. </p>
    pub fn webhook_id(&self) -> std::option::Option<&str> {
        self.webhook_id.as_deref()
    }
    /// <p> The URL of the webhook. </p>
    pub fn webhook_url(&self) -> std::option::Option<&str> {
        self.webhook_url.as_deref()
    }
    /// <p> The name for a branch that is part of an Amplify app. </p>
    pub fn branch_name(&self) -> std::option::Option<&str> {
        self.branch_name.as_deref()
    }
    /// <p> The description for a webhook. </p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p> The create date and time for a webhook. </p>
    pub fn create_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.create_time.as_ref()
    }
    /// <p> Updates the date and time for a webhook. </p>
    pub fn update_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.update_time.as_ref()
    }
}
impl Webhook {
    /// Creates a new builder-style object to manufacture [`Webhook`](crate::types::Webhook).
    pub fn builder() -> crate::types::builders::WebhookBuilder {
        crate::types::builders::WebhookBuilder::default()
    }
}

/// A builder for [`Webhook`](crate::types::Webhook).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct WebhookBuilder {
    pub(crate) webhook_arn: std::option::Option<std::string::String>,
    pub(crate) webhook_id: std::option::Option<std::string::String>,
    pub(crate) webhook_url: std::option::Option<std::string::String>,
    pub(crate) branch_name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) create_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) update_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl WebhookBuilder {
    /// <p> The Amazon Resource Name (ARN) for the webhook. </p>
    pub fn webhook_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.webhook_arn = Some(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) for the webhook. </p>
    pub fn set_webhook_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.webhook_arn = input;
        self
    }
    /// <p> The ID of the webhook. </p>
    pub fn webhook_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.webhook_id = Some(input.into());
        self
    }
    /// <p> The ID of the webhook. </p>
    pub fn set_webhook_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.webhook_id = input;
        self
    }
    /// <p> The URL of the webhook. </p>
    pub fn webhook_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.webhook_url = Some(input.into());
        self
    }
    /// <p> The URL of the webhook. </p>
    pub fn set_webhook_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.webhook_url = input;
        self
    }
    /// <p> The name for a branch that is part of an Amplify app. </p>
    pub fn branch_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.branch_name = Some(input.into());
        self
    }
    /// <p> The name for a branch that is part of an Amplify app. </p>
    pub fn set_branch_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.branch_name = input;
        self
    }
    /// <p> The description for a webhook. </p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p> The description for a webhook. </p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p> The create date and time for a webhook. </p>
    pub fn create_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.create_time = Some(input);
        self
    }
    /// <p> The create date and time for a webhook. </p>
    pub fn set_create_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.create_time = input;
        self
    }
    /// <p> Updates the date and time for a webhook. </p>
    pub fn update_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.update_time = Some(input);
        self
    }
    /// <p> Updates the date and time for a webhook. </p>
    pub fn set_update_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.update_time = input;
        self
    }
    /// Consumes the builder and constructs a [`Webhook`](crate::types::Webhook).
    pub fn build(self) -> crate::types::Webhook {
        crate::types::Webhook {
            webhook_arn: self.webhook_arn,
            webhook_id: self.webhook_id,
            webhook_url: self.webhook_url,
            branch_name: self.branch_name,
            description: self.description,
            create_time: self.create_time,
            update_time: self.update_time,
        }
    }
}
