// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Describes an artifact. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Artifact {
    /// <p> The file name for the artifact. </p>
    #[doc(hidden)]
    pub artifact_file_name: std::option::Option<std::string::String>,
    /// <p> The unique ID for the artifact. </p>
    #[doc(hidden)]
    pub artifact_id: std::option::Option<std::string::String>,
}
impl Artifact {
    /// <p> The file name for the artifact. </p>
    pub fn artifact_file_name(&self) -> std::option::Option<&str> {
        self.artifact_file_name.as_deref()
    }
    /// <p> The unique ID for the artifact. </p>
    pub fn artifact_id(&self) -> std::option::Option<&str> {
        self.artifact_id.as_deref()
    }
}
impl Artifact {
    /// Creates a new builder-style object to manufacture [`Artifact`](crate::types::Artifact).
    pub fn builder() -> crate::types::builders::ArtifactBuilder {
        crate::types::builders::ArtifactBuilder::default()
    }
}

/// A builder for [`Artifact`](crate::types::Artifact).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ArtifactBuilder {
    pub(crate) artifact_file_name: std::option::Option<std::string::String>,
    pub(crate) artifact_id: std::option::Option<std::string::String>,
}
impl ArtifactBuilder {
    /// <p> The file name for the artifact. </p>
    pub fn artifact_file_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.artifact_file_name = Some(input.into());
        self
    }
    /// <p> The file name for the artifact. </p>
    pub fn set_artifact_file_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.artifact_file_name = input;
        self
    }
    /// <p> The unique ID for the artifact. </p>
    pub fn artifact_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.artifact_id = Some(input.into());
        self
    }
    /// <p> The unique ID for the artifact. </p>
    pub fn set_artifact_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.artifact_id = input;
        self
    }
    /// Consumes the builder and constructs a [`Artifact`](crate::types::Artifact).
    pub fn build(self) -> crate::types::Artifact {
        crate::types::Artifact {
            artifact_file_name: self.artifact_file_name,
            artifact_id: self.artifact_id,
        }
    }
}
