// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The subdomain for the domain association. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SubDomain {
    /// <p> Describes the settings for the subdomain. </p>
    pub sub_domain_setting: ::std::option::Option<crate::types::SubDomainSetting>,
    /// <p> The verified status of the subdomain </p>
    pub verified: bool,
    /// <p> The DNS record for the subdomain. </p>
    pub dns_record: ::std::string::String,
}
impl SubDomain {
    /// <p> Describes the settings for the subdomain. </p>
    pub fn sub_domain_setting(&self) -> ::std::option::Option<&crate::types::SubDomainSetting> {
        self.sub_domain_setting.as_ref()
    }
    /// <p> The verified status of the subdomain </p>
    pub fn verified(&self) -> bool {
        self.verified
    }
    /// <p> The DNS record for the subdomain. </p>
    pub fn dns_record(&self) -> &str {
        use std::ops::Deref;
        self.dns_record.deref()
    }
}
impl SubDomain {
    /// Creates a new builder-style object to manufacture [`SubDomain`](crate::types::SubDomain).
    pub fn builder() -> crate::types::builders::SubDomainBuilder {
        crate::types::builders::SubDomainBuilder::default()
    }
}

/// A builder for [`SubDomain`](crate::types::SubDomain).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SubDomainBuilder {
    pub(crate) sub_domain_setting: ::std::option::Option<crate::types::SubDomainSetting>,
    pub(crate) verified: ::std::option::Option<bool>,
    pub(crate) dns_record: ::std::option::Option<::std::string::String>,
}
impl SubDomainBuilder {
    /// <p> Describes the settings for the subdomain. </p>
    /// This field is required.
    pub fn sub_domain_setting(mut self, input: crate::types::SubDomainSetting) -> Self {
        self.sub_domain_setting = ::std::option::Option::Some(input);
        self
    }
    /// <p> Describes the settings for the subdomain. </p>
    pub fn set_sub_domain_setting(mut self, input: ::std::option::Option<crate::types::SubDomainSetting>) -> Self {
        self.sub_domain_setting = input;
        self
    }
    /// <p> Describes the settings for the subdomain. </p>
    pub fn get_sub_domain_setting(&self) -> &::std::option::Option<crate::types::SubDomainSetting> {
        &self.sub_domain_setting
    }
    /// <p> The verified status of the subdomain </p>
    /// This field is required.
    pub fn verified(mut self, input: bool) -> Self {
        self.verified = ::std::option::Option::Some(input);
        self
    }
    /// <p> The verified status of the subdomain </p>
    pub fn set_verified(mut self, input: ::std::option::Option<bool>) -> Self {
        self.verified = input;
        self
    }
    /// <p> The verified status of the subdomain </p>
    pub fn get_verified(&self) -> &::std::option::Option<bool> {
        &self.verified
    }
    /// <p> The DNS record for the subdomain. </p>
    /// This field is required.
    pub fn dns_record(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dns_record = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The DNS record for the subdomain. </p>
    pub fn set_dns_record(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dns_record = input;
        self
    }
    /// <p> The DNS record for the subdomain. </p>
    pub fn get_dns_record(&self) -> &::std::option::Option<::std::string::String> {
        &self.dns_record
    }
    /// Consumes the builder and constructs a [`SubDomain`](crate::types::SubDomain).
    /// This method will fail if any of the following fields are not set:
    /// - [`verified`](crate::types::builders::SubDomainBuilder::verified)
    /// - [`dns_record`](crate::types::builders::SubDomainBuilder::dns_record)
    pub fn build(self) -> ::std::result::Result<crate::types::SubDomain, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SubDomain {
            sub_domain_setting: self.sub_domain_setting,
            verified: self.verified.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "verified",
                    "verified was not specified but it is required when building SubDomain",
                )
            })?,
            dns_record: self.dns_record.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "dns_record",
                    "dns_record was not specified but it is required when building SubDomain",
                )
            })?,
        })
    }
}
