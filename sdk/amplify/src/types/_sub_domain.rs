// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The subdomain for the domain association. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SubDomain {
    /// <p> Describes the settings for the subdomain. </p>
    #[doc(hidden)]
    pub sub_domain_setting: std::option::Option<crate::types::SubDomainSetting>,
    /// <p> The verified status of the subdomain </p>
    #[doc(hidden)]
    pub verified: std::option::Option<bool>,
    /// <p> The DNS record for the subdomain. </p>
    #[doc(hidden)]
    pub dns_record: std::option::Option<std::string::String>,
}
impl SubDomain {
    /// <p> Describes the settings for the subdomain. </p>
    pub fn sub_domain_setting(&self) -> std::option::Option<&crate::types::SubDomainSetting> {
        self.sub_domain_setting.as_ref()
    }
    /// <p> The verified status of the subdomain </p>
    pub fn verified(&self) -> std::option::Option<bool> {
        self.verified
    }
    /// <p> The DNS record for the subdomain. </p>
    pub fn dns_record(&self) -> std::option::Option<&str> {
        self.dns_record.as_deref()
    }
}
impl SubDomain {
    /// Creates a new builder-style object to manufacture [`SubDomain`](crate::types::SubDomain).
    pub fn builder() -> crate::types::builders::SubDomainBuilder {
        crate::types::builders::SubDomainBuilder::default()
    }
}

/// A builder for [`SubDomain`](crate::types::SubDomain).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SubDomainBuilder {
    pub(crate) sub_domain_setting: std::option::Option<crate::types::SubDomainSetting>,
    pub(crate) verified: std::option::Option<bool>,
    pub(crate) dns_record: std::option::Option<std::string::String>,
}
impl SubDomainBuilder {
    /// <p> Describes the settings for the subdomain. </p>
    pub fn sub_domain_setting(mut self, input: crate::types::SubDomainSetting) -> Self {
        self.sub_domain_setting = Some(input);
        self
    }
    /// <p> Describes the settings for the subdomain. </p>
    pub fn set_sub_domain_setting(
        mut self,
        input: std::option::Option<crate::types::SubDomainSetting>,
    ) -> Self {
        self.sub_domain_setting = input;
        self
    }
    /// <p> The verified status of the subdomain </p>
    pub fn verified(mut self, input: bool) -> Self {
        self.verified = Some(input);
        self
    }
    /// <p> The verified status of the subdomain </p>
    pub fn set_verified(mut self, input: std::option::Option<bool>) -> Self {
        self.verified = input;
        self
    }
    /// <p> The DNS record for the subdomain. </p>
    pub fn dns_record(mut self, input: impl Into<std::string::String>) -> Self {
        self.dns_record = Some(input.into());
        self
    }
    /// <p> The DNS record for the subdomain. </p>
    pub fn set_dns_record(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dns_record = input;
        self
    }
    /// Consumes the builder and constructs a [`SubDomain`](crate::types::SubDomain).
    pub fn build(self) -> crate::types::SubDomain {
        crate::types::SubDomain {
            sub_domain_setting: self.sub_domain_setting,
            verified: self.verified,
            dns_record: self.dns_record,
        }
    }
}
