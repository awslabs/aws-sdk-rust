// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Describes an execution step, for an execution job, for an Amplify app. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Step {
    /// <p> The name of the execution step. </p>
    #[doc(hidden)]
    pub step_name: std::option::Option<std::string::String>,
    /// <p> The start date and time of the execution step. </p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p> The status of the execution step. </p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::JobStatus>,
    /// <p> The end date and time of the execution step. </p>
    #[doc(hidden)]
    pub end_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p> The URL to the logs for the execution step. </p>
    #[doc(hidden)]
    pub log_url: std::option::Option<std::string::String>,
    /// <p> The URL to the artifact for the execution step. </p>
    #[doc(hidden)]
    pub artifacts_url: std::option::Option<std::string::String>,
    /// <p> The URL to the test artifact for the execution step. </p>
    #[doc(hidden)]
    pub test_artifacts_url: std::option::Option<std::string::String>,
    /// <p> The URL to the test configuration for the execution step. </p>
    #[doc(hidden)]
    pub test_config_url: std::option::Option<std::string::String>,
    /// <p> The list of screenshot URLs for the execution step, if relevant. </p>
    #[doc(hidden)]
    pub screenshots:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p> The reason for the current step status. </p>
    #[doc(hidden)]
    pub status_reason: std::option::Option<std::string::String>,
    /// <p> The context for the current step. Includes a build image if the step is build. </p>
    #[doc(hidden)]
    pub context: std::option::Option<std::string::String>,
}
impl Step {
    /// <p> The name of the execution step. </p>
    pub fn step_name(&self) -> std::option::Option<&str> {
        self.step_name.as_deref()
    }
    /// <p> The start date and time of the execution step. </p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p> The status of the execution step. </p>
    pub fn status(&self) -> std::option::Option<&crate::types::JobStatus> {
        self.status.as_ref()
    }
    /// <p> The end date and time of the execution step. </p>
    pub fn end_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p> The URL to the logs for the execution step. </p>
    pub fn log_url(&self) -> std::option::Option<&str> {
        self.log_url.as_deref()
    }
    /// <p> The URL to the artifact for the execution step. </p>
    pub fn artifacts_url(&self) -> std::option::Option<&str> {
        self.artifacts_url.as_deref()
    }
    /// <p> The URL to the test artifact for the execution step. </p>
    pub fn test_artifacts_url(&self) -> std::option::Option<&str> {
        self.test_artifacts_url.as_deref()
    }
    /// <p> The URL to the test configuration for the execution step. </p>
    pub fn test_config_url(&self) -> std::option::Option<&str> {
        self.test_config_url.as_deref()
    }
    /// <p> The list of screenshot URLs for the execution step, if relevant. </p>
    pub fn screenshots(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.screenshots.as_ref()
    }
    /// <p> The reason for the current step status. </p>
    pub fn status_reason(&self) -> std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p> The context for the current step. Includes a build image if the step is build. </p>
    pub fn context(&self) -> std::option::Option<&str> {
        self.context.as_deref()
    }
}
impl Step {
    /// Creates a new builder-style object to manufacture [`Step`](crate::types::Step).
    pub fn builder() -> crate::types::builders::StepBuilder {
        crate::types::builders::StepBuilder::default()
    }
}

/// A builder for [`Step`](crate::types::Step).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StepBuilder {
    pub(crate) step_name: std::option::Option<std::string::String>,
    pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) status: std::option::Option<crate::types::JobStatus>,
    pub(crate) end_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) log_url: std::option::Option<std::string::String>,
    pub(crate) artifacts_url: std::option::Option<std::string::String>,
    pub(crate) test_artifacts_url: std::option::Option<std::string::String>,
    pub(crate) test_config_url: std::option::Option<std::string::String>,
    pub(crate) screenshots:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) status_reason: std::option::Option<std::string::String>,
    pub(crate) context: std::option::Option<std::string::String>,
}
impl StepBuilder {
    /// <p> The name of the execution step. </p>
    pub fn step_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.step_name = Some(input.into());
        self
    }
    /// <p> The name of the execution step. </p>
    pub fn set_step_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.step_name = input;
        self
    }
    /// <p> The start date and time of the execution step. </p>
    pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start_time = Some(input);
        self
    }
    /// <p> The start date and time of the execution step. </p>
    pub fn set_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.start_time = input;
        self
    }
    /// <p> The status of the execution step. </p>
    pub fn status(mut self, input: crate::types::JobStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p> The status of the execution step. </p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::JobStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p> The end date and time of the execution step. </p>
    pub fn end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.end_time = Some(input);
        self
    }
    /// <p> The end date and time of the execution step. </p>
    pub fn set_end_time(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p> The URL to the logs for the execution step. </p>
    pub fn log_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.log_url = Some(input.into());
        self
    }
    /// <p> The URL to the logs for the execution step. </p>
    pub fn set_log_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.log_url = input;
        self
    }
    /// <p> The URL to the artifact for the execution step. </p>
    pub fn artifacts_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.artifacts_url = Some(input.into());
        self
    }
    /// <p> The URL to the artifact for the execution step. </p>
    pub fn set_artifacts_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.artifacts_url = input;
        self
    }
    /// <p> The URL to the test artifact for the execution step. </p>
    pub fn test_artifacts_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.test_artifacts_url = Some(input.into());
        self
    }
    /// <p> The URL to the test artifact for the execution step. </p>
    pub fn set_test_artifacts_url(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.test_artifacts_url = input;
        self
    }
    /// <p> The URL to the test configuration for the execution step. </p>
    pub fn test_config_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.test_config_url = Some(input.into());
        self
    }
    /// <p> The URL to the test configuration for the execution step. </p>
    pub fn set_test_config_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.test_config_url = input;
        self
    }
    /// Adds a key-value pair to `screenshots`.
    ///
    /// To override the contents of this collection use [`set_screenshots`](Self::set_screenshots).
    ///
    /// <p> The list of screenshot URLs for the execution step, if relevant. </p>
    pub fn screenshots(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.screenshots.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.screenshots = Some(hash_map);
        self
    }
    /// <p> The list of screenshot URLs for the execution step, if relevant. </p>
    pub fn set_screenshots(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.screenshots = input;
        self
    }
    /// <p> The reason for the current step status. </p>
    pub fn status_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_reason = Some(input.into());
        self
    }
    /// <p> The reason for the current step status. </p>
    pub fn set_status_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p> The context for the current step. Includes a build image if the step is build. </p>
    pub fn context(mut self, input: impl Into<std::string::String>) -> Self {
        self.context = Some(input.into());
        self
    }
    /// <p> The context for the current step. Includes a build image if the step is build. </p>
    pub fn set_context(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.context = input;
        self
    }
    /// Consumes the builder and constructs a [`Step`](crate::types::Step).
    pub fn build(self) -> crate::types::Step {
        crate::types::Step {
            step_name: self.step_name,
            start_time: self.start_time,
            status: self.status,
            end_time: self.end_time,
            log_url: self.log_url,
            artifacts_url: self.artifacts_url,
            test_artifacts_url: self.test_artifacts_url,
            test_config_url: self.test_config_url,
            screenshots: self.screenshots,
            status_reason: self.status_reason,
            context: self.context,
        }
    }
}
