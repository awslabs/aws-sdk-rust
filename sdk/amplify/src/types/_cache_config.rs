// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the cache configuration for an Amplify app.</p>
/// <p>For more information about how Amplify applies an optimal cache configuration for your app based on the type of content that is being served, see <a href="https://docs.aws.amazon.com/amplify/latest/userguide/managing-cache-configuration">Managing cache configuration</a> in the <i>Amplify User guide</i>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CacheConfig {
    /// <p>The type of cache configuration to use for an Amplify app.</p>
    /// <p>The <code>AMPLIFY_MANAGED</code> cache configuration automatically applies an optimized cache configuration for your app based on its platform, routing rules, and rewrite rules. This is the default setting.</p>
    /// <p>The <code>AMPLIFY_MANAGED_NO_COOKIES</code> cache configuration type is the same as <code>AMPLIFY_MANAGED</code>, except that it excludes all cookies from the cache key.</p>
    pub r#type: crate::types::CacheConfigType,
}
impl CacheConfig {
    /// <p>The type of cache configuration to use for an Amplify app.</p>
    /// <p>The <code>AMPLIFY_MANAGED</code> cache configuration automatically applies an optimized cache configuration for your app based on its platform, routing rules, and rewrite rules. This is the default setting.</p>
    /// <p>The <code>AMPLIFY_MANAGED_NO_COOKIES</code> cache configuration type is the same as <code>AMPLIFY_MANAGED</code>, except that it excludes all cookies from the cache key.</p>
    pub fn r#type(&self) -> &crate::types::CacheConfigType {
        &self.r#type
    }
}
impl CacheConfig {
    /// Creates a new builder-style object to manufacture [`CacheConfig`](crate::types::CacheConfig).
    pub fn builder() -> crate::types::builders::CacheConfigBuilder {
        crate::types::builders::CacheConfigBuilder::default()
    }
}

/// A builder for [`CacheConfig`](crate::types::CacheConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CacheConfigBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::CacheConfigType>,
}
impl CacheConfigBuilder {
    /// <p>The type of cache configuration to use for an Amplify app.</p>
    /// <p>The <code>AMPLIFY_MANAGED</code> cache configuration automatically applies an optimized cache configuration for your app based on its platform, routing rules, and rewrite rules. This is the default setting.</p>
    /// <p>The <code>AMPLIFY_MANAGED_NO_COOKIES</code> cache configuration type is the same as <code>AMPLIFY_MANAGED</code>, except that it excludes all cookies from the cache key.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::CacheConfigType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of cache configuration to use for an Amplify app.</p>
    /// <p>The <code>AMPLIFY_MANAGED</code> cache configuration automatically applies an optimized cache configuration for your app based on its platform, routing rules, and rewrite rules. This is the default setting.</p>
    /// <p>The <code>AMPLIFY_MANAGED_NO_COOKIES</code> cache configuration type is the same as <code>AMPLIFY_MANAGED</code>, except that it excludes all cookies from the cache key.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::CacheConfigType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of cache configuration to use for an Amplify app.</p>
    /// <p>The <code>AMPLIFY_MANAGED</code> cache configuration automatically applies an optimized cache configuration for your app based on its platform, routing rules, and rewrite rules. This is the default setting.</p>
    /// <p>The <code>AMPLIFY_MANAGED_NO_COOKIES</code> cache configuration type is the same as <code>AMPLIFY_MANAGED</code>, except that it excludes all cookies from the cache key.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::CacheConfigType> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`CacheConfig`](crate::types::CacheConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::CacheConfigBuilder::type)
    pub fn build(self) -> ::std::result::Result<crate::types::CacheConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CacheConfig {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building CacheConfig",
                )
            })?,
        })
    }
}
