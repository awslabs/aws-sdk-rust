// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Describes the summary for an execution job for an Amplify app. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct JobSummary {
    /// <p> The Amazon Resource Name (ARN) for the job. </p>
    pub job_arn: ::std::string::String,
    /// <p> The unique ID for the job. </p>
    pub job_id: ::std::string::String,
    /// <p> The commit ID from a third-party repository provider for the job. </p>
    pub commit_id: ::std::string::String,
    /// <p> The commit message from a third-party repository provider for the job. </p>
    pub commit_message: ::std::string::String,
    /// <p> The commit date and time for the job. </p>
    pub commit_time: ::aws_smithy_types::DateTime,
    /// <p> The start date and time for the job. </p>
    pub start_time: ::aws_smithy_types::DateTime,
    /// <p> The current status for the job. </p>
    pub status: crate::types::JobStatus,
    /// <p> The end date and time for the job. </p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p> The type for the job. If the value is <code>RELEASE</code>, the job was manually released from its source by using the <code>StartJob</code> API. If the value is <code>RETRY</code>, the job was manually retried using the <code>StartJob</code> API. If the value is <code>WEB_HOOK</code>, the job was automatically triggered by webhooks. </p>
    pub job_type: crate::types::JobType,
}
impl JobSummary {
    /// <p> The Amazon Resource Name (ARN) for the job. </p>
    pub fn job_arn(&self) -> &str {
        use std::ops::Deref;
        self.job_arn.deref()
    }
    /// <p> The unique ID for the job. </p>
    pub fn job_id(&self) -> &str {
        use std::ops::Deref;
        self.job_id.deref()
    }
    /// <p> The commit ID from a third-party repository provider for the job. </p>
    pub fn commit_id(&self) -> &str {
        use std::ops::Deref;
        self.commit_id.deref()
    }
    /// <p> The commit message from a third-party repository provider for the job. </p>
    pub fn commit_message(&self) -> &str {
        use std::ops::Deref;
        self.commit_message.deref()
    }
    /// <p> The commit date and time for the job. </p>
    pub fn commit_time(&self) -> &::aws_smithy_types::DateTime {
        &self.commit_time
    }
    /// <p> The start date and time for the job. </p>
    pub fn start_time(&self) -> &::aws_smithy_types::DateTime {
        &self.start_time
    }
    /// <p> The current status for the job. </p>
    pub fn status(&self) -> &crate::types::JobStatus {
        &self.status
    }
    /// <p> The end date and time for the job. </p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p> The type for the job. If the value is <code>RELEASE</code>, the job was manually released from its source by using the <code>StartJob</code> API. If the value is <code>RETRY</code>, the job was manually retried using the <code>StartJob</code> API. If the value is <code>WEB_HOOK</code>, the job was automatically triggered by webhooks. </p>
    pub fn job_type(&self) -> &crate::types::JobType {
        &self.job_type
    }
}
impl JobSummary {
    /// Creates a new builder-style object to manufacture [`JobSummary`](crate::types::JobSummary).
    pub fn builder() -> crate::types::builders::JobSummaryBuilder {
        crate::types::builders::JobSummaryBuilder::default()
    }
}

/// A builder for [`JobSummary`](crate::types::JobSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct JobSummaryBuilder {
    pub(crate) job_arn: ::std::option::Option<::std::string::String>,
    pub(crate) job_id: ::std::option::Option<::std::string::String>,
    pub(crate) commit_id: ::std::option::Option<::std::string::String>,
    pub(crate) commit_message: ::std::option::Option<::std::string::String>,
    pub(crate) commit_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<crate::types::JobStatus>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) job_type: ::std::option::Option<crate::types::JobType>,
}
impl JobSummaryBuilder {
    /// <p> The Amazon Resource Name (ARN) for the job. </p>
    /// This field is required.
    pub fn job_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) for the job. </p>
    pub fn set_job_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_arn = input;
        self
    }
    /// <p> The Amazon Resource Name (ARN) for the job. </p>
    pub fn get_job_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_arn
    }
    /// <p> The unique ID for the job. </p>
    /// This field is required.
    pub fn job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The unique ID for the job. </p>
    pub fn set_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p> The unique ID for the job. </p>
    pub fn get_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_id
    }
    /// <p> The commit ID from a third-party repository provider for the job. </p>
    /// This field is required.
    pub fn commit_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.commit_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The commit ID from a third-party repository provider for the job. </p>
    pub fn set_commit_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.commit_id = input;
        self
    }
    /// <p> The commit ID from a third-party repository provider for the job. </p>
    pub fn get_commit_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.commit_id
    }
    /// <p> The commit message from a third-party repository provider for the job. </p>
    /// This field is required.
    pub fn commit_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.commit_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The commit message from a third-party repository provider for the job. </p>
    pub fn set_commit_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.commit_message = input;
        self
    }
    /// <p> The commit message from a third-party repository provider for the job. </p>
    pub fn get_commit_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.commit_message
    }
    /// <p> The commit date and time for the job. </p>
    /// This field is required.
    pub fn commit_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.commit_time = ::std::option::Option::Some(input);
        self
    }
    /// <p> The commit date and time for the job. </p>
    pub fn set_commit_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.commit_time = input;
        self
    }
    /// <p> The commit date and time for the job. </p>
    pub fn get_commit_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.commit_time
    }
    /// <p> The start date and time for the job. </p>
    /// This field is required.
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p> The start date and time for the job. </p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p> The start date and time for the job. </p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p> The current status for the job. </p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::JobStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p> The current status for the job. </p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::JobStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p> The current status for the job. </p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::JobStatus> {
        &self.status
    }
    /// <p> The end date and time for the job. </p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p> The end date and time for the job. </p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p> The end date and time for the job. </p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p> The type for the job. If the value is <code>RELEASE</code>, the job was manually released from its source by using the <code>StartJob</code> API. If the value is <code>RETRY</code>, the job was manually retried using the <code>StartJob</code> API. If the value is <code>WEB_HOOK</code>, the job was automatically triggered by webhooks. </p>
    /// This field is required.
    pub fn job_type(mut self, input: crate::types::JobType) -> Self {
        self.job_type = ::std::option::Option::Some(input);
        self
    }
    /// <p> The type for the job. If the value is <code>RELEASE</code>, the job was manually released from its source by using the <code>StartJob</code> API. If the value is <code>RETRY</code>, the job was manually retried using the <code>StartJob</code> API. If the value is <code>WEB_HOOK</code>, the job was automatically triggered by webhooks. </p>
    pub fn set_job_type(mut self, input: ::std::option::Option<crate::types::JobType>) -> Self {
        self.job_type = input;
        self
    }
    /// <p> The type for the job. If the value is <code>RELEASE</code>, the job was manually released from its source by using the <code>StartJob</code> API. If the value is <code>RETRY</code>, the job was manually retried using the <code>StartJob</code> API. If the value is <code>WEB_HOOK</code>, the job was automatically triggered by webhooks. </p>
    pub fn get_job_type(&self) -> &::std::option::Option<crate::types::JobType> {
        &self.job_type
    }
    /// Consumes the builder and constructs a [`JobSummary`](crate::types::JobSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`job_arn`](crate::types::builders::JobSummaryBuilder::job_arn)
    /// - [`job_id`](crate::types::builders::JobSummaryBuilder::job_id)
    /// - [`commit_id`](crate::types::builders::JobSummaryBuilder::commit_id)
    /// - [`commit_message`](crate::types::builders::JobSummaryBuilder::commit_message)
    /// - [`commit_time`](crate::types::builders::JobSummaryBuilder::commit_time)
    /// - [`start_time`](crate::types::builders::JobSummaryBuilder::start_time)
    /// - [`status`](crate::types::builders::JobSummaryBuilder::status)
    /// - [`job_type`](crate::types::builders::JobSummaryBuilder::job_type)
    pub fn build(self) -> ::std::result::Result<crate::types::JobSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::JobSummary {
            job_arn: self.job_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "job_arn",
                    "job_arn was not specified but it is required when building JobSummary",
                )
            })?,
            job_id: self.job_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "job_id",
                    "job_id was not specified but it is required when building JobSummary",
                )
            })?,
            commit_id: self.commit_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "commit_id",
                    "commit_id was not specified but it is required when building JobSummary",
                )
            })?,
            commit_message: self.commit_message.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "commit_message",
                    "commit_message was not specified but it is required when building JobSummary",
                )
            })?,
            commit_time: self.commit_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "commit_time",
                    "commit_time was not specified but it is required when building JobSummary",
                )
            })?,
            start_time: self.start_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "start_time",
                    "start_time was not specified but it is required when building JobSummary",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building JobSummary",
                )
            })?,
            end_time: self.end_time,
            job_type: self.job_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "job_type",
                    "job_type was not specified but it is required when building JobSummary",
                )
            })?,
        })
    }
}
