// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p> A request contains unexpected data. </p>
    BadRequestException(crate::error::BadRequestException),
    /// <p> An operation failed because a dependent service threw an exception. </p>
    DependentServiceFailureException(crate::error::DependentServiceFailureException),
    /// <p> The service failed to perform an operation due to an internal issue. </p>
    InternalFailureException(crate::error::InternalFailureException),
    /// <p> A resource could not be created because service quotas were exceeded. </p>
    LimitExceededException(crate::error::LimitExceededException),
    /// <p> An entity was not found during an operation. </p>
    NotFoundException(crate::error::NotFoundException),
    /// <p> An operation failed due to a non-existent resource. </p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p> An operation failed due to a lack of access. </p>
    UnauthorizedException(crate::error::UnauthorizedException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::BadRequestException(inner) => inner.fmt(f),
            Error::DependentServiceFailureException(inner) => inner.fmt(f),
            Error::InternalFailureException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::NotFoundException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::UnauthorizedException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateAppError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateAppError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateAppError> for Error {
    fn from(err: crate::error::CreateAppError) -> Self {
        match err {
            crate::error::CreateAppError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateAppError::DependentServiceFailureException(inner) => {
                Error::DependentServiceFailureException(inner)
            }
            crate::error::CreateAppError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::CreateAppError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateAppError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreateAppError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateBackendEnvironmentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateBackendEnvironmentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateBackendEnvironmentError> for Error {
    fn from(err: crate::error::CreateBackendEnvironmentError) -> Self {
        match err {
            crate::error::CreateBackendEnvironmentError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateBackendEnvironmentError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::CreateBackendEnvironmentError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateBackendEnvironmentError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateBackendEnvironmentError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreateBackendEnvironmentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateBranchError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateBranchError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateBranchError> for Error {
    fn from(err: crate::error::CreateBranchError) -> Self {
        match err {
            crate::error::CreateBranchError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateBranchError::DependentServiceFailureException(inner) => {
                Error::DependentServiceFailureException(inner)
            }
            crate::error::CreateBranchError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::CreateBranchError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateBranchError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateBranchError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreateBranchError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDeploymentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDeploymentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDeploymentError> for Error {
    fn from(err: crate::error::CreateDeploymentError) -> Self {
        match err {
            crate::error::CreateDeploymentError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateDeploymentError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::CreateDeploymentError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateDeploymentError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreateDeploymentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDomainAssociationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDomainAssociationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDomainAssociationError> for Error {
    fn from(err: crate::error::CreateDomainAssociationError) -> Self {
        match err {
            crate::error::CreateDomainAssociationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateDomainAssociationError::DependentServiceFailureException(inner) => {
                Error::DependentServiceFailureException(inner)
            }
            crate::error::CreateDomainAssociationError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::CreateDomainAssociationError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateDomainAssociationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateDomainAssociationError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreateDomainAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateWebhookError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateWebhookError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateWebhookError> for Error {
    fn from(err: crate::error::CreateWebhookError) -> Self {
        match err {
            crate::error::CreateWebhookError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateWebhookError::DependentServiceFailureException(inner) => {
                Error::DependentServiceFailureException(inner)
            }
            crate::error::CreateWebhookError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::CreateWebhookError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateWebhookError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateWebhookError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreateWebhookError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAppError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteAppError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAppError> for Error {
    fn from(err: crate::error::DeleteAppError) -> Self {
        match err {
            crate::error::DeleteAppError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteAppError::DependentServiceFailureException(inner) => {
                Error::DependentServiceFailureException(inner)
            }
            crate::error::DeleteAppError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteAppError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteAppError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteAppError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteBackendEnvironmentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteBackendEnvironmentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteBackendEnvironmentError> for Error {
    fn from(err: crate::error::DeleteBackendEnvironmentError) -> Self {
        match err {
            crate::error::DeleteBackendEnvironmentError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteBackendEnvironmentError::DependentServiceFailureException(
                inner,
            ) => Error::DependentServiceFailureException(inner),
            crate::error::DeleteBackendEnvironmentError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteBackendEnvironmentError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteBackendEnvironmentError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteBackendEnvironmentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteBranchError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteBranchError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteBranchError> for Error {
    fn from(err: crate::error::DeleteBranchError) -> Self {
        match err {
            crate::error::DeleteBranchError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteBranchError::DependentServiceFailureException(inner) => {
                Error::DependentServiceFailureException(inner)
            }
            crate::error::DeleteBranchError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteBranchError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteBranchError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteBranchError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDomainAssociationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteDomainAssociationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDomainAssociationError> for Error {
    fn from(err: crate::error::DeleteDomainAssociationError) -> Self {
        match err {
            crate::error::DeleteDomainAssociationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteDomainAssociationError::DependentServiceFailureException(inner) => {
                Error::DependentServiceFailureException(inner)
            }
            crate::error::DeleteDomainAssociationError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteDomainAssociationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteDomainAssociationError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteDomainAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteJobError> for Error {
    fn from(err: crate::error::DeleteJobError) -> Self {
        match err {
            crate::error::DeleteJobError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteJobError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteJobError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteJobError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteJobError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteWebhookError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteWebhookError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteWebhookError> for Error {
    fn from(err: crate::error::DeleteWebhookError) -> Self {
        match err {
            crate::error::DeleteWebhookError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteWebhookError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteWebhookError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteWebhookError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteWebhookError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteWebhookError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GenerateAccessLogsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GenerateAccessLogsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GenerateAccessLogsError> for Error {
    fn from(err: crate::error::GenerateAccessLogsError) -> Self {
        match err {
            crate::error::GenerateAccessLogsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GenerateAccessLogsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GenerateAccessLogsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GenerateAccessLogsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GenerateAccessLogsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAppError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetAppError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAppError> for Error {
    fn from(err: crate::error::GetAppError) -> Self {
        match err {
            crate::error::GetAppError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetAppError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GetAppError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetAppError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetAppError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetArtifactUrlError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetArtifactUrlError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetArtifactUrlError> for Error {
    fn from(err: crate::error::GetArtifactUrlError) -> Self {
        match err {
            crate::error::GetArtifactUrlError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetArtifactUrlError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GetArtifactUrlError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetArtifactUrlError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetArtifactUrlError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetArtifactUrlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetBackendEnvironmentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetBackendEnvironmentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetBackendEnvironmentError> for Error {
    fn from(err: crate::error::GetBackendEnvironmentError) -> Self {
        match err {
            crate::error::GetBackendEnvironmentError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetBackendEnvironmentError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GetBackendEnvironmentError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetBackendEnvironmentError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetBackendEnvironmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetBranchError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetBranchError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetBranchError> for Error {
    fn from(err: crate::error::GetBranchError) -> Self {
        match err {
            crate::error::GetBranchError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetBranchError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GetBranchError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetBranchError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetBranchError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDomainAssociationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetDomainAssociationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDomainAssociationError> for Error {
    fn from(err: crate::error::GetDomainAssociationError) -> Self {
        match err {
            crate::error::GetDomainAssociationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetDomainAssociationError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GetDomainAssociationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetDomainAssociationError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetDomainAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetJobError> for Error {
    fn from(err: crate::error::GetJobError) -> Self {
        match err {
            crate::error::GetJobError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetJobError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GetJobError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetJobError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetJobError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetWebhookError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetWebhookError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetWebhookError> for Error {
    fn from(err: crate::error::GetWebhookError) -> Self {
        match err {
            crate::error::GetWebhookError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetWebhookError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GetWebhookError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetWebhookError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetWebhookError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetWebhookError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAppsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListAppsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAppsError> for Error {
    fn from(err: crate::error::ListAppsError) -> Self {
        match err {
            crate::error::ListAppsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListAppsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListAppsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::ListAppsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListArtifactsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListArtifactsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListArtifactsError> for Error {
    fn from(err: crate::error::ListArtifactsError) -> Self {
        match err {
            crate::error::ListArtifactsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListArtifactsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListArtifactsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ListArtifactsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::ListArtifactsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListBackendEnvironmentsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListBackendEnvironmentsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListBackendEnvironmentsError> for Error {
    fn from(err: crate::error::ListBackendEnvironmentsError) -> Self {
        match err {
            crate::error::ListBackendEnvironmentsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListBackendEnvironmentsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListBackendEnvironmentsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::ListBackendEnvironmentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListBranchesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListBranchesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListBranchesError> for Error {
    fn from(err: crate::error::ListBranchesError) -> Self {
        match err {
            crate::error::ListBranchesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListBranchesError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListBranchesError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::ListBranchesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDomainAssociationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListDomainAssociationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDomainAssociationsError> for Error {
    fn from(err: crate::error::ListDomainAssociationsError) -> Self {
        match err {
            crate::error::ListDomainAssociationsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListDomainAssociationsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListDomainAssociationsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::ListDomainAssociationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListJobsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListJobsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListJobsError> for Error {
    fn from(err: crate::error::ListJobsError) -> Self {
        match err {
            crate::error::ListJobsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListJobsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListJobsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ListJobsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::ListJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListTagsForResourceError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListWebhooksError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListWebhooksError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListWebhooksError> for Error {
    fn from(err: crate::error::ListWebhooksError) -> Self {
        match err {
            crate::error::ListWebhooksError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListWebhooksError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListWebhooksError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ListWebhooksError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::ListWebhooksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartDeploymentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StartDeploymentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartDeploymentError> for Error {
    fn from(err: crate::error::StartDeploymentError) -> Self {
        match err {
            crate::error::StartDeploymentError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::StartDeploymentError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::StartDeploymentError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::StartDeploymentError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::StartDeploymentError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::StartDeploymentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StartJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartJobError> for Error {
    fn from(err: crate::error::StartJobError) -> Self {
        match err {
            crate::error::StartJobError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::StartJobError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::StartJobError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::StartJobError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::StartJobError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::StartJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StopJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopJobError> for Error {
    fn from(err: crate::error::StopJobError) -> Self {
        match err {
            crate::error::StopJobError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::StopJobError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::StopJobError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::StopJobError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::StopJobError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::StopJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::TagResourceError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UntagResourceError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::UntagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateAppError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateAppError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAppError> for Error {
    fn from(err: crate::error::UpdateAppError) -> Self {
        match err {
            crate::error::UpdateAppError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateAppError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::UpdateAppError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateAppError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateAppError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateBranchError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateBranchError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateBranchError> for Error {
    fn from(err: crate::error::UpdateBranchError) -> Self {
        match err {
            crate::error::UpdateBranchError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateBranchError::DependentServiceFailureException(inner) => {
                Error::DependentServiceFailureException(inner)
            }
            crate::error::UpdateBranchError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::UpdateBranchError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateBranchError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateBranchError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDomainAssociationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateDomainAssociationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateDomainAssociationError> for Error {
    fn from(err: crate::error::UpdateDomainAssociationError) -> Self {
        match err {
            crate::error::UpdateDomainAssociationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateDomainAssociationError::DependentServiceFailureException(inner) => {
                Error::DependentServiceFailureException(inner)
            }
            crate::error::UpdateDomainAssociationError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::UpdateDomainAssociationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateDomainAssociationError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateDomainAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateWebhookError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateWebhookError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateWebhookError> for Error {
    fn from(err: crate::error::UpdateWebhookError) -> Self {
        match err {
            crate::error::UpdateWebhookError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateWebhookError::DependentServiceFailureException(inner) => {
                Error::DependentServiceFailureException(inner)
            }
            crate::error::UpdateWebhookError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::UpdateWebhookError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateWebhookError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateWebhookError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::BadRequestException(e) => e.request_id(),
            Self::DependentServiceFailureException(e) => e.request_id(),
            Self::InternalFailureException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::NotFoundException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::UnauthorizedException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
