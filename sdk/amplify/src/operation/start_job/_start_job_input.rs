// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The request structure for the start job request. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartJobInput {
    /// <p> The unique ID for an Amplify app. </p>
    pub app_id: ::std::option::Option<::std::string::String>,
    /// <p> The branch name for the job. </p>
    pub branch_name: ::std::option::Option<::std::string::String>,
    /// <p> The unique ID for an existing job. This is required if the value of <code>jobType</code> is <code>RETRY</code>. </p>
    pub job_id: ::std::option::Option<::std::string::String>,
    /// <p> Describes the type for the job. The job type <code>RELEASE</code> starts a new job with the latest change from the specified branch. This value is available only for apps that are connected to a repository. The job type <code>RETRY</code> retries an existing job. If the job type value is <code>RETRY</code>, the <code>jobId</code> is also required. </p>
    pub job_type: ::std::option::Option<crate::types::JobType>,
    /// <p> A descriptive reason for starting this job. </p>
    pub job_reason: ::std::option::Option<::std::string::String>,
    /// <p> The commit ID from a third-party repository provider for the job. </p>
    pub commit_id: ::std::option::Option<::std::string::String>,
    /// <p> The commit message from a third-party repository provider for the job. </p>
    pub commit_message: ::std::option::Option<::std::string::String>,
    /// <p> The commit date and time for the job. </p>
    pub commit_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl StartJobInput {
    /// <p> The unique ID for an Amplify app. </p>
    pub fn app_id(&self) -> ::std::option::Option<&str> {
        self.app_id.as_deref()
    }
    /// <p> The branch name for the job. </p>
    pub fn branch_name(&self) -> ::std::option::Option<&str> {
        self.branch_name.as_deref()
    }
    /// <p> The unique ID for an existing job. This is required if the value of <code>jobType</code> is <code>RETRY</code>. </p>
    pub fn job_id(&self) -> ::std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p> Describes the type for the job. The job type <code>RELEASE</code> starts a new job with the latest change from the specified branch. This value is available only for apps that are connected to a repository. The job type <code>RETRY</code> retries an existing job. If the job type value is <code>RETRY</code>, the <code>jobId</code> is also required. </p>
    pub fn job_type(&self) -> ::std::option::Option<&crate::types::JobType> {
        self.job_type.as_ref()
    }
    /// <p> A descriptive reason for starting this job. </p>
    pub fn job_reason(&self) -> ::std::option::Option<&str> {
        self.job_reason.as_deref()
    }
    /// <p> The commit ID from a third-party repository provider for the job. </p>
    pub fn commit_id(&self) -> ::std::option::Option<&str> {
        self.commit_id.as_deref()
    }
    /// <p> The commit message from a third-party repository provider for the job. </p>
    pub fn commit_message(&self) -> ::std::option::Option<&str> {
        self.commit_message.as_deref()
    }
    /// <p> The commit date and time for the job. </p>
    pub fn commit_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.commit_time.as_ref()
    }
}
impl StartJobInput {
    /// Creates a new builder-style object to manufacture [`StartJobInput`](crate::operation::start_job::StartJobInput).
    pub fn builder() -> crate::operation::start_job::builders::StartJobInputBuilder {
        crate::operation::start_job::builders::StartJobInputBuilder::default()
    }
}

/// A builder for [`StartJobInput`](crate::operation::start_job::StartJobInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StartJobInputBuilder {
    pub(crate) app_id: ::std::option::Option<::std::string::String>,
    pub(crate) branch_name: ::std::option::Option<::std::string::String>,
    pub(crate) job_id: ::std::option::Option<::std::string::String>,
    pub(crate) job_type: ::std::option::Option<crate::types::JobType>,
    pub(crate) job_reason: ::std::option::Option<::std::string::String>,
    pub(crate) commit_id: ::std::option::Option<::std::string::String>,
    pub(crate) commit_message: ::std::option::Option<::std::string::String>,
    pub(crate) commit_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl StartJobInputBuilder {
    /// <p> The unique ID for an Amplify app. </p>
    /// This field is required.
    pub fn app_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn set_app_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_id = input;
        self
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn get_app_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_id
    }
    /// <p> The branch name for the job. </p>
    /// This field is required.
    pub fn branch_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.branch_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The branch name for the job. </p>
    pub fn set_branch_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.branch_name = input;
        self
    }
    /// <p> The branch name for the job. </p>
    pub fn get_branch_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.branch_name
    }
    /// <p> The unique ID for an existing job. This is required if the value of <code>jobType</code> is <code>RETRY</code>. </p>
    pub fn job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The unique ID for an existing job. This is required if the value of <code>jobType</code> is <code>RETRY</code>. </p>
    pub fn set_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p> The unique ID for an existing job. This is required if the value of <code>jobType</code> is <code>RETRY</code>. </p>
    pub fn get_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_id
    }
    /// <p> Describes the type for the job. The job type <code>RELEASE</code> starts a new job with the latest change from the specified branch. This value is available only for apps that are connected to a repository. The job type <code>RETRY</code> retries an existing job. If the job type value is <code>RETRY</code>, the <code>jobId</code> is also required. </p>
    /// This field is required.
    pub fn job_type(mut self, input: crate::types::JobType) -> Self {
        self.job_type = ::std::option::Option::Some(input);
        self
    }
    /// <p> Describes the type for the job. The job type <code>RELEASE</code> starts a new job with the latest change from the specified branch. This value is available only for apps that are connected to a repository. The job type <code>RETRY</code> retries an existing job. If the job type value is <code>RETRY</code>, the <code>jobId</code> is also required. </p>
    pub fn set_job_type(mut self, input: ::std::option::Option<crate::types::JobType>) -> Self {
        self.job_type = input;
        self
    }
    /// <p> Describes the type for the job. The job type <code>RELEASE</code> starts a new job with the latest change from the specified branch. This value is available only for apps that are connected to a repository. The job type <code>RETRY</code> retries an existing job. If the job type value is <code>RETRY</code>, the <code>jobId</code> is also required. </p>
    pub fn get_job_type(&self) -> &::std::option::Option<crate::types::JobType> {
        &self.job_type
    }
    /// <p> A descriptive reason for starting this job. </p>
    pub fn job_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> A descriptive reason for starting this job. </p>
    pub fn set_job_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_reason = input;
        self
    }
    /// <p> A descriptive reason for starting this job. </p>
    pub fn get_job_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_reason
    }
    /// <p> The commit ID from a third-party repository provider for the job. </p>
    pub fn commit_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.commit_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The commit ID from a third-party repository provider for the job. </p>
    pub fn set_commit_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.commit_id = input;
        self
    }
    /// <p> The commit ID from a third-party repository provider for the job. </p>
    pub fn get_commit_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.commit_id
    }
    /// <p> The commit message from a third-party repository provider for the job. </p>
    pub fn commit_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.commit_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The commit message from a third-party repository provider for the job. </p>
    pub fn set_commit_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.commit_message = input;
        self
    }
    /// <p> The commit message from a third-party repository provider for the job. </p>
    pub fn get_commit_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.commit_message
    }
    /// <p> The commit date and time for the job. </p>
    pub fn commit_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.commit_time = ::std::option::Option::Some(input);
        self
    }
    /// <p> The commit date and time for the job. </p>
    pub fn set_commit_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.commit_time = input;
        self
    }
    /// <p> The commit date and time for the job. </p>
    pub fn get_commit_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.commit_time
    }
    /// Consumes the builder and constructs a [`StartJobInput`](crate::operation::start_job::StartJobInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::start_job::StartJobInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::start_job::StartJobInput {
            app_id: self.app_id,
            branch_name: self.branch_name,
            job_id: self.job_id,
            job_type: self.job_type,
            job_reason: self.job_reason,
            commit_id: self.commit_id,
            commit_message: self.commit_message,
            commit_time: self.commit_time,
        })
    }
}
