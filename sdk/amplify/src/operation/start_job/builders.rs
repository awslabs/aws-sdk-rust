// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::start_job::_start_job_output::StartJobOutputBuilder;

pub use crate::operation::start_job::_start_job_input::StartJobInputBuilder;

/// Fluent builder constructing a request to `StartJob`.
///
/// <p> Starts a new job for a branch of an Amplify app. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StartJobFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::start_job::builders::StartJobInputBuilder,
}
impl StartJobFluentBuilder {
    /// Creates a new `StartJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::start_job::StartJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::start_job::StartJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::start_job::StartJobOutput,
        aws_smithy_http::result::SdkError<crate::operation::start_job::StartJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.app_id(input.into());
        self
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_app_id(input);
        self
    }
    /// <p> The branch name for the job. </p>
    pub fn branch_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.branch_name(input.into());
        self
    }
    /// <p> The branch name for the job. </p>
    pub fn set_branch_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_branch_name(input);
        self
    }
    /// <p> The unique ID for an existing job. This is required if the value of <code>jobType</code> is <code>RETRY</code>. </p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_id(input.into());
        self
    }
    /// <p> The unique ID for an existing job. This is required if the value of <code>jobType</code> is <code>RETRY</code>. </p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_job_id(input);
        self
    }
    /// <p> Describes the type for the job. The job type <code>RELEASE</code> starts a new job with the latest change from the specified branch. This value is available only for apps that are connected to a repository. The job type <code>RETRY</code> retries an existing job. If the job type value is <code>RETRY</code>, the <code>jobId</code> is also required. </p>
    pub fn job_type(mut self, input: crate::types::JobType) -> Self {
        self.inner = self.inner.job_type(input);
        self
    }
    /// <p> Describes the type for the job. The job type <code>RELEASE</code> starts a new job with the latest change from the specified branch. This value is available only for apps that are connected to a repository. The job type <code>RETRY</code> retries an existing job. If the job type value is <code>RETRY</code>, the <code>jobId</code> is also required. </p>
    pub fn set_job_type(mut self, input: std::option::Option<crate::types::JobType>) -> Self {
        self.inner = self.inner.set_job_type(input);
        self
    }
    /// <p> A descriptive reason for starting this job. </p>
    pub fn job_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_reason(input.into());
        self
    }
    /// <p> A descriptive reason for starting this job. </p>
    pub fn set_job_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_job_reason(input);
        self
    }
    /// <p> The commit ID from a third-party repository provider for the job. </p>
    pub fn commit_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.commit_id(input.into());
        self
    }
    /// <p> The commit ID from a third-party repository provider for the job. </p>
    pub fn set_commit_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_commit_id(input);
        self
    }
    /// <p> The commit message from a third-party repository provider for the job. </p>
    pub fn commit_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.commit_message(input.into());
        self
    }
    /// <p> The commit message from a third-party repository provider for the job. </p>
    pub fn set_commit_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_commit_message(input);
        self
    }
    /// <p> The commit date and time for the job. </p>
    pub fn commit_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.commit_time(input);
        self
    }
    /// <p> The commit date and time for the job. </p>
    pub fn set_commit_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_commit_time(input);
        self
    }
}
