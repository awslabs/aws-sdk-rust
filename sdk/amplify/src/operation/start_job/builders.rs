// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::start_job::_start_job_output::StartJobOutputBuilder;

pub use crate::operation::start_job::_start_job_input::StartJobInputBuilder;

impl crate::operation::start_job::builders::StartJobInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::start_job::StartJobOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_job::StartJobError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.start_job();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `StartJob`.
///
/// <p>Starts a new job for a branch of an Amplify app.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct StartJobFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::start_job::builders::StartJobInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl crate::client::customize::internal::CustomizableSend<crate::operation::start_job::StartJobOutput, crate::operation::start_job::StartJobError>
    for StartJobFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<crate::operation::start_job::StartJobOutput, crate::operation::start_job::StartJobError>,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl StartJobFluentBuilder {
    /// Creates a new `StartJob`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the StartJob as a reference.
    pub fn as_input(&self) -> &crate::operation::start_job::builders::StartJobInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_job::StartJobOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_job::StartJobError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::start_job::StartJob::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::start_job::StartJob::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<crate::operation::start_job::StartJobOutput, crate::operation::start_job::StartJobError, Self>
    {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The unique ID for an Amplify app.</p>
    pub fn app_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.app_id(input.into());
        self
    }
    /// <p>The unique ID for an Amplify app.</p>
    pub fn set_app_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_app_id(input);
        self
    }
    /// <p>The unique ID for an Amplify app.</p>
    pub fn get_app_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_app_id()
    }
    /// <p>The name of the branch to use for the job.</p>
    pub fn branch_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.branch_name(input.into());
        self
    }
    /// <p>The name of the branch to use for the job.</p>
    pub fn set_branch_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_branch_name(input);
        self
    }
    /// <p>The name of the branch to use for the job.</p>
    pub fn get_branch_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_branch_name()
    }
    /// <p>The unique ID for an existing job. This is required if the value of <code>jobType</code> is <code>RETRY</code>.</p>
    pub fn job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.job_id(input.into());
        self
    }
    /// <p>The unique ID for an existing job. This is required if the value of <code>jobType</code> is <code>RETRY</code>.</p>
    pub fn set_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_job_id(input);
        self
    }
    /// <p>The unique ID for an existing job. This is required if the value of <code>jobType</code> is <code>RETRY</code>.</p>
    pub fn get_job_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_job_id()
    }
    /// <p>Describes the type for the job. The job type <code>RELEASE</code> starts a new job with the latest change from the specified branch. This value is available only for apps that are connected to a repository.</p>
    /// <p>The job type <code>RETRY</code> retries an existing job. If the job type value is <code>RETRY</code>, the <code>jobId</code> is also required.</p>
    pub fn job_type(mut self, input: crate::types::JobType) -> Self {
        self.inner = self.inner.job_type(input);
        self
    }
    /// <p>Describes the type for the job. The job type <code>RELEASE</code> starts a new job with the latest change from the specified branch. This value is available only for apps that are connected to a repository.</p>
    /// <p>The job type <code>RETRY</code> retries an existing job. If the job type value is <code>RETRY</code>, the <code>jobId</code> is also required.</p>
    pub fn set_job_type(mut self, input: ::std::option::Option<crate::types::JobType>) -> Self {
        self.inner = self.inner.set_job_type(input);
        self
    }
    /// <p>Describes the type for the job. The job type <code>RELEASE</code> starts a new job with the latest change from the specified branch. This value is available only for apps that are connected to a repository.</p>
    /// <p>The job type <code>RETRY</code> retries an existing job. If the job type value is <code>RETRY</code>, the <code>jobId</code> is also required.</p>
    pub fn get_job_type(&self) -> &::std::option::Option<crate::types::JobType> {
        self.inner.get_job_type()
    }
    /// <p>A descriptive reason for starting the job.</p>
    pub fn job_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.job_reason(input.into());
        self
    }
    /// <p>A descriptive reason for starting the job.</p>
    pub fn set_job_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_job_reason(input);
        self
    }
    /// <p>A descriptive reason for starting the job.</p>
    pub fn get_job_reason(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_job_reason()
    }
    /// <p>The commit ID from a third-party repository provider for the job.</p>
    pub fn commit_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.commit_id(input.into());
        self
    }
    /// <p>The commit ID from a third-party repository provider for the job.</p>
    pub fn set_commit_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_commit_id(input);
        self
    }
    /// <p>The commit ID from a third-party repository provider for the job.</p>
    pub fn get_commit_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_commit_id()
    }
    /// <p>The commit message from a third-party repository provider for the job.</p>
    pub fn commit_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.commit_message(input.into());
        self
    }
    /// <p>The commit message from a third-party repository provider for the job.</p>
    pub fn set_commit_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_commit_message(input);
        self
    }
    /// <p>The commit message from a third-party repository provider for the job.</p>
    pub fn get_commit_message(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_commit_message()
    }
    /// <p>The commit date and time for the job.</p>
    pub fn commit_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.commit_time(input);
        self
    }
    /// <p>The commit date and time for the job.</p>
    pub fn set_commit_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_commit_time(input);
        self
    }
    /// <p>The commit date and time for the job.</p>
    pub fn get_commit_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        self.inner.get_commit_time()
    }
}
