// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The request structure for the backend environment create request. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateBackendEnvironmentInput {
    /// <p> The unique ID for an Amplify app. </p>
    pub app_id: ::std::option::Option<::std::string::String>,
    /// <p> The name for the backend environment. </p>
    pub environment_name: ::std::option::Option<::std::string::String>,
    /// <p> The AWS CloudFormation stack name of a backend environment. </p>
    pub stack_name: ::std::option::Option<::std::string::String>,
    /// <p> The name of deployment artifacts. </p>
    pub deployment_artifacts: ::std::option::Option<::std::string::String>,
}
impl CreateBackendEnvironmentInput {
    /// <p> The unique ID for an Amplify app. </p>
    pub fn app_id(&self) -> ::std::option::Option<&str> {
        self.app_id.as_deref()
    }
    /// <p> The name for the backend environment. </p>
    pub fn environment_name(&self) -> ::std::option::Option<&str> {
        self.environment_name.as_deref()
    }
    /// <p> The AWS CloudFormation stack name of a backend environment. </p>
    pub fn stack_name(&self) -> ::std::option::Option<&str> {
        self.stack_name.as_deref()
    }
    /// <p> The name of deployment artifacts. </p>
    pub fn deployment_artifacts(&self) -> ::std::option::Option<&str> {
        self.deployment_artifacts.as_deref()
    }
}
impl CreateBackendEnvironmentInput {
    /// Creates a new builder-style object to manufacture [`CreateBackendEnvironmentInput`](crate::operation::create_backend_environment::CreateBackendEnvironmentInput).
    pub fn builder() -> crate::operation::create_backend_environment::builders::CreateBackendEnvironmentInputBuilder {
        crate::operation::create_backend_environment::builders::CreateBackendEnvironmentInputBuilder::default()
    }
}

/// A builder for [`CreateBackendEnvironmentInput`](crate::operation::create_backend_environment::CreateBackendEnvironmentInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateBackendEnvironmentInputBuilder {
    pub(crate) app_id: ::std::option::Option<::std::string::String>,
    pub(crate) environment_name: ::std::option::Option<::std::string::String>,
    pub(crate) stack_name: ::std::option::Option<::std::string::String>,
    pub(crate) deployment_artifacts: ::std::option::Option<::std::string::String>,
}
impl CreateBackendEnvironmentInputBuilder {
    /// <p> The unique ID for an Amplify app. </p>
    /// This field is required.
    pub fn app_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn set_app_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_id = input;
        self
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn get_app_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_id
    }
    /// <p> The name for the backend environment. </p>
    /// This field is required.
    pub fn environment_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.environment_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The name for the backend environment. </p>
    pub fn set_environment_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.environment_name = input;
        self
    }
    /// <p> The name for the backend environment. </p>
    pub fn get_environment_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.environment_name
    }
    /// <p> The AWS CloudFormation stack name of a backend environment. </p>
    pub fn stack_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stack_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The AWS CloudFormation stack name of a backend environment. </p>
    pub fn set_stack_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stack_name = input;
        self
    }
    /// <p> The AWS CloudFormation stack name of a backend environment. </p>
    pub fn get_stack_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.stack_name
    }
    /// <p> The name of deployment artifacts. </p>
    pub fn deployment_artifacts(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.deployment_artifacts = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The name of deployment artifacts. </p>
    pub fn set_deployment_artifacts(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.deployment_artifacts = input;
        self
    }
    /// <p> The name of deployment artifacts. </p>
    pub fn get_deployment_artifacts(&self) -> &::std::option::Option<::std::string::String> {
        &self.deployment_artifacts
    }
    /// Consumes the builder and constructs a [`CreateBackendEnvironmentInput`](crate::operation::create_backend_environment::CreateBackendEnvironmentInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_backend_environment::CreateBackendEnvironmentInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_backend_environment::CreateBackendEnvironmentInput {
            app_id: self.app_id,
            environment_name: self.environment_name,
            stack_name: self.stack_name,
            deployment_artifacts: self.deployment_artifacts,
        })
    }
}
