// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The request structure for the stop job request. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StopJobInput {
    /// <p> The unique ID for an Amplify app. </p>
    pub app_id: ::std::option::Option<::std::string::String>,
    /// <p> The name for the branch, for the job. </p>
    pub branch_name: ::std::option::Option<::std::string::String>,
    /// <p> The unique id for the job. </p>
    pub job_id: ::std::option::Option<::std::string::String>,
}
impl StopJobInput {
    /// <p> The unique ID for an Amplify app. </p>
    pub fn app_id(&self) -> ::std::option::Option<&str> {
        self.app_id.as_deref()
    }
    /// <p> The name for the branch, for the job. </p>
    pub fn branch_name(&self) -> ::std::option::Option<&str> {
        self.branch_name.as_deref()
    }
    /// <p> The unique id for the job. </p>
    pub fn job_id(&self) -> ::std::option::Option<&str> {
        self.job_id.as_deref()
    }
}
impl StopJobInput {
    /// Creates a new builder-style object to manufacture [`StopJobInput`](crate::operation::stop_job::StopJobInput).
    pub fn builder() -> crate::operation::stop_job::builders::StopJobInputBuilder {
        crate::operation::stop_job::builders::StopJobInputBuilder::default()
    }
}

/// A builder for [`StopJobInput`](crate::operation::stop_job::StopJobInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StopJobInputBuilder {
    pub(crate) app_id: ::std::option::Option<::std::string::String>,
    pub(crate) branch_name: ::std::option::Option<::std::string::String>,
    pub(crate) job_id: ::std::option::Option<::std::string::String>,
}
impl StopJobInputBuilder {
    /// <p> The unique ID for an Amplify app. </p>
    /// This field is required.
    pub fn app_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn set_app_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_id = input;
        self
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn get_app_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_id
    }
    /// <p> The name for the branch, for the job. </p>
    /// This field is required.
    pub fn branch_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.branch_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The name for the branch, for the job. </p>
    pub fn set_branch_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.branch_name = input;
        self
    }
    /// <p> The name for the branch, for the job. </p>
    pub fn get_branch_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.branch_name
    }
    /// <p> The unique id for the job. </p>
    /// This field is required.
    pub fn job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The unique id for the job. </p>
    pub fn set_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p> The unique id for the job. </p>
    pub fn get_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_id
    }
    /// Consumes the builder and constructs a [`StopJobInput`](crate::operation::stop_job::StopJobInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::stop_job::StopJobInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::stop_job::StopJobInput {
            app_id: self.app_id,
            branch_name: self.branch_name,
            job_id: self.job_id,
        })
    }
}
