// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The request structure for the get domain association request. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetDomainAssociationInput {
    /// <p> The unique id for an Amplify app. </p>
    #[doc(hidden)]
    pub app_id: std::option::Option<std::string::String>,
    /// <p> The name of the domain. </p>
    #[doc(hidden)]
    pub domain_name: std::option::Option<std::string::String>,
}
impl GetDomainAssociationInput {
    /// <p> The unique id for an Amplify app. </p>
    pub fn app_id(&self) -> std::option::Option<&str> {
        self.app_id.as_deref()
    }
    /// <p> The name of the domain. </p>
    pub fn domain_name(&self) -> std::option::Option<&str> {
        self.domain_name.as_deref()
    }
}
impl GetDomainAssociationInput {
    /// Creates a new builder-style object to manufacture [`GetDomainAssociationInput`](crate::operation::get_domain_association::GetDomainAssociationInput).
    pub fn builder(
    ) -> crate::operation::get_domain_association::builders::GetDomainAssociationInputBuilder {
        crate::operation::get_domain_association::builders::GetDomainAssociationInputBuilder::default()
    }
}

/// A builder for [`GetDomainAssociationInput`](crate::operation::get_domain_association::GetDomainAssociationInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetDomainAssociationInputBuilder {
    pub(crate) app_id: std::option::Option<std::string::String>,
    pub(crate) domain_name: std::option::Option<std::string::String>,
}
impl GetDomainAssociationInputBuilder {
    /// <p> The unique id for an Amplify app. </p>
    pub fn app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.app_id = Some(input.into());
        self
    }
    /// <p> The unique id for an Amplify app. </p>
    pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.app_id = input;
        self
    }
    /// <p> The name of the domain. </p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_name = Some(input.into());
        self
    }
    /// <p> The name of the domain. </p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// Consumes the builder and constructs a [`GetDomainAssociationInput`](crate::operation::get_domain_association::GetDomainAssociationInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_domain_association::GetDomainAssociationInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::get_domain_association::GetDomainAssociationInput {
                app_id: self.app_id,
                domain_name: self.domain_name,
            },
        )
    }
}
