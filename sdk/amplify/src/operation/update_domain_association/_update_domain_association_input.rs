// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The request structure for the update domain association request. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateDomainAssociationInput {
    /// <p> The unique ID for an Amplify app. </p>
    #[doc(hidden)]
    pub app_id: std::option::Option<std::string::String>,
    /// <p> The name of the domain. </p>
    #[doc(hidden)]
    pub domain_name: std::option::Option<std::string::String>,
    /// <p> Enables the automated creation of subdomains for branches. </p>
    #[doc(hidden)]
    pub enable_auto_sub_domain: std::option::Option<bool>,
    /// <p> Describes the settings for the subdomain. </p>
    #[doc(hidden)]
    pub sub_domain_settings: std::option::Option<std::vec::Vec<crate::types::SubDomainSetting>>,
    /// <p> Sets the branch patterns for automatic subdomain creation. </p>
    #[doc(hidden)]
    pub auto_sub_domain_creation_patterns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p> The required AWS Identity and Access Management (IAM) service role for the Amazon Resource Name (ARN) for automatically creating subdomains. </p>
    #[doc(hidden)]
    pub auto_sub_domain_iam_role: std::option::Option<std::string::String>,
}
impl UpdateDomainAssociationInput {
    /// <p> The unique ID for an Amplify app. </p>
    pub fn app_id(&self) -> std::option::Option<&str> {
        self.app_id.as_deref()
    }
    /// <p> The name of the domain. </p>
    pub fn domain_name(&self) -> std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p> Enables the automated creation of subdomains for branches. </p>
    pub fn enable_auto_sub_domain(&self) -> std::option::Option<bool> {
        self.enable_auto_sub_domain
    }
    /// <p> Describes the settings for the subdomain. </p>
    pub fn sub_domain_settings(&self) -> std::option::Option<&[crate::types::SubDomainSetting]> {
        self.sub_domain_settings.as_deref()
    }
    /// <p> Sets the branch patterns for automatic subdomain creation. </p>
    pub fn auto_sub_domain_creation_patterns(&self) -> std::option::Option<&[std::string::String]> {
        self.auto_sub_domain_creation_patterns.as_deref()
    }
    /// <p> The required AWS Identity and Access Management (IAM) service role for the Amazon Resource Name (ARN) for automatically creating subdomains. </p>
    pub fn auto_sub_domain_iam_role(&self) -> std::option::Option<&str> {
        self.auto_sub_domain_iam_role.as_deref()
    }
}
impl UpdateDomainAssociationInput {
    /// Creates a new builder-style object to manufacture [`UpdateDomainAssociationInput`](crate::operation::update_domain_association::UpdateDomainAssociationInput).
    pub fn builder(
    ) -> crate::operation::update_domain_association::builders::UpdateDomainAssociationInputBuilder
    {
        crate::operation::update_domain_association::builders::UpdateDomainAssociationInputBuilder::default()
    }
}

/// A builder for [`UpdateDomainAssociationInput`](crate::operation::update_domain_association::UpdateDomainAssociationInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateDomainAssociationInputBuilder {
    pub(crate) app_id: std::option::Option<std::string::String>,
    pub(crate) domain_name: std::option::Option<std::string::String>,
    pub(crate) enable_auto_sub_domain: std::option::Option<bool>,
    pub(crate) sub_domain_settings:
        std::option::Option<std::vec::Vec<crate::types::SubDomainSetting>>,
    pub(crate) auto_sub_domain_creation_patterns:
        std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) auto_sub_domain_iam_role: std::option::Option<std::string::String>,
}
impl UpdateDomainAssociationInputBuilder {
    /// <p> The unique ID for an Amplify app. </p>
    pub fn app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.app_id = Some(input.into());
        self
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.app_id = input;
        self
    }
    /// <p> The name of the domain. </p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_name = Some(input.into());
        self
    }
    /// <p> The name of the domain. </p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p> Enables the automated creation of subdomains for branches. </p>
    pub fn enable_auto_sub_domain(mut self, input: bool) -> Self {
        self.enable_auto_sub_domain = Some(input);
        self
    }
    /// <p> Enables the automated creation of subdomains for branches. </p>
    pub fn set_enable_auto_sub_domain(mut self, input: std::option::Option<bool>) -> Self {
        self.enable_auto_sub_domain = input;
        self
    }
    /// Appends an item to `sub_domain_settings`.
    ///
    /// To override the contents of this collection use [`set_sub_domain_settings`](Self::set_sub_domain_settings).
    ///
    /// <p> Describes the settings for the subdomain. </p>
    pub fn sub_domain_settings(mut self, input: crate::types::SubDomainSetting) -> Self {
        let mut v = self.sub_domain_settings.unwrap_or_default();
        v.push(input);
        self.sub_domain_settings = Some(v);
        self
    }
    /// <p> Describes the settings for the subdomain. </p>
    pub fn set_sub_domain_settings(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SubDomainSetting>>,
    ) -> Self {
        self.sub_domain_settings = input;
        self
    }
    /// Appends an item to `auto_sub_domain_creation_patterns`.
    ///
    /// To override the contents of this collection use [`set_auto_sub_domain_creation_patterns`](Self::set_auto_sub_domain_creation_patterns).
    ///
    /// <p> Sets the branch patterns for automatic subdomain creation. </p>
    pub fn auto_sub_domain_creation_patterns(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        let mut v = self.auto_sub_domain_creation_patterns.unwrap_or_default();
        v.push(input.into());
        self.auto_sub_domain_creation_patterns = Some(v);
        self
    }
    /// <p> Sets the branch patterns for automatic subdomain creation. </p>
    pub fn set_auto_sub_domain_creation_patterns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.auto_sub_domain_creation_patterns = input;
        self
    }
    /// <p> The required AWS Identity and Access Management (IAM) service role for the Amazon Resource Name (ARN) for automatically creating subdomains. </p>
    pub fn auto_sub_domain_iam_role(mut self, input: impl Into<std::string::String>) -> Self {
        self.auto_sub_domain_iam_role = Some(input.into());
        self
    }
    /// <p> The required AWS Identity and Access Management (IAM) service role for the Amazon Resource Name (ARN) for automatically creating subdomains. </p>
    pub fn set_auto_sub_domain_iam_role(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.auto_sub_domain_iam_role = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateDomainAssociationInput`](crate::operation::update_domain_association::UpdateDomainAssociationInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_domain_association::UpdateDomainAssociationInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_domain_association::UpdateDomainAssociationInput {
                app_id: self.app_id,
                domain_name: self.domain_name,
                enable_auto_sub_domain: self.enable_auto_sub_domain,
                sub_domain_settings: self.sub_domain_settings,
                auto_sub_domain_creation_patterns: self.auto_sub_domain_creation_patterns,
                auto_sub_domain_iam_role: self.auto_sub_domain_iam_role,
            },
        )
    }
}
