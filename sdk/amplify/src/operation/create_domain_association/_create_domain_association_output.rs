// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The result structure for the create domain association request. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateDomainAssociationOutput {
    /// <p> Describes the structure of a domain association, which associates a custom domain with an Amplify app. </p>
    #[doc(hidden)]
    pub domain_association: std::option::Option<crate::types::DomainAssociation>,
    _request_id: Option<String>,
}
impl CreateDomainAssociationOutput {
    /// <p> Describes the structure of a domain association, which associates a custom domain with an Amplify app. </p>
    pub fn domain_association(&self) -> std::option::Option<&crate::types::DomainAssociation> {
        self.domain_association.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateDomainAssociationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateDomainAssociationOutput {
    /// Creates a new builder-style object to manufacture [`CreateDomainAssociationOutput`](crate::operation::create_domain_association::CreateDomainAssociationOutput).
    pub fn builder(
    ) -> crate::operation::create_domain_association::builders::CreateDomainAssociationOutputBuilder
    {
        crate::operation::create_domain_association::builders::CreateDomainAssociationOutputBuilder::default()
    }
}

/// A builder for [`CreateDomainAssociationOutput`](crate::operation::create_domain_association::CreateDomainAssociationOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateDomainAssociationOutputBuilder {
    pub(crate) domain_association: std::option::Option<crate::types::DomainAssociation>,
    _request_id: Option<String>,
}
impl CreateDomainAssociationOutputBuilder {
    /// <p> Describes the structure of a domain association, which associates a custom domain with an Amplify app. </p>
    pub fn domain_association(mut self, input: crate::types::DomainAssociation) -> Self {
        self.domain_association = Some(input);
        self
    }
    /// <p> Describes the structure of a domain association, which associates a custom domain with an Amplify app. </p>
    pub fn set_domain_association(
        mut self,
        input: std::option::Option<crate::types::DomainAssociation>,
    ) -> Self {
        self.domain_association = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateDomainAssociationOutput`](crate::operation::create_domain_association::CreateDomainAssociationOutput).
    pub fn build(
        self,
    ) -> crate::operation::create_domain_association::CreateDomainAssociationOutput {
        crate::operation::create_domain_association::CreateDomainAssociationOutput {
            domain_association: self.domain_association,
            _request_id: self._request_id,
        }
    }
}
