// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_domain_association::_create_domain_association_output::CreateDomainAssociationOutputBuilder;

pub use crate::operation::create_domain_association::_create_domain_association_input::CreateDomainAssociationInputBuilder;

/// Fluent builder constructing a request to `CreateDomainAssociation`.
///
/// <p> Creates a new domain association for an Amplify app. This action associates a custom domain with the Amplify app </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateDomainAssociationFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner:
        crate::operation::create_domain_association::builders::CreateDomainAssociationInputBuilder,
}
impl CreateDomainAssociationFluentBuilder {
    /// Creates a new `CreateDomainAssociation`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_domain_association::CreateDomainAssociation,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_domain_association::CreateDomainAssociationError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_domain_association::CreateDomainAssociationOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_domain_association::CreateDomainAssociationError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.app_id(input.into());
        self
    }
    /// <p> The unique ID for an Amplify app. </p>
    pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_app_id(input);
        self
    }
    /// <p> The domain name for the domain association. </p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_name(input.into());
        self
    }
    /// <p> The domain name for the domain association. </p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_name(input);
        self
    }
    /// <p> Enables the automated creation of subdomains for branches. </p>
    pub fn enable_auto_sub_domain(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_auto_sub_domain(input);
        self
    }
    /// <p> Enables the automated creation of subdomains for branches. </p>
    pub fn set_enable_auto_sub_domain(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_auto_sub_domain(input);
        self
    }
    /// Appends an item to `subDomainSettings`.
    ///
    /// To override the contents of this collection use [`set_sub_domain_settings`](Self::set_sub_domain_settings).
    ///
    /// <p> The setting for the subdomain. </p>
    pub fn sub_domain_settings(mut self, input: crate::types::SubDomainSetting) -> Self {
        self.inner = self.inner.sub_domain_settings(input);
        self
    }
    /// <p> The setting for the subdomain. </p>
    pub fn set_sub_domain_settings(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SubDomainSetting>>,
    ) -> Self {
        self.inner = self.inner.set_sub_domain_settings(input);
        self
    }
    /// Appends an item to `autoSubDomainCreationPatterns`.
    ///
    /// To override the contents of this collection use [`set_auto_sub_domain_creation_patterns`](Self::set_auto_sub_domain_creation_patterns).
    ///
    /// <p> Sets the branch patterns for automatic subdomain creation. </p>
    pub fn auto_sub_domain_creation_patterns(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.auto_sub_domain_creation_patterns(input.into());
        self
    }
    /// <p> Sets the branch patterns for automatic subdomain creation. </p>
    pub fn set_auto_sub_domain_creation_patterns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_auto_sub_domain_creation_patterns(input);
        self
    }
    /// <p> The required AWS Identity and Access Management (IAM) service role for the Amazon Resource Name (ARN) for automatically creating subdomains. </p>
    pub fn auto_sub_domain_iam_role(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.auto_sub_domain_iam_role(input.into());
        self
    }
    /// <p> The required AWS Identity and Access Management (IAM) service role for the Amazon Resource Name (ARN) for automatically creating subdomains. </p>
    pub fn set_auto_sub_domain_iam_role(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_auto_sub_domain_iam_role(input);
        self
    }
}
