// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_sol_function_instances_output_next_token(
    input: &crate::operation::list_sol_function_instances::ListSolFunctionInstancesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_sol_function_packages_output_next_token(
    input: &crate::operation::list_sol_function_packages::ListSolFunctionPackagesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_sol_network_instances_output_next_token(
    input: &crate::operation::list_sol_network_instances::ListSolNetworkInstancesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_sol_network_operations_output_next_token(
    input: &crate::operation::list_sol_network_operations::ListSolNetworkOperationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_sol_network_packages_output_next_token(
    input: &crate::operation::list_sol_network_packages::ListSolNetworkPackagesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_sol_function_instances_output_function_instances(
    input: crate::operation::list_sol_function_instances::ListSolFunctionInstancesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ListSolFunctionInstanceInfo>> {
    let input = match input.function_instances {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_sol_function_packages_output_function_packages(
    input: crate::operation::list_sol_function_packages::ListSolFunctionPackagesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ListSolFunctionPackageInfo>> {
    let input = input.function_packages;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_sol_network_instances_output_network_instances(
    input: crate::operation::list_sol_network_instances::ListSolNetworkInstancesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ListSolNetworkInstanceInfo>> {
    let input = match input.network_instances {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_sol_network_operations_output_network_operations(
    input: crate::operation::list_sol_network_operations::ListSolNetworkOperationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ListSolNetworkOperationsInfo>> {
    let input = match input.network_operations {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_sol_network_packages_output_network_packages(
    input: crate::operation::list_sol_network_packages::ListSolNetworkPackagesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ListSolNetworkPackageInfo>> {
    let input = input.network_packages;
    ::std::option::Option::Some(input)
}
