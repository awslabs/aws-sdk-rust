// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn create_sol_function_package_output_correct_errors(
    mut builder: crate::operation::create_sol_function_package::builders::CreateSolFunctionPackageOutputBuilder,
) -> crate::operation::create_sol_function_package::builders::CreateSolFunctionPackageOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.onboarding_state.is_none() {
        builder.onboarding_state = "no value was set".parse::<crate::types::OnboardingState>().ok()
    }
    if builder.operational_state.is_none() {
        builder.operational_state = "no value was set".parse::<crate::types::OperationalState>().ok()
    }
    if builder.usage_state.is_none() {
        builder.usage_state = "no value was set".parse::<crate::types::UsageState>().ok()
    }
    builder
}

pub(crate) fn create_sol_network_instance_output_correct_errors(
    mut builder: crate::operation::create_sol_network_instance::builders::CreateSolNetworkInstanceOutputBuilder,
) -> crate::operation::create_sol_network_instance::builders::CreateSolNetworkInstanceOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.nsd_info_id.is_none() {
        builder.nsd_info_id = Some(Default::default())
    }
    if builder.ns_instance_name.is_none() {
        builder.ns_instance_name = Some(Default::default())
    }
    builder
}

pub(crate) fn create_sol_network_package_output_correct_errors(
    mut builder: crate::operation::create_sol_network_package::builders::CreateSolNetworkPackageOutputBuilder,
) -> crate::operation::create_sol_network_package::builders::CreateSolNetworkPackageOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.nsd_onboarding_state.is_none() {
        builder.nsd_onboarding_state = "no value was set".parse::<crate::types::NsdOnboardingState>().ok()
    }
    if builder.nsd_operational_state.is_none() {
        builder.nsd_operational_state = "no value was set".parse::<crate::types::NsdOperationalState>().ok()
    }
    if builder.nsd_usage_state.is_none() {
        builder.nsd_usage_state = "no value was set".parse::<crate::types::NsdUsageState>().ok()
    }
    builder
}

pub(crate) fn get_sol_function_instance_output_correct_errors(
    mut builder: crate::operation::get_sol_function_instance::builders::GetSolFunctionInstanceOutputBuilder,
) -> crate::operation::get_sol_function_instance::builders::GetSolFunctionInstanceOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.ns_instance_id.is_none() {
        builder.ns_instance_id = Some(Default::default())
    }
    if builder.vnf_pkg_id.is_none() {
        builder.vnf_pkg_id = Some(Default::default())
    }
    if builder.vnfd_id.is_none() {
        builder.vnfd_id = Some(Default::default())
    }
    if builder.instantiation_state.is_none() {
        builder.instantiation_state = "no value was set".parse::<crate::types::VnfInstantiationState>().ok()
    }
    if builder.metadata.is_none() {
        builder.metadata = {
            let builder = crate::types::builders::GetSolFunctionInstanceMetadataBuilder::default();
            crate::serde_util::get_sol_function_instance_metadata_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_sol_function_package_output_correct_errors(
    mut builder: crate::operation::get_sol_function_package::builders::GetSolFunctionPackageOutputBuilder,
) -> crate::operation::get_sol_function_package::builders::GetSolFunctionPackageOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.onboarding_state.is_none() {
        builder.onboarding_state = "no value was set".parse::<crate::types::OnboardingState>().ok()
    }
    if builder.operational_state.is_none() {
        builder.operational_state = "no value was set".parse::<crate::types::OperationalState>().ok()
    }
    if builder.usage_state.is_none() {
        builder.usage_state = "no value was set".parse::<crate::types::UsageState>().ok()
    }
    builder
}

pub(crate) fn get_sol_network_instance_output_correct_errors(
    mut builder: crate::operation::get_sol_network_instance::builders::GetSolNetworkInstanceOutputBuilder,
) -> crate::operation::get_sol_network_instance::builders::GetSolNetworkInstanceOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.ns_instance_name.is_none() {
        builder.ns_instance_name = Some(Default::default())
    }
    if builder.ns_instance_description.is_none() {
        builder.ns_instance_description = Some(Default::default())
    }
    if builder.nsd_id.is_none() {
        builder.nsd_id = Some(Default::default())
    }
    if builder.nsd_info_id.is_none() {
        builder.nsd_info_id = Some(Default::default())
    }
    if builder.metadata.is_none() {
        builder.metadata = {
            let builder = crate::types::builders::GetSolNetworkInstanceMetadataBuilder::default();
            crate::serde_util::get_sol_network_instance_metadata_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_sol_network_operation_output_correct_errors(
    mut builder: crate::operation::get_sol_network_operation::builders::GetSolNetworkOperationOutputBuilder,
) -> crate::operation::get_sol_network_operation::builders::GetSolNetworkOperationOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn get_sol_network_package_output_correct_errors(
    mut builder: crate::operation::get_sol_network_package::builders::GetSolNetworkPackageOutputBuilder,
) -> crate::operation::get_sol_network_package::builders::GetSolNetworkPackageOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.nsd_onboarding_state.is_none() {
        builder.nsd_onboarding_state = "no value was set".parse::<crate::types::NsdOnboardingState>().ok()
    }
    if builder.nsd_operational_state.is_none() {
        builder.nsd_operational_state = "no value was set".parse::<crate::types::NsdOperationalState>().ok()
    }
    if builder.nsd_usage_state.is_none() {
        builder.nsd_usage_state = "no value was set".parse::<crate::types::NsdUsageState>().ok()
    }
    if builder.nsd_id.is_none() {
        builder.nsd_id = Some(Default::default())
    }
    if builder.nsd_name.is_none() {
        builder.nsd_name = Some(Default::default())
    }
    if builder.nsd_version.is_none() {
        builder.nsd_version = Some(Default::default())
    }
    if builder.vnf_pkg_ids.is_none() {
        builder.vnf_pkg_ids = Some(Default::default())
    }
    if builder.metadata.is_none() {
        builder.metadata = {
            let builder = crate::types::builders::GetSolNetworkPackageMetadataBuilder::default();
            crate::serde_util::get_sol_network_package_metadata_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn instantiate_sol_network_instance_output_correct_errors(
    mut builder: crate::operation::instantiate_sol_network_instance::builders::InstantiateSolNetworkInstanceOutputBuilder,
) -> crate::operation::instantiate_sol_network_instance::builders::InstantiateSolNetworkInstanceOutputBuilder {
    if builder.ns_lcm_op_occ_id.is_none() {
        builder.ns_lcm_op_occ_id = Some(Default::default())
    }
    builder
}

pub(crate) fn list_sol_function_packages_output_correct_errors(
    mut builder: crate::operation::list_sol_function_packages::builders::ListSolFunctionPackagesOutputBuilder,
) -> crate::operation::list_sol_function_packages::builders::ListSolFunctionPackagesOutputBuilder {
    if builder.function_packages.is_none() {
        builder.function_packages = Some(Default::default())
    }
    builder
}

pub(crate) fn list_sol_network_packages_output_correct_errors(
    mut builder: crate::operation::list_sol_network_packages::builders::ListSolNetworkPackagesOutputBuilder,
) -> crate::operation::list_sol_network_packages::builders::ListSolNetworkPackagesOutputBuilder {
    if builder.network_packages.is_none() {
        builder.network_packages = Some(Default::default())
    }
    builder
}

pub(crate) fn list_tags_for_resource_output_correct_errors(
    mut builder: crate::operation::list_tags_for_resource::builders::ListTagsForResourceOutputBuilder,
) -> crate::operation::list_tags_for_resource::builders::ListTagsForResourceOutputBuilder {
    if builder.tags.is_none() {
        builder.tags = Some(Default::default())
    }
    builder
}

pub(crate) fn put_sol_function_package_content_output_correct_errors(
    mut builder: crate::operation::put_sol_function_package_content::builders::PutSolFunctionPackageContentOutputBuilder,
) -> crate::operation::put_sol_function_package_content::builders::PutSolFunctionPackageContentOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.vnfd_id.is_none() {
        builder.vnfd_id = Some(Default::default())
    }
    if builder.vnf_product_name.is_none() {
        builder.vnf_product_name = Some(Default::default())
    }
    if builder.vnf_provider.is_none() {
        builder.vnf_provider = Some(Default::default())
    }
    if builder.vnfd_version.is_none() {
        builder.vnfd_version = Some(Default::default())
    }
    if builder.metadata.is_none() {
        builder.metadata = {
            let builder = crate::types::builders::PutSolFunctionPackageContentMetadataBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn put_sol_network_package_content_output_correct_errors(
    mut builder: crate::operation::put_sol_network_package_content::builders::PutSolNetworkPackageContentOutputBuilder,
) -> crate::operation::put_sol_network_package_content::builders::PutSolNetworkPackageContentOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.nsd_id.is_none() {
        builder.nsd_id = Some(Default::default())
    }
    if builder.nsd_name.is_none() {
        builder.nsd_name = Some(Default::default())
    }
    if builder.nsd_version.is_none() {
        builder.nsd_version = Some(Default::default())
    }
    if builder.vnf_pkg_ids.is_none() {
        builder.vnf_pkg_ids = Some(Default::default())
    }
    if builder.metadata.is_none() {
        builder.metadata = {
            let builder = crate::types::builders::PutSolNetworkPackageContentMetadataBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn update_sol_function_package_output_correct_errors(
    mut builder: crate::operation::update_sol_function_package::builders::UpdateSolFunctionPackageOutputBuilder,
) -> crate::operation::update_sol_function_package::builders::UpdateSolFunctionPackageOutputBuilder {
    if builder.operational_state.is_none() {
        builder.operational_state = "no value was set".parse::<crate::types::OperationalState>().ok()
    }
    builder
}

pub(crate) fn update_sol_network_package_output_correct_errors(
    mut builder: crate::operation::update_sol_network_package::builders::UpdateSolNetworkPackageOutputBuilder,
) -> crate::operation::update_sol_network_package::builders::UpdateSolNetworkPackageOutputBuilder {
    if builder.nsd_operational_state.is_none() {
        builder.nsd_operational_state = "no value was set".parse::<crate::types::NsdOperationalState>().ok()
    }
    builder
}

pub(crate) fn validate_sol_function_package_content_output_correct_errors(
    mut builder: crate::operation::validate_sol_function_package_content::builders::ValidateSolFunctionPackageContentOutputBuilder,
) -> crate::operation::validate_sol_function_package_content::builders::ValidateSolFunctionPackageContentOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.vnfd_id.is_none() {
        builder.vnfd_id = Some(Default::default())
    }
    if builder.vnf_product_name.is_none() {
        builder.vnf_product_name = Some(Default::default())
    }
    if builder.vnf_provider.is_none() {
        builder.vnf_provider = Some(Default::default())
    }
    if builder.vnfd_version.is_none() {
        builder.vnfd_version = Some(Default::default())
    }
    if builder.metadata.is_none() {
        builder.metadata = {
            let builder = crate::types::builders::ValidateSolFunctionPackageContentMetadataBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn validate_sol_network_package_content_output_correct_errors(
    mut builder: crate::operation::validate_sol_network_package_content::builders::ValidateSolNetworkPackageContentOutputBuilder,
) -> crate::operation::validate_sol_network_package_content::builders::ValidateSolNetworkPackageContentOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.nsd_id.is_none() {
        builder.nsd_id = Some(Default::default())
    }
    if builder.nsd_name.is_none() {
        builder.nsd_name = Some(Default::default())
    }
    if builder.nsd_version.is_none() {
        builder.nsd_version = Some(Default::default())
    }
    if builder.vnf_pkg_ids.is_none() {
        builder.vnf_pkg_ids = Some(Default::default())
    }
    if builder.metadata.is_none() {
        builder.metadata = {
            let builder = crate::types::builders::ValidateSolNetworkPackageContentMetadataBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn get_sol_function_instance_metadata_correct_errors(
    mut builder: crate::types::builders::GetSolFunctionInstanceMetadataBuilder,
) -> crate::types::builders::GetSolFunctionInstanceMetadataBuilder {
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified.is_none() {
        builder.last_modified = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_sol_network_instance_metadata_correct_errors(
    mut builder: crate::types::builders::GetSolNetworkInstanceMetadataBuilder,
) -> crate::types::builders::GetSolNetworkInstanceMetadataBuilder {
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified.is_none() {
        builder.last_modified = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_sol_network_package_metadata_correct_errors(
    mut builder: crate::types::builders::GetSolNetworkPackageMetadataBuilder,
) -> crate::types::builders::GetSolNetworkPackageMetadataBuilder {
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified.is_none() {
        builder.last_modified = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_sol_function_package_metadata_correct_errors(
    mut builder: crate::types::builders::GetSolFunctionPackageMetadataBuilder,
) -> crate::types::builders::GetSolFunctionPackageMetadataBuilder {
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified.is_none() {
        builder.last_modified = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_sol_network_operation_metadata_correct_errors(
    mut builder: crate::types::builders::GetSolNetworkOperationMetadataBuilder,
) -> crate::types::builders::GetSolNetworkOperationMetadataBuilder {
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified.is_none() {
        builder.last_modified = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn lcm_operation_info_correct_errors(
    mut builder: crate::types::builders::LcmOperationInfoBuilder,
) -> crate::types::builders::LcmOperationInfoBuilder {
    if builder.ns_lcm_op_occ_id.is_none() {
        builder.ns_lcm_op_occ_id = Some(Default::default())
    }
    builder
}

pub(crate) fn problem_details_correct_errors(
    mut builder: crate::types::builders::ProblemDetailsBuilder,
) -> crate::types::builders::ProblemDetailsBuilder {
    if builder.detail.is_none() {
        builder.detail = Some(Default::default())
    }
    builder
}

pub(crate) fn list_sol_function_instance_info_correct_errors(
    mut builder: crate::types::builders::ListSolFunctionInstanceInfoBuilder,
) -> crate::types::builders::ListSolFunctionInstanceInfoBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.ns_instance_id.is_none() {
        builder.ns_instance_id = Some(Default::default())
    }
    if builder.vnf_pkg_id.is_none() {
        builder.vnf_pkg_id = Some(Default::default())
    }
    if builder.instantiation_state.is_none() {
        builder.instantiation_state = "no value was set".parse::<crate::types::VnfInstantiationState>().ok()
    }
    if builder.metadata.is_none() {
        builder.metadata = {
            let builder = crate::types::builders::ListSolFunctionInstanceMetadataBuilder::default();
            crate::serde_util::list_sol_function_instance_metadata_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn list_sol_function_package_info_correct_errors(
    mut builder: crate::types::builders::ListSolFunctionPackageInfoBuilder,
) -> crate::types::builders::ListSolFunctionPackageInfoBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.onboarding_state.is_none() {
        builder.onboarding_state = "no value was set".parse::<crate::types::OnboardingState>().ok()
    }
    if builder.operational_state.is_none() {
        builder.operational_state = "no value was set".parse::<crate::types::OperationalState>().ok()
    }
    if builder.usage_state.is_none() {
        builder.usage_state = "no value was set".parse::<crate::types::UsageState>().ok()
    }
    builder
}

pub(crate) fn list_sol_network_instance_info_correct_errors(
    mut builder: crate::types::builders::ListSolNetworkInstanceInfoBuilder,
) -> crate::types::builders::ListSolNetworkInstanceInfoBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.ns_instance_name.is_none() {
        builder.ns_instance_name = Some(Default::default())
    }
    if builder.ns_instance_description.is_none() {
        builder.ns_instance_description = Some(Default::default())
    }
    if builder.nsd_id.is_none() {
        builder.nsd_id = Some(Default::default())
    }
    if builder.nsd_info_id.is_none() {
        builder.nsd_info_id = Some(Default::default())
    }
    if builder.ns_state.is_none() {
        builder.ns_state = "no value was set".parse::<crate::types::NsState>().ok()
    }
    if builder.metadata.is_none() {
        builder.metadata = {
            let builder = crate::types::builders::ListSolNetworkInstanceMetadataBuilder::default();
            crate::serde_util::list_sol_network_instance_metadata_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn list_sol_network_operations_info_correct_errors(
    mut builder: crate::types::builders::ListSolNetworkOperationsInfoBuilder,
) -> crate::types::builders::ListSolNetworkOperationsInfoBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.operation_state.is_none() {
        builder.operation_state = "no value was set".parse::<crate::types::NsLcmOperationState>().ok()
    }
    if builder.ns_instance_id.is_none() {
        builder.ns_instance_id = Some(Default::default())
    }
    if builder.lcm_operation_type.is_none() {
        builder.lcm_operation_type = "no value was set".parse::<crate::types::LcmOperationType>().ok()
    }
    builder
}

pub(crate) fn list_sol_network_package_info_correct_errors(
    mut builder: crate::types::builders::ListSolNetworkPackageInfoBuilder,
) -> crate::types::builders::ListSolNetworkPackageInfoBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.nsd_onboarding_state.is_none() {
        builder.nsd_onboarding_state = "no value was set".parse::<crate::types::NsdOnboardingState>().ok()
    }
    if builder.nsd_operational_state.is_none() {
        builder.nsd_operational_state = "no value was set".parse::<crate::types::NsdOperationalState>().ok()
    }
    if builder.nsd_usage_state.is_none() {
        builder.nsd_usage_state = "no value was set".parse::<crate::types::NsdUsageState>().ok()
    }
    if builder.metadata.is_none() {
        builder.metadata = {
            let builder = crate::types::builders::ListSolNetworkPackageMetadataBuilder::default();
            crate::serde_util::list_sol_network_package_metadata_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn list_sol_function_instance_metadata_correct_errors(
    mut builder: crate::types::builders::ListSolFunctionInstanceMetadataBuilder,
) -> crate::types::builders::ListSolFunctionInstanceMetadataBuilder {
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified.is_none() {
        builder.last_modified = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn list_sol_function_package_metadata_correct_errors(
    mut builder: crate::types::builders::ListSolFunctionPackageMetadataBuilder,
) -> crate::types::builders::ListSolFunctionPackageMetadataBuilder {
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified.is_none() {
        builder.last_modified = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn list_sol_network_instance_metadata_correct_errors(
    mut builder: crate::types::builders::ListSolNetworkInstanceMetadataBuilder,
) -> crate::types::builders::ListSolNetworkInstanceMetadataBuilder {
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified.is_none() {
        builder.last_modified = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn list_sol_network_operations_metadata_correct_errors(
    mut builder: crate::types::builders::ListSolNetworkOperationsMetadataBuilder,
) -> crate::types::builders::ListSolNetworkOperationsMetadataBuilder {
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified.is_none() {
        builder.last_modified = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn list_sol_network_package_metadata_correct_errors(
    mut builder: crate::types::builders::ListSolNetworkPackageMetadataBuilder,
) -> crate::types::builders::ListSolNetworkPackageMetadataBuilder {
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified.is_none() {
        builder.last_modified = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}
