// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetSolFunctionInstanceOutput {
    /// <p>Network function instance ID.</p>
    pub id: ::std::string::String,
    /// <p>Network function instance ARN.</p>
    pub arn: ::std::string::String,
    /// <p>Network instance ID.</p>
    pub ns_instance_id: ::std::string::String,
    /// <p>Function package ID.</p>
    pub vnf_pkg_id: ::std::string::String,
    /// <p>Function package descriptor ID.</p>
    pub vnfd_id: ::std::string::String,
    /// <p>Network function provider.</p>
    pub vnf_provider: ::std::option::Option<::std::string::String>,
    /// <p>Network function product name.</p>
    pub vnf_product_name: ::std::option::Option<::std::string::String>,
    /// <p>Function package descriptor version.</p>
    pub vnfd_version: ::std::option::Option<::std::string::String>,
    /// <p>Network function instantiation state.</p>
    pub instantiation_state: crate::types::VnfInstantiationState,
    /// <p>Information about the network function.</p>
    /// <p>A network function instance is a function in a function package .</p>
    pub instantiated_vnf_info: ::std::option::Option<crate::types::GetSolVnfInfo>,
    /// <p>The metadata of a network function instance.</p>
    /// <p>A network function instance is a function in a function package .</p>
    pub metadata: ::std::option::Option<crate::types::GetSolFunctionInstanceMetadata>,
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl GetSolFunctionInstanceOutput {
    /// <p>Network function instance ID.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>Network function instance ARN.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>Network instance ID.</p>
    pub fn ns_instance_id(&self) -> &str {
        use std::ops::Deref;
        self.ns_instance_id.deref()
    }
    /// <p>Function package ID.</p>
    pub fn vnf_pkg_id(&self) -> &str {
        use std::ops::Deref;
        self.vnf_pkg_id.deref()
    }
    /// <p>Function package descriptor ID.</p>
    pub fn vnfd_id(&self) -> &str {
        use std::ops::Deref;
        self.vnfd_id.deref()
    }
    /// <p>Network function provider.</p>
    pub fn vnf_provider(&self) -> ::std::option::Option<&str> {
        self.vnf_provider.as_deref()
    }
    /// <p>Network function product name.</p>
    pub fn vnf_product_name(&self) -> ::std::option::Option<&str> {
        self.vnf_product_name.as_deref()
    }
    /// <p>Function package descriptor version.</p>
    pub fn vnfd_version(&self) -> ::std::option::Option<&str> {
        self.vnfd_version.as_deref()
    }
    /// <p>Network function instantiation state.</p>
    pub fn instantiation_state(&self) -> &crate::types::VnfInstantiationState {
        &self.instantiation_state
    }
    /// <p>Information about the network function.</p>
    /// <p>A network function instance is a function in a function package .</p>
    pub fn instantiated_vnf_info(&self) -> ::std::option::Option<&crate::types::GetSolVnfInfo> {
        self.instantiated_vnf_info.as_ref()
    }
    /// <p>The metadata of a network function instance.</p>
    /// <p>A network function instance is a function in a function package .</p>
    pub fn metadata(&self) -> ::std::option::Option<&crate::types::GetSolFunctionInstanceMetadata> {
        self.metadata.as_ref()
    }
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::std::fmt::Debug for GetSolFunctionInstanceOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetSolFunctionInstanceOutput");
        formatter.field("id", &self.id);
        formatter.field("arn", &self.arn);
        formatter.field("ns_instance_id", &self.ns_instance_id);
        formatter.field("vnf_pkg_id", &self.vnf_pkg_id);
        formatter.field("vnfd_id", &self.vnfd_id);
        formatter.field("vnf_provider", &self.vnf_provider);
        formatter.field("vnf_product_name", &self.vnf_product_name);
        formatter.field("vnfd_version", &self.vnfd_version);
        formatter.field("instantiation_state", &self.instantiation_state);
        formatter.field("instantiated_vnf_info", &self.instantiated_vnf_info);
        formatter.field("metadata", &self.metadata);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_http::request_id::RequestId for GetSolFunctionInstanceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetSolFunctionInstanceOutput {
    /// Creates a new builder-style object to manufacture [`GetSolFunctionInstanceOutput`](crate::operation::get_sol_function_instance::GetSolFunctionInstanceOutput).
    pub fn builder() -> crate::operation::get_sol_function_instance::builders::GetSolFunctionInstanceOutputBuilder {
        crate::operation::get_sol_function_instance::builders::GetSolFunctionInstanceOutputBuilder::default()
    }
}

/// A builder for [`GetSolFunctionInstanceOutput`](crate::operation::get_sol_function_instance::GetSolFunctionInstanceOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct GetSolFunctionInstanceOutputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) ns_instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) vnf_pkg_id: ::std::option::Option<::std::string::String>,
    pub(crate) vnfd_id: ::std::option::Option<::std::string::String>,
    pub(crate) vnf_provider: ::std::option::Option<::std::string::String>,
    pub(crate) vnf_product_name: ::std::option::Option<::std::string::String>,
    pub(crate) vnfd_version: ::std::option::Option<::std::string::String>,
    pub(crate) instantiation_state: ::std::option::Option<crate::types::VnfInstantiationState>,
    pub(crate) instantiated_vnf_info: ::std::option::Option<crate::types::GetSolVnfInfo>,
    pub(crate) metadata: ::std::option::Option<crate::types::GetSolFunctionInstanceMetadata>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl GetSolFunctionInstanceOutputBuilder {
    /// <p>Network function instance ID.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Network function instance ID.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>Network function instance ID.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>Network function instance ARN.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Network function instance ARN.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>Network function instance ARN.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>Network instance ID.</p>
    /// This field is required.
    pub fn ns_instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ns_instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Network instance ID.</p>
    pub fn set_ns_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ns_instance_id = input;
        self
    }
    /// <p>Network instance ID.</p>
    pub fn get_ns_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ns_instance_id
    }
    /// <p>Function package ID.</p>
    /// This field is required.
    pub fn vnf_pkg_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vnf_pkg_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Function package ID.</p>
    pub fn set_vnf_pkg_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vnf_pkg_id = input;
        self
    }
    /// <p>Function package ID.</p>
    pub fn get_vnf_pkg_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vnf_pkg_id
    }
    /// <p>Function package descriptor ID.</p>
    /// This field is required.
    pub fn vnfd_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vnfd_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Function package descriptor ID.</p>
    pub fn set_vnfd_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vnfd_id = input;
        self
    }
    /// <p>Function package descriptor ID.</p>
    pub fn get_vnfd_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vnfd_id
    }
    /// <p>Network function provider.</p>
    pub fn vnf_provider(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vnf_provider = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Network function provider.</p>
    pub fn set_vnf_provider(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vnf_provider = input;
        self
    }
    /// <p>Network function provider.</p>
    pub fn get_vnf_provider(&self) -> &::std::option::Option<::std::string::String> {
        &self.vnf_provider
    }
    /// <p>Network function product name.</p>
    pub fn vnf_product_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vnf_product_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Network function product name.</p>
    pub fn set_vnf_product_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vnf_product_name = input;
        self
    }
    /// <p>Network function product name.</p>
    pub fn get_vnf_product_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.vnf_product_name
    }
    /// <p>Function package descriptor version.</p>
    pub fn vnfd_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vnfd_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Function package descriptor version.</p>
    pub fn set_vnfd_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vnfd_version = input;
        self
    }
    /// <p>Function package descriptor version.</p>
    pub fn get_vnfd_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.vnfd_version
    }
    /// <p>Network function instantiation state.</p>
    /// This field is required.
    pub fn instantiation_state(mut self, input: crate::types::VnfInstantiationState) -> Self {
        self.instantiation_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>Network function instantiation state.</p>
    pub fn set_instantiation_state(mut self, input: ::std::option::Option<crate::types::VnfInstantiationState>) -> Self {
        self.instantiation_state = input;
        self
    }
    /// <p>Network function instantiation state.</p>
    pub fn get_instantiation_state(&self) -> &::std::option::Option<crate::types::VnfInstantiationState> {
        &self.instantiation_state
    }
    /// <p>Information about the network function.</p>
    /// <p>A network function instance is a function in a function package .</p>
    pub fn instantiated_vnf_info(mut self, input: crate::types::GetSolVnfInfo) -> Self {
        self.instantiated_vnf_info = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the network function.</p>
    /// <p>A network function instance is a function in a function package .</p>
    pub fn set_instantiated_vnf_info(mut self, input: ::std::option::Option<crate::types::GetSolVnfInfo>) -> Self {
        self.instantiated_vnf_info = input;
        self
    }
    /// <p>Information about the network function.</p>
    /// <p>A network function instance is a function in a function package .</p>
    pub fn get_instantiated_vnf_info(&self) -> &::std::option::Option<crate::types::GetSolVnfInfo> {
        &self.instantiated_vnf_info
    }
    /// <p>The metadata of a network function instance.</p>
    /// <p>A network function instance is a function in a function package .</p>
    /// This field is required.
    pub fn metadata(mut self, input: crate::types::GetSolFunctionInstanceMetadata) -> Self {
        self.metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>The metadata of a network function instance.</p>
    /// <p>A network function instance is a function in a function package .</p>
    pub fn set_metadata(mut self, input: ::std::option::Option<crate::types::GetSolFunctionInstanceMetadata>) -> Self {
        self.metadata = input;
        self
    }
    /// <p>The metadata of a network function instance.</p>
    /// <p>A network function instance is a function in a function package .</p>
    pub fn get_metadata(&self) -> &::std::option::Option<crate::types::GetSolFunctionInstanceMetadata> {
        &self.metadata
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetSolFunctionInstanceOutput`](crate::operation::get_sol_function_instance::GetSolFunctionInstanceOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::operation::get_sol_function_instance::builders::GetSolFunctionInstanceOutputBuilder::id)
    /// - [`arn`](crate::operation::get_sol_function_instance::builders::GetSolFunctionInstanceOutputBuilder::arn)
    /// - [`ns_instance_id`](crate::operation::get_sol_function_instance::builders::GetSolFunctionInstanceOutputBuilder::ns_instance_id)
    /// - [`vnf_pkg_id`](crate::operation::get_sol_function_instance::builders::GetSolFunctionInstanceOutputBuilder::vnf_pkg_id)
    /// - [`vnfd_id`](crate::operation::get_sol_function_instance::builders::GetSolFunctionInstanceOutputBuilder::vnfd_id)
    /// - [`instantiation_state`](crate::operation::get_sol_function_instance::builders::GetSolFunctionInstanceOutputBuilder::instantiation_state)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_sol_function_instance::GetSolFunctionInstanceOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_sol_function_instance::GetSolFunctionInstanceOutput {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building GetSolFunctionInstanceOutput",
                )
            })?,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building GetSolFunctionInstanceOutput",
                )
            })?,
            ns_instance_id: self.ns_instance_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "ns_instance_id",
                    "ns_instance_id was not specified but it is required when building GetSolFunctionInstanceOutput",
                )
            })?,
            vnf_pkg_id: self.vnf_pkg_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "vnf_pkg_id",
                    "vnf_pkg_id was not specified but it is required when building GetSolFunctionInstanceOutput",
                )
            })?,
            vnfd_id: self.vnfd_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "vnfd_id",
                    "vnfd_id was not specified but it is required when building GetSolFunctionInstanceOutput",
                )
            })?,
            vnf_provider: self.vnf_provider,
            vnf_product_name: self.vnf_product_name,
            vnfd_version: self.vnfd_version,
            instantiation_state: self.instantiation_state.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "instantiation_state",
                    "instantiation_state was not specified but it is required when building GetSolFunctionInstanceOutput",
                )
            })?,
            instantiated_vnf_info: self.instantiated_vnf_info,
            metadata: self.metadata,
            tags: self.tags,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for GetSolFunctionInstanceOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetSolFunctionInstanceOutputBuilder");
        formatter.field("id", &self.id);
        formatter.field("arn", &self.arn);
        formatter.field("ns_instance_id", &self.ns_instance_id);
        formatter.field("vnf_pkg_id", &self.vnf_pkg_id);
        formatter.field("vnfd_id", &self.vnfd_id);
        formatter.field("vnf_provider", &self.vnf_provider);
        formatter.field("vnf_product_name", &self.vnf_product_name);
        formatter.field("vnfd_version", &self.vnfd_version);
        formatter.field("instantiation_state", &self.instantiation_state);
        formatter.field("instantiated_vnf_info", &self.instantiated_vnf_info);
        formatter.field("metadata", &self.metadata);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
