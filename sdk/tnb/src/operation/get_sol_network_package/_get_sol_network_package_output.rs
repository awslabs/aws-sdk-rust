// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetSolNetworkPackageOutput {
    /// <p>Network package ID.</p>
    pub id: ::std::string::String,
    /// <p>Network package ARN.</p>
    pub arn: ::std::string::String,
    /// <p>Network service descriptor onboarding state.</p>
    pub nsd_onboarding_state: crate::types::NsdOnboardingState,
    /// <p>Network service descriptor operational state.</p>
    pub nsd_operational_state: crate::types::NsdOperationalState,
    /// <p>Network service descriptor usage state.</p>
    pub nsd_usage_state: crate::types::NsdUsageState,
    /// <p>Network service descriptor ID.</p>
    pub nsd_id: ::std::string::String,
    /// <p>Network service descriptor name.</p>
    pub nsd_name: ::std::string::String,
    /// <p>Network service descriptor version.</p>
    pub nsd_version: ::std::string::String,
    /// <p>Identifies the function package for the function package descriptor referenced by the onboarded network package.</p>
    pub vnf_pkg_ids: ::std::vec::Vec<::std::string::String>,
    /// <p>Metadata associated with a network package.</p>
    /// <p>A network package is a .zip file in CSAR (Cloud Service Archive) format defines the function packages you want to deploy and the Amazon Web Services infrastructure you want to deploy them on.</p>
    pub metadata: ::std::option::Option<crate::types::GetSolNetworkPackageMetadata>,
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl GetSolNetworkPackageOutput {
    /// <p>Network package ID.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>Network package ARN.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>Network service descriptor onboarding state.</p>
    pub fn nsd_onboarding_state(&self) -> &crate::types::NsdOnboardingState {
        &self.nsd_onboarding_state
    }
    /// <p>Network service descriptor operational state.</p>
    pub fn nsd_operational_state(&self) -> &crate::types::NsdOperationalState {
        &self.nsd_operational_state
    }
    /// <p>Network service descriptor usage state.</p>
    pub fn nsd_usage_state(&self) -> &crate::types::NsdUsageState {
        &self.nsd_usage_state
    }
    /// <p>Network service descriptor ID.</p>
    pub fn nsd_id(&self) -> &str {
        use std::ops::Deref;
        self.nsd_id.deref()
    }
    /// <p>Network service descriptor name.</p>
    pub fn nsd_name(&self) -> &str {
        use std::ops::Deref;
        self.nsd_name.deref()
    }
    /// <p>Network service descriptor version.</p>
    pub fn nsd_version(&self) -> &str {
        use std::ops::Deref;
        self.nsd_version.deref()
    }
    /// <p>Identifies the function package for the function package descriptor referenced by the onboarded network package.</p>
    pub fn vnf_pkg_ids(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.vnf_pkg_ids.deref()
    }
    /// <p>Metadata associated with a network package.</p>
    /// <p>A network package is a .zip file in CSAR (Cloud Service Archive) format defines the function packages you want to deploy and the Amazon Web Services infrastructure you want to deploy them on.</p>
    pub fn metadata(&self) -> ::std::option::Option<&crate::types::GetSolNetworkPackageMetadata> {
        self.metadata.as_ref()
    }
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::std::fmt::Debug for GetSolNetworkPackageOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetSolNetworkPackageOutput");
        formatter.field("id", &self.id);
        formatter.field("arn", &self.arn);
        formatter.field("nsd_onboarding_state", &self.nsd_onboarding_state);
        formatter.field("nsd_operational_state", &self.nsd_operational_state);
        formatter.field("nsd_usage_state", &self.nsd_usage_state);
        formatter.field("nsd_id", &self.nsd_id);
        formatter.field("nsd_name", &self.nsd_name);
        formatter.field("nsd_version", &self.nsd_version);
        formatter.field("vnf_pkg_ids", &self.vnf_pkg_ids);
        formatter.field("metadata", &self.metadata);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_http::request_id::RequestId for GetSolNetworkPackageOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetSolNetworkPackageOutput {
    /// Creates a new builder-style object to manufacture [`GetSolNetworkPackageOutput`](crate::operation::get_sol_network_package::GetSolNetworkPackageOutput).
    pub fn builder() -> crate::operation::get_sol_network_package::builders::GetSolNetworkPackageOutputBuilder {
        crate::operation::get_sol_network_package::builders::GetSolNetworkPackageOutputBuilder::default()
    }
}

/// A builder for [`GetSolNetworkPackageOutput`](crate::operation::get_sol_network_package::GetSolNetworkPackageOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct GetSolNetworkPackageOutputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) nsd_onboarding_state: ::std::option::Option<crate::types::NsdOnboardingState>,
    pub(crate) nsd_operational_state: ::std::option::Option<crate::types::NsdOperationalState>,
    pub(crate) nsd_usage_state: ::std::option::Option<crate::types::NsdUsageState>,
    pub(crate) nsd_id: ::std::option::Option<::std::string::String>,
    pub(crate) nsd_name: ::std::option::Option<::std::string::String>,
    pub(crate) nsd_version: ::std::option::Option<::std::string::String>,
    pub(crate) vnf_pkg_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) metadata: ::std::option::Option<crate::types::GetSolNetworkPackageMetadata>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl GetSolNetworkPackageOutputBuilder {
    /// <p>Network package ID.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Network package ID.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>Network package ID.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>Network package ARN.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Network package ARN.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>Network package ARN.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>Network service descriptor onboarding state.</p>
    /// This field is required.
    pub fn nsd_onboarding_state(mut self, input: crate::types::NsdOnboardingState) -> Self {
        self.nsd_onboarding_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>Network service descriptor onboarding state.</p>
    pub fn set_nsd_onboarding_state(mut self, input: ::std::option::Option<crate::types::NsdOnboardingState>) -> Self {
        self.nsd_onboarding_state = input;
        self
    }
    /// <p>Network service descriptor onboarding state.</p>
    pub fn get_nsd_onboarding_state(&self) -> &::std::option::Option<crate::types::NsdOnboardingState> {
        &self.nsd_onboarding_state
    }
    /// <p>Network service descriptor operational state.</p>
    /// This field is required.
    pub fn nsd_operational_state(mut self, input: crate::types::NsdOperationalState) -> Self {
        self.nsd_operational_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>Network service descriptor operational state.</p>
    pub fn set_nsd_operational_state(mut self, input: ::std::option::Option<crate::types::NsdOperationalState>) -> Self {
        self.nsd_operational_state = input;
        self
    }
    /// <p>Network service descriptor operational state.</p>
    pub fn get_nsd_operational_state(&self) -> &::std::option::Option<crate::types::NsdOperationalState> {
        &self.nsd_operational_state
    }
    /// <p>Network service descriptor usage state.</p>
    /// This field is required.
    pub fn nsd_usage_state(mut self, input: crate::types::NsdUsageState) -> Self {
        self.nsd_usage_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>Network service descriptor usage state.</p>
    pub fn set_nsd_usage_state(mut self, input: ::std::option::Option<crate::types::NsdUsageState>) -> Self {
        self.nsd_usage_state = input;
        self
    }
    /// <p>Network service descriptor usage state.</p>
    pub fn get_nsd_usage_state(&self) -> &::std::option::Option<crate::types::NsdUsageState> {
        &self.nsd_usage_state
    }
    /// <p>Network service descriptor ID.</p>
    /// This field is required.
    pub fn nsd_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.nsd_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Network service descriptor ID.</p>
    pub fn set_nsd_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.nsd_id = input;
        self
    }
    /// <p>Network service descriptor ID.</p>
    pub fn get_nsd_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.nsd_id
    }
    /// <p>Network service descriptor name.</p>
    /// This field is required.
    pub fn nsd_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.nsd_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Network service descriptor name.</p>
    pub fn set_nsd_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.nsd_name = input;
        self
    }
    /// <p>Network service descriptor name.</p>
    pub fn get_nsd_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.nsd_name
    }
    /// <p>Network service descriptor version.</p>
    /// This field is required.
    pub fn nsd_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.nsd_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Network service descriptor version.</p>
    pub fn set_nsd_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.nsd_version = input;
        self
    }
    /// <p>Network service descriptor version.</p>
    pub fn get_nsd_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.nsd_version
    }
    /// Appends an item to `vnf_pkg_ids`.
    ///
    /// To override the contents of this collection use [`set_vnf_pkg_ids`](Self::set_vnf_pkg_ids).
    ///
    /// <p>Identifies the function package for the function package descriptor referenced by the onboarded network package.</p>
    pub fn vnf_pkg_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.vnf_pkg_ids.unwrap_or_default();
        v.push(input.into());
        self.vnf_pkg_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>Identifies the function package for the function package descriptor referenced by the onboarded network package.</p>
    pub fn set_vnf_pkg_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.vnf_pkg_ids = input;
        self
    }
    /// <p>Identifies the function package for the function package descriptor referenced by the onboarded network package.</p>
    pub fn get_vnf_pkg_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.vnf_pkg_ids
    }
    /// <p>Metadata associated with a network package.</p>
    /// <p>A network package is a .zip file in CSAR (Cloud Service Archive) format defines the function packages you want to deploy and the Amazon Web Services infrastructure you want to deploy them on.</p>
    /// This field is required.
    pub fn metadata(mut self, input: crate::types::GetSolNetworkPackageMetadata) -> Self {
        self.metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>Metadata associated with a network package.</p>
    /// <p>A network package is a .zip file in CSAR (Cloud Service Archive) format defines the function packages you want to deploy and the Amazon Web Services infrastructure you want to deploy them on.</p>
    pub fn set_metadata(mut self, input: ::std::option::Option<crate::types::GetSolNetworkPackageMetadata>) -> Self {
        self.metadata = input;
        self
    }
    /// <p>Metadata associated with a network package.</p>
    /// <p>A network package is a .zip file in CSAR (Cloud Service Archive) format defines the function packages you want to deploy and the Amazon Web Services infrastructure you want to deploy them on.</p>
    pub fn get_metadata(&self) -> &::std::option::Option<crate::types::GetSolNetworkPackageMetadata> {
        &self.metadata
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetSolNetworkPackageOutput`](crate::operation::get_sol_network_package::GetSolNetworkPackageOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::operation::get_sol_network_package::builders::GetSolNetworkPackageOutputBuilder::id)
    /// - [`arn`](crate::operation::get_sol_network_package::builders::GetSolNetworkPackageOutputBuilder::arn)
    /// - [`nsd_onboarding_state`](crate::operation::get_sol_network_package::builders::GetSolNetworkPackageOutputBuilder::nsd_onboarding_state)
    /// - [`nsd_operational_state`](crate::operation::get_sol_network_package::builders::GetSolNetworkPackageOutputBuilder::nsd_operational_state)
    /// - [`nsd_usage_state`](crate::operation::get_sol_network_package::builders::GetSolNetworkPackageOutputBuilder::nsd_usage_state)
    /// - [`nsd_id`](crate::operation::get_sol_network_package::builders::GetSolNetworkPackageOutputBuilder::nsd_id)
    /// - [`nsd_name`](crate::operation::get_sol_network_package::builders::GetSolNetworkPackageOutputBuilder::nsd_name)
    /// - [`nsd_version`](crate::operation::get_sol_network_package::builders::GetSolNetworkPackageOutputBuilder::nsd_version)
    /// - [`vnf_pkg_ids`](crate::operation::get_sol_network_package::builders::GetSolNetworkPackageOutputBuilder::vnf_pkg_ids)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_sol_network_package::GetSolNetworkPackageOutput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::get_sol_network_package::GetSolNetworkPackageOutput {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building GetSolNetworkPackageOutput",
                )
            })?,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building GetSolNetworkPackageOutput",
                )
            })?,
            nsd_onboarding_state: self.nsd_onboarding_state.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "nsd_onboarding_state",
                    "nsd_onboarding_state was not specified but it is required when building GetSolNetworkPackageOutput",
                )
            })?,
            nsd_operational_state: self.nsd_operational_state.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "nsd_operational_state",
                    "nsd_operational_state was not specified but it is required when building GetSolNetworkPackageOutput",
                )
            })?,
            nsd_usage_state: self.nsd_usage_state.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "nsd_usage_state",
                    "nsd_usage_state was not specified but it is required when building GetSolNetworkPackageOutput",
                )
            })?,
            nsd_id: self.nsd_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "nsd_id",
                    "nsd_id was not specified but it is required when building GetSolNetworkPackageOutput",
                )
            })?,
            nsd_name: self.nsd_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "nsd_name",
                    "nsd_name was not specified but it is required when building GetSolNetworkPackageOutput",
                )
            })?,
            nsd_version: self.nsd_version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "nsd_version",
                    "nsd_version was not specified but it is required when building GetSolNetworkPackageOutput",
                )
            })?,
            vnf_pkg_ids: self.vnf_pkg_ids.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "vnf_pkg_ids",
                    "vnf_pkg_ids was not specified but it is required when building GetSolNetworkPackageOutput",
                )
            })?,
            metadata: self.metadata,
            tags: self.tags,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for GetSolNetworkPackageOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetSolNetworkPackageOutputBuilder");
        formatter.field("id", &self.id);
        formatter.field("arn", &self.arn);
        formatter.field("nsd_onboarding_state", &self.nsd_onboarding_state);
        formatter.field("nsd_operational_state", &self.nsd_operational_state);
        formatter.field("nsd_usage_state", &self.nsd_usage_state);
        formatter.field("nsd_id", &self.nsd_id);
        formatter.field("nsd_name", &self.nsd_name);
        formatter.field("nsd_version", &self.nsd_version);
        formatter.field("vnf_pkg_ids", &self.vnf_pkg_ids);
        formatter.field("metadata", &self.metadata);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
