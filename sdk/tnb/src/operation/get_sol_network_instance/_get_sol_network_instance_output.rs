// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetSolNetworkInstanceOutput {
    /// <p>Network instance ID.</p>
    pub id: ::std::string::String,
    /// <p>Network instance ARN.</p>
    pub arn: ::std::string::String,
    /// <p>Network instance name.</p>
    pub ns_instance_name: ::std::string::String,
    /// <p>Network instance description.</p>
    pub ns_instance_description: ::std::string::String,
    /// <p>Network service descriptor ID.</p>
    pub nsd_id: ::std::string::String,
    /// <p>Network service descriptor info ID.</p>
    pub nsd_info_id: ::std::string::String,
    /// <p>Network instance state.</p>
    pub ns_state: ::std::option::Option<crate::types::NsState>,
    /// <p>Lifecycle management operation details on the network instance.</p>
    /// <p>Lifecycle management operations are deploy, update, or delete operations.</p>
    pub lcm_op_info: ::std::option::Option<crate::types::LcmOperationInfo>,
    /// <p>The metadata of a network instance.</p>
    /// <p>A network instance is a single network created in Amazon Web Services TNB that can be deployed and on which life-cycle operations (like terminate, update, and delete) can be performed.</p>
    pub metadata: ::std::option::Option<crate::types::GetSolNetworkInstanceMetadata>,
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl GetSolNetworkInstanceOutput {
    /// <p>Network instance ID.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>Network instance ARN.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>Network instance name.</p>
    pub fn ns_instance_name(&self) -> &str {
        use std::ops::Deref;
        self.ns_instance_name.deref()
    }
    /// <p>Network instance description.</p>
    pub fn ns_instance_description(&self) -> &str {
        use std::ops::Deref;
        self.ns_instance_description.deref()
    }
    /// <p>Network service descriptor ID.</p>
    pub fn nsd_id(&self) -> &str {
        use std::ops::Deref;
        self.nsd_id.deref()
    }
    /// <p>Network service descriptor info ID.</p>
    pub fn nsd_info_id(&self) -> &str {
        use std::ops::Deref;
        self.nsd_info_id.deref()
    }
    /// <p>Network instance state.</p>
    pub fn ns_state(&self) -> ::std::option::Option<&crate::types::NsState> {
        self.ns_state.as_ref()
    }
    /// <p>Lifecycle management operation details on the network instance.</p>
    /// <p>Lifecycle management operations are deploy, update, or delete operations.</p>
    pub fn lcm_op_info(&self) -> ::std::option::Option<&crate::types::LcmOperationInfo> {
        self.lcm_op_info.as_ref()
    }
    /// <p>The metadata of a network instance.</p>
    /// <p>A network instance is a single network created in Amazon Web Services TNB that can be deployed and on which life-cycle operations (like terminate, update, and delete) can be performed.</p>
    pub fn metadata(&self) -> ::std::option::Option<&crate::types::GetSolNetworkInstanceMetadata> {
        self.metadata.as_ref()
    }
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::std::fmt::Debug for GetSolNetworkInstanceOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetSolNetworkInstanceOutput");
        formatter.field("id", &self.id);
        formatter.field("arn", &self.arn);
        formatter.field("ns_instance_name", &self.ns_instance_name);
        formatter.field("ns_instance_description", &self.ns_instance_description);
        formatter.field("nsd_id", &self.nsd_id);
        formatter.field("nsd_info_id", &self.nsd_info_id);
        formatter.field("ns_state", &self.ns_state);
        formatter.field("lcm_op_info", &self.lcm_op_info);
        formatter.field("metadata", &self.metadata);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_http::request_id::RequestId for GetSolNetworkInstanceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetSolNetworkInstanceOutput {
    /// Creates a new builder-style object to manufacture [`GetSolNetworkInstanceOutput`](crate::operation::get_sol_network_instance::GetSolNetworkInstanceOutput).
    pub fn builder() -> crate::operation::get_sol_network_instance::builders::GetSolNetworkInstanceOutputBuilder {
        crate::operation::get_sol_network_instance::builders::GetSolNetworkInstanceOutputBuilder::default()
    }
}

/// A builder for [`GetSolNetworkInstanceOutput`](crate::operation::get_sol_network_instance::GetSolNetworkInstanceOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct GetSolNetworkInstanceOutputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) ns_instance_name: ::std::option::Option<::std::string::String>,
    pub(crate) ns_instance_description: ::std::option::Option<::std::string::String>,
    pub(crate) nsd_id: ::std::option::Option<::std::string::String>,
    pub(crate) nsd_info_id: ::std::option::Option<::std::string::String>,
    pub(crate) ns_state: ::std::option::Option<crate::types::NsState>,
    pub(crate) lcm_op_info: ::std::option::Option<crate::types::LcmOperationInfo>,
    pub(crate) metadata: ::std::option::Option<crate::types::GetSolNetworkInstanceMetadata>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl GetSolNetworkInstanceOutputBuilder {
    /// <p>Network instance ID.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Network instance ID.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>Network instance ID.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>Network instance ARN.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Network instance ARN.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>Network instance ARN.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>Network instance name.</p>
    /// This field is required.
    pub fn ns_instance_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ns_instance_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Network instance name.</p>
    pub fn set_ns_instance_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ns_instance_name = input;
        self
    }
    /// <p>Network instance name.</p>
    pub fn get_ns_instance_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.ns_instance_name
    }
    /// <p>Network instance description.</p>
    /// This field is required.
    pub fn ns_instance_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ns_instance_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Network instance description.</p>
    pub fn set_ns_instance_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ns_instance_description = input;
        self
    }
    /// <p>Network instance description.</p>
    pub fn get_ns_instance_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.ns_instance_description
    }
    /// <p>Network service descriptor ID.</p>
    /// This field is required.
    pub fn nsd_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.nsd_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Network service descriptor ID.</p>
    pub fn set_nsd_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.nsd_id = input;
        self
    }
    /// <p>Network service descriptor ID.</p>
    pub fn get_nsd_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.nsd_id
    }
    /// <p>Network service descriptor info ID.</p>
    /// This field is required.
    pub fn nsd_info_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.nsd_info_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Network service descriptor info ID.</p>
    pub fn set_nsd_info_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.nsd_info_id = input;
        self
    }
    /// <p>Network service descriptor info ID.</p>
    pub fn get_nsd_info_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.nsd_info_id
    }
    /// <p>Network instance state.</p>
    pub fn ns_state(mut self, input: crate::types::NsState) -> Self {
        self.ns_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>Network instance state.</p>
    pub fn set_ns_state(mut self, input: ::std::option::Option<crate::types::NsState>) -> Self {
        self.ns_state = input;
        self
    }
    /// <p>Network instance state.</p>
    pub fn get_ns_state(&self) -> &::std::option::Option<crate::types::NsState> {
        &self.ns_state
    }
    /// <p>Lifecycle management operation details on the network instance.</p>
    /// <p>Lifecycle management operations are deploy, update, or delete operations.</p>
    pub fn lcm_op_info(mut self, input: crate::types::LcmOperationInfo) -> Self {
        self.lcm_op_info = ::std::option::Option::Some(input);
        self
    }
    /// <p>Lifecycle management operation details on the network instance.</p>
    /// <p>Lifecycle management operations are deploy, update, or delete operations.</p>
    pub fn set_lcm_op_info(mut self, input: ::std::option::Option<crate::types::LcmOperationInfo>) -> Self {
        self.lcm_op_info = input;
        self
    }
    /// <p>Lifecycle management operation details on the network instance.</p>
    /// <p>Lifecycle management operations are deploy, update, or delete operations.</p>
    pub fn get_lcm_op_info(&self) -> &::std::option::Option<crate::types::LcmOperationInfo> {
        &self.lcm_op_info
    }
    /// <p>The metadata of a network instance.</p>
    /// <p>A network instance is a single network created in Amazon Web Services TNB that can be deployed and on which life-cycle operations (like terminate, update, and delete) can be performed.</p>
    /// This field is required.
    pub fn metadata(mut self, input: crate::types::GetSolNetworkInstanceMetadata) -> Self {
        self.metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>The metadata of a network instance.</p>
    /// <p>A network instance is a single network created in Amazon Web Services TNB that can be deployed and on which life-cycle operations (like terminate, update, and delete) can be performed.</p>
    pub fn set_metadata(mut self, input: ::std::option::Option<crate::types::GetSolNetworkInstanceMetadata>) -> Self {
        self.metadata = input;
        self
    }
    /// <p>The metadata of a network instance.</p>
    /// <p>A network instance is a single network created in Amazon Web Services TNB that can be deployed and on which life-cycle operations (like terminate, update, and delete) can be performed.</p>
    pub fn get_metadata(&self) -> &::std::option::Option<crate::types::GetSolNetworkInstanceMetadata> {
        &self.metadata
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetSolNetworkInstanceOutput`](crate::operation::get_sol_network_instance::GetSolNetworkInstanceOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::operation::get_sol_network_instance::builders::GetSolNetworkInstanceOutputBuilder::id)
    /// - [`arn`](crate::operation::get_sol_network_instance::builders::GetSolNetworkInstanceOutputBuilder::arn)
    /// - [`ns_instance_name`](crate::operation::get_sol_network_instance::builders::GetSolNetworkInstanceOutputBuilder::ns_instance_name)
    /// - [`ns_instance_description`](crate::operation::get_sol_network_instance::builders::GetSolNetworkInstanceOutputBuilder::ns_instance_description)
    /// - [`nsd_id`](crate::operation::get_sol_network_instance::builders::GetSolNetworkInstanceOutputBuilder::nsd_id)
    /// - [`nsd_info_id`](crate::operation::get_sol_network_instance::builders::GetSolNetworkInstanceOutputBuilder::nsd_info_id)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_sol_network_instance::GetSolNetworkInstanceOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_sol_network_instance::GetSolNetworkInstanceOutput {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building GetSolNetworkInstanceOutput",
                )
            })?,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building GetSolNetworkInstanceOutput",
                )
            })?,
            ns_instance_name: self.ns_instance_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "ns_instance_name",
                    "ns_instance_name was not specified but it is required when building GetSolNetworkInstanceOutput",
                )
            })?,
            ns_instance_description: self.ns_instance_description.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "ns_instance_description",
                    "ns_instance_description was not specified but it is required when building GetSolNetworkInstanceOutput",
                )
            })?,
            nsd_id: self.nsd_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "nsd_id",
                    "nsd_id was not specified but it is required when building GetSolNetworkInstanceOutput",
                )
            })?,
            nsd_info_id: self.nsd_info_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "nsd_info_id",
                    "nsd_info_id was not specified but it is required when building GetSolNetworkInstanceOutput",
                )
            })?,
            ns_state: self.ns_state,
            lcm_op_info: self.lcm_op_info,
            metadata: self.metadata,
            tags: self.tags,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for GetSolNetworkInstanceOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetSolNetworkInstanceOutputBuilder");
        formatter.field("id", &self.id);
        formatter.field("arn", &self.arn);
        formatter.field("ns_instance_name", &self.ns_instance_name);
        formatter.field("ns_instance_description", &self.ns_instance_description);
        formatter.field("nsd_id", &self.nsd_id);
        formatter.field("nsd_info_id", &self.nsd_info_id);
        formatter.field("ns_state", &self.ns_state);
        formatter.field("lcm_op_info", &self.lcm_op_info);
        formatter.field("metadata", &self.metadata);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
