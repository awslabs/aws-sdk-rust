// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateSolFunctionPackageOutput {
    /// <p>ID of the function package.</p>
    pub id: ::std::string::String,
    /// <p>Function package ARN.</p>
    pub arn: ::std::string::String,
    /// <p>Onboarding state of the function package.</p>
    pub onboarding_state: crate::types::OnboardingState,
    /// <p>Operational state of the function package.</p>
    pub operational_state: crate::types::OperationalState,
    /// <p>Usage state of the function package.</p>
    pub usage_state: crate::types::UsageState,
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl CreateSolFunctionPackageOutput {
    /// <p>ID of the function package.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>Function package ARN.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>Onboarding state of the function package.</p>
    pub fn onboarding_state(&self) -> &crate::types::OnboardingState {
        &self.onboarding_state
    }
    /// <p>Operational state of the function package.</p>
    pub fn operational_state(&self) -> &crate::types::OperationalState {
        &self.operational_state
    }
    /// <p>Usage state of the function package.</p>
    pub fn usage_state(&self) -> &crate::types::UsageState {
        &self.usage_state
    }
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::std::fmt::Debug for CreateSolFunctionPackageOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateSolFunctionPackageOutput");
        formatter.field("id", &self.id);
        formatter.field("arn", &self.arn);
        formatter.field("onboarding_state", &self.onboarding_state);
        formatter.field("operational_state", &self.operational_state);
        formatter.field("usage_state", &self.usage_state);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_http::request_id::RequestId for CreateSolFunctionPackageOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateSolFunctionPackageOutput {
    /// Creates a new builder-style object to manufacture [`CreateSolFunctionPackageOutput`](crate::operation::create_sol_function_package::CreateSolFunctionPackageOutput).
    pub fn builder() -> crate::operation::create_sol_function_package::builders::CreateSolFunctionPackageOutputBuilder {
        crate::operation::create_sol_function_package::builders::CreateSolFunctionPackageOutputBuilder::default()
    }
}

/// A builder for [`CreateSolFunctionPackageOutput`](crate::operation::create_sol_function_package::CreateSolFunctionPackageOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct CreateSolFunctionPackageOutputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) onboarding_state: ::std::option::Option<crate::types::OnboardingState>,
    pub(crate) operational_state: ::std::option::Option<crate::types::OperationalState>,
    pub(crate) usage_state: ::std::option::Option<crate::types::UsageState>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl CreateSolFunctionPackageOutputBuilder {
    /// <p>ID of the function package.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ID of the function package.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>ID of the function package.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>Function package ARN.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Function package ARN.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>Function package ARN.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>Onboarding state of the function package.</p>
    /// This field is required.
    pub fn onboarding_state(mut self, input: crate::types::OnboardingState) -> Self {
        self.onboarding_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>Onboarding state of the function package.</p>
    pub fn set_onboarding_state(mut self, input: ::std::option::Option<crate::types::OnboardingState>) -> Self {
        self.onboarding_state = input;
        self
    }
    /// <p>Onboarding state of the function package.</p>
    pub fn get_onboarding_state(&self) -> &::std::option::Option<crate::types::OnboardingState> {
        &self.onboarding_state
    }
    /// <p>Operational state of the function package.</p>
    /// This field is required.
    pub fn operational_state(mut self, input: crate::types::OperationalState) -> Self {
        self.operational_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>Operational state of the function package.</p>
    pub fn set_operational_state(mut self, input: ::std::option::Option<crate::types::OperationalState>) -> Self {
        self.operational_state = input;
        self
    }
    /// <p>Operational state of the function package.</p>
    pub fn get_operational_state(&self) -> &::std::option::Option<crate::types::OperationalState> {
        &self.operational_state
    }
    /// <p>Usage state of the function package.</p>
    /// This field is required.
    pub fn usage_state(mut self, input: crate::types::UsageState) -> Self {
        self.usage_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>Usage state of the function package.</p>
    pub fn set_usage_state(mut self, input: ::std::option::Option<crate::types::UsageState>) -> Self {
        self.usage_state = input;
        self
    }
    /// <p>Usage state of the function package.</p>
    pub fn get_usage_state(&self) -> &::std::option::Option<crate::types::UsageState> {
        &self.usage_state
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateSolFunctionPackageOutput`](crate::operation::create_sol_function_package::CreateSolFunctionPackageOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::operation::create_sol_function_package::builders::CreateSolFunctionPackageOutputBuilder::id)
    /// - [`arn`](crate::operation::create_sol_function_package::builders::CreateSolFunctionPackageOutputBuilder::arn)
    /// - [`onboarding_state`](crate::operation::create_sol_function_package::builders::CreateSolFunctionPackageOutputBuilder::onboarding_state)
    /// - [`operational_state`](crate::operation::create_sol_function_package::builders::CreateSolFunctionPackageOutputBuilder::operational_state)
    /// - [`usage_state`](crate::operation::create_sol_function_package::builders::CreateSolFunctionPackageOutputBuilder::usage_state)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_sol_function_package::CreateSolFunctionPackageOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_sol_function_package::CreateSolFunctionPackageOutput {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building CreateSolFunctionPackageOutput",
                )
            })?,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building CreateSolFunctionPackageOutput",
                )
            })?,
            onboarding_state: self.onboarding_state.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "onboarding_state",
                    "onboarding_state was not specified but it is required when building CreateSolFunctionPackageOutput",
                )
            })?,
            operational_state: self.operational_state.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "operational_state",
                    "operational_state was not specified but it is required when building CreateSolFunctionPackageOutput",
                )
            })?,
            usage_state: self.usage_state.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "usage_state",
                    "usage_state was not specified but it is required when building CreateSolFunctionPackageOutput",
                )
            })?,
            tags: self.tags,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for CreateSolFunctionPackageOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateSolFunctionPackageOutputBuilder");
        formatter.field("id", &self.id);
        formatter.field("arn", &self.arn);
        formatter.field("onboarding_state", &self.onboarding_state);
        formatter.field("operational_state", &self.operational_state);
        formatter.field("usage_state", &self.usage_state);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
