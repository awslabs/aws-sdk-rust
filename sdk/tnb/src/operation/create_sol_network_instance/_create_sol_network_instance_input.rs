// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateSolNetworkInstanceInput {
    /// <p>ID for network service descriptor.</p>
    pub nsd_info_id: ::std::option::Option<::std::string::String>,
    /// <p>Network instance name.</p>
    pub ns_name: ::std::option::Option<::std::string::String>,
    /// <p>Network instance description.</p>
    pub ns_description: ::std::option::Option<::std::string::String>,
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateSolNetworkInstanceInput {
    /// <p>ID for network service descriptor.</p>
    pub fn nsd_info_id(&self) -> ::std::option::Option<&str> {
        self.nsd_info_id.as_deref()
    }
    /// <p>Network instance name.</p>
    pub fn ns_name(&self) -> ::std::option::Option<&str> {
        self.ns_name.as_deref()
    }
    /// <p>Network instance description.</p>
    pub fn ns_description(&self) -> ::std::option::Option<&str> {
        self.ns_description.as_deref()
    }
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::std::fmt::Debug for CreateSolNetworkInstanceInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateSolNetworkInstanceInput");
        formatter.field("nsd_info_id", &self.nsd_info_id);
        formatter.field("ns_name", &self.ns_name);
        formatter.field("ns_description", &self.ns_description);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl CreateSolNetworkInstanceInput {
    /// Creates a new builder-style object to manufacture [`CreateSolNetworkInstanceInput`](crate::operation::create_sol_network_instance::CreateSolNetworkInstanceInput).
    pub fn builder() -> crate::operation::create_sol_network_instance::builders::CreateSolNetworkInstanceInputBuilder {
        crate::operation::create_sol_network_instance::builders::CreateSolNetworkInstanceInputBuilder::default()
    }
}

/// A builder for [`CreateSolNetworkInstanceInput`](crate::operation::create_sol_network_instance::CreateSolNetworkInstanceInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct CreateSolNetworkInstanceInputBuilder {
    pub(crate) nsd_info_id: ::std::option::Option<::std::string::String>,
    pub(crate) ns_name: ::std::option::Option<::std::string::String>,
    pub(crate) ns_description: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateSolNetworkInstanceInputBuilder {
    /// <p>ID for network service descriptor.</p>
    /// This field is required.
    pub fn nsd_info_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.nsd_info_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ID for network service descriptor.</p>
    pub fn set_nsd_info_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.nsd_info_id = input;
        self
    }
    /// <p>ID for network service descriptor.</p>
    pub fn get_nsd_info_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.nsd_info_id
    }
    /// <p>Network instance name.</p>
    /// This field is required.
    pub fn ns_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ns_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Network instance name.</p>
    pub fn set_ns_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ns_name = input;
        self
    }
    /// <p>Network instance name.</p>
    pub fn get_ns_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.ns_name
    }
    /// <p>Network instance description.</p>
    pub fn ns_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ns_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Network instance description.</p>
    pub fn set_ns_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ns_description = input;
        self
    }
    /// <p>Network instance description.</p>
    pub fn get_ns_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.ns_description
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateSolNetworkInstanceInput`](crate::operation::create_sol_network_instance::CreateSolNetworkInstanceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_sol_network_instance::CreateSolNetworkInstanceInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_sol_network_instance::CreateSolNetworkInstanceInput {
            nsd_info_id: self.nsd_info_id,
            ns_name: self.ns_name,
            ns_description: self.ns_description,
            tags: self.tags,
        })
    }
}
impl ::std::fmt::Debug for CreateSolNetworkInstanceInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateSolNetworkInstanceInputBuilder");
        formatter.field("nsd_info_id", &self.nsd_info_id);
        formatter.field("ns_name", &self.ns_name);
        formatter.field("ns_description", &self.ns_description);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
