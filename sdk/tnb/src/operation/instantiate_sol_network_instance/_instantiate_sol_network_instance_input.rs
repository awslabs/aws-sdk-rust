// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct InstantiateSolNetworkInstanceInput {
    /// <p>ID of the network instance.</p>
    pub ns_instance_id: ::std::option::Option<::std::string::String>,
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
    /// <p>Provides values for the configurable properties.</p>
    pub additional_params_for_ns: ::std::option::Option<::aws_smithy_types::Document>,
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. When you use this API, the tags are transferred to the network operation that is created. Use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl InstantiateSolNetworkInstanceInput {
    /// <p>ID of the network instance.</p>
    pub fn ns_instance_id(&self) -> ::std::option::Option<&str> {
        self.ns_instance_id.as_deref()
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
    /// <p>Provides values for the configurable properties.</p>
    pub fn additional_params_for_ns(&self) -> ::std::option::Option<&::aws_smithy_types::Document> {
        self.additional_params_for_ns.as_ref()
    }
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. When you use this API, the tags are transferred to the network operation that is created. Use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::std::fmt::Debug for InstantiateSolNetworkInstanceInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("InstantiateSolNetworkInstanceInput");
        formatter.field("ns_instance_id", &self.ns_instance_id);
        formatter.field("dry_run", &self.dry_run);
        formatter.field("additional_params_for_ns", &self.additional_params_for_ns);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl InstantiateSolNetworkInstanceInput {
    /// Creates a new builder-style object to manufacture [`InstantiateSolNetworkInstanceInput`](crate::operation::instantiate_sol_network_instance::InstantiateSolNetworkInstanceInput).
    pub fn builder() -> crate::operation::instantiate_sol_network_instance::builders::InstantiateSolNetworkInstanceInputBuilder {
        crate::operation::instantiate_sol_network_instance::builders::InstantiateSolNetworkInstanceInputBuilder::default()
    }
}

/// A builder for [`InstantiateSolNetworkInstanceInput`](crate::operation::instantiate_sol_network_instance::InstantiateSolNetworkInstanceInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct InstantiateSolNetworkInstanceInputBuilder {
    pub(crate) ns_instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) dry_run: ::std::option::Option<bool>,
    pub(crate) additional_params_for_ns: ::std::option::Option<::aws_smithy_types::Document>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl InstantiateSolNetworkInstanceInputBuilder {
    /// <p>ID of the network instance.</p>
    /// This field is required.
    pub fn ns_instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ns_instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ID of the network instance.</p>
    pub fn set_ns_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ns_instance_id = input;
        self
    }
    /// <p>ID of the network instance.</p>
    pub fn get_ns_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ns_instance_id
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// <p>Provides values for the configurable properties.</p>
    pub fn additional_params_for_ns(mut self, input: ::aws_smithy_types::Document) -> Self {
        self.additional_params_for_ns = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides values for the configurable properties.</p>
    pub fn set_additional_params_for_ns(mut self, input: ::std::option::Option<::aws_smithy_types::Document>) -> Self {
        self.additional_params_for_ns = input;
        self
    }
    /// <p>Provides values for the configurable properties.</p>
    pub fn get_additional_params_for_ns(&self) -> &::std::option::Option<::aws_smithy_types::Document> {
        &self.additional_params_for_ns
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. When you use this API, the tags are transferred to the network operation that is created. Use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. When you use this API, the tags are transferred to the network operation that is created. Use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. When you use this API, the tags are transferred to the network operation that is created. Use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`InstantiateSolNetworkInstanceInput`](crate::operation::instantiate_sol_network_instance::InstantiateSolNetworkInstanceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::instantiate_sol_network_instance::InstantiateSolNetworkInstanceInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::instantiate_sol_network_instance::InstantiateSolNetworkInstanceInput {
            ns_instance_id: self.ns_instance_id,
            dry_run: self.dry_run,
            additional_params_for_ns: self.additional_params_for_ns,
            tags: self.tags,
        })
    }
}
impl ::std::fmt::Debug for InstantiateSolNetworkInstanceInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("InstantiateSolNetworkInstanceInputBuilder");
        formatter.field("ns_instance_id", &self.ns_instance_id);
        formatter.field("dry_run", &self.dry_run);
        formatter.field("additional_params_for_ns", &self.additional_params_for_ns);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
