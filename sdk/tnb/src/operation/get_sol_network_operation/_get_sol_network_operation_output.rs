// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetSolNetworkOperationOutput {
    /// <p>ID of this network operation occurrence.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>Network operation ARN.</p>
    pub arn: ::std::string::String,
    /// <p>The state of the network operation.</p>
    pub operation_state: ::std::option::Option<crate::types::NsLcmOperationState>,
    /// <p>ID of the network operation instance.</p>
    pub ns_instance_id: ::std::option::Option<::std::string::String>,
    /// <p>Type of the operation represented by this occurrence.</p>
    pub lcm_operation_type: ::std::option::Option<crate::types::LcmOperationType>,
    /// <p>Error related to this specific network operation occurrence.</p>
    pub error: ::std::option::Option<crate::types::ProblemDetails>,
    /// <p>Metadata of this network operation occurrence.</p>
    pub metadata: ::std::option::Option<crate::types::GetSolNetworkOperationMetadata>,
    /// <p>All tasks associated with this operation occurrence.</p>
    pub tasks: ::std::option::Option<::std::vec::Vec<crate::types::GetSolNetworkOperationTaskDetails>>,
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl GetSolNetworkOperationOutput {
    /// <p>ID of this network operation occurrence.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>Network operation ARN.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The state of the network operation.</p>
    pub fn operation_state(&self) -> ::std::option::Option<&crate::types::NsLcmOperationState> {
        self.operation_state.as_ref()
    }
    /// <p>ID of the network operation instance.</p>
    pub fn ns_instance_id(&self) -> ::std::option::Option<&str> {
        self.ns_instance_id.as_deref()
    }
    /// <p>Type of the operation represented by this occurrence.</p>
    pub fn lcm_operation_type(&self) -> ::std::option::Option<&crate::types::LcmOperationType> {
        self.lcm_operation_type.as_ref()
    }
    /// <p>Error related to this specific network operation occurrence.</p>
    pub fn error(&self) -> ::std::option::Option<&crate::types::ProblemDetails> {
        self.error.as_ref()
    }
    /// <p>Metadata of this network operation occurrence.</p>
    pub fn metadata(&self) -> ::std::option::Option<&crate::types::GetSolNetworkOperationMetadata> {
        self.metadata.as_ref()
    }
    /// <p>All tasks associated with this operation occurrence.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tasks.is_none()`.
    pub fn tasks(&self) -> &[crate::types::GetSolNetworkOperationTaskDetails] {
        self.tasks.as_deref().unwrap_or_default()
    }
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::std::fmt::Debug for GetSolNetworkOperationOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetSolNetworkOperationOutput");
        formatter.field("id", &self.id);
        formatter.field("arn", &self.arn);
        formatter.field("operation_state", &self.operation_state);
        formatter.field("ns_instance_id", &self.ns_instance_id);
        formatter.field("lcm_operation_type", &self.lcm_operation_type);
        formatter.field("error", &self.error);
        formatter.field("metadata", &self.metadata);
        formatter.field("tasks", &self.tasks);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_http::request_id::RequestId for GetSolNetworkOperationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetSolNetworkOperationOutput {
    /// Creates a new builder-style object to manufacture [`GetSolNetworkOperationOutput`](crate::operation::get_sol_network_operation::GetSolNetworkOperationOutput).
    pub fn builder() -> crate::operation::get_sol_network_operation::builders::GetSolNetworkOperationOutputBuilder {
        crate::operation::get_sol_network_operation::builders::GetSolNetworkOperationOutputBuilder::default()
    }
}

/// A builder for [`GetSolNetworkOperationOutput`](crate::operation::get_sol_network_operation::GetSolNetworkOperationOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct GetSolNetworkOperationOutputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) operation_state: ::std::option::Option<crate::types::NsLcmOperationState>,
    pub(crate) ns_instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) lcm_operation_type: ::std::option::Option<crate::types::LcmOperationType>,
    pub(crate) error: ::std::option::Option<crate::types::ProblemDetails>,
    pub(crate) metadata: ::std::option::Option<crate::types::GetSolNetworkOperationMetadata>,
    pub(crate) tasks: ::std::option::Option<::std::vec::Vec<crate::types::GetSolNetworkOperationTaskDetails>>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl GetSolNetworkOperationOutputBuilder {
    /// <p>ID of this network operation occurrence.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ID of this network operation occurrence.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>ID of this network operation occurrence.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>Network operation ARN.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Network operation ARN.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>Network operation ARN.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The state of the network operation.</p>
    pub fn operation_state(mut self, input: crate::types::NsLcmOperationState) -> Self {
        self.operation_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the network operation.</p>
    pub fn set_operation_state(mut self, input: ::std::option::Option<crate::types::NsLcmOperationState>) -> Self {
        self.operation_state = input;
        self
    }
    /// <p>The state of the network operation.</p>
    pub fn get_operation_state(&self) -> &::std::option::Option<crate::types::NsLcmOperationState> {
        &self.operation_state
    }
    /// <p>ID of the network operation instance.</p>
    pub fn ns_instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ns_instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ID of the network operation instance.</p>
    pub fn set_ns_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ns_instance_id = input;
        self
    }
    /// <p>ID of the network operation instance.</p>
    pub fn get_ns_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ns_instance_id
    }
    /// <p>Type of the operation represented by this occurrence.</p>
    pub fn lcm_operation_type(mut self, input: crate::types::LcmOperationType) -> Self {
        self.lcm_operation_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Type of the operation represented by this occurrence.</p>
    pub fn set_lcm_operation_type(mut self, input: ::std::option::Option<crate::types::LcmOperationType>) -> Self {
        self.lcm_operation_type = input;
        self
    }
    /// <p>Type of the operation represented by this occurrence.</p>
    pub fn get_lcm_operation_type(&self) -> &::std::option::Option<crate::types::LcmOperationType> {
        &self.lcm_operation_type
    }
    /// <p>Error related to this specific network operation occurrence.</p>
    pub fn error(mut self, input: crate::types::ProblemDetails) -> Self {
        self.error = ::std::option::Option::Some(input);
        self
    }
    /// <p>Error related to this specific network operation occurrence.</p>
    pub fn set_error(mut self, input: ::std::option::Option<crate::types::ProblemDetails>) -> Self {
        self.error = input;
        self
    }
    /// <p>Error related to this specific network operation occurrence.</p>
    pub fn get_error(&self) -> &::std::option::Option<crate::types::ProblemDetails> {
        &self.error
    }
    /// <p>Metadata of this network operation occurrence.</p>
    pub fn metadata(mut self, input: crate::types::GetSolNetworkOperationMetadata) -> Self {
        self.metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>Metadata of this network operation occurrence.</p>
    pub fn set_metadata(mut self, input: ::std::option::Option<crate::types::GetSolNetworkOperationMetadata>) -> Self {
        self.metadata = input;
        self
    }
    /// <p>Metadata of this network operation occurrence.</p>
    pub fn get_metadata(&self) -> &::std::option::Option<crate::types::GetSolNetworkOperationMetadata> {
        &self.metadata
    }
    /// Appends an item to `tasks`.
    ///
    /// To override the contents of this collection use [`set_tasks`](Self::set_tasks).
    ///
    /// <p>All tasks associated with this operation occurrence.</p>
    pub fn tasks(mut self, input: crate::types::GetSolNetworkOperationTaskDetails) -> Self {
        let mut v = self.tasks.unwrap_or_default();
        v.push(input);
        self.tasks = ::std::option::Option::Some(v);
        self
    }
    /// <p>All tasks associated with this operation occurrence.</p>
    pub fn set_tasks(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GetSolNetworkOperationTaskDetails>>) -> Self {
        self.tasks = input;
        self
    }
    /// <p>All tasks associated with this operation occurrence.</p>
    pub fn get_tasks(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GetSolNetworkOperationTaskDetails>> {
        &self.tasks
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetSolNetworkOperationOutput`](crate::operation::get_sol_network_operation::GetSolNetworkOperationOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::operation::get_sol_network_operation::builders::GetSolNetworkOperationOutputBuilder::arn)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_sol_network_operation::GetSolNetworkOperationOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_sol_network_operation::GetSolNetworkOperationOutput {
            id: self.id,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building GetSolNetworkOperationOutput",
                )
            })?,
            operation_state: self.operation_state,
            ns_instance_id: self.ns_instance_id,
            lcm_operation_type: self.lcm_operation_type,
            error: self.error,
            metadata: self.metadata,
            tasks: self.tasks,
            tags: self.tags,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for GetSolNetworkOperationOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetSolNetworkOperationOutputBuilder");
        formatter.field("id", &self.id);
        formatter.field("arn", &self.arn);
        formatter.field("operation_state", &self.operation_state);
        formatter.field("ns_instance_id", &self.ns_instance_id);
        formatter.field("lcm_operation_type", &self.lcm_operation_type);
        formatter.field("error", &self.error);
        formatter.field("metadata", &self.metadata);
        formatter.field("tasks", &self.tasks);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
