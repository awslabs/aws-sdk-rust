// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Info about the specific network instance.</p>
/// <p>A network instance is a single network created in Amazon Web Services TNB that can be deployed and on which life-cycle operations (like terminate, update, and delete) can be performed.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListSolNetworkInstanceInfo {
    /// <p>ID of the network instance.</p>
    pub id: ::std::string::String,
    /// <p>Network instance ARN.</p>
    pub arn: ::std::string::String,
    /// <p>Human-readable name of the network instance.</p>
    pub ns_instance_name: ::std::string::String,
    /// <p>Human-readable description of the network instance.</p>
    pub ns_instance_description: ::std::string::String,
    /// <p>ID of the network service descriptor in the network package.</p>
    pub nsd_id: ::std::string::String,
    /// <p>ID of the network service descriptor in the network package.</p>
    pub nsd_info_id: ::std::string::String,
    /// <p>The state of the network instance.</p>
    pub ns_state: crate::types::NsState,
    /// <p>The metadata of the network instance.</p>
    pub metadata: ::std::option::Option<crate::types::ListSolNetworkInstanceMetadata>,
}
impl ListSolNetworkInstanceInfo {
    /// <p>ID of the network instance.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>Network instance ARN.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>Human-readable name of the network instance.</p>
    pub fn ns_instance_name(&self) -> &str {
        use std::ops::Deref;
        self.ns_instance_name.deref()
    }
    /// <p>Human-readable description of the network instance.</p>
    pub fn ns_instance_description(&self) -> &str {
        use std::ops::Deref;
        self.ns_instance_description.deref()
    }
    /// <p>ID of the network service descriptor in the network package.</p>
    pub fn nsd_id(&self) -> &str {
        use std::ops::Deref;
        self.nsd_id.deref()
    }
    /// <p>ID of the network service descriptor in the network package.</p>
    pub fn nsd_info_id(&self) -> &str {
        use std::ops::Deref;
        self.nsd_info_id.deref()
    }
    /// <p>The state of the network instance.</p>
    pub fn ns_state(&self) -> &crate::types::NsState {
        &self.ns_state
    }
    /// <p>The metadata of the network instance.</p>
    pub fn metadata(&self) -> ::std::option::Option<&crate::types::ListSolNetworkInstanceMetadata> {
        self.metadata.as_ref()
    }
}
impl ListSolNetworkInstanceInfo {
    /// Creates a new builder-style object to manufacture [`ListSolNetworkInstanceInfo`](crate::types::ListSolNetworkInstanceInfo).
    pub fn builder() -> crate::types::builders::ListSolNetworkInstanceInfoBuilder {
        crate::types::builders::ListSolNetworkInstanceInfoBuilder::default()
    }
}

/// A builder for [`ListSolNetworkInstanceInfo`](crate::types::ListSolNetworkInstanceInfo).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListSolNetworkInstanceInfoBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) ns_instance_name: ::std::option::Option<::std::string::String>,
    pub(crate) ns_instance_description: ::std::option::Option<::std::string::String>,
    pub(crate) nsd_id: ::std::option::Option<::std::string::String>,
    pub(crate) nsd_info_id: ::std::option::Option<::std::string::String>,
    pub(crate) ns_state: ::std::option::Option<crate::types::NsState>,
    pub(crate) metadata: ::std::option::Option<crate::types::ListSolNetworkInstanceMetadata>,
}
impl ListSolNetworkInstanceInfoBuilder {
    /// <p>ID of the network instance.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ID of the network instance.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>ID of the network instance.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>Network instance ARN.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Network instance ARN.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>Network instance ARN.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>Human-readable name of the network instance.</p>
    /// This field is required.
    pub fn ns_instance_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ns_instance_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Human-readable name of the network instance.</p>
    pub fn set_ns_instance_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ns_instance_name = input;
        self
    }
    /// <p>Human-readable name of the network instance.</p>
    pub fn get_ns_instance_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.ns_instance_name
    }
    /// <p>Human-readable description of the network instance.</p>
    /// This field is required.
    pub fn ns_instance_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ns_instance_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Human-readable description of the network instance.</p>
    pub fn set_ns_instance_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ns_instance_description = input;
        self
    }
    /// <p>Human-readable description of the network instance.</p>
    pub fn get_ns_instance_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.ns_instance_description
    }
    /// <p>ID of the network service descriptor in the network package.</p>
    /// This field is required.
    pub fn nsd_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.nsd_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ID of the network service descriptor in the network package.</p>
    pub fn set_nsd_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.nsd_id = input;
        self
    }
    /// <p>ID of the network service descriptor in the network package.</p>
    pub fn get_nsd_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.nsd_id
    }
    /// <p>ID of the network service descriptor in the network package.</p>
    /// This field is required.
    pub fn nsd_info_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.nsd_info_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ID of the network service descriptor in the network package.</p>
    pub fn set_nsd_info_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.nsd_info_id = input;
        self
    }
    /// <p>ID of the network service descriptor in the network package.</p>
    pub fn get_nsd_info_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.nsd_info_id
    }
    /// <p>The state of the network instance.</p>
    /// This field is required.
    pub fn ns_state(mut self, input: crate::types::NsState) -> Self {
        self.ns_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the network instance.</p>
    pub fn set_ns_state(mut self, input: ::std::option::Option<crate::types::NsState>) -> Self {
        self.ns_state = input;
        self
    }
    /// <p>The state of the network instance.</p>
    pub fn get_ns_state(&self) -> &::std::option::Option<crate::types::NsState> {
        &self.ns_state
    }
    /// <p>The metadata of the network instance.</p>
    /// This field is required.
    pub fn metadata(mut self, input: crate::types::ListSolNetworkInstanceMetadata) -> Self {
        self.metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>The metadata of the network instance.</p>
    pub fn set_metadata(mut self, input: ::std::option::Option<crate::types::ListSolNetworkInstanceMetadata>) -> Self {
        self.metadata = input;
        self
    }
    /// <p>The metadata of the network instance.</p>
    pub fn get_metadata(&self) -> &::std::option::Option<crate::types::ListSolNetworkInstanceMetadata> {
        &self.metadata
    }
    /// Consumes the builder and constructs a [`ListSolNetworkInstanceInfo`](crate::types::ListSolNetworkInstanceInfo).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::ListSolNetworkInstanceInfoBuilder::id)
    /// - [`arn`](crate::types::builders::ListSolNetworkInstanceInfoBuilder::arn)
    /// - [`ns_instance_name`](crate::types::builders::ListSolNetworkInstanceInfoBuilder::ns_instance_name)
    /// - [`ns_instance_description`](crate::types::builders::ListSolNetworkInstanceInfoBuilder::ns_instance_description)
    /// - [`nsd_id`](crate::types::builders::ListSolNetworkInstanceInfoBuilder::nsd_id)
    /// - [`nsd_info_id`](crate::types::builders::ListSolNetworkInstanceInfoBuilder::nsd_info_id)
    /// - [`ns_state`](crate::types::builders::ListSolNetworkInstanceInfoBuilder::ns_state)
    pub fn build(self) -> ::std::result::Result<crate::types::ListSolNetworkInstanceInfo, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ListSolNetworkInstanceInfo {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building ListSolNetworkInstanceInfo",
                )
            })?,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building ListSolNetworkInstanceInfo",
                )
            })?,
            ns_instance_name: self.ns_instance_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "ns_instance_name",
                    "ns_instance_name was not specified but it is required when building ListSolNetworkInstanceInfo",
                )
            })?,
            ns_instance_description: self.ns_instance_description.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "ns_instance_description",
                    "ns_instance_description was not specified but it is required when building ListSolNetworkInstanceInfo",
                )
            })?,
            nsd_id: self.nsd_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "nsd_id",
                    "nsd_id was not specified but it is required when building ListSolNetworkInstanceInfo",
                )
            })?,
            nsd_info_id: self.nsd_info_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "nsd_info_id",
                    "nsd_info_id was not specified but it is required when building ListSolNetworkInstanceInfo",
                )
            })?,
            ns_state: self.ns_state.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "ns_state",
                    "ns_state was not specified but it is required when building ListSolNetworkInstanceInfo",
                )
            })?,
            metadata: self.metadata,
        })
    }
}
