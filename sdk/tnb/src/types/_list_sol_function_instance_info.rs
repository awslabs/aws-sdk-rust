// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Lists information about a network function instance.</p>
/// <p>A network function instance is a function in a function package .</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListSolFunctionInstanceInfo {
    /// <p>Network function instance ID.</p>
    pub id: ::std::string::String,
    /// <p>Network function instance ARN.</p>
    pub arn: ::std::string::String,
    /// <p>Network instance ID.</p>
    pub ns_instance_id: ::std::string::String,
    /// <p>Function package ID.</p>
    pub vnf_pkg_id: ::std::string::String,
    /// <p>Function package name.</p>
    pub vnf_pkg_name: ::std::option::Option<::std::string::String>,
    /// <p>Network function instance instantiation state.</p>
    pub instantiation_state: crate::types::VnfInstantiationState,
    /// <p>Information about a network function.</p>
    /// <p>A network instance is a single network created in Amazon Web Services TNB that can be deployed and on which life-cycle operations (like terminate, update, and delete) can be performed.</p>
    pub instantiated_vnf_info: ::std::option::Option<crate::types::GetSolInstantiatedVnfInfo>,
    /// <p>Network function instance metadata.</p>
    pub metadata: ::std::option::Option<crate::types::ListSolFunctionInstanceMetadata>,
}
impl ListSolFunctionInstanceInfo {
    /// <p>Network function instance ID.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>Network function instance ARN.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>Network instance ID.</p>
    pub fn ns_instance_id(&self) -> &str {
        use std::ops::Deref;
        self.ns_instance_id.deref()
    }
    /// <p>Function package ID.</p>
    pub fn vnf_pkg_id(&self) -> &str {
        use std::ops::Deref;
        self.vnf_pkg_id.deref()
    }
    /// <p>Function package name.</p>
    pub fn vnf_pkg_name(&self) -> ::std::option::Option<&str> {
        self.vnf_pkg_name.as_deref()
    }
    /// <p>Network function instance instantiation state.</p>
    pub fn instantiation_state(&self) -> &crate::types::VnfInstantiationState {
        &self.instantiation_state
    }
    /// <p>Information about a network function.</p>
    /// <p>A network instance is a single network created in Amazon Web Services TNB that can be deployed and on which life-cycle operations (like terminate, update, and delete) can be performed.</p>
    pub fn instantiated_vnf_info(&self) -> ::std::option::Option<&crate::types::GetSolInstantiatedVnfInfo> {
        self.instantiated_vnf_info.as_ref()
    }
    /// <p>Network function instance metadata.</p>
    pub fn metadata(&self) -> ::std::option::Option<&crate::types::ListSolFunctionInstanceMetadata> {
        self.metadata.as_ref()
    }
}
impl ListSolFunctionInstanceInfo {
    /// Creates a new builder-style object to manufacture [`ListSolFunctionInstanceInfo`](crate::types::ListSolFunctionInstanceInfo).
    pub fn builder() -> crate::types::builders::ListSolFunctionInstanceInfoBuilder {
        crate::types::builders::ListSolFunctionInstanceInfoBuilder::default()
    }
}

/// A builder for [`ListSolFunctionInstanceInfo`](crate::types::ListSolFunctionInstanceInfo).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListSolFunctionInstanceInfoBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) ns_instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) vnf_pkg_id: ::std::option::Option<::std::string::String>,
    pub(crate) vnf_pkg_name: ::std::option::Option<::std::string::String>,
    pub(crate) instantiation_state: ::std::option::Option<crate::types::VnfInstantiationState>,
    pub(crate) instantiated_vnf_info: ::std::option::Option<crate::types::GetSolInstantiatedVnfInfo>,
    pub(crate) metadata: ::std::option::Option<crate::types::ListSolFunctionInstanceMetadata>,
}
impl ListSolFunctionInstanceInfoBuilder {
    /// <p>Network function instance ID.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Network function instance ID.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>Network function instance ID.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>Network function instance ARN.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Network function instance ARN.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>Network function instance ARN.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>Network instance ID.</p>
    /// This field is required.
    pub fn ns_instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ns_instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Network instance ID.</p>
    pub fn set_ns_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ns_instance_id = input;
        self
    }
    /// <p>Network instance ID.</p>
    pub fn get_ns_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ns_instance_id
    }
    /// <p>Function package ID.</p>
    /// This field is required.
    pub fn vnf_pkg_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vnf_pkg_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Function package ID.</p>
    pub fn set_vnf_pkg_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vnf_pkg_id = input;
        self
    }
    /// <p>Function package ID.</p>
    pub fn get_vnf_pkg_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vnf_pkg_id
    }
    /// <p>Function package name.</p>
    pub fn vnf_pkg_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vnf_pkg_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Function package name.</p>
    pub fn set_vnf_pkg_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vnf_pkg_name = input;
        self
    }
    /// <p>Function package name.</p>
    pub fn get_vnf_pkg_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.vnf_pkg_name
    }
    /// <p>Network function instance instantiation state.</p>
    /// This field is required.
    pub fn instantiation_state(mut self, input: crate::types::VnfInstantiationState) -> Self {
        self.instantiation_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>Network function instance instantiation state.</p>
    pub fn set_instantiation_state(mut self, input: ::std::option::Option<crate::types::VnfInstantiationState>) -> Self {
        self.instantiation_state = input;
        self
    }
    /// <p>Network function instance instantiation state.</p>
    pub fn get_instantiation_state(&self) -> &::std::option::Option<crate::types::VnfInstantiationState> {
        &self.instantiation_state
    }
    /// <p>Information about a network function.</p>
    /// <p>A network instance is a single network created in Amazon Web Services TNB that can be deployed and on which life-cycle operations (like terminate, update, and delete) can be performed.</p>
    pub fn instantiated_vnf_info(mut self, input: crate::types::GetSolInstantiatedVnfInfo) -> Self {
        self.instantiated_vnf_info = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about a network function.</p>
    /// <p>A network instance is a single network created in Amazon Web Services TNB that can be deployed and on which life-cycle operations (like terminate, update, and delete) can be performed.</p>
    pub fn set_instantiated_vnf_info(mut self, input: ::std::option::Option<crate::types::GetSolInstantiatedVnfInfo>) -> Self {
        self.instantiated_vnf_info = input;
        self
    }
    /// <p>Information about a network function.</p>
    /// <p>A network instance is a single network created in Amazon Web Services TNB that can be deployed and on which life-cycle operations (like terminate, update, and delete) can be performed.</p>
    pub fn get_instantiated_vnf_info(&self) -> &::std::option::Option<crate::types::GetSolInstantiatedVnfInfo> {
        &self.instantiated_vnf_info
    }
    /// <p>Network function instance metadata.</p>
    /// This field is required.
    pub fn metadata(mut self, input: crate::types::ListSolFunctionInstanceMetadata) -> Self {
        self.metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>Network function instance metadata.</p>
    pub fn set_metadata(mut self, input: ::std::option::Option<crate::types::ListSolFunctionInstanceMetadata>) -> Self {
        self.metadata = input;
        self
    }
    /// <p>Network function instance metadata.</p>
    pub fn get_metadata(&self) -> &::std::option::Option<crate::types::ListSolFunctionInstanceMetadata> {
        &self.metadata
    }
    /// Consumes the builder and constructs a [`ListSolFunctionInstanceInfo`](crate::types::ListSolFunctionInstanceInfo).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::ListSolFunctionInstanceInfoBuilder::id)
    /// - [`arn`](crate::types::builders::ListSolFunctionInstanceInfoBuilder::arn)
    /// - [`ns_instance_id`](crate::types::builders::ListSolFunctionInstanceInfoBuilder::ns_instance_id)
    /// - [`vnf_pkg_id`](crate::types::builders::ListSolFunctionInstanceInfoBuilder::vnf_pkg_id)
    /// - [`instantiation_state`](crate::types::builders::ListSolFunctionInstanceInfoBuilder::instantiation_state)
    pub fn build(self) -> ::std::result::Result<crate::types::ListSolFunctionInstanceInfo, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ListSolFunctionInstanceInfo {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building ListSolFunctionInstanceInfo",
                )
            })?,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building ListSolFunctionInstanceInfo",
                )
            })?,
            ns_instance_id: self.ns_instance_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "ns_instance_id",
                    "ns_instance_id was not specified but it is required when building ListSolFunctionInstanceInfo",
                )
            })?,
            vnf_pkg_id: self.vnf_pkg_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "vnf_pkg_id",
                    "vnf_pkg_id was not specified but it is required when building ListSolFunctionInstanceInfo",
                )
            })?,
            vnf_pkg_name: self.vnf_pkg_name,
            instantiation_state: self.instantiation_state.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "instantiation_state",
                    "instantiation_state was not specified but it is required when building ListSolFunctionInstanceInfo",
                )
            })?,
            instantiated_vnf_info: self.instantiated_vnf_info,
            metadata: self.metadata,
        })
    }
}
