// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details related to problems with AWS TNB resources.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProblemDetails {
    /// <p>A human-readable explanation specific to this occurrence of the problem.</p>
    pub detail: ::std::string::String,
    /// <p>A human-readable title of the problem type.</p>
    pub title: ::std::option::Option<::std::string::String>,
}
impl ProblemDetails {
    /// <p>A human-readable explanation specific to this occurrence of the problem.</p>
    pub fn detail(&self) -> &str {
        use std::ops::Deref;
        self.detail.deref()
    }
    /// <p>A human-readable title of the problem type.</p>
    pub fn title(&self) -> ::std::option::Option<&str> {
        self.title.as_deref()
    }
}
impl ProblemDetails {
    /// Creates a new builder-style object to manufacture [`ProblemDetails`](crate::types::ProblemDetails).
    pub fn builder() -> crate::types::builders::ProblemDetailsBuilder {
        crate::types::builders::ProblemDetailsBuilder::default()
    }
}

/// A builder for [`ProblemDetails`](crate::types::ProblemDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ProblemDetailsBuilder {
    pub(crate) detail: ::std::option::Option<::std::string::String>,
    pub(crate) title: ::std::option::Option<::std::string::String>,
}
impl ProblemDetailsBuilder {
    /// <p>A human-readable explanation specific to this occurrence of the problem.</p>
    /// This field is required.
    pub fn detail(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.detail = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A human-readable explanation specific to this occurrence of the problem.</p>
    pub fn set_detail(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.detail = input;
        self
    }
    /// <p>A human-readable explanation specific to this occurrence of the problem.</p>
    pub fn get_detail(&self) -> &::std::option::Option<::std::string::String> {
        &self.detail
    }
    /// <p>A human-readable title of the problem type.</p>
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A human-readable title of the problem type.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>A human-readable title of the problem type.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// Consumes the builder and constructs a [`ProblemDetails`](crate::types::ProblemDetails).
    /// This method will fail if any of the following fields are not set:
    /// - [`detail`](crate::types::builders::ProblemDetailsBuilder::detail)
    pub fn build(self) -> ::std::result::Result<crate::types::ProblemDetails, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ProblemDetails {
            detail: self.detail.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "detail",
                    "detail was not specified but it is required when building ProblemDetails",
                )
            })?,
            title: self.title,
        })
    }
}
