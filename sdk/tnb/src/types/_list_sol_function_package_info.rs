// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a function package.</p>
/// <p>A function package is a .zip file in CSAR (Cloud Service Archive) format that contains a network function (an ETSI standard telecommunication application) and function package descriptor that uses the TOSCA standard to describe how the network functions should run on your network.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListSolFunctionPackageInfo {
    /// <p>ID of the function package.</p>
    pub id: ::std::string::String,
    /// <p>Function package ARN.</p>
    pub arn: ::std::string::String,
    /// <p>Onboarding state of the function package.</p>
    pub onboarding_state: crate::types::OnboardingState,
    /// <p>Operational state of the function package.</p>
    pub operational_state: crate::types::OperationalState,
    /// <p>Usage state of the function package.</p>
    pub usage_state: crate::types::UsageState,
    /// <p>Identifies the function package and the function package descriptor.</p>
    pub vnfd_id: ::std::option::Option<::std::string::String>,
    /// <p>Provider of the function package and the function package descriptor.</p>
    pub vnf_provider: ::std::option::Option<::std::string::String>,
    /// <p>The product name for the network function.</p>
    pub vnf_product_name: ::std::option::Option<::std::string::String>,
    /// <p>Identifies the version of the function package descriptor.</p>
    pub vnfd_version: ::std::option::Option<::std::string::String>,
    /// <p>The metadata of the function package.</p>
    pub metadata: ::std::option::Option<crate::types::ListSolFunctionPackageMetadata>,
}
impl ListSolFunctionPackageInfo {
    /// <p>ID of the function package.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>Function package ARN.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>Onboarding state of the function package.</p>
    pub fn onboarding_state(&self) -> &crate::types::OnboardingState {
        &self.onboarding_state
    }
    /// <p>Operational state of the function package.</p>
    pub fn operational_state(&self) -> &crate::types::OperationalState {
        &self.operational_state
    }
    /// <p>Usage state of the function package.</p>
    pub fn usage_state(&self) -> &crate::types::UsageState {
        &self.usage_state
    }
    /// <p>Identifies the function package and the function package descriptor.</p>
    pub fn vnfd_id(&self) -> ::std::option::Option<&str> {
        self.vnfd_id.as_deref()
    }
    /// <p>Provider of the function package and the function package descriptor.</p>
    pub fn vnf_provider(&self) -> ::std::option::Option<&str> {
        self.vnf_provider.as_deref()
    }
    /// <p>The product name for the network function.</p>
    pub fn vnf_product_name(&self) -> ::std::option::Option<&str> {
        self.vnf_product_name.as_deref()
    }
    /// <p>Identifies the version of the function package descriptor.</p>
    pub fn vnfd_version(&self) -> ::std::option::Option<&str> {
        self.vnfd_version.as_deref()
    }
    /// <p>The metadata of the function package.</p>
    pub fn metadata(&self) -> ::std::option::Option<&crate::types::ListSolFunctionPackageMetadata> {
        self.metadata.as_ref()
    }
}
impl ListSolFunctionPackageInfo {
    /// Creates a new builder-style object to manufacture [`ListSolFunctionPackageInfo`](crate::types::ListSolFunctionPackageInfo).
    pub fn builder() -> crate::types::builders::ListSolFunctionPackageInfoBuilder {
        crate::types::builders::ListSolFunctionPackageInfoBuilder::default()
    }
}

/// A builder for [`ListSolFunctionPackageInfo`](crate::types::ListSolFunctionPackageInfo).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListSolFunctionPackageInfoBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) onboarding_state: ::std::option::Option<crate::types::OnboardingState>,
    pub(crate) operational_state: ::std::option::Option<crate::types::OperationalState>,
    pub(crate) usage_state: ::std::option::Option<crate::types::UsageState>,
    pub(crate) vnfd_id: ::std::option::Option<::std::string::String>,
    pub(crate) vnf_provider: ::std::option::Option<::std::string::String>,
    pub(crate) vnf_product_name: ::std::option::Option<::std::string::String>,
    pub(crate) vnfd_version: ::std::option::Option<::std::string::String>,
    pub(crate) metadata: ::std::option::Option<crate::types::ListSolFunctionPackageMetadata>,
}
impl ListSolFunctionPackageInfoBuilder {
    /// <p>ID of the function package.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ID of the function package.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>ID of the function package.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>Function package ARN.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Function package ARN.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>Function package ARN.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>Onboarding state of the function package.</p>
    /// This field is required.
    pub fn onboarding_state(mut self, input: crate::types::OnboardingState) -> Self {
        self.onboarding_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>Onboarding state of the function package.</p>
    pub fn set_onboarding_state(mut self, input: ::std::option::Option<crate::types::OnboardingState>) -> Self {
        self.onboarding_state = input;
        self
    }
    /// <p>Onboarding state of the function package.</p>
    pub fn get_onboarding_state(&self) -> &::std::option::Option<crate::types::OnboardingState> {
        &self.onboarding_state
    }
    /// <p>Operational state of the function package.</p>
    /// This field is required.
    pub fn operational_state(mut self, input: crate::types::OperationalState) -> Self {
        self.operational_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>Operational state of the function package.</p>
    pub fn set_operational_state(mut self, input: ::std::option::Option<crate::types::OperationalState>) -> Self {
        self.operational_state = input;
        self
    }
    /// <p>Operational state of the function package.</p>
    pub fn get_operational_state(&self) -> &::std::option::Option<crate::types::OperationalState> {
        &self.operational_state
    }
    /// <p>Usage state of the function package.</p>
    /// This field is required.
    pub fn usage_state(mut self, input: crate::types::UsageState) -> Self {
        self.usage_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>Usage state of the function package.</p>
    pub fn set_usage_state(mut self, input: ::std::option::Option<crate::types::UsageState>) -> Self {
        self.usage_state = input;
        self
    }
    /// <p>Usage state of the function package.</p>
    pub fn get_usage_state(&self) -> &::std::option::Option<crate::types::UsageState> {
        &self.usage_state
    }
    /// <p>Identifies the function package and the function package descriptor.</p>
    pub fn vnfd_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vnfd_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Identifies the function package and the function package descriptor.</p>
    pub fn set_vnfd_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vnfd_id = input;
        self
    }
    /// <p>Identifies the function package and the function package descriptor.</p>
    pub fn get_vnfd_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vnfd_id
    }
    /// <p>Provider of the function package and the function package descriptor.</p>
    pub fn vnf_provider(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vnf_provider = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Provider of the function package and the function package descriptor.</p>
    pub fn set_vnf_provider(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vnf_provider = input;
        self
    }
    /// <p>Provider of the function package and the function package descriptor.</p>
    pub fn get_vnf_provider(&self) -> &::std::option::Option<::std::string::String> {
        &self.vnf_provider
    }
    /// <p>The product name for the network function.</p>
    pub fn vnf_product_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vnf_product_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The product name for the network function.</p>
    pub fn set_vnf_product_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vnf_product_name = input;
        self
    }
    /// <p>The product name for the network function.</p>
    pub fn get_vnf_product_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.vnf_product_name
    }
    /// <p>Identifies the version of the function package descriptor.</p>
    pub fn vnfd_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vnfd_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Identifies the version of the function package descriptor.</p>
    pub fn set_vnfd_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vnfd_version = input;
        self
    }
    /// <p>Identifies the version of the function package descriptor.</p>
    pub fn get_vnfd_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.vnfd_version
    }
    /// <p>The metadata of the function package.</p>
    pub fn metadata(mut self, input: crate::types::ListSolFunctionPackageMetadata) -> Self {
        self.metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>The metadata of the function package.</p>
    pub fn set_metadata(mut self, input: ::std::option::Option<crate::types::ListSolFunctionPackageMetadata>) -> Self {
        self.metadata = input;
        self
    }
    /// <p>The metadata of the function package.</p>
    pub fn get_metadata(&self) -> &::std::option::Option<crate::types::ListSolFunctionPackageMetadata> {
        &self.metadata
    }
    /// Consumes the builder and constructs a [`ListSolFunctionPackageInfo`](crate::types::ListSolFunctionPackageInfo).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::ListSolFunctionPackageInfoBuilder::id)
    /// - [`arn`](crate::types::builders::ListSolFunctionPackageInfoBuilder::arn)
    /// - [`onboarding_state`](crate::types::builders::ListSolFunctionPackageInfoBuilder::onboarding_state)
    /// - [`operational_state`](crate::types::builders::ListSolFunctionPackageInfoBuilder::operational_state)
    /// - [`usage_state`](crate::types::builders::ListSolFunctionPackageInfoBuilder::usage_state)
    pub fn build(self) -> ::std::result::Result<crate::types::ListSolFunctionPackageInfo, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ListSolFunctionPackageInfo {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building ListSolFunctionPackageInfo",
                )
            })?,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building ListSolFunctionPackageInfo",
                )
            })?,
            onboarding_state: self.onboarding_state.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "onboarding_state",
                    "onboarding_state was not specified but it is required when building ListSolFunctionPackageInfo",
                )
            })?,
            operational_state: self.operational_state.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "operational_state",
                    "operational_state was not specified but it is required when building ListSolFunctionPackageInfo",
                )
            })?,
            usage_state: self.usage_state.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "usage_state",
                    "usage_state was not specified but it is required when building ListSolFunctionPackageInfo",
                )
            })?,
            vnfd_id: self.vnfd_id,
            vnf_provider: self.vnf_provider,
            vnf_product_name: self.vnf_product_name,
            vnfd_version: self.vnfd_version,
            metadata: self.metadata,
        })
    }
}
