// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the network function.</p>
/// <p>A network function instance is a function in a function package .</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetSolVnfInfo {
    /// <p>State of the network function instance.</p>
    pub vnf_state: ::std::option::Option<crate::types::VnfOperationalState>,
    /// <p>Compute info used by the network function instance.</p>
    pub vnfc_resource_info: ::std::option::Option<::std::vec::Vec<crate::types::GetSolVnfcResourceInfo>>,
}
impl GetSolVnfInfo {
    /// <p>State of the network function instance.</p>
    pub fn vnf_state(&self) -> ::std::option::Option<&crate::types::VnfOperationalState> {
        self.vnf_state.as_ref()
    }
    /// <p>Compute info used by the network function instance.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.vnfc_resource_info.is_none()`.
    pub fn vnfc_resource_info(&self) -> &[crate::types::GetSolVnfcResourceInfo] {
        self.vnfc_resource_info.as_deref().unwrap_or_default()
    }
}
impl GetSolVnfInfo {
    /// Creates a new builder-style object to manufacture [`GetSolVnfInfo`](crate::types::GetSolVnfInfo).
    pub fn builder() -> crate::types::builders::GetSolVnfInfoBuilder {
        crate::types::builders::GetSolVnfInfoBuilder::default()
    }
}

/// A builder for [`GetSolVnfInfo`](crate::types::GetSolVnfInfo).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetSolVnfInfoBuilder {
    pub(crate) vnf_state: ::std::option::Option<crate::types::VnfOperationalState>,
    pub(crate) vnfc_resource_info: ::std::option::Option<::std::vec::Vec<crate::types::GetSolVnfcResourceInfo>>,
}
impl GetSolVnfInfoBuilder {
    /// <p>State of the network function instance.</p>
    pub fn vnf_state(mut self, input: crate::types::VnfOperationalState) -> Self {
        self.vnf_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>State of the network function instance.</p>
    pub fn set_vnf_state(mut self, input: ::std::option::Option<crate::types::VnfOperationalState>) -> Self {
        self.vnf_state = input;
        self
    }
    /// <p>State of the network function instance.</p>
    pub fn get_vnf_state(&self) -> &::std::option::Option<crate::types::VnfOperationalState> {
        &self.vnf_state
    }
    /// Appends an item to `vnfc_resource_info`.
    ///
    /// To override the contents of this collection use [`set_vnfc_resource_info`](Self::set_vnfc_resource_info).
    ///
    /// <p>Compute info used by the network function instance.</p>
    pub fn vnfc_resource_info(mut self, input: crate::types::GetSolVnfcResourceInfo) -> Self {
        let mut v = self.vnfc_resource_info.unwrap_or_default();
        v.push(input);
        self.vnfc_resource_info = ::std::option::Option::Some(v);
        self
    }
    /// <p>Compute info used by the network function instance.</p>
    pub fn set_vnfc_resource_info(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GetSolVnfcResourceInfo>>) -> Self {
        self.vnfc_resource_info = input;
        self
    }
    /// <p>Compute info used by the network function instance.</p>
    pub fn get_vnfc_resource_info(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GetSolVnfcResourceInfo>> {
        &self.vnfc_resource_info
    }
    /// Consumes the builder and constructs a [`GetSolVnfInfo`](crate::types::GetSolVnfInfo).
    pub fn build(self) -> crate::types::GetSolVnfInfo {
        crate::types::GetSolVnfInfo {
            vnf_state: self.vnf_state,
            vnfc_resource_info: self.vnfc_resource_info,
        }
    }
}
