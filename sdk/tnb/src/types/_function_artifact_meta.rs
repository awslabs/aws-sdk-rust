// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Metadata for function package artifacts.</p>
/// <p>Artifacts are the contents of the package descriptor file and the state of the package.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FunctionArtifactMeta {
    /// <p>Lists of function package overrides.</p>
    pub overrides: ::std::option::Option<::std::vec::Vec<crate::types::ToscaOverride>>,
}
impl FunctionArtifactMeta {
    /// <p>Lists of function package overrides.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.overrides.is_none()`.
    pub fn overrides(&self) -> &[crate::types::ToscaOverride] {
        self.overrides.as_deref().unwrap_or_default()
    }
}
impl FunctionArtifactMeta {
    /// Creates a new builder-style object to manufacture [`FunctionArtifactMeta`](crate::types::FunctionArtifactMeta).
    pub fn builder() -> crate::types::builders::FunctionArtifactMetaBuilder {
        crate::types::builders::FunctionArtifactMetaBuilder::default()
    }
}

/// A builder for [`FunctionArtifactMeta`](crate::types::FunctionArtifactMeta).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FunctionArtifactMetaBuilder {
    pub(crate) overrides: ::std::option::Option<::std::vec::Vec<crate::types::ToscaOverride>>,
}
impl FunctionArtifactMetaBuilder {
    /// Appends an item to `overrides`.
    ///
    /// To override the contents of this collection use [`set_overrides`](Self::set_overrides).
    ///
    /// <p>Lists of function package overrides.</p>
    pub fn overrides(mut self, input: crate::types::ToscaOverride) -> Self {
        let mut v = self.overrides.unwrap_or_default();
        v.push(input);
        self.overrides = ::std::option::Option::Some(v);
        self
    }
    /// <p>Lists of function package overrides.</p>
    pub fn set_overrides(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ToscaOverride>>) -> Self {
        self.overrides = input;
        self
    }
    /// <p>Lists of function package overrides.</p>
    pub fn get_overrides(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ToscaOverride>> {
        &self.overrides
    }
    /// Consumes the builder and constructs a [`FunctionArtifactMeta`](crate::types::FunctionArtifactMeta).
    pub fn build(self) -> crate::types::FunctionArtifactMeta {
        crate::types::FunctionArtifactMeta { overrides: self.overrides }
    }
}
