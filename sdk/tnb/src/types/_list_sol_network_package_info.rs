// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details of a network package.</p>
/// <p>A network package is a .zip file in CSAR (Cloud Service Archive) format defines the function packages you want to deploy and the Amazon Web Services infrastructure you want to deploy them on.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListSolNetworkPackageInfo {
    /// <p>ID of the individual network package.</p>
    pub id: ::std::string::String,
    /// <p>Network package ARN.</p>
    pub arn: ::std::string::String,
    /// <p>Onboarding state of the network service descriptor in the network package.</p>
    pub nsd_onboarding_state: crate::types::NsdOnboardingState,
    /// <p>Operational state of the network service descriptor in the network package.</p>
    pub nsd_operational_state: crate::types::NsdOperationalState,
    /// <p>Usage state of the network service descriptor in the network package.</p>
    pub nsd_usage_state: crate::types::NsdUsageState,
    /// <p>ID of the network service descriptor on which the network package is based.</p>
    pub nsd_id: ::std::option::Option<::std::string::String>,
    /// <p>Name of the onboarded network service descriptor in the network package.</p>
    pub nsd_name: ::std::option::Option<::std::string::String>,
    /// <p>Version of the onboarded network service descriptor in the network package.</p>
    pub nsd_version: ::std::option::Option<::std::string::String>,
    /// <p>Designer of the onboarded network service descriptor in the network package.</p>
    pub nsd_designer: ::std::option::Option<::std::string::String>,
    /// <p>Identifies a network service descriptor in a version independent manner.</p>
    pub nsd_invariant_id: ::std::option::Option<::std::string::String>,
    /// <p>Identifies the function package for the function package descriptor referenced by the onboarded network package.</p>
    pub vnf_pkg_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The metadata of the network package.</p>
    pub metadata: ::std::option::Option<crate::types::ListSolNetworkPackageMetadata>,
}
impl ListSolNetworkPackageInfo {
    /// <p>ID of the individual network package.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>Network package ARN.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>Onboarding state of the network service descriptor in the network package.</p>
    pub fn nsd_onboarding_state(&self) -> &crate::types::NsdOnboardingState {
        &self.nsd_onboarding_state
    }
    /// <p>Operational state of the network service descriptor in the network package.</p>
    pub fn nsd_operational_state(&self) -> &crate::types::NsdOperationalState {
        &self.nsd_operational_state
    }
    /// <p>Usage state of the network service descriptor in the network package.</p>
    pub fn nsd_usage_state(&self) -> &crate::types::NsdUsageState {
        &self.nsd_usage_state
    }
    /// <p>ID of the network service descriptor on which the network package is based.</p>
    pub fn nsd_id(&self) -> ::std::option::Option<&str> {
        self.nsd_id.as_deref()
    }
    /// <p>Name of the onboarded network service descriptor in the network package.</p>
    pub fn nsd_name(&self) -> ::std::option::Option<&str> {
        self.nsd_name.as_deref()
    }
    /// <p>Version of the onboarded network service descriptor in the network package.</p>
    pub fn nsd_version(&self) -> ::std::option::Option<&str> {
        self.nsd_version.as_deref()
    }
    /// <p>Designer of the onboarded network service descriptor in the network package.</p>
    pub fn nsd_designer(&self) -> ::std::option::Option<&str> {
        self.nsd_designer.as_deref()
    }
    /// <p>Identifies a network service descriptor in a version independent manner.</p>
    pub fn nsd_invariant_id(&self) -> ::std::option::Option<&str> {
        self.nsd_invariant_id.as_deref()
    }
    /// <p>Identifies the function package for the function package descriptor referenced by the onboarded network package.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.vnf_pkg_ids.is_none()`.
    pub fn vnf_pkg_ids(&self) -> &[::std::string::String] {
        self.vnf_pkg_ids.as_deref().unwrap_or_default()
    }
    /// <p>The metadata of the network package.</p>
    pub fn metadata(&self) -> ::std::option::Option<&crate::types::ListSolNetworkPackageMetadata> {
        self.metadata.as_ref()
    }
}
impl ListSolNetworkPackageInfo {
    /// Creates a new builder-style object to manufacture [`ListSolNetworkPackageInfo`](crate::types::ListSolNetworkPackageInfo).
    pub fn builder() -> crate::types::builders::ListSolNetworkPackageInfoBuilder {
        crate::types::builders::ListSolNetworkPackageInfoBuilder::default()
    }
}

/// A builder for [`ListSolNetworkPackageInfo`](crate::types::ListSolNetworkPackageInfo).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListSolNetworkPackageInfoBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) nsd_onboarding_state: ::std::option::Option<crate::types::NsdOnboardingState>,
    pub(crate) nsd_operational_state: ::std::option::Option<crate::types::NsdOperationalState>,
    pub(crate) nsd_usage_state: ::std::option::Option<crate::types::NsdUsageState>,
    pub(crate) nsd_id: ::std::option::Option<::std::string::String>,
    pub(crate) nsd_name: ::std::option::Option<::std::string::String>,
    pub(crate) nsd_version: ::std::option::Option<::std::string::String>,
    pub(crate) nsd_designer: ::std::option::Option<::std::string::String>,
    pub(crate) nsd_invariant_id: ::std::option::Option<::std::string::String>,
    pub(crate) vnf_pkg_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) metadata: ::std::option::Option<crate::types::ListSolNetworkPackageMetadata>,
}
impl ListSolNetworkPackageInfoBuilder {
    /// <p>ID of the individual network package.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ID of the individual network package.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>ID of the individual network package.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>Network package ARN.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Network package ARN.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>Network package ARN.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>Onboarding state of the network service descriptor in the network package.</p>
    /// This field is required.
    pub fn nsd_onboarding_state(mut self, input: crate::types::NsdOnboardingState) -> Self {
        self.nsd_onboarding_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>Onboarding state of the network service descriptor in the network package.</p>
    pub fn set_nsd_onboarding_state(mut self, input: ::std::option::Option<crate::types::NsdOnboardingState>) -> Self {
        self.nsd_onboarding_state = input;
        self
    }
    /// <p>Onboarding state of the network service descriptor in the network package.</p>
    pub fn get_nsd_onboarding_state(&self) -> &::std::option::Option<crate::types::NsdOnboardingState> {
        &self.nsd_onboarding_state
    }
    /// <p>Operational state of the network service descriptor in the network package.</p>
    /// This field is required.
    pub fn nsd_operational_state(mut self, input: crate::types::NsdOperationalState) -> Self {
        self.nsd_operational_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>Operational state of the network service descriptor in the network package.</p>
    pub fn set_nsd_operational_state(mut self, input: ::std::option::Option<crate::types::NsdOperationalState>) -> Self {
        self.nsd_operational_state = input;
        self
    }
    /// <p>Operational state of the network service descriptor in the network package.</p>
    pub fn get_nsd_operational_state(&self) -> &::std::option::Option<crate::types::NsdOperationalState> {
        &self.nsd_operational_state
    }
    /// <p>Usage state of the network service descriptor in the network package.</p>
    /// This field is required.
    pub fn nsd_usage_state(mut self, input: crate::types::NsdUsageState) -> Self {
        self.nsd_usage_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>Usage state of the network service descriptor in the network package.</p>
    pub fn set_nsd_usage_state(mut self, input: ::std::option::Option<crate::types::NsdUsageState>) -> Self {
        self.nsd_usage_state = input;
        self
    }
    /// <p>Usage state of the network service descriptor in the network package.</p>
    pub fn get_nsd_usage_state(&self) -> &::std::option::Option<crate::types::NsdUsageState> {
        &self.nsd_usage_state
    }
    /// <p>ID of the network service descriptor on which the network package is based.</p>
    pub fn nsd_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.nsd_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ID of the network service descriptor on which the network package is based.</p>
    pub fn set_nsd_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.nsd_id = input;
        self
    }
    /// <p>ID of the network service descriptor on which the network package is based.</p>
    pub fn get_nsd_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.nsd_id
    }
    /// <p>Name of the onboarded network service descriptor in the network package.</p>
    pub fn nsd_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.nsd_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the onboarded network service descriptor in the network package.</p>
    pub fn set_nsd_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.nsd_name = input;
        self
    }
    /// <p>Name of the onboarded network service descriptor in the network package.</p>
    pub fn get_nsd_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.nsd_name
    }
    /// <p>Version of the onboarded network service descriptor in the network package.</p>
    pub fn nsd_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.nsd_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Version of the onboarded network service descriptor in the network package.</p>
    pub fn set_nsd_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.nsd_version = input;
        self
    }
    /// <p>Version of the onboarded network service descriptor in the network package.</p>
    pub fn get_nsd_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.nsd_version
    }
    /// <p>Designer of the onboarded network service descriptor in the network package.</p>
    pub fn nsd_designer(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.nsd_designer = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Designer of the onboarded network service descriptor in the network package.</p>
    pub fn set_nsd_designer(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.nsd_designer = input;
        self
    }
    /// <p>Designer of the onboarded network service descriptor in the network package.</p>
    pub fn get_nsd_designer(&self) -> &::std::option::Option<::std::string::String> {
        &self.nsd_designer
    }
    /// <p>Identifies a network service descriptor in a version independent manner.</p>
    pub fn nsd_invariant_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.nsd_invariant_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Identifies a network service descriptor in a version independent manner.</p>
    pub fn set_nsd_invariant_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.nsd_invariant_id = input;
        self
    }
    /// <p>Identifies a network service descriptor in a version independent manner.</p>
    pub fn get_nsd_invariant_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.nsd_invariant_id
    }
    /// Appends an item to `vnf_pkg_ids`.
    ///
    /// To override the contents of this collection use [`set_vnf_pkg_ids`](Self::set_vnf_pkg_ids).
    ///
    /// <p>Identifies the function package for the function package descriptor referenced by the onboarded network package.</p>
    pub fn vnf_pkg_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.vnf_pkg_ids.unwrap_or_default();
        v.push(input.into());
        self.vnf_pkg_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>Identifies the function package for the function package descriptor referenced by the onboarded network package.</p>
    pub fn set_vnf_pkg_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.vnf_pkg_ids = input;
        self
    }
    /// <p>Identifies the function package for the function package descriptor referenced by the onboarded network package.</p>
    pub fn get_vnf_pkg_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.vnf_pkg_ids
    }
    /// <p>The metadata of the network package.</p>
    /// This field is required.
    pub fn metadata(mut self, input: crate::types::ListSolNetworkPackageMetadata) -> Self {
        self.metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>The metadata of the network package.</p>
    pub fn set_metadata(mut self, input: ::std::option::Option<crate::types::ListSolNetworkPackageMetadata>) -> Self {
        self.metadata = input;
        self
    }
    /// <p>The metadata of the network package.</p>
    pub fn get_metadata(&self) -> &::std::option::Option<crate::types::ListSolNetworkPackageMetadata> {
        &self.metadata
    }
    /// Consumes the builder and constructs a [`ListSolNetworkPackageInfo`](crate::types::ListSolNetworkPackageInfo).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::ListSolNetworkPackageInfoBuilder::id)
    /// - [`arn`](crate::types::builders::ListSolNetworkPackageInfoBuilder::arn)
    /// - [`nsd_onboarding_state`](crate::types::builders::ListSolNetworkPackageInfoBuilder::nsd_onboarding_state)
    /// - [`nsd_operational_state`](crate::types::builders::ListSolNetworkPackageInfoBuilder::nsd_operational_state)
    /// - [`nsd_usage_state`](crate::types::builders::ListSolNetworkPackageInfoBuilder::nsd_usage_state)
    pub fn build(self) -> ::std::result::Result<crate::types::ListSolNetworkPackageInfo, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ListSolNetworkPackageInfo {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building ListSolNetworkPackageInfo",
                )
            })?,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building ListSolNetworkPackageInfo",
                )
            })?,
            nsd_onboarding_state: self.nsd_onboarding_state.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "nsd_onboarding_state",
                    "nsd_onboarding_state was not specified but it is required when building ListSolNetworkPackageInfo",
                )
            })?,
            nsd_operational_state: self.nsd_operational_state.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "nsd_operational_state",
                    "nsd_operational_state was not specified but it is required when building ListSolNetworkPackageInfo",
                )
            })?,
            nsd_usage_state: self.nsd_usage_state.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "nsd_usage_state",
                    "nsd_usage_state was not specified but it is required when building ListSolNetworkPackageInfo",
                )
            })?,
            nsd_id: self.nsd_id,
            nsd_name: self.nsd_name,
            nsd_version: self.nsd_version,
            nsd_designer: self.nsd_designer,
            nsd_invariant_id: self.nsd_invariant_id,
            vnf_pkg_ids: self.vnf_pkg_ids,
            metadata: self.metadata,
        })
    }
}
