// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetSolFunctionPackage`](crate::operation::get_sol_function_package::builders::GetSolFunctionPackageFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`vnf_pkg_id(impl Into<String>)`](crate::operation::get_sol_function_package::builders::GetSolFunctionPackageFluentBuilder::vnf_pkg_id) / [`set_vnf_pkg_id(Option<String>)`](crate::operation::get_sol_function_package::builders::GetSolFunctionPackageFluentBuilder::set_vnf_pkg_id):<br>required: **true**<br><p>ID of the function package.</p><br>
    /// - On success, responds with [`GetSolFunctionPackageOutput`](crate::operation::get_sol_function_package::GetSolFunctionPackageOutput) with field(s):
    ///   - [`id(String)`](crate::operation::get_sol_function_package::GetSolFunctionPackageOutput::id): <p>Function package ID.</p>
    ///   - [`arn(String)`](crate::operation::get_sol_function_package::GetSolFunctionPackageOutput::arn): <p>Function package ARN.</p>
    ///   - [`onboarding_state(OnboardingState)`](crate::operation::get_sol_function_package::GetSolFunctionPackageOutput::onboarding_state): <p>Function package onboarding state.</p>
    ///   - [`operational_state(OperationalState)`](crate::operation::get_sol_function_package::GetSolFunctionPackageOutput::operational_state): <p>Function package operational state.</p>
    ///   - [`usage_state(UsageState)`](crate::operation::get_sol_function_package::GetSolFunctionPackageOutput::usage_state): <p>Function package usage state.</p>
    ///   - [`vnfd_id(Option<String>)`](crate::operation::get_sol_function_package::GetSolFunctionPackageOutput::vnfd_id): <p>Function package descriptor ID.</p>
    ///   - [`vnf_provider(Option<String>)`](crate::operation::get_sol_function_package::GetSolFunctionPackageOutput::vnf_provider): <p>Network function provider.</p>
    ///   - [`vnf_product_name(Option<String>)`](crate::operation::get_sol_function_package::GetSolFunctionPackageOutput::vnf_product_name): <p>Network function product name.</p>
    ///   - [`vnfd_version(Option<String>)`](crate::operation::get_sol_function_package::GetSolFunctionPackageOutput::vnfd_version): <p>Function package descriptor version.</p>
    ///   - [`metadata(Option<GetSolFunctionPackageMetadata>)`](crate::operation::get_sol_function_package::GetSolFunctionPackageOutput::metadata): <p>Metadata related to the function package.</p>  <p>A function package is a .zip file in CSAR (Cloud Service Archive) format that contains a network function (an ETSI standard telecommunication application) and function package descriptor that uses the TOSCA standard to describe how the network functions should run on your network.</p>
    ///   - [`tags(Option<HashMap::<String, String>>)`](crate::operation::get_sol_function_package::GetSolFunctionPackageOutput::tags): <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    /// - On failure, responds with [`SdkError<GetSolFunctionPackageError>`](crate::operation::get_sol_function_package::GetSolFunctionPackageError)
    pub fn get_sol_function_package(&self) -> crate::operation::get_sol_function_package::builders::GetSolFunctionPackageFluentBuilder {
        crate::operation::get_sol_function_package::builders::GetSolFunctionPackageFluentBuilder::new(self.handle.clone())
    }
}
