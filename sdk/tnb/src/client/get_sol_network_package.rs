// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetSolNetworkPackage`](crate::operation::get_sol_network_package::builders::GetSolNetworkPackageFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`nsd_info_id(impl Into<String>)`](crate::operation::get_sol_network_package::builders::GetSolNetworkPackageFluentBuilder::nsd_info_id) / [`set_nsd_info_id(Option<String>)`](crate::operation::get_sol_network_package::builders::GetSolNetworkPackageFluentBuilder::set_nsd_info_id):<br>required: **true**<br><p>ID of the network service descriptor in the network package.</p><br>
    /// - On success, responds with [`GetSolNetworkPackageOutput`](crate::operation::get_sol_network_package::GetSolNetworkPackageOutput) with field(s):
    ///   - [`id(String)`](crate::operation::get_sol_network_package::GetSolNetworkPackageOutput::id): <p>Network package ID.</p>
    ///   - [`arn(String)`](crate::operation::get_sol_network_package::GetSolNetworkPackageOutput::arn): <p>Network package ARN.</p>
    ///   - [`nsd_onboarding_state(NsdOnboardingState)`](crate::operation::get_sol_network_package::GetSolNetworkPackageOutput::nsd_onboarding_state): <p>Network service descriptor onboarding state.</p>
    ///   - [`nsd_operational_state(NsdOperationalState)`](crate::operation::get_sol_network_package::GetSolNetworkPackageOutput::nsd_operational_state): <p>Network service descriptor operational state.</p>
    ///   - [`nsd_usage_state(NsdUsageState)`](crate::operation::get_sol_network_package::GetSolNetworkPackageOutput::nsd_usage_state): <p>Network service descriptor usage state.</p>
    ///   - [`nsd_id(String)`](crate::operation::get_sol_network_package::GetSolNetworkPackageOutput::nsd_id): <p>Network service descriptor ID.</p>
    ///   - [`nsd_name(String)`](crate::operation::get_sol_network_package::GetSolNetworkPackageOutput::nsd_name): <p>Network service descriptor name.</p>
    ///   - [`nsd_version(String)`](crate::operation::get_sol_network_package::GetSolNetworkPackageOutput::nsd_version): <p>Network service descriptor version.</p>
    ///   - [`vnf_pkg_ids(Vec::<String>)`](crate::operation::get_sol_network_package::GetSolNetworkPackageOutput::vnf_pkg_ids): <p>Identifies the function package for the function package descriptor referenced by the onboarded network package.</p>
    ///   - [`metadata(Option<GetSolNetworkPackageMetadata>)`](crate::operation::get_sol_network_package::GetSolNetworkPackageOutput::metadata): <p>Metadata associated with a network package.</p>  <p>A network package is a .zip file in CSAR (Cloud Service Archive) format defines the function packages you want to deploy and the Amazon Web Services infrastructure you want to deploy them on.</p>
    ///   - [`tags(Option<HashMap::<String, String>>)`](crate::operation::get_sol_network_package::GetSolNetworkPackageOutput::tags): <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    /// - On failure, responds with [`SdkError<GetSolNetworkPackageError>`](crate::operation::get_sol_network_package::GetSolNetworkPackageError)
    pub fn get_sol_network_package(&self) -> crate::operation::get_sol_network_package::builders::GetSolNetworkPackageFluentBuilder {
        crate::operation::get_sol_network_package::builders::GetSolNetworkPackageFluentBuilder::new(self.handle.clone())
    }
}
