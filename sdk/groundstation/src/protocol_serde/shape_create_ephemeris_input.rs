// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_ephemeris_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_ephemeris::CreateEphemerisInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.enabled {
        object.key("enabled").boolean(*var_1);
    }
    if let Some(var_2) = &input.ephemeris {
        #[allow(unused_mut)]
        let mut object_3 = object.key("ephemeris").start_object();
        crate::protocol_serde::shape_ephemeris_data::ser_ephemeris_data(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.expiration_time {
        object
            .key("expirationTime")
            .date_time(var_4, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_5) = &input.kms_key_arn {
        object.key("kmsKeyArn").string(var_5.as_str());
    }
    if let Some(var_6) = &input.name {
        object.key("name").string(var_6.as_str());
    }
    if let Some(var_7) = &input.priority {
        object.key("priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_7).into()),
        );
    }
    if let Some(var_8) = &input.satellite_id {
        object.key("satelliteId").string(var_8.as_str());
    }
    if let Some(var_9) = &input.tags {
        #[allow(unused_mut)]
        let mut object_10 = object.key("tags").start_object();
        for (key_11, value_12) in var_9 {
            {
                object_10.key(key_11.as_str()).string(value_12.as_str());
            }
        }
        object_10.finish();
    }
    Ok(())
}
