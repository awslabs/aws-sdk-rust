// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateEphemeris`](crate::operation::create_ephemeris::builders::CreateEphemerisFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`satellite_id(impl Into<String>)`](crate::operation::create_ephemeris::builders::CreateEphemerisFluentBuilder::satellite_id) / [`set_satellite_id(Option<String>)`](crate::operation::create_ephemeris::builders::CreateEphemerisFluentBuilder::set_satellite_id):<br>required: **true**<br><p>AWS Ground Station satellite ID for this ephemeris.</p><br>
    ///   - [`enabled(bool)`](crate::operation::create_ephemeris::builders::CreateEphemerisFluentBuilder::enabled) / [`set_enabled(Option<bool>)`](crate::operation::create_ephemeris::builders::CreateEphemerisFluentBuilder::set_enabled):<br>required: **false**<br><p>Whether to set the ephemeris status to <code>ENABLED</code> after validation.</p>  <p>Setting this to false will set the ephemeris status to <code>DISABLED</code> after validation.</p><br>
    ///   - [`priority(i32)`](crate::operation::create_ephemeris::builders::CreateEphemerisFluentBuilder::priority) / [`set_priority(Option<i32>)`](crate::operation::create_ephemeris::builders::CreateEphemerisFluentBuilder::set_priority):<br>required: **false**<br><p>Customer-provided priority score to establish the order in which overlapping ephemerides should be used.</p>  <p>The default for customer-provided ephemeris priority is 1, and higher numbers take precedence.</p>  <p>Priority must be 1 or greater</p><br>
    ///   - [`expiration_time(DateTime)`](crate::operation::create_ephemeris::builders::CreateEphemerisFluentBuilder::expiration_time) / [`set_expiration_time(Option<DateTime>)`](crate::operation::create_ephemeris::builders::CreateEphemerisFluentBuilder::set_expiration_time):<br>required: **false**<br><p>An overall expiration time for the ephemeris in UTC, after which it will become <code>EXPIRED</code>.</p><br>
    ///   - [`name(impl Into<String>)`](crate::operation::create_ephemeris::builders::CreateEphemerisFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::create_ephemeris::builders::CreateEphemerisFluentBuilder::set_name):<br>required: **true**<br><p>A name string associated with the ephemeris. Used as a human-readable identifier for the ephemeris.</p><br>
    ///   - [`kms_key_arn(impl Into<String>)`](crate::operation::create_ephemeris::builders::CreateEphemerisFluentBuilder::kms_key_arn) / [`set_kms_key_arn(Option<String>)`](crate::operation::create_ephemeris::builders::CreateEphemerisFluentBuilder::set_kms_key_arn):<br>required: **false**<br><p>The ARN of a KMS key used to encrypt the ephemeris in Ground Station.</p><br>
    ///   - [`ephemeris(EphemerisData)`](crate::operation::create_ephemeris::builders::CreateEphemerisFluentBuilder::ephemeris) / [`set_ephemeris(Option<EphemerisData>)`](crate::operation::create_ephemeris::builders::CreateEphemerisFluentBuilder::set_ephemeris):<br>required: **false**<br><p>Ephemeris data.</p><br>
    ///   - [`tags(impl Into<String>, impl Into<String>)`](crate::operation::create_ephemeris::builders::CreateEphemerisFluentBuilder::tags) / [`set_tags(Option<HashMap::<String, String>>)`](crate::operation::create_ephemeris::builders::CreateEphemerisFluentBuilder::set_tags):<br>required: **false**<br><p>Tags assigned to an ephemeris.</p><br>
    /// - On success, responds with [`CreateEphemerisOutput`](crate::operation::create_ephemeris::CreateEphemerisOutput) with field(s):
    ///   - [`ephemeris_id(Option<String>)`](crate::operation::create_ephemeris::CreateEphemerisOutput::ephemeris_id): <p>The AWS Ground Station ephemeris ID.</p>
    /// - On failure, responds with [`SdkError<CreateEphemerisError>`](crate::operation::create_ephemeris::CreateEphemerisError)
    pub fn create_ephemeris(&self) -> crate::operation::create_ephemeris::builders::CreateEphemerisFluentBuilder {
        crate::operation::create_ephemeris::builders::CreateEphemerisFluentBuilder::new(self.handle.clone())
    }
}
