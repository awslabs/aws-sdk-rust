// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn get_config_output_correct_errors(
    mut builder: crate::operation::get_config::builders::GetConfigOutputBuilder,
) -> crate::operation::get_config::builders::GetConfigOutputBuilder {
    if builder.config_id.is_none() {
        builder.config_id = Some(Default::default())
    }
    if builder.config_arn.is_none() {
        builder.config_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.config_data.is_none() {
        builder.config_data = Some(crate::types::ConfigTypeData::Unknown)
    }
    builder
}

pub(crate) fn update_agent_status_output_correct_errors(
    mut builder: crate::operation::update_agent_status::builders::UpdateAgentStatusOutputBuilder,
) -> crate::operation::update_agent_status::builders::UpdateAgentStatusOutputBuilder {
    if builder.agent_id.is_none() {
        builder.agent_id = Some(Default::default())
    }
    builder
}

pub(crate) fn elevation_correct_errors(mut builder: crate::types::builders::ElevationBuilder) -> crate::types::builders::ElevationBuilder {
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    if builder.unit.is_none() {
        builder.unit = "no value was set".parse::<crate::types::AngleUnits>().ok()
    }
    builder
}

pub(crate) fn ephemeris_meta_data_correct_errors(
    mut builder: crate::types::builders::EphemerisMetaDataBuilder,
) -> crate::types::builders::EphemerisMetaDataBuilder {
    if builder.source.is_none() {
        builder.source = "no value was set".parse::<crate::types::EphemerisSource>().ok()
    }
    builder
}

pub(crate) fn antenna_downlink_config_correct_errors(
    mut builder: crate::types::builders::AntennaDownlinkConfigBuilder,
) -> crate::types::builders::AntennaDownlinkConfigBuilder {
    if builder.spectrum_config.is_none() {
        builder.spectrum_config = {
            let builder = crate::types::builders::SpectrumConfigBuilder::default();
            Some(crate::serde_util::spectrum_config_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn antenna_downlink_demod_decode_config_correct_errors(
    mut builder: crate::types::builders::AntennaDownlinkDemodDecodeConfigBuilder,
) -> crate::types::builders::AntennaDownlinkDemodDecodeConfigBuilder {
    if builder.spectrum_config.is_none() {
        builder.spectrum_config = {
            let builder = crate::types::builders::SpectrumConfigBuilder::default();
            Some(crate::serde_util::spectrum_config_correct_errors(builder).build())
        }
    }
    if builder.demodulation_config.is_none() {
        builder.demodulation_config = {
            let builder = crate::types::builders::DemodulationConfigBuilder::default();
            crate::serde_util::demodulation_config_correct_errors(builder).build().ok()
        }
    }
    if builder.decode_config.is_none() {
        builder.decode_config = {
            let builder = crate::types::builders::DecodeConfigBuilder::default();
            crate::serde_util::decode_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn antenna_uplink_config_correct_errors(
    mut builder: crate::types::builders::AntennaUplinkConfigBuilder,
) -> crate::types::builders::AntennaUplinkConfigBuilder {
    if builder.spectrum_config.is_none() {
        builder.spectrum_config = {
            let builder = crate::types::builders::UplinkSpectrumConfigBuilder::default();
            Some(crate::serde_util::uplink_spectrum_config_correct_errors(builder).build())
        }
    }
    if builder.target_eirp.is_none() {
        builder.target_eirp = {
            let builder = crate::types::builders::EirpBuilder::default();
            crate::serde_util::eirp_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn dataflow_endpoint_config_correct_errors(
    mut builder: crate::types::builders::DataflowEndpointConfigBuilder,
) -> crate::types::builders::DataflowEndpointConfigBuilder {
    if builder.dataflow_endpoint_name.is_none() {
        builder.dataflow_endpoint_name = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_recording_config_correct_errors(
    mut builder: crate::types::builders::S3RecordingConfigBuilder,
) -> crate::types::builders::S3RecordingConfigBuilder {
    if builder.bucket_arn.is_none() {
        builder.bucket_arn = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn tracking_config_correct_errors(
    mut builder: crate::types::builders::TrackingConfigBuilder,
) -> crate::types::builders::TrackingConfigBuilder {
    if builder.autotrack.is_none() {
        builder.autotrack = "no value was set".parse::<crate::types::Criticality>().ok()
    }
    builder
}

pub(crate) fn uplink_echo_config_correct_errors(
    mut builder: crate::types::builders::UplinkEchoConfigBuilder,
) -> crate::types::builders::UplinkEchoConfigBuilder {
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    if builder.antenna_uplink_config_arn.is_none() {
        builder.antenna_uplink_config_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn aws_ground_station_agent_endpoint_correct_errors(
    mut builder: crate::types::builders::AwsGroundStationAgentEndpointBuilder,
) -> crate::types::builders::AwsGroundStationAgentEndpointBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.egress_address.is_none() {
        builder.egress_address = {
            let builder = crate::types::builders::ConnectionDetailsBuilder::default();
            Some(crate::serde_util::connection_details_correct_errors(builder).build())
        }
    }
    if builder.ingress_address.is_none() {
        builder.ingress_address = {
            let builder = crate::types::builders::RangedConnectionDetailsBuilder::default();
            Some(crate::serde_util::ranged_connection_details_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn decode_config_correct_errors(mut builder: crate::types::builders::DecodeConfigBuilder) -> crate::types::builders::DecodeConfigBuilder {
    if builder.unvalidated_json.is_none() {
        builder.unvalidated_json = Some(Default::default())
    }
    builder
}

pub(crate) fn demodulation_config_correct_errors(
    mut builder: crate::types::builders::DemodulationConfigBuilder,
) -> crate::types::builders::DemodulationConfigBuilder {
    if builder.unvalidated_json.is_none() {
        builder.unvalidated_json = Some(Default::default())
    }
    builder
}

pub(crate) fn eirp_correct_errors(mut builder: crate::types::builders::EirpBuilder) -> crate::types::builders::EirpBuilder {
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    if builder.units.is_none() {
        builder.units = "no value was set".parse::<crate::types::EirpUnits>().ok()
    }
    builder
}

pub(crate) fn security_details_correct_errors(
    mut builder: crate::types::builders::SecurityDetailsBuilder,
) -> crate::types::builders::SecurityDetailsBuilder {
    if builder.subnet_ids.is_none() {
        builder.subnet_ids = Some(Default::default())
    }
    if builder.security_group_ids.is_none() {
        builder.security_group_ids = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn spectrum_config_correct_errors(
    mut builder: crate::types::builders::SpectrumConfigBuilder,
) -> crate::types::builders::SpectrumConfigBuilder {
    if builder.center_frequency.is_none() {
        builder.center_frequency = {
            let builder = crate::types::builders::FrequencyBuilder::default();
            crate::serde_util::frequency_correct_errors(builder).build().ok()
        }
    }
    if builder.bandwidth.is_none() {
        builder.bandwidth = {
            let builder = crate::types::builders::FrequencyBandwidthBuilder::default();
            crate::serde_util::frequency_bandwidth_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn uplink_spectrum_config_correct_errors(
    mut builder: crate::types::builders::UplinkSpectrumConfigBuilder,
) -> crate::types::builders::UplinkSpectrumConfigBuilder {
    if builder.center_frequency.is_none() {
        builder.center_frequency = {
            let builder = crate::types::builders::FrequencyBuilder::default();
            crate::serde_util::frequency_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn connection_details_correct_errors(
    mut builder: crate::types::builders::ConnectionDetailsBuilder,
) -> crate::types::builders::ConnectionDetailsBuilder {
    if builder.socket_address.is_none() {
        builder.socket_address = {
            let builder = crate::types::builders::SocketAddressBuilder::default();
            crate::serde_util::socket_address_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn frequency_correct_errors(mut builder: crate::types::builders::FrequencyBuilder) -> crate::types::builders::FrequencyBuilder {
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    if builder.units.is_none() {
        builder.units = "no value was set".parse::<crate::types::FrequencyUnits>().ok()
    }
    builder
}

pub(crate) fn frequency_bandwidth_correct_errors(
    mut builder: crate::types::builders::FrequencyBandwidthBuilder,
) -> crate::types::builders::FrequencyBandwidthBuilder {
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    if builder.units.is_none() {
        builder.units = "no value was set".parse::<crate::types::BandwidthUnits>().ok()
    }
    builder
}

pub(crate) fn ranged_connection_details_correct_errors(
    mut builder: crate::types::builders::RangedConnectionDetailsBuilder,
) -> crate::types::builders::RangedConnectionDetailsBuilder {
    if builder.socket_address.is_none() {
        builder.socket_address = {
            let builder = crate::types::builders::RangedSocketAddressBuilder::default();
            crate::serde_util::ranged_socket_address_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn socket_address_correct_errors(
    mut builder: crate::types::builders::SocketAddressBuilder,
) -> crate::types::builders::SocketAddressBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.port.is_none() {
        builder.port = Some(Default::default())
    }
    builder
}

pub(crate) fn ranged_socket_address_correct_errors(
    mut builder: crate::types::builders::RangedSocketAddressBuilder,
) -> crate::types::builders::RangedSocketAddressBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.port_range.is_none() {
        builder.port_range = {
            let builder = crate::types::builders::IntegerRangeBuilder::default();
            crate::serde_util::integer_range_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn integer_range_correct_errors(mut builder: crate::types::builders::IntegerRangeBuilder) -> crate::types::builders::IntegerRangeBuilder {
    if builder.minimum.is_none() {
        builder.minimum = Some(Default::default())
    }
    if builder.maximum.is_none() {
        builder.maximum = Some(Default::default())
    }
    builder
}
