// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A time segment containing azimuth elevation pointing data.</p>
/// <p>Each segment defines a continuous time period with pointing angle data points. AWS Ground Station uses 4th order Lagrange interpolation between the provided points, so each segment must contain at least five data points.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AzElSegment {
    /// <p>The reference time for this segment in ISO 8601 format in Coordinated Universal Time (UTC).</p>
    /// <p>All time values within the segment's <code>AzElSegment$azElList</code> are specified as offsets in atomic seconds from this reference epoch.</p>
    /// <p>Example: <code>2024-01-15T12:00:00.000Z</code></p>
    pub reference_epoch: ::aws_smithy_types::DateTime,
    /// <p>The valid time range for this segment.</p>
    /// <p>Specifies the start and end timestamps in ISO 8601 format in Coordinated Universal Time (UTC). The segment's pointing data must cover this entire time range.</p>
    pub valid_time_range: ::std::option::Option<crate::types::Iso8601TimeRange>,
    /// <p>List of time-tagged azimuth elevation data points.</p>
    /// <p>Must contain at least five points to support 4th order Lagrange interpolation. Points must be in chronological order with no duplicates.</p>
    pub az_el_list: ::std::vec::Vec<crate::types::TimeAzEl>,
}
impl AzElSegment {
    /// <p>The reference time for this segment in ISO 8601 format in Coordinated Universal Time (UTC).</p>
    /// <p>All time values within the segment's <code>AzElSegment$azElList</code> are specified as offsets in atomic seconds from this reference epoch.</p>
    /// <p>Example: <code>2024-01-15T12:00:00.000Z</code></p>
    pub fn reference_epoch(&self) -> &::aws_smithy_types::DateTime {
        &self.reference_epoch
    }
    /// <p>The valid time range for this segment.</p>
    /// <p>Specifies the start and end timestamps in ISO 8601 format in Coordinated Universal Time (UTC). The segment's pointing data must cover this entire time range.</p>
    pub fn valid_time_range(&self) -> ::std::option::Option<&crate::types::Iso8601TimeRange> {
        self.valid_time_range.as_ref()
    }
    /// <p>List of time-tagged azimuth elevation data points.</p>
    /// <p>Must contain at least five points to support 4th order Lagrange interpolation. Points must be in chronological order with no duplicates.</p>
    pub fn az_el_list(&self) -> &[crate::types::TimeAzEl] {
        use std::ops::Deref;
        self.az_el_list.deref()
    }
}
impl AzElSegment {
    /// Creates a new builder-style object to manufacture [`AzElSegment`](crate::types::AzElSegment).
    pub fn builder() -> crate::types::builders::AzElSegmentBuilder {
        crate::types::builders::AzElSegmentBuilder::default()
    }
}

/// A builder for [`AzElSegment`](crate::types::AzElSegment).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AzElSegmentBuilder {
    pub(crate) reference_epoch: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) valid_time_range: ::std::option::Option<crate::types::Iso8601TimeRange>,
    pub(crate) az_el_list: ::std::option::Option<::std::vec::Vec<crate::types::TimeAzEl>>,
}
impl AzElSegmentBuilder {
    /// <p>The reference time for this segment in ISO 8601 format in Coordinated Universal Time (UTC).</p>
    /// <p>All time values within the segment's <code>AzElSegment$azElList</code> are specified as offsets in atomic seconds from this reference epoch.</p>
    /// <p>Example: <code>2024-01-15T12:00:00.000Z</code></p>
    /// This field is required.
    pub fn reference_epoch(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.reference_epoch = ::std::option::Option::Some(input);
        self
    }
    /// <p>The reference time for this segment in ISO 8601 format in Coordinated Universal Time (UTC).</p>
    /// <p>All time values within the segment's <code>AzElSegment$azElList</code> are specified as offsets in atomic seconds from this reference epoch.</p>
    /// <p>Example: <code>2024-01-15T12:00:00.000Z</code></p>
    pub fn set_reference_epoch(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.reference_epoch = input;
        self
    }
    /// <p>The reference time for this segment in ISO 8601 format in Coordinated Universal Time (UTC).</p>
    /// <p>All time values within the segment's <code>AzElSegment$azElList</code> are specified as offsets in atomic seconds from this reference epoch.</p>
    /// <p>Example: <code>2024-01-15T12:00:00.000Z</code></p>
    pub fn get_reference_epoch(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.reference_epoch
    }
    /// <p>The valid time range for this segment.</p>
    /// <p>Specifies the start and end timestamps in ISO 8601 format in Coordinated Universal Time (UTC). The segment's pointing data must cover this entire time range.</p>
    /// This field is required.
    pub fn valid_time_range(mut self, input: crate::types::Iso8601TimeRange) -> Self {
        self.valid_time_range = ::std::option::Option::Some(input);
        self
    }
    /// <p>The valid time range for this segment.</p>
    /// <p>Specifies the start and end timestamps in ISO 8601 format in Coordinated Universal Time (UTC). The segment's pointing data must cover this entire time range.</p>
    pub fn set_valid_time_range(mut self, input: ::std::option::Option<crate::types::Iso8601TimeRange>) -> Self {
        self.valid_time_range = input;
        self
    }
    /// <p>The valid time range for this segment.</p>
    /// <p>Specifies the start and end timestamps in ISO 8601 format in Coordinated Universal Time (UTC). The segment's pointing data must cover this entire time range.</p>
    pub fn get_valid_time_range(&self) -> &::std::option::Option<crate::types::Iso8601TimeRange> {
        &self.valid_time_range
    }
    /// Appends an item to `az_el_list`.
    ///
    /// To override the contents of this collection use [`set_az_el_list`](Self::set_az_el_list).
    ///
    /// <p>List of time-tagged azimuth elevation data points.</p>
    /// <p>Must contain at least five points to support 4th order Lagrange interpolation. Points must be in chronological order with no duplicates.</p>
    pub fn az_el_list(mut self, input: crate::types::TimeAzEl) -> Self {
        let mut v = self.az_el_list.unwrap_or_default();
        v.push(input);
        self.az_el_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of time-tagged azimuth elevation data points.</p>
    /// <p>Must contain at least five points to support 4th order Lagrange interpolation. Points must be in chronological order with no duplicates.</p>
    pub fn set_az_el_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TimeAzEl>>) -> Self {
        self.az_el_list = input;
        self
    }
    /// <p>List of time-tagged azimuth elevation data points.</p>
    /// <p>Must contain at least five points to support 4th order Lagrange interpolation. Points must be in chronological order with no duplicates.</p>
    pub fn get_az_el_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TimeAzEl>> {
        &self.az_el_list
    }
    /// Consumes the builder and constructs a [`AzElSegment`](crate::types::AzElSegment).
    /// This method will fail if any of the following fields are not set:
    /// - [`reference_epoch`](crate::types::builders::AzElSegmentBuilder::reference_epoch)
    /// - [`az_el_list`](crate::types::builders::AzElSegmentBuilder::az_el_list)
    pub fn build(self) -> ::std::result::Result<crate::types::AzElSegment, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AzElSegment {
            reference_epoch: self.reference_epoch.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "reference_epoch",
                    "reference_epoch was not specified but it is required when building AzElSegment",
                )
            })?,
            valid_time_range: self.valid_time_range,
            az_el_list: self.az_el_list.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "az_el_list",
                    "az_el_list was not specified but it is required when building AzElSegment",
                )
            })?,
        })
    }
}
