// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Item in a list of mission profiles.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MissionProfileListItem {
    /// <p>UUID of a mission profile.</p>
    #[doc(hidden)]
    pub mission_profile_id: std::option::Option<std::string::String>,
    /// <p>ARN of a mission profile.</p>
    #[doc(hidden)]
    pub mission_profile_arn: std::option::Option<std::string::String>,
    /// <p>Region of a mission profile.</p>
    #[doc(hidden)]
    pub region: std::option::Option<std::string::String>,
    /// <p>Name of a mission profile.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
}
impl MissionProfileListItem {
    /// <p>UUID of a mission profile.</p>
    pub fn mission_profile_id(&self) -> std::option::Option<&str> {
        self.mission_profile_id.as_deref()
    }
    /// <p>ARN of a mission profile.</p>
    pub fn mission_profile_arn(&self) -> std::option::Option<&str> {
        self.mission_profile_arn.as_deref()
    }
    /// <p>Region of a mission profile.</p>
    pub fn region(&self) -> std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p>Name of a mission profile.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
}
impl MissionProfileListItem {
    /// Creates a new builder-style object to manufacture [`MissionProfileListItem`](crate::types::MissionProfileListItem).
    pub fn builder() -> crate::types::builders::MissionProfileListItemBuilder {
        crate::types::builders::MissionProfileListItemBuilder::default()
    }
}

/// A builder for [`MissionProfileListItem`](crate::types::MissionProfileListItem).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MissionProfileListItemBuilder {
    pub(crate) mission_profile_id: std::option::Option<std::string::String>,
    pub(crate) mission_profile_arn: std::option::Option<std::string::String>,
    pub(crate) region: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
}
impl MissionProfileListItemBuilder {
    /// <p>UUID of a mission profile.</p>
    pub fn mission_profile_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.mission_profile_id = Some(input.into());
        self
    }
    /// <p>UUID of a mission profile.</p>
    pub fn set_mission_profile_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.mission_profile_id = input;
        self
    }
    /// <p>ARN of a mission profile.</p>
    pub fn mission_profile_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.mission_profile_arn = Some(input.into());
        self
    }
    /// <p>ARN of a mission profile.</p>
    pub fn set_mission_profile_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.mission_profile_arn = input;
        self
    }
    /// <p>Region of a mission profile.</p>
    pub fn region(mut self, input: impl Into<std::string::String>) -> Self {
        self.region = Some(input.into());
        self
    }
    /// <p>Region of a mission profile.</p>
    pub fn set_region(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>Name of a mission profile.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>Name of a mission profile.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Consumes the builder and constructs a [`MissionProfileListItem`](crate::types::MissionProfileListItem).
    pub fn build(self) -> crate::types::MissionProfileListItem {
        crate::types::MissionProfileListItem {
            mission_profile_id: self.mission_profile_id,
            mission_profile_arn: self.mission_profile_arn,
            region: self.region,
            name: self.name,
        }
    }
}
