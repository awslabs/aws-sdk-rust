// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about how AWS Ground Station should configure an antenna for downlink during a contact.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AntennaDownlinkConfig {
    /// <p>Object that describes a spectral <code>Config</code>.</p>
    #[doc(hidden)]
    pub spectrum_config: std::option::Option<crate::types::SpectrumConfig>,
}
impl AntennaDownlinkConfig {
    /// <p>Object that describes a spectral <code>Config</code>.</p>
    pub fn spectrum_config(&self) -> std::option::Option<&crate::types::SpectrumConfig> {
        self.spectrum_config.as_ref()
    }
}
impl AntennaDownlinkConfig {
    /// Creates a new builder-style object to manufacture [`AntennaDownlinkConfig`](crate::types::AntennaDownlinkConfig).
    pub fn builder() -> crate::types::builders::AntennaDownlinkConfigBuilder {
        crate::types::builders::AntennaDownlinkConfigBuilder::default()
    }
}

/// A builder for [`AntennaDownlinkConfig`](crate::types::AntennaDownlinkConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AntennaDownlinkConfigBuilder {
    pub(crate) spectrum_config: std::option::Option<crate::types::SpectrumConfig>,
}
impl AntennaDownlinkConfigBuilder {
    /// <p>Object that describes a spectral <code>Config</code>.</p>
    pub fn spectrum_config(mut self, input: crate::types::SpectrumConfig) -> Self {
        self.spectrum_config = Some(input);
        self
    }
    /// <p>Object that describes a spectral <code>Config</code>.</p>
    pub fn set_spectrum_config(
        mut self,
        input: std::option::Option<crate::types::SpectrumConfig>,
    ) -> Self {
        self.spectrum_config = input;
        self
    }
    /// Consumes the builder and constructs a [`AntennaDownlinkConfig`](crate::types::AntennaDownlinkConfig).
    pub fn build(self) -> crate::types::AntennaDownlinkConfig {
        crate::types::AntennaDownlinkConfig {
            spectrum_config: self.spectrum_config,
        }
    }
}
