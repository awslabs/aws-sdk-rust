// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the uplink spectral <code>Config</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UplinkSpectrumConfig {
    /// <p>Center frequency of an uplink spectral <code>Config</code>. Valid values are between 2025 to 2120 MHz.</p>
    pub center_frequency: ::std::option::Option<crate::types::Frequency>,
    /// <p>Polarization of an uplink spectral <code>Config</code>. Capturing both <code>"RIGHT_HAND"</code> and <code>"LEFT_HAND"</code> polarization requires two separate configs.</p>
    pub polarization: ::std::option::Option<crate::types::Polarization>,
}
impl UplinkSpectrumConfig {
    /// <p>Center frequency of an uplink spectral <code>Config</code>. Valid values are between 2025 to 2120 MHz.</p>
    pub fn center_frequency(&self) -> ::std::option::Option<&crate::types::Frequency> {
        self.center_frequency.as_ref()
    }
    /// <p>Polarization of an uplink spectral <code>Config</code>. Capturing both <code>"RIGHT_HAND"</code> and <code>"LEFT_HAND"</code> polarization requires two separate configs.</p>
    pub fn polarization(&self) -> ::std::option::Option<&crate::types::Polarization> {
        self.polarization.as_ref()
    }
}
impl UplinkSpectrumConfig {
    /// Creates a new builder-style object to manufacture [`UplinkSpectrumConfig`](crate::types::UplinkSpectrumConfig).
    pub fn builder() -> crate::types::builders::UplinkSpectrumConfigBuilder {
        crate::types::builders::UplinkSpectrumConfigBuilder::default()
    }
}

/// A builder for [`UplinkSpectrumConfig`](crate::types::UplinkSpectrumConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UplinkSpectrumConfigBuilder {
    pub(crate) center_frequency: ::std::option::Option<crate::types::Frequency>,
    pub(crate) polarization: ::std::option::Option<crate::types::Polarization>,
}
impl UplinkSpectrumConfigBuilder {
    /// <p>Center frequency of an uplink spectral <code>Config</code>. Valid values are between 2025 to 2120 MHz.</p>
    /// This field is required.
    pub fn center_frequency(mut self, input: crate::types::Frequency) -> Self {
        self.center_frequency = ::std::option::Option::Some(input);
        self
    }
    /// <p>Center frequency of an uplink spectral <code>Config</code>. Valid values are between 2025 to 2120 MHz.</p>
    pub fn set_center_frequency(mut self, input: ::std::option::Option<crate::types::Frequency>) -> Self {
        self.center_frequency = input;
        self
    }
    /// <p>Center frequency of an uplink spectral <code>Config</code>. Valid values are between 2025 to 2120 MHz.</p>
    pub fn get_center_frequency(&self) -> &::std::option::Option<crate::types::Frequency> {
        &self.center_frequency
    }
    /// <p>Polarization of an uplink spectral <code>Config</code>. Capturing both <code>"RIGHT_HAND"</code> and <code>"LEFT_HAND"</code> polarization requires two separate configs.</p>
    pub fn polarization(mut self, input: crate::types::Polarization) -> Self {
        self.polarization = ::std::option::Option::Some(input);
        self
    }
    /// <p>Polarization of an uplink spectral <code>Config</code>. Capturing both <code>"RIGHT_HAND"</code> and <code>"LEFT_HAND"</code> polarization requires two separate configs.</p>
    pub fn set_polarization(mut self, input: ::std::option::Option<crate::types::Polarization>) -> Self {
        self.polarization = input;
        self
    }
    /// <p>Polarization of an uplink spectral <code>Config</code>. Capturing both <code>"RIGHT_HAND"</code> and <code>"LEFT_HAND"</code> polarization requires two separate configs.</p>
    pub fn get_polarization(&self) -> &::std::option::Option<crate::types::Polarization> {
        &self.polarization
    }
    /// Consumes the builder and constructs a [`UplinkSpectrumConfig`](crate::types::UplinkSpectrumConfig).
    pub fn build(self) -> crate::types::UplinkSpectrumConfig {
        crate::types::UplinkSpectrumConfig {
            center_frequency: self.center_frequency,
            polarization: self.polarization,
        }
    }
}
