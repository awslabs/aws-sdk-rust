// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a dataflow endpoint.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DataflowEndpoint {
    /// <p>Name of a dataflow endpoint.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>Socket address of a dataflow endpoint.</p>
    #[doc(hidden)]
    pub address: std::option::Option<crate::types::SocketAddress>,
    /// <p>Status of a dataflow endpoint.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::EndpointStatus>,
    /// <p>Maximum transmission unit (MTU) size in bytes of a dataflow endpoint.</p>
    #[doc(hidden)]
    pub mtu: std::option::Option<i32>,
}
impl DataflowEndpoint {
    /// <p>Name of a dataflow endpoint.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Socket address of a dataflow endpoint.</p>
    pub fn address(&self) -> std::option::Option<&crate::types::SocketAddress> {
        self.address.as_ref()
    }
    /// <p>Status of a dataflow endpoint.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::EndpointStatus> {
        self.status.as_ref()
    }
    /// <p>Maximum transmission unit (MTU) size in bytes of a dataflow endpoint.</p>
    pub fn mtu(&self) -> std::option::Option<i32> {
        self.mtu
    }
}
impl DataflowEndpoint {
    /// Creates a new builder-style object to manufacture [`DataflowEndpoint`](crate::types::DataflowEndpoint).
    pub fn builder() -> crate::types::builders::DataflowEndpointBuilder {
        crate::types::builders::DataflowEndpointBuilder::default()
    }
}

/// A builder for [`DataflowEndpoint`](crate::types::DataflowEndpoint).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DataflowEndpointBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) address: std::option::Option<crate::types::SocketAddress>,
    pub(crate) status: std::option::Option<crate::types::EndpointStatus>,
    pub(crate) mtu: std::option::Option<i32>,
}
impl DataflowEndpointBuilder {
    /// <p>Name of a dataflow endpoint.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>Name of a dataflow endpoint.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Socket address of a dataflow endpoint.</p>
    pub fn address(mut self, input: crate::types::SocketAddress) -> Self {
        self.address = Some(input);
        self
    }
    /// <p>Socket address of a dataflow endpoint.</p>
    pub fn set_address(mut self, input: std::option::Option<crate::types::SocketAddress>) -> Self {
        self.address = input;
        self
    }
    /// <p>Status of a dataflow endpoint.</p>
    pub fn status(mut self, input: crate::types::EndpointStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>Status of a dataflow endpoint.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::EndpointStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Maximum transmission unit (MTU) size in bytes of a dataflow endpoint.</p>
    pub fn mtu(mut self, input: i32) -> Self {
        self.mtu = Some(input);
        self
    }
    /// <p>Maximum transmission unit (MTU) size in bytes of a dataflow endpoint.</p>
    pub fn set_mtu(mut self, input: std::option::Option<i32>) -> Self {
        self.mtu = input;
        self
    }
    /// Consumes the builder and constructs a [`DataflowEndpoint`](crate::types::DataflowEndpoint).
    pub fn build(self) -> crate::types::DataflowEndpoint {
        crate::types::DataflowEndpoint {
            name: self.name,
            address: self.address,
            status: self.status,
            mtu: self.mtu,
        }
    }
}
