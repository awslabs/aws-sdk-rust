// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Two-line element set (TLE) ephemeris.</p>
/// <p>For more detail about providing Two-line element sets to AWS Ground Station, see the <a href="https://docs.aws.amazon.com/ground-station/latest/ug/providing-tle-ephemeris-data.html">TLE section</a> of the AWS Ground Station user guide.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TleEphemeris {
    /// <p>The Amazon S3 object that contains the ephemeris data.</p>
    pub s3_object: ::std::option::Option<crate::types::S3Object>,
    /// <p>TLE data that you provide directly instead of using an Amazon S3 object.</p>
    pub tle_data: ::std::option::Option<::std::vec::Vec<crate::types::TleData>>,
}
impl TleEphemeris {
    /// <p>The Amazon S3 object that contains the ephemeris data.</p>
    pub fn s3_object(&self) -> ::std::option::Option<&crate::types::S3Object> {
        self.s3_object.as_ref()
    }
    /// <p>TLE data that you provide directly instead of using an Amazon S3 object.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tle_data.is_none()`.
    pub fn tle_data(&self) -> &[crate::types::TleData] {
        self.tle_data.as_deref().unwrap_or_default()
    }
}
impl TleEphemeris {
    /// Creates a new builder-style object to manufacture [`TleEphemeris`](crate::types::TleEphemeris).
    pub fn builder() -> crate::types::builders::TleEphemerisBuilder {
        crate::types::builders::TleEphemerisBuilder::default()
    }
}

/// A builder for [`TleEphemeris`](crate::types::TleEphemeris).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TleEphemerisBuilder {
    pub(crate) s3_object: ::std::option::Option<crate::types::S3Object>,
    pub(crate) tle_data: ::std::option::Option<::std::vec::Vec<crate::types::TleData>>,
}
impl TleEphemerisBuilder {
    /// <p>The Amazon S3 object that contains the ephemeris data.</p>
    pub fn s3_object(mut self, input: crate::types::S3Object) -> Self {
        self.s3_object = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon S3 object that contains the ephemeris data.</p>
    pub fn set_s3_object(mut self, input: ::std::option::Option<crate::types::S3Object>) -> Self {
        self.s3_object = input;
        self
    }
    /// <p>The Amazon S3 object that contains the ephemeris data.</p>
    pub fn get_s3_object(&self) -> &::std::option::Option<crate::types::S3Object> {
        &self.s3_object
    }
    /// Appends an item to `tle_data`.
    ///
    /// To override the contents of this collection use [`set_tle_data`](Self::set_tle_data).
    ///
    /// <p>TLE data that you provide directly instead of using an Amazon S3 object.</p>
    pub fn tle_data(mut self, input: crate::types::TleData) -> Self {
        let mut v = self.tle_data.unwrap_or_default();
        v.push(input);
        self.tle_data = ::std::option::Option::Some(v);
        self
    }
    /// <p>TLE data that you provide directly instead of using an Amazon S3 object.</p>
    pub fn set_tle_data(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TleData>>) -> Self {
        self.tle_data = input;
        self
    }
    /// <p>TLE data that you provide directly instead of using an Amazon S3 object.</p>
    pub fn get_tle_data(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TleData>> {
        &self.tle_data
    }
    /// Consumes the builder and constructs a [`TleEphemeris`](crate::types::TleEphemeris).
    pub fn build(self) -> crate::types::TleEphemeris {
        crate::types::TleEphemeris {
            s3_object: self.s3_object,
            tle_data: self.tle_data,
        }
    }
}
