// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Two-line element set (TLE) ephemeris.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TleEphemeris {
    /// <p>Identifies the S3 object to be used as the ephemeris.</p>
    #[doc(hidden)]
    pub s3_object: std::option::Option<crate::types::S3Object>,
    /// <p>The data for a TLE ephemeris, supplied directly in the request rather than through an S3 object.</p>
    #[doc(hidden)]
    pub tle_data: std::option::Option<std::vec::Vec<crate::types::TleData>>,
}
impl TleEphemeris {
    /// <p>Identifies the S3 object to be used as the ephemeris.</p>
    pub fn s3_object(&self) -> std::option::Option<&crate::types::S3Object> {
        self.s3_object.as_ref()
    }
    /// <p>The data for a TLE ephemeris, supplied directly in the request rather than through an S3 object.</p>
    pub fn tle_data(&self) -> std::option::Option<&[crate::types::TleData]> {
        self.tle_data.as_deref()
    }
}
impl TleEphemeris {
    /// Creates a new builder-style object to manufacture [`TleEphemeris`](crate::types::TleEphemeris).
    pub fn builder() -> crate::types::builders::TleEphemerisBuilder {
        crate::types::builders::TleEphemerisBuilder::default()
    }
}

/// A builder for [`TleEphemeris`](crate::types::TleEphemeris).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TleEphemerisBuilder {
    pub(crate) s3_object: std::option::Option<crate::types::S3Object>,
    pub(crate) tle_data: std::option::Option<std::vec::Vec<crate::types::TleData>>,
}
impl TleEphemerisBuilder {
    /// <p>Identifies the S3 object to be used as the ephemeris.</p>
    pub fn s3_object(mut self, input: crate::types::S3Object) -> Self {
        self.s3_object = Some(input);
        self
    }
    /// <p>Identifies the S3 object to be used as the ephemeris.</p>
    pub fn set_s3_object(mut self, input: std::option::Option<crate::types::S3Object>) -> Self {
        self.s3_object = input;
        self
    }
    /// Appends an item to `tle_data`.
    ///
    /// To override the contents of this collection use [`set_tle_data`](Self::set_tle_data).
    ///
    /// <p>The data for a TLE ephemeris, supplied directly in the request rather than through an S3 object.</p>
    pub fn tle_data(mut self, input: crate::types::TleData) -> Self {
        let mut v = self.tle_data.unwrap_or_default();
        v.push(input);
        self.tle_data = Some(v);
        self
    }
    /// <p>The data for a TLE ephemeris, supplied directly in the request rather than through an S3 object.</p>
    pub fn set_tle_data(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TleData>>,
    ) -> Self {
        self.tle_data = input;
        self
    }
    /// Consumes the builder and constructs a [`TleEphemeris`](crate::types::TleEphemeris).
    pub fn build(self) -> crate::types::TleEphemeris {
        crate::types::TleEphemeris {
            s3_object: self.s3_object,
            tle_data: self.tle_data,
        }
    }
}
