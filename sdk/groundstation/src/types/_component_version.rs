// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Version information for agent components.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ComponentVersion {
    /// <p>Component type.</p>
    pub component_type: ::std::string::String,
    /// <p>List of versions.</p>
    pub versions: ::std::vec::Vec<::std::string::String>,
}
impl ComponentVersion {
    /// <p>Component type.</p>
    pub fn component_type(&self) -> &str {
        use std::ops::Deref;
        self.component_type.deref()
    }
    /// <p>List of versions.</p>
    pub fn versions(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.versions.deref()
    }
}
impl ComponentVersion {
    /// Creates a new builder-style object to manufacture [`ComponentVersion`](crate::types::ComponentVersion).
    pub fn builder() -> crate::types::builders::ComponentVersionBuilder {
        crate::types::builders::ComponentVersionBuilder::default()
    }
}

/// A builder for [`ComponentVersion`](crate::types::ComponentVersion).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ComponentVersionBuilder {
    pub(crate) component_type: ::std::option::Option<::std::string::String>,
    pub(crate) versions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ComponentVersionBuilder {
    /// <p>Component type.</p>
    /// This field is required.
    pub fn component_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.component_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Component type.</p>
    pub fn set_component_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.component_type = input;
        self
    }
    /// <p>Component type.</p>
    pub fn get_component_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.component_type
    }
    /// Appends an item to `versions`.
    ///
    /// To override the contents of this collection use [`set_versions`](Self::set_versions).
    ///
    /// <p>List of versions.</p>
    pub fn versions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.versions.unwrap_or_default();
        v.push(input.into());
        self.versions = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of versions.</p>
    pub fn set_versions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.versions = input;
        self
    }
    /// <p>List of versions.</p>
    pub fn get_versions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.versions
    }
    /// Consumes the builder and constructs a [`ComponentVersion`](crate::types::ComponentVersion).
    /// This method will fail if any of the following fields are not set:
    /// - [`component_type`](crate::types::builders::ComponentVersionBuilder::component_type)
    /// - [`versions`](crate::types::builders::ComponentVersionBuilder::versions)
    pub fn build(self) -> ::std::result::Result<crate::types::ComponentVersion, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ComponentVersion {
            component_type: self.component_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "component_type",
                    "component_type was not specified but it is required when building ComponentVersion",
                )
            })?,
            versions: self.versions.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "versions",
                    "versions was not specified but it is required when building ComponentVersion",
                )
            })?,
        })
    }
}
