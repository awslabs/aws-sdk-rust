// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Ephemeris data.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum EphemerisData {
    /// <p>Azimuth elevation ephemeris data.</p>
    /// <p>Use this ephemeris type to provide pointing angles directly, rather than satellite orbital elements. Use this when you need precise antenna pointing but have imprecise or unknown satellite trajectory information.</p>
    /// <p>The azimuth elevation data specifies the antenna pointing direction at specific times relative to a ground station location. AWS Ground Station uses 4th order Lagrange interpolation to compute pointing angles between the provided data points.</p>
    /// <p>AWS Ground Station automatically filters interpolated pointing angles, including only those that are above the site mask elevation of the specified ground station.</p>
    /// <p>For more detail about providing azimuth elevation ephemerides to AWS Ground Station, see the <a href="https://docs.aws.amazon.com/ground-station/latest/ug/providing-azimuth-elevation-ephemeris-data.html">azimuth elevation ephemeris section</a> of the AWS Ground Station User Guide.</p>
    AzEl(crate::types::AzElEphemeris),
    /// <p>Ephemeris data in Orbit Ephemeris Message (OEM) format.</p>
    /// <p>AWS Ground Station processes OEM ephemerides according to the <a href="https://ccsds.org/wp-content/uploads/gravity_forms/5-448e85c647331d9cbaf66c096458bdd5/2025/01//502x0b3e1.pdf">CCSDS standard</a> with some extra restrictions. OEM files should be in KVN format. For more detail about the OEM format that AWS Ground Station supports, see <a href="https://docs.aws.amazon.com/ground-station/latest/ug/providing-oem-ephemeris-data.html#oem-ephemeris-format">OEM ephemeris format</a> in the AWS Ground Station user guide.</p>
    Oem(crate::types::OemEphemeris),
    /// <p>Two-line element set (TLE) ephemeris.</p>
    /// <p>For more detail about providing Two-line element sets to AWS Ground Station, see the <a href="https://docs.aws.amazon.com/ground-station/latest/ug/providing-tle-ephemeris-data.html">TLE section</a> of the AWS Ground Station user guide.</p>
    Tle(crate::types::TleEphemeris),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl EphemerisData {
    /// Tries to convert the enum instance into [`AzEl`](crate::types::EphemerisData::AzEl), extracting the inner [`AzElEphemeris`](crate::types::AzElEphemeris).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_az_el(&self) -> ::std::result::Result<&crate::types::AzElEphemeris, &Self> {
        if let EphemerisData::AzEl(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`AzEl`](crate::types::EphemerisData::AzEl).
    pub fn is_az_el(&self) -> bool {
        self.as_az_el().is_ok()
    }
    /// Tries to convert the enum instance into [`Oem`](crate::types::EphemerisData::Oem), extracting the inner [`OemEphemeris`](crate::types::OemEphemeris).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_oem(&self) -> ::std::result::Result<&crate::types::OemEphemeris, &Self> {
        if let EphemerisData::Oem(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Oem`](crate::types::EphemerisData::Oem).
    pub fn is_oem(&self) -> bool {
        self.as_oem().is_ok()
    }
    /// Tries to convert the enum instance into [`Tle`](crate::types::EphemerisData::Tle), extracting the inner [`TleEphemeris`](crate::types::TleEphemeris).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_tle(&self) -> ::std::result::Result<&crate::types::TleEphemeris, &Self> {
        if let EphemerisData::Tle(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Tle`](crate::types::EphemerisData::Tle).
    pub fn is_tle(&self) -> bool {
        self.as_tle().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
