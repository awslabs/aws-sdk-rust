// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `EphemerisErrorCode`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let ephemeriserrorcode = unimplemented!();
/// match ephemeriserrorcode {
///     EphemerisErrorCode::AzElSegmentsOutOfOrder => { /* ... */ },
///     EphemerisErrorCode::AzElSegmentEndTimeBeforeStartTime => { /* ... */ },
///     EphemerisErrorCode::AzElSegmentEndTimeInvalid => { /* ... */ },
///     EphemerisErrorCode::AzElSegmentEndTimeTooLate => { /* ... */ },
///     EphemerisErrorCode::AzElSegmentListMissing => { /* ... */ },
///     EphemerisErrorCode::AzElSegmentReferenceEpochInvalid => { /* ... */ },
///     EphemerisErrorCode::AzElSegmentStartTimeInvalid => { /* ... */ },
///     EphemerisErrorCode::AzElSegmentTimesOverlap => { /* ... */ },
///     EphemerisErrorCode::AzElSegmentValidTimeRangeInvalid => { /* ... */ },
///     EphemerisErrorCode::AzElTotalDurationExceeded => { /* ... */ },
///     EphemerisErrorCode::CenterBodyUnsupported => { /* ... */ },
///     EphemerisErrorCode::CreationDateMissing => { /* ... */ },
///     EphemerisErrorCode::EndTimeInPast => { /* ... */ },
///     EphemerisErrorCode::ExpirationTimeTooEarly => { /* ... */ },
///     EphemerisErrorCode::FileFormatInvalid => { /* ... */ },
///     EphemerisErrorCode::InsufficientKmsPermissions => { /* ... */ },
///     EphemerisErrorCode::InsufficientTimeAzEl => { /* ... */ },
///     EphemerisErrorCode::InternalError => { /* ... */ },
///     EphemerisErrorCode::InterpolationDegreeInvalid => { /* ... */ },
///     EphemerisErrorCode::InterpolationMissing => { /* ... */ },
///     EphemerisErrorCode::MeanMotionInvalid => { /* ... */ },
///     EphemerisErrorCode::MismatchedSatcatId => { /* ... */ },
///     EphemerisErrorCode::ObjectIdMissing => { /* ... */ },
///     EphemerisErrorCode::ObjectNameMissing => { /* ... */ },
///     EphemerisErrorCode::OemVersionUnsupported => { /* ... */ },
///     EphemerisErrorCode::OriginatorMissing => { /* ... */ },
///     EphemerisErrorCode::RefFrameEpochUnsupported => { /* ... */ },
///     EphemerisErrorCode::RefFrameUnsupported => { /* ... */ },
///     EphemerisErrorCode::StartTimeInFuture => { /* ... */ },
///     EphemerisErrorCode::StartTimeMetadataTooEarly => { /* ... */ },
///     EphemerisErrorCode::StopTimeMetadataTooLate => { /* ... */ },
///     EphemerisErrorCode::TimeAzElAngleUnitsInvalid => { /* ... */ },
///     EphemerisErrorCode::TimeAzElAzDegreeRangeInvalid => { /* ... */ },
///     EphemerisErrorCode::TimeAzElAzRadianRangeInvalid => { /* ... */ },
///     EphemerisErrorCode::TimeAzElElDegreeRangeInvalid => { /* ... */ },
///     EphemerisErrorCode::TimeAzElElRadianRangeInvalid => { /* ... */ },
///     EphemerisErrorCode::TimeAzElItemsOutOfOrder => { /* ... */ },
///     EphemerisErrorCode::TimeSystemUnsupported => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `ephemeriserrorcode` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `EphemerisErrorCode::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `EphemerisErrorCode::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `EphemerisErrorCode::NewFeature` is defined.
/// Specifically, when `ephemeriserrorcode` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `EphemerisErrorCode::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum EphemerisErrorCode {
    #[allow(missing_docs)] // documentation missing in model
    AzElSegmentsOutOfOrder,
    #[allow(missing_docs)] // documentation missing in model
    AzElSegmentEndTimeBeforeStartTime,
    #[allow(missing_docs)] // documentation missing in model
    AzElSegmentEndTimeInvalid,
    #[allow(missing_docs)] // documentation missing in model
    AzElSegmentEndTimeTooLate,
    #[allow(missing_docs)] // documentation missing in model
    AzElSegmentListMissing,
    #[allow(missing_docs)] // documentation missing in model
    AzElSegmentReferenceEpochInvalid,
    #[allow(missing_docs)] // documentation missing in model
    AzElSegmentStartTimeInvalid,
    #[allow(missing_docs)] // documentation missing in model
    AzElSegmentTimesOverlap,
    #[allow(missing_docs)] // documentation missing in model
    AzElSegmentValidTimeRangeInvalid,
    #[allow(missing_docs)] // documentation missing in model
    AzElTotalDurationExceeded,
    #[allow(missing_docs)] // documentation missing in model
    CenterBodyUnsupported,
    #[allow(missing_docs)] // documentation missing in model
    CreationDateMissing,
    #[allow(missing_docs)] // documentation missing in model
    EndTimeInPast,
    #[allow(missing_docs)] // documentation missing in model
    ExpirationTimeTooEarly,
    #[allow(missing_docs)] // documentation missing in model
    FileFormatInvalid,
    #[allow(missing_docs)] // documentation missing in model
    InsufficientKmsPermissions,
    #[allow(missing_docs)] // documentation missing in model
    InsufficientTimeAzEl,
    #[allow(missing_docs)] // documentation missing in model
    InternalError,
    #[allow(missing_docs)] // documentation missing in model
    InterpolationDegreeInvalid,
    #[allow(missing_docs)] // documentation missing in model
    InterpolationMissing,
    #[allow(missing_docs)] // documentation missing in model
    MeanMotionInvalid,
    #[allow(missing_docs)] // documentation missing in model
    MismatchedSatcatId,
    #[allow(missing_docs)] // documentation missing in model
    ObjectIdMissing,
    #[allow(missing_docs)] // documentation missing in model
    ObjectNameMissing,
    #[allow(missing_docs)] // documentation missing in model
    OemVersionUnsupported,
    #[allow(missing_docs)] // documentation missing in model
    OriginatorMissing,
    #[allow(missing_docs)] // documentation missing in model
    RefFrameEpochUnsupported,
    #[allow(missing_docs)] // documentation missing in model
    RefFrameUnsupported,
    #[allow(missing_docs)] // documentation missing in model
    StartTimeInFuture,
    #[allow(missing_docs)] // documentation missing in model
    StartTimeMetadataTooEarly,
    #[allow(missing_docs)] // documentation missing in model
    StopTimeMetadataTooLate,
    #[allow(missing_docs)] // documentation missing in model
    TimeAzElAngleUnitsInvalid,
    #[allow(missing_docs)] // documentation missing in model
    TimeAzElAzDegreeRangeInvalid,
    #[allow(missing_docs)] // documentation missing in model
    TimeAzElAzRadianRangeInvalid,
    #[allow(missing_docs)] // documentation missing in model
    TimeAzElElDegreeRangeInvalid,
    #[allow(missing_docs)] // documentation missing in model
    TimeAzElElRadianRangeInvalid,
    #[allow(missing_docs)] // documentation missing in model
    TimeAzElItemsOutOfOrder,
    #[allow(missing_docs)] // documentation missing in model
    TimeSystemUnsupported,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for EphemerisErrorCode {
    fn from(s: &str) -> Self {
        match s {
            "AZ_EL_SEGMENTS_OUT_OF_ORDER" => EphemerisErrorCode::AzElSegmentsOutOfOrder,
            "AZ_EL_SEGMENT_END_TIME_BEFORE_START_TIME" => EphemerisErrorCode::AzElSegmentEndTimeBeforeStartTime,
            "AZ_EL_SEGMENT_END_TIME_INVALID" => EphemerisErrorCode::AzElSegmentEndTimeInvalid,
            "AZ_EL_SEGMENT_END_TIME_TOO_LATE" => EphemerisErrorCode::AzElSegmentEndTimeTooLate,
            "AZ_EL_SEGMENT_LIST_MISSING" => EphemerisErrorCode::AzElSegmentListMissing,
            "AZ_EL_SEGMENT_REFERENCE_EPOCH_INVALID" => EphemerisErrorCode::AzElSegmentReferenceEpochInvalid,
            "AZ_EL_SEGMENT_START_TIME_INVALID" => EphemerisErrorCode::AzElSegmentStartTimeInvalid,
            "AZ_EL_SEGMENT_TIMES_OVERLAP" => EphemerisErrorCode::AzElSegmentTimesOverlap,
            "AZ_EL_SEGMENT_VALID_TIME_RANGE_INVALID" => EphemerisErrorCode::AzElSegmentValidTimeRangeInvalid,
            "AZ_EL_TOTAL_DURATION_EXCEEDED" => EphemerisErrorCode::AzElTotalDurationExceeded,
            "CENTER_BODY_UNSUPPORTED" => EphemerisErrorCode::CenterBodyUnsupported,
            "CREATION_DATE_MISSING" => EphemerisErrorCode::CreationDateMissing,
            "END_TIME_IN_PAST" => EphemerisErrorCode::EndTimeInPast,
            "EXPIRATION_TIME_TOO_EARLY" => EphemerisErrorCode::ExpirationTimeTooEarly,
            "FILE_FORMAT_INVALID" => EphemerisErrorCode::FileFormatInvalid,
            "INSUFFICIENT_KMS_PERMISSIONS" => EphemerisErrorCode::InsufficientKmsPermissions,
            "INSUFFICIENT_TIME_AZ_EL" => EphemerisErrorCode::InsufficientTimeAzEl,
            "INTERNAL_ERROR" => EphemerisErrorCode::InternalError,
            "INTERPOLATION_DEGREE_INVALID" => EphemerisErrorCode::InterpolationDegreeInvalid,
            "INTERPOLATION_MISSING" => EphemerisErrorCode::InterpolationMissing,
            "MEAN_MOTION_INVALID" => EphemerisErrorCode::MeanMotionInvalid,
            "MISMATCHED_SATCAT_ID" => EphemerisErrorCode::MismatchedSatcatId,
            "OBJECT_ID_MISSING" => EphemerisErrorCode::ObjectIdMissing,
            "OBJECT_NAME_MISSING" => EphemerisErrorCode::ObjectNameMissing,
            "OEM_VERSION_UNSUPPORTED" => EphemerisErrorCode::OemVersionUnsupported,
            "ORIGINATOR_MISSING" => EphemerisErrorCode::OriginatorMissing,
            "REF_FRAME_EPOCH_UNSUPPORTED" => EphemerisErrorCode::RefFrameEpochUnsupported,
            "REF_FRAME_UNSUPPORTED" => EphemerisErrorCode::RefFrameUnsupported,
            "START_TIME_IN_FUTURE" => EphemerisErrorCode::StartTimeInFuture,
            "START_TIME_METADATA_TOO_EARLY" => EphemerisErrorCode::StartTimeMetadataTooEarly,
            "STOP_TIME_METADATA_TOO_LATE" => EphemerisErrorCode::StopTimeMetadataTooLate,
            "TIME_AZ_EL_ANGLE_UNITS_INVALID" => EphemerisErrorCode::TimeAzElAngleUnitsInvalid,
            "TIME_AZ_EL_AZ_DEGREE_RANGE_INVALID" => EphemerisErrorCode::TimeAzElAzDegreeRangeInvalid,
            "TIME_AZ_EL_AZ_RADIAN_RANGE_INVALID" => EphemerisErrorCode::TimeAzElAzRadianRangeInvalid,
            "TIME_AZ_EL_EL_DEGREE_RANGE_INVALID" => EphemerisErrorCode::TimeAzElElDegreeRangeInvalid,
            "TIME_AZ_EL_EL_RADIAN_RANGE_INVALID" => EphemerisErrorCode::TimeAzElElRadianRangeInvalid,
            "TIME_AZ_EL_ITEMS_OUT_OF_ORDER" => EphemerisErrorCode::TimeAzElItemsOutOfOrder,
            "TIME_SYSTEM_UNSUPPORTED" => EphemerisErrorCode::TimeSystemUnsupported,
            other => EphemerisErrorCode::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for EphemerisErrorCode {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(EphemerisErrorCode::from(s))
    }
}
impl EphemerisErrorCode {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            EphemerisErrorCode::AzElSegmentsOutOfOrder => "AZ_EL_SEGMENTS_OUT_OF_ORDER",
            EphemerisErrorCode::AzElSegmentEndTimeBeforeStartTime => "AZ_EL_SEGMENT_END_TIME_BEFORE_START_TIME",
            EphemerisErrorCode::AzElSegmentEndTimeInvalid => "AZ_EL_SEGMENT_END_TIME_INVALID",
            EphemerisErrorCode::AzElSegmentEndTimeTooLate => "AZ_EL_SEGMENT_END_TIME_TOO_LATE",
            EphemerisErrorCode::AzElSegmentListMissing => "AZ_EL_SEGMENT_LIST_MISSING",
            EphemerisErrorCode::AzElSegmentReferenceEpochInvalid => "AZ_EL_SEGMENT_REFERENCE_EPOCH_INVALID",
            EphemerisErrorCode::AzElSegmentStartTimeInvalid => "AZ_EL_SEGMENT_START_TIME_INVALID",
            EphemerisErrorCode::AzElSegmentTimesOverlap => "AZ_EL_SEGMENT_TIMES_OVERLAP",
            EphemerisErrorCode::AzElSegmentValidTimeRangeInvalid => "AZ_EL_SEGMENT_VALID_TIME_RANGE_INVALID",
            EphemerisErrorCode::AzElTotalDurationExceeded => "AZ_EL_TOTAL_DURATION_EXCEEDED",
            EphemerisErrorCode::CenterBodyUnsupported => "CENTER_BODY_UNSUPPORTED",
            EphemerisErrorCode::CreationDateMissing => "CREATION_DATE_MISSING",
            EphemerisErrorCode::EndTimeInPast => "END_TIME_IN_PAST",
            EphemerisErrorCode::ExpirationTimeTooEarly => "EXPIRATION_TIME_TOO_EARLY",
            EphemerisErrorCode::FileFormatInvalid => "FILE_FORMAT_INVALID",
            EphemerisErrorCode::InsufficientKmsPermissions => "INSUFFICIENT_KMS_PERMISSIONS",
            EphemerisErrorCode::InsufficientTimeAzEl => "INSUFFICIENT_TIME_AZ_EL",
            EphemerisErrorCode::InternalError => "INTERNAL_ERROR",
            EphemerisErrorCode::InterpolationDegreeInvalid => "INTERPOLATION_DEGREE_INVALID",
            EphemerisErrorCode::InterpolationMissing => "INTERPOLATION_MISSING",
            EphemerisErrorCode::MeanMotionInvalid => "MEAN_MOTION_INVALID",
            EphemerisErrorCode::MismatchedSatcatId => "MISMATCHED_SATCAT_ID",
            EphemerisErrorCode::ObjectIdMissing => "OBJECT_ID_MISSING",
            EphemerisErrorCode::ObjectNameMissing => "OBJECT_NAME_MISSING",
            EphemerisErrorCode::OemVersionUnsupported => "OEM_VERSION_UNSUPPORTED",
            EphemerisErrorCode::OriginatorMissing => "ORIGINATOR_MISSING",
            EphemerisErrorCode::RefFrameEpochUnsupported => "REF_FRAME_EPOCH_UNSUPPORTED",
            EphemerisErrorCode::RefFrameUnsupported => "REF_FRAME_UNSUPPORTED",
            EphemerisErrorCode::StartTimeInFuture => "START_TIME_IN_FUTURE",
            EphemerisErrorCode::StartTimeMetadataTooEarly => "START_TIME_METADATA_TOO_EARLY",
            EphemerisErrorCode::StopTimeMetadataTooLate => "STOP_TIME_METADATA_TOO_LATE",
            EphemerisErrorCode::TimeAzElAngleUnitsInvalid => "TIME_AZ_EL_ANGLE_UNITS_INVALID",
            EphemerisErrorCode::TimeAzElAzDegreeRangeInvalid => "TIME_AZ_EL_AZ_DEGREE_RANGE_INVALID",
            EphemerisErrorCode::TimeAzElAzRadianRangeInvalid => "TIME_AZ_EL_AZ_RADIAN_RANGE_INVALID",
            EphemerisErrorCode::TimeAzElElDegreeRangeInvalid => "TIME_AZ_EL_EL_DEGREE_RANGE_INVALID",
            EphemerisErrorCode::TimeAzElElRadianRangeInvalid => "TIME_AZ_EL_EL_RADIAN_RANGE_INVALID",
            EphemerisErrorCode::TimeAzElItemsOutOfOrder => "TIME_AZ_EL_ITEMS_OUT_OF_ORDER",
            EphemerisErrorCode::TimeSystemUnsupported => "TIME_SYSTEM_UNSUPPORTED",
            EphemerisErrorCode::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AZ_EL_SEGMENTS_OUT_OF_ORDER",
            "AZ_EL_SEGMENT_END_TIME_BEFORE_START_TIME",
            "AZ_EL_SEGMENT_END_TIME_INVALID",
            "AZ_EL_SEGMENT_END_TIME_TOO_LATE",
            "AZ_EL_SEGMENT_LIST_MISSING",
            "AZ_EL_SEGMENT_REFERENCE_EPOCH_INVALID",
            "AZ_EL_SEGMENT_START_TIME_INVALID",
            "AZ_EL_SEGMENT_TIMES_OVERLAP",
            "AZ_EL_SEGMENT_VALID_TIME_RANGE_INVALID",
            "AZ_EL_TOTAL_DURATION_EXCEEDED",
            "CENTER_BODY_UNSUPPORTED",
            "CREATION_DATE_MISSING",
            "END_TIME_IN_PAST",
            "EXPIRATION_TIME_TOO_EARLY",
            "FILE_FORMAT_INVALID",
            "INSUFFICIENT_KMS_PERMISSIONS",
            "INSUFFICIENT_TIME_AZ_EL",
            "INTERNAL_ERROR",
            "INTERPOLATION_DEGREE_INVALID",
            "INTERPOLATION_MISSING",
            "MEAN_MOTION_INVALID",
            "MISMATCHED_SATCAT_ID",
            "OBJECT_ID_MISSING",
            "OBJECT_NAME_MISSING",
            "OEM_VERSION_UNSUPPORTED",
            "ORIGINATOR_MISSING",
            "REF_FRAME_EPOCH_UNSUPPORTED",
            "REF_FRAME_UNSUPPORTED",
            "START_TIME_IN_FUTURE",
            "START_TIME_METADATA_TOO_EARLY",
            "STOP_TIME_METADATA_TOO_LATE",
            "TIME_AZ_EL_ANGLE_UNITS_INVALID",
            "TIME_AZ_EL_AZ_DEGREE_RANGE_INVALID",
            "TIME_AZ_EL_AZ_RADIAN_RANGE_INVALID",
            "TIME_AZ_EL_EL_DEGREE_RANGE_INVALID",
            "TIME_AZ_EL_EL_RADIAN_RANGE_INVALID",
            "TIME_AZ_EL_ITEMS_OUT_OF_ORDER",
            "TIME_SYSTEM_UNSUPPORTED",
        ]
    }
}
impl ::std::convert::AsRef<str> for EphemerisErrorCode {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl EphemerisErrorCode {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for EphemerisErrorCode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            EphemerisErrorCode::AzElSegmentsOutOfOrder => write!(f, "AZ_EL_SEGMENTS_OUT_OF_ORDER"),
            EphemerisErrorCode::AzElSegmentEndTimeBeforeStartTime => write!(f, "AZ_EL_SEGMENT_END_TIME_BEFORE_START_TIME"),
            EphemerisErrorCode::AzElSegmentEndTimeInvalid => write!(f, "AZ_EL_SEGMENT_END_TIME_INVALID"),
            EphemerisErrorCode::AzElSegmentEndTimeTooLate => write!(f, "AZ_EL_SEGMENT_END_TIME_TOO_LATE"),
            EphemerisErrorCode::AzElSegmentListMissing => write!(f, "AZ_EL_SEGMENT_LIST_MISSING"),
            EphemerisErrorCode::AzElSegmentReferenceEpochInvalid => write!(f, "AZ_EL_SEGMENT_REFERENCE_EPOCH_INVALID"),
            EphemerisErrorCode::AzElSegmentStartTimeInvalid => write!(f, "AZ_EL_SEGMENT_START_TIME_INVALID"),
            EphemerisErrorCode::AzElSegmentTimesOverlap => write!(f, "AZ_EL_SEGMENT_TIMES_OVERLAP"),
            EphemerisErrorCode::AzElSegmentValidTimeRangeInvalid => write!(f, "AZ_EL_SEGMENT_VALID_TIME_RANGE_INVALID"),
            EphemerisErrorCode::AzElTotalDurationExceeded => write!(f, "AZ_EL_TOTAL_DURATION_EXCEEDED"),
            EphemerisErrorCode::CenterBodyUnsupported => write!(f, "CENTER_BODY_UNSUPPORTED"),
            EphemerisErrorCode::CreationDateMissing => write!(f, "CREATION_DATE_MISSING"),
            EphemerisErrorCode::EndTimeInPast => write!(f, "END_TIME_IN_PAST"),
            EphemerisErrorCode::ExpirationTimeTooEarly => write!(f, "EXPIRATION_TIME_TOO_EARLY"),
            EphemerisErrorCode::FileFormatInvalid => write!(f, "FILE_FORMAT_INVALID"),
            EphemerisErrorCode::InsufficientKmsPermissions => write!(f, "INSUFFICIENT_KMS_PERMISSIONS"),
            EphemerisErrorCode::InsufficientTimeAzEl => write!(f, "INSUFFICIENT_TIME_AZ_EL"),
            EphemerisErrorCode::InternalError => write!(f, "INTERNAL_ERROR"),
            EphemerisErrorCode::InterpolationDegreeInvalid => write!(f, "INTERPOLATION_DEGREE_INVALID"),
            EphemerisErrorCode::InterpolationMissing => write!(f, "INTERPOLATION_MISSING"),
            EphemerisErrorCode::MeanMotionInvalid => write!(f, "MEAN_MOTION_INVALID"),
            EphemerisErrorCode::MismatchedSatcatId => write!(f, "MISMATCHED_SATCAT_ID"),
            EphemerisErrorCode::ObjectIdMissing => write!(f, "OBJECT_ID_MISSING"),
            EphemerisErrorCode::ObjectNameMissing => write!(f, "OBJECT_NAME_MISSING"),
            EphemerisErrorCode::OemVersionUnsupported => write!(f, "OEM_VERSION_UNSUPPORTED"),
            EphemerisErrorCode::OriginatorMissing => write!(f, "ORIGINATOR_MISSING"),
            EphemerisErrorCode::RefFrameEpochUnsupported => write!(f, "REF_FRAME_EPOCH_UNSUPPORTED"),
            EphemerisErrorCode::RefFrameUnsupported => write!(f, "REF_FRAME_UNSUPPORTED"),
            EphemerisErrorCode::StartTimeInFuture => write!(f, "START_TIME_IN_FUTURE"),
            EphemerisErrorCode::StartTimeMetadataTooEarly => write!(f, "START_TIME_METADATA_TOO_EARLY"),
            EphemerisErrorCode::StopTimeMetadataTooLate => write!(f, "STOP_TIME_METADATA_TOO_LATE"),
            EphemerisErrorCode::TimeAzElAngleUnitsInvalid => write!(f, "TIME_AZ_EL_ANGLE_UNITS_INVALID"),
            EphemerisErrorCode::TimeAzElAzDegreeRangeInvalid => write!(f, "TIME_AZ_EL_AZ_DEGREE_RANGE_INVALID"),
            EphemerisErrorCode::TimeAzElAzRadianRangeInvalid => write!(f, "TIME_AZ_EL_AZ_RADIAN_RANGE_INVALID"),
            EphemerisErrorCode::TimeAzElElDegreeRangeInvalid => write!(f, "TIME_AZ_EL_EL_DEGREE_RANGE_INVALID"),
            EphemerisErrorCode::TimeAzElElRadianRangeInvalid => write!(f, "TIME_AZ_EL_EL_RADIAN_RANGE_INVALID"),
            EphemerisErrorCode::TimeAzElItemsOutOfOrder => write!(f, "TIME_AZ_EL_ITEMS_OUT_OF_ORDER"),
            EphemerisErrorCode::TimeSystemUnsupported => write!(f, "TIME_SYSTEM_UNSUPPORTED"),
            EphemerisErrorCode::Unknown(value) => write!(f, "{}", value),
        }
    }
}
