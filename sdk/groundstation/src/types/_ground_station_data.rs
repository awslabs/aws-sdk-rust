// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the ground station data.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GroundStationData {
    /// <p>UUID of a ground station.</p>
    #[doc(hidden)]
    pub ground_station_id: std::option::Option<std::string::String>,
    /// <p>Name of a ground station.</p>
    #[doc(hidden)]
    pub ground_station_name: std::option::Option<std::string::String>,
    /// <p>Ground station Region.</p>
    #[doc(hidden)]
    pub region: std::option::Option<std::string::String>,
}
impl GroundStationData {
    /// <p>UUID of a ground station.</p>
    pub fn ground_station_id(&self) -> std::option::Option<&str> {
        self.ground_station_id.as_deref()
    }
    /// <p>Name of a ground station.</p>
    pub fn ground_station_name(&self) -> std::option::Option<&str> {
        self.ground_station_name.as_deref()
    }
    /// <p>Ground station Region.</p>
    pub fn region(&self) -> std::option::Option<&str> {
        self.region.as_deref()
    }
}
impl GroundStationData {
    /// Creates a new builder-style object to manufacture [`GroundStationData`](crate::types::GroundStationData).
    pub fn builder() -> crate::types::builders::GroundStationDataBuilder {
        crate::types::builders::GroundStationDataBuilder::default()
    }
}

/// A builder for [`GroundStationData`](crate::types::GroundStationData).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GroundStationDataBuilder {
    pub(crate) ground_station_id: std::option::Option<std::string::String>,
    pub(crate) ground_station_name: std::option::Option<std::string::String>,
    pub(crate) region: std::option::Option<std::string::String>,
}
impl GroundStationDataBuilder {
    /// <p>UUID of a ground station.</p>
    pub fn ground_station_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.ground_station_id = Some(input.into());
        self
    }
    /// <p>UUID of a ground station.</p>
    pub fn set_ground_station_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.ground_station_id = input;
        self
    }
    /// <p>Name of a ground station.</p>
    pub fn ground_station_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.ground_station_name = Some(input.into());
        self
    }
    /// <p>Name of a ground station.</p>
    pub fn set_ground_station_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.ground_station_name = input;
        self
    }
    /// <p>Ground station Region.</p>
    pub fn region(mut self, input: impl Into<std::string::String>) -> Self {
        self.region = Some(input.into());
        self
    }
    /// <p>Ground station Region.</p>
    pub fn set_region(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// Consumes the builder and constructs a [`GroundStationData`](crate::types::GroundStationData).
    pub fn build(self) -> crate::types::GroundStationData {
        crate::types::GroundStationData {
            ground_station_id: self.ground_station_id,
            ground_station_name: self.ground_station_name,
            region: self.region,
        }
    }
}
