// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Overrides the default tracking configuration on an antenna during a contact.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TrackingOverrides {
    /// <p>Program track settings to override for antenna tracking during the contact.</p>
    pub program_track_settings: ::std::option::Option<crate::types::ProgramTrackSettings>,
}
impl TrackingOverrides {
    /// <p>Program track settings to override for antenna tracking during the contact.</p>
    pub fn program_track_settings(&self) -> ::std::option::Option<&crate::types::ProgramTrackSettings> {
        self.program_track_settings.as_ref()
    }
}
impl TrackingOverrides {
    /// Creates a new builder-style object to manufacture [`TrackingOverrides`](crate::types::TrackingOverrides).
    pub fn builder() -> crate::types::builders::TrackingOverridesBuilder {
        crate::types::builders::TrackingOverridesBuilder::default()
    }
}

/// A builder for [`TrackingOverrides`](crate::types::TrackingOverrides).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TrackingOverridesBuilder {
    pub(crate) program_track_settings: ::std::option::Option<crate::types::ProgramTrackSettings>,
}
impl TrackingOverridesBuilder {
    /// <p>Program track settings to override for antenna tracking during the contact.</p>
    /// This field is required.
    pub fn program_track_settings(mut self, input: crate::types::ProgramTrackSettings) -> Self {
        self.program_track_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>Program track settings to override for antenna tracking during the contact.</p>
    pub fn set_program_track_settings(mut self, input: ::std::option::Option<crate::types::ProgramTrackSettings>) -> Self {
        self.program_track_settings = input;
        self
    }
    /// <p>Program track settings to override for antenna tracking during the contact.</p>
    pub fn get_program_track_settings(&self) -> &::std::option::Option<crate::types::ProgramTrackSettings> {
        &self.program_track_settings
    }
    /// Consumes the builder and constructs a [`TrackingOverrides`](crate::types::TrackingOverrides).
    pub fn build(self) -> crate::types::TrackingOverrides {
        crate::types::TrackingOverrides {
            program_track_settings: self.program_track_settings,
        }
    }
}
