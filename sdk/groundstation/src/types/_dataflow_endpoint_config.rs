// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the dataflow endpoint <code>Config</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataflowEndpointConfig {
    /// <p>Name of a dataflow endpoint.</p>
    pub dataflow_endpoint_name: ::std::string::String,
    /// <p>Region of a dataflow endpoint.</p>
    pub dataflow_endpoint_region: ::std::option::Option<::std::string::String>,
}
impl DataflowEndpointConfig {
    /// <p>Name of a dataflow endpoint.</p>
    pub fn dataflow_endpoint_name(&self) -> &str {
        use std::ops::Deref;
        self.dataflow_endpoint_name.deref()
    }
    /// <p>Region of a dataflow endpoint.</p>
    pub fn dataflow_endpoint_region(&self) -> ::std::option::Option<&str> {
        self.dataflow_endpoint_region.as_deref()
    }
}
impl DataflowEndpointConfig {
    /// Creates a new builder-style object to manufacture [`DataflowEndpointConfig`](crate::types::DataflowEndpointConfig).
    pub fn builder() -> crate::types::builders::DataflowEndpointConfigBuilder {
        crate::types::builders::DataflowEndpointConfigBuilder::default()
    }
}

/// A builder for [`DataflowEndpointConfig`](crate::types::DataflowEndpointConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DataflowEndpointConfigBuilder {
    pub(crate) dataflow_endpoint_name: ::std::option::Option<::std::string::String>,
    pub(crate) dataflow_endpoint_region: ::std::option::Option<::std::string::String>,
}
impl DataflowEndpointConfigBuilder {
    /// <p>Name of a dataflow endpoint.</p>
    /// This field is required.
    pub fn dataflow_endpoint_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dataflow_endpoint_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of a dataflow endpoint.</p>
    pub fn set_dataflow_endpoint_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dataflow_endpoint_name = input;
        self
    }
    /// <p>Name of a dataflow endpoint.</p>
    pub fn get_dataflow_endpoint_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.dataflow_endpoint_name
    }
    /// <p>Region of a dataflow endpoint.</p>
    pub fn dataflow_endpoint_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dataflow_endpoint_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Region of a dataflow endpoint.</p>
    pub fn set_dataflow_endpoint_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dataflow_endpoint_region = input;
        self
    }
    /// <p>Region of a dataflow endpoint.</p>
    pub fn get_dataflow_endpoint_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.dataflow_endpoint_region
    }
    /// Consumes the builder and constructs a [`DataflowEndpointConfig`](crate::types::DataflowEndpointConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`dataflow_endpoint_name`](crate::types::builders::DataflowEndpointConfigBuilder::dataflow_endpoint_name)
    pub fn build(self) -> ::std::result::Result<crate::types::DataflowEndpointConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DataflowEndpointConfig {
            dataflow_endpoint_name: self.dataflow_endpoint_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "dataflow_endpoint_name",
                    "dataflow_endpoint_name was not specified but it is required when building DataflowEndpointConfig",
                )
            })?,
            dataflow_endpoint_region: self.dataflow_endpoint_region,
        })
    }
}
