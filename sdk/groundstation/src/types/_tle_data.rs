// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Two-line element set (TLE) data.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TleData {
    /// <p>First line of two-line element set (TLE) data.</p>
    #[doc(hidden)]
    pub tle_line1: std::option::Option<std::string::String>,
    /// <p>Second line of two-line element set (TLE) data.</p>
    #[doc(hidden)]
    pub tle_line2: std::option::Option<std::string::String>,
    /// <p>The valid time range for the TLE. Gaps or overlap are not permitted.</p>
    #[doc(hidden)]
    pub valid_time_range: std::option::Option<crate::types::TimeRange>,
}
impl TleData {
    /// <p>First line of two-line element set (TLE) data.</p>
    pub fn tle_line1(&self) -> std::option::Option<&str> {
        self.tle_line1.as_deref()
    }
    /// <p>Second line of two-line element set (TLE) data.</p>
    pub fn tle_line2(&self) -> std::option::Option<&str> {
        self.tle_line2.as_deref()
    }
    /// <p>The valid time range for the TLE. Gaps or overlap are not permitted.</p>
    pub fn valid_time_range(&self) -> std::option::Option<&crate::types::TimeRange> {
        self.valid_time_range.as_ref()
    }
}
impl TleData {
    /// Creates a new builder-style object to manufacture [`TleData`](crate::types::TleData).
    pub fn builder() -> crate::types::builders::TleDataBuilder {
        crate::types::builders::TleDataBuilder::default()
    }
}

/// A builder for [`TleData`](crate::types::TleData).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TleDataBuilder {
    pub(crate) tle_line1: std::option::Option<std::string::String>,
    pub(crate) tle_line2: std::option::Option<std::string::String>,
    pub(crate) valid_time_range: std::option::Option<crate::types::TimeRange>,
}
impl TleDataBuilder {
    /// <p>First line of two-line element set (TLE) data.</p>
    pub fn tle_line1(mut self, input: impl Into<std::string::String>) -> Self {
        self.tle_line1 = Some(input.into());
        self
    }
    /// <p>First line of two-line element set (TLE) data.</p>
    pub fn set_tle_line1(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.tle_line1 = input;
        self
    }
    /// <p>Second line of two-line element set (TLE) data.</p>
    pub fn tle_line2(mut self, input: impl Into<std::string::String>) -> Self {
        self.tle_line2 = Some(input.into());
        self
    }
    /// <p>Second line of two-line element set (TLE) data.</p>
    pub fn set_tle_line2(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.tle_line2 = input;
        self
    }
    /// <p>The valid time range for the TLE. Gaps or overlap are not permitted.</p>
    pub fn valid_time_range(mut self, input: crate::types::TimeRange) -> Self {
        self.valid_time_range = Some(input);
        self
    }
    /// <p>The valid time range for the TLE. Gaps or overlap are not permitted.</p>
    pub fn set_valid_time_range(
        mut self,
        input: std::option::Option<crate::types::TimeRange>,
    ) -> Self {
        self.valid_time_range = input;
        self
    }
    /// Consumes the builder and constructs a [`TleData`](crate::types::TleData).
    pub fn build(self) -> crate::types::TleData {
        crate::types::TleData {
            tle_line1: self.tle_line1,
            tle_line2: self.tle_line2,
            valid_time_range: self.valid_time_range,
        }
    }
}
