// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Two-line element set (TLE) data.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TleData {
    /// <p>First line of two-line element set (TLE) data.</p>
    pub tle_line1: ::std::string::String,
    /// <p>Second line of two-line element set (TLE) data.</p>
    pub tle_line2: ::std::string::String,
    /// <p>The valid time range for the TLE. Gaps or overlap are not permitted.</p>
    pub valid_time_range: ::std::option::Option<crate::types::TimeRange>,
}
impl TleData {
    /// <p>First line of two-line element set (TLE) data.</p>
    pub fn tle_line1(&self) -> &str {
        use std::ops::Deref;
        self.tle_line1.deref()
    }
    /// <p>Second line of two-line element set (TLE) data.</p>
    pub fn tle_line2(&self) -> &str {
        use std::ops::Deref;
        self.tle_line2.deref()
    }
    /// <p>The valid time range for the TLE. Gaps or overlap are not permitted.</p>
    pub fn valid_time_range(&self) -> ::std::option::Option<&crate::types::TimeRange> {
        self.valid_time_range.as_ref()
    }
}
impl TleData {
    /// Creates a new builder-style object to manufacture [`TleData`](crate::types::TleData).
    pub fn builder() -> crate::types::builders::TleDataBuilder {
        crate::types::builders::TleDataBuilder::default()
    }
}

/// A builder for [`TleData`](crate::types::TleData).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TleDataBuilder {
    pub(crate) tle_line1: ::std::option::Option<::std::string::String>,
    pub(crate) tle_line2: ::std::option::Option<::std::string::String>,
    pub(crate) valid_time_range: ::std::option::Option<crate::types::TimeRange>,
}
impl TleDataBuilder {
    /// <p>First line of two-line element set (TLE) data.</p>
    /// This field is required.
    pub fn tle_line1(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tle_line1 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>First line of two-line element set (TLE) data.</p>
    pub fn set_tle_line1(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tle_line1 = input;
        self
    }
    /// <p>First line of two-line element set (TLE) data.</p>
    pub fn get_tle_line1(&self) -> &::std::option::Option<::std::string::String> {
        &self.tle_line1
    }
    /// <p>Second line of two-line element set (TLE) data.</p>
    /// This field is required.
    pub fn tle_line2(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tle_line2 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Second line of two-line element set (TLE) data.</p>
    pub fn set_tle_line2(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tle_line2 = input;
        self
    }
    /// <p>Second line of two-line element set (TLE) data.</p>
    pub fn get_tle_line2(&self) -> &::std::option::Option<::std::string::String> {
        &self.tle_line2
    }
    /// <p>The valid time range for the TLE. Gaps or overlap are not permitted.</p>
    /// This field is required.
    pub fn valid_time_range(mut self, input: crate::types::TimeRange) -> Self {
        self.valid_time_range = ::std::option::Option::Some(input);
        self
    }
    /// <p>The valid time range for the TLE. Gaps or overlap are not permitted.</p>
    pub fn set_valid_time_range(mut self, input: ::std::option::Option<crate::types::TimeRange>) -> Self {
        self.valid_time_range = input;
        self
    }
    /// <p>The valid time range for the TLE. Gaps or overlap are not permitted.</p>
    pub fn get_valid_time_range(&self) -> &::std::option::Option<crate::types::TimeRange> {
        &self.valid_time_range
    }
    /// Consumes the builder and constructs a [`TleData`](crate::types::TleData).
    /// This method will fail if any of the following fields are not set:
    /// - [`tle_line1`](crate::types::builders::TleDataBuilder::tle_line1)
    /// - [`tle_line2`](crate::types::builders::TleDataBuilder::tle_line2)
    pub fn build(self) -> ::std::result::Result<crate::types::TleData, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TleData {
            tle_line1: self.tle_line1.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "tle_line1",
                    "tle_line1 was not specified but it is required when building TleData",
                )
            })?,
            tle_line2: self.tle_line2.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "tle_line2",
                    "tle_line2 was not specified but it is required when building TleData",
                )
            })?,
            valid_time_range: self.valid_time_range,
        })
    }
}
