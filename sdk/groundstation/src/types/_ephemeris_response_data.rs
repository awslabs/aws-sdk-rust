// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Ephemeris data for a contact.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EphemerisResponseData {
    /// <p>Unique identifier of the ephemeris. Appears only for custom ephemerides.</p>
    pub ephemeris_id: ::std::option::Option<::std::string::String>,
    /// <p>Type of ephemeris.</p>
    pub ephemeris_type: crate::types::EphemerisType,
}
impl EphemerisResponseData {
    /// <p>Unique identifier of the ephemeris. Appears only for custom ephemerides.</p>
    pub fn ephemeris_id(&self) -> ::std::option::Option<&str> {
        self.ephemeris_id.as_deref()
    }
    /// <p>Type of ephemeris.</p>
    pub fn ephemeris_type(&self) -> &crate::types::EphemerisType {
        &self.ephemeris_type
    }
}
impl EphemerisResponseData {
    /// Creates a new builder-style object to manufacture [`EphemerisResponseData`](crate::types::EphemerisResponseData).
    pub fn builder() -> crate::types::builders::EphemerisResponseDataBuilder {
        crate::types::builders::EphemerisResponseDataBuilder::default()
    }
}

/// A builder for [`EphemerisResponseData`](crate::types::EphemerisResponseData).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EphemerisResponseDataBuilder {
    pub(crate) ephemeris_id: ::std::option::Option<::std::string::String>,
    pub(crate) ephemeris_type: ::std::option::Option<crate::types::EphemerisType>,
}
impl EphemerisResponseDataBuilder {
    /// <p>Unique identifier of the ephemeris. Appears only for custom ephemerides.</p>
    pub fn ephemeris_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ephemeris_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique identifier of the ephemeris. Appears only for custom ephemerides.</p>
    pub fn set_ephemeris_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ephemeris_id = input;
        self
    }
    /// <p>Unique identifier of the ephemeris. Appears only for custom ephemerides.</p>
    pub fn get_ephemeris_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ephemeris_id
    }
    /// <p>Type of ephemeris.</p>
    /// This field is required.
    pub fn ephemeris_type(mut self, input: crate::types::EphemerisType) -> Self {
        self.ephemeris_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Type of ephemeris.</p>
    pub fn set_ephemeris_type(mut self, input: ::std::option::Option<crate::types::EphemerisType>) -> Self {
        self.ephemeris_type = input;
        self
    }
    /// <p>Type of ephemeris.</p>
    pub fn get_ephemeris_type(&self) -> &::std::option::Option<crate::types::EphemerisType> {
        &self.ephemeris_type
    }
    /// Consumes the builder and constructs a [`EphemerisResponseData`](crate::types::EphemerisResponseData).
    /// This method will fail if any of the following fields are not set:
    /// - [`ephemeris_type`](crate::types::builders::EphemerisResponseDataBuilder::ephemeris_type)
    pub fn build(self) -> ::std::result::Result<crate::types::EphemerisResponseData, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EphemerisResponseData {
            ephemeris_id: self.ephemeris_id,
            ephemeris_type: self.ephemeris_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "ephemeris_type",
                    "ephemeris_type was not specified but it is required when building EphemerisResponseData",
                )
            })?,
        })
    }
}
