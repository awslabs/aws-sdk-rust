// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Data on the status of agent components.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ComponentStatusData {
    /// <p>The Component type.</p>
    pub component_type: ::std::string::String,
    /// <p>Capability ARN of the component.</p>
    pub capability_arn: ::std::string::String,
    /// <p>Component status.</p>
    pub status: crate::types::AgentStatus,
    /// <p>Bytes sent by the component.</p>
    pub bytes_sent: ::std::option::Option<i64>,
    /// <p>Bytes received by the component.</p>
    pub bytes_received: ::std::option::Option<i64>,
    /// <p>Packets dropped by component.</p>
    pub packets_dropped: ::std::option::Option<i64>,
    /// <p>Dataflow UUID associated with the component.</p>
    pub dataflow_id: ::std::string::String,
}
impl ComponentStatusData {
    /// <p>The Component type.</p>
    pub fn component_type(&self) -> &str {
        use std::ops::Deref;
        self.component_type.deref()
    }
    /// <p>Capability ARN of the component.</p>
    pub fn capability_arn(&self) -> &str {
        use std::ops::Deref;
        self.capability_arn.deref()
    }
    /// <p>Component status.</p>
    pub fn status(&self) -> &crate::types::AgentStatus {
        &self.status
    }
    /// <p>Bytes sent by the component.</p>
    pub fn bytes_sent(&self) -> ::std::option::Option<i64> {
        self.bytes_sent
    }
    /// <p>Bytes received by the component.</p>
    pub fn bytes_received(&self) -> ::std::option::Option<i64> {
        self.bytes_received
    }
    /// <p>Packets dropped by component.</p>
    pub fn packets_dropped(&self) -> ::std::option::Option<i64> {
        self.packets_dropped
    }
    /// <p>Dataflow UUID associated with the component.</p>
    pub fn dataflow_id(&self) -> &str {
        use std::ops::Deref;
        self.dataflow_id.deref()
    }
}
impl ComponentStatusData {
    /// Creates a new builder-style object to manufacture [`ComponentStatusData`](crate::types::ComponentStatusData).
    pub fn builder() -> crate::types::builders::ComponentStatusDataBuilder {
        crate::types::builders::ComponentStatusDataBuilder::default()
    }
}

/// A builder for [`ComponentStatusData`](crate::types::ComponentStatusData).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ComponentStatusDataBuilder {
    pub(crate) component_type: ::std::option::Option<::std::string::String>,
    pub(crate) capability_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::AgentStatus>,
    pub(crate) bytes_sent: ::std::option::Option<i64>,
    pub(crate) bytes_received: ::std::option::Option<i64>,
    pub(crate) packets_dropped: ::std::option::Option<i64>,
    pub(crate) dataflow_id: ::std::option::Option<::std::string::String>,
}
impl ComponentStatusDataBuilder {
    /// <p>The Component type.</p>
    /// This field is required.
    pub fn component_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.component_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Component type.</p>
    pub fn set_component_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.component_type = input;
        self
    }
    /// <p>The Component type.</p>
    pub fn get_component_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.component_type
    }
    /// <p>Capability ARN of the component.</p>
    /// This field is required.
    pub fn capability_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.capability_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Capability ARN of the component.</p>
    pub fn set_capability_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.capability_arn = input;
        self
    }
    /// <p>Capability ARN of the component.</p>
    pub fn get_capability_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.capability_arn
    }
    /// <p>Component status.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::AgentStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Component status.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::AgentStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Component status.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::AgentStatus> {
        &self.status
    }
    /// <p>Bytes sent by the component.</p>
    pub fn bytes_sent(mut self, input: i64) -> Self {
        self.bytes_sent = ::std::option::Option::Some(input);
        self
    }
    /// <p>Bytes sent by the component.</p>
    pub fn set_bytes_sent(mut self, input: ::std::option::Option<i64>) -> Self {
        self.bytes_sent = input;
        self
    }
    /// <p>Bytes sent by the component.</p>
    pub fn get_bytes_sent(&self) -> &::std::option::Option<i64> {
        &self.bytes_sent
    }
    /// <p>Bytes received by the component.</p>
    pub fn bytes_received(mut self, input: i64) -> Self {
        self.bytes_received = ::std::option::Option::Some(input);
        self
    }
    /// <p>Bytes received by the component.</p>
    pub fn set_bytes_received(mut self, input: ::std::option::Option<i64>) -> Self {
        self.bytes_received = input;
        self
    }
    /// <p>Bytes received by the component.</p>
    pub fn get_bytes_received(&self) -> &::std::option::Option<i64> {
        &self.bytes_received
    }
    /// <p>Packets dropped by component.</p>
    pub fn packets_dropped(mut self, input: i64) -> Self {
        self.packets_dropped = ::std::option::Option::Some(input);
        self
    }
    /// <p>Packets dropped by component.</p>
    pub fn set_packets_dropped(mut self, input: ::std::option::Option<i64>) -> Self {
        self.packets_dropped = input;
        self
    }
    /// <p>Packets dropped by component.</p>
    pub fn get_packets_dropped(&self) -> &::std::option::Option<i64> {
        &self.packets_dropped
    }
    /// <p>Dataflow UUID associated with the component.</p>
    /// This field is required.
    pub fn dataflow_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dataflow_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Dataflow UUID associated with the component.</p>
    pub fn set_dataflow_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dataflow_id = input;
        self
    }
    /// <p>Dataflow UUID associated with the component.</p>
    pub fn get_dataflow_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.dataflow_id
    }
    /// Consumes the builder and constructs a [`ComponentStatusData`](crate::types::ComponentStatusData).
    /// This method will fail if any of the following fields are not set:
    /// - [`component_type`](crate::types::builders::ComponentStatusDataBuilder::component_type)
    /// - [`capability_arn`](crate::types::builders::ComponentStatusDataBuilder::capability_arn)
    /// - [`status`](crate::types::builders::ComponentStatusDataBuilder::status)
    /// - [`dataflow_id`](crate::types::builders::ComponentStatusDataBuilder::dataflow_id)
    pub fn build(self) -> ::std::result::Result<crate::types::ComponentStatusData, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ComponentStatusData {
            component_type: self.component_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "component_type",
                    "component_type was not specified but it is required when building ComponentStatusData",
                )
            })?,
            capability_arn: self.capability_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "capability_arn",
                    "capability_arn was not specified but it is required when building ComponentStatusData",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building ComponentStatusData",
                )
            })?,
            bytes_sent: self.bytes_sent,
            bytes_received: self.bytes_received,
            packets_dropped: self.packets_dropped,
            dataflow_id: self.dataflow_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "dataflow_id",
                    "dataflow_id was not specified but it is required when building ComponentStatusData",
                )
            })?,
        })
    }
}
