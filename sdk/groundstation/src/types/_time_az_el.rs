// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Time-tagged azimuth elevation pointing data.</p>
/// <p>Specifies the antenna pointing direction at a specific time offset from the segment's reference epoch.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TimeAzEl {
    /// <p>Time offset in atomic seconds from the segment's reference epoch.</p>
    /// <p>All <code>dt</code> values within a segment must be in ascending order with no duplicates.</p>
    /// <p><code>dt</code> values may be:</p>
    /// <ul>
    /// <li>
    /// <p>negative</p></li>
    /// <li>
    /// <p>expressed as fractions of a second</p></li>
    /// <li>
    /// <p>expressed in scientific notation</p></li>
    /// </ul>
    pub dt: f64,
    /// <p>Azimuth angle at the specified time.</p>
    /// <p>Valid ranges by unit:</p>
    /// <ul>
    /// <li>
    /// <p><code>DEGREE_ANGLE</code>: -180 to 360 degrees, measured clockwise from true north</p></li>
    /// <li>
    /// <p><code>RADIAN</code>: -π to 2π radians, measured clockwise from true north</p></li>
    /// </ul>
    pub az: f64,
    /// <p>Elevation angle at the specified time.</p>
    /// <p>Valid ranges by unit:</p>
    /// <ul>
    /// <li>
    /// <p><code>DEGREE_ANGLE</code>: -90 to 90 degrees, where 0 is the horizon, 90 is zenith, and negative values are below the horizon</p></li>
    /// <li>
    /// <p><code>RADIAN</code>: -π/2 to π/2 radians, where 0 is the horizon, π/2 is zenith, and negative values are below the horizon</p></li>
    /// </ul>
    pub el: f64,
}
impl TimeAzEl {
    /// <p>Time offset in atomic seconds from the segment's reference epoch.</p>
    /// <p>All <code>dt</code> values within a segment must be in ascending order with no duplicates.</p>
    /// <p><code>dt</code> values may be:</p>
    /// <ul>
    /// <li>
    /// <p>negative</p></li>
    /// <li>
    /// <p>expressed as fractions of a second</p></li>
    /// <li>
    /// <p>expressed in scientific notation</p></li>
    /// </ul>
    pub fn dt(&self) -> f64 {
        self.dt
    }
    /// <p>Azimuth angle at the specified time.</p>
    /// <p>Valid ranges by unit:</p>
    /// <ul>
    /// <li>
    /// <p><code>DEGREE_ANGLE</code>: -180 to 360 degrees, measured clockwise from true north</p></li>
    /// <li>
    /// <p><code>RADIAN</code>: -π to 2π radians, measured clockwise from true north</p></li>
    /// </ul>
    pub fn az(&self) -> f64 {
        self.az
    }
    /// <p>Elevation angle at the specified time.</p>
    /// <p>Valid ranges by unit:</p>
    /// <ul>
    /// <li>
    /// <p><code>DEGREE_ANGLE</code>: -90 to 90 degrees, where 0 is the horizon, 90 is zenith, and negative values are below the horizon</p></li>
    /// <li>
    /// <p><code>RADIAN</code>: -π/2 to π/2 radians, where 0 is the horizon, π/2 is zenith, and negative values are below the horizon</p></li>
    /// </ul>
    pub fn el(&self) -> f64 {
        self.el
    }
}
impl TimeAzEl {
    /// Creates a new builder-style object to manufacture [`TimeAzEl`](crate::types::TimeAzEl).
    pub fn builder() -> crate::types::builders::TimeAzElBuilder {
        crate::types::builders::TimeAzElBuilder::default()
    }
}

/// A builder for [`TimeAzEl`](crate::types::TimeAzEl).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TimeAzElBuilder {
    pub(crate) dt: ::std::option::Option<f64>,
    pub(crate) az: ::std::option::Option<f64>,
    pub(crate) el: ::std::option::Option<f64>,
}
impl TimeAzElBuilder {
    /// <p>Time offset in atomic seconds from the segment's reference epoch.</p>
    /// <p>All <code>dt</code> values within a segment must be in ascending order with no duplicates.</p>
    /// <p><code>dt</code> values may be:</p>
    /// <ul>
    /// <li>
    /// <p>negative</p></li>
    /// <li>
    /// <p>expressed as fractions of a second</p></li>
    /// <li>
    /// <p>expressed in scientific notation</p></li>
    /// </ul>
    /// This field is required.
    pub fn dt(mut self, input: f64) -> Self {
        self.dt = ::std::option::Option::Some(input);
        self
    }
    /// <p>Time offset in atomic seconds from the segment's reference epoch.</p>
    /// <p>All <code>dt</code> values within a segment must be in ascending order with no duplicates.</p>
    /// <p><code>dt</code> values may be:</p>
    /// <ul>
    /// <li>
    /// <p>negative</p></li>
    /// <li>
    /// <p>expressed as fractions of a second</p></li>
    /// <li>
    /// <p>expressed in scientific notation</p></li>
    /// </ul>
    pub fn set_dt(mut self, input: ::std::option::Option<f64>) -> Self {
        self.dt = input;
        self
    }
    /// <p>Time offset in atomic seconds from the segment's reference epoch.</p>
    /// <p>All <code>dt</code> values within a segment must be in ascending order with no duplicates.</p>
    /// <p><code>dt</code> values may be:</p>
    /// <ul>
    /// <li>
    /// <p>negative</p></li>
    /// <li>
    /// <p>expressed as fractions of a second</p></li>
    /// <li>
    /// <p>expressed in scientific notation</p></li>
    /// </ul>
    pub fn get_dt(&self) -> &::std::option::Option<f64> {
        &self.dt
    }
    /// <p>Azimuth angle at the specified time.</p>
    /// <p>Valid ranges by unit:</p>
    /// <ul>
    /// <li>
    /// <p><code>DEGREE_ANGLE</code>: -180 to 360 degrees, measured clockwise from true north</p></li>
    /// <li>
    /// <p><code>RADIAN</code>: -π to 2π radians, measured clockwise from true north</p></li>
    /// </ul>
    /// This field is required.
    pub fn az(mut self, input: f64) -> Self {
        self.az = ::std::option::Option::Some(input);
        self
    }
    /// <p>Azimuth angle at the specified time.</p>
    /// <p>Valid ranges by unit:</p>
    /// <ul>
    /// <li>
    /// <p><code>DEGREE_ANGLE</code>: -180 to 360 degrees, measured clockwise from true north</p></li>
    /// <li>
    /// <p><code>RADIAN</code>: -π to 2π radians, measured clockwise from true north</p></li>
    /// </ul>
    pub fn set_az(mut self, input: ::std::option::Option<f64>) -> Self {
        self.az = input;
        self
    }
    /// <p>Azimuth angle at the specified time.</p>
    /// <p>Valid ranges by unit:</p>
    /// <ul>
    /// <li>
    /// <p><code>DEGREE_ANGLE</code>: -180 to 360 degrees, measured clockwise from true north</p></li>
    /// <li>
    /// <p><code>RADIAN</code>: -π to 2π radians, measured clockwise from true north</p></li>
    /// </ul>
    pub fn get_az(&self) -> &::std::option::Option<f64> {
        &self.az
    }
    /// <p>Elevation angle at the specified time.</p>
    /// <p>Valid ranges by unit:</p>
    /// <ul>
    /// <li>
    /// <p><code>DEGREE_ANGLE</code>: -90 to 90 degrees, where 0 is the horizon, 90 is zenith, and negative values are below the horizon</p></li>
    /// <li>
    /// <p><code>RADIAN</code>: -π/2 to π/2 radians, where 0 is the horizon, π/2 is zenith, and negative values are below the horizon</p></li>
    /// </ul>
    /// This field is required.
    pub fn el(mut self, input: f64) -> Self {
        self.el = ::std::option::Option::Some(input);
        self
    }
    /// <p>Elevation angle at the specified time.</p>
    /// <p>Valid ranges by unit:</p>
    /// <ul>
    /// <li>
    /// <p><code>DEGREE_ANGLE</code>: -90 to 90 degrees, where 0 is the horizon, 90 is zenith, and negative values are below the horizon</p></li>
    /// <li>
    /// <p><code>RADIAN</code>: -π/2 to π/2 radians, where 0 is the horizon, π/2 is zenith, and negative values are below the horizon</p></li>
    /// </ul>
    pub fn set_el(mut self, input: ::std::option::Option<f64>) -> Self {
        self.el = input;
        self
    }
    /// <p>Elevation angle at the specified time.</p>
    /// <p>Valid ranges by unit:</p>
    /// <ul>
    /// <li>
    /// <p><code>DEGREE_ANGLE</code>: -90 to 90 degrees, where 0 is the horizon, 90 is zenith, and negative values are below the horizon</p></li>
    /// <li>
    /// <p><code>RADIAN</code>: -π/2 to π/2 radians, where 0 is the horizon, π/2 is zenith, and negative values are below the horizon</p></li>
    /// </ul>
    pub fn get_el(&self) -> &::std::option::Option<f64> {
        &self.el
    }
    /// Consumes the builder and constructs a [`TimeAzEl`](crate::types::TimeAzEl).
    /// This method will fail if any of the following fields are not set:
    /// - [`dt`](crate::types::builders::TimeAzElBuilder::dt)
    /// - [`az`](crate::types::builders::TimeAzElBuilder::az)
    /// - [`el`](crate::types::builders::TimeAzElBuilder::el)
    pub fn build(self) -> ::std::result::Result<crate::types::TimeAzEl, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TimeAzEl {
            dt: self.dt.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "dt",
                    "dt was not specified but it is required when building TimeAzEl",
                )
            })?,
            az: self.az.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "az",
                    "az was not specified but it is required when building TimeAzEl",
                )
            })?,
            el: self.el.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "el",
                    "el was not specified but it is required when building TimeAzEl",
                )
            })?,
        })
    }
}
