// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Time range specified using ISO 8601 format timestamps.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Iso8601TimeRange {
    /// <p>Start time in ISO 8601 format in Coordinated Universal Time (UTC).</p>
    /// <p>Example: <code>2026-11-15T10:28:48.000Z</code></p>
    pub start_time: ::aws_smithy_types::DateTime,
    /// <p>End time in ISO 8601 format in Coordinated Universal Time (UTC).</p>
    /// <p>Example: <code>2024-01-15T12:00:00.000Z</code></p>
    pub end_time: ::aws_smithy_types::DateTime,
}
impl Iso8601TimeRange {
    /// <p>Start time in ISO 8601 format in Coordinated Universal Time (UTC).</p>
    /// <p>Example: <code>2026-11-15T10:28:48.000Z</code></p>
    pub fn start_time(&self) -> &::aws_smithy_types::DateTime {
        &self.start_time
    }
    /// <p>End time in ISO 8601 format in Coordinated Universal Time (UTC).</p>
    /// <p>Example: <code>2024-01-15T12:00:00.000Z</code></p>
    pub fn end_time(&self) -> &::aws_smithy_types::DateTime {
        &self.end_time
    }
}
impl Iso8601TimeRange {
    /// Creates a new builder-style object to manufacture [`Iso8601TimeRange`](crate::types::Iso8601TimeRange).
    pub fn builder() -> crate::types::builders::Iso8601TimeRangeBuilder {
        crate::types::builders::Iso8601TimeRangeBuilder::default()
    }
}

/// A builder for [`Iso8601TimeRange`](crate::types::Iso8601TimeRange).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct Iso8601TimeRangeBuilder {
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl Iso8601TimeRangeBuilder {
    /// <p>Start time in ISO 8601 format in Coordinated Universal Time (UTC).</p>
    /// <p>Example: <code>2026-11-15T10:28:48.000Z</code></p>
    /// This field is required.
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Start time in ISO 8601 format in Coordinated Universal Time (UTC).</p>
    /// <p>Example: <code>2026-11-15T10:28:48.000Z</code></p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>Start time in ISO 8601 format in Coordinated Universal Time (UTC).</p>
    /// <p>Example: <code>2026-11-15T10:28:48.000Z</code></p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>End time in ISO 8601 format in Coordinated Universal Time (UTC).</p>
    /// <p>Example: <code>2024-01-15T12:00:00.000Z</code></p>
    /// This field is required.
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>End time in ISO 8601 format in Coordinated Universal Time (UTC).</p>
    /// <p>Example: <code>2024-01-15T12:00:00.000Z</code></p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>End time in ISO 8601 format in Coordinated Universal Time (UTC).</p>
    /// <p>Example: <code>2024-01-15T12:00:00.000Z</code></p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// Consumes the builder and constructs a [`Iso8601TimeRange`](crate::types::Iso8601TimeRange).
    /// This method will fail if any of the following fields are not set:
    /// - [`start_time`](crate::types::builders::Iso8601TimeRangeBuilder::start_time)
    /// - [`end_time`](crate::types::builders::Iso8601TimeRangeBuilder::end_time)
    pub fn build(self) -> ::std::result::Result<crate::types::Iso8601TimeRange, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Iso8601TimeRange {
            start_time: self.start_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "start_time",
                    "start_time was not specified but it is required when building Iso8601TimeRange",
                )
            })?,
            end_time: self.end_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "end_time",
                    "end_time was not specified but it is required when building Iso8601TimeRange",
                )
            })?,
        })
    }
}
