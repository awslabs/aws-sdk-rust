// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Ephemeris item.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EphemerisItem {
    /// <p>The AWS Ground Station ephemeris ID.</p>
    #[doc(hidden)]
    pub ephemeris_id: std::option::Option<std::string::String>,
    /// <p>The status of the ephemeris.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::EphemerisStatus>,
    /// <p>Customer-provided priority score to establish the order in which overlapping ephemerides should be used.</p>
    /// <p>The default for customer-provided ephemeris priority is 1, and higher numbers take precedence.</p>
    /// <p>Priority must be 1 or greater</p>
    #[doc(hidden)]
    pub priority: std::option::Option<i32>,
    /// <p>Whether or not the ephemeris is enabled.</p>
    #[doc(hidden)]
    pub enabled: std::option::Option<bool>,
    /// <p>The time the ephemeris was uploaded in UTC.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>A name string associated with the ephemeris. Used as a human-readable identifier for the ephemeris.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>Source S3 object used for the ephemeris.</p>
    #[doc(hidden)]
    pub source_s3_object: std::option::Option<crate::types::S3Object>,
}
impl EphemerisItem {
    /// <p>The AWS Ground Station ephemeris ID.</p>
    pub fn ephemeris_id(&self) -> std::option::Option<&str> {
        self.ephemeris_id.as_deref()
    }
    /// <p>The status of the ephemeris.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::EphemerisStatus> {
        self.status.as_ref()
    }
    /// <p>Customer-provided priority score to establish the order in which overlapping ephemerides should be used.</p>
    /// <p>The default for customer-provided ephemeris priority is 1, and higher numbers take precedence.</p>
    /// <p>Priority must be 1 or greater</p>
    pub fn priority(&self) -> std::option::Option<i32> {
        self.priority
    }
    /// <p>Whether or not the ephemeris is enabled.</p>
    pub fn enabled(&self) -> std::option::Option<bool> {
        self.enabled
    }
    /// <p>The time the ephemeris was uploaded in UTC.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>A name string associated with the ephemeris. Used as a human-readable identifier for the ephemeris.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Source S3 object used for the ephemeris.</p>
    pub fn source_s3_object(&self) -> std::option::Option<&crate::types::S3Object> {
        self.source_s3_object.as_ref()
    }
}
impl EphemerisItem {
    /// Creates a new builder-style object to manufacture [`EphemerisItem`](crate::types::EphemerisItem).
    pub fn builder() -> crate::types::builders::EphemerisItemBuilder {
        crate::types::builders::EphemerisItemBuilder::default()
    }
}

/// A builder for [`EphemerisItem`](crate::types::EphemerisItem).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EphemerisItemBuilder {
    pub(crate) ephemeris_id: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::EphemerisStatus>,
    pub(crate) priority: std::option::Option<i32>,
    pub(crate) enabled: std::option::Option<bool>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) source_s3_object: std::option::Option<crate::types::S3Object>,
}
impl EphemerisItemBuilder {
    /// <p>The AWS Ground Station ephemeris ID.</p>
    pub fn ephemeris_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.ephemeris_id = Some(input.into());
        self
    }
    /// <p>The AWS Ground Station ephemeris ID.</p>
    pub fn set_ephemeris_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ephemeris_id = input;
        self
    }
    /// <p>The status of the ephemeris.</p>
    pub fn status(mut self, input: crate::types::EphemerisStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the ephemeris.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::EphemerisStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Customer-provided priority score to establish the order in which overlapping ephemerides should be used.</p>
    /// <p>The default for customer-provided ephemeris priority is 1, and higher numbers take precedence.</p>
    /// <p>Priority must be 1 or greater</p>
    pub fn priority(mut self, input: i32) -> Self {
        self.priority = Some(input);
        self
    }
    /// <p>Customer-provided priority score to establish the order in which overlapping ephemerides should be used.</p>
    /// <p>The default for customer-provided ephemeris priority is 1, and higher numbers take precedence.</p>
    /// <p>Priority must be 1 or greater</p>
    pub fn set_priority(mut self, input: std::option::Option<i32>) -> Self {
        self.priority = input;
        self
    }
    /// <p>Whether or not the ephemeris is enabled.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = Some(input);
        self
    }
    /// <p>Whether or not the ephemeris is enabled.</p>
    pub fn set_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>The time the ephemeris was uploaded in UTC.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The time the ephemeris was uploaded in UTC.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>A name string associated with the ephemeris. Used as a human-readable identifier for the ephemeris.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>A name string associated with the ephemeris. Used as a human-readable identifier for the ephemeris.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Source S3 object used for the ephemeris.</p>
    pub fn source_s3_object(mut self, input: crate::types::S3Object) -> Self {
        self.source_s3_object = Some(input);
        self
    }
    /// <p>Source S3 object used for the ephemeris.</p>
    pub fn set_source_s3_object(
        mut self,
        input: std::option::Option<crate::types::S3Object>,
    ) -> Self {
        self.source_s3_object = input;
        self
    }
    /// Consumes the builder and constructs a [`EphemerisItem`](crate::types::EphemerisItem).
    pub fn build(self) -> crate::types::EphemerisItem {
        crate::types::EphemerisItem {
            ephemeris_id: self.ephemeris_id,
            status: self.status,
            priority: self.priority,
            enabled: self.enabled,
            creation_time: self.creation_time,
            name: self.name,
            source_s3_object: self.source_s3_object,
        }
    }
}
