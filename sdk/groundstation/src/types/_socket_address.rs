// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the socket address.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SocketAddress {
    /// <p>Name of a socket address.</p>
    pub name: ::std::string::String,
    /// <p>Port of a socket address.</p>
    pub port: i32,
}
impl SocketAddress {
    /// <p>Name of a socket address.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>Port of a socket address.</p>
    pub fn port(&self) -> i32 {
        self.port
    }
}
impl SocketAddress {
    /// Creates a new builder-style object to manufacture [`SocketAddress`](crate::types::SocketAddress).
    pub fn builder() -> crate::types::builders::SocketAddressBuilder {
        crate::types::builders::SocketAddressBuilder::default()
    }
}

/// A builder for [`SocketAddress`](crate::types::SocketAddress).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SocketAddressBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) port: ::std::option::Option<i32>,
}
impl SocketAddressBuilder {
    /// <p>Name of a socket address.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of a socket address.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Name of a socket address.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Port of a socket address.</p>
    /// This field is required.
    pub fn port(mut self, input: i32) -> Self {
        self.port = ::std::option::Option::Some(input);
        self
    }
    /// <p>Port of a socket address.</p>
    pub fn set_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.port = input;
        self
    }
    /// <p>Port of a socket address.</p>
    pub fn get_port(&self) -> &::std::option::Option<i32> {
        &self.port
    }
    /// Consumes the builder and constructs a [`SocketAddress`](crate::types::SocketAddress).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::SocketAddressBuilder::name)
    /// - [`port`](crate::types::builders::SocketAddressBuilder::port)
    pub fn build(self) -> ::std::result::Result<crate::types::SocketAddress, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SocketAddress {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building SocketAddress",
                )
            })?,
            port: self.port.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "port",
                    "port was not specified but it is required when building SocketAddress",
                )
            })?,
        })
    }
}
