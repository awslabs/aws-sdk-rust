// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the socket address.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SocketAddress {
    /// <p>Name of a socket address.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>Port of a socket address.</p>
    #[doc(hidden)]
    pub port: std::option::Option<i32>,
}
impl SocketAddress {
    /// <p>Name of a socket address.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Port of a socket address.</p>
    pub fn port(&self) -> std::option::Option<i32> {
        self.port
    }
}
impl SocketAddress {
    /// Creates a new builder-style object to manufacture [`SocketAddress`](crate::types::SocketAddress).
    pub fn builder() -> crate::types::builders::SocketAddressBuilder {
        crate::types::builders::SocketAddressBuilder::default()
    }
}

/// A builder for [`SocketAddress`](crate::types::SocketAddress).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SocketAddressBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) port: std::option::Option<i32>,
}
impl SocketAddressBuilder {
    /// <p>Name of a socket address.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>Name of a socket address.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Port of a socket address.</p>
    pub fn port(mut self, input: i32) -> Self {
        self.port = Some(input);
        self
    }
    /// <p>Port of a socket address.</p>
    pub fn set_port(mut self, input: std::option::Option<i32>) -> Self {
        self.port = input;
        self
    }
    /// Consumes the builder and constructs a [`SocketAddress`](crate::types::SocketAddress).
    pub fn build(self) -> crate::types::SocketAddress {
        crate::types::SocketAddress {
            name: self.name,
            port: self.port,
        }
    }
}
