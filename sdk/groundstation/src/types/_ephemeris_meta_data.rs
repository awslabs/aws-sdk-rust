// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Metadata describing a particular ephemeris.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EphemerisMetaData {
    /// <p>The <code>EphemerisSource</code> that generated a given ephemeris.</p>
    pub source: crate::types::EphemerisSource,
    /// <p>UUID of a customer-provided ephemeris.</p>
    /// <p>This field is not populated for default ephemerides from Space Track.</p>
    pub ephemeris_id: ::std::option::Option<::std::string::String>,
    /// <p>The epoch of a default, ephemeris from Space Track in UTC.</p>
    /// <p>This field is not populated for customer-provided ephemerides.</p>
    pub epoch: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A name string associated with the ephemeris. Used as a human-readable identifier for the ephemeris.</p>
    /// <p>A name is only returned for customer-provider ephemerides that have a name associated.</p>
    pub name: ::std::option::Option<::std::string::String>,
}
impl EphemerisMetaData {
    /// <p>The <code>EphemerisSource</code> that generated a given ephemeris.</p>
    pub fn source(&self) -> &crate::types::EphemerisSource {
        &self.source
    }
    /// <p>UUID of a customer-provided ephemeris.</p>
    /// <p>This field is not populated for default ephemerides from Space Track.</p>
    pub fn ephemeris_id(&self) -> ::std::option::Option<&str> {
        self.ephemeris_id.as_deref()
    }
    /// <p>The epoch of a default, ephemeris from Space Track in UTC.</p>
    /// <p>This field is not populated for customer-provided ephemerides.</p>
    pub fn epoch(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.epoch.as_ref()
    }
    /// <p>A name string associated with the ephemeris. Used as a human-readable identifier for the ephemeris.</p>
    /// <p>A name is only returned for customer-provider ephemerides that have a name associated.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
}
impl EphemerisMetaData {
    /// Creates a new builder-style object to manufacture [`EphemerisMetaData`](crate::types::EphemerisMetaData).
    pub fn builder() -> crate::types::builders::EphemerisMetaDataBuilder {
        crate::types::builders::EphemerisMetaDataBuilder::default()
    }
}

/// A builder for [`EphemerisMetaData`](crate::types::EphemerisMetaData).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EphemerisMetaDataBuilder {
    pub(crate) source: ::std::option::Option<crate::types::EphemerisSource>,
    pub(crate) ephemeris_id: ::std::option::Option<::std::string::String>,
    pub(crate) epoch: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
}
impl EphemerisMetaDataBuilder {
    /// <p>The <code>EphemerisSource</code> that generated a given ephemeris.</p>
    /// This field is required.
    pub fn source(mut self, input: crate::types::EphemerisSource) -> Self {
        self.source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <code>EphemerisSource</code> that generated a given ephemeris.</p>
    pub fn set_source(mut self, input: ::std::option::Option<crate::types::EphemerisSource>) -> Self {
        self.source = input;
        self
    }
    /// <p>The <code>EphemerisSource</code> that generated a given ephemeris.</p>
    pub fn get_source(&self) -> &::std::option::Option<crate::types::EphemerisSource> {
        &self.source
    }
    /// <p>UUID of a customer-provided ephemeris.</p>
    /// <p>This field is not populated for default ephemerides from Space Track.</p>
    pub fn ephemeris_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ephemeris_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>UUID of a customer-provided ephemeris.</p>
    /// <p>This field is not populated for default ephemerides from Space Track.</p>
    pub fn set_ephemeris_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ephemeris_id = input;
        self
    }
    /// <p>UUID of a customer-provided ephemeris.</p>
    /// <p>This field is not populated for default ephemerides from Space Track.</p>
    pub fn get_ephemeris_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ephemeris_id
    }
    /// <p>The epoch of a default, ephemeris from Space Track in UTC.</p>
    /// <p>This field is not populated for customer-provided ephemerides.</p>
    pub fn epoch(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.epoch = ::std::option::Option::Some(input);
        self
    }
    /// <p>The epoch of a default, ephemeris from Space Track in UTC.</p>
    /// <p>This field is not populated for customer-provided ephemerides.</p>
    pub fn set_epoch(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.epoch = input;
        self
    }
    /// <p>The epoch of a default, ephemeris from Space Track in UTC.</p>
    /// <p>This field is not populated for customer-provided ephemerides.</p>
    pub fn get_epoch(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.epoch
    }
    /// <p>A name string associated with the ephemeris. Used as a human-readable identifier for the ephemeris.</p>
    /// <p>A name is only returned for customer-provider ephemerides that have a name associated.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name string associated with the ephemeris. Used as a human-readable identifier for the ephemeris.</p>
    /// <p>A name is only returned for customer-provider ephemerides that have a name associated.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A name string associated with the ephemeris. Used as a human-readable identifier for the ephemeris.</p>
    /// <p>A name is only returned for customer-provider ephemerides that have a name associated.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Consumes the builder and constructs a [`EphemerisMetaData`](crate::types::EphemerisMetaData).
    /// This method will fail if any of the following fields are not set:
    /// - [`source`](crate::types::builders::EphemerisMetaDataBuilder::source)
    pub fn build(self) -> ::std::result::Result<crate::types::EphemerisMetaData, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EphemerisMetaData {
            source: self.source.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source",
                    "source was not specified but it is required when building EphemerisMetaData",
                )
            })?,
            ephemeris_id: self.ephemeris_id,
            epoch: self.epoch,
            name: self.name,
        })
    }
}
