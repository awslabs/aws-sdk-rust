// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An integer range that has a minimum and maximum value.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IntegerRange {
    /// <p>A minimum value.</p>
    pub minimum: i32,
    /// <p>A maximum value.</p>
    pub maximum: i32,
}
impl IntegerRange {
    /// <p>A minimum value.</p>
    pub fn minimum(&self) -> i32 {
        self.minimum
    }
    /// <p>A maximum value.</p>
    pub fn maximum(&self) -> i32 {
        self.maximum
    }
}
impl IntegerRange {
    /// Creates a new builder-style object to manufacture [`IntegerRange`](crate::types::IntegerRange).
    pub fn builder() -> crate::types::builders::IntegerRangeBuilder {
        crate::types::builders::IntegerRangeBuilder::default()
    }
}

/// A builder for [`IntegerRange`](crate::types::IntegerRange).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct IntegerRangeBuilder {
    pub(crate) minimum: ::std::option::Option<i32>,
    pub(crate) maximum: ::std::option::Option<i32>,
}
impl IntegerRangeBuilder {
    /// <p>A minimum value.</p>
    /// This field is required.
    pub fn minimum(mut self, input: i32) -> Self {
        self.minimum = ::std::option::Option::Some(input);
        self
    }
    /// <p>A minimum value.</p>
    pub fn set_minimum(mut self, input: ::std::option::Option<i32>) -> Self {
        self.minimum = input;
        self
    }
    /// <p>A minimum value.</p>
    pub fn get_minimum(&self) -> &::std::option::Option<i32> {
        &self.minimum
    }
    /// <p>A maximum value.</p>
    /// This field is required.
    pub fn maximum(mut self, input: i32) -> Self {
        self.maximum = ::std::option::Option::Some(input);
        self
    }
    /// <p>A maximum value.</p>
    pub fn set_maximum(mut self, input: ::std::option::Option<i32>) -> Self {
        self.maximum = input;
        self
    }
    /// <p>A maximum value.</p>
    pub fn get_maximum(&self) -> &::std::option::Option<i32> {
        &self.maximum
    }
    /// Consumes the builder and constructs a [`IntegerRange`](crate::types::IntegerRange).
    /// This method will fail if any of the following fields are not set:
    /// - [`minimum`](crate::types::builders::IntegerRangeBuilder::minimum)
    /// - [`maximum`](crate::types::builders::IntegerRangeBuilder::maximum)
    pub fn build(self) -> ::std::result::Result<crate::types::IntegerRange, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::IntegerRange {
            minimum: self.minimum.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "minimum",
                    "minimum was not specified but it is required when building IntegerRange",
                )
            })?,
            maximum: self.maximum.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "maximum",
                    "maximum was not specified but it is required when building IntegerRange",
                )
            })?,
        })
    }
}
