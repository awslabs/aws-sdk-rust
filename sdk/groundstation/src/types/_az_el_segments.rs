// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Azimuth elevation segment collection.</p>
/// <p>Contains five or more time-ordered segments that define antenna pointing angles over the ephemeris validity period.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AzElSegments {
    /// <p>The unit of measure for azimuth and elevation angles. All angles in all segments must use the same unit.</p>
    pub angle_unit: crate::types::AngleUnits,
    /// <p>List of azimuth elevation segments.</p>
    /// <p>Must contain between 1 and 100 segments. Segments must be in chronological order with no overlaps.</p>
    pub az_el_segment_list: ::std::vec::Vec<crate::types::AzElSegment>,
}
impl AzElSegments {
    /// <p>The unit of measure for azimuth and elevation angles. All angles in all segments must use the same unit.</p>
    pub fn angle_unit(&self) -> &crate::types::AngleUnits {
        &self.angle_unit
    }
    /// <p>List of azimuth elevation segments.</p>
    /// <p>Must contain between 1 and 100 segments. Segments must be in chronological order with no overlaps.</p>
    pub fn az_el_segment_list(&self) -> &[crate::types::AzElSegment] {
        use std::ops::Deref;
        self.az_el_segment_list.deref()
    }
}
impl AzElSegments {
    /// Creates a new builder-style object to manufacture [`AzElSegments`](crate::types::AzElSegments).
    pub fn builder() -> crate::types::builders::AzElSegmentsBuilder {
        crate::types::builders::AzElSegmentsBuilder::default()
    }
}

/// A builder for [`AzElSegments`](crate::types::AzElSegments).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AzElSegmentsBuilder {
    pub(crate) angle_unit: ::std::option::Option<crate::types::AngleUnits>,
    pub(crate) az_el_segment_list: ::std::option::Option<::std::vec::Vec<crate::types::AzElSegment>>,
}
impl AzElSegmentsBuilder {
    /// <p>The unit of measure for azimuth and elevation angles. All angles in all segments must use the same unit.</p>
    /// This field is required.
    pub fn angle_unit(mut self, input: crate::types::AngleUnits) -> Self {
        self.angle_unit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The unit of measure for azimuth and elevation angles. All angles in all segments must use the same unit.</p>
    pub fn set_angle_unit(mut self, input: ::std::option::Option<crate::types::AngleUnits>) -> Self {
        self.angle_unit = input;
        self
    }
    /// <p>The unit of measure for azimuth and elevation angles. All angles in all segments must use the same unit.</p>
    pub fn get_angle_unit(&self) -> &::std::option::Option<crate::types::AngleUnits> {
        &self.angle_unit
    }
    /// Appends an item to `az_el_segment_list`.
    ///
    /// To override the contents of this collection use [`set_az_el_segment_list`](Self::set_az_el_segment_list).
    ///
    /// <p>List of azimuth elevation segments.</p>
    /// <p>Must contain between 1 and 100 segments. Segments must be in chronological order with no overlaps.</p>
    pub fn az_el_segment_list(mut self, input: crate::types::AzElSegment) -> Self {
        let mut v = self.az_el_segment_list.unwrap_or_default();
        v.push(input);
        self.az_el_segment_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of azimuth elevation segments.</p>
    /// <p>Must contain between 1 and 100 segments. Segments must be in chronological order with no overlaps.</p>
    pub fn set_az_el_segment_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AzElSegment>>) -> Self {
        self.az_el_segment_list = input;
        self
    }
    /// <p>List of azimuth elevation segments.</p>
    /// <p>Must contain between 1 and 100 segments. Segments must be in chronological order with no overlaps.</p>
    pub fn get_az_el_segment_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AzElSegment>> {
        &self.az_el_segment_list
    }
    /// Consumes the builder and constructs a [`AzElSegments`](crate::types::AzElSegments).
    /// This method will fail if any of the following fields are not set:
    /// - [`angle_unit`](crate::types::builders::AzElSegmentsBuilder::angle_unit)
    /// - [`az_el_segment_list`](crate::types::builders::AzElSegmentsBuilder::az_el_segment_list)
    pub fn build(self) -> ::std::result::Result<crate::types::AzElSegments, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AzElSegments {
            angle_unit: self.angle_unit.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "angle_unit",
                    "angle_unit was not specified but it is required when building AzElSegments",
                )
            })?,
            az_el_segment_list: self.az_el_segment_list.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "az_el_segment_list",
                    "az_el_segment_list was not specified but it is required when building AzElSegments",
                )
            })?,
        })
    }
}
