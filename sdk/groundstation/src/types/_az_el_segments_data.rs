// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Container for azimuth elevation segment data.</p>
/// <p>Specify either <code>AzElSegmentsData$s3Object</code> to reference data in Amazon S3, or <code>AzElSegmentsData$azElData</code> to provide data inline.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum AzElSegmentsData {
    /// <p>Azimuth elevation segment data provided directly in the request.</p>
    /// <p>Use this option for smaller datasets or when Amazon S3 access is not available.</p>
    AzElData(crate::types::AzElSegments),
    /// <p>The Amazon S3 object containing azimuth elevation segment data.</p>
    /// <p>The Amazon S3 object must contain JSON-formatted azimuth elevation data matching the <code>AzElSegments</code> structure.</p>
    S3Object(crate::types::S3Object),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl AzElSegmentsData {
    /// Tries to convert the enum instance into [`AzElData`](crate::types::AzElSegmentsData::AzElData), extracting the inner [`AzElSegments`](crate::types::AzElSegments).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_az_el_data(&self) -> ::std::result::Result<&crate::types::AzElSegments, &Self> {
        if let AzElSegmentsData::AzElData(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`AzElData`](crate::types::AzElSegmentsData::AzElData).
    pub fn is_az_el_data(&self) -> bool {
        self.as_az_el_data().is_ok()
    }
    /// Tries to convert the enum instance into [`S3Object`](crate::types::AzElSegmentsData::S3Object), extracting the inner [`S3Object`](crate::types::S3Object).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_s3_object(&self) -> ::std::result::Result<&crate::types::S3Object, &Self> {
        if let AzElSegmentsData::S3Object(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`S3Object`](crate::types::AzElSegmentsData::S3Object).
    pub fn is_s3_object(&self) -> bool {
        self.as_s3_object().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
