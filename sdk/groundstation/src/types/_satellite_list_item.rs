// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Item in a list of satellites.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SatelliteListItem {
    /// <p>UUID of a satellite.</p>
    pub satellite_id: ::std::option::Option<::std::string::String>,
    /// <p>ARN of a satellite.</p>
    pub satellite_arn: ::std::option::Option<::std::string::String>,
    /// <p>NORAD satellite ID number.</p>
    pub norad_satellite_id: i32,
    /// <p>A list of ground stations to which the satellite is on-boarded.</p>
    pub ground_stations: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The current ephemeris being used to compute the trajectory of the satellite.</p>
    pub current_ephemeris: ::std::option::Option<crate::types::EphemerisMetaData>,
}
impl SatelliteListItem {
    /// <p>UUID of a satellite.</p>
    pub fn satellite_id(&self) -> ::std::option::Option<&str> {
        self.satellite_id.as_deref()
    }
    /// <p>ARN of a satellite.</p>
    pub fn satellite_arn(&self) -> ::std::option::Option<&str> {
        self.satellite_arn.as_deref()
    }
    /// <p>NORAD satellite ID number.</p>
    pub fn norad_satellite_id(&self) -> i32 {
        self.norad_satellite_id
    }
    /// <p>A list of ground stations to which the satellite is on-boarded.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ground_stations.is_none()`.
    pub fn ground_stations(&self) -> &[::std::string::String] {
        self.ground_stations.as_deref().unwrap_or_default()
    }
    /// <p>The current ephemeris being used to compute the trajectory of the satellite.</p>
    pub fn current_ephemeris(&self) -> ::std::option::Option<&crate::types::EphemerisMetaData> {
        self.current_ephemeris.as_ref()
    }
}
impl SatelliteListItem {
    /// Creates a new builder-style object to manufacture [`SatelliteListItem`](crate::types::SatelliteListItem).
    pub fn builder() -> crate::types::builders::SatelliteListItemBuilder {
        crate::types::builders::SatelliteListItemBuilder::default()
    }
}

/// A builder for [`SatelliteListItem`](crate::types::SatelliteListItem).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SatelliteListItemBuilder {
    pub(crate) satellite_id: ::std::option::Option<::std::string::String>,
    pub(crate) satellite_arn: ::std::option::Option<::std::string::String>,
    pub(crate) norad_satellite_id: ::std::option::Option<i32>,
    pub(crate) ground_stations: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) current_ephemeris: ::std::option::Option<crate::types::EphemerisMetaData>,
}
impl SatelliteListItemBuilder {
    /// <p>UUID of a satellite.</p>
    pub fn satellite_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.satellite_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>UUID of a satellite.</p>
    pub fn set_satellite_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.satellite_id = input;
        self
    }
    /// <p>UUID of a satellite.</p>
    pub fn get_satellite_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.satellite_id
    }
    /// <p>ARN of a satellite.</p>
    pub fn satellite_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.satellite_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ARN of a satellite.</p>
    pub fn set_satellite_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.satellite_arn = input;
        self
    }
    /// <p>ARN of a satellite.</p>
    pub fn get_satellite_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.satellite_arn
    }
    /// <p>NORAD satellite ID number.</p>
    pub fn norad_satellite_id(mut self, input: i32) -> Self {
        self.norad_satellite_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>NORAD satellite ID number.</p>
    pub fn set_norad_satellite_id(mut self, input: ::std::option::Option<i32>) -> Self {
        self.norad_satellite_id = input;
        self
    }
    /// <p>NORAD satellite ID number.</p>
    pub fn get_norad_satellite_id(&self) -> &::std::option::Option<i32> {
        &self.norad_satellite_id
    }
    /// Appends an item to `ground_stations`.
    ///
    /// To override the contents of this collection use [`set_ground_stations`](Self::set_ground_stations).
    ///
    /// <p>A list of ground stations to which the satellite is on-boarded.</p>
    pub fn ground_stations(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.ground_stations.unwrap_or_default();
        v.push(input.into());
        self.ground_stations = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of ground stations to which the satellite is on-boarded.</p>
    pub fn set_ground_stations(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.ground_stations = input;
        self
    }
    /// <p>A list of ground stations to which the satellite is on-boarded.</p>
    pub fn get_ground_stations(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.ground_stations
    }
    /// <p>The current ephemeris being used to compute the trajectory of the satellite.</p>
    pub fn current_ephemeris(mut self, input: crate::types::EphemerisMetaData) -> Self {
        self.current_ephemeris = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current ephemeris being used to compute the trajectory of the satellite.</p>
    pub fn set_current_ephemeris(mut self, input: ::std::option::Option<crate::types::EphemerisMetaData>) -> Self {
        self.current_ephemeris = input;
        self
    }
    /// <p>The current ephemeris being used to compute the trajectory of the satellite.</p>
    pub fn get_current_ephemeris(&self) -> &::std::option::Option<crate::types::EphemerisMetaData> {
        &self.current_ephemeris
    }
    /// Consumes the builder and constructs a [`SatelliteListItem`](crate::types::SatelliteListItem).
    pub fn build(self) -> crate::types::SatelliteListItem {
        crate::types::SatelliteListItem {
            satellite_id: self.satellite_id,
            satellite_arn: self.satellite_arn,
            norad_satellite_id: self.norad_satellite_id.unwrap_or_default(),
            ground_stations: self.ground_stations,
            current_ephemeris: self.current_ephemeris,
        }
    }
}
