// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Ephemeris data in Orbit Ephemeris Message (OEM) format.</p>
/// <p>AWS Ground Station processes OEM ephemerides according to the <a href="https://ccsds.org/wp-content/uploads/gravity_forms/5-448e85c647331d9cbaf66c096458bdd5/2025/01//502x0b3e1.pdf">CCSDS standard</a> with some extra restrictions. OEM files should be in KVN format. For more detail about the OEM format that AWS Ground Station supports, see <a href="https://docs.aws.amazon.com/ground-station/latest/ug/providing-oem-ephemeris-data.html#oem-ephemeris-format">OEM ephemeris format</a> in the AWS Ground Station user guide.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OemEphemeris {
    /// <p>The Amazon S3 object that contains the ephemeris data.</p>
    pub s3_object: ::std::option::Option<crate::types::S3Object>,
    /// <p>OEM data that you provide directly instead of using an Amazon S3 object.</p>
    pub oem_data: ::std::option::Option<::std::string::String>,
}
impl OemEphemeris {
    /// <p>The Amazon S3 object that contains the ephemeris data.</p>
    pub fn s3_object(&self) -> ::std::option::Option<&crate::types::S3Object> {
        self.s3_object.as_ref()
    }
    /// <p>OEM data that you provide directly instead of using an Amazon S3 object.</p>
    pub fn oem_data(&self) -> ::std::option::Option<&str> {
        self.oem_data.as_deref()
    }
}
impl OemEphemeris {
    /// Creates a new builder-style object to manufacture [`OemEphemeris`](crate::types::OemEphemeris).
    pub fn builder() -> crate::types::builders::OemEphemerisBuilder {
        crate::types::builders::OemEphemerisBuilder::default()
    }
}

/// A builder for [`OemEphemeris`](crate::types::OemEphemeris).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OemEphemerisBuilder {
    pub(crate) s3_object: ::std::option::Option<crate::types::S3Object>,
    pub(crate) oem_data: ::std::option::Option<::std::string::String>,
}
impl OemEphemerisBuilder {
    /// <p>The Amazon S3 object that contains the ephemeris data.</p>
    pub fn s3_object(mut self, input: crate::types::S3Object) -> Self {
        self.s3_object = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon S3 object that contains the ephemeris data.</p>
    pub fn set_s3_object(mut self, input: ::std::option::Option<crate::types::S3Object>) -> Self {
        self.s3_object = input;
        self
    }
    /// <p>The Amazon S3 object that contains the ephemeris data.</p>
    pub fn get_s3_object(&self) -> &::std::option::Option<crate::types::S3Object> {
        &self.s3_object
    }
    /// <p>OEM data that you provide directly instead of using an Amazon S3 object.</p>
    pub fn oem_data(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.oem_data = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>OEM data that you provide directly instead of using an Amazon S3 object.</p>
    pub fn set_oem_data(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.oem_data = input;
        self
    }
    /// <p>OEM data that you provide directly instead of using an Amazon S3 object.</p>
    pub fn get_oem_data(&self) -> &::std::option::Option<::std::string::String> {
        &self.oem_data
    }
    /// Consumes the builder and constructs a [`OemEphemeris`](crate::types::OemEphemeris).
    pub fn build(self) -> crate::types::OemEphemeris {
        crate::types::OemEphemeris {
            s3_object: self.s3_object,
            oem_data: self.oem_data,
        }
    }
}
