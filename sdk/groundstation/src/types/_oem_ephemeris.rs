// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Ephemeris data in Orbit Ephemeris Message (OEM) format.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct OemEphemeris {
    /// <p>Identifies the S3 object to be used as the ephemeris.</p>
    #[doc(hidden)]
    pub s3_object: std::option::Option<crate::types::S3Object>,
    /// <p>The data for an OEM ephemeris, supplied directly in the request rather than through an S3 object.</p>
    #[doc(hidden)]
    pub oem_data: std::option::Option<std::string::String>,
}
impl OemEphemeris {
    /// <p>Identifies the S3 object to be used as the ephemeris.</p>
    pub fn s3_object(&self) -> std::option::Option<&crate::types::S3Object> {
        self.s3_object.as_ref()
    }
    /// <p>The data for an OEM ephemeris, supplied directly in the request rather than through an S3 object.</p>
    pub fn oem_data(&self) -> std::option::Option<&str> {
        self.oem_data.as_deref()
    }
}
impl OemEphemeris {
    /// Creates a new builder-style object to manufacture [`OemEphemeris`](crate::types::OemEphemeris).
    pub fn builder() -> crate::types::builders::OemEphemerisBuilder {
        crate::types::builders::OemEphemerisBuilder::default()
    }
}

/// A builder for [`OemEphemeris`](crate::types::OemEphemeris).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct OemEphemerisBuilder {
    pub(crate) s3_object: std::option::Option<crate::types::S3Object>,
    pub(crate) oem_data: std::option::Option<std::string::String>,
}
impl OemEphemerisBuilder {
    /// <p>Identifies the S3 object to be used as the ephemeris.</p>
    pub fn s3_object(mut self, input: crate::types::S3Object) -> Self {
        self.s3_object = Some(input);
        self
    }
    /// <p>Identifies the S3 object to be used as the ephemeris.</p>
    pub fn set_s3_object(mut self, input: std::option::Option<crate::types::S3Object>) -> Self {
        self.s3_object = input;
        self
    }
    /// <p>The data for an OEM ephemeris, supplied directly in the request rather than through an S3 object.</p>
    pub fn oem_data(mut self, input: impl Into<std::string::String>) -> Self {
        self.oem_data = Some(input.into());
        self
    }
    /// <p>The data for an OEM ephemeris, supplied directly in the request rather than through an S3 object.</p>
    pub fn set_oem_data(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.oem_data = input;
        self
    }
    /// Consumes the builder and constructs a [`OemEphemeris`](crate::types::OemEphemeris).
    pub fn build(self) -> crate::types::OemEphemeris {
        crate::types::OemEphemeris {
            s3_object: self.s3_object,
            oem_data: self.oem_data,
        }
    }
}
