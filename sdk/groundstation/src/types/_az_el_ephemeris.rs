// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Azimuth elevation ephemeris data.</p>
/// <p>Use this ephemeris type to provide pointing angles directly, rather than satellite orbital elements. Use this when you need precise antenna pointing but have imprecise or unknown satellite trajectory information.</p>
/// <p>The azimuth elevation data specifies the antenna pointing direction at specific times relative to a ground station location. AWS Ground Station uses 4th order Lagrange interpolation to compute pointing angles between the provided data points.</p>
/// <p>AWS Ground Station automatically filters interpolated pointing angles, including only those that are above the site mask elevation of the specified ground station.</p>
/// <p>For more detail about providing azimuth elevation ephemerides to AWS Ground Station, see the <a href="https://docs.aws.amazon.com/ground-station/latest/ug/providing-azimuth-elevation-ephemeris-data.html">azimuth elevation ephemeris section</a> of the AWS Ground Station User Guide.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AzElEphemeris {
    /// <p>The ground station name for which you're providing azimuth elevation data.</p>
    /// <p>This ephemeris is specific to this ground station and can't be used at other locations.</p>
    pub ground_station: ::std::string::String,
    /// <p>Azimuth elevation segment data.</p>
    /// <p>You can provide data inline in the request or through an Amazon S3 object reference.</p>
    pub data: ::std::option::Option<crate::types::AzElSegmentsData>,
}
impl AzElEphemeris {
    /// <p>The ground station name for which you're providing azimuth elevation data.</p>
    /// <p>This ephemeris is specific to this ground station and can't be used at other locations.</p>
    pub fn ground_station(&self) -> &str {
        use std::ops::Deref;
        self.ground_station.deref()
    }
    /// <p>Azimuth elevation segment data.</p>
    /// <p>You can provide data inline in the request or through an Amazon S3 object reference.</p>
    pub fn data(&self) -> ::std::option::Option<&crate::types::AzElSegmentsData> {
        self.data.as_ref()
    }
}
impl AzElEphemeris {
    /// Creates a new builder-style object to manufacture [`AzElEphemeris`](crate::types::AzElEphemeris).
    pub fn builder() -> crate::types::builders::AzElEphemerisBuilder {
        crate::types::builders::AzElEphemerisBuilder::default()
    }
}

/// A builder for [`AzElEphemeris`](crate::types::AzElEphemeris).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AzElEphemerisBuilder {
    pub(crate) ground_station: ::std::option::Option<::std::string::String>,
    pub(crate) data: ::std::option::Option<crate::types::AzElSegmentsData>,
}
impl AzElEphemerisBuilder {
    /// <p>The ground station name for which you're providing azimuth elevation data.</p>
    /// <p>This ephemeris is specific to this ground station and can't be used at other locations.</p>
    /// This field is required.
    pub fn ground_station(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ground_station = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ground station name for which you're providing azimuth elevation data.</p>
    /// <p>This ephemeris is specific to this ground station and can't be used at other locations.</p>
    pub fn set_ground_station(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ground_station = input;
        self
    }
    /// <p>The ground station name for which you're providing azimuth elevation data.</p>
    /// <p>This ephemeris is specific to this ground station and can't be used at other locations.</p>
    pub fn get_ground_station(&self) -> &::std::option::Option<::std::string::String> {
        &self.ground_station
    }
    /// <p>Azimuth elevation segment data.</p>
    /// <p>You can provide data inline in the request or through an Amazon S3 object reference.</p>
    /// This field is required.
    pub fn data(mut self, input: crate::types::AzElSegmentsData) -> Self {
        self.data = ::std::option::Option::Some(input);
        self
    }
    /// <p>Azimuth elevation segment data.</p>
    /// <p>You can provide data inline in the request or through an Amazon S3 object reference.</p>
    pub fn set_data(mut self, input: ::std::option::Option<crate::types::AzElSegmentsData>) -> Self {
        self.data = input;
        self
    }
    /// <p>Azimuth elevation segment data.</p>
    /// <p>You can provide data inline in the request or through an Amazon S3 object reference.</p>
    pub fn get_data(&self) -> &::std::option::Option<crate::types::AzElSegmentsData> {
        &self.data
    }
    /// Consumes the builder and constructs a [`AzElEphemeris`](crate::types::AzElEphemeris).
    /// This method will fail if any of the following fields are not set:
    /// - [`ground_station`](crate::types::builders::AzElEphemerisBuilder::ground_station)
    pub fn build(self) -> ::std::result::Result<crate::types::AzElEphemeris, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AzElEphemeris {
            ground_station: self.ground_station.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "ground_station",
                    "ground_station was not specified but it is required when building AzElEphemeris",
                )
            })?,
            data: self.data,
        })
    }
}
