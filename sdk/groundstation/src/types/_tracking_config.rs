// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Object that determines whether tracking should be used during a contact executed with this <code>Config</code> in the mission profile.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TrackingConfig {
    /// <p>Current setting for autotrack.</p>
    #[doc(hidden)]
    pub autotrack: std::option::Option<crate::types::Criticality>,
}
impl TrackingConfig {
    /// <p>Current setting for autotrack.</p>
    pub fn autotrack(&self) -> std::option::Option<&crate::types::Criticality> {
        self.autotrack.as_ref()
    }
}
impl TrackingConfig {
    /// Creates a new builder-style object to manufacture [`TrackingConfig`](crate::types::TrackingConfig).
    pub fn builder() -> crate::types::builders::TrackingConfigBuilder {
        crate::types::builders::TrackingConfigBuilder::default()
    }
}

/// A builder for [`TrackingConfig`](crate::types::TrackingConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TrackingConfigBuilder {
    pub(crate) autotrack: std::option::Option<crate::types::Criticality>,
}
impl TrackingConfigBuilder {
    /// <p>Current setting for autotrack.</p>
    pub fn autotrack(mut self, input: crate::types::Criticality) -> Self {
        self.autotrack = Some(input);
        self
    }
    /// <p>Current setting for autotrack.</p>
    pub fn set_autotrack(mut self, input: std::option::Option<crate::types::Criticality>) -> Self {
        self.autotrack = input;
        self
    }
    /// Consumes the builder and constructs a [`TrackingConfig`](crate::types::TrackingConfig).
    pub fn build(self) -> crate::types::TrackingConfig {
        crate::types::TrackingConfig {
            autotrack: self.autotrack,
        }
    }
}
