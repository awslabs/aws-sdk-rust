// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Object that determines whether tracking should be used during a contact executed with this <code>Config</code> in the mission profile.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TrackingConfig {
    /// <p>Current setting for autotrack.</p>
    pub autotrack: crate::types::Criticality,
}
impl TrackingConfig {
    /// <p>Current setting for autotrack.</p>
    pub fn autotrack(&self) -> &crate::types::Criticality {
        &self.autotrack
    }
}
impl TrackingConfig {
    /// Creates a new builder-style object to manufacture [`TrackingConfig`](crate::types::TrackingConfig).
    pub fn builder() -> crate::types::builders::TrackingConfigBuilder {
        crate::types::builders::TrackingConfigBuilder::default()
    }
}

/// A builder for [`TrackingConfig`](crate::types::TrackingConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TrackingConfigBuilder {
    pub(crate) autotrack: ::std::option::Option<crate::types::Criticality>,
}
impl TrackingConfigBuilder {
    /// <p>Current setting for autotrack.</p>
    /// This field is required.
    pub fn autotrack(mut self, input: crate::types::Criticality) -> Self {
        self.autotrack = ::std::option::Option::Some(input);
        self
    }
    /// <p>Current setting for autotrack.</p>
    pub fn set_autotrack(mut self, input: ::std::option::Option<crate::types::Criticality>) -> Self {
        self.autotrack = input;
        self
    }
    /// <p>Current setting for autotrack.</p>
    pub fn get_autotrack(&self) -> &::std::option::Option<crate::types::Criticality> {
        &self.autotrack
    }
    /// Consumes the builder and constructs a [`TrackingConfig`](crate::types::TrackingConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`autotrack`](crate::types::builders::TrackingConfigBuilder::autotrack)
    pub fn build(self) -> ::std::result::Result<crate::types::TrackingConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TrackingConfig {
            autotrack: self.autotrack.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "autotrack",
                    "autotrack was not specified but it is required when building TrackingConfig",
                )
            })?,
        })
    }
}
