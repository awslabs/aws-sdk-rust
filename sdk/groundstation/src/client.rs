// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for AWS Ground Station
///
/// Client for invoking operations on AWS Ground Station. Each operation on AWS Ground Station is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_groundstation::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_groundstation::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_groundstation::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`CancelContact`](crate::client::fluent_builders::CancelContact) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`contact_id(impl Into<String>)`](crate::client::fluent_builders::CancelContact::contact_id) / [`set_contact_id(Option<String>)`](crate::client::fluent_builders::CancelContact::set_contact_id): <p>UUID of a contact.</p>
    /// - On success, responds with [`CancelContactOutput`](crate::output::CancelContactOutput) with field(s):
    ///   - [`contact_id(Option<String>)`](crate::output::CancelContactOutput::contact_id): <p>UUID of a contact.</p>
    /// - On failure, responds with [`SdkError<CancelContactError>`](crate::error::CancelContactError)
    pub fn cancel_contact(&self) -> crate::client::fluent_builders::CancelContact {
        crate::client::fluent_builders::CancelContact::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateConfig`](crate::client::fluent_builders::CreateConfig) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateConfig::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateConfig::set_name): <p>Name of a <code>Config</code>.</p>
    ///   - [`config_data(ConfigTypeData)`](crate::client::fluent_builders::CreateConfig::config_data) / [`set_config_data(Option<ConfigTypeData>)`](crate::client::fluent_builders::CreateConfig::set_config_data): <p>Parameters of a <code>Config</code>.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateConfig::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateConfig::set_tags): <p>Tags assigned to a <code>Config</code>.</p>
    /// - On success, responds with [`CreateConfigOutput`](crate::output::CreateConfigOutput) with field(s):
    ///   - [`config_id(Option<String>)`](crate::output::CreateConfigOutput::config_id): <p>UUID of a <code>Config</code>.</p>
    ///   - [`config_type(Option<ConfigCapabilityType>)`](crate::output::CreateConfigOutput::config_type): <p>Type of a <code>Config</code>.</p>
    ///   - [`config_arn(Option<String>)`](crate::output::CreateConfigOutput::config_arn): <p>ARN of a <code>Config</code>.</p>
    /// - On failure, responds with [`SdkError<CreateConfigError>`](crate::error::CreateConfigError)
    pub fn create_config(&self) -> crate::client::fluent_builders::CreateConfig {
        crate::client::fluent_builders::CreateConfig::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateDataflowEndpointGroup`](crate::client::fluent_builders::CreateDataflowEndpointGroup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`endpoint_details(Vec<EndpointDetails>)`](crate::client::fluent_builders::CreateDataflowEndpointGroup::endpoint_details) / [`set_endpoint_details(Option<Vec<EndpointDetails>>)`](crate::client::fluent_builders::CreateDataflowEndpointGroup::set_endpoint_details): <p>Endpoint details of each endpoint in the dataflow endpoint group.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateDataflowEndpointGroup::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateDataflowEndpointGroup::set_tags): <p>Tags of a dataflow endpoint group.</p>
    ///   - [`contact_pre_pass_duration_seconds(i32)`](crate::client::fluent_builders::CreateDataflowEndpointGroup::contact_pre_pass_duration_seconds) / [`set_contact_pre_pass_duration_seconds(Option<i32>)`](crate::client::fluent_builders::CreateDataflowEndpointGroup::set_contact_pre_pass_duration_seconds): <p>Amount of time, in seconds, prior to contact start for the contact to remain in a <code>PREPASS</code> state. A CloudWatch event is emitted when the contact enters and exits the <code>PREPASS</code> state.</p>
    ///   - [`contact_post_pass_duration_seconds(i32)`](crate::client::fluent_builders::CreateDataflowEndpointGroup::contact_post_pass_duration_seconds) / [`set_contact_post_pass_duration_seconds(Option<i32>)`](crate::client::fluent_builders::CreateDataflowEndpointGroup::set_contact_post_pass_duration_seconds): <p>Amount of time, in seconds, after a contact ends for the contact to remain in a <code>POSTPASS</code> state. A CloudWatch event is emitted when the contact enters and exits the <code>POSTPASS</code> state.</p>
    /// - On success, responds with [`CreateDataflowEndpointGroupOutput`](crate::output::CreateDataflowEndpointGroupOutput) with field(s):
    ///   - [`dataflow_endpoint_group_id(Option<String>)`](crate::output::CreateDataflowEndpointGroupOutput::dataflow_endpoint_group_id): <p>UUID of a dataflow endpoint group.</p>
    /// - On failure, responds with [`SdkError<CreateDataflowEndpointGroupError>`](crate::error::CreateDataflowEndpointGroupError)
    pub fn create_dataflow_endpoint_group(
        &self,
    ) -> crate::client::fluent_builders::CreateDataflowEndpointGroup {
        crate::client::fluent_builders::CreateDataflowEndpointGroup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateEphemeris`](crate::client::fluent_builders::CreateEphemeris) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`satellite_id(impl Into<String>)`](crate::client::fluent_builders::CreateEphemeris::satellite_id) / [`set_satellite_id(Option<String>)`](crate::client::fluent_builders::CreateEphemeris::set_satellite_id): <p>AWS Ground Station satellite ID for this ephemeris.</p>
    ///   - [`enabled(bool)`](crate::client::fluent_builders::CreateEphemeris::enabled) / [`set_enabled(Option<bool>)`](crate::client::fluent_builders::CreateEphemeris::set_enabled): <p>Whether to set the ephemeris status to <code>ENABLED</code> after validation.</p>  <p>Setting this to false will set the ephemeris status to <code>DISABLED</code> after validation.</p>
    ///   - [`priority(i32)`](crate::client::fluent_builders::CreateEphemeris::priority) / [`set_priority(Option<i32>)`](crate::client::fluent_builders::CreateEphemeris::set_priority): <p>Customer-provided priority score to establish the order in which overlapping ephemerides should be used.</p>  <p>The default for customer-provided ephemeris priority is 1, and higher numbers take precedence.</p>  <p>Priority must be 1 or greater</p>
    ///   - [`expiration_time(DateTime)`](crate::client::fluent_builders::CreateEphemeris::expiration_time) / [`set_expiration_time(Option<DateTime>)`](crate::client::fluent_builders::CreateEphemeris::set_expiration_time): <p>An overall expiration time for the ephemeris in UTC, after which it will become <code>EXPIRED</code>.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateEphemeris::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateEphemeris::set_name): <p>A name string associated with the ephemeris. Used as a human-readable identifier for the ephemeris.</p>
    ///   - [`kms_key_arn(impl Into<String>)`](crate::client::fluent_builders::CreateEphemeris::kms_key_arn) / [`set_kms_key_arn(Option<String>)`](crate::client::fluent_builders::CreateEphemeris::set_kms_key_arn): <p>The ARN of a KMS key used to encrypt the ephemeris in Ground Station.</p>
    ///   - [`ephemeris(EphemerisData)`](crate::client::fluent_builders::CreateEphemeris::ephemeris) / [`set_ephemeris(Option<EphemerisData>)`](crate::client::fluent_builders::CreateEphemeris::set_ephemeris): <p>Ephemeris data.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateEphemeris::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateEphemeris::set_tags): <p>Tags assigned to an ephemeris.</p>
    /// - On success, responds with [`CreateEphemerisOutput`](crate::output::CreateEphemerisOutput) with field(s):
    ///   - [`ephemeris_id(Option<String>)`](crate::output::CreateEphemerisOutput::ephemeris_id): <p>The AWS Ground Station ephemeris ID.</p>
    /// - On failure, responds with [`SdkError<CreateEphemerisError>`](crate::error::CreateEphemerisError)
    pub fn create_ephemeris(&self) -> crate::client::fluent_builders::CreateEphemeris {
        crate::client::fluent_builders::CreateEphemeris::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateMissionProfile`](crate::client::fluent_builders::CreateMissionProfile) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateMissionProfile::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateMissionProfile::set_name): <p>Name of a mission profile.</p>
    ///   - [`contact_pre_pass_duration_seconds(i32)`](crate::client::fluent_builders::CreateMissionProfile::contact_pre_pass_duration_seconds) / [`set_contact_pre_pass_duration_seconds(Option<i32>)`](crate::client::fluent_builders::CreateMissionProfile::set_contact_pre_pass_duration_seconds): <p>Amount of time prior to contact start you’d like to receive a CloudWatch event indicating an upcoming pass.</p>
    ///   - [`contact_post_pass_duration_seconds(i32)`](crate::client::fluent_builders::CreateMissionProfile::contact_post_pass_duration_seconds) / [`set_contact_post_pass_duration_seconds(Option<i32>)`](crate::client::fluent_builders::CreateMissionProfile::set_contact_post_pass_duration_seconds): <p>Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.</p>
    ///   - [`minimum_viable_contact_duration_seconds(i32)`](crate::client::fluent_builders::CreateMissionProfile::minimum_viable_contact_duration_seconds) / [`set_minimum_viable_contact_duration_seconds(Option<i32>)`](crate::client::fluent_builders::CreateMissionProfile::set_minimum_viable_contact_duration_seconds): <p>Smallest amount of time in seconds that you’d like to see for an available contact. AWS Ground Station will not present you with contacts shorter than this duration.</p>
    ///   - [`dataflow_edges(Vec<Vec<String>>)`](crate::client::fluent_builders::CreateMissionProfile::dataflow_edges) / [`set_dataflow_edges(Option<Vec<Vec<String>>>)`](crate::client::fluent_builders::CreateMissionProfile::set_dataflow_edges): <p>A list of lists of ARNs. Each list of ARNs is an edge, with a <i>from</i> <code>Config</code> and a <i>to</i> <code>Config</code>.</p>
    ///   - [`tracking_config_arn(impl Into<String>)`](crate::client::fluent_builders::CreateMissionProfile::tracking_config_arn) / [`set_tracking_config_arn(Option<String>)`](crate::client::fluent_builders::CreateMissionProfile::set_tracking_config_arn): <p>ARN of a tracking <code>Config</code>.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateMissionProfile::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateMissionProfile::set_tags): <p>Tags assigned to a mission profile.</p>
    /// - On success, responds with [`CreateMissionProfileOutput`](crate::output::CreateMissionProfileOutput) with field(s):
    ///   - [`mission_profile_id(Option<String>)`](crate::output::CreateMissionProfileOutput::mission_profile_id): <p>UUID of a mission profile.</p>
    /// - On failure, responds with [`SdkError<CreateMissionProfileError>`](crate::error::CreateMissionProfileError)
    pub fn create_mission_profile(&self) -> crate::client::fluent_builders::CreateMissionProfile {
        crate::client::fluent_builders::CreateMissionProfile::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteConfig`](crate::client::fluent_builders::DeleteConfig) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`config_id(impl Into<String>)`](crate::client::fluent_builders::DeleteConfig::config_id) / [`set_config_id(Option<String>)`](crate::client::fluent_builders::DeleteConfig::set_config_id): <p>UUID of a <code>Config</code>.</p>
    ///   - [`config_type(ConfigCapabilityType)`](crate::client::fluent_builders::DeleteConfig::config_type) / [`set_config_type(Option<ConfigCapabilityType>)`](crate::client::fluent_builders::DeleteConfig::set_config_type): <p>Type of a <code>Config</code>.</p>
    /// - On success, responds with [`DeleteConfigOutput`](crate::output::DeleteConfigOutput) with field(s):
    ///   - [`config_id(Option<String>)`](crate::output::DeleteConfigOutput::config_id): <p>UUID of a <code>Config</code>.</p>
    ///   - [`config_type(Option<ConfigCapabilityType>)`](crate::output::DeleteConfigOutput::config_type): <p>Type of a <code>Config</code>.</p>
    ///   - [`config_arn(Option<String>)`](crate::output::DeleteConfigOutput::config_arn): <p>ARN of a <code>Config</code>.</p>
    /// - On failure, responds with [`SdkError<DeleteConfigError>`](crate::error::DeleteConfigError)
    pub fn delete_config(&self) -> crate::client::fluent_builders::DeleteConfig {
        crate::client::fluent_builders::DeleteConfig::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteDataflowEndpointGroup`](crate::client::fluent_builders::DeleteDataflowEndpointGroup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`dataflow_endpoint_group_id(impl Into<String>)`](crate::client::fluent_builders::DeleteDataflowEndpointGroup::dataflow_endpoint_group_id) / [`set_dataflow_endpoint_group_id(Option<String>)`](crate::client::fluent_builders::DeleteDataflowEndpointGroup::set_dataflow_endpoint_group_id): <p>UUID of a dataflow endpoint group.</p>
    /// - On success, responds with [`DeleteDataflowEndpointGroupOutput`](crate::output::DeleteDataflowEndpointGroupOutput) with field(s):
    ///   - [`dataflow_endpoint_group_id(Option<String>)`](crate::output::DeleteDataflowEndpointGroupOutput::dataflow_endpoint_group_id): <p>UUID of a dataflow endpoint group.</p>
    /// - On failure, responds with [`SdkError<DeleteDataflowEndpointGroupError>`](crate::error::DeleteDataflowEndpointGroupError)
    pub fn delete_dataflow_endpoint_group(
        &self,
    ) -> crate::client::fluent_builders::DeleteDataflowEndpointGroup {
        crate::client::fluent_builders::DeleteDataflowEndpointGroup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteEphemeris`](crate::client::fluent_builders::DeleteEphemeris) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`ephemeris_id(impl Into<String>)`](crate::client::fluent_builders::DeleteEphemeris::ephemeris_id) / [`set_ephemeris_id(Option<String>)`](crate::client::fluent_builders::DeleteEphemeris::set_ephemeris_id): <p>The AWS Ground Station ephemeris ID.</p>
    /// - On success, responds with [`DeleteEphemerisOutput`](crate::output::DeleteEphemerisOutput) with field(s):
    ///   - [`ephemeris_id(Option<String>)`](crate::output::DeleteEphemerisOutput::ephemeris_id): <p>The AWS Ground Station ephemeris ID.</p>
    /// - On failure, responds with [`SdkError<DeleteEphemerisError>`](crate::error::DeleteEphemerisError)
    pub fn delete_ephemeris(&self) -> crate::client::fluent_builders::DeleteEphemeris {
        crate::client::fluent_builders::DeleteEphemeris::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteMissionProfile`](crate::client::fluent_builders::DeleteMissionProfile) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`mission_profile_id(impl Into<String>)`](crate::client::fluent_builders::DeleteMissionProfile::mission_profile_id) / [`set_mission_profile_id(Option<String>)`](crate::client::fluent_builders::DeleteMissionProfile::set_mission_profile_id): <p>UUID of a mission profile.</p>
    /// - On success, responds with [`DeleteMissionProfileOutput`](crate::output::DeleteMissionProfileOutput) with field(s):
    ///   - [`mission_profile_id(Option<String>)`](crate::output::DeleteMissionProfileOutput::mission_profile_id): <p>UUID of a mission profile.</p>
    /// - On failure, responds with [`SdkError<DeleteMissionProfileError>`](crate::error::DeleteMissionProfileError)
    pub fn delete_mission_profile(&self) -> crate::client::fluent_builders::DeleteMissionProfile {
        crate::client::fluent_builders::DeleteMissionProfile::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeContact`](crate::client::fluent_builders::DescribeContact) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`contact_id(impl Into<String>)`](crate::client::fluent_builders::DescribeContact::contact_id) / [`set_contact_id(Option<String>)`](crate::client::fluent_builders::DescribeContact::set_contact_id): <p>UUID of a contact.</p>
    /// - On success, responds with [`DescribeContactOutput`](crate::output::DescribeContactOutput) with field(s):
    ///   - [`contact_id(Option<String>)`](crate::output::DescribeContactOutput::contact_id): <p>UUID of a contact.</p>
    ///   - [`mission_profile_arn(Option<String>)`](crate::output::DescribeContactOutput::mission_profile_arn): <p>ARN of a mission profile.</p>
    ///   - [`satellite_arn(Option<String>)`](crate::output::DescribeContactOutput::satellite_arn): <p>ARN of a satellite.</p>
    ///   - [`start_time(Option<DateTime>)`](crate::output::DescribeContactOutput::start_time): <p>Start time of a contact in UTC.</p>
    ///   - [`end_time(Option<DateTime>)`](crate::output::DescribeContactOutput::end_time): <p>End time of a contact in UTC.</p>
    ///   - [`pre_pass_start_time(Option<DateTime>)`](crate::output::DescribeContactOutput::pre_pass_start_time): <p>Amount of time prior to contact start you’d like to receive a CloudWatch event indicating an upcoming pass.</p>
    ///   - [`post_pass_end_time(Option<DateTime>)`](crate::output::DescribeContactOutput::post_pass_end_time): <p>Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.</p>
    ///   - [`ground_station(Option<String>)`](crate::output::DescribeContactOutput::ground_station): <p>Ground station for a contact.</p>
    ///   - [`contact_status(Option<ContactStatus>)`](crate::output::DescribeContactOutput::contact_status): <p>Status of a contact.</p>
    ///   - [`error_message(Option<String>)`](crate::output::DescribeContactOutput::error_message): <p>Error message for a contact.</p>
    ///   - [`maximum_elevation(Option<Elevation>)`](crate::output::DescribeContactOutput::maximum_elevation): <p>Maximum elevation angle of a contact.</p>
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::DescribeContactOutput::tags): <p>Tags assigned to a contact.</p>
    ///   - [`region(Option<String>)`](crate::output::DescribeContactOutput::region): <p>Region of a contact.</p>
    ///   - [`dataflow_list(Option<Vec<DataflowDetail>>)`](crate::output::DescribeContactOutput::dataflow_list): <p>List describing source and destination details for each dataflow edge.</p>
    /// - On failure, responds with [`SdkError<DescribeContactError>`](crate::error::DescribeContactError)
    pub fn describe_contact(&self) -> crate::client::fluent_builders::DescribeContact {
        crate::client::fluent_builders::DescribeContact::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeEphemeris`](crate::client::fluent_builders::DescribeEphemeris) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`ephemeris_id(impl Into<String>)`](crate::client::fluent_builders::DescribeEphemeris::ephemeris_id) / [`set_ephemeris_id(Option<String>)`](crate::client::fluent_builders::DescribeEphemeris::set_ephemeris_id): <p>The AWS Ground Station ephemeris ID.</p>
    /// - On success, responds with [`DescribeEphemerisOutput`](crate::output::DescribeEphemerisOutput) with field(s):
    ///   - [`ephemeris_id(Option<String>)`](crate::output::DescribeEphemerisOutput::ephemeris_id): <p>The AWS Ground Station ephemeris ID.</p>
    ///   - [`satellite_id(Option<String>)`](crate::output::DescribeEphemerisOutput::satellite_id): <p>The AWS Ground Station satellite ID associated with ephemeris.</p>
    ///   - [`status(Option<EphemerisStatus>)`](crate::output::DescribeEphemerisOutput::status): <p>The status of the ephemeris.</p>
    ///   - [`priority(Option<i32>)`](crate::output::DescribeEphemerisOutput::priority): <p>Customer-provided priority score to establish the order in which overlapping ephemerides should be used.</p>  <p>The default for customer-provided ephemeris priority is 1, and higher numbers take precedence.</p>  <p>Priority must be 1 or greater</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::DescribeEphemerisOutput::creation_time): <p>The time the ephemeris was uploaded in UTC.</p>
    ///   - [`enabled(Option<bool>)`](crate::output::DescribeEphemerisOutput::enabled): <p>Whether or not the ephemeris is enabled.</p>
    ///   - [`name(Option<String>)`](crate::output::DescribeEphemerisOutput::name): <p>A name string associated with the ephemeris. Used as a human-readable identifier for the ephemeris.</p>
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::DescribeEphemerisOutput::tags): <p>Tags assigned to an ephemeris.</p>
    ///   - [`supplied_data(Option<EphemerisTypeDescription>)`](crate::output::DescribeEphemerisOutput::supplied_data): <p>Supplied ephemeris data.</p>
    ///   - [`invalid_reason(Option<EphemerisInvalidReason>)`](crate::output::DescribeEphemerisOutput::invalid_reason): <p>Reason that an ephemeris failed validation. Only provided for ephemerides with <code>INVALID</code> status.</p>
    /// - On failure, responds with [`SdkError<DescribeEphemerisError>`](crate::error::DescribeEphemerisError)
    pub fn describe_ephemeris(&self) -> crate::client::fluent_builders::DescribeEphemeris {
        crate::client::fluent_builders::DescribeEphemeris::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetConfig`](crate::client::fluent_builders::GetConfig) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`config_id(impl Into<String>)`](crate::client::fluent_builders::GetConfig::config_id) / [`set_config_id(Option<String>)`](crate::client::fluent_builders::GetConfig::set_config_id): <p>UUID of a <code>Config</code>.</p>
    ///   - [`config_type(ConfigCapabilityType)`](crate::client::fluent_builders::GetConfig::config_type) / [`set_config_type(Option<ConfigCapabilityType>)`](crate::client::fluent_builders::GetConfig::set_config_type): <p>Type of a <code>Config</code>.</p>
    /// - On success, responds with [`GetConfigOutput`](crate::output::GetConfigOutput) with field(s):
    ///   - [`config_id(Option<String>)`](crate::output::GetConfigOutput::config_id): <p>UUID of a <code>Config</code>.</p>
    ///   - [`config_arn(Option<String>)`](crate::output::GetConfigOutput::config_arn): <p>ARN of a <code>Config</code> </p>
    ///   - [`name(Option<String>)`](crate::output::GetConfigOutput::name): <p>Name of a <code>Config</code>.</p>
    ///   - [`config_type(Option<ConfigCapabilityType>)`](crate::output::GetConfigOutput::config_type): <p>Type of a <code>Config</code>.</p>
    ///   - [`config_data(Option<ConfigTypeData>)`](crate::output::GetConfigOutput::config_data): <p>Data elements in a <code>Config</code>.</p>
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::GetConfigOutput::tags): <p>Tags assigned to a <code>Config</code>.</p>
    /// - On failure, responds with [`SdkError<GetConfigError>`](crate::error::GetConfigError)
    pub fn get_config(&self) -> crate::client::fluent_builders::GetConfig {
        crate::client::fluent_builders::GetConfig::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetDataflowEndpointGroup`](crate::client::fluent_builders::GetDataflowEndpointGroup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`dataflow_endpoint_group_id(impl Into<String>)`](crate::client::fluent_builders::GetDataflowEndpointGroup::dataflow_endpoint_group_id) / [`set_dataflow_endpoint_group_id(Option<String>)`](crate::client::fluent_builders::GetDataflowEndpointGroup::set_dataflow_endpoint_group_id): <p>UUID of a dataflow endpoint group.</p>
    /// - On success, responds with [`GetDataflowEndpointGroupOutput`](crate::output::GetDataflowEndpointGroupOutput) with field(s):
    ///   - [`dataflow_endpoint_group_id(Option<String>)`](crate::output::GetDataflowEndpointGroupOutput::dataflow_endpoint_group_id): <p>UUID of a dataflow endpoint group.</p>
    ///   - [`dataflow_endpoint_group_arn(Option<String>)`](crate::output::GetDataflowEndpointGroupOutput::dataflow_endpoint_group_arn): <p>ARN of a dataflow endpoint group.</p>
    ///   - [`endpoints_details(Option<Vec<EndpointDetails>>)`](crate::output::GetDataflowEndpointGroupOutput::endpoints_details): <p>Details of a dataflow endpoint.</p>
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::GetDataflowEndpointGroupOutput::tags): <p>Tags assigned to a dataflow endpoint group.</p>
    ///   - [`contact_pre_pass_duration_seconds(Option<i32>)`](crate::output::GetDataflowEndpointGroupOutput::contact_pre_pass_duration_seconds): <p>Amount of time, in seconds, prior to contact start for the contact to remain in a <code>PREPASS</code> state. A CloudWatch event is emitted when the contact enters and exits the <code>PREPASS</code> state.</p>
    ///   - [`contact_post_pass_duration_seconds(Option<i32>)`](crate::output::GetDataflowEndpointGroupOutput::contact_post_pass_duration_seconds): <p>Amount of time, in seconds, after a contact ends for the contact to remain in a <code>POSTPASS</code> state. A CloudWatch event is emitted when the contact enters and exits the <code>POSTPASS</code> state.</p>
    /// - On failure, responds with [`SdkError<GetDataflowEndpointGroupError>`](crate::error::GetDataflowEndpointGroupError)
    pub fn get_dataflow_endpoint_group(
        &self,
    ) -> crate::client::fluent_builders::GetDataflowEndpointGroup {
        crate::client::fluent_builders::GetDataflowEndpointGroup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetMinuteUsage`](crate::client::fluent_builders::GetMinuteUsage) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`month(i32)`](crate::client::fluent_builders::GetMinuteUsage::month) / [`set_month(Option<i32>)`](crate::client::fluent_builders::GetMinuteUsage::set_month): <p>The month being requested, with a value of 1-12.</p>
    ///   - [`year(i32)`](crate::client::fluent_builders::GetMinuteUsage::year) / [`set_year(Option<i32>)`](crate::client::fluent_builders::GetMinuteUsage::set_year): <p>The year being requested, in the format of YYYY.</p>
    /// - On success, responds with [`GetMinuteUsageOutput`](crate::output::GetMinuteUsageOutput) with field(s):
    ///   - [`is_reserved_minutes_customer(Option<bool>)`](crate::output::GetMinuteUsageOutput::is_reserved_minutes_customer): <p>Returns whether or not an account has signed up for the reserved minutes pricing plan, specific to the month being requested.</p>
    ///   - [`total_reserved_minute_allocation(Option<i32>)`](crate::output::GetMinuteUsageOutput::total_reserved_minute_allocation): <p>Total number of reserved minutes allocated, specific to the month being requested.</p>
    ///   - [`upcoming_minutes_scheduled(Option<i32>)`](crate::output::GetMinuteUsageOutput::upcoming_minutes_scheduled): <p>Upcoming minutes scheduled for an account, specific to the month being requested.</p>
    ///   - [`total_scheduled_minutes(Option<i32>)`](crate::output::GetMinuteUsageOutput::total_scheduled_minutes): <p>Total scheduled minutes for an account, specific to the month being requested.</p>
    ///   - [`estimated_minutes_remaining(Option<i32>)`](crate::output::GetMinuteUsageOutput::estimated_minutes_remaining): <p>Estimated number of minutes remaining for an account, specific to the month being requested.</p>
    /// - On failure, responds with [`SdkError<GetMinuteUsageError>`](crate::error::GetMinuteUsageError)
    pub fn get_minute_usage(&self) -> crate::client::fluent_builders::GetMinuteUsage {
        crate::client::fluent_builders::GetMinuteUsage::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetMissionProfile`](crate::client::fluent_builders::GetMissionProfile) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`mission_profile_id(impl Into<String>)`](crate::client::fluent_builders::GetMissionProfile::mission_profile_id) / [`set_mission_profile_id(Option<String>)`](crate::client::fluent_builders::GetMissionProfile::set_mission_profile_id): <p>UUID of a mission profile.</p>
    /// - On success, responds with [`GetMissionProfileOutput`](crate::output::GetMissionProfileOutput) with field(s):
    ///   - [`mission_profile_id(Option<String>)`](crate::output::GetMissionProfileOutput::mission_profile_id): <p>UUID of a mission profile.</p>
    ///   - [`mission_profile_arn(Option<String>)`](crate::output::GetMissionProfileOutput::mission_profile_arn): <p>ARN of a mission profile.</p>
    ///   - [`name(Option<String>)`](crate::output::GetMissionProfileOutput::name): <p>Name of a mission profile.</p>
    ///   - [`region(Option<String>)`](crate::output::GetMissionProfileOutput::region): <p>Region of a mission profile.</p>
    ///   - [`contact_pre_pass_duration_seconds(Option<i32>)`](crate::output::GetMissionProfileOutput::contact_pre_pass_duration_seconds): <p>Amount of time prior to contact start you’d like to receive a CloudWatch event indicating an upcoming pass.</p>
    ///   - [`contact_post_pass_duration_seconds(Option<i32>)`](crate::output::GetMissionProfileOutput::contact_post_pass_duration_seconds): <p>Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.</p>
    ///   - [`minimum_viable_contact_duration_seconds(Option<i32>)`](crate::output::GetMissionProfileOutput::minimum_viable_contact_duration_seconds): <p>Smallest amount of time in seconds that you’d like to see for an available contact. AWS Ground Station will not present you with contacts shorter than this duration.</p>
    ///   - [`dataflow_edges(Option<Vec<Vec<String>>>)`](crate::output::GetMissionProfileOutput::dataflow_edges): <p>A list of lists of ARNs. Each list of ARNs is an edge, with a <i>from</i> <code>Config</code> and a <i>to</i> <code>Config</code>.</p>
    ///   - [`tracking_config_arn(Option<String>)`](crate::output::GetMissionProfileOutput::tracking_config_arn): <p>ARN of a tracking <code>Config</code>.</p>
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::GetMissionProfileOutput::tags): <p>Tags assigned to a mission profile.</p>
    /// - On failure, responds with [`SdkError<GetMissionProfileError>`](crate::error::GetMissionProfileError)
    pub fn get_mission_profile(&self) -> crate::client::fluent_builders::GetMissionProfile {
        crate::client::fluent_builders::GetMissionProfile::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetSatellite`](crate::client::fluent_builders::GetSatellite) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`satellite_id(impl Into<String>)`](crate::client::fluent_builders::GetSatellite::satellite_id) / [`set_satellite_id(Option<String>)`](crate::client::fluent_builders::GetSatellite::set_satellite_id): <p>UUID of a satellite.</p>
    /// - On success, responds with [`GetSatelliteOutput`](crate::output::GetSatelliteOutput) with field(s):
    ///   - [`satellite_id(Option<String>)`](crate::output::GetSatelliteOutput::satellite_id): <p>UUID of a satellite.</p>
    ///   - [`satellite_arn(Option<String>)`](crate::output::GetSatelliteOutput::satellite_arn): <p>ARN of a satellite.</p>
    ///   - [`norad_satellite_id(i32)`](crate::output::GetSatelliteOutput::norad_satellite_id): <p>NORAD satellite ID number.</p>
    ///   - [`ground_stations(Option<Vec<String>>)`](crate::output::GetSatelliteOutput::ground_stations): <p>A list of ground stations to which the satellite is on-boarded.</p>
    ///   - [`current_ephemeris(Option<EphemerisMetaData>)`](crate::output::GetSatelliteOutput::current_ephemeris): <p>The current ephemeris being used to compute the trajectory of the satellite.</p>
    /// - On failure, responds with [`SdkError<GetSatelliteError>`](crate::error::GetSatelliteError)
    pub fn get_satellite(&self) -> crate::client::fluent_builders::GetSatellite {
        crate::client::fluent_builders::GetSatellite::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListConfigs`](crate::client::fluent_builders::ListConfigs) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListConfigs::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListConfigs::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListConfigs::set_max_results): <p>Maximum number of <code>Configs</code> returned.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListConfigs::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListConfigs::set_next_token): <p>Next token returned in the request of a previous <code>ListConfigs</code> call. Used to get the next page of results.</p>
    /// - On success, responds with [`ListConfigsOutput`](crate::output::ListConfigsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListConfigsOutput::next_token): <p>Next token returned in the response of a previous <code>ListConfigs</code> call. Used to get the next page of results.</p>
    ///   - [`config_list(Option<Vec<ConfigListItem>>)`](crate::output::ListConfigsOutput::config_list): <p>List of <code>Config</code> items.</p>
    /// - On failure, responds with [`SdkError<ListConfigsError>`](crate::error::ListConfigsError)
    pub fn list_configs(&self) -> crate::client::fluent_builders::ListConfigs {
        crate::client::fluent_builders::ListConfigs::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListContacts`](crate::client::fluent_builders::ListContacts) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListContacts::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListContacts::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListContacts::set_max_results): <p>Maximum number of contacts returned.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListContacts::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListContacts::set_next_token): <p>Next token returned in the request of a previous <code>ListContacts</code> call. Used to get the next page of results.</p>
    ///   - [`status_list(Vec<ContactStatus>)`](crate::client::fluent_builders::ListContacts::status_list) / [`set_status_list(Option<Vec<ContactStatus>>)`](crate::client::fluent_builders::ListContacts::set_status_list): <p>Status of a contact reservation.</p>
    ///   - [`start_time(DateTime)`](crate::client::fluent_builders::ListContacts::start_time) / [`set_start_time(Option<DateTime>)`](crate::client::fluent_builders::ListContacts::set_start_time): <p>Start time of a contact in UTC.</p>
    ///   - [`end_time(DateTime)`](crate::client::fluent_builders::ListContacts::end_time) / [`set_end_time(Option<DateTime>)`](crate::client::fluent_builders::ListContacts::set_end_time): <p>End time of a contact in UTC.</p>
    ///   - [`ground_station(impl Into<String>)`](crate::client::fluent_builders::ListContacts::ground_station) / [`set_ground_station(Option<String>)`](crate::client::fluent_builders::ListContacts::set_ground_station): <p>Name of a ground station.</p>
    ///   - [`satellite_arn(impl Into<String>)`](crate::client::fluent_builders::ListContacts::satellite_arn) / [`set_satellite_arn(Option<String>)`](crate::client::fluent_builders::ListContacts::set_satellite_arn): <p>ARN of a satellite.</p>
    ///   - [`mission_profile_arn(impl Into<String>)`](crate::client::fluent_builders::ListContacts::mission_profile_arn) / [`set_mission_profile_arn(Option<String>)`](crate::client::fluent_builders::ListContacts::set_mission_profile_arn): <p>ARN of a mission profile.</p>
    /// - On success, responds with [`ListContactsOutput`](crate::output::ListContactsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListContactsOutput::next_token): <p>Next token returned in the response of a previous <code>ListContacts</code> call. Used to get the next page of results.</p>
    ///   - [`contact_list(Option<Vec<ContactData>>)`](crate::output::ListContactsOutput::contact_list): <p>List of contacts.</p>
    /// - On failure, responds with [`SdkError<ListContactsError>`](crate::error::ListContactsError)
    pub fn list_contacts(&self) -> crate::client::fluent_builders::ListContacts {
        crate::client::fluent_builders::ListContacts::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListDataflowEndpointGroups`](crate::client::fluent_builders::ListDataflowEndpointGroups) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListDataflowEndpointGroups::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListDataflowEndpointGroups::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListDataflowEndpointGroups::set_max_results): <p>Maximum number of dataflow endpoint groups returned.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListDataflowEndpointGroups::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListDataflowEndpointGroups::set_next_token): <p>Next token returned in the request of a previous <code>ListDataflowEndpointGroups</code> call. Used to get the next page of results.</p>
    /// - On success, responds with [`ListDataflowEndpointGroupsOutput`](crate::output::ListDataflowEndpointGroupsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListDataflowEndpointGroupsOutput::next_token): <p>Next token returned in the response of a previous <code>ListDataflowEndpointGroups</code> call. Used to get the next page of results.</p>
    ///   - [`dataflow_endpoint_group_list(Option<Vec<DataflowEndpointListItem>>)`](crate::output::ListDataflowEndpointGroupsOutput::dataflow_endpoint_group_list): <p>A list of dataflow endpoint groups.</p>
    /// - On failure, responds with [`SdkError<ListDataflowEndpointGroupsError>`](crate::error::ListDataflowEndpointGroupsError)
    pub fn list_dataflow_endpoint_groups(
        &self,
    ) -> crate::client::fluent_builders::ListDataflowEndpointGroups {
        crate::client::fluent_builders::ListDataflowEndpointGroups::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListEphemerides`](crate::client::fluent_builders::ListEphemerides) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListEphemerides::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`satellite_id(impl Into<String>)`](crate::client::fluent_builders::ListEphemerides::satellite_id) / [`set_satellite_id(Option<String>)`](crate::client::fluent_builders::ListEphemerides::set_satellite_id): <p>The AWS Ground Station satellite ID to list ephemeris for.</p>
    ///   - [`start_time(DateTime)`](crate::client::fluent_builders::ListEphemerides::start_time) / [`set_start_time(Option<DateTime>)`](crate::client::fluent_builders::ListEphemerides::set_start_time): <p>The start time to list in UTC. The operation will return an ephemeris if its expiration time is within the time range defined by the <code>startTime</code> and <code>endTime</code>.</p>
    ///   - [`end_time(DateTime)`](crate::client::fluent_builders::ListEphemerides::end_time) / [`set_end_time(Option<DateTime>)`](crate::client::fluent_builders::ListEphemerides::set_end_time): <p>The end time to list in UTC. The operation will return an ephemeris if its expiration time is within the time range defined by the <code>startTime</code> and <code>endTime</code>.</p>
    ///   - [`status_list(Vec<EphemerisStatus>)`](crate::client::fluent_builders::ListEphemerides::status_list) / [`set_status_list(Option<Vec<EphemerisStatus>>)`](crate::client::fluent_builders::ListEphemerides::set_status_list): <p>The list of ephemeris status to return.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListEphemerides::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListEphemerides::set_max_results): <p>Maximum number of ephemerides to return.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListEphemerides::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListEphemerides::set_next_token): <p>Pagination token.</p>
    /// - On success, responds with [`ListEphemeridesOutput`](crate::output::ListEphemeridesOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListEphemeridesOutput::next_token): <p>Pagination token.</p>
    ///   - [`ephemerides(Option<Vec<EphemerisItem>>)`](crate::output::ListEphemeridesOutput::ephemerides): <p>List of ephemerides.</p>
    /// - On failure, responds with [`SdkError<ListEphemeridesError>`](crate::error::ListEphemeridesError)
    pub fn list_ephemerides(&self) -> crate::client::fluent_builders::ListEphemerides {
        crate::client::fluent_builders::ListEphemerides::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListGroundStations`](crate::client::fluent_builders::ListGroundStations) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListGroundStations::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`satellite_id(impl Into<String>)`](crate::client::fluent_builders::ListGroundStations::satellite_id) / [`set_satellite_id(Option<String>)`](crate::client::fluent_builders::ListGroundStations::set_satellite_id): <p>Satellite ID to retrieve on-boarded ground stations.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListGroundStations::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListGroundStations::set_max_results): <p>Maximum number of ground stations returned.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListGroundStations::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListGroundStations::set_next_token): <p>Next token that can be supplied in the next call to get the next page of ground stations.</p>
    /// - On success, responds with [`ListGroundStationsOutput`](crate::output::ListGroundStationsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListGroundStationsOutput::next_token): <p>Next token that can be supplied in the next call to get the next page of ground stations.</p>
    ///   - [`ground_station_list(Option<Vec<GroundStationData>>)`](crate::output::ListGroundStationsOutput::ground_station_list): <p>List of ground stations.</p>
    /// - On failure, responds with [`SdkError<ListGroundStationsError>`](crate::error::ListGroundStationsError)
    pub fn list_ground_stations(&self) -> crate::client::fluent_builders::ListGroundStations {
        crate::client::fluent_builders::ListGroundStations::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListMissionProfiles`](crate::client::fluent_builders::ListMissionProfiles) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListMissionProfiles::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListMissionProfiles::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListMissionProfiles::set_max_results): <p>Maximum number of mission profiles returned.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListMissionProfiles::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListMissionProfiles::set_next_token): <p>Next token returned in the request of a previous <code>ListMissionProfiles</code> call. Used to get the next page of results.</p>
    /// - On success, responds with [`ListMissionProfilesOutput`](crate::output::ListMissionProfilesOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListMissionProfilesOutput::next_token): <p>Next token returned in the response of a previous <code>ListMissionProfiles</code> call. Used to get the next page of results.</p>
    ///   - [`mission_profile_list(Option<Vec<MissionProfileListItem>>)`](crate::output::ListMissionProfilesOutput::mission_profile_list): <p>List of mission profiles.</p>
    /// - On failure, responds with [`SdkError<ListMissionProfilesError>`](crate::error::ListMissionProfilesError)
    pub fn list_mission_profiles(&self) -> crate::client::fluent_builders::ListMissionProfiles {
        crate::client::fluent_builders::ListMissionProfiles::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListSatellites`](crate::client::fluent_builders::ListSatellites) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListSatellites::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListSatellites::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListSatellites::set_max_results): <p>Maximum number of satellites returned.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListSatellites::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListSatellites::set_next_token): <p>Next token that can be supplied in the next call to get the next page of satellites.</p>
    /// - On success, responds with [`ListSatellitesOutput`](crate::output::ListSatellitesOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListSatellitesOutput::next_token): <p>Next token that can be supplied in the next call to get the next page of satellites.</p>
    ///   - [`satellites(Option<Vec<SatelliteListItem>>)`](crate::output::ListSatellitesOutput::satellites): <p>List of satellites.</p>
    /// - On failure, responds with [`SdkError<ListSatellitesError>`](crate::error::ListSatellitesError)
    pub fn list_satellites(&self) -> crate::client::fluent_builders::ListSatellites {
        crate::client::fluent_builders::ListSatellites::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_resource_arn): <p>ARN of a resource.</p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::ListTagsForResourceOutput::tags): <p>Tags assigned to a resource.</p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ReserveContact`](crate::client::fluent_builders::ReserveContact) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`mission_profile_arn(impl Into<String>)`](crate::client::fluent_builders::ReserveContact::mission_profile_arn) / [`set_mission_profile_arn(Option<String>)`](crate::client::fluent_builders::ReserveContact::set_mission_profile_arn): <p>ARN of a mission profile.</p>
    ///   - [`satellite_arn(impl Into<String>)`](crate::client::fluent_builders::ReserveContact::satellite_arn) / [`set_satellite_arn(Option<String>)`](crate::client::fluent_builders::ReserveContact::set_satellite_arn): <p>ARN of a satellite</p>
    ///   - [`start_time(DateTime)`](crate::client::fluent_builders::ReserveContact::start_time) / [`set_start_time(Option<DateTime>)`](crate::client::fluent_builders::ReserveContact::set_start_time): <p>Start time of a contact in UTC.</p>
    ///   - [`end_time(DateTime)`](crate::client::fluent_builders::ReserveContact::end_time) / [`set_end_time(Option<DateTime>)`](crate::client::fluent_builders::ReserveContact::set_end_time): <p>End time of a contact in UTC.</p>
    ///   - [`ground_station(impl Into<String>)`](crate::client::fluent_builders::ReserveContact::ground_station) / [`set_ground_station(Option<String>)`](crate::client::fluent_builders::ReserveContact::set_ground_station): <p>Name of a ground station.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::ReserveContact::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::ReserveContact::set_tags): <p>Tags assigned to a contact.</p>
    /// - On success, responds with [`ReserveContactOutput`](crate::output::ReserveContactOutput) with field(s):
    ///   - [`contact_id(Option<String>)`](crate::output::ReserveContactOutput::contact_id): <p>UUID of a contact.</p>
    /// - On failure, responds with [`SdkError<ReserveContactError>`](crate::error::ReserveContactError)
    pub fn reserve_contact(&self) -> crate::client::fluent_builders::ReserveContact {
        crate::client::fluent_builders::ReserveContact::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): <p>ARN of a resource tag.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>Tags assigned to a resource.</p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): <p>ARN of a resource.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>Keys of a resource tag.</p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateConfig`](crate::client::fluent_builders::UpdateConfig) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`config_id(impl Into<String>)`](crate::client::fluent_builders::UpdateConfig::config_id) / [`set_config_id(Option<String>)`](crate::client::fluent_builders::UpdateConfig::set_config_id): <p>UUID of a <code>Config</code>.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateConfig::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateConfig::set_name): <p>Name of a <code>Config</code>.</p>
    ///   - [`config_type(ConfigCapabilityType)`](crate::client::fluent_builders::UpdateConfig::config_type) / [`set_config_type(Option<ConfigCapabilityType>)`](crate::client::fluent_builders::UpdateConfig::set_config_type): <p>Type of a <code>Config</code>.</p>
    ///   - [`config_data(ConfigTypeData)`](crate::client::fluent_builders::UpdateConfig::config_data) / [`set_config_data(Option<ConfigTypeData>)`](crate::client::fluent_builders::UpdateConfig::set_config_data): <p>Parameters of a <code>Config</code>.</p>
    /// - On success, responds with [`UpdateConfigOutput`](crate::output::UpdateConfigOutput) with field(s):
    ///   - [`config_id(Option<String>)`](crate::output::UpdateConfigOutput::config_id): <p>UUID of a <code>Config</code>.</p>
    ///   - [`config_type(Option<ConfigCapabilityType>)`](crate::output::UpdateConfigOutput::config_type): <p>Type of a <code>Config</code>.</p>
    ///   - [`config_arn(Option<String>)`](crate::output::UpdateConfigOutput::config_arn): <p>ARN of a <code>Config</code>.</p>
    /// - On failure, responds with [`SdkError<UpdateConfigError>`](crate::error::UpdateConfigError)
    pub fn update_config(&self) -> crate::client::fluent_builders::UpdateConfig {
        crate::client::fluent_builders::UpdateConfig::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateEphemeris`](crate::client::fluent_builders::UpdateEphemeris) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`ephemeris_id(impl Into<String>)`](crate::client::fluent_builders::UpdateEphemeris::ephemeris_id) / [`set_ephemeris_id(Option<String>)`](crate::client::fluent_builders::UpdateEphemeris::set_ephemeris_id): <p>The AWS Ground Station ephemeris ID.</p>
    ///   - [`enabled(bool)`](crate::client::fluent_builders::UpdateEphemeris::enabled) / [`set_enabled(Option<bool>)`](crate::client::fluent_builders::UpdateEphemeris::set_enabled): <p>Whether the ephemeris is enabled or not. Changing this value will not require the ephemeris to be re-validated.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateEphemeris::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateEphemeris::set_name): <p>A name string associated with the ephemeris. Used as a human-readable identifier for the ephemeris.</p>
    ///   - [`priority(i32)`](crate::client::fluent_builders::UpdateEphemeris::priority) / [`set_priority(Option<i32>)`](crate::client::fluent_builders::UpdateEphemeris::set_priority): <p>Customer-provided priority score to establish the order in which overlapping ephemerides should be used.</p>  <p>The default for customer-provided ephemeris priority is 1, and higher numbers take precedence.</p>  <p>Priority must be 1 or greater</p>
    /// - On success, responds with [`UpdateEphemerisOutput`](crate::output::UpdateEphemerisOutput) with field(s):
    ///   - [`ephemeris_id(Option<String>)`](crate::output::UpdateEphemerisOutput::ephemeris_id): <p>The AWS Ground Station ephemeris ID.</p>
    /// - On failure, responds with [`SdkError<UpdateEphemerisError>`](crate::error::UpdateEphemerisError)
    pub fn update_ephemeris(&self) -> crate::client::fluent_builders::UpdateEphemeris {
        crate::client::fluent_builders::UpdateEphemeris::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateMissionProfile`](crate::client::fluent_builders::UpdateMissionProfile) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`mission_profile_id(impl Into<String>)`](crate::client::fluent_builders::UpdateMissionProfile::mission_profile_id) / [`set_mission_profile_id(Option<String>)`](crate::client::fluent_builders::UpdateMissionProfile::set_mission_profile_id): <p>UUID of a mission profile.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateMissionProfile::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateMissionProfile::set_name): <p>Name of a mission profile.</p>
    ///   - [`contact_pre_pass_duration_seconds(i32)`](crate::client::fluent_builders::UpdateMissionProfile::contact_pre_pass_duration_seconds) / [`set_contact_pre_pass_duration_seconds(Option<i32>)`](crate::client::fluent_builders::UpdateMissionProfile::set_contact_pre_pass_duration_seconds): <p>Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.</p>
    ///   - [`contact_post_pass_duration_seconds(i32)`](crate::client::fluent_builders::UpdateMissionProfile::contact_post_pass_duration_seconds) / [`set_contact_post_pass_duration_seconds(Option<i32>)`](crate::client::fluent_builders::UpdateMissionProfile::set_contact_post_pass_duration_seconds): <p>Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.</p>
    ///   - [`minimum_viable_contact_duration_seconds(i32)`](crate::client::fluent_builders::UpdateMissionProfile::minimum_viable_contact_duration_seconds) / [`set_minimum_viable_contact_duration_seconds(Option<i32>)`](crate::client::fluent_builders::UpdateMissionProfile::set_minimum_viable_contact_duration_seconds): <p>Smallest amount of time in seconds that you’d like to see for an available contact. AWS Ground Station will not present you with contacts shorter than this duration.</p>
    ///   - [`dataflow_edges(Vec<Vec<String>>)`](crate::client::fluent_builders::UpdateMissionProfile::dataflow_edges) / [`set_dataflow_edges(Option<Vec<Vec<String>>>)`](crate::client::fluent_builders::UpdateMissionProfile::set_dataflow_edges): <p>A list of lists of ARNs. Each list of ARNs is an edge, with a <i>from</i> <code>Config</code> and a <i>to</i> <code>Config</code>.</p>
    ///   - [`tracking_config_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateMissionProfile::tracking_config_arn) / [`set_tracking_config_arn(Option<String>)`](crate::client::fluent_builders::UpdateMissionProfile::set_tracking_config_arn): <p>ARN of a tracking <code>Config</code>.</p>
    /// - On success, responds with [`UpdateMissionProfileOutput`](crate::output::UpdateMissionProfileOutput) with field(s):
    ///   - [`mission_profile_id(Option<String>)`](crate::output::UpdateMissionProfileOutput::mission_profile_id): <p>UUID of a mission profile.</p>
    /// - On failure, responds with [`SdkError<UpdateMissionProfileError>`](crate::error::UpdateMissionProfileError)
    pub fn update_mission_profile(&self) -> crate::client::fluent_builders::UpdateMissionProfile {
        crate::client::fluent_builders::UpdateMissionProfile::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
