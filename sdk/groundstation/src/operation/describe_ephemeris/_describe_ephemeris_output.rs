// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeEphemerisOutput {
    /// <p>The AWS Ground Station ephemeris ID.</p>
    #[doc(hidden)]
    pub ephemeris_id: std::option::Option<std::string::String>,
    /// <p>The AWS Ground Station satellite ID associated with ephemeris.</p>
    #[doc(hidden)]
    pub satellite_id: std::option::Option<std::string::String>,
    /// <p>The status of the ephemeris.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::EphemerisStatus>,
    /// <p>Customer-provided priority score to establish the order in which overlapping ephemerides should be used.</p>
    /// <p>The default for customer-provided ephemeris priority is 1, and higher numbers take precedence.</p>
    /// <p>Priority must be 1 or greater</p>
    #[doc(hidden)]
    pub priority: std::option::Option<i32>,
    /// <p>The time the ephemeris was uploaded in UTC.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Whether or not the ephemeris is enabled.</p>
    #[doc(hidden)]
    pub enabled: std::option::Option<bool>,
    /// <p>A name string associated with the ephemeris. Used as a human-readable identifier for the ephemeris.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>Tags assigned to an ephemeris.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>Supplied ephemeris data.</p>
    #[doc(hidden)]
    pub supplied_data: std::option::Option<crate::types::EphemerisTypeDescription>,
    /// <p>Reason that an ephemeris failed validation. Only provided for ephemerides with <code>INVALID</code> status.</p>
    #[doc(hidden)]
    pub invalid_reason: std::option::Option<crate::types::EphemerisInvalidReason>,
    _request_id: Option<String>,
}
impl DescribeEphemerisOutput {
    /// <p>The AWS Ground Station ephemeris ID.</p>
    pub fn ephemeris_id(&self) -> std::option::Option<&str> {
        self.ephemeris_id.as_deref()
    }
    /// <p>The AWS Ground Station satellite ID associated with ephemeris.</p>
    pub fn satellite_id(&self) -> std::option::Option<&str> {
        self.satellite_id.as_deref()
    }
    /// <p>The status of the ephemeris.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::EphemerisStatus> {
        self.status.as_ref()
    }
    /// <p>Customer-provided priority score to establish the order in which overlapping ephemerides should be used.</p>
    /// <p>The default for customer-provided ephemeris priority is 1, and higher numbers take precedence.</p>
    /// <p>Priority must be 1 or greater</p>
    pub fn priority(&self) -> std::option::Option<i32> {
        self.priority
    }
    /// <p>The time the ephemeris was uploaded in UTC.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>Whether or not the ephemeris is enabled.</p>
    pub fn enabled(&self) -> std::option::Option<bool> {
        self.enabled
    }
    /// <p>A name string associated with the ephemeris. Used as a human-readable identifier for the ephemeris.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Tags assigned to an ephemeris.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p>Supplied ephemeris data.</p>
    pub fn supplied_data(&self) -> std::option::Option<&crate::types::EphemerisTypeDescription> {
        self.supplied_data.as_ref()
    }
    /// <p>Reason that an ephemeris failed validation. Only provided for ephemerides with <code>INVALID</code> status.</p>
    pub fn invalid_reason(&self) -> std::option::Option<&crate::types::EphemerisInvalidReason> {
        self.invalid_reason.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeEphemerisOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeEphemerisOutput {
    /// Creates a new builder-style object to manufacture [`DescribeEphemerisOutput`](crate::operation::describe_ephemeris::DescribeEphemerisOutput).
    pub fn builder(
    ) -> crate::operation::describe_ephemeris::builders::DescribeEphemerisOutputBuilder {
        crate::operation::describe_ephemeris::builders::DescribeEphemerisOutputBuilder::default()
    }
}

/// A builder for [`DescribeEphemerisOutput`](crate::operation::describe_ephemeris::DescribeEphemerisOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeEphemerisOutputBuilder {
    pub(crate) ephemeris_id: std::option::Option<std::string::String>,
    pub(crate) satellite_id: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::EphemerisStatus>,
    pub(crate) priority: std::option::Option<i32>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) enabled: std::option::Option<bool>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) supplied_data: std::option::Option<crate::types::EphemerisTypeDescription>,
    pub(crate) invalid_reason: std::option::Option<crate::types::EphemerisInvalidReason>,
    _request_id: Option<String>,
}
impl DescribeEphemerisOutputBuilder {
    /// <p>The AWS Ground Station ephemeris ID.</p>
    pub fn ephemeris_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.ephemeris_id = Some(input.into());
        self
    }
    /// <p>The AWS Ground Station ephemeris ID.</p>
    pub fn set_ephemeris_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ephemeris_id = input;
        self
    }
    /// <p>The AWS Ground Station satellite ID associated with ephemeris.</p>
    pub fn satellite_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.satellite_id = Some(input.into());
        self
    }
    /// <p>The AWS Ground Station satellite ID associated with ephemeris.</p>
    pub fn set_satellite_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.satellite_id = input;
        self
    }
    /// <p>The status of the ephemeris.</p>
    pub fn status(mut self, input: crate::types::EphemerisStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the ephemeris.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::EphemerisStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Customer-provided priority score to establish the order in which overlapping ephemerides should be used.</p>
    /// <p>The default for customer-provided ephemeris priority is 1, and higher numbers take precedence.</p>
    /// <p>Priority must be 1 or greater</p>
    pub fn priority(mut self, input: i32) -> Self {
        self.priority = Some(input);
        self
    }
    /// <p>Customer-provided priority score to establish the order in which overlapping ephemerides should be used.</p>
    /// <p>The default for customer-provided ephemeris priority is 1, and higher numbers take precedence.</p>
    /// <p>Priority must be 1 or greater</p>
    pub fn set_priority(mut self, input: std::option::Option<i32>) -> Self {
        self.priority = input;
        self
    }
    /// <p>The time the ephemeris was uploaded in UTC.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The time the ephemeris was uploaded in UTC.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>Whether or not the ephemeris is enabled.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = Some(input);
        self
    }
    /// <p>Whether or not the ephemeris is enabled.</p>
    pub fn set_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>A name string associated with the ephemeris. Used as a human-readable identifier for the ephemeris.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>A name string associated with the ephemeris. Used as a human-readable identifier for the ephemeris.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags assigned to an ephemeris.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>Tags assigned to an ephemeris.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>Supplied ephemeris data.</p>
    pub fn supplied_data(mut self, input: crate::types::EphemerisTypeDescription) -> Self {
        self.supplied_data = Some(input);
        self
    }
    /// <p>Supplied ephemeris data.</p>
    pub fn set_supplied_data(
        mut self,
        input: std::option::Option<crate::types::EphemerisTypeDescription>,
    ) -> Self {
        self.supplied_data = input;
        self
    }
    /// <p>Reason that an ephemeris failed validation. Only provided for ephemerides with <code>INVALID</code> status.</p>
    pub fn invalid_reason(mut self, input: crate::types::EphemerisInvalidReason) -> Self {
        self.invalid_reason = Some(input);
        self
    }
    /// <p>Reason that an ephemeris failed validation. Only provided for ephemerides with <code>INVALID</code> status.</p>
    pub fn set_invalid_reason(
        mut self,
        input: std::option::Option<crate::types::EphemerisInvalidReason>,
    ) -> Self {
        self.invalid_reason = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeEphemerisOutput`](crate::operation::describe_ephemeris::DescribeEphemerisOutput).
    pub fn build(self) -> crate::operation::describe_ephemeris::DescribeEphemerisOutput {
        crate::operation::describe_ephemeris::DescribeEphemerisOutput {
            ephemeris_id: self.ephemeris_id,
            satellite_id: self.satellite_id,
            status: self.status,
            priority: self.priority,
            creation_time: self.creation_time,
            enabled: self.enabled,
            name: self.name,
            tags: self.tags,
            supplied_data: self.supplied_data,
            invalid_reason: self.invalid_reason,
            _request_id: self._request_id,
        }
    }
}
