// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeEphemerisOutput {
    /// <p>The AWS Ground Station ephemeris ID.</p>
    pub ephemeris_id: ::std::option::Option<::std::string::String>,
    /// <p>The AWS Ground Station satellite ID associated with ephemeris.</p>
    pub satellite_id: ::std::option::Option<::std::string::String>,
    /// <p>The status of the ephemeris.</p>
    pub status: ::std::option::Option<crate::types::EphemerisStatus>,
    /// <p>A priority score that determines which ephemeris to use when multiple ephemerides overlap.</p>
    /// <p>Higher numbers take precedence. The default is 1. Must be 1 or greater.</p>
    pub priority: ::std::option::Option<i32>,
    /// <p>The time the ephemeris was uploaded in UTC.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Whether or not the ephemeris is enabled.</p>
    pub enabled: ::std::option::Option<bool>,
    /// <p>A name that you can use to identify the ephemeris.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Tags assigned to an ephemeris.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>Supplied ephemeris data.</p>
    pub supplied_data: ::std::option::Option<crate::types::EphemerisTypeDescription>,
    /// <p>Reason that an ephemeris failed validation. Appears only when the status is <code>INVALID</code>.</p>
    pub invalid_reason: ::std::option::Option<crate::types::EphemerisInvalidReason>,
    /// <p>Detailed error information for ephemerides with <code>INVALID</code> status.</p>
    /// <p>Provides specific error codes and messages to help diagnose validation failures.</p>
    pub error_reasons: ::std::option::Option<::std::vec::Vec<crate::types::EphemerisErrorReason>>,
    _request_id: Option<String>,
}
impl DescribeEphemerisOutput {
    /// <p>The AWS Ground Station ephemeris ID.</p>
    pub fn ephemeris_id(&self) -> ::std::option::Option<&str> {
        self.ephemeris_id.as_deref()
    }
    /// <p>The AWS Ground Station satellite ID associated with ephemeris.</p>
    pub fn satellite_id(&self) -> ::std::option::Option<&str> {
        self.satellite_id.as_deref()
    }
    /// <p>The status of the ephemeris.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::EphemerisStatus> {
        self.status.as_ref()
    }
    /// <p>A priority score that determines which ephemeris to use when multiple ephemerides overlap.</p>
    /// <p>Higher numbers take precedence. The default is 1. Must be 1 or greater.</p>
    pub fn priority(&self) -> ::std::option::Option<i32> {
        self.priority
    }
    /// <p>The time the ephemeris was uploaded in UTC.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>Whether or not the ephemeris is enabled.</p>
    pub fn enabled(&self) -> ::std::option::Option<bool> {
        self.enabled
    }
    /// <p>A name that you can use to identify the ephemeris.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Tags assigned to an ephemeris.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>Supplied ephemeris data.</p>
    pub fn supplied_data(&self) -> ::std::option::Option<&crate::types::EphemerisTypeDescription> {
        self.supplied_data.as_ref()
    }
    /// <p>Reason that an ephemeris failed validation. Appears only when the status is <code>INVALID</code>.</p>
    pub fn invalid_reason(&self) -> ::std::option::Option<&crate::types::EphemerisInvalidReason> {
        self.invalid_reason.as_ref()
    }
    /// <p>Detailed error information for ephemerides with <code>INVALID</code> status.</p>
    /// <p>Provides specific error codes and messages to help diagnose validation failures.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.error_reasons.is_none()`.
    pub fn error_reasons(&self) -> &[crate::types::EphemerisErrorReason] {
        self.error_reasons.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for DescribeEphemerisOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeEphemerisOutput {
    /// Creates a new builder-style object to manufacture [`DescribeEphemerisOutput`](crate::operation::describe_ephemeris::DescribeEphemerisOutput).
    pub fn builder() -> crate::operation::describe_ephemeris::builders::DescribeEphemerisOutputBuilder {
        crate::operation::describe_ephemeris::builders::DescribeEphemerisOutputBuilder::default()
    }
}

/// A builder for [`DescribeEphemerisOutput`](crate::operation::describe_ephemeris::DescribeEphemerisOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeEphemerisOutputBuilder {
    pub(crate) ephemeris_id: ::std::option::Option<::std::string::String>,
    pub(crate) satellite_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::EphemerisStatus>,
    pub(crate) priority: ::std::option::Option<i32>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) enabled: ::std::option::Option<bool>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) supplied_data: ::std::option::Option<crate::types::EphemerisTypeDescription>,
    pub(crate) invalid_reason: ::std::option::Option<crate::types::EphemerisInvalidReason>,
    pub(crate) error_reasons: ::std::option::Option<::std::vec::Vec<crate::types::EphemerisErrorReason>>,
    _request_id: Option<String>,
}
impl DescribeEphemerisOutputBuilder {
    /// <p>The AWS Ground Station ephemeris ID.</p>
    pub fn ephemeris_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ephemeris_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The AWS Ground Station ephemeris ID.</p>
    pub fn set_ephemeris_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ephemeris_id = input;
        self
    }
    /// <p>The AWS Ground Station ephemeris ID.</p>
    pub fn get_ephemeris_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ephemeris_id
    }
    /// <p>The AWS Ground Station satellite ID associated with ephemeris.</p>
    pub fn satellite_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.satellite_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The AWS Ground Station satellite ID associated with ephemeris.</p>
    pub fn set_satellite_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.satellite_id = input;
        self
    }
    /// <p>The AWS Ground Station satellite ID associated with ephemeris.</p>
    pub fn get_satellite_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.satellite_id
    }
    /// <p>The status of the ephemeris.</p>
    pub fn status(mut self, input: crate::types::EphemerisStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the ephemeris.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::EphemerisStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the ephemeris.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::EphemerisStatus> {
        &self.status
    }
    /// <p>A priority score that determines which ephemeris to use when multiple ephemerides overlap.</p>
    /// <p>Higher numbers take precedence. The default is 1. Must be 1 or greater.</p>
    pub fn priority(mut self, input: i32) -> Self {
        self.priority = ::std::option::Option::Some(input);
        self
    }
    /// <p>A priority score that determines which ephemeris to use when multiple ephemerides overlap.</p>
    /// <p>Higher numbers take precedence. The default is 1. Must be 1 or greater.</p>
    pub fn set_priority(mut self, input: ::std::option::Option<i32>) -> Self {
        self.priority = input;
        self
    }
    /// <p>A priority score that determines which ephemeris to use when multiple ephemerides overlap.</p>
    /// <p>Higher numbers take precedence. The default is 1. Must be 1 or greater.</p>
    pub fn get_priority(&self) -> &::std::option::Option<i32> {
        &self.priority
    }
    /// <p>The time the ephemeris was uploaded in UTC.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the ephemeris was uploaded in UTC.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time the ephemeris was uploaded in UTC.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>Whether or not the ephemeris is enabled.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether or not the ephemeris is enabled.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Whether or not the ephemeris is enabled.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// <p>A name that you can use to identify the ephemeris.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name that you can use to identify the ephemeris.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A name that you can use to identify the ephemeris.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags assigned to an ephemeris.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Tags assigned to an ephemeris.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Tags assigned to an ephemeris.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>Supplied ephemeris data.</p>
    pub fn supplied_data(mut self, input: crate::types::EphemerisTypeDescription) -> Self {
        self.supplied_data = ::std::option::Option::Some(input);
        self
    }
    /// <p>Supplied ephemeris data.</p>
    pub fn set_supplied_data(mut self, input: ::std::option::Option<crate::types::EphemerisTypeDescription>) -> Self {
        self.supplied_data = input;
        self
    }
    /// <p>Supplied ephemeris data.</p>
    pub fn get_supplied_data(&self) -> &::std::option::Option<crate::types::EphemerisTypeDescription> {
        &self.supplied_data
    }
    /// <p>Reason that an ephemeris failed validation. Appears only when the status is <code>INVALID</code>.</p>
    pub fn invalid_reason(mut self, input: crate::types::EphemerisInvalidReason) -> Self {
        self.invalid_reason = ::std::option::Option::Some(input);
        self
    }
    /// <p>Reason that an ephemeris failed validation. Appears only when the status is <code>INVALID</code>.</p>
    pub fn set_invalid_reason(mut self, input: ::std::option::Option<crate::types::EphemerisInvalidReason>) -> Self {
        self.invalid_reason = input;
        self
    }
    /// <p>Reason that an ephemeris failed validation. Appears only when the status is <code>INVALID</code>.</p>
    pub fn get_invalid_reason(&self) -> &::std::option::Option<crate::types::EphemerisInvalidReason> {
        &self.invalid_reason
    }
    /// Appends an item to `error_reasons`.
    ///
    /// To override the contents of this collection use [`set_error_reasons`](Self::set_error_reasons).
    ///
    /// <p>Detailed error information for ephemerides with <code>INVALID</code> status.</p>
    /// <p>Provides specific error codes and messages to help diagnose validation failures.</p>
    pub fn error_reasons(mut self, input: crate::types::EphemerisErrorReason) -> Self {
        let mut v = self.error_reasons.unwrap_or_default();
        v.push(input);
        self.error_reasons = ::std::option::Option::Some(v);
        self
    }
    /// <p>Detailed error information for ephemerides with <code>INVALID</code> status.</p>
    /// <p>Provides specific error codes and messages to help diagnose validation failures.</p>
    pub fn set_error_reasons(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EphemerisErrorReason>>) -> Self {
        self.error_reasons = input;
        self
    }
    /// <p>Detailed error information for ephemerides with <code>INVALID</code> status.</p>
    /// <p>Provides specific error codes and messages to help diagnose validation failures.</p>
    pub fn get_error_reasons(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EphemerisErrorReason>> {
        &self.error_reasons
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeEphemerisOutput`](crate::operation::describe_ephemeris::DescribeEphemerisOutput).
    pub fn build(self) -> crate::operation::describe_ephemeris::DescribeEphemerisOutput {
        crate::operation::describe_ephemeris::DescribeEphemerisOutput {
            ephemeris_id: self.ephemeris_id,
            satellite_id: self.satellite_id,
            status: self.status,
            priority: self.priority,
            creation_time: self.creation_time,
            enabled: self.enabled,
            name: self.name,
            tags: self.tags,
            supplied_data: self.supplied_data,
            invalid_reason: self.invalid_reason,
            error_reasons: self.error_reasons,
            _request_id: self._request_id,
        }
    }
}
