// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_agent_status::_update_agent_status_output::UpdateAgentStatusOutputBuilder;

pub use crate::operation::update_agent_status::_update_agent_status_input::UpdateAgentStatusInputBuilder;

impl UpdateAgentStatusInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_agent_status::UpdateAgentStatusOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_agent_status::UpdateAgentStatusError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_agent_status();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateAgentStatus`.
///
/// <note>
/// <p> For use by AWS Ground Station Agent and shouldn't be called directly.</p>
/// </note>
/// <p>Update the status of the agent.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateAgentStatusFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_agent_status::builders::UpdateAgentStatusInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_agent_status::UpdateAgentStatusOutput,
        crate::operation::update_agent_status::UpdateAgentStatusError,
    > for UpdateAgentStatusFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_agent_status::UpdateAgentStatusOutput,
            crate::operation::update_agent_status::UpdateAgentStatusError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateAgentStatusFluentBuilder {
    /// Creates a new `UpdateAgentStatus`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateAgentStatus as a reference.
    pub fn as_input(&self) -> &crate::operation::update_agent_status::builders::UpdateAgentStatusInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_agent_status::UpdateAgentStatusOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_agent_status::UpdateAgentStatusError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_agent_status::UpdateAgentStatus::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_agent_status::UpdateAgentStatus::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_agent_status::UpdateAgentStatusOutput,
        crate::operation::update_agent_status::UpdateAgentStatusError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>UUID of agent to update.</p>
    pub fn agent_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.agent_id(input.into());
        self
    }
    /// <p>UUID of agent to update.</p>
    pub fn set_agent_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_agent_id(input);
        self
    }
    /// <p>UUID of agent to update.</p>
    pub fn get_agent_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_agent_id()
    }
    /// <p>GUID of agent task.</p>
    pub fn task_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.task_id(input.into());
        self
    }
    /// <p>GUID of agent task.</p>
    pub fn set_task_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_task_id(input);
        self
    }
    /// <p>GUID of agent task.</p>
    pub fn get_task_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_task_id()
    }
    /// <p>Aggregate status for agent.</p>
    pub fn aggregate_status(mut self, input: crate::types::AggregateStatus) -> Self {
        self.inner = self.inner.aggregate_status(input);
        self
    }
    /// <p>Aggregate status for agent.</p>
    pub fn set_aggregate_status(mut self, input: ::std::option::Option<crate::types::AggregateStatus>) -> Self {
        self.inner = self.inner.set_aggregate_status(input);
        self
    }
    /// <p>Aggregate status for agent.</p>
    pub fn get_aggregate_status(&self) -> &::std::option::Option<crate::types::AggregateStatus> {
        self.inner.get_aggregate_status()
    }
    /// Appends an item to `componentStatuses`.
    ///
    /// To override the contents of this collection use [`set_component_statuses`](Self::set_component_statuses).
    ///
    /// <p>List of component statuses for agent.</p>
    pub fn component_statuses(mut self, input: crate::types::ComponentStatusData) -> Self {
        self.inner = self.inner.component_statuses(input);
        self
    }
    /// <p>List of component statuses for agent.</p>
    pub fn set_component_statuses(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ComponentStatusData>>) -> Self {
        self.inner = self.inner.set_component_statuses(input);
        self
    }
    /// <p>List of component statuses for agent.</p>
    pub fn get_component_statuses(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ComponentStatusData>> {
        self.inner.get_component_statuses()
    }
}
