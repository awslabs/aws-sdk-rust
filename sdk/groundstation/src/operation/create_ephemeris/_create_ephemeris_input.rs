// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateEphemerisInput {
    /// <p>The satellite ID that associates this ephemeris with a satellite in AWS Ground Station.</p>
    pub satellite_id: ::std::option::Option<::std::string::String>,
    /// <p>Set to <code>true</code> to enable the ephemeris after validation. Set to <code>false</code> to keep it disabled.</p>
    pub enabled: ::std::option::Option<bool>,
    /// <p>A priority score that determines which ephemeris to use when multiple ephemerides overlap.</p>
    /// <p>Higher numbers take precedence. The default is 1. Must be 1 or greater.</p>
    pub priority: ::std::option::Option<i32>,
    /// <p>An overall expiration time for the ephemeris in UTC, after which it will become <code>EXPIRED</code>.</p>
    pub expiration_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A name that you can use to identify the ephemeris.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the KMS key to use for encrypting the ephemeris.</p>
    pub kms_key_arn: ::std::option::Option<::std::string::String>,
    /// <p>Ephemeris data.</p>
    pub ephemeris: ::std::option::Option<crate::types::EphemerisData>,
    /// <p>Tags assigned to an ephemeris.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateEphemerisInput {
    /// <p>The satellite ID that associates this ephemeris with a satellite in AWS Ground Station.</p>
    pub fn satellite_id(&self) -> ::std::option::Option<&str> {
        self.satellite_id.as_deref()
    }
    /// <p>Set to <code>true</code> to enable the ephemeris after validation. Set to <code>false</code> to keep it disabled.</p>
    pub fn enabled(&self) -> ::std::option::Option<bool> {
        self.enabled
    }
    /// <p>A priority score that determines which ephemeris to use when multiple ephemerides overlap.</p>
    /// <p>Higher numbers take precedence. The default is 1. Must be 1 or greater.</p>
    pub fn priority(&self) -> ::std::option::Option<i32> {
        self.priority
    }
    /// <p>An overall expiration time for the ephemeris in UTC, after which it will become <code>EXPIRED</code>.</p>
    pub fn expiration_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.expiration_time.as_ref()
    }
    /// <p>A name that you can use to identify the ephemeris.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The ARN of the KMS key to use for encrypting the ephemeris.</p>
    pub fn kms_key_arn(&self) -> ::std::option::Option<&str> {
        self.kms_key_arn.as_deref()
    }
    /// <p>Ephemeris data.</p>
    pub fn ephemeris(&self) -> ::std::option::Option<&crate::types::EphemerisData> {
        self.ephemeris.as_ref()
    }
    /// <p>Tags assigned to an ephemeris.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CreateEphemerisInput {
    /// Creates a new builder-style object to manufacture [`CreateEphemerisInput`](crate::operation::create_ephemeris::CreateEphemerisInput).
    pub fn builder() -> crate::operation::create_ephemeris::builders::CreateEphemerisInputBuilder {
        crate::operation::create_ephemeris::builders::CreateEphemerisInputBuilder::default()
    }
}

/// A builder for [`CreateEphemerisInput`](crate::operation::create_ephemeris::CreateEphemerisInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateEphemerisInputBuilder {
    pub(crate) satellite_id: ::std::option::Option<::std::string::String>,
    pub(crate) enabled: ::std::option::Option<bool>,
    pub(crate) priority: ::std::option::Option<i32>,
    pub(crate) expiration_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) kms_key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) ephemeris: ::std::option::Option<crate::types::EphemerisData>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateEphemerisInputBuilder {
    /// <p>The satellite ID that associates this ephemeris with a satellite in AWS Ground Station.</p>
    pub fn satellite_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.satellite_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The satellite ID that associates this ephemeris with a satellite in AWS Ground Station.</p>
    pub fn set_satellite_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.satellite_id = input;
        self
    }
    /// <p>The satellite ID that associates this ephemeris with a satellite in AWS Ground Station.</p>
    pub fn get_satellite_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.satellite_id
    }
    /// <p>Set to <code>true</code> to enable the ephemeris after validation. Set to <code>false</code> to keep it disabled.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Set to <code>true</code> to enable the ephemeris after validation. Set to <code>false</code> to keep it disabled.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Set to <code>true</code> to enable the ephemeris after validation. Set to <code>false</code> to keep it disabled.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// <p>A priority score that determines which ephemeris to use when multiple ephemerides overlap.</p>
    /// <p>Higher numbers take precedence. The default is 1. Must be 1 or greater.</p>
    pub fn priority(mut self, input: i32) -> Self {
        self.priority = ::std::option::Option::Some(input);
        self
    }
    /// <p>A priority score that determines which ephemeris to use when multiple ephemerides overlap.</p>
    /// <p>Higher numbers take precedence. The default is 1. Must be 1 or greater.</p>
    pub fn set_priority(mut self, input: ::std::option::Option<i32>) -> Self {
        self.priority = input;
        self
    }
    /// <p>A priority score that determines which ephemeris to use when multiple ephemerides overlap.</p>
    /// <p>Higher numbers take precedence. The default is 1. Must be 1 or greater.</p>
    pub fn get_priority(&self) -> &::std::option::Option<i32> {
        &self.priority
    }
    /// <p>An overall expiration time for the ephemeris in UTC, after which it will become <code>EXPIRED</code>.</p>
    pub fn expiration_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.expiration_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>An overall expiration time for the ephemeris in UTC, after which it will become <code>EXPIRED</code>.</p>
    pub fn set_expiration_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.expiration_time = input;
        self
    }
    /// <p>An overall expiration time for the ephemeris in UTC, after which it will become <code>EXPIRED</code>.</p>
    pub fn get_expiration_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.expiration_time
    }
    /// <p>A name that you can use to identify the ephemeris.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name that you can use to identify the ephemeris.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A name that you can use to identify the ephemeris.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The ARN of the KMS key to use for encrypting the ephemeris.</p>
    pub fn kms_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the KMS key to use for encrypting the ephemeris.</p>
    pub fn set_kms_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_arn = input;
        self
    }
    /// <p>The ARN of the KMS key to use for encrypting the ephemeris.</p>
    pub fn get_kms_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_arn
    }
    /// <p>Ephemeris data.</p>
    pub fn ephemeris(mut self, input: crate::types::EphemerisData) -> Self {
        self.ephemeris = ::std::option::Option::Some(input);
        self
    }
    /// <p>Ephemeris data.</p>
    pub fn set_ephemeris(mut self, input: ::std::option::Option<crate::types::EphemerisData>) -> Self {
        self.ephemeris = input;
        self
    }
    /// <p>Ephemeris data.</p>
    pub fn get_ephemeris(&self) -> &::std::option::Option<crate::types::EphemerisData> {
        &self.ephemeris
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags assigned to an ephemeris.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Tags assigned to an ephemeris.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Tags assigned to an ephemeris.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateEphemerisInput`](crate::operation::create_ephemeris::CreateEphemerisInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_ephemeris::CreateEphemerisInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_ephemeris::CreateEphemerisInput {
            satellite_id: self.satellite_id,
            enabled: self.enabled,
            priority: self.priority,
            expiration_time: self.expiration_time,
            name: self.name,
            kms_key_arn: self.kms_key_arn,
            ephemeris: self.ephemeris,
            tags: self.tags,
        })
    }
}
