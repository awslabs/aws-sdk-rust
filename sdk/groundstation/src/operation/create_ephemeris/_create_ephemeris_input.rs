// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateEphemerisInput {
    /// <p>AWS Ground Station satellite ID for this ephemeris.</p>
    #[doc(hidden)]
    pub satellite_id: std::option::Option<std::string::String>,
    /// <p>Whether to set the ephemeris status to <code>ENABLED</code> after validation.</p>
    /// <p>Setting this to false will set the ephemeris status to <code>DISABLED</code> after validation.</p>
    #[doc(hidden)]
    pub enabled: std::option::Option<bool>,
    /// <p>Customer-provided priority score to establish the order in which overlapping ephemerides should be used.</p>
    /// <p>The default for customer-provided ephemeris priority is 1, and higher numbers take precedence.</p>
    /// <p>Priority must be 1 or greater</p>
    #[doc(hidden)]
    pub priority: std::option::Option<i32>,
    /// <p>An overall expiration time for the ephemeris in UTC, after which it will become <code>EXPIRED</code>.</p>
    #[doc(hidden)]
    pub expiration_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>A name string associated with the ephemeris. Used as a human-readable identifier for the ephemeris.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The ARN of a KMS key used to encrypt the ephemeris in Ground Station.</p>
    #[doc(hidden)]
    pub kms_key_arn: std::option::Option<std::string::String>,
    /// <p>Ephemeris data.</p>
    #[doc(hidden)]
    pub ephemeris: std::option::Option<crate::types::EphemerisData>,
    /// <p>Tags assigned to an ephemeris.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl CreateEphemerisInput {
    /// <p>AWS Ground Station satellite ID for this ephemeris.</p>
    pub fn satellite_id(&self) -> std::option::Option<&str> {
        self.satellite_id.as_deref()
    }
    /// <p>Whether to set the ephemeris status to <code>ENABLED</code> after validation.</p>
    /// <p>Setting this to false will set the ephemeris status to <code>DISABLED</code> after validation.</p>
    pub fn enabled(&self) -> std::option::Option<bool> {
        self.enabled
    }
    /// <p>Customer-provided priority score to establish the order in which overlapping ephemerides should be used.</p>
    /// <p>The default for customer-provided ephemeris priority is 1, and higher numbers take precedence.</p>
    /// <p>Priority must be 1 or greater</p>
    pub fn priority(&self) -> std::option::Option<i32> {
        self.priority
    }
    /// <p>An overall expiration time for the ephemeris in UTC, after which it will become <code>EXPIRED</code>.</p>
    pub fn expiration_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.expiration_time.as_ref()
    }
    /// <p>A name string associated with the ephemeris. Used as a human-readable identifier for the ephemeris.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The ARN of a KMS key used to encrypt the ephemeris in Ground Station.</p>
    pub fn kms_key_arn(&self) -> std::option::Option<&str> {
        self.kms_key_arn.as_deref()
    }
    /// <p>Ephemeris data.</p>
    pub fn ephemeris(&self) -> std::option::Option<&crate::types::EphemerisData> {
        self.ephemeris.as_ref()
    }
    /// <p>Tags assigned to an ephemeris.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl CreateEphemerisInput {
    /// Creates a new builder-style object to manufacture [`CreateEphemerisInput`](crate::operation::create_ephemeris::CreateEphemerisInput).
    pub fn builder() -> crate::operation::create_ephemeris::builders::CreateEphemerisInputBuilder {
        crate::operation::create_ephemeris::builders::CreateEphemerisInputBuilder::default()
    }
}

/// A builder for [`CreateEphemerisInput`](crate::operation::create_ephemeris::CreateEphemerisInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateEphemerisInputBuilder {
    pub(crate) satellite_id: std::option::Option<std::string::String>,
    pub(crate) enabled: std::option::Option<bool>,
    pub(crate) priority: std::option::Option<i32>,
    pub(crate) expiration_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) kms_key_arn: std::option::Option<std::string::String>,
    pub(crate) ephemeris: std::option::Option<crate::types::EphemerisData>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl CreateEphemerisInputBuilder {
    /// <p>AWS Ground Station satellite ID for this ephemeris.</p>
    pub fn satellite_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.satellite_id = Some(input.into());
        self
    }
    /// <p>AWS Ground Station satellite ID for this ephemeris.</p>
    pub fn set_satellite_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.satellite_id = input;
        self
    }
    /// <p>Whether to set the ephemeris status to <code>ENABLED</code> after validation.</p>
    /// <p>Setting this to false will set the ephemeris status to <code>DISABLED</code> after validation.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = Some(input);
        self
    }
    /// <p>Whether to set the ephemeris status to <code>ENABLED</code> after validation.</p>
    /// <p>Setting this to false will set the ephemeris status to <code>DISABLED</code> after validation.</p>
    pub fn set_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Customer-provided priority score to establish the order in which overlapping ephemerides should be used.</p>
    /// <p>The default for customer-provided ephemeris priority is 1, and higher numbers take precedence.</p>
    /// <p>Priority must be 1 or greater</p>
    pub fn priority(mut self, input: i32) -> Self {
        self.priority = Some(input);
        self
    }
    /// <p>Customer-provided priority score to establish the order in which overlapping ephemerides should be used.</p>
    /// <p>The default for customer-provided ephemeris priority is 1, and higher numbers take precedence.</p>
    /// <p>Priority must be 1 or greater</p>
    pub fn set_priority(mut self, input: std::option::Option<i32>) -> Self {
        self.priority = input;
        self
    }
    /// <p>An overall expiration time for the ephemeris in UTC, after which it will become <code>EXPIRED</code>.</p>
    pub fn expiration_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.expiration_time = Some(input);
        self
    }
    /// <p>An overall expiration time for the ephemeris in UTC, after which it will become <code>EXPIRED</code>.</p>
    pub fn set_expiration_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.expiration_time = input;
        self
    }
    /// <p>A name string associated with the ephemeris. Used as a human-readable identifier for the ephemeris.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>A name string associated with the ephemeris. Used as a human-readable identifier for the ephemeris.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The ARN of a KMS key used to encrypt the ephemeris in Ground Station.</p>
    pub fn kms_key_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.kms_key_arn = Some(input.into());
        self
    }
    /// <p>The ARN of a KMS key used to encrypt the ephemeris in Ground Station.</p>
    pub fn set_kms_key_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.kms_key_arn = input;
        self
    }
    /// <p>Ephemeris data.</p>
    pub fn ephemeris(mut self, input: crate::types::EphemerisData) -> Self {
        self.ephemeris = Some(input);
        self
    }
    /// <p>Ephemeris data.</p>
    pub fn set_ephemeris(
        mut self,
        input: std::option::Option<crate::types::EphemerisData>,
    ) -> Self {
        self.ephemeris = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags assigned to an ephemeris.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>Tags assigned to an ephemeris.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateEphemerisInput`](crate::operation::create_ephemeris::CreateEphemerisInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_ephemeris::CreateEphemerisInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_ephemeris::CreateEphemerisInput {
            satellite_id: self.satellite_id,
            enabled: self.enabled,
            priority: self.priority,
            expiration_time: self.expiration_time,
            name: self.name,
            kms_key_arn: self.kms_key_arn,
            ephemeris: self.ephemeris,
            tags: self.tags,
        })
    }
}
