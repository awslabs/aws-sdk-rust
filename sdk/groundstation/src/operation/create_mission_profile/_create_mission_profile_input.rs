// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateMissionProfileInput {
    /// <p>Name of a mission profile.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>Amount of time prior to contact start you’d like to receive a CloudWatch event indicating an upcoming pass.</p>
    #[doc(hidden)]
    pub contact_pre_pass_duration_seconds: std::option::Option<i32>,
    /// <p>Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.</p>
    #[doc(hidden)]
    pub contact_post_pass_duration_seconds: std::option::Option<i32>,
    /// <p>Smallest amount of time in seconds that you’d like to see for an available contact. AWS Ground Station will not present you with contacts shorter than this duration.</p>
    #[doc(hidden)]
    pub minimum_viable_contact_duration_seconds: std::option::Option<i32>,
    /// <p>A list of lists of ARNs. Each list of ARNs is an edge, with a <i>from</i> <code>Config</code> and a <i>to</i> <code>Config</code>.</p>
    #[doc(hidden)]
    pub dataflow_edges: std::option::Option<std::vec::Vec<std::vec::Vec<std::string::String>>>,
    /// <p>ARN of a tracking <code>Config</code>.</p>
    #[doc(hidden)]
    pub tracking_config_arn: std::option::Option<std::string::String>,
    /// <p>Tags assigned to a mission profile.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl CreateMissionProfileInput {
    /// <p>Name of a mission profile.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Amount of time prior to contact start you’d like to receive a CloudWatch event indicating an upcoming pass.</p>
    pub fn contact_pre_pass_duration_seconds(&self) -> std::option::Option<i32> {
        self.contact_pre_pass_duration_seconds
    }
    /// <p>Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.</p>
    pub fn contact_post_pass_duration_seconds(&self) -> std::option::Option<i32> {
        self.contact_post_pass_duration_seconds
    }
    /// <p>Smallest amount of time in seconds that you’d like to see for an available contact. AWS Ground Station will not present you with contacts shorter than this duration.</p>
    pub fn minimum_viable_contact_duration_seconds(&self) -> std::option::Option<i32> {
        self.minimum_viable_contact_duration_seconds
    }
    /// <p>A list of lists of ARNs. Each list of ARNs is an edge, with a <i>from</i> <code>Config</code> and a <i>to</i> <code>Config</code>.</p>
    pub fn dataflow_edges(&self) -> std::option::Option<&[std::vec::Vec<std::string::String>]> {
        self.dataflow_edges.as_deref()
    }
    /// <p>ARN of a tracking <code>Config</code>.</p>
    pub fn tracking_config_arn(&self) -> std::option::Option<&str> {
        self.tracking_config_arn.as_deref()
    }
    /// <p>Tags assigned to a mission profile.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl CreateMissionProfileInput {
    /// Creates a new builder-style object to manufacture [`CreateMissionProfileInput`](crate::operation::create_mission_profile::CreateMissionProfileInput).
    pub fn builder(
    ) -> crate::operation::create_mission_profile::builders::CreateMissionProfileInputBuilder {
        crate::operation::create_mission_profile::builders::CreateMissionProfileInputBuilder::default()
    }
}

/// A builder for [`CreateMissionProfileInput`](crate::operation::create_mission_profile::CreateMissionProfileInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateMissionProfileInputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) contact_pre_pass_duration_seconds: std::option::Option<i32>,
    pub(crate) contact_post_pass_duration_seconds: std::option::Option<i32>,
    pub(crate) minimum_viable_contact_duration_seconds: std::option::Option<i32>,
    pub(crate) dataflow_edges:
        std::option::Option<std::vec::Vec<std::vec::Vec<std::string::String>>>,
    pub(crate) tracking_config_arn: std::option::Option<std::string::String>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl CreateMissionProfileInputBuilder {
    /// <p>Name of a mission profile.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>Name of a mission profile.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Amount of time prior to contact start you’d like to receive a CloudWatch event indicating an upcoming pass.</p>
    pub fn contact_pre_pass_duration_seconds(mut self, input: i32) -> Self {
        self.contact_pre_pass_duration_seconds = Some(input);
        self
    }
    /// <p>Amount of time prior to contact start you’d like to receive a CloudWatch event indicating an upcoming pass.</p>
    pub fn set_contact_pre_pass_duration_seconds(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.contact_pre_pass_duration_seconds = input;
        self
    }
    /// <p>Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.</p>
    pub fn contact_post_pass_duration_seconds(mut self, input: i32) -> Self {
        self.contact_post_pass_duration_seconds = Some(input);
        self
    }
    /// <p>Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.</p>
    pub fn set_contact_post_pass_duration_seconds(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.contact_post_pass_duration_seconds = input;
        self
    }
    /// <p>Smallest amount of time in seconds that you’d like to see for an available contact. AWS Ground Station will not present you with contacts shorter than this duration.</p>
    pub fn minimum_viable_contact_duration_seconds(mut self, input: i32) -> Self {
        self.minimum_viable_contact_duration_seconds = Some(input);
        self
    }
    /// <p>Smallest amount of time in seconds that you’d like to see for an available contact. AWS Ground Station will not present you with contacts shorter than this duration.</p>
    pub fn set_minimum_viable_contact_duration_seconds(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.minimum_viable_contact_duration_seconds = input;
        self
    }
    /// Appends an item to `dataflow_edges`.
    ///
    /// To override the contents of this collection use [`set_dataflow_edges`](Self::set_dataflow_edges).
    ///
    /// <p>A list of lists of ARNs. Each list of ARNs is an edge, with a <i>from</i> <code>Config</code> and a <i>to</i> <code>Config</code>.</p>
    pub fn dataflow_edges(mut self, input: std::vec::Vec<std::string::String>) -> Self {
        let mut v = self.dataflow_edges.unwrap_or_default();
        v.push(input);
        self.dataflow_edges = Some(v);
        self
    }
    /// <p>A list of lists of ARNs. Each list of ARNs is an edge, with a <i>from</i> <code>Config</code> and a <i>to</i> <code>Config</code>.</p>
    pub fn set_dataflow_edges(
        mut self,
        input: std::option::Option<std::vec::Vec<std::vec::Vec<std::string::String>>>,
    ) -> Self {
        self.dataflow_edges = input;
        self
    }
    /// <p>ARN of a tracking <code>Config</code>.</p>
    pub fn tracking_config_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.tracking_config_arn = Some(input.into());
        self
    }
    /// <p>ARN of a tracking <code>Config</code>.</p>
    pub fn set_tracking_config_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.tracking_config_arn = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags assigned to a mission profile.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>Tags assigned to a mission profile.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateMissionProfileInput`](crate::operation::create_mission_profile::CreateMissionProfileInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_mission_profile::CreateMissionProfileInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_mission_profile::CreateMissionProfileInput {
                name: self.name,
                contact_pre_pass_duration_seconds: self.contact_pre_pass_duration_seconds,
                contact_post_pass_duration_seconds: self.contact_post_pass_duration_seconds,
                minimum_viable_contact_duration_seconds: self
                    .minimum_viable_contact_duration_seconds,
                dataflow_edges: self.dataflow_edges,
                tracking_config_arn: self.tracking_config_arn,
                tags: self.tags,
            },
        )
    }
}
