// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_mission_profile::_create_mission_profile_output::CreateMissionProfileOutputBuilder;

pub use crate::operation::create_mission_profile::_create_mission_profile_input::CreateMissionProfileInputBuilder;

impl CreateMissionProfileInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_mission_profile::CreateMissionProfileOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_mission_profile::CreateMissionProfileError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_mission_profile();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateMissionProfile`.
///
/// <p>Creates a mission profile.</p>
/// <p> <code>dataflowEdges</code> is a list of lists of strings. Each lower level list of strings has two elements: a <i>from</i> ARN and a <i>to</i> ARN.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateMissionProfileFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_mission_profile::builders::CreateMissionProfileInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_mission_profile::CreateMissionProfileOutput,
        crate::operation::create_mission_profile::CreateMissionProfileError,
    > for CreateMissionProfileFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_mission_profile::CreateMissionProfileOutput,
            crate::operation::create_mission_profile::CreateMissionProfileError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateMissionProfileFluentBuilder {
    /// Creates a new `CreateMissionProfile`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateMissionProfile as a reference.
    pub fn as_input(&self) -> &crate::operation::create_mission_profile::builders::CreateMissionProfileInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_mission_profile::CreateMissionProfileOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_mission_profile::CreateMissionProfileError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_mission_profile::CreateMissionProfile::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_mission_profile::CreateMissionProfile::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_mission_profile::CreateMissionProfileOutput,
        crate::operation::create_mission_profile::CreateMissionProfileError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Name of a mission profile.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>Name of a mission profile.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>Name of a mission profile.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    /// <p>Amount of time prior to contact start you’d like to receive a CloudWatch event indicating an upcoming pass.</p>
    pub fn contact_pre_pass_duration_seconds(mut self, input: i32) -> Self {
        self.inner = self.inner.contact_pre_pass_duration_seconds(input);
        self
    }
    /// <p>Amount of time prior to contact start you’d like to receive a CloudWatch event indicating an upcoming pass.</p>
    pub fn set_contact_pre_pass_duration_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_contact_pre_pass_duration_seconds(input);
        self
    }
    /// <p>Amount of time prior to contact start you’d like to receive a CloudWatch event indicating an upcoming pass.</p>
    pub fn get_contact_pre_pass_duration_seconds(&self) -> &::std::option::Option<i32> {
        self.inner.get_contact_pre_pass_duration_seconds()
    }
    /// <p>Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.</p>
    pub fn contact_post_pass_duration_seconds(mut self, input: i32) -> Self {
        self.inner = self.inner.contact_post_pass_duration_seconds(input);
        self
    }
    /// <p>Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.</p>
    pub fn set_contact_post_pass_duration_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_contact_post_pass_duration_seconds(input);
        self
    }
    /// <p>Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.</p>
    pub fn get_contact_post_pass_duration_seconds(&self) -> &::std::option::Option<i32> {
        self.inner.get_contact_post_pass_duration_seconds()
    }
    /// <p>Smallest amount of time in seconds that you’d like to see for an available contact. AWS Ground Station will not present you with contacts shorter than this duration.</p>
    pub fn minimum_viable_contact_duration_seconds(mut self, input: i32) -> Self {
        self.inner = self.inner.minimum_viable_contact_duration_seconds(input);
        self
    }
    /// <p>Smallest amount of time in seconds that you’d like to see for an available contact. AWS Ground Station will not present you with contacts shorter than this duration.</p>
    pub fn set_minimum_viable_contact_duration_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_minimum_viable_contact_duration_seconds(input);
        self
    }
    /// <p>Smallest amount of time in seconds that you’d like to see for an available contact. AWS Ground Station will not present you with contacts shorter than this duration.</p>
    pub fn get_minimum_viable_contact_duration_seconds(&self) -> &::std::option::Option<i32> {
        self.inner.get_minimum_viable_contact_duration_seconds()
    }
    /// Appends an item to `dataflowEdges`.
    ///
    /// To override the contents of this collection use [`set_dataflow_edges`](Self::set_dataflow_edges).
    ///
    /// <p>A list of lists of ARNs. Each list of ARNs is an edge, with a <i>from</i> <code>Config</code> and a <i>to</i> <code>Config</code>.</p>
    pub fn dataflow_edges(mut self, input: ::std::vec::Vec<::std::string::String>) -> Self {
        self.inner = self.inner.dataflow_edges(input);
        self
    }
    /// <p>A list of lists of ARNs. Each list of ARNs is an edge, with a <i>from</i> <code>Config</code> and a <i>to</i> <code>Config</code>.</p>
    pub fn set_dataflow_edges(mut self, input: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<::std::string::String>>>) -> Self {
        self.inner = self.inner.set_dataflow_edges(input);
        self
    }
    /// <p>A list of lists of ARNs. Each list of ARNs is an edge, with a <i>from</i> <code>Config</code> and a <i>to</i> <code>Config</code>.</p>
    pub fn get_dataflow_edges(&self) -> &::std::option::Option<::std::vec::Vec<::std::vec::Vec<::std::string::String>>> {
        self.inner.get_dataflow_edges()
    }
    /// <p>ARN of a tracking <code>Config</code>.</p>
    pub fn tracking_config_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tracking_config_arn(input.into());
        self
    }
    /// <p>ARN of a tracking <code>Config</code>.</p>
    pub fn set_tracking_config_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_tracking_config_arn(input);
        self
    }
    /// <p>ARN of a tracking <code>Config</code>.</p>
    pub fn get_tracking_config_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_tracking_config_arn()
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags assigned to a mission profile.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>Tags assigned to a mission profile.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>Tags assigned to a mission profile.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_tags()
    }
    /// <p>KMS key to use for encrypting streams.</p>
    pub fn streams_kms_key(mut self, input: crate::types::KmsKey) -> Self {
        self.inner = self.inner.streams_kms_key(input);
        self
    }
    /// <p>KMS key to use for encrypting streams.</p>
    pub fn set_streams_kms_key(mut self, input: ::std::option::Option<crate::types::KmsKey>) -> Self {
        self.inner = self.inner.set_streams_kms_key(input);
        self
    }
    /// <p>KMS key to use for encrypting streams.</p>
    pub fn get_streams_kms_key(&self) -> &::std::option::Option<crate::types::KmsKey> {
        self.inner.get_streams_kms_key()
    }
    /// <p>Role to use for encrypting streams with KMS key.</p>
    pub fn streams_kms_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.streams_kms_role(input.into());
        self
    }
    /// <p>Role to use for encrypting streams with KMS key.</p>
    pub fn set_streams_kms_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_streams_kms_role(input);
        self
    }
    /// <p>Role to use for encrypting streams with KMS key.</p>
    pub fn get_streams_kms_role(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_streams_kms_role()
    }
}
