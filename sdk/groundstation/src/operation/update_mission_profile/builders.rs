// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_mission_profile::_update_mission_profile_output::UpdateMissionProfileOutputBuilder;

pub use crate::operation::update_mission_profile::_update_mission_profile_input::UpdateMissionProfileInputBuilder;

/// Fluent builder constructing a request to `UpdateMissionProfile`.
///
/// <p>Updates a mission profile.</p>
/// <p>Updating a mission profile will not update the execution parameters for existing future contacts.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateMissionProfileFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_mission_profile::builders::UpdateMissionProfileInputBuilder,
}
impl UpdateMissionProfileFluentBuilder {
    /// Creates a new `UpdateMissionProfile`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_mission_profile::UpdateMissionProfile,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_mission_profile::UpdateMissionProfileError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_mission_profile::UpdateMissionProfileOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_mission_profile::UpdateMissionProfileError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>UUID of a mission profile.</p>
    pub fn mission_profile_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.mission_profile_id(input.into());
        self
    }
    /// <p>UUID of a mission profile.</p>
    pub fn set_mission_profile_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_mission_profile_id(input);
        self
    }
    /// <p>Name of a mission profile.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>Name of a mission profile.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.</p>
    pub fn contact_pre_pass_duration_seconds(mut self, input: i32) -> Self {
        self.inner = self.inner.contact_pre_pass_duration_seconds(input);
        self
    }
    /// <p>Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.</p>
    pub fn set_contact_pre_pass_duration_seconds(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.inner = self.inner.set_contact_pre_pass_duration_seconds(input);
        self
    }
    /// <p>Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.</p>
    pub fn contact_post_pass_duration_seconds(mut self, input: i32) -> Self {
        self.inner = self.inner.contact_post_pass_duration_seconds(input);
        self
    }
    /// <p>Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.</p>
    pub fn set_contact_post_pass_duration_seconds(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.inner = self.inner.set_contact_post_pass_duration_seconds(input);
        self
    }
    /// <p>Smallest amount of time in seconds that you’d like to see for an available contact. AWS Ground Station will not present you with contacts shorter than this duration.</p>
    pub fn minimum_viable_contact_duration_seconds(mut self, input: i32) -> Self {
        self.inner = self.inner.minimum_viable_contact_duration_seconds(input);
        self
    }
    /// <p>Smallest amount of time in seconds that you’d like to see for an available contact. AWS Ground Station will not present you with contacts shorter than this duration.</p>
    pub fn set_minimum_viable_contact_duration_seconds(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.inner = self
            .inner
            .set_minimum_viable_contact_duration_seconds(input);
        self
    }
    /// Appends an item to `dataflowEdges`.
    ///
    /// To override the contents of this collection use [`set_dataflow_edges`](Self::set_dataflow_edges).
    ///
    /// <p>A list of lists of ARNs. Each list of ARNs is an edge, with a <i>from</i> <code>Config</code> and a <i>to</i> <code>Config</code>.</p>
    pub fn dataflow_edges(mut self, input: std::vec::Vec<std::string::String>) -> Self {
        self.inner = self.inner.dataflow_edges(input);
        self
    }
    /// <p>A list of lists of ARNs. Each list of ARNs is an edge, with a <i>from</i> <code>Config</code> and a <i>to</i> <code>Config</code>.</p>
    pub fn set_dataflow_edges(
        mut self,
        input: std::option::Option<std::vec::Vec<std::vec::Vec<std::string::String>>>,
    ) -> Self {
        self.inner = self.inner.set_dataflow_edges(input);
        self
    }
    /// <p>ARN of a tracking <code>Config</code>.</p>
    pub fn tracking_config_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.tracking_config_arn(input.into());
        self
    }
    /// <p>ARN of a tracking <code>Config</code>.</p>
    pub fn set_tracking_config_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_tracking_config_arn(input);
        self
    }
}
