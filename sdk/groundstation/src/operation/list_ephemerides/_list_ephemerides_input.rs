// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListEphemeridesInput {
    /// <p>The AWS Ground Station satellite ID to list ephemeris for.</p>
    pub satellite_id: ::std::option::Option<::std::string::String>,
    /// <p>The start time to list in UTC. The operation will return an ephemeris if its expiration time is within the time range defined by the <code>startTime</code> and <code>endTime</code>.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The end time to list in UTC. The operation will return an ephemeris if its expiration time is within the time range defined by the <code>startTime</code> and <code>endTime</code>.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The list of ephemeris status to return.</p>
    pub status_list: ::std::option::Option<::std::vec::Vec<crate::types::EphemerisStatus>>,
    /// <p>Maximum number of ephemerides to return.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>Pagination token.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListEphemeridesInput {
    /// <p>The AWS Ground Station satellite ID to list ephemeris for.</p>
    pub fn satellite_id(&self) -> ::std::option::Option<&str> {
        self.satellite_id.as_deref()
    }
    /// <p>The start time to list in UTC. The operation will return an ephemeris if its expiration time is within the time range defined by the <code>startTime</code> and <code>endTime</code>.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The end time to list in UTC. The operation will return an ephemeris if its expiration time is within the time range defined by the <code>startTime</code> and <code>endTime</code>.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The list of ephemeris status to return.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.status_list.is_none()`.
    pub fn status_list(&self) -> &[crate::types::EphemerisStatus] {
        self.status_list.as_deref().unwrap_or_default()
    }
    /// <p>Maximum number of ephemerides to return.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>Pagination token.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListEphemeridesInput {
    /// Creates a new builder-style object to manufacture [`ListEphemeridesInput`](crate::operation::list_ephemerides::ListEphemeridesInput).
    pub fn builder() -> crate::operation::list_ephemerides::builders::ListEphemeridesInputBuilder {
        crate::operation::list_ephemerides::builders::ListEphemeridesInputBuilder::default()
    }
}

/// A builder for [`ListEphemeridesInput`](crate::operation::list_ephemerides::ListEphemeridesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListEphemeridesInputBuilder {
    pub(crate) satellite_id: ::std::option::Option<::std::string::String>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status_list: ::std::option::Option<::std::vec::Vec<crate::types::EphemerisStatus>>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListEphemeridesInputBuilder {
    /// <p>The AWS Ground Station satellite ID to list ephemeris for.</p>
    /// This field is required.
    pub fn satellite_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.satellite_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The AWS Ground Station satellite ID to list ephemeris for.</p>
    pub fn set_satellite_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.satellite_id = input;
        self
    }
    /// <p>The AWS Ground Station satellite ID to list ephemeris for.</p>
    pub fn get_satellite_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.satellite_id
    }
    /// <p>The start time to list in UTC. The operation will return an ephemeris if its expiration time is within the time range defined by the <code>startTime</code> and <code>endTime</code>.</p>
    /// This field is required.
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The start time to list in UTC. The operation will return an ephemeris if its expiration time is within the time range defined by the <code>startTime</code> and <code>endTime</code>.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The start time to list in UTC. The operation will return an ephemeris if its expiration time is within the time range defined by the <code>startTime</code> and <code>endTime</code>.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The end time to list in UTC. The operation will return an ephemeris if its expiration time is within the time range defined by the <code>startTime</code> and <code>endTime</code>.</p>
    /// This field is required.
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The end time to list in UTC. The operation will return an ephemeris if its expiration time is within the time range defined by the <code>startTime</code> and <code>endTime</code>.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The end time to list in UTC. The operation will return an ephemeris if its expiration time is within the time range defined by the <code>startTime</code> and <code>endTime</code>.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// Appends an item to `status_list`.
    ///
    /// To override the contents of this collection use [`set_status_list`](Self::set_status_list).
    ///
    /// <p>The list of ephemeris status to return.</p>
    pub fn status_list(mut self, input: crate::types::EphemerisStatus) -> Self {
        let mut v = self.status_list.unwrap_or_default();
        v.push(input);
        self.status_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of ephemeris status to return.</p>
    pub fn set_status_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EphemerisStatus>>) -> Self {
        self.status_list = input;
        self
    }
    /// <p>The list of ephemeris status to return.</p>
    pub fn get_status_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EphemerisStatus>> {
        &self.status_list
    }
    /// <p>Maximum number of ephemerides to return.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>Maximum number of ephemerides to return.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>Maximum number of ephemerides to return.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>Pagination token.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Pagination token.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Pagination token.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListEphemeridesInput`](crate::operation::list_ephemerides::ListEphemeridesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_ephemerides::ListEphemeridesInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_ephemerides::ListEphemeridesInput {
            satellite_id: self.satellite_id,
            start_time: self.start_time,
            end_time: self.end_time,
            status_list: self.status_list,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
