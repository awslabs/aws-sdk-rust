// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetDataflowEndpointGroupOutput {
    /// <p>UUID of a dataflow endpoint group.</p>
    #[doc(hidden)]
    pub dataflow_endpoint_group_id: std::option::Option<std::string::String>,
    /// <p>ARN of a dataflow endpoint group.</p>
    #[doc(hidden)]
    pub dataflow_endpoint_group_arn: std::option::Option<std::string::String>,
    /// <p>Details of a dataflow endpoint.</p>
    #[doc(hidden)]
    pub endpoints_details: std::option::Option<std::vec::Vec<crate::types::EndpointDetails>>,
    /// <p>Tags assigned to a dataflow endpoint group.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>Amount of time, in seconds, prior to contact start for the contact to remain in a <code>PREPASS</code> state. A CloudWatch event is emitted when the contact enters and exits the <code>PREPASS</code> state.</p>
    #[doc(hidden)]
    pub contact_pre_pass_duration_seconds: std::option::Option<i32>,
    /// <p>Amount of time, in seconds, after a contact ends for the contact to remain in a <code>POSTPASS</code> state. A CloudWatch event is emitted when the contact enters and exits the <code>POSTPASS</code> state.</p>
    #[doc(hidden)]
    pub contact_post_pass_duration_seconds: std::option::Option<i32>,
    _request_id: Option<String>,
}
impl GetDataflowEndpointGroupOutput {
    /// <p>UUID of a dataflow endpoint group.</p>
    pub fn dataflow_endpoint_group_id(&self) -> std::option::Option<&str> {
        self.dataflow_endpoint_group_id.as_deref()
    }
    /// <p>ARN of a dataflow endpoint group.</p>
    pub fn dataflow_endpoint_group_arn(&self) -> std::option::Option<&str> {
        self.dataflow_endpoint_group_arn.as_deref()
    }
    /// <p>Details of a dataflow endpoint.</p>
    pub fn endpoints_details(&self) -> std::option::Option<&[crate::types::EndpointDetails]> {
        self.endpoints_details.as_deref()
    }
    /// <p>Tags assigned to a dataflow endpoint group.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p>Amount of time, in seconds, prior to contact start for the contact to remain in a <code>PREPASS</code> state. A CloudWatch event is emitted when the contact enters and exits the <code>PREPASS</code> state.</p>
    pub fn contact_pre_pass_duration_seconds(&self) -> std::option::Option<i32> {
        self.contact_pre_pass_duration_seconds
    }
    /// <p>Amount of time, in seconds, after a contact ends for the contact to remain in a <code>POSTPASS</code> state. A CloudWatch event is emitted when the contact enters and exits the <code>POSTPASS</code> state.</p>
    pub fn contact_post_pass_duration_seconds(&self) -> std::option::Option<i32> {
        self.contact_post_pass_duration_seconds
    }
}
impl aws_http::request_id::RequestId for GetDataflowEndpointGroupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetDataflowEndpointGroupOutput {
    /// Creates a new builder-style object to manufacture [`GetDataflowEndpointGroupOutput`](crate::operation::get_dataflow_endpoint_group::GetDataflowEndpointGroupOutput).
    pub fn builder() -> crate::operation::get_dataflow_endpoint_group::builders::GetDataflowEndpointGroupOutputBuilder{
        crate::operation::get_dataflow_endpoint_group::builders::GetDataflowEndpointGroupOutputBuilder::default()
    }
}

/// A builder for [`GetDataflowEndpointGroupOutput`](crate::operation::get_dataflow_endpoint_group::GetDataflowEndpointGroupOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetDataflowEndpointGroupOutputBuilder {
    pub(crate) dataflow_endpoint_group_id: std::option::Option<std::string::String>,
    pub(crate) dataflow_endpoint_group_arn: std::option::Option<std::string::String>,
    pub(crate) endpoints_details: std::option::Option<std::vec::Vec<crate::types::EndpointDetails>>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) contact_pre_pass_duration_seconds: std::option::Option<i32>,
    pub(crate) contact_post_pass_duration_seconds: std::option::Option<i32>,
    _request_id: Option<String>,
}
impl GetDataflowEndpointGroupOutputBuilder {
    /// <p>UUID of a dataflow endpoint group.</p>
    pub fn dataflow_endpoint_group_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.dataflow_endpoint_group_id = Some(input.into());
        self
    }
    /// <p>UUID of a dataflow endpoint group.</p>
    pub fn set_dataflow_endpoint_group_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.dataflow_endpoint_group_id = input;
        self
    }
    /// <p>ARN of a dataflow endpoint group.</p>
    pub fn dataflow_endpoint_group_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.dataflow_endpoint_group_arn = Some(input.into());
        self
    }
    /// <p>ARN of a dataflow endpoint group.</p>
    pub fn set_dataflow_endpoint_group_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.dataflow_endpoint_group_arn = input;
        self
    }
    /// Appends an item to `endpoints_details`.
    ///
    /// To override the contents of this collection use [`set_endpoints_details`](Self::set_endpoints_details).
    ///
    /// <p>Details of a dataflow endpoint.</p>
    pub fn endpoints_details(mut self, input: crate::types::EndpointDetails) -> Self {
        let mut v = self.endpoints_details.unwrap_or_default();
        v.push(input);
        self.endpoints_details = Some(v);
        self
    }
    /// <p>Details of a dataflow endpoint.</p>
    pub fn set_endpoints_details(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::EndpointDetails>>,
    ) -> Self {
        self.endpoints_details = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags assigned to a dataflow endpoint group.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>Tags assigned to a dataflow endpoint group.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>Amount of time, in seconds, prior to contact start for the contact to remain in a <code>PREPASS</code> state. A CloudWatch event is emitted when the contact enters and exits the <code>PREPASS</code> state.</p>
    pub fn contact_pre_pass_duration_seconds(mut self, input: i32) -> Self {
        self.contact_pre_pass_duration_seconds = Some(input);
        self
    }
    /// <p>Amount of time, in seconds, prior to contact start for the contact to remain in a <code>PREPASS</code> state. A CloudWatch event is emitted when the contact enters and exits the <code>PREPASS</code> state.</p>
    pub fn set_contact_pre_pass_duration_seconds(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.contact_pre_pass_duration_seconds = input;
        self
    }
    /// <p>Amount of time, in seconds, after a contact ends for the contact to remain in a <code>POSTPASS</code> state. A CloudWatch event is emitted when the contact enters and exits the <code>POSTPASS</code> state.</p>
    pub fn contact_post_pass_duration_seconds(mut self, input: i32) -> Self {
        self.contact_post_pass_duration_seconds = Some(input);
        self
    }
    /// <p>Amount of time, in seconds, after a contact ends for the contact to remain in a <code>POSTPASS</code> state. A CloudWatch event is emitted when the contact enters and exits the <code>POSTPASS</code> state.</p>
    pub fn set_contact_post_pass_duration_seconds(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.contact_post_pass_duration_seconds = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetDataflowEndpointGroupOutput`](crate::operation::get_dataflow_endpoint_group::GetDataflowEndpointGroupOutput).
    pub fn build(
        self,
    ) -> crate::operation::get_dataflow_endpoint_group::GetDataflowEndpointGroupOutput {
        crate::operation::get_dataflow_endpoint_group::GetDataflowEndpointGroupOutput {
            dataflow_endpoint_group_id: self.dataflow_endpoint_group_id,
            dataflow_endpoint_group_arn: self.dataflow_endpoint_group_arn,
            endpoints_details: self.endpoints_details,
            tags: self.tags,
            contact_pre_pass_duration_seconds: self.contact_pre_pass_duration_seconds,
            contact_post_pass_duration_seconds: self.contact_post_pass_duration_seconds,
            _request_id: self._request_id,
        }
    }
}
