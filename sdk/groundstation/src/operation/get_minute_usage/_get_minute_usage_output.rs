// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetMinuteUsageOutput {
    /// <p>Returns whether or not an account has signed up for the reserved minutes pricing plan, specific to the month being requested.</p>
    #[doc(hidden)]
    pub is_reserved_minutes_customer: std::option::Option<bool>,
    /// <p>Total number of reserved minutes allocated, specific to the month being requested.</p>
    #[doc(hidden)]
    pub total_reserved_minute_allocation: std::option::Option<i32>,
    /// <p>Upcoming minutes scheduled for an account, specific to the month being requested.</p>
    #[doc(hidden)]
    pub upcoming_minutes_scheduled: std::option::Option<i32>,
    /// <p>Total scheduled minutes for an account, specific to the month being requested.</p>
    #[doc(hidden)]
    pub total_scheduled_minutes: std::option::Option<i32>,
    /// <p>Estimated number of minutes remaining for an account, specific to the month being requested.</p>
    #[doc(hidden)]
    pub estimated_minutes_remaining: std::option::Option<i32>,
    _request_id: Option<String>,
}
impl GetMinuteUsageOutput {
    /// <p>Returns whether or not an account has signed up for the reserved minutes pricing plan, specific to the month being requested.</p>
    pub fn is_reserved_minutes_customer(&self) -> std::option::Option<bool> {
        self.is_reserved_minutes_customer
    }
    /// <p>Total number of reserved minutes allocated, specific to the month being requested.</p>
    pub fn total_reserved_minute_allocation(&self) -> std::option::Option<i32> {
        self.total_reserved_minute_allocation
    }
    /// <p>Upcoming minutes scheduled for an account, specific to the month being requested.</p>
    pub fn upcoming_minutes_scheduled(&self) -> std::option::Option<i32> {
        self.upcoming_minutes_scheduled
    }
    /// <p>Total scheduled minutes for an account, specific to the month being requested.</p>
    pub fn total_scheduled_minutes(&self) -> std::option::Option<i32> {
        self.total_scheduled_minutes
    }
    /// <p>Estimated number of minutes remaining for an account, specific to the month being requested.</p>
    pub fn estimated_minutes_remaining(&self) -> std::option::Option<i32> {
        self.estimated_minutes_remaining
    }
}
impl aws_http::request_id::RequestId for GetMinuteUsageOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetMinuteUsageOutput {
    /// Creates a new builder-style object to manufacture [`GetMinuteUsageOutput`](crate::operation::get_minute_usage::GetMinuteUsageOutput).
    pub fn builder() -> crate::operation::get_minute_usage::builders::GetMinuteUsageOutputBuilder {
        crate::operation::get_minute_usage::builders::GetMinuteUsageOutputBuilder::default()
    }
}

/// A builder for [`GetMinuteUsageOutput`](crate::operation::get_minute_usage::GetMinuteUsageOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetMinuteUsageOutputBuilder {
    pub(crate) is_reserved_minutes_customer: std::option::Option<bool>,
    pub(crate) total_reserved_minute_allocation: std::option::Option<i32>,
    pub(crate) upcoming_minutes_scheduled: std::option::Option<i32>,
    pub(crate) total_scheduled_minutes: std::option::Option<i32>,
    pub(crate) estimated_minutes_remaining: std::option::Option<i32>,
    _request_id: Option<String>,
}
impl GetMinuteUsageOutputBuilder {
    /// <p>Returns whether or not an account has signed up for the reserved minutes pricing plan, specific to the month being requested.</p>
    pub fn is_reserved_minutes_customer(mut self, input: bool) -> Self {
        self.is_reserved_minutes_customer = Some(input);
        self
    }
    /// <p>Returns whether or not an account has signed up for the reserved minutes pricing plan, specific to the month being requested.</p>
    pub fn set_is_reserved_minutes_customer(mut self, input: std::option::Option<bool>) -> Self {
        self.is_reserved_minutes_customer = input;
        self
    }
    /// <p>Total number of reserved minutes allocated, specific to the month being requested.</p>
    pub fn total_reserved_minute_allocation(mut self, input: i32) -> Self {
        self.total_reserved_minute_allocation = Some(input);
        self
    }
    /// <p>Total number of reserved minutes allocated, specific to the month being requested.</p>
    pub fn set_total_reserved_minute_allocation(mut self, input: std::option::Option<i32>) -> Self {
        self.total_reserved_minute_allocation = input;
        self
    }
    /// <p>Upcoming minutes scheduled for an account, specific to the month being requested.</p>
    pub fn upcoming_minutes_scheduled(mut self, input: i32) -> Self {
        self.upcoming_minutes_scheduled = Some(input);
        self
    }
    /// <p>Upcoming minutes scheduled for an account, specific to the month being requested.</p>
    pub fn set_upcoming_minutes_scheduled(mut self, input: std::option::Option<i32>) -> Self {
        self.upcoming_minutes_scheduled = input;
        self
    }
    /// <p>Total scheduled minutes for an account, specific to the month being requested.</p>
    pub fn total_scheduled_minutes(mut self, input: i32) -> Self {
        self.total_scheduled_minutes = Some(input);
        self
    }
    /// <p>Total scheduled minutes for an account, specific to the month being requested.</p>
    pub fn set_total_scheduled_minutes(mut self, input: std::option::Option<i32>) -> Self {
        self.total_scheduled_minutes = input;
        self
    }
    /// <p>Estimated number of minutes remaining for an account, specific to the month being requested.</p>
    pub fn estimated_minutes_remaining(mut self, input: i32) -> Self {
        self.estimated_minutes_remaining = Some(input);
        self
    }
    /// <p>Estimated number of minutes remaining for an account, specific to the month being requested.</p>
    pub fn set_estimated_minutes_remaining(mut self, input: std::option::Option<i32>) -> Self {
        self.estimated_minutes_remaining = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetMinuteUsageOutput`](crate::operation::get_minute_usage::GetMinuteUsageOutput).
    pub fn build(self) -> crate::operation::get_minute_usage::GetMinuteUsageOutput {
        crate::operation::get_minute_usage::GetMinuteUsageOutput {
            is_reserved_minutes_customer: self.is_reserved_minutes_customer,
            total_reserved_minute_allocation: self.total_reserved_minute_allocation,
            upcoming_minutes_scheduled: self.upcoming_minutes_scheduled,
            total_scheduled_minutes: self.total_scheduled_minutes,
            estimated_minutes_remaining: self.estimated_minutes_remaining,
            _request_id: self._request_id,
        }
    }
}
