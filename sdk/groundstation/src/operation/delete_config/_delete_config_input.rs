// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteConfigInput {
    /// <p>UUID of a <code>Config</code>.</p>
    #[doc(hidden)]
    pub config_id: std::option::Option<std::string::String>,
    /// <p>Type of a <code>Config</code>.</p>
    #[doc(hidden)]
    pub config_type: std::option::Option<crate::types::ConfigCapabilityType>,
}
impl DeleteConfigInput {
    /// <p>UUID of a <code>Config</code>.</p>
    pub fn config_id(&self) -> std::option::Option<&str> {
        self.config_id.as_deref()
    }
    /// <p>Type of a <code>Config</code>.</p>
    pub fn config_type(&self) -> std::option::Option<&crate::types::ConfigCapabilityType> {
        self.config_type.as_ref()
    }
}
impl DeleteConfigInput {
    /// Creates a new builder-style object to manufacture [`DeleteConfigInput`](crate::operation::delete_config::DeleteConfigInput).
    pub fn builder() -> crate::operation::delete_config::builders::DeleteConfigInputBuilder {
        crate::operation::delete_config::builders::DeleteConfigInputBuilder::default()
    }
}

/// A builder for [`DeleteConfigInput`](crate::operation::delete_config::DeleteConfigInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteConfigInputBuilder {
    pub(crate) config_id: std::option::Option<std::string::String>,
    pub(crate) config_type: std::option::Option<crate::types::ConfigCapabilityType>,
}
impl DeleteConfigInputBuilder {
    /// <p>UUID of a <code>Config</code>.</p>
    pub fn config_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.config_id = Some(input.into());
        self
    }
    /// <p>UUID of a <code>Config</code>.</p>
    pub fn set_config_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.config_id = input;
        self
    }
    /// <p>Type of a <code>Config</code>.</p>
    pub fn config_type(mut self, input: crate::types::ConfigCapabilityType) -> Self {
        self.config_type = Some(input);
        self
    }
    /// <p>Type of a <code>Config</code>.</p>
    pub fn set_config_type(
        mut self,
        input: std::option::Option<crate::types::ConfigCapabilityType>,
    ) -> Self {
        self.config_type = input;
        self
    }
    /// Consumes the builder and constructs a [`DeleteConfigInput`](crate::operation::delete_config::DeleteConfigInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::delete_config::DeleteConfigInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::delete_config::DeleteConfigInput {
            config_id: self.config_id,
            config_type: self.config_type,
        })
    }
}
