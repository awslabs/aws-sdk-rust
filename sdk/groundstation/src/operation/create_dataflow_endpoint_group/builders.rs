// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_dataflow_endpoint_group::_create_dataflow_endpoint_group_output::CreateDataflowEndpointGroupOutputBuilder;

pub use crate::operation::create_dataflow_endpoint_group::_create_dataflow_endpoint_group_input::CreateDataflowEndpointGroupInputBuilder;

/// Fluent builder constructing a request to `CreateDataflowEndpointGroup`.
///
/// <p>Creates a <code>DataflowEndpoint</code> group containing the specified list of <code>DataflowEndpoint</code> objects.</p>
/// <p>The <code>name</code> field in each endpoint is used in your mission profile <code>DataflowEndpointConfig</code> to specify which endpoints to use during a contact.</p>
/// <p>When a contact uses multiple <code>DataflowEndpointConfig</code> objects, each <code>Config</code> must match a <code>DataflowEndpoint</code> in the same group.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateDataflowEndpointGroupFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::create_dataflow_endpoint_group::builders::CreateDataflowEndpointGroupInputBuilder
            }
impl CreateDataflowEndpointGroupFluentBuilder {
    /// Creates a new `CreateDataflowEndpointGroup`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_dataflow_endpoint_group::CreateDataflowEndpointGroup,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_dataflow_endpoint_group::CreateDataflowEndpointGroupError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_dataflow_endpoint_group::CreateDataflowEndpointGroupOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_dataflow_endpoint_group::CreateDataflowEndpointGroupError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `endpointDetails`.
    ///
    /// To override the contents of this collection use [`set_endpoint_details`](Self::set_endpoint_details).
    ///
    /// <p>Endpoint details of each endpoint in the dataflow endpoint group.</p>
    pub fn endpoint_details(mut self, input: crate::types::EndpointDetails) -> Self {
        self.inner = self.inner.endpoint_details(input);
        self
    }
    /// <p>Endpoint details of each endpoint in the dataflow endpoint group.</p>
    pub fn set_endpoint_details(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::EndpointDetails>>,
    ) -> Self {
        self.inner = self.inner.set_endpoint_details(input);
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags of a dataflow endpoint group.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>Tags of a dataflow endpoint group.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>Amount of time, in seconds, prior to contact start for the contact to remain in a <code>PREPASS</code> state. A CloudWatch event is emitted when the contact enters and exits the <code>PREPASS</code> state.</p>
    pub fn contact_pre_pass_duration_seconds(mut self, input: i32) -> Self {
        self.inner = self.inner.contact_pre_pass_duration_seconds(input);
        self
    }
    /// <p>Amount of time, in seconds, prior to contact start for the contact to remain in a <code>PREPASS</code> state. A CloudWatch event is emitted when the contact enters and exits the <code>PREPASS</code> state.</p>
    pub fn set_contact_pre_pass_duration_seconds(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.inner = self.inner.set_contact_pre_pass_duration_seconds(input);
        self
    }
    /// <p>Amount of time, in seconds, after a contact ends for the contact to remain in a <code>POSTPASS</code> state. A CloudWatch event is emitted when the contact enters and exits the <code>POSTPASS</code> state.</p>
    pub fn contact_post_pass_duration_seconds(mut self, input: i32) -> Self {
        self.inner = self.inner.contact_post_pass_duration_seconds(input);
        self
    }
    /// <p>Amount of time, in seconds, after a contact ends for the contact to remain in a <code>POSTPASS</code> state. A CloudWatch event is emitted when the contact enters and exits the <code>POSTPASS</code> state.</p>
    pub fn set_contact_post_pass_duration_seconds(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.inner = self.inner.set_contact_post_pass_duration_seconds(input);
        self
    }
}
