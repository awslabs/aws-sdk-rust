// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateDataflowEndpointGroupInput {
    /// <p>Endpoint details of each endpoint in the dataflow endpoint group.</p>
    #[doc(hidden)]
    pub endpoint_details: std::option::Option<std::vec::Vec<crate::types::EndpointDetails>>,
    /// <p>Tags of a dataflow endpoint group.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>Amount of time, in seconds, prior to contact start for the contact to remain in a <code>PREPASS</code> state. A CloudWatch event is emitted when the contact enters and exits the <code>PREPASS</code> state.</p>
    #[doc(hidden)]
    pub contact_pre_pass_duration_seconds: std::option::Option<i32>,
    /// <p>Amount of time, in seconds, after a contact ends for the contact to remain in a <code>POSTPASS</code> state. A CloudWatch event is emitted when the contact enters and exits the <code>POSTPASS</code> state.</p>
    #[doc(hidden)]
    pub contact_post_pass_duration_seconds: std::option::Option<i32>,
}
impl CreateDataflowEndpointGroupInput {
    /// <p>Endpoint details of each endpoint in the dataflow endpoint group.</p>
    pub fn endpoint_details(&self) -> std::option::Option<&[crate::types::EndpointDetails]> {
        self.endpoint_details.as_deref()
    }
    /// <p>Tags of a dataflow endpoint group.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p>Amount of time, in seconds, prior to contact start for the contact to remain in a <code>PREPASS</code> state. A CloudWatch event is emitted when the contact enters and exits the <code>PREPASS</code> state.</p>
    pub fn contact_pre_pass_duration_seconds(&self) -> std::option::Option<i32> {
        self.contact_pre_pass_duration_seconds
    }
    /// <p>Amount of time, in seconds, after a contact ends for the contact to remain in a <code>POSTPASS</code> state. A CloudWatch event is emitted when the contact enters and exits the <code>POSTPASS</code> state.</p>
    pub fn contact_post_pass_duration_seconds(&self) -> std::option::Option<i32> {
        self.contact_post_pass_duration_seconds
    }
}
impl CreateDataflowEndpointGroupInput {
    /// Creates a new builder-style object to manufacture [`CreateDataflowEndpointGroupInput`](crate::operation::create_dataflow_endpoint_group::CreateDataflowEndpointGroupInput).
    pub fn builder() -> crate::operation::create_dataflow_endpoint_group::builders::CreateDataflowEndpointGroupInputBuilder{
        crate::operation::create_dataflow_endpoint_group::builders::CreateDataflowEndpointGroupInputBuilder::default()
    }
}

/// A builder for [`CreateDataflowEndpointGroupInput`](crate::operation::create_dataflow_endpoint_group::CreateDataflowEndpointGroupInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateDataflowEndpointGroupInputBuilder {
    pub(crate) endpoint_details: std::option::Option<std::vec::Vec<crate::types::EndpointDetails>>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) contact_pre_pass_duration_seconds: std::option::Option<i32>,
    pub(crate) contact_post_pass_duration_seconds: std::option::Option<i32>,
}
impl CreateDataflowEndpointGroupInputBuilder {
    /// Appends an item to `endpoint_details`.
    ///
    /// To override the contents of this collection use [`set_endpoint_details`](Self::set_endpoint_details).
    ///
    /// <p>Endpoint details of each endpoint in the dataflow endpoint group.</p>
    pub fn endpoint_details(mut self, input: crate::types::EndpointDetails) -> Self {
        let mut v = self.endpoint_details.unwrap_or_default();
        v.push(input);
        self.endpoint_details = Some(v);
        self
    }
    /// <p>Endpoint details of each endpoint in the dataflow endpoint group.</p>
    pub fn set_endpoint_details(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::EndpointDetails>>,
    ) -> Self {
        self.endpoint_details = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags of a dataflow endpoint group.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>Tags of a dataflow endpoint group.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>Amount of time, in seconds, prior to contact start for the contact to remain in a <code>PREPASS</code> state. A CloudWatch event is emitted when the contact enters and exits the <code>PREPASS</code> state.</p>
    pub fn contact_pre_pass_duration_seconds(mut self, input: i32) -> Self {
        self.contact_pre_pass_duration_seconds = Some(input);
        self
    }
    /// <p>Amount of time, in seconds, prior to contact start for the contact to remain in a <code>PREPASS</code> state. A CloudWatch event is emitted when the contact enters and exits the <code>PREPASS</code> state.</p>
    pub fn set_contact_pre_pass_duration_seconds(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.contact_pre_pass_duration_seconds = input;
        self
    }
    /// <p>Amount of time, in seconds, after a contact ends for the contact to remain in a <code>POSTPASS</code> state. A CloudWatch event is emitted when the contact enters and exits the <code>POSTPASS</code> state.</p>
    pub fn contact_post_pass_duration_seconds(mut self, input: i32) -> Self {
        self.contact_post_pass_duration_seconds = Some(input);
        self
    }
    /// <p>Amount of time, in seconds, after a contact ends for the contact to remain in a <code>POSTPASS</code> state. A CloudWatch event is emitted when the contact enters and exits the <code>POSTPASS</code> state.</p>
    pub fn set_contact_post_pass_duration_seconds(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.contact_post_pass_duration_seconds = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateDataflowEndpointGroupInput`](crate::operation::create_dataflow_endpoint_group::CreateDataflowEndpointGroupInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_dataflow_endpoint_group::CreateDataflowEndpointGroupInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_dataflow_endpoint_group::CreateDataflowEndpointGroupInput {
                endpoint_details: self.endpoint_details,
                tags: self.tags,
                contact_pre_pass_duration_seconds: self.contact_pre_pass_duration_seconds,
                contact_post_pass_duration_seconds: self.contact_post_pass_duration_seconds,
            },
        )
    }
}
