// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetConfigOutput {
    /// <p>UUID of a <code>Config</code>.</p>
    pub config_id: ::std::string::String,
    /// <p>ARN of a <code>Config</code> </p>
    pub config_arn: ::std::string::String,
    /// <p>Name of a <code>Config</code>.</p>
    pub name: ::std::string::String,
    /// <p>Type of a <code>Config</code>.</p>
    pub config_type: ::std::option::Option<crate::types::ConfigCapabilityType>,
    /// <p>Data elements in a <code>Config</code>.</p>
    pub config_data: ::std::option::Option<crate::types::ConfigTypeData>,
    /// <p>Tags assigned to a <code>Config</code>.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl GetConfigOutput {
    /// <p>UUID of a <code>Config</code>.</p>
    pub fn config_id(&self) -> &str {
        use std::ops::Deref;
        self.config_id.deref()
    }
    /// <p>ARN of a <code>Config</code> </p>
    pub fn config_arn(&self) -> &str {
        use std::ops::Deref;
        self.config_arn.deref()
    }
    /// <p>Name of a <code>Config</code>.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>Type of a <code>Config</code>.</p>
    pub fn config_type(&self) -> ::std::option::Option<&crate::types::ConfigCapabilityType> {
        self.config_type.as_ref()
    }
    /// <p>Data elements in a <code>Config</code>.</p>
    pub fn config_data(&self) -> ::std::option::Option<&crate::types::ConfigTypeData> {
        self.config_data.as_ref()
    }
    /// <p>Tags assigned to a <code>Config</code>.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for GetConfigOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetConfigOutput {
    /// Creates a new builder-style object to manufacture [`GetConfigOutput`](crate::operation::get_config::GetConfigOutput).
    pub fn builder() -> crate::operation::get_config::builders::GetConfigOutputBuilder {
        crate::operation::get_config::builders::GetConfigOutputBuilder::default()
    }
}

/// A builder for [`GetConfigOutput`](crate::operation::get_config::GetConfigOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetConfigOutputBuilder {
    pub(crate) config_id: ::std::option::Option<::std::string::String>,
    pub(crate) config_arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) config_type: ::std::option::Option<crate::types::ConfigCapabilityType>,
    pub(crate) config_data: ::std::option::Option<crate::types::ConfigTypeData>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl GetConfigOutputBuilder {
    /// <p>UUID of a <code>Config</code>.</p>
    /// This field is required.
    pub fn config_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.config_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>UUID of a <code>Config</code>.</p>
    pub fn set_config_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.config_id = input;
        self
    }
    /// <p>UUID of a <code>Config</code>.</p>
    pub fn get_config_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.config_id
    }
    /// <p>ARN of a <code>Config</code> </p>
    /// This field is required.
    pub fn config_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.config_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ARN of a <code>Config</code> </p>
    pub fn set_config_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.config_arn = input;
        self
    }
    /// <p>ARN of a <code>Config</code> </p>
    pub fn get_config_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.config_arn
    }
    /// <p>Name of a <code>Config</code>.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of a <code>Config</code>.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Name of a <code>Config</code>.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Type of a <code>Config</code>.</p>
    pub fn config_type(mut self, input: crate::types::ConfigCapabilityType) -> Self {
        self.config_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Type of a <code>Config</code>.</p>
    pub fn set_config_type(mut self, input: ::std::option::Option<crate::types::ConfigCapabilityType>) -> Self {
        self.config_type = input;
        self
    }
    /// <p>Type of a <code>Config</code>.</p>
    pub fn get_config_type(&self) -> &::std::option::Option<crate::types::ConfigCapabilityType> {
        &self.config_type
    }
    /// <p>Data elements in a <code>Config</code>.</p>
    /// This field is required.
    pub fn config_data(mut self, input: crate::types::ConfigTypeData) -> Self {
        self.config_data = ::std::option::Option::Some(input);
        self
    }
    /// <p>Data elements in a <code>Config</code>.</p>
    pub fn set_config_data(mut self, input: ::std::option::Option<crate::types::ConfigTypeData>) -> Self {
        self.config_data = input;
        self
    }
    /// <p>Data elements in a <code>Config</code>.</p>
    pub fn get_config_data(&self) -> &::std::option::Option<crate::types::ConfigTypeData> {
        &self.config_data
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags assigned to a <code>Config</code>.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Tags assigned to a <code>Config</code>.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Tags assigned to a <code>Config</code>.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetConfigOutput`](crate::operation::get_config::GetConfigOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`config_id`](crate::operation::get_config::builders::GetConfigOutputBuilder::config_id)
    /// - [`config_arn`](crate::operation::get_config::builders::GetConfigOutputBuilder::config_arn)
    /// - [`name`](crate::operation::get_config::builders::GetConfigOutputBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::operation::get_config::GetConfigOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_config::GetConfigOutput {
            config_id: self.config_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "config_id",
                    "config_id was not specified but it is required when building GetConfigOutput",
                )
            })?,
            config_arn: self.config_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "config_arn",
                    "config_arn was not specified but it is required when building GetConfigOutput",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building GetConfigOutput",
                )
            })?,
            config_type: self.config_type,
            config_data: self.config_data,
            tags: self.tags,
            _request_id: self._request_id,
        })
    }
}
