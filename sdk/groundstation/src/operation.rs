// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Cancels a contact with a specified contact ID.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CancelContact {
    _private: (),
}
impl CancelContact {
    /// Creates a new builder-style object to manufacture [`CancelContactInput`](crate::input::CancelContactInput)
    pub fn builder() -> crate::input::cancel_contact_input::Builder {
        crate::input::cancel_contact_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CancelContact {
    type Output =
        std::result::Result<crate::output::CancelContactOutput, crate::error::CancelContactError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_cancel_contact_error(response)
        } else {
            crate::operation_deser::parse_cancel_contact_response(response)
        }
    }
}

/// <p>Creates a <code>Config</code> with the specified <code>configData</code> parameters.</p>
/// <p>Only one type of <code>configData</code> can be specified.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateConfig {
    _private: (),
}
impl CreateConfig {
    /// Creates a new builder-style object to manufacture [`CreateConfigInput`](crate::input::CreateConfigInput)
    pub fn builder() -> crate::input::create_config_input::Builder {
        crate::input::create_config_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateConfig {
    type Output =
        std::result::Result<crate::output::CreateConfigOutput, crate::error::CreateConfigError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_config_error(response)
        } else {
            crate::operation_deser::parse_create_config_response(response)
        }
    }
}

/// <p>Creates a <code>DataflowEndpoint</code> group containing the specified list of <code>DataflowEndpoint</code> objects.</p>
/// <p>The <code>name</code> field in each endpoint is used in your mission profile <code>DataflowEndpointConfig</code>
/// to specify which endpoints to use during a contact.</p>
/// <p>When a contact uses multiple <code>DataflowEndpointConfig</code> objects, each <code>Config</code>
/// must match a <code>DataflowEndpoint</code> in the same group.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDataflowEndpointGroup {
    _private: (),
}
impl CreateDataflowEndpointGroup {
    /// Creates a new builder-style object to manufacture [`CreateDataflowEndpointGroupInput`](crate::input::CreateDataflowEndpointGroupInput)
    pub fn builder() -> crate::input::create_dataflow_endpoint_group_input::Builder {
        crate::input::create_dataflow_endpoint_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDataflowEndpointGroup {
    type Output = std::result::Result<
        crate::output::CreateDataflowEndpointGroupOutput,
        crate::error::CreateDataflowEndpointGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_dataflow_endpoint_group_error(response)
        } else {
            crate::operation_deser::parse_create_dataflow_endpoint_group_response(response)
        }
    }
}

/// <p>Creates a mission profile.</p>
/// <p>
/// <code>dataflowEdges</code> is a list of lists of strings. Each lower level list of strings
/// has two elements: a <i>from</i> ARN and a <i>to</i> ARN.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateMissionProfile {
    _private: (),
}
impl CreateMissionProfile {
    /// Creates a new builder-style object to manufacture [`CreateMissionProfileInput`](crate::input::CreateMissionProfileInput)
    pub fn builder() -> crate::input::create_mission_profile_input::Builder {
        crate::input::create_mission_profile_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateMissionProfile {
    type Output = std::result::Result<
        crate::output::CreateMissionProfileOutput,
        crate::error::CreateMissionProfileError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_mission_profile_error(response)
        } else {
            crate::operation_deser::parse_create_mission_profile_response(response)
        }
    }
}

/// <p>Deletes a <code>Config</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteConfig {
    _private: (),
}
impl DeleteConfig {
    /// Creates a new builder-style object to manufacture [`DeleteConfigInput`](crate::input::DeleteConfigInput)
    pub fn builder() -> crate::input::delete_config_input::Builder {
        crate::input::delete_config_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteConfig {
    type Output =
        std::result::Result<crate::output::DeleteConfigOutput, crate::error::DeleteConfigError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_config_error(response)
        } else {
            crate::operation_deser::parse_delete_config_response(response)
        }
    }
}

/// <p>Deletes a dataflow endpoint group.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDataflowEndpointGroup {
    _private: (),
}
impl DeleteDataflowEndpointGroup {
    /// Creates a new builder-style object to manufacture [`DeleteDataflowEndpointGroupInput`](crate::input::DeleteDataflowEndpointGroupInput)
    pub fn builder() -> crate::input::delete_dataflow_endpoint_group_input::Builder {
        crate::input::delete_dataflow_endpoint_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteDataflowEndpointGroup {
    type Output = std::result::Result<
        crate::output::DeleteDataflowEndpointGroupOutput,
        crate::error::DeleteDataflowEndpointGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_dataflow_endpoint_group_error(response)
        } else {
            crate::operation_deser::parse_delete_dataflow_endpoint_group_response(response)
        }
    }
}

/// <p>Deletes a mission profile.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteMissionProfile {
    _private: (),
}
impl DeleteMissionProfile {
    /// Creates a new builder-style object to manufacture [`DeleteMissionProfileInput`](crate::input::DeleteMissionProfileInput)
    pub fn builder() -> crate::input::delete_mission_profile_input::Builder {
        crate::input::delete_mission_profile_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteMissionProfile {
    type Output = std::result::Result<
        crate::output::DeleteMissionProfileOutput,
        crate::error::DeleteMissionProfileError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_mission_profile_error(response)
        } else {
            crate::operation_deser::parse_delete_mission_profile_response(response)
        }
    }
}

/// <p>Describes an existing contact.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeContact {
    _private: (),
}
impl DescribeContact {
    /// Creates a new builder-style object to manufacture [`DescribeContactInput`](crate::input::DescribeContactInput)
    pub fn builder() -> crate::input::describe_contact_input::Builder {
        crate::input::describe_contact_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeContact {
    type Output = std::result::Result<
        crate::output::DescribeContactOutput,
        crate::error::DescribeContactError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_contact_error(response)
        } else {
            crate::operation_deser::parse_describe_contact_response(response)
        }
    }
}

/// <p>Returns <code>Config</code> information.</p>
/// <p>Only one <code>Config</code> response can be returned.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetConfig {
    _private: (),
}
impl GetConfig {
    /// Creates a new builder-style object to manufacture [`GetConfigInput`](crate::input::GetConfigInput)
    pub fn builder() -> crate::input::get_config_input::Builder {
        crate::input::get_config_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetConfig {
    type Output = std::result::Result<crate::output::GetConfigOutput, crate::error::GetConfigError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_config_error(response)
        } else {
            crate::operation_deser::parse_get_config_response(response)
        }
    }
}

/// <p>Returns the dataflow endpoint group.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetDataflowEndpointGroup {
    _private: (),
}
impl GetDataflowEndpointGroup {
    /// Creates a new builder-style object to manufacture [`GetDataflowEndpointGroupInput`](crate::input::GetDataflowEndpointGroupInput)
    pub fn builder() -> crate::input::get_dataflow_endpoint_group_input::Builder {
        crate::input::get_dataflow_endpoint_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetDataflowEndpointGroup {
    type Output = std::result::Result<
        crate::output::GetDataflowEndpointGroupOutput,
        crate::error::GetDataflowEndpointGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_dataflow_endpoint_group_error(response)
        } else {
            crate::operation_deser::parse_get_dataflow_endpoint_group_response(response)
        }
    }
}

/// <p>Returns the number of minutes used by account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetMinuteUsage {
    _private: (),
}
impl GetMinuteUsage {
    /// Creates a new builder-style object to manufacture [`GetMinuteUsageInput`](crate::input::GetMinuteUsageInput)
    pub fn builder() -> crate::input::get_minute_usage_input::Builder {
        crate::input::get_minute_usage_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetMinuteUsage {
    type Output =
        std::result::Result<crate::output::GetMinuteUsageOutput, crate::error::GetMinuteUsageError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_minute_usage_error(response)
        } else {
            crate::operation_deser::parse_get_minute_usage_response(response)
        }
    }
}

/// <p>Returns a mission profile.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetMissionProfile {
    _private: (),
}
impl GetMissionProfile {
    /// Creates a new builder-style object to manufacture [`GetMissionProfileInput`](crate::input::GetMissionProfileInput)
    pub fn builder() -> crate::input::get_mission_profile_input::Builder {
        crate::input::get_mission_profile_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetMissionProfile {
    type Output = std::result::Result<
        crate::output::GetMissionProfileOutput,
        crate::error::GetMissionProfileError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_mission_profile_error(response)
        } else {
            crate::operation_deser::parse_get_mission_profile_response(response)
        }
    }
}

/// <p>Returns a satellite.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetSatellite {
    _private: (),
}
impl GetSatellite {
    /// Creates a new builder-style object to manufacture [`GetSatelliteInput`](crate::input::GetSatelliteInput)
    pub fn builder() -> crate::input::get_satellite_input::Builder {
        crate::input::get_satellite_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetSatellite {
    type Output =
        std::result::Result<crate::output::GetSatelliteOutput, crate::error::GetSatelliteError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_satellite_error(response)
        } else {
            crate::operation_deser::parse_get_satellite_response(response)
        }
    }
}

/// <p>Returns a list of <code>Config</code> objects.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListConfigs {
    _private: (),
}
impl ListConfigs {
    /// Creates a new builder-style object to manufacture [`ListConfigsInput`](crate::input::ListConfigsInput)
    pub fn builder() -> crate::input::list_configs_input::Builder {
        crate::input::list_configs_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListConfigs {
    type Output =
        std::result::Result<crate::output::ListConfigsOutput, crate::error::ListConfigsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_configs_error(response)
        } else {
            crate::operation_deser::parse_list_configs_response(response)
        }
    }
}

/// <p>Returns a list of contacts.</p>
/// <p>If <code>statusList</code> contains AVAILABLE, the request must include
/// <code>groundStation</code>, <code>missionprofileArn</code>, and <code>satelliteArn</code>.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListContacts {
    _private: (),
}
impl ListContacts {
    /// Creates a new builder-style object to manufacture [`ListContactsInput`](crate::input::ListContactsInput)
    pub fn builder() -> crate::input::list_contacts_input::Builder {
        crate::input::list_contacts_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListContacts {
    type Output =
        std::result::Result<crate::output::ListContactsOutput, crate::error::ListContactsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_contacts_error(response)
        } else {
            crate::operation_deser::parse_list_contacts_response(response)
        }
    }
}

/// <p>Returns a list of <code>DataflowEndpoint</code> groups.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListDataflowEndpointGroups {
    _private: (),
}
impl ListDataflowEndpointGroups {
    /// Creates a new builder-style object to manufacture [`ListDataflowEndpointGroupsInput`](crate::input::ListDataflowEndpointGroupsInput)
    pub fn builder() -> crate::input::list_dataflow_endpoint_groups_input::Builder {
        crate::input::list_dataflow_endpoint_groups_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListDataflowEndpointGroups {
    type Output = std::result::Result<
        crate::output::ListDataflowEndpointGroupsOutput,
        crate::error::ListDataflowEndpointGroupsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_dataflow_endpoint_groups_error(response)
        } else {
            crate::operation_deser::parse_list_dataflow_endpoint_groups_response(response)
        }
    }
}

/// <p>Returns a list of ground stations. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListGroundStations {
    _private: (),
}
impl ListGroundStations {
    /// Creates a new builder-style object to manufacture [`ListGroundStationsInput`](crate::input::ListGroundStationsInput)
    pub fn builder() -> crate::input::list_ground_stations_input::Builder {
        crate::input::list_ground_stations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListGroundStations {
    type Output = std::result::Result<
        crate::output::ListGroundStationsOutput,
        crate::error::ListGroundStationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_ground_stations_error(response)
        } else {
            crate::operation_deser::parse_list_ground_stations_response(response)
        }
    }
}

/// <p>Returns a list of mission profiles.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListMissionProfiles {
    _private: (),
}
impl ListMissionProfiles {
    /// Creates a new builder-style object to manufacture [`ListMissionProfilesInput`](crate::input::ListMissionProfilesInput)
    pub fn builder() -> crate::input::list_mission_profiles_input::Builder {
        crate::input::list_mission_profiles_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListMissionProfiles {
    type Output = std::result::Result<
        crate::output::ListMissionProfilesOutput,
        crate::error::ListMissionProfilesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_mission_profiles_error(response)
        } else {
            crate::operation_deser::parse_list_mission_profiles_response(response)
        }
    }
}

/// <p>Returns a list of satellites.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListSatellites {
    _private: (),
}
impl ListSatellites {
    /// Creates a new builder-style object to manufacture [`ListSatellitesInput`](crate::input::ListSatellitesInput)
    pub fn builder() -> crate::input::list_satellites_input::Builder {
        crate::input::list_satellites_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListSatellites {
    type Output =
        std::result::Result<crate::output::ListSatellitesOutput, crate::error::ListSatellitesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_satellites_error(response)
        } else {
            crate::operation_deser::parse_list_satellites_response(response)
        }
    }
}

/// <p>Returns a list of tags for a specified resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput)
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// <p>Reserves a contact using specified parameters.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ReserveContact {
    _private: (),
}
impl ReserveContact {
    /// Creates a new builder-style object to manufacture [`ReserveContactInput`](crate::input::ReserveContactInput)
    pub fn builder() -> crate::input::reserve_contact_input::Builder {
        crate::input::reserve_contact_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ReserveContact {
    type Output =
        std::result::Result<crate::output::ReserveContactOutput, crate::error::ReserveContactError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_reserve_contact_error(response)
        } else {
            crate::operation_deser::parse_reserve_contact_response(response)
        }
    }
}

/// <p>Assigns a tag to a resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput)
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_tag_resource_error(response)
        } else {
            crate::operation_deser::parse_tag_resource_response(response)
        }
    }
}

/// <p>Deassigns a resource tag.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput)
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_untag_resource_error(response)
        } else {
            crate::operation_deser::parse_untag_resource_response(response)
        }
    }
}

/// <p>Updates the <code>Config</code> used when scheduling contacts.</p>
/// <p>Updating a <code>Config</code> will not update the execution parameters
/// for existing future contacts scheduled with this <code>Config</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateConfig {
    _private: (),
}
impl UpdateConfig {
    /// Creates a new builder-style object to manufacture [`UpdateConfigInput`](crate::input::UpdateConfigInput)
    pub fn builder() -> crate::input::update_config_input::Builder {
        crate::input::update_config_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateConfig {
    type Output =
        std::result::Result<crate::output::UpdateConfigOutput, crate::error::UpdateConfigError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_config_error(response)
        } else {
            crate::operation_deser::parse_update_config_response(response)
        }
    }
}

/// <p>Updates a mission profile.</p>
/// <p>Updating a mission profile will not update the execution parameters
/// for existing future contacts.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateMissionProfile {
    _private: (),
}
impl UpdateMissionProfile {
    /// Creates a new builder-style object to manufacture [`UpdateMissionProfileInput`](crate::input::UpdateMissionProfileInput)
    pub fn builder() -> crate::input::update_mission_profile_input::Builder {
        crate::input::update_mission_profile_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateMissionProfile {
    type Output = std::result::Result<
        crate::output::UpdateMissionProfileOutput,
        crate::error::UpdateMissionProfileError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_mission_profile_error(response)
        } else {
            crate::operation_deser::parse_update_mission_profile_response(response)
        }
    }
}
