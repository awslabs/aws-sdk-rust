// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_device_resources_output_next_token(
    input: &crate::operation::list_device_resources::ListDeviceResourcesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_devices_output_next_token(
    input: &crate::operation::list_devices::ListDevicesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_executions_output_next_token(
    input: &crate::operation::list_executions::ListExecutionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_tasks_output_next_token(
    input: &crate::operation::list_tasks::ListTasksOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_device_resources_output_resources(
    input: crate::operation::list_device_resources::ListDeviceResourcesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ResourceSummary>> {
    let input = match input.resources {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_devices_output_devices(
    input: crate::operation::list_devices::ListDevicesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::DeviceSummary>> {
    let input = match input.devices {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_executions_output_executions(
    input: crate::operation::list_executions::ListExecutionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ExecutionSummary>> {
    let input = match input.executions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_tasks_output_tasks(
    input: crate::operation::list_tasks::ListTasksOutput,
) -> std::option::Option<std::vec::Vec<crate::types::TaskSummary>> {
    let input = match input.tasks {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
