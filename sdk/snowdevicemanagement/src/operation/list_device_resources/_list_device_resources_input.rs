// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListDeviceResourcesInput {
    /// <p>The ID of the managed device that you are listing the resources of.</p>
    pub managed_device_id: ::std::option::Option<::std::string::String>,
    /// <p>A structure used to filter the results by type of resource.</p>
    pub r#type: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of resources per page.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>A pagination token to continue to the next page of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListDeviceResourcesInput {
    /// <p>The ID of the managed device that you are listing the resources of.</p>
    pub fn managed_device_id(&self) -> ::std::option::Option<&str> {
        self.managed_device_id.as_deref()
    }
    /// <p>A structure used to filter the results by type of resource.</p>
    pub fn r#type(&self) -> ::std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The maximum number of resources per page.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>A pagination token to continue to the next page of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListDeviceResourcesInput {
    /// Creates a new builder-style object to manufacture [`ListDeviceResourcesInput`](crate::operation::list_device_resources::ListDeviceResourcesInput).
    pub fn builder() -> crate::operation::list_device_resources::builders::ListDeviceResourcesInputBuilder {
        crate::operation::list_device_resources::builders::ListDeviceResourcesInputBuilder::default()
    }
}

/// A builder for [`ListDeviceResourcesInput`](crate::operation::list_device_resources::ListDeviceResourcesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListDeviceResourcesInputBuilder {
    pub(crate) managed_device_id: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListDeviceResourcesInputBuilder {
    /// <p>The ID of the managed device that you are listing the resources of.</p>
    /// This field is required.
    pub fn managed_device_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.managed_device_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the managed device that you are listing the resources of.</p>
    pub fn set_managed_device_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.managed_device_id = input;
        self
    }
    /// <p>The ID of the managed device that you are listing the resources of.</p>
    pub fn get_managed_device_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.managed_device_id
    }
    /// <p>A structure used to filter the results by type of resource.</p>
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A structure used to filter the results by type of resource.</p>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>A structure used to filter the results by type of resource.</p>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// <p>The maximum number of resources per page.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of resources per page.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of resources per page.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>A pagination token to continue to the next page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A pagination token to continue to the next page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A pagination token to continue to the next page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListDeviceResourcesInput`](crate::operation::list_device_resources::ListDeviceResourcesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_device_resources::ListDeviceResourcesInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_device_resources::ListDeviceResourcesInput {
            managed_device_id: self.managed_device_id,
            r#type: self.r#type,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
