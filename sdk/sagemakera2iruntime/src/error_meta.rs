// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    ConflictError(crate::error::ConflictError),
    InternalServerError(crate::error::InternalServerError),
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    ServiceQuotaExceededError(crate::error::ServiceQuotaExceededError),
    ThrottlingError(crate::error::ThrottlingError),
    ValidationError(crate::error::ValidationError),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ConflictError(inner) => inner.fmt(f),
            Error::InternalServerError(inner) => inner.fmt(f),
            Error::ResourceNotFoundError(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededError(inner) => inner.fmt(f),
            Error::ThrottlingError(inner) => inner.fmt(f),
            Error::ValidationError(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteHumanLoopError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteHumanLoopError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteHumanLoopErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DeleteHumanLoopErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::DeleteHumanLoopErrorKind::ThrottlingError(inner) => {
                    Error::ThrottlingError(inner)
                }
                crate::error::DeleteHumanLoopErrorKind::ValidationError(inner) => {
                    Error::ValidationError(inner)
                }
                crate::error::DeleteHumanLoopErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeHumanLoopError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeHumanLoopError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeHumanLoopErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DescribeHumanLoopErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::DescribeHumanLoopErrorKind::ThrottlingError(inner) => {
                    Error::ThrottlingError(inner)
                }
                crate::error::DescribeHumanLoopErrorKind::ValidationError(inner) => {
                    Error::ValidationError(inner)
                }
                crate::error::DescribeHumanLoopErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListHumanLoopsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListHumanLoopsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListHumanLoopsErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::ListHumanLoopsErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::ListHumanLoopsErrorKind::ThrottlingError(inner) => {
                    Error::ThrottlingError(inner)
                }
                crate::error::ListHumanLoopsErrorKind::ValidationError(inner) => {
                    Error::ValidationError(inner)
                }
                crate::error::ListHumanLoopsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StartHumanLoopError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StartHumanLoopError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StartHumanLoopErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::StartHumanLoopErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::StartHumanLoopErrorKind::ServiceQuotaExceededError(inner) => {
                    Error::ServiceQuotaExceededError(inner)
                }
                crate::error::StartHumanLoopErrorKind::ThrottlingError(inner) => {
                    Error::ThrottlingError(inner)
                }
                crate::error::StartHumanLoopErrorKind::ValidationError(inner) => {
                    Error::ValidationError(inner)
                }
                crate::error::StartHumanLoopErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StopHumanLoopError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StopHumanLoopError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StopHumanLoopErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::StopHumanLoopErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::StopHumanLoopErrorKind::ThrottlingError(inner) => {
                    Error::ThrottlingError(inner)
                }
                crate::error::StopHumanLoopErrorKind::ValidationError(inner) => {
                    Error::ValidationError(inner)
                }
                crate::error::StopHumanLoopErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
