// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>Your request has the same name as another active human loop but has different input data. You cannot start two human loops with the same name and different input data.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>We couldn't process your request because of an issue with the server. Try again later.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>We couldn't find the requested resource. Check that your resources exists and were created in the same AWS Region as your request, and try your request again. </p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>You exceeded your service quota. Service quotas, also referred to as limits, are the maximum number of service resources or operations for your AWS account. For a list of Amazon A2I service quotes, see <a href="https://docs.aws.amazon.com/general/latest/gr/a2i.html">Amazon Augmented AI Service Quotes</a>. Delete some resources or request an increase in your service quota. You can request a quota increase using Service Quotas or the AWS Support Center. To request an increase, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html">AWS Service Quotas</a> in the <i>AWS General Reference</i>.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>You exceeded the maximum number of requests.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The request isn't valid. Check the syntax and try again.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(::aws_smithy_types::error::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_human_loop::DeleteHumanLoopError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_human_loop::DeleteHumanLoopError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_human_loop::DeleteHumanLoopError> for Error {
    fn from(err: crate::operation::delete_human_loop::DeleteHumanLoopError) -> Self {
        match err {
            crate::operation::delete_human_loop::DeleteHumanLoopError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_human_loop::DeleteHumanLoopError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_human_loop::DeleteHumanLoopError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_human_loop::DeleteHumanLoopError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_human_loop::DeleteHumanLoopError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_human_loop::DescribeHumanLoopError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_human_loop::DescribeHumanLoopError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_human_loop::DescribeHumanLoopError> for Error {
    fn from(err: crate::operation::describe_human_loop::DescribeHumanLoopError) -> Self {
        match err {
            crate::operation::describe_human_loop::DescribeHumanLoopError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_human_loop::DescribeHumanLoopError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::describe_human_loop::DescribeHumanLoopError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_human_loop::DescribeHumanLoopError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_human_loop::DescribeHumanLoopError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_human_loops::ListHumanLoopsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_human_loops::ListHumanLoopsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_human_loops::ListHumanLoopsError> for Error {
    fn from(err: crate::operation::list_human_loops::ListHumanLoopsError) -> Self {
        match err {
            crate::operation::list_human_loops::ListHumanLoopsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_human_loops::ListHumanLoopsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_human_loops::ListHumanLoopsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_human_loops::ListHumanLoopsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_human_loops::ListHumanLoopsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_human_loop::StartHumanLoopError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_human_loop::StartHumanLoopError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_human_loop::StartHumanLoopError> for Error {
    fn from(err: crate::operation::start_human_loop::StartHumanLoopError) -> Self {
        match err {
            crate::operation::start_human_loop::StartHumanLoopError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::start_human_loop::StartHumanLoopError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::start_human_loop::StartHumanLoopError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::start_human_loop::StartHumanLoopError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_human_loop::StartHumanLoopError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_human_loop::StartHumanLoopError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_human_loop::StopHumanLoopError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_human_loop::StopHumanLoopError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_human_loop::StopHumanLoopError> for Error {
    fn from(err: crate::operation::stop_human_loop::StopHumanLoopError) -> Self {
        match err {
            crate::operation::stop_human_loop::StopHumanLoopError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::stop_human_loop::StopHumanLoopError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::stop_human_loop::StopHumanLoopError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::stop_human_loop::StopHumanLoopError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::stop_human_loop::StopHumanLoopError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::ConflictException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => inner.source(),
        }
    }
}
impl ::aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
