// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Deletes the specified human loop for a flow definition.</p>
/// <p>If the human loop was deleted, this operation will return a
/// <code>ResourceNotFoundException</code>. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteHumanLoop {
    _private: (),
}
impl DeleteHumanLoop {
    /// Creates a new builder-style object to manufacture [`DeleteHumanLoopInput`](crate::input::DeleteHumanLoopInput)
    pub fn builder() -> crate::input::delete_human_loop_input::Builder {
        crate::input::delete_human_loop_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteHumanLoop {
    type Output = std::result::Result<
        crate::output::DeleteHumanLoopOutput,
        crate::error::DeleteHumanLoopError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_human_loop_error(response)
        } else {
            crate::operation_deser::parse_delete_human_loop_response(response)
        }
    }
}

/// <p>Returns information about the specified human loop. If the human loop was deleted, this
/// operation will return a <code>ResourceNotFoundException</code> error. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeHumanLoop {
    _private: (),
}
impl DescribeHumanLoop {
    /// Creates a new builder-style object to manufacture [`DescribeHumanLoopInput`](crate::input::DescribeHumanLoopInput)
    pub fn builder() -> crate::input::describe_human_loop_input::Builder {
        crate::input::describe_human_loop_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeHumanLoop {
    type Output = std::result::Result<
        crate::output::DescribeHumanLoopOutput,
        crate::error::DescribeHumanLoopError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_human_loop_error(response)
        } else {
            crate::operation_deser::parse_describe_human_loop_response(response)
        }
    }
}

/// <p>Returns information about human loops, given the specified parameters. If a human loop was deleted, it will not be included.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListHumanLoops {
    _private: (),
}
impl ListHumanLoops {
    /// Creates a new builder-style object to manufacture [`ListHumanLoopsInput`](crate::input::ListHumanLoopsInput)
    pub fn builder() -> crate::input::list_human_loops_input::Builder {
        crate::input::list_human_loops_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListHumanLoops {
    type Output =
        std::result::Result<crate::output::ListHumanLoopsOutput, crate::error::ListHumanLoopsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_human_loops_error(response)
        } else {
            crate::operation_deser::parse_list_human_loops_response(response)
        }
    }
}

/// <p>Starts a human loop, provided that at least one activation condition is met.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartHumanLoop {
    _private: (),
}
impl StartHumanLoop {
    /// Creates a new builder-style object to manufacture [`StartHumanLoopInput`](crate::input::StartHumanLoopInput)
    pub fn builder() -> crate::input::start_human_loop_input::Builder {
        crate::input::start_human_loop_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartHumanLoop {
    type Output =
        std::result::Result<crate::output::StartHumanLoopOutput, crate::error::StartHumanLoopError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_human_loop_error(response)
        } else {
            crate::operation_deser::parse_start_human_loop_response(response)
        }
    }
}

/// <p>Stops the specified human loop.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StopHumanLoop {
    _private: (),
}
impl StopHumanLoop {
    /// Creates a new builder-style object to manufacture [`StopHumanLoopInput`](crate::input::StopHumanLoopInput)
    pub fn builder() -> crate::input::stop_human_loop_input::Builder {
        crate::input::stop_human_loop_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StopHumanLoop {
    type Output =
        std::result::Result<crate::output::StopHumanLoopOutput, crate::error::StopHumanLoopError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_stop_human_loop_error(response)
        } else {
            crate::operation_deser::parse_stop_human_loop_response(response)
        }
    }
}
