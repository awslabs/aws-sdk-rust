// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Fluent builder constructing a request to `DeleteHumanLoop`.
///
/// <p>Deletes the specified human loop for a flow definition.</p>
/// <p>If the human loop was deleted, this operation will return a <code>ResourceNotFoundException</code>. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteHumanLoop {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_human_loop_input::Builder,
}
impl DeleteHumanLoop {
    /// Creates a new `DeleteHumanLoop`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteHumanLoop,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteHumanLoopError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteHumanLoopOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteHumanLoopError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the human loop that you want to delete.</p>
    pub fn human_loop_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.human_loop_name(input.into());
        self
    }
    /// <p>The name of the human loop that you want to delete.</p>
    pub fn set_human_loop_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_human_loop_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeHumanLoop`.
///
/// <p>Returns information about the specified human loop. If the human loop was deleted, this operation will return a <code>ResourceNotFoundException</code> error. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeHumanLoop {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_human_loop_input::Builder,
}
impl DescribeHumanLoop {
    /// Creates a new `DescribeHumanLoop`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeHumanLoop,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeHumanLoopError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeHumanLoopOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeHumanLoopError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the human loop that you want information about.</p>
    pub fn human_loop_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.human_loop_name(input.into());
        self
    }
    /// <p>The name of the human loop that you want information about.</p>
    pub fn set_human_loop_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_human_loop_name(input);
        self
    }
}

/// Fluent builder constructing a request to `ListHumanLoops`.
///
/// <p>Returns information about human loops, given the specified parameters. If a human loop was deleted, it will not be included.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListHumanLoops {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_human_loops_input::Builder,
}
impl ListHumanLoops {
    /// Creates a new `ListHumanLoops`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListHumanLoops,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListHumanLoopsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListHumanLoopsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListHumanLoopsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListHumanLoopsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListHumanLoopsPaginator {
        crate::paginator::ListHumanLoopsPaginator::new(self.handle, self.inner)
    }
    /// <p>(Optional) The timestamp of the date when you want the human loops to begin in ISO 8601 format. For example, <code>2020-02-24</code>.</p>
    pub fn creation_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>(Optional) The timestamp of the date when you want the human loops to begin in ISO 8601 format. For example, <code>2020-02-24</code>.</p>
    pub fn set_creation_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
    /// <p>(Optional) The timestamp of the date before which you want the human loops to begin in ISO 8601 format. For example, <code>2020-02-24</code>.</p>
    pub fn creation_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>(Optional) The timestamp of the date before which you want the human loops to begin in ISO 8601 format. For example, <code>2020-02-24</code>.</p>
    pub fn set_creation_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a flow definition.</p>
    pub fn flow_definition_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.flow_definition_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a flow definition.</p>
    pub fn set_flow_definition_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_flow_definition_arn(input);
        self
    }
    /// <p>Optional. The order for displaying results. Valid values: <code>Ascending</code> and <code>Descending</code>.</p>
    pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>Optional. The order for displaying results. Valid values: <code>Ascending</code> and <code>Descending</code>.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>A token to display the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>A token to display the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The total number of items to return. If the total number of available items is more than the value specified in <code>MaxResults</code>, then a <code>NextToken</code> is returned in the output. You can use this token to display the next page of results. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The total number of items to return. If the total number of available items is more than the value specified in <code>MaxResults</code>, then a <code>NextToken</code> is returned in the output. You can use this token to display the next page of results. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `StartHumanLoop`.
///
/// <p>Starts a human loop, provided that at least one activation condition is met.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StartHumanLoop {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::start_human_loop_input::Builder,
}
impl StartHumanLoop {
    /// Creates a new `StartHumanLoop`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StartHumanLoop,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StartHumanLoopError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StartHumanLoopOutput,
        aws_smithy_http::result::SdkError<crate::error::StartHumanLoopError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the human loop.</p>
    pub fn human_loop_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.human_loop_name(input.into());
        self
    }
    /// <p>The name of the human loop.</p>
    pub fn set_human_loop_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_human_loop_name(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the flow definition associated with this human loop.</p>
    pub fn flow_definition_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.flow_definition_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the flow definition associated with this human loop.</p>
    pub fn set_flow_definition_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_flow_definition_arn(input);
        self
    }
    /// <p>An object that contains information about the human loop.</p>
    pub fn human_loop_input(mut self, input: crate::model::HumanLoopInput) -> Self {
        self.inner = self.inner.human_loop_input(input);
        self
    }
    /// <p>An object that contains information about the human loop.</p>
    pub fn set_human_loop_input(
        mut self,
        input: std::option::Option<crate::model::HumanLoopInput>,
    ) -> Self {
        self.inner = self.inner.set_human_loop_input(input);
        self
    }
    /// <p>Attributes of the specified data. Use <code>DataAttributes</code> to specify if your data is free of personally identifiable information and/or free of adult content.</p>
    pub fn data_attributes(mut self, input: crate::model::HumanLoopDataAttributes) -> Self {
        self.inner = self.inner.data_attributes(input);
        self
    }
    /// <p>Attributes of the specified data. Use <code>DataAttributes</code> to specify if your data is free of personally identifiable information and/or free of adult content.</p>
    pub fn set_data_attributes(
        mut self,
        input: std::option::Option<crate::model::HumanLoopDataAttributes>,
    ) -> Self {
        self.inner = self.inner.set_data_attributes(input);
        self
    }
}

/// Fluent builder constructing a request to `StopHumanLoop`.
///
/// <p>Stops the specified human loop.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StopHumanLoop {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::stop_human_loop_input::Builder,
}
impl StopHumanLoop {
    /// Creates a new `StopHumanLoop`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StopHumanLoop,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StopHumanLoopError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StopHumanLoopOutput,
        aws_smithy_http::result::SdkError<crate::error::StopHumanLoopError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the human loop that you want to stop.</p>
    pub fn human_loop_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.human_loop_name(input.into());
        self
    }
    /// <p>The name of the human loop that you want to stop.</p>
    pub fn set_human_loop_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_human_loop_name(input);
        self
    }
}
