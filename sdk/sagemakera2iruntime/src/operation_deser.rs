// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_human_loop_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeleteHumanLoopOutput, crate::error::DeleteHumanLoopError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DeleteHumanLoopError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DeleteHumanLoopError::unhandled(generic)),
    };
    Err(match error_code {
        "InternalServerException" => crate::error::DeleteHumanLoopError {
            meta: generic,
            kind: crate::error::DeleteHumanLoopErrorKind::InternalServerError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::internal_server_exception(response.body().as_ref(), output)
                        .map_err(crate::error::DeleteHumanLoopError::unhandled)?;
                output.build()
            }),
        },
        "ResourceNotFoundException" => crate::error::DeleteHumanLoopError {
            meta: generic,
            kind: crate::error::DeleteHumanLoopErrorKind::ResourceNotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::resource_not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::resource_not_found_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeleteHumanLoopError::unhandled)?;
                output.build()
            }),
        },
        "ThrottlingException" => crate::error::DeleteHumanLoopError {
            meta: generic,
            kind: crate::error::DeleteHumanLoopErrorKind::ThrottlingError({
                #[allow(unused_mut)]
                let mut output = crate::error::throttling_error::Builder::default();
                let _ = response;
                output = crate::json_deser::throttling_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteHumanLoopError::unhandled)?;
                output.build()
            }),
        },
        "ValidationException" => crate::error::DeleteHumanLoopError {
            meta: generic,
            kind: crate::error::DeleteHumanLoopErrorKind::ValidationError({
                #[allow(unused_mut)]
                let mut output = crate::error::validation_error::Builder::default();
                let _ = response;
                output = crate::json_deser::validation_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteHumanLoopError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::DeleteHumanLoopError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_human_loop_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeleteHumanLoopOutput, crate::error::DeleteHumanLoopError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::delete_human_loop_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_human_loop_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DescribeHumanLoopOutput, crate::error::DescribeHumanLoopError>
{
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DescribeHumanLoopError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DescribeHumanLoopError::unhandled(generic)),
    };
    Err(match error_code {
        "InternalServerException" => crate::error::DescribeHumanLoopError {
            meta: generic,
            kind: crate::error::DescribeHumanLoopErrorKind::InternalServerError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::internal_server_exception(response.body().as_ref(), output)
                        .map_err(crate::error::DescribeHumanLoopError::unhandled)?;
                output.build()
            }),
        },
        "ResourceNotFoundException" => crate::error::DescribeHumanLoopError {
            meta: generic,
            kind: crate::error::DescribeHumanLoopErrorKind::ResourceNotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::resource_not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::resource_not_found_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DescribeHumanLoopError::unhandled)?;
                output.build()
            }),
        },
        "ThrottlingException" => crate::error::DescribeHumanLoopError {
            meta: generic,
            kind: crate::error::DescribeHumanLoopErrorKind::ThrottlingError({
                #[allow(unused_mut)]
                let mut output = crate::error::throttling_error::Builder::default();
                let _ = response;
                output = crate::json_deser::throttling_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeHumanLoopError::unhandled)?;
                output.build()
            }),
        },
        "ValidationException" => crate::error::DescribeHumanLoopError {
            meta: generic,
            kind: crate::error::DescribeHumanLoopErrorKind::ValidationError({
                #[allow(unused_mut)]
                let mut output = crate::error::validation_error::Builder::default();
                let _ = response;
                output = crate::json_deser::validation_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeHumanLoopError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::DescribeHumanLoopError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_human_loop_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DescribeHumanLoopOutput, crate::error::DescribeHumanLoopError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_human_loop_output::Builder::default();
        let _ = response;
        output = crate::json_deser::describe_human_loop_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::DescribeHumanLoopError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_human_loops_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListHumanLoopsOutput, crate::error::ListHumanLoopsError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::ListHumanLoopsError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListHumanLoopsError::unhandled(generic)),
    };
    Err(match error_code {
        "InternalServerException" => crate::error::ListHumanLoopsError {
            meta: generic,
            kind: crate::error::ListHumanLoopsErrorKind::InternalServerError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::internal_server_exception(response.body().as_ref(), output)
                        .map_err(crate::error::ListHumanLoopsError::unhandled)?;
                output.build()
            }),
        },
        "ResourceNotFoundException" => crate::error::ListHumanLoopsError {
            meta: generic,
            kind: crate::error::ListHumanLoopsErrorKind::ResourceNotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::resource_not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::resource_not_found_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListHumanLoopsError::unhandled)?;
                output.build()
            }),
        },
        "ThrottlingException" => crate::error::ListHumanLoopsError {
            meta: generic,
            kind: crate::error::ListHumanLoopsErrorKind::ThrottlingError({
                #[allow(unused_mut)]
                let mut output = crate::error::throttling_error::Builder::default();
                let _ = response;
                output = crate::json_deser::throttling_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListHumanLoopsError::unhandled)?;
                output.build()
            }),
        },
        "ValidationException" => crate::error::ListHumanLoopsError {
            meta: generic,
            kind: crate::error::ListHumanLoopsErrorKind::ValidationError({
                #[allow(unused_mut)]
                let mut output = crate::error::validation_error::Builder::default();
                let _ = response;
                output = crate::json_deser::validation_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListHumanLoopsError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::ListHumanLoopsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_human_loops_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListHumanLoopsOutput, crate::error::ListHumanLoopsError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_human_loops_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::list_human_loops_deser_operation(response.body().as_ref(), output)
                .map_err(crate::error::ListHumanLoopsError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_start_human_loop_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::StartHumanLoopOutput, crate::error::StartHumanLoopError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::StartHumanLoopError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::StartHumanLoopError::unhandled(generic)),
    };
    Err(match error_code {
        "ConflictException" => crate::error::StartHumanLoopError {
            meta: generic,
            kind: crate::error::StartHumanLoopErrorKind::ConflictError({
                #[allow(unused_mut)]
                let mut output = crate::error::conflict_error::Builder::default();
                let _ = response;
                output = crate::json_deser::conflict_exception(response.body().as_ref(), output)
                    .map_err(crate::error::StartHumanLoopError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerException" => crate::error::StartHumanLoopError {
            meta: generic,
            kind: crate::error::StartHumanLoopErrorKind::InternalServerError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::internal_server_exception(response.body().as_ref(), output)
                        .map_err(crate::error::StartHumanLoopError::unhandled)?;
                output.build()
            }),
        },
        "ServiceQuotaExceededException" => crate::error::StartHumanLoopError {
            meta: generic,
            kind: crate::error::StartHumanLoopErrorKind::ServiceQuotaExceededError({
                #[allow(unused_mut)]
                let mut output = crate::error::service_quota_exceeded_error::Builder::default();
                let _ = response;
                output = crate::json_deser::service_quota_exceeded_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::StartHumanLoopError::unhandled)?;
                output.build()
            }),
        },
        "ThrottlingException" => crate::error::StartHumanLoopError {
            meta: generic,
            kind: crate::error::StartHumanLoopErrorKind::ThrottlingError({
                #[allow(unused_mut)]
                let mut output = crate::error::throttling_error::Builder::default();
                let _ = response;
                output = crate::json_deser::throttling_exception(response.body().as_ref(), output)
                    .map_err(crate::error::StartHumanLoopError::unhandled)?;
                output.build()
            }),
        },
        "ValidationException" => crate::error::StartHumanLoopError {
            meta: generic,
            kind: crate::error::StartHumanLoopErrorKind::ValidationError({
                #[allow(unused_mut)]
                let mut output = crate::error::validation_error::Builder::default();
                let _ = response;
                output = crate::json_deser::validation_exception(response.body().as_ref(), output)
                    .map_err(crate::error::StartHumanLoopError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::StartHumanLoopError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_start_human_loop_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::StartHumanLoopOutput, crate::error::StartHumanLoopError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::start_human_loop_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::start_human_loop_deser_operation(response.body().as_ref(), output)
                .map_err(crate::error::StartHumanLoopError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_stop_human_loop_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::StopHumanLoopOutput, crate::error::StopHumanLoopError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::StopHumanLoopError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::StopHumanLoopError::unhandled(generic)),
    };
    Err(match error_code {
        "InternalServerException" => crate::error::StopHumanLoopError {
            meta: generic,
            kind: crate::error::StopHumanLoopErrorKind::InternalServerError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::internal_server_exception(response.body().as_ref(), output)
                        .map_err(crate::error::StopHumanLoopError::unhandled)?;
                output.build()
            }),
        },
        "ResourceNotFoundException" => crate::error::StopHumanLoopError {
            meta: generic,
            kind: crate::error::StopHumanLoopErrorKind::ResourceNotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::resource_not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::resource_not_found_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::StopHumanLoopError::unhandled)?;
                output.build()
            }),
        },
        "ThrottlingException" => crate::error::StopHumanLoopError {
            meta: generic,
            kind: crate::error::StopHumanLoopErrorKind::ThrottlingError({
                #[allow(unused_mut)]
                let mut output = crate::error::throttling_error::Builder::default();
                let _ = response;
                output = crate::json_deser::throttling_exception(response.body().as_ref(), output)
                    .map_err(crate::error::StopHumanLoopError::unhandled)?;
                output.build()
            }),
        },
        "ValidationException" => crate::error::StopHumanLoopError {
            meta: generic,
            kind: crate::error::StopHumanLoopErrorKind::ValidationError({
                #[allow(unused_mut)]
                let mut output = crate::error::validation_error::Builder::default();
                let _ = response;
                output = crate::json_deser::validation_exception(response.body().as_ref(), output)
                    .map_err(crate::error::StopHumanLoopError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::StopHumanLoopError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_stop_human_loop_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::StopHumanLoopOutput, crate::error::StopHumanLoopError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::stop_human_loop_output::Builder::default();
        let _ = response;
        output.build()
    })
}
