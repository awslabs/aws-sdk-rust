// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DeleteHumanLoopError {
    pub kind: DeleteHumanLoopErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DeleteHumanLoopErrorKind {
    InternalServerError(crate::error::InternalServerError),
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    ThrottlingError(crate::error::ThrottlingError),
    ValidationError(crate::error::ValidationError),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DeleteHumanLoopError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DeleteHumanLoopErrorKind::InternalServerError(_inner) => _inner.fmt(f),
            DeleteHumanLoopErrorKind::ResourceNotFoundError(_inner) => _inner.fmt(f),
            DeleteHumanLoopErrorKind::ThrottlingError(_inner) => _inner.fmt(f),
            DeleteHumanLoopErrorKind::ValidationError(_inner) => _inner.fmt(f),
            DeleteHumanLoopErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DeleteHumanLoopError {
    fn code(&self) -> Option<&str> {
        DeleteHumanLoopError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DeleteHumanLoopError {
    pub fn new(kind: DeleteHumanLoopErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DeleteHumanLoopErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DeleteHumanLoopErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_internal_server_error(&self) -> bool {
        matches!(&self.kind, DeleteHumanLoopErrorKind::InternalServerError(_))
    }
    pub fn is_resource_not_found_error(&self) -> bool {
        matches!(
            &self.kind,
            DeleteHumanLoopErrorKind::ResourceNotFoundError(_)
        )
    }
    pub fn is_throttling_error(&self) -> bool {
        matches!(&self.kind, DeleteHumanLoopErrorKind::ThrottlingError(_))
    }
    pub fn is_validation_error(&self) -> bool {
        matches!(&self.kind, DeleteHumanLoopErrorKind::ValidationError(_))
    }
}
impl std::error::Error for DeleteHumanLoopError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DeleteHumanLoopErrorKind::InternalServerError(_inner) => Some(_inner),
            DeleteHumanLoopErrorKind::ResourceNotFoundError(_inner) => Some(_inner),
            DeleteHumanLoopErrorKind::ThrottlingError(_inner) => Some(_inner),
            DeleteHumanLoopErrorKind::ValidationError(_inner) => Some(_inner),
            DeleteHumanLoopErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DescribeHumanLoopError {
    pub kind: DescribeHumanLoopErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeHumanLoopErrorKind {
    InternalServerError(crate::error::InternalServerError),
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    ThrottlingError(crate::error::ThrottlingError),
    ValidationError(crate::error::ValidationError),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DescribeHumanLoopError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DescribeHumanLoopErrorKind::InternalServerError(_inner) => _inner.fmt(f),
            DescribeHumanLoopErrorKind::ResourceNotFoundError(_inner) => _inner.fmt(f),
            DescribeHumanLoopErrorKind::ThrottlingError(_inner) => _inner.fmt(f),
            DescribeHumanLoopErrorKind::ValidationError(_inner) => _inner.fmt(f),
            DescribeHumanLoopErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DescribeHumanLoopError {
    fn code(&self) -> Option<&str> {
        DescribeHumanLoopError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeHumanLoopError {
    pub fn new(kind: DescribeHumanLoopErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DescribeHumanLoopErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DescribeHumanLoopErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_internal_server_error(&self) -> bool {
        matches!(
            &self.kind,
            DescribeHumanLoopErrorKind::InternalServerError(_)
        )
    }
    pub fn is_resource_not_found_error(&self) -> bool {
        matches!(
            &self.kind,
            DescribeHumanLoopErrorKind::ResourceNotFoundError(_)
        )
    }
    pub fn is_throttling_error(&self) -> bool {
        matches!(&self.kind, DescribeHumanLoopErrorKind::ThrottlingError(_))
    }
    pub fn is_validation_error(&self) -> bool {
        matches!(&self.kind, DescribeHumanLoopErrorKind::ValidationError(_))
    }
}
impl std::error::Error for DescribeHumanLoopError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DescribeHumanLoopErrorKind::InternalServerError(_inner) => Some(_inner),
            DescribeHumanLoopErrorKind::ResourceNotFoundError(_inner) => Some(_inner),
            DescribeHumanLoopErrorKind::ThrottlingError(_inner) => Some(_inner),
            DescribeHumanLoopErrorKind::ValidationError(_inner) => Some(_inner),
            DescribeHumanLoopErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ListHumanLoopsError {
    pub kind: ListHumanLoopsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ListHumanLoopsErrorKind {
    InternalServerError(crate::error::InternalServerError),
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    ThrottlingError(crate::error::ThrottlingError),
    ValidationError(crate::error::ValidationError),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ListHumanLoopsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ListHumanLoopsErrorKind::InternalServerError(_inner) => _inner.fmt(f),
            ListHumanLoopsErrorKind::ResourceNotFoundError(_inner) => _inner.fmt(f),
            ListHumanLoopsErrorKind::ThrottlingError(_inner) => _inner.fmt(f),
            ListHumanLoopsErrorKind::ValidationError(_inner) => _inner.fmt(f),
            ListHumanLoopsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ListHumanLoopsError {
    fn code(&self) -> Option<&str> {
        ListHumanLoopsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ListHumanLoopsError {
    pub fn new(kind: ListHumanLoopsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ListHumanLoopsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ListHumanLoopsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_internal_server_error(&self) -> bool {
        matches!(&self.kind, ListHumanLoopsErrorKind::InternalServerError(_))
    }
    pub fn is_resource_not_found_error(&self) -> bool {
        matches!(
            &self.kind,
            ListHumanLoopsErrorKind::ResourceNotFoundError(_)
        )
    }
    pub fn is_throttling_error(&self) -> bool {
        matches!(&self.kind, ListHumanLoopsErrorKind::ThrottlingError(_))
    }
    pub fn is_validation_error(&self) -> bool {
        matches!(&self.kind, ListHumanLoopsErrorKind::ValidationError(_))
    }
}
impl std::error::Error for ListHumanLoopsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ListHumanLoopsErrorKind::InternalServerError(_inner) => Some(_inner),
            ListHumanLoopsErrorKind::ResourceNotFoundError(_inner) => Some(_inner),
            ListHumanLoopsErrorKind::ThrottlingError(_inner) => Some(_inner),
            ListHumanLoopsErrorKind::ValidationError(_inner) => Some(_inner),
            ListHumanLoopsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct StartHumanLoopError {
    pub kind: StartHumanLoopErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum StartHumanLoopErrorKind {
    ConflictError(crate::error::ConflictError),
    InternalServerError(crate::error::InternalServerError),
    ServiceQuotaExceededError(crate::error::ServiceQuotaExceededError),
    ThrottlingError(crate::error::ThrottlingError),
    ValidationError(crate::error::ValidationError),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for StartHumanLoopError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            StartHumanLoopErrorKind::ConflictError(_inner) => _inner.fmt(f),
            StartHumanLoopErrorKind::InternalServerError(_inner) => _inner.fmt(f),
            StartHumanLoopErrorKind::ServiceQuotaExceededError(_inner) => _inner.fmt(f),
            StartHumanLoopErrorKind::ThrottlingError(_inner) => _inner.fmt(f),
            StartHumanLoopErrorKind::ValidationError(_inner) => _inner.fmt(f),
            StartHumanLoopErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for StartHumanLoopError {
    fn code(&self) -> Option<&str> {
        StartHumanLoopError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl StartHumanLoopError {
    pub fn new(kind: StartHumanLoopErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: StartHumanLoopErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: StartHumanLoopErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_conflict_error(&self) -> bool {
        matches!(&self.kind, StartHumanLoopErrorKind::ConflictError(_))
    }
    pub fn is_internal_server_error(&self) -> bool {
        matches!(&self.kind, StartHumanLoopErrorKind::InternalServerError(_))
    }
    pub fn is_service_quota_exceeded_error(&self) -> bool {
        matches!(
            &self.kind,
            StartHumanLoopErrorKind::ServiceQuotaExceededError(_)
        )
    }
    pub fn is_throttling_error(&self) -> bool {
        matches!(&self.kind, StartHumanLoopErrorKind::ThrottlingError(_))
    }
    pub fn is_validation_error(&self) -> bool {
        matches!(&self.kind, StartHumanLoopErrorKind::ValidationError(_))
    }
}
impl std::error::Error for StartHumanLoopError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            StartHumanLoopErrorKind::ConflictError(_inner) => Some(_inner),
            StartHumanLoopErrorKind::InternalServerError(_inner) => Some(_inner),
            StartHumanLoopErrorKind::ServiceQuotaExceededError(_inner) => Some(_inner),
            StartHumanLoopErrorKind::ThrottlingError(_inner) => Some(_inner),
            StartHumanLoopErrorKind::ValidationError(_inner) => Some(_inner),
            StartHumanLoopErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct StopHumanLoopError {
    pub kind: StopHumanLoopErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum StopHumanLoopErrorKind {
    InternalServerError(crate::error::InternalServerError),
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    ThrottlingError(crate::error::ThrottlingError),
    ValidationError(crate::error::ValidationError),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for StopHumanLoopError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            StopHumanLoopErrorKind::InternalServerError(_inner) => _inner.fmt(f),
            StopHumanLoopErrorKind::ResourceNotFoundError(_inner) => _inner.fmt(f),
            StopHumanLoopErrorKind::ThrottlingError(_inner) => _inner.fmt(f),
            StopHumanLoopErrorKind::ValidationError(_inner) => _inner.fmt(f),
            StopHumanLoopErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for StopHumanLoopError {
    fn code(&self) -> Option<&str> {
        StopHumanLoopError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl StopHumanLoopError {
    pub fn new(kind: StopHumanLoopErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: StopHumanLoopErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: StopHumanLoopErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_internal_server_error(&self) -> bool {
        matches!(&self.kind, StopHumanLoopErrorKind::InternalServerError(_))
    }
    pub fn is_resource_not_found_error(&self) -> bool {
        matches!(&self.kind, StopHumanLoopErrorKind::ResourceNotFoundError(_))
    }
    pub fn is_throttling_error(&self) -> bool {
        matches!(&self.kind, StopHumanLoopErrorKind::ThrottlingError(_))
    }
    pub fn is_validation_error(&self) -> bool {
        matches!(&self.kind, StopHumanLoopErrorKind::ValidationError(_))
    }
}
impl std::error::Error for StopHumanLoopError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            StopHumanLoopErrorKind::InternalServerError(_inner) => Some(_inner),
            StopHumanLoopErrorKind::ResourceNotFoundError(_inner) => Some(_inner),
            StopHumanLoopErrorKind::ThrottlingError(_inner) => Some(_inner),
            StopHumanLoopErrorKind::ValidationError(_inner) => Some(_inner),
            StopHumanLoopErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

/// <p>The
/// request isn't valid. Check the syntax and try again.</p>
#[non_exhaustive]
#[derive(serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct ValidationError {
    #[serde(rename = "Message")]
    #[serde(default)]
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ValidationError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ValidationError");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl ValidationError {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for ValidationError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ValidationError [ValidationException]")?;
        if let Some(inner_1) = &self.message {
            write!(f, ": {}", inner_1)?;
        }
        Ok(())
    }
}
impl std::error::Error for ValidationError {}
/// See [`ValidationError`](crate::error::ValidationError)
pub mod validation_error {
    /// A builder for [`ValidationError`](crate::error::ValidationError)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`ValidationError`](crate::error::ValidationError)
        pub fn build(self) -> crate::error::ValidationError {
            crate::error::ValidationError {
                message: self.message,
            }
        }
    }
}
impl ValidationError {
    /// Creates a new builder-style object to manufacture [`ValidationError`](crate::error::ValidationError)
    pub fn builder() -> crate::error::validation_error::Builder {
        crate::error::validation_error::Builder::default()
    }
}

/// <p>You exceeded
/// the
/// maximum number of requests.</p>
#[non_exhaustive]
#[derive(serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct ThrottlingError {
    #[serde(rename = "Message")]
    #[serde(default)]
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ThrottlingError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ThrottlingError");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl ThrottlingError {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for ThrottlingError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ThrottlingError [ThrottlingException]")?;
        if let Some(inner_2) = &self.message {
            write!(f, ": {}", inner_2)?;
        }
        Ok(())
    }
}
impl std::error::Error for ThrottlingError {}
/// See [`ThrottlingError`](crate::error::ThrottlingError)
pub mod throttling_error {
    /// A builder for [`ThrottlingError`](crate::error::ThrottlingError)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`ThrottlingError`](crate::error::ThrottlingError)
        pub fn build(self) -> crate::error::ThrottlingError {
            crate::error::ThrottlingError {
                message: self.message,
            }
        }
    }
}
impl ThrottlingError {
    /// Creates a new builder-style object to manufacture [`ThrottlingError`](crate::error::ThrottlingError)
    pub fn builder() -> crate::error::throttling_error::Builder {
        crate::error::throttling_error::Builder::default()
    }
}

/// <p>We couldn't find the requested resource. Check that your resources exists and were created
/// in the same AWS Region as your request, and try your request again. </p>
#[non_exhaustive]
#[derive(serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct ResourceNotFoundError {
    #[serde(rename = "Message")]
    #[serde(default)]
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ResourceNotFoundError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ResourceNotFoundError");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl ResourceNotFoundError {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for ResourceNotFoundError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ResourceNotFoundError [ResourceNotFoundException]")?;
        if let Some(inner_3) = &self.message {
            write!(f, ": {}", inner_3)?;
        }
        Ok(())
    }
}
impl std::error::Error for ResourceNotFoundError {}
/// See [`ResourceNotFoundError`](crate::error::ResourceNotFoundError)
pub mod resource_not_found_error {
    /// A builder for [`ResourceNotFoundError`](crate::error::ResourceNotFoundError)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`ResourceNotFoundError`](crate::error::ResourceNotFoundError)
        pub fn build(self) -> crate::error::ResourceNotFoundError {
            crate::error::ResourceNotFoundError {
                message: self.message,
            }
        }
    }
}
impl ResourceNotFoundError {
    /// Creates a new builder-style object to manufacture [`ResourceNotFoundError`](crate::error::ResourceNotFoundError)
    pub fn builder() -> crate::error::resource_not_found_error::Builder {
        crate::error::resource_not_found_error::Builder::default()
    }
}

/// <p>We couldn't process your request because of an issue with the server. Try again
/// later.</p>
#[non_exhaustive]
#[derive(serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct InternalServerError {
    #[serde(rename = "Message")]
    #[serde(default)]
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for InternalServerError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InternalServerError");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl InternalServerError {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for InternalServerError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "InternalServerError [InternalServerException]")?;
        if let Some(inner_4) = &self.message {
            write!(f, ": {}", inner_4)?;
        }
        Ok(())
    }
}
impl std::error::Error for InternalServerError {}
/// See [`InternalServerError`](crate::error::InternalServerError)
pub mod internal_server_error {
    /// A builder for [`InternalServerError`](crate::error::InternalServerError)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`InternalServerError`](crate::error::InternalServerError)
        pub fn build(self) -> crate::error::InternalServerError {
            crate::error::InternalServerError {
                message: self.message,
            }
        }
    }
}
impl InternalServerError {
    /// Creates a new builder-style object to manufacture [`InternalServerError`](crate::error::InternalServerError)
    pub fn builder() -> crate::error::internal_server_error::Builder {
        crate::error::internal_server_error::Builder::default()
    }
}

/// <p>You exceeded your service quota. Service quotas, also referred to as limits, are the
/// maximum number of service resources or operations for your AWS account. For a list of
/// Amazon A2I service quotes, see <a href="https://docs.aws.amazon.com/general/latest/gr/a2i.html">Amazon Augmented AI Service Quotes</a>. Delete some resources or request an increase in your
/// service quota. You can request a quota increase using Service Quotas or the AWS Support
/// Center. To request an increase, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html">AWS Service Quotas</a> in the
/// <i>AWS General Reference</i>.</p>
#[non_exhaustive]
#[derive(serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct ServiceQuotaExceededError {
    #[serde(rename = "Message")]
    #[serde(default)]
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ServiceQuotaExceededError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ServiceQuotaExceededError");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl ServiceQuotaExceededError {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for ServiceQuotaExceededError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "ServiceQuotaExceededError [ServiceQuotaExceededException]"
        )?;
        if let Some(inner_5) = &self.message {
            write!(f, ": {}", inner_5)?;
        }
        Ok(())
    }
}
impl std::error::Error for ServiceQuotaExceededError {}
/// See [`ServiceQuotaExceededError`](crate::error::ServiceQuotaExceededError)
pub mod service_quota_exceeded_error {
    /// A builder for [`ServiceQuotaExceededError`](crate::error::ServiceQuotaExceededError)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`ServiceQuotaExceededError`](crate::error::ServiceQuotaExceededError)
        pub fn build(self) -> crate::error::ServiceQuotaExceededError {
            crate::error::ServiceQuotaExceededError {
                message: self.message,
            }
        }
    }
}
impl ServiceQuotaExceededError {
    /// Creates a new builder-style object to manufacture [`ServiceQuotaExceededError`](crate::error::ServiceQuotaExceededError)
    pub fn builder() -> crate::error::service_quota_exceeded_error::Builder {
        crate::error::service_quota_exceeded_error::Builder::default()
    }
}

/// <p>Your request has the same name as another active human loop but has different input data. You cannot start two
/// human loops with the same name and different input data.</p>
#[non_exhaustive]
#[derive(serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct ConflictError {
    #[serde(rename = "Message")]
    #[serde(default)]
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ConflictError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ConflictError");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl ConflictError {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for ConflictError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ConflictError [ConflictException]")?;
        if let Some(inner_6) = &self.message {
            write!(f, ": {}", inner_6)?;
        }
        Ok(())
    }
}
impl std::error::Error for ConflictError {}
/// See [`ConflictError`](crate::error::ConflictError)
pub mod conflict_error {
    /// A builder for [`ConflictError`](crate::error::ConflictError)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`ConflictError`](crate::error::ConflictError)
        pub fn build(self) -> crate::error::ConflictError {
            crate::error::ConflictError {
                message: self.message,
            }
        }
    }
}
impl ConflictError {
    /// Creates a new builder-style object to manufacture [`ConflictError`](crate::error::ConflictError)
    pub fn builder() -> crate::error::conflict_error::Builder {
        crate::error::conflict_error::Builder::default()
    }
}
