// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Object containing details about the servers imported by Application Discovery Service </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ServerSummary {
    /// <p> Type of operating system for the servers. </p>
    #[doc(hidden)]
    pub server_os_type: std::option::Option<crate::types::ServerOsType>,
    /// <p> Number of servers. </p>
    #[doc(hidden)]
    pub count: std::option::Option<i32>,
}
impl ServerSummary {
    /// <p> Type of operating system for the servers. </p>
    pub fn server_os_type(&self) -> std::option::Option<&crate::types::ServerOsType> {
        self.server_os_type.as_ref()
    }
    /// <p> Number of servers. </p>
    pub fn count(&self) -> std::option::Option<i32> {
        self.count
    }
}
impl ServerSummary {
    /// Creates a new builder-style object to manufacture [`ServerSummary`](crate::types::ServerSummary).
    pub fn builder() -> crate::types::builders::ServerSummaryBuilder {
        crate::types::builders::ServerSummaryBuilder::default()
    }
}

/// A builder for [`ServerSummary`](crate::types::ServerSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ServerSummaryBuilder {
    pub(crate) server_os_type: std::option::Option<crate::types::ServerOsType>,
    pub(crate) count: std::option::Option<i32>,
}
impl ServerSummaryBuilder {
    /// <p> Type of operating system for the servers. </p>
    pub fn server_os_type(mut self, input: crate::types::ServerOsType) -> Self {
        self.server_os_type = Some(input);
        self
    }
    /// <p> Type of operating system for the servers. </p>
    pub fn set_server_os_type(
        mut self,
        input: std::option::Option<crate::types::ServerOsType>,
    ) -> Self {
        self.server_os_type = input;
        self
    }
    /// <p> Number of servers. </p>
    pub fn count(mut self, input: i32) -> Self {
        self.count = Some(input);
        self
    }
    /// <p> Number of servers. </p>
    pub fn set_count(mut self, input: std::option::Option<i32>) -> Self {
        self.count = input;
        self
    }
    /// Consumes the builder and constructs a [`ServerSummary`](crate::types::ServerSummary).
    pub fn build(self) -> crate::types::ServerSummary {
        crate::types::ServerSummary {
            server_os_type: self.server_os_type,
            count: self.count,
        }
    }
}
