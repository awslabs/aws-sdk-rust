// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The object containing details about database migration preferences, when you have no particular preference. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NoDatabaseMigrationPreference {
    /// <p> The target database engine for database migration preference that you specify. </p>
    #[doc(hidden)]
    pub target_database_engine:
        std::option::Option<std::vec::Vec<crate::types::TargetDatabaseEngine>>,
}
impl NoDatabaseMigrationPreference {
    /// <p> The target database engine for database migration preference that you specify. </p>
    pub fn target_database_engine(
        &self,
    ) -> std::option::Option<&[crate::types::TargetDatabaseEngine]> {
        self.target_database_engine.as_deref()
    }
}
impl NoDatabaseMigrationPreference {
    /// Creates a new builder-style object to manufacture [`NoDatabaseMigrationPreference`](crate::types::NoDatabaseMigrationPreference).
    pub fn builder() -> crate::types::builders::NoDatabaseMigrationPreferenceBuilder {
        crate::types::builders::NoDatabaseMigrationPreferenceBuilder::default()
    }
}

/// A builder for [`NoDatabaseMigrationPreference`](crate::types::NoDatabaseMigrationPreference).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NoDatabaseMigrationPreferenceBuilder {
    pub(crate) target_database_engine:
        std::option::Option<std::vec::Vec<crate::types::TargetDatabaseEngine>>,
}
impl NoDatabaseMigrationPreferenceBuilder {
    /// Appends an item to `target_database_engine`.
    ///
    /// To override the contents of this collection use [`set_target_database_engine`](Self::set_target_database_engine).
    ///
    /// <p> The target database engine for database migration preference that you specify. </p>
    pub fn target_database_engine(mut self, input: crate::types::TargetDatabaseEngine) -> Self {
        let mut v = self.target_database_engine.unwrap_or_default();
        v.push(input);
        self.target_database_engine = Some(v);
        self
    }
    /// <p> The target database engine for database migration preference that you specify. </p>
    pub fn set_target_database_engine(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TargetDatabaseEngine>>,
    ) -> Self {
        self.target_database_engine = input;
        self
    }
    /// Consumes the builder and constructs a [`NoDatabaseMigrationPreference`](crate::types::NoDatabaseMigrationPreference).
    pub fn build(self) -> crate::types::NoDatabaseMigrationPreference {
        crate::types::NoDatabaseMigrationPreference {
            target_database_engine: self.target_database_engine,
        }
    }
}
