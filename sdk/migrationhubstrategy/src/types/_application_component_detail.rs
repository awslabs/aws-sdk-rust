// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Contains detailed information about an application component. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ApplicationComponentDetail {
    /// <p> The ID of the application component. </p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p> The name of application component. </p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p> The top recommendation set for the application component. </p>
    pub recommendation_set: ::std::option::Option<crate::types::RecommendationSet>,
    /// <p> The status of analysis, if the application component has source code or an associated database. </p>
    pub analysis_status: ::std::option::Option<crate::types::SrcCodeOrDbAnalysisStatus>,
    /// <p> A detailed description of the analysis status and any failure message. </p>
    pub status_message: ::std::option::Option<::std::string::String>,
    /// <p> A list of anti-pattern severity summaries. </p>
    pub list_antipattern_severity_summary: ::std::option::Option<::std::vec::Vec<crate::types::AntipatternSeveritySummary>>,
    /// <p> Configuration details for the database associated with the application component. </p>
    pub database_config_detail: ::std::option::Option<crate::types::DatabaseConfigDetail>,
    /// <p> Details about the source code repository associated with the application component. </p>
    pub source_code_repositories: ::std::option::Option<::std::vec::Vec<crate::types::SourceCodeRepository>>,
    /// <p> The type of application component. </p>
    pub app_type: ::std::option::Option<crate::types::AppType>,
    /// <p> The application component subtype.</p>
    pub resource_sub_type: ::std::option::Option<crate::types::ResourceSubType>,
    /// <p> Indicates whether the application component has been included for server recommendation or not. </p>
    pub inclusion_status: ::std::option::Option<crate::types::InclusionStatus>,
    /// <p> The S3 bucket name and the Amazon S3 key name for the anti-pattern report. </p>
    pub antipattern_report_s3_object: ::std::option::Option<crate::types::S3Object>,
    /// <p> The status of the anti-pattern report generation.</p>
    pub antipattern_report_status: ::std::option::Option<crate::types::AntipatternReportStatus>,
    /// <p> The status message for the anti-pattern. </p>
    pub antipattern_report_status_message: ::std::option::Option<::std::string::String>,
    /// <p> OS version. </p>
    pub os_version: ::std::option::Option<::std::string::String>,
    /// <p> OS driver. </p>
    pub os_driver: ::std::option::Option<::std::string::String>,
    /// <p> The timestamp of when the application component was assessed. </p>
    pub last_analyzed_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p> The ID of the server that the application component is running on. </p>
    pub associated_server_id: ::std::option::Option<::std::string::String>,
    /// <p> Set to true if the application component is running on multiple servers.</p>
    pub more_server_association_exists: ::std::option::Option<bool>,
    /// <p>The status of the application unit.</p>
    pub runtime_status: ::std::option::Option<crate::types::RuntimeAnalysisStatus>,
    /// <p>The status message for the application unit.</p>
    pub runtime_status_message: ::std::option::Option<::std::string::String>,
    /// <p>The error in the analysis of the source code or database.</p>
    pub app_unit_error: ::std::option::Option<crate::types::AppUnitError>,
    /// <p>A list of the analysis results.</p>
    pub result_list: ::std::option::Option<::std::vec::Vec<crate::types::Result>>,
}
impl ApplicationComponentDetail {
    /// <p> The ID of the application component. </p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p> The name of application component. </p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p> The top recommendation set for the application component. </p>
    pub fn recommendation_set(&self) -> ::std::option::Option<&crate::types::RecommendationSet> {
        self.recommendation_set.as_ref()
    }
    /// <p> The status of analysis, if the application component has source code or an associated database. </p>
    pub fn analysis_status(&self) -> ::std::option::Option<&crate::types::SrcCodeOrDbAnalysisStatus> {
        self.analysis_status.as_ref()
    }
    /// <p> A detailed description of the analysis status and any failure message. </p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p> A list of anti-pattern severity summaries. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.list_antipattern_severity_summary.is_none()`.
    pub fn list_antipattern_severity_summary(&self) -> &[crate::types::AntipatternSeveritySummary] {
        self.list_antipattern_severity_summary.as_deref().unwrap_or_default()
    }
    /// <p> Configuration details for the database associated with the application component. </p>
    pub fn database_config_detail(&self) -> ::std::option::Option<&crate::types::DatabaseConfigDetail> {
        self.database_config_detail.as_ref()
    }
    /// <p> Details about the source code repository associated with the application component. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.source_code_repositories.is_none()`.
    pub fn source_code_repositories(&self) -> &[crate::types::SourceCodeRepository] {
        self.source_code_repositories.as_deref().unwrap_or_default()
    }
    /// <p> The type of application component. </p>
    pub fn app_type(&self) -> ::std::option::Option<&crate::types::AppType> {
        self.app_type.as_ref()
    }
    /// <p> The application component subtype.</p>
    pub fn resource_sub_type(&self) -> ::std::option::Option<&crate::types::ResourceSubType> {
        self.resource_sub_type.as_ref()
    }
    /// <p> Indicates whether the application component has been included for server recommendation or not. </p>
    pub fn inclusion_status(&self) -> ::std::option::Option<&crate::types::InclusionStatus> {
        self.inclusion_status.as_ref()
    }
    /// <p> The S3 bucket name and the Amazon S3 key name for the anti-pattern report. </p>
    pub fn antipattern_report_s3_object(&self) -> ::std::option::Option<&crate::types::S3Object> {
        self.antipattern_report_s3_object.as_ref()
    }
    /// <p> The status of the anti-pattern report generation.</p>
    pub fn antipattern_report_status(&self) -> ::std::option::Option<&crate::types::AntipatternReportStatus> {
        self.antipattern_report_status.as_ref()
    }
    /// <p> The status message for the anti-pattern. </p>
    pub fn antipattern_report_status_message(&self) -> ::std::option::Option<&str> {
        self.antipattern_report_status_message.as_deref()
    }
    /// <p> OS version. </p>
    pub fn os_version(&self) -> ::std::option::Option<&str> {
        self.os_version.as_deref()
    }
    /// <p> OS driver. </p>
    pub fn os_driver(&self) -> ::std::option::Option<&str> {
        self.os_driver.as_deref()
    }
    /// <p> The timestamp of when the application component was assessed. </p>
    pub fn last_analyzed_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_analyzed_timestamp.as_ref()
    }
    /// <p> The ID of the server that the application component is running on. </p>
    pub fn associated_server_id(&self) -> ::std::option::Option<&str> {
        self.associated_server_id.as_deref()
    }
    /// <p> Set to true if the application component is running on multiple servers.</p>
    pub fn more_server_association_exists(&self) -> ::std::option::Option<bool> {
        self.more_server_association_exists
    }
    /// <p>The status of the application unit.</p>
    pub fn runtime_status(&self) -> ::std::option::Option<&crate::types::RuntimeAnalysisStatus> {
        self.runtime_status.as_ref()
    }
    /// <p>The status message for the application unit.</p>
    pub fn runtime_status_message(&self) -> ::std::option::Option<&str> {
        self.runtime_status_message.as_deref()
    }
    /// <p>The error in the analysis of the source code or database.</p>
    pub fn app_unit_error(&self) -> ::std::option::Option<&crate::types::AppUnitError> {
        self.app_unit_error.as_ref()
    }
    /// <p>A list of the analysis results.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.result_list.is_none()`.
    pub fn result_list(&self) -> &[crate::types::Result] {
        self.result_list.as_deref().unwrap_or_default()
    }
}
impl ApplicationComponentDetail {
    /// Creates a new builder-style object to manufacture [`ApplicationComponentDetail`](crate::types::ApplicationComponentDetail).
    pub fn builder() -> crate::types::builders::ApplicationComponentDetailBuilder {
        crate::types::builders::ApplicationComponentDetailBuilder::default()
    }
}

/// A builder for [`ApplicationComponentDetail`](crate::types::ApplicationComponentDetail).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ApplicationComponentDetailBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) recommendation_set: ::std::option::Option<crate::types::RecommendationSet>,
    pub(crate) analysis_status: ::std::option::Option<crate::types::SrcCodeOrDbAnalysisStatus>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
    pub(crate) list_antipattern_severity_summary: ::std::option::Option<::std::vec::Vec<crate::types::AntipatternSeveritySummary>>,
    pub(crate) database_config_detail: ::std::option::Option<crate::types::DatabaseConfigDetail>,
    pub(crate) source_code_repositories: ::std::option::Option<::std::vec::Vec<crate::types::SourceCodeRepository>>,
    pub(crate) app_type: ::std::option::Option<crate::types::AppType>,
    pub(crate) resource_sub_type: ::std::option::Option<crate::types::ResourceSubType>,
    pub(crate) inclusion_status: ::std::option::Option<crate::types::InclusionStatus>,
    pub(crate) antipattern_report_s3_object: ::std::option::Option<crate::types::S3Object>,
    pub(crate) antipattern_report_status: ::std::option::Option<crate::types::AntipatternReportStatus>,
    pub(crate) antipattern_report_status_message: ::std::option::Option<::std::string::String>,
    pub(crate) os_version: ::std::option::Option<::std::string::String>,
    pub(crate) os_driver: ::std::option::Option<::std::string::String>,
    pub(crate) last_analyzed_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) associated_server_id: ::std::option::Option<::std::string::String>,
    pub(crate) more_server_association_exists: ::std::option::Option<bool>,
    pub(crate) runtime_status: ::std::option::Option<crate::types::RuntimeAnalysisStatus>,
    pub(crate) runtime_status_message: ::std::option::Option<::std::string::String>,
    pub(crate) app_unit_error: ::std::option::Option<crate::types::AppUnitError>,
    pub(crate) result_list: ::std::option::Option<::std::vec::Vec<crate::types::Result>>,
}
impl ApplicationComponentDetailBuilder {
    /// <p> The ID of the application component. </p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The ID of the application component. </p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p> The ID of the application component. </p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p> The name of application component. </p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The name of application component. </p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p> The name of application component. </p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p> The top recommendation set for the application component. </p>
    pub fn recommendation_set(mut self, input: crate::types::RecommendationSet) -> Self {
        self.recommendation_set = ::std::option::Option::Some(input);
        self
    }
    /// <p> The top recommendation set for the application component. </p>
    pub fn set_recommendation_set(mut self, input: ::std::option::Option<crate::types::RecommendationSet>) -> Self {
        self.recommendation_set = input;
        self
    }
    /// <p> The top recommendation set for the application component. </p>
    pub fn get_recommendation_set(&self) -> &::std::option::Option<crate::types::RecommendationSet> {
        &self.recommendation_set
    }
    /// <p> The status of analysis, if the application component has source code or an associated database. </p>
    pub fn analysis_status(mut self, input: crate::types::SrcCodeOrDbAnalysisStatus) -> Self {
        self.analysis_status = ::std::option::Option::Some(input);
        self
    }
    /// <p> The status of analysis, if the application component has source code or an associated database. </p>
    pub fn set_analysis_status(mut self, input: ::std::option::Option<crate::types::SrcCodeOrDbAnalysisStatus>) -> Self {
        self.analysis_status = input;
        self
    }
    /// <p> The status of analysis, if the application component has source code or an associated database. </p>
    pub fn get_analysis_status(&self) -> &::std::option::Option<crate::types::SrcCodeOrDbAnalysisStatus> {
        &self.analysis_status
    }
    /// <p> A detailed description of the analysis status and any failure message. </p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> A detailed description of the analysis status and any failure message. </p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p> A detailed description of the analysis status and any failure message. </p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// Appends an item to `list_antipattern_severity_summary`.
    ///
    /// To override the contents of this collection use [`set_list_antipattern_severity_summary`](Self::set_list_antipattern_severity_summary).
    ///
    /// <p> A list of anti-pattern severity summaries. </p>
    pub fn list_antipattern_severity_summary(mut self, input: crate::types::AntipatternSeveritySummary) -> Self {
        let mut v = self.list_antipattern_severity_summary.unwrap_or_default();
        v.push(input);
        self.list_antipattern_severity_summary = ::std::option::Option::Some(v);
        self
    }
    /// <p> A list of anti-pattern severity summaries. </p>
    pub fn set_list_antipattern_severity_summary(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::AntipatternSeveritySummary>>,
    ) -> Self {
        self.list_antipattern_severity_summary = input;
        self
    }
    /// <p> A list of anti-pattern severity summaries. </p>
    pub fn get_list_antipattern_severity_summary(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AntipatternSeveritySummary>> {
        &self.list_antipattern_severity_summary
    }
    /// <p> Configuration details for the database associated with the application component. </p>
    pub fn database_config_detail(mut self, input: crate::types::DatabaseConfigDetail) -> Self {
        self.database_config_detail = ::std::option::Option::Some(input);
        self
    }
    /// <p> Configuration details for the database associated with the application component. </p>
    pub fn set_database_config_detail(mut self, input: ::std::option::Option<crate::types::DatabaseConfigDetail>) -> Self {
        self.database_config_detail = input;
        self
    }
    /// <p> Configuration details for the database associated with the application component. </p>
    pub fn get_database_config_detail(&self) -> &::std::option::Option<crate::types::DatabaseConfigDetail> {
        &self.database_config_detail
    }
    /// Appends an item to `source_code_repositories`.
    ///
    /// To override the contents of this collection use [`set_source_code_repositories`](Self::set_source_code_repositories).
    ///
    /// <p> Details about the source code repository associated with the application component. </p>
    pub fn source_code_repositories(mut self, input: crate::types::SourceCodeRepository) -> Self {
        let mut v = self.source_code_repositories.unwrap_or_default();
        v.push(input);
        self.source_code_repositories = ::std::option::Option::Some(v);
        self
    }
    /// <p> Details about the source code repository associated with the application component. </p>
    pub fn set_source_code_repositories(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SourceCodeRepository>>) -> Self {
        self.source_code_repositories = input;
        self
    }
    /// <p> Details about the source code repository associated with the application component. </p>
    pub fn get_source_code_repositories(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SourceCodeRepository>> {
        &self.source_code_repositories
    }
    /// <p> The type of application component. </p>
    pub fn app_type(mut self, input: crate::types::AppType) -> Self {
        self.app_type = ::std::option::Option::Some(input);
        self
    }
    /// <p> The type of application component. </p>
    pub fn set_app_type(mut self, input: ::std::option::Option<crate::types::AppType>) -> Self {
        self.app_type = input;
        self
    }
    /// <p> The type of application component. </p>
    pub fn get_app_type(&self) -> &::std::option::Option<crate::types::AppType> {
        &self.app_type
    }
    /// <p> The application component subtype.</p>
    pub fn resource_sub_type(mut self, input: crate::types::ResourceSubType) -> Self {
        self.resource_sub_type = ::std::option::Option::Some(input);
        self
    }
    /// <p> The application component subtype.</p>
    pub fn set_resource_sub_type(mut self, input: ::std::option::Option<crate::types::ResourceSubType>) -> Self {
        self.resource_sub_type = input;
        self
    }
    /// <p> The application component subtype.</p>
    pub fn get_resource_sub_type(&self) -> &::std::option::Option<crate::types::ResourceSubType> {
        &self.resource_sub_type
    }
    /// <p> Indicates whether the application component has been included for server recommendation or not. </p>
    pub fn inclusion_status(mut self, input: crate::types::InclusionStatus) -> Self {
        self.inclusion_status = ::std::option::Option::Some(input);
        self
    }
    /// <p> Indicates whether the application component has been included for server recommendation or not. </p>
    pub fn set_inclusion_status(mut self, input: ::std::option::Option<crate::types::InclusionStatus>) -> Self {
        self.inclusion_status = input;
        self
    }
    /// <p> Indicates whether the application component has been included for server recommendation or not. </p>
    pub fn get_inclusion_status(&self) -> &::std::option::Option<crate::types::InclusionStatus> {
        &self.inclusion_status
    }
    /// <p> The S3 bucket name and the Amazon S3 key name for the anti-pattern report. </p>
    pub fn antipattern_report_s3_object(mut self, input: crate::types::S3Object) -> Self {
        self.antipattern_report_s3_object = ::std::option::Option::Some(input);
        self
    }
    /// <p> The S3 bucket name and the Amazon S3 key name for the anti-pattern report. </p>
    pub fn set_antipattern_report_s3_object(mut self, input: ::std::option::Option<crate::types::S3Object>) -> Self {
        self.antipattern_report_s3_object = input;
        self
    }
    /// <p> The S3 bucket name and the Amazon S3 key name for the anti-pattern report. </p>
    pub fn get_antipattern_report_s3_object(&self) -> &::std::option::Option<crate::types::S3Object> {
        &self.antipattern_report_s3_object
    }
    /// <p> The status of the anti-pattern report generation.</p>
    pub fn antipattern_report_status(mut self, input: crate::types::AntipatternReportStatus) -> Self {
        self.antipattern_report_status = ::std::option::Option::Some(input);
        self
    }
    /// <p> The status of the anti-pattern report generation.</p>
    pub fn set_antipattern_report_status(mut self, input: ::std::option::Option<crate::types::AntipatternReportStatus>) -> Self {
        self.antipattern_report_status = input;
        self
    }
    /// <p> The status of the anti-pattern report generation.</p>
    pub fn get_antipattern_report_status(&self) -> &::std::option::Option<crate::types::AntipatternReportStatus> {
        &self.antipattern_report_status
    }
    /// <p> The status message for the anti-pattern. </p>
    pub fn antipattern_report_status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.antipattern_report_status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The status message for the anti-pattern. </p>
    pub fn set_antipattern_report_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.antipattern_report_status_message = input;
        self
    }
    /// <p> The status message for the anti-pattern. </p>
    pub fn get_antipattern_report_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.antipattern_report_status_message
    }
    /// <p> OS version. </p>
    pub fn os_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.os_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> OS version. </p>
    pub fn set_os_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.os_version = input;
        self
    }
    /// <p> OS version. </p>
    pub fn get_os_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.os_version
    }
    /// <p> OS driver. </p>
    pub fn os_driver(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.os_driver = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> OS driver. </p>
    pub fn set_os_driver(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.os_driver = input;
        self
    }
    /// <p> OS driver. </p>
    pub fn get_os_driver(&self) -> &::std::option::Option<::std::string::String> {
        &self.os_driver
    }
    /// <p> The timestamp of when the application component was assessed. </p>
    pub fn last_analyzed_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_analyzed_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p> The timestamp of when the application component was assessed. </p>
    pub fn set_last_analyzed_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_analyzed_timestamp = input;
        self
    }
    /// <p> The timestamp of when the application component was assessed. </p>
    pub fn get_last_analyzed_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_analyzed_timestamp
    }
    /// <p> The ID of the server that the application component is running on. </p>
    pub fn associated_server_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.associated_server_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The ID of the server that the application component is running on. </p>
    pub fn set_associated_server_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.associated_server_id = input;
        self
    }
    /// <p> The ID of the server that the application component is running on. </p>
    pub fn get_associated_server_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.associated_server_id
    }
    /// <p> Set to true if the application component is running on multiple servers.</p>
    pub fn more_server_association_exists(mut self, input: bool) -> Self {
        self.more_server_association_exists = ::std::option::Option::Some(input);
        self
    }
    /// <p> Set to true if the application component is running on multiple servers.</p>
    pub fn set_more_server_association_exists(mut self, input: ::std::option::Option<bool>) -> Self {
        self.more_server_association_exists = input;
        self
    }
    /// <p> Set to true if the application component is running on multiple servers.</p>
    pub fn get_more_server_association_exists(&self) -> &::std::option::Option<bool> {
        &self.more_server_association_exists
    }
    /// <p>The status of the application unit.</p>
    pub fn runtime_status(mut self, input: crate::types::RuntimeAnalysisStatus) -> Self {
        self.runtime_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the application unit.</p>
    pub fn set_runtime_status(mut self, input: ::std::option::Option<crate::types::RuntimeAnalysisStatus>) -> Self {
        self.runtime_status = input;
        self
    }
    /// <p>The status of the application unit.</p>
    pub fn get_runtime_status(&self) -> &::std::option::Option<crate::types::RuntimeAnalysisStatus> {
        &self.runtime_status
    }
    /// <p>The status message for the application unit.</p>
    pub fn runtime_status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.runtime_status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status message for the application unit.</p>
    pub fn set_runtime_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.runtime_status_message = input;
        self
    }
    /// <p>The status message for the application unit.</p>
    pub fn get_runtime_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.runtime_status_message
    }
    /// <p>The error in the analysis of the source code or database.</p>
    pub fn app_unit_error(mut self, input: crate::types::AppUnitError) -> Self {
        self.app_unit_error = ::std::option::Option::Some(input);
        self
    }
    /// <p>The error in the analysis of the source code or database.</p>
    pub fn set_app_unit_error(mut self, input: ::std::option::Option<crate::types::AppUnitError>) -> Self {
        self.app_unit_error = input;
        self
    }
    /// <p>The error in the analysis of the source code or database.</p>
    pub fn get_app_unit_error(&self) -> &::std::option::Option<crate::types::AppUnitError> {
        &self.app_unit_error
    }
    /// Appends an item to `result_list`.
    ///
    /// To override the contents of this collection use [`set_result_list`](Self::set_result_list).
    ///
    /// <p>A list of the analysis results.</p>
    pub fn result_list(mut self, input: crate::types::Result) -> Self {
        let mut v = self.result_list.unwrap_or_default();
        v.push(input);
        self.result_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of the analysis results.</p>
    pub fn set_result_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Result>>) -> Self {
        self.result_list = input;
        self
    }
    /// <p>A list of the analysis results.</p>
    pub fn get_result_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Result>> {
        &self.result_list
    }
    /// Consumes the builder and constructs a [`ApplicationComponentDetail`](crate::types::ApplicationComponentDetail).
    pub fn build(self) -> crate::types::ApplicationComponentDetail {
        crate::types::ApplicationComponentDetail {
            id: self.id,
            name: self.name,
            recommendation_set: self.recommendation_set,
            analysis_status: self.analysis_status,
            status_message: self.status_message,
            list_antipattern_severity_summary: self.list_antipattern_severity_summary,
            database_config_detail: self.database_config_detail,
            source_code_repositories: self.source_code_repositories,
            app_type: self.app_type,
            resource_sub_type: self.resource_sub_type,
            inclusion_status: self.inclusion_status,
            antipattern_report_s3_object: self.antipattern_report_s3_object,
            antipattern_report_status: self.antipattern_report_status,
            antipattern_report_status_message: self.antipattern_report_status_message,
            os_version: self.os_version,
            os_driver: self.os_driver,
            last_analyzed_timestamp: self.last_analyzed_timestamp,
            associated_server_id: self.associated_server_id,
            more_server_association_exists: self.more_server_association_exists,
            runtime_status: self.runtime_status,
            runtime_status_message: self.runtime_status_message,
            app_unit_error: self.app_unit_error,
            result_list: self.result_list,
        }
    }
}
