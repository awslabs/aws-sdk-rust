// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Information about all the available strategy options for migrating and modernizing an application component. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StrategyOption {
    /// <p> Type of transformation. For example, Rehost, Replatform, and so on. </p>
    #[doc(hidden)]
    pub strategy: std::option::Option<crate::types::Strategy>,
    /// <p> The name of the tool that can be used to transform an application component using this strategy. </p>
    #[doc(hidden)]
    pub tool_name: std::option::Option<crate::types::TransformationToolName>,
    /// <p> Destination information about where the application component can migrate to. For example, <code>EC2</code>, <code>ECS</code>, and so on. </p>
    #[doc(hidden)]
    pub target_destination: std::option::Option<crate::types::TargetDestination>,
    /// <p> Indicates if a specific strategy is preferred for the application component. </p>
    #[doc(hidden)]
    pub is_preferred: std::option::Option<bool>,
}
impl StrategyOption {
    /// <p> Type of transformation. For example, Rehost, Replatform, and so on. </p>
    pub fn strategy(&self) -> std::option::Option<&crate::types::Strategy> {
        self.strategy.as_ref()
    }
    /// <p> The name of the tool that can be used to transform an application component using this strategy. </p>
    pub fn tool_name(&self) -> std::option::Option<&crate::types::TransformationToolName> {
        self.tool_name.as_ref()
    }
    /// <p> Destination information about where the application component can migrate to. For example, <code>EC2</code>, <code>ECS</code>, and so on. </p>
    pub fn target_destination(&self) -> std::option::Option<&crate::types::TargetDestination> {
        self.target_destination.as_ref()
    }
    /// <p> Indicates if a specific strategy is preferred for the application component. </p>
    pub fn is_preferred(&self) -> std::option::Option<bool> {
        self.is_preferred
    }
}
impl StrategyOption {
    /// Creates a new builder-style object to manufacture [`StrategyOption`](crate::types::StrategyOption).
    pub fn builder() -> crate::types::builders::StrategyOptionBuilder {
        crate::types::builders::StrategyOptionBuilder::default()
    }
}

/// A builder for [`StrategyOption`](crate::types::StrategyOption).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StrategyOptionBuilder {
    pub(crate) strategy: std::option::Option<crate::types::Strategy>,
    pub(crate) tool_name: std::option::Option<crate::types::TransformationToolName>,
    pub(crate) target_destination: std::option::Option<crate::types::TargetDestination>,
    pub(crate) is_preferred: std::option::Option<bool>,
}
impl StrategyOptionBuilder {
    /// <p> Type of transformation. For example, Rehost, Replatform, and so on. </p>
    pub fn strategy(mut self, input: crate::types::Strategy) -> Self {
        self.strategy = Some(input);
        self
    }
    /// <p> Type of transformation. For example, Rehost, Replatform, and so on. </p>
    pub fn set_strategy(mut self, input: std::option::Option<crate::types::Strategy>) -> Self {
        self.strategy = input;
        self
    }
    /// <p> The name of the tool that can be used to transform an application component using this strategy. </p>
    pub fn tool_name(mut self, input: crate::types::TransformationToolName) -> Self {
        self.tool_name = Some(input);
        self
    }
    /// <p> The name of the tool that can be used to transform an application component using this strategy. </p>
    pub fn set_tool_name(
        mut self,
        input: std::option::Option<crate::types::TransformationToolName>,
    ) -> Self {
        self.tool_name = input;
        self
    }
    /// <p> Destination information about where the application component can migrate to. For example, <code>EC2</code>, <code>ECS</code>, and so on. </p>
    pub fn target_destination(mut self, input: crate::types::TargetDestination) -> Self {
        self.target_destination = Some(input);
        self
    }
    /// <p> Destination information about where the application component can migrate to. For example, <code>EC2</code>, <code>ECS</code>, and so on. </p>
    pub fn set_target_destination(
        mut self,
        input: std::option::Option<crate::types::TargetDestination>,
    ) -> Self {
        self.target_destination = input;
        self
    }
    /// <p> Indicates if a specific strategy is preferred for the application component. </p>
    pub fn is_preferred(mut self, input: bool) -> Self {
        self.is_preferred = Some(input);
        self
    }
    /// <p> Indicates if a specific strategy is preferred for the application component. </p>
    pub fn set_is_preferred(mut self, input: std::option::Option<bool>) -> Self {
        self.is_preferred = input;
        self
    }
    /// Consumes the builder and constructs a [`StrategyOption`](crate::types::StrategyOption).
    pub fn build(self) -> crate::types::StrategyOption {
        crate::types::StrategyOption {
            strategy: self.strategy,
            tool_name: self.tool_name,
            target_destination: self.target_destination,
            is_preferred: self.is_preferred,
        }
    }
}
