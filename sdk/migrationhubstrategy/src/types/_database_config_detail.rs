// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Configuration information used for assessing databases. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DatabaseConfigDetail {
    /// <p> AWS Secrets Manager key that holds the credentials that you use to connect to a database. </p>
    #[doc(hidden)]
    pub secret_name: std::option::Option<std::string::String>,
}
impl DatabaseConfigDetail {
    /// <p> AWS Secrets Manager key that holds the credentials that you use to connect to a database. </p>
    pub fn secret_name(&self) -> std::option::Option<&str> {
        self.secret_name.as_deref()
    }
}
impl DatabaseConfigDetail {
    /// Creates a new builder-style object to manufacture [`DatabaseConfigDetail`](crate::types::DatabaseConfigDetail).
    pub fn builder() -> crate::types::builders::DatabaseConfigDetailBuilder {
        crate::types::builders::DatabaseConfigDetailBuilder::default()
    }
}

/// A builder for [`DatabaseConfigDetail`](crate::types::DatabaseConfigDetail).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DatabaseConfigDetailBuilder {
    pub(crate) secret_name: std::option::Option<std::string::String>,
}
impl DatabaseConfigDetailBuilder {
    /// <p> AWS Secrets Manager key that holds the credentials that you use to connect to a database. </p>
    pub fn secret_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.secret_name = Some(input.into());
        self
    }
    /// <p> AWS Secrets Manager key that holds the credentials that you use to connect to a database. </p>
    pub fn set_secret_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.secret_name = input;
        self
    }
    /// Consumes the builder and constructs a [`DatabaseConfigDetail`](crate::types::DatabaseConfigDetail).
    pub fn build(self) -> crate::types::DatabaseConfigDetail {
        crate::types::DatabaseConfigDetail {
            secret_name: self.secret_name,
        }
    }
}
