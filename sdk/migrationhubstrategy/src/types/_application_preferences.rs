// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Application preferences that you specify. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ApplicationPreferences {
    /// <p> Application preferences that you specify to prefer managed environment. </p>
    #[doc(hidden)]
    pub management_preference: std::option::Option<crate::types::ManagementPreference>,
}
impl ApplicationPreferences {
    /// <p> Application preferences that you specify to prefer managed environment. </p>
    pub fn management_preference(
        &self,
    ) -> std::option::Option<&crate::types::ManagementPreference> {
        self.management_preference.as_ref()
    }
}
impl ApplicationPreferences {
    /// Creates a new builder-style object to manufacture [`ApplicationPreferences`](crate::types::ApplicationPreferences).
    pub fn builder() -> crate::types::builders::ApplicationPreferencesBuilder {
        crate::types::builders::ApplicationPreferencesBuilder::default()
    }
}

/// A builder for [`ApplicationPreferences`](crate::types::ApplicationPreferences).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ApplicationPreferencesBuilder {
    pub(crate) management_preference: std::option::Option<crate::types::ManagementPreference>,
}
impl ApplicationPreferencesBuilder {
    /// <p> Application preferences that you specify to prefer managed environment. </p>
    pub fn management_preference(mut self, input: crate::types::ManagementPreference) -> Self {
        self.management_preference = Some(input);
        self
    }
    /// <p> Application preferences that you specify to prefer managed environment. </p>
    pub fn set_management_preference(
        mut self,
        input: std::option::Option<crate::types::ManagementPreference>,
    ) -> Self {
        self.management_preference = input;
        self
    }
    /// Consumes the builder and constructs a [`ApplicationPreferences`](crate::types::ApplicationPreferences).
    pub fn build(self) -> crate::types::ApplicationPreferences {
        crate::types::ApplicationPreferences {
            management_preference: self.management_preference,
        }
    }
}
