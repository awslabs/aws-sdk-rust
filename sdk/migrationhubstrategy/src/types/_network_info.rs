// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Information about the server's network for which the assessment was run. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NetworkInfo {
    /// <p> Information about the name of the interface of the server for which the assessment was run. </p>
    pub interface_name: ::std::string::String,
    /// <p> Information about the IP address of the server for which the assessment was run. </p>
    pub ip_address: ::std::string::String,
    /// <p> Information about the MAC address of the server for which the assessment was run. </p>
    pub mac_address: ::std::string::String,
    /// <p> Information about the subnet mask of the server for which the assessment was run. </p>
    pub net_mask: ::std::string::String,
}
impl NetworkInfo {
    /// <p> Information about the name of the interface of the server for which the assessment was run. </p>
    pub fn interface_name(&self) -> &str {
        use std::ops::Deref;
        self.interface_name.deref()
    }
    /// <p> Information about the IP address of the server for which the assessment was run. </p>
    pub fn ip_address(&self) -> &str {
        use std::ops::Deref;
        self.ip_address.deref()
    }
    /// <p> Information about the MAC address of the server for which the assessment was run. </p>
    pub fn mac_address(&self) -> &str {
        use std::ops::Deref;
        self.mac_address.deref()
    }
    /// <p> Information about the subnet mask of the server for which the assessment was run. </p>
    pub fn net_mask(&self) -> &str {
        use std::ops::Deref;
        self.net_mask.deref()
    }
}
impl NetworkInfo {
    /// Creates a new builder-style object to manufacture [`NetworkInfo`](crate::types::NetworkInfo).
    pub fn builder() -> crate::types::builders::NetworkInfoBuilder {
        crate::types::builders::NetworkInfoBuilder::default()
    }
}

/// A builder for [`NetworkInfo`](crate::types::NetworkInfo).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct NetworkInfoBuilder {
    pub(crate) interface_name: ::std::option::Option<::std::string::String>,
    pub(crate) ip_address: ::std::option::Option<::std::string::String>,
    pub(crate) mac_address: ::std::option::Option<::std::string::String>,
    pub(crate) net_mask: ::std::option::Option<::std::string::String>,
}
impl NetworkInfoBuilder {
    /// <p> Information about the name of the interface of the server for which the assessment was run. </p>
    /// This field is required.
    pub fn interface_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.interface_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> Information about the name of the interface of the server for which the assessment was run. </p>
    pub fn set_interface_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.interface_name = input;
        self
    }
    /// <p> Information about the name of the interface of the server for which the assessment was run. </p>
    pub fn get_interface_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.interface_name
    }
    /// <p> Information about the IP address of the server for which the assessment was run. </p>
    /// This field is required.
    pub fn ip_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ip_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> Information about the IP address of the server for which the assessment was run. </p>
    pub fn set_ip_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ip_address = input;
        self
    }
    /// <p> Information about the IP address of the server for which the assessment was run. </p>
    pub fn get_ip_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.ip_address
    }
    /// <p> Information about the MAC address of the server for which the assessment was run. </p>
    /// This field is required.
    pub fn mac_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.mac_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> Information about the MAC address of the server for which the assessment was run. </p>
    pub fn set_mac_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.mac_address = input;
        self
    }
    /// <p> Information about the MAC address of the server for which the assessment was run. </p>
    pub fn get_mac_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.mac_address
    }
    /// <p> Information about the subnet mask of the server for which the assessment was run. </p>
    /// This field is required.
    pub fn net_mask(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.net_mask = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> Information about the subnet mask of the server for which the assessment was run. </p>
    pub fn set_net_mask(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.net_mask = input;
        self
    }
    /// <p> Information about the subnet mask of the server for which the assessment was run. </p>
    pub fn get_net_mask(&self) -> &::std::option::Option<::std::string::String> {
        &self.net_mask
    }
    /// Consumes the builder and constructs a [`NetworkInfo`](crate::types::NetworkInfo).
    /// This method will fail if any of the following fields are not set:
    /// - [`interface_name`](crate::types::builders::NetworkInfoBuilder::interface_name)
    /// - [`ip_address`](crate::types::builders::NetworkInfoBuilder::ip_address)
    /// - [`mac_address`](crate::types::builders::NetworkInfoBuilder::mac_address)
    /// - [`net_mask`](crate::types::builders::NetworkInfoBuilder::net_mask)
    pub fn build(self) -> ::std::result::Result<crate::types::NetworkInfo, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::NetworkInfo {
            interface_name: self.interface_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "interface_name",
                    "interface_name was not specified but it is required when building NetworkInfo",
                )
            })?,
            ip_address: self.ip_address.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "ip_address",
                    "ip_address was not specified but it is required when building NetworkInfo",
                )
            })?,
            mac_address: self.mac_address.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "mac_address",
                    "mac_address was not specified but it is required when building NetworkInfo",
                )
            })?,
            net_mask: self.net_mask.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "net_mask",
                    "net_mask was not specified but it is required when building NetworkInfo",
                )
            })?,
        })
    }
}
