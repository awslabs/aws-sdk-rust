// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `AppType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let apptype = unimplemented!();
/// match apptype {
///     AppType::Cassandra => { /* ... */ },
///     AppType::Db2 => { /* ... */ },
///     AppType::DotNetFramework => { /* ... */ },
///     AppType::Dotnet => { /* ... */ },
///     AppType::Dotnetcore => { /* ... */ },
///     AppType::Websphere => { /* ... */ },
///     AppType::Iis => { /* ... */ },
///     AppType::Jboss => { /* ... */ },
///     AppType::Java => { /* ... */ },
///     AppType::Mariadb => { /* ... */ },
///     AppType::Mongodb => { /* ... */ },
///     AppType::Mysql => { /* ... */ },
///     AppType::Oracle => { /* ... */ },
///     AppType::Weblogic => { /* ... */ },
///     AppType::Other => { /* ... */ },
///     AppType::Postgresqlserver => { /* ... */ },
///     AppType::SqlServer => { /* ... */ },
///     AppType::Spring => { /* ... */ },
///     AppType::Sybase => { /* ... */ },
///     AppType::Tomcat => { /* ... */ },
///     AppType::UnknownValue => { /* ... */ },
///     AppType::Visualbasic => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `apptype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `AppType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `AppType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `AppType::NewFeature` is defined.
/// Specifically, when `apptype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `AppType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
/// _Note: `AppType::Unknown` has been renamed to `::UnknownValue`._
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum AppType {
    #[allow(missing_docs)] // documentation missing in model
    Cassandra,
    #[allow(missing_docs)] // documentation missing in model
    Db2,
    #[allow(missing_docs)] // documentation missing in model
    DotNetFramework,
    #[allow(missing_docs)] // documentation missing in model
    Dotnet,
    #[allow(missing_docs)] // documentation missing in model
    Dotnetcore,
    #[allow(missing_docs)] // documentation missing in model
    Websphere,
    #[allow(missing_docs)] // documentation missing in model
    Iis,
    #[allow(missing_docs)] // documentation missing in model
    Jboss,
    #[allow(missing_docs)] // documentation missing in model
    Java,
    #[allow(missing_docs)] // documentation missing in model
    Mariadb,
    #[allow(missing_docs)] // documentation missing in model
    Mongodb,
    #[allow(missing_docs)] // documentation missing in model
    Mysql,
    #[allow(missing_docs)] // documentation missing in model
    Oracle,
    #[allow(missing_docs)] // documentation missing in model
    Weblogic,
    #[allow(missing_docs)] // documentation missing in model
    Other,
    #[allow(missing_docs)] // documentation missing in model
    Postgresqlserver,
    #[allow(missing_docs)] // documentation missing in model
    SqlServer,
    #[allow(missing_docs)] // documentation missing in model
    Spring,
    #[allow(missing_docs)] // documentation missing in model
    Sybase,
    #[allow(missing_docs)] // documentation missing in model
    Tomcat,
    /// _Note: `::Unknown` has been renamed to `::UnknownValue`._
    UnknownValue,
    #[allow(missing_docs)] // documentation missing in model
    Visualbasic,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for AppType {
    fn from(s: &str) -> Self {
        match s {
            "Cassandra" => AppType::Cassandra,
            "DB2" => AppType::Db2,
            "DotNetFramework" => AppType::DotNetFramework,
            "Dotnet" => AppType::Dotnet,
            "DotnetCore" => AppType::Dotnetcore,
            "IBM WebSphere" => AppType::Websphere,
            "IIS" => AppType::Iis,
            "JBoss" => AppType::Jboss,
            "Java" => AppType::Java,
            "Maria DB" => AppType::Mariadb,
            "Mongo DB" => AppType::Mongodb,
            "MySQL" => AppType::Mysql,
            "Oracle" => AppType::Oracle,
            "Oracle WebLogic" => AppType::Weblogic,
            "Other" => AppType::Other,
            "PostgreSQLServer" => AppType::Postgresqlserver,
            "SQLServer" => AppType::SqlServer,
            "Spring" => AppType::Spring,
            "Sybase" => AppType::Sybase,
            "Tomcat" => AppType::Tomcat,
            "Unknown" => AppType::UnknownValue,
            "Visual Basic" => AppType::Visualbasic,
            other => AppType::Unknown(crate::primitives::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for AppType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(AppType::from(s))
    }
}
impl AppType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            AppType::Cassandra => "Cassandra",
            AppType::Db2 => "DB2",
            AppType::DotNetFramework => "DotNetFramework",
            AppType::Dotnet => "Dotnet",
            AppType::Dotnetcore => "DotnetCore",
            AppType::Websphere => "IBM WebSphere",
            AppType::Iis => "IIS",
            AppType::Jboss => "JBoss",
            AppType::Java => "Java",
            AppType::Mariadb => "Maria DB",
            AppType::Mongodb => "Mongo DB",
            AppType::Mysql => "MySQL",
            AppType::Oracle => "Oracle",
            AppType::Weblogic => "Oracle WebLogic",
            AppType::Other => "Other",
            AppType::Postgresqlserver => "PostgreSQLServer",
            AppType::SqlServer => "SQLServer",
            AppType::Spring => "Spring",
            AppType::Sybase => "Sybase",
            AppType::Tomcat => "Tomcat",
            AppType::UnknownValue => "Unknown",
            AppType::Visualbasic => "Visual Basic",
            AppType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "Cassandra",
            "DB2",
            "DotNetFramework",
            "Dotnet",
            "DotnetCore",
            "IBM WebSphere",
            "IIS",
            "JBoss",
            "Java",
            "Maria DB",
            "Mongo DB",
            "MySQL",
            "Oracle",
            "Oracle WebLogic",
            "Other",
            "PostgreSQLServer",
            "SQLServer",
            "Spring",
            "Sybase",
            "Tomcat",
            "Unknown",
            "Visual Basic",
        ]
    }
}
impl AsRef<str> for AppType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
