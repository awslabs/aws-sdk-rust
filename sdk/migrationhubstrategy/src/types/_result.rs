// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The error in server analysis.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Result {
    /// <p>The error in server analysis.</p>
    pub analysis_type: ::std::option::Option<crate::types::AnalysisType>,
    /// <p>The error in server analysis.</p>
    pub analysis_status: ::std::option::Option<crate::types::AnalysisStatusUnion>,
    /// <p>The error in server analysis.</p>
    pub status_message: ::std::option::Option<::std::string::String>,
    /// <p>The error in server analysis.</p>
    pub antipattern_report_result_list: ::std::option::Option<::std::vec::Vec<crate::types::AntipatternReportResult>>,
}
impl Result {
    /// <p>The error in server analysis.</p>
    pub fn analysis_type(&self) -> ::std::option::Option<&crate::types::AnalysisType> {
        self.analysis_type.as_ref()
    }
    /// <p>The error in server analysis.</p>
    pub fn analysis_status(&self) -> ::std::option::Option<&crate::types::AnalysisStatusUnion> {
        self.analysis_status.as_ref()
    }
    /// <p>The error in server analysis.</p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The error in server analysis.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.antipattern_report_result_list.is_none()`.
    pub fn antipattern_report_result_list(&self) -> &[crate::types::AntipatternReportResult] {
        self.antipattern_report_result_list.as_deref().unwrap_or_default()
    }
}
impl Result {
    /// Creates a new builder-style object to manufacture [`Result`](crate::types::Result).
    pub fn builder() -> crate::types::builders::ResultBuilder {
        crate::types::builders::ResultBuilder::default()
    }
}

/// A builder for [`Result`](crate::types::Result).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ResultBuilder {
    pub(crate) analysis_type: ::std::option::Option<crate::types::AnalysisType>,
    pub(crate) analysis_status: ::std::option::Option<crate::types::AnalysisStatusUnion>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
    pub(crate) antipattern_report_result_list: ::std::option::Option<::std::vec::Vec<crate::types::AntipatternReportResult>>,
}
impl ResultBuilder {
    /// <p>The error in server analysis.</p>
    pub fn analysis_type(mut self, input: crate::types::AnalysisType) -> Self {
        self.analysis_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The error in server analysis.</p>
    pub fn set_analysis_type(mut self, input: ::std::option::Option<crate::types::AnalysisType>) -> Self {
        self.analysis_type = input;
        self
    }
    /// <p>The error in server analysis.</p>
    pub fn get_analysis_type(&self) -> &::std::option::Option<crate::types::AnalysisType> {
        &self.analysis_type
    }
    /// <p>The error in server analysis.</p>
    pub fn analysis_status(mut self, input: crate::types::AnalysisStatusUnion) -> Self {
        self.analysis_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The error in server analysis.</p>
    pub fn set_analysis_status(mut self, input: ::std::option::Option<crate::types::AnalysisStatusUnion>) -> Self {
        self.analysis_status = input;
        self
    }
    /// <p>The error in server analysis.</p>
    pub fn get_analysis_status(&self) -> &::std::option::Option<crate::types::AnalysisStatusUnion> {
        &self.analysis_status
    }
    /// <p>The error in server analysis.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The error in server analysis.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>The error in server analysis.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// Appends an item to `antipattern_report_result_list`.
    ///
    /// To override the contents of this collection use [`set_antipattern_report_result_list`](Self::set_antipattern_report_result_list).
    ///
    /// <p>The error in server analysis.</p>
    pub fn antipattern_report_result_list(mut self, input: crate::types::AntipatternReportResult) -> Self {
        let mut v = self.antipattern_report_result_list.unwrap_or_default();
        v.push(input);
        self.antipattern_report_result_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>The error in server analysis.</p>
    pub fn set_antipattern_report_result_list(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::AntipatternReportResult>>,
    ) -> Self {
        self.antipattern_report_result_list = input;
        self
    }
    /// <p>The error in server analysis.</p>
    pub fn get_antipattern_report_result_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AntipatternReportResult>> {
        &self.antipattern_report_result_list
    }
    /// Consumes the builder and constructs a [`Result`](crate::types::Result).
    pub fn build(self) -> crate::types::Result {
        crate::types::Result {
            analysis_type: self.analysis_type,
            analysis_status: self.analysis_status,
            status_message: self.status_message,
            antipattern_report_result_list: self.antipattern_report_result_list,
        }
    }
}
