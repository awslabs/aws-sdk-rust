// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Information about the server that hosts application components. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SystemInfo {
    /// <p> Operating system corresponding to a server. </p>
    #[doc(hidden)]
    pub os_info: std::option::Option<crate::types::OsInfo>,
    /// <p> File system type for the server. </p>
    #[doc(hidden)]
    pub file_system_type: std::option::Option<std::string::String>,
    /// <p> Networking information related to a server. </p>
    #[doc(hidden)]
    pub network_info_list: std::option::Option<std::vec::Vec<crate::types::NetworkInfo>>,
    /// <p> CPU architecture type for the server. </p>
    #[doc(hidden)]
    pub cpu_architecture: std::option::Option<std::string::String>,
}
impl SystemInfo {
    /// <p> Operating system corresponding to a server. </p>
    pub fn os_info(&self) -> std::option::Option<&crate::types::OsInfo> {
        self.os_info.as_ref()
    }
    /// <p> File system type for the server. </p>
    pub fn file_system_type(&self) -> std::option::Option<&str> {
        self.file_system_type.as_deref()
    }
    /// <p> Networking information related to a server. </p>
    pub fn network_info_list(&self) -> std::option::Option<&[crate::types::NetworkInfo]> {
        self.network_info_list.as_deref()
    }
    /// <p> CPU architecture type for the server. </p>
    pub fn cpu_architecture(&self) -> std::option::Option<&str> {
        self.cpu_architecture.as_deref()
    }
}
impl SystemInfo {
    /// Creates a new builder-style object to manufacture [`SystemInfo`](crate::types::SystemInfo).
    pub fn builder() -> crate::types::builders::SystemInfoBuilder {
        crate::types::builders::SystemInfoBuilder::default()
    }
}

/// A builder for [`SystemInfo`](crate::types::SystemInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SystemInfoBuilder {
    pub(crate) os_info: std::option::Option<crate::types::OsInfo>,
    pub(crate) file_system_type: std::option::Option<std::string::String>,
    pub(crate) network_info_list: std::option::Option<std::vec::Vec<crate::types::NetworkInfo>>,
    pub(crate) cpu_architecture: std::option::Option<std::string::String>,
}
impl SystemInfoBuilder {
    /// <p> Operating system corresponding to a server. </p>
    pub fn os_info(mut self, input: crate::types::OsInfo) -> Self {
        self.os_info = Some(input);
        self
    }
    /// <p> Operating system corresponding to a server. </p>
    pub fn set_os_info(mut self, input: std::option::Option<crate::types::OsInfo>) -> Self {
        self.os_info = input;
        self
    }
    /// <p> File system type for the server. </p>
    pub fn file_system_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.file_system_type = Some(input.into());
        self
    }
    /// <p> File system type for the server. </p>
    pub fn set_file_system_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.file_system_type = input;
        self
    }
    /// Appends an item to `network_info_list`.
    ///
    /// To override the contents of this collection use [`set_network_info_list`](Self::set_network_info_list).
    ///
    /// <p> Networking information related to a server. </p>
    pub fn network_info_list(mut self, input: crate::types::NetworkInfo) -> Self {
        let mut v = self.network_info_list.unwrap_or_default();
        v.push(input);
        self.network_info_list = Some(v);
        self
    }
    /// <p> Networking information related to a server. </p>
    pub fn set_network_info_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::NetworkInfo>>,
    ) -> Self {
        self.network_info_list = input;
        self
    }
    /// <p> CPU architecture type for the server. </p>
    pub fn cpu_architecture(mut self, input: impl Into<std::string::String>) -> Self {
        self.cpu_architecture = Some(input.into());
        self
    }
    /// <p> CPU architecture type for the server. </p>
    pub fn set_cpu_architecture(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cpu_architecture = input;
        self
    }
    /// Consumes the builder and constructs a [`SystemInfo`](crate::types::SystemInfo).
    pub fn build(self) -> crate::types::SystemInfo {
        crate::types::SystemInfo {
            os_info: self.os_info,
            file_system_type: self.file_system_type,
            network_info_list: self.network_info_list,
            cpu_architecture: self.cpu_architecture,
        }
    }
}
