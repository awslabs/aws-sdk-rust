// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Object containing source code information that is linked to an application component. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SourceCodeRepository {
    /// <p> The repository name for the source code. </p>
    #[doc(hidden)]
    pub repository: std::option::Option<std::string::String>,
    /// <p> The branch of the source code. </p>
    #[doc(hidden)]
    pub branch: std::option::Option<std::string::String>,
    /// <p> The type of repository to use for the source code. </p>
    #[doc(hidden)]
    pub version_control_type: std::option::Option<std::string::String>,
    /// <p>The name of the project.</p>
    #[doc(hidden)]
    pub project_name: std::option::Option<std::string::String>,
}
impl SourceCodeRepository {
    /// <p> The repository name for the source code. </p>
    pub fn repository(&self) -> std::option::Option<&str> {
        self.repository.as_deref()
    }
    /// <p> The branch of the source code. </p>
    pub fn branch(&self) -> std::option::Option<&str> {
        self.branch.as_deref()
    }
    /// <p> The type of repository to use for the source code. </p>
    pub fn version_control_type(&self) -> std::option::Option<&str> {
        self.version_control_type.as_deref()
    }
    /// <p>The name of the project.</p>
    pub fn project_name(&self) -> std::option::Option<&str> {
        self.project_name.as_deref()
    }
}
impl SourceCodeRepository {
    /// Creates a new builder-style object to manufacture [`SourceCodeRepository`](crate::types::SourceCodeRepository).
    pub fn builder() -> crate::types::builders::SourceCodeRepositoryBuilder {
        crate::types::builders::SourceCodeRepositoryBuilder::default()
    }
}

/// A builder for [`SourceCodeRepository`](crate::types::SourceCodeRepository).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SourceCodeRepositoryBuilder {
    pub(crate) repository: std::option::Option<std::string::String>,
    pub(crate) branch: std::option::Option<std::string::String>,
    pub(crate) version_control_type: std::option::Option<std::string::String>,
    pub(crate) project_name: std::option::Option<std::string::String>,
}
impl SourceCodeRepositoryBuilder {
    /// <p> The repository name for the source code. </p>
    pub fn repository(mut self, input: impl Into<std::string::String>) -> Self {
        self.repository = Some(input.into());
        self
    }
    /// <p> The repository name for the source code. </p>
    pub fn set_repository(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.repository = input;
        self
    }
    /// <p> The branch of the source code. </p>
    pub fn branch(mut self, input: impl Into<std::string::String>) -> Self {
        self.branch = Some(input.into());
        self
    }
    /// <p> The branch of the source code. </p>
    pub fn set_branch(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.branch = input;
        self
    }
    /// <p> The type of repository to use for the source code. </p>
    pub fn version_control_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.version_control_type = Some(input.into());
        self
    }
    /// <p> The type of repository to use for the source code. </p>
    pub fn set_version_control_type(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.version_control_type = input;
        self
    }
    /// <p>The name of the project.</p>
    pub fn project_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.project_name = Some(input.into());
        self
    }
    /// <p>The name of the project.</p>
    pub fn set_project_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.project_name = input;
        self
    }
    /// Consumes the builder and constructs a [`SourceCodeRepository`](crate::types::SourceCodeRepository).
    pub fn build(self) -> crate::types::SourceCodeRepository {
        crate::types::SourceCodeRepository {
            repository: self.repository,
            branch: self.branch,
            version_control_type: self.version_control_type,
            project_name: self.project_name,
        }
    }
}
