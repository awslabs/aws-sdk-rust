// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Information about the operating system. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct OsInfo {
    /// <p> Information about the type of operating system. </p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::OsType>,
    /// <p> Information about the version of operating system. </p>
    #[doc(hidden)]
    pub version: std::option::Option<std::string::String>,
}
impl OsInfo {
    /// <p> Information about the type of operating system. </p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::OsType> {
        self.r#type.as_ref()
    }
    /// <p> Information about the version of operating system. </p>
    pub fn version(&self) -> std::option::Option<&str> {
        self.version.as_deref()
    }
}
impl OsInfo {
    /// Creates a new builder-style object to manufacture [`OsInfo`](crate::types::OsInfo).
    pub fn builder() -> crate::types::builders::OsInfoBuilder {
        crate::types::builders::OsInfoBuilder::default()
    }
}

/// A builder for [`OsInfo`](crate::types::OsInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct OsInfoBuilder {
    pub(crate) r#type: std::option::Option<crate::types::OsType>,
    pub(crate) version: std::option::Option<std::string::String>,
}
impl OsInfoBuilder {
    /// <p> Information about the type of operating system. </p>
    pub fn r#type(mut self, input: crate::types::OsType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p> Information about the type of operating system. </p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::OsType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p> Information about the version of operating system. </p>
    pub fn version(mut self, input: impl Into<std::string::String>) -> Self {
        self.version = Some(input.into());
        self
    }
    /// <p> Information about the version of operating system. </p>
    pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// Consumes the builder and constructs a [`OsInfo`](crate::types::OsInfo).
    pub fn build(self) -> crate::types::OsInfo {
        crate::types::OsInfo {
            r#type: self.r#type,
            version: self.version,
        }
    }
}
