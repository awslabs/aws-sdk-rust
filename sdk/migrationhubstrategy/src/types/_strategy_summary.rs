// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Object containing the summary of the strategy recommendations. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StrategySummary {
    /// <p> The name of recommended strategy. </p>
    #[doc(hidden)]
    pub strategy: std::option::Option<crate::types::Strategy>,
    /// <p> The count of recommendations per strategy. </p>
    #[doc(hidden)]
    pub count: std::option::Option<i32>,
}
impl StrategySummary {
    /// <p> The name of recommended strategy. </p>
    pub fn strategy(&self) -> std::option::Option<&crate::types::Strategy> {
        self.strategy.as_ref()
    }
    /// <p> The count of recommendations per strategy. </p>
    pub fn count(&self) -> std::option::Option<i32> {
        self.count
    }
}
impl StrategySummary {
    /// Creates a new builder-style object to manufacture [`StrategySummary`](crate::types::StrategySummary).
    pub fn builder() -> crate::types::builders::StrategySummaryBuilder {
        crate::types::builders::StrategySummaryBuilder::default()
    }
}

/// A builder for [`StrategySummary`](crate::types::StrategySummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StrategySummaryBuilder {
    pub(crate) strategy: std::option::Option<crate::types::Strategy>,
    pub(crate) count: std::option::Option<i32>,
}
impl StrategySummaryBuilder {
    /// <p> The name of recommended strategy. </p>
    pub fn strategy(mut self, input: crate::types::Strategy) -> Self {
        self.strategy = Some(input);
        self
    }
    /// <p> The name of recommended strategy. </p>
    pub fn set_strategy(mut self, input: std::option::Option<crate::types::Strategy>) -> Self {
        self.strategy = input;
        self
    }
    /// <p> The count of recommendations per strategy. </p>
    pub fn count(mut self, input: i32) -> Self {
        self.count = Some(input);
        self
    }
    /// <p> The count of recommendations per strategy. </p>
    pub fn set_count(mut self, input: std::option::Option<i32>) -> Self {
        self.count = input;
        self
    }
    /// Consumes the builder and constructs a [`StrategySummary`](crate::types::StrategySummary).
    pub fn build(self) -> crate::types::StrategySummary {
        crate::types::StrategySummary {
            strategy: self.strategy,
            count: self.count,
        }
    }
}
