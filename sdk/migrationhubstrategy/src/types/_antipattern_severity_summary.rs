// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Contains the summary of anti-patterns and their severity. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AntipatternSeveritySummary {
    /// <p> Contains the severity of anti-patterns. </p>
    #[doc(hidden)]
    pub severity: std::option::Option<crate::types::Severity>,
    /// <p> Contains the count of anti-patterns. </p>
    #[doc(hidden)]
    pub count: std::option::Option<i32>,
}
impl AntipatternSeveritySummary {
    /// <p> Contains the severity of anti-patterns. </p>
    pub fn severity(&self) -> std::option::Option<&crate::types::Severity> {
        self.severity.as_ref()
    }
    /// <p> Contains the count of anti-patterns. </p>
    pub fn count(&self) -> std::option::Option<i32> {
        self.count
    }
}
impl AntipatternSeveritySummary {
    /// Creates a new builder-style object to manufacture [`AntipatternSeveritySummary`](crate::types::AntipatternSeveritySummary).
    pub fn builder() -> crate::types::builders::AntipatternSeveritySummaryBuilder {
        crate::types::builders::AntipatternSeveritySummaryBuilder::default()
    }
}

/// A builder for [`AntipatternSeveritySummary`](crate::types::AntipatternSeveritySummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AntipatternSeveritySummaryBuilder {
    pub(crate) severity: std::option::Option<crate::types::Severity>,
    pub(crate) count: std::option::Option<i32>,
}
impl AntipatternSeveritySummaryBuilder {
    /// <p> Contains the severity of anti-patterns. </p>
    pub fn severity(mut self, input: crate::types::Severity) -> Self {
        self.severity = Some(input);
        self
    }
    /// <p> Contains the severity of anti-patterns. </p>
    pub fn set_severity(mut self, input: std::option::Option<crate::types::Severity>) -> Self {
        self.severity = input;
        self
    }
    /// <p> Contains the count of anti-patterns. </p>
    pub fn count(mut self, input: i32) -> Self {
        self.count = Some(input);
        self
    }
    /// <p> Contains the count of anti-patterns. </p>
    pub fn set_count(mut self, input: std::option::Option<i32>) -> Self {
        self.count = input;
        self
    }
    /// Consumes the builder and constructs a [`AntipatternSeveritySummary`](crate::types::AntipatternSeveritySummary).
    pub fn build(self) -> crate::types::AntipatternSeveritySummary {
        crate::types::AntipatternSeveritySummary {
            severity: self.severity,
            count: self.count,
        }
    }
}
