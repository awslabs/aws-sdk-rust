// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The status summary of the server analysis.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ServerStatusSummary {
    /// <p>The status of the run time.</p>
    #[doc(hidden)]
    pub run_time_assessment_status: std::option::Option<crate::types::RunTimeAssessmentStatus>,
    /// <p>The number of servers successfully analyzed, partially successful or failed analysis.</p>
    #[doc(hidden)]
    pub count: std::option::Option<i32>,
}
impl ServerStatusSummary {
    /// <p>The status of the run time.</p>
    pub fn run_time_assessment_status(
        &self,
    ) -> std::option::Option<&crate::types::RunTimeAssessmentStatus> {
        self.run_time_assessment_status.as_ref()
    }
    /// <p>The number of servers successfully analyzed, partially successful or failed analysis.</p>
    pub fn count(&self) -> std::option::Option<i32> {
        self.count
    }
}
impl ServerStatusSummary {
    /// Creates a new builder-style object to manufacture [`ServerStatusSummary`](crate::types::ServerStatusSummary).
    pub fn builder() -> crate::types::builders::ServerStatusSummaryBuilder {
        crate::types::builders::ServerStatusSummaryBuilder::default()
    }
}

/// A builder for [`ServerStatusSummary`](crate::types::ServerStatusSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ServerStatusSummaryBuilder {
    pub(crate) run_time_assessment_status:
        std::option::Option<crate::types::RunTimeAssessmentStatus>,
    pub(crate) count: std::option::Option<i32>,
}
impl ServerStatusSummaryBuilder {
    /// <p>The status of the run time.</p>
    pub fn run_time_assessment_status(
        mut self,
        input: crate::types::RunTimeAssessmentStatus,
    ) -> Self {
        self.run_time_assessment_status = Some(input);
        self
    }
    /// <p>The status of the run time.</p>
    pub fn set_run_time_assessment_status(
        mut self,
        input: std::option::Option<crate::types::RunTimeAssessmentStatus>,
    ) -> Self {
        self.run_time_assessment_status = input;
        self
    }
    /// <p>The number of servers successfully analyzed, partially successful or failed analysis.</p>
    pub fn count(mut self, input: i32) -> Self {
        self.count = Some(input);
        self
    }
    /// <p>The number of servers successfully analyzed, partially successful or failed analysis.</p>
    pub fn set_count(mut self, input: std::option::Option<i32>) -> Self {
        self.count = input;
        self
    }
    /// Consumes the builder and constructs a [`ServerStatusSummary`](crate::types::ServerStatusSummary).
    pub fn build(self) -> crate::types::ServerStatusSummary {
        crate::types::ServerStatusSummary {
            run_time_assessment_status: self.run_time_assessment_status,
            count: self.count,
        }
    }
}
