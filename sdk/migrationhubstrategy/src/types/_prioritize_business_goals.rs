// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Rank of business goals based on priority. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PrioritizeBusinessGoals {
    /// <p> Rank of business goals based on priority. </p>
    #[doc(hidden)]
    pub business_goals: std::option::Option<crate::types::BusinessGoals>,
}
impl PrioritizeBusinessGoals {
    /// <p> Rank of business goals based on priority. </p>
    pub fn business_goals(&self) -> std::option::Option<&crate::types::BusinessGoals> {
        self.business_goals.as_ref()
    }
}
impl PrioritizeBusinessGoals {
    /// Creates a new builder-style object to manufacture [`PrioritizeBusinessGoals`](crate::types::PrioritizeBusinessGoals).
    pub fn builder() -> crate::types::builders::PrioritizeBusinessGoalsBuilder {
        crate::types::builders::PrioritizeBusinessGoalsBuilder::default()
    }
}

/// A builder for [`PrioritizeBusinessGoals`](crate::types::PrioritizeBusinessGoals).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PrioritizeBusinessGoalsBuilder {
    pub(crate) business_goals: std::option::Option<crate::types::BusinessGoals>,
}
impl PrioritizeBusinessGoalsBuilder {
    /// <p> Rank of business goals based on priority. </p>
    pub fn business_goals(mut self, input: crate::types::BusinessGoals) -> Self {
        self.business_goals = Some(input);
        self
    }
    /// <p> Rank of business goals based on priority. </p>
    pub fn set_business_goals(
        mut self,
        input: std::option::Option<crate::types::BusinessGoals>,
    ) -> Self {
        self.business_goals = input;
        self
    }
    /// Consumes the builder and constructs a [`PrioritizeBusinessGoals`](crate::types::PrioritizeBusinessGoals).
    pub fn build(self) -> crate::types::PrioritizeBusinessGoals {
        crate::types::PrioritizeBusinessGoals {
            business_goals: self.business_goals,
        }
    }
}
