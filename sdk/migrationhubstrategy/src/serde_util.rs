// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn assessment_target_correct_errors(
    mut builder: crate::types::builders::AssessmentTargetBuilder,
) -> crate::types::builders::AssessmentTargetBuilder {
    if builder.condition.is_none() {
        builder.condition = "no value was set".parse::<crate::types::Condition>().ok()
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.values.is_none() {
        builder.values = Some(Default::default())
    }
    builder
}

pub(crate) fn aws_managed_resources_correct_errors(
    mut builder: crate::types::builders::AwsManagedResourcesBuilder,
) -> crate::types::builders::AwsManagedResourcesBuilder {
    if builder.target_destination.is_none() {
        builder.target_destination = Some(Default::default())
    }
    builder
}

pub(crate) fn heterogeneous_correct_errors(
    mut builder: crate::types::builders::HeterogeneousBuilder,
) -> crate::types::builders::HeterogeneousBuilder {
    if builder.target_database_engine.is_none() {
        builder.target_database_engine = Some(Default::default())
    }
    builder
}

pub(crate) fn no_database_migration_preference_correct_errors(
    mut builder: crate::types::builders::NoDatabaseMigrationPreferenceBuilder,
) -> crate::types::builders::NoDatabaseMigrationPreferenceBuilder {
    if builder.target_database_engine.is_none() {
        builder.target_database_engine = Some(Default::default())
    }
    builder
}

pub(crate) fn no_management_preference_correct_errors(
    mut builder: crate::types::builders::NoManagementPreferenceBuilder,
) -> crate::types::builders::NoManagementPreferenceBuilder {
    if builder.target_destination.is_none() {
        builder.target_destination = Some(Default::default())
    }
    builder
}

pub(crate) fn self_manage_resources_correct_errors(
    mut builder: crate::types::builders::SelfManageResourcesBuilder,
) -> crate::types::builders::SelfManageResourcesBuilder {
    if builder.target_destination.is_none() {
        builder.target_destination = Some(Default::default())
    }
    builder
}

pub(crate) fn network_info_correct_errors(mut builder: crate::types::builders::NetworkInfoBuilder) -> crate::types::builders::NetworkInfoBuilder {
    if builder.interface_name.is_none() {
        builder.interface_name = Some(Default::default())
    }
    if builder.ip_address.is_none() {
        builder.ip_address = Some(Default::default())
    }
    if builder.mac_address.is_none() {
        builder.mac_address = Some(Default::default())
    }
    if builder.net_mask.is_none() {
        builder.net_mask = Some(Default::default())
    }
    builder
}
