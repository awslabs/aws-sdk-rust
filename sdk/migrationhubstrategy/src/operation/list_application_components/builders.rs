// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_application_components::_list_application_components_output::ListApplicationComponentsOutputBuilder;

pub use crate::operation::list_application_components::_list_application_components_input::ListApplicationComponentsInputBuilder;

/// Fluent builder constructing a request to `ListApplicationComponents`.
///
/// <p> Retrieves a list of all the application components (processes). </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListApplicationComponentsFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::list_application_components::builders::ListApplicationComponentsInputBuilder
            }
impl ListApplicationComponentsFluentBuilder {
    /// Creates a new `ListApplicationComponents`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::list_application_components::ListApplicationComponents,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::list_application_components::ListApplicationComponentsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::list_application_components::ListApplicationComponentsOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::list_application_components::ListApplicationComponentsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_application_components::paginator::ListApplicationComponentsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::operation::list_application_components::paginator::ListApplicationComponentsPaginator
    {
        crate::operation::list_application_components::paginator::ListApplicationComponentsPaginator::new(self.handle, self.inner)
    }
    /// <p> Criteria for filtering the list of application components. </p>
    pub fn application_component_criteria(
        mut self,
        input: crate::types::ApplicationComponentCriteria,
    ) -> Self {
        self.inner = self.inner.application_component_criteria(input);
        self
    }
    /// <p> Criteria for filtering the list of application components. </p>
    pub fn set_application_component_criteria(
        mut self,
        input: std::option::Option<crate::types::ApplicationComponentCriteria>,
    ) -> Self {
        self.inner = self.inner.set_application_component_criteria(input);
        self
    }
    /// <p> Specify the value based on the application component criteria type. For example, if <code>applicationComponentCriteria</code> is set to <code>SERVER_ID</code> and <code>filterValue</code> is set to <code>server1</code>, then <code>ListApplicationComponents</code> returns all the application components running on server1. </p>
    pub fn filter_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.filter_value(input.into());
        self
    }
    /// <p> Specify the value based on the application component criteria type. For example, if <code>applicationComponentCriteria</code> is set to <code>SERVER_ID</code> and <code>filterValue</code> is set to <code>server1</code>, then <code>ListApplicationComponents</code> returns all the application components running on server1. </p>
    pub fn set_filter_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_filter_value(input);
        self
    }
    /// <p> Specifies whether to sort by ascending (<code>ASC</code>) or descending (<code>DESC</code>) order. </p>
    pub fn sort(mut self, input: crate::types::SortOrder) -> Self {
        self.inner = self.inner.sort(input);
        self
    }
    /// <p> Specifies whether to sort by ascending (<code>ASC</code>) or descending (<code>DESC</code>) order. </p>
    pub fn set_sort(mut self, input: std::option::Option<crate::types::SortOrder>) -> Self {
        self.inner = self.inner.set_sort(input);
        self
    }
    /// Appends an item to `groupIdFilter`.
    ///
    /// To override the contents of this collection use [`set_group_id_filter`](Self::set_group_id_filter).
    ///
    /// <p> The group ID specified in to filter on. </p>
    pub fn group_id_filter(mut self, input: crate::types::Group) -> Self {
        self.inner = self.inner.group_id_filter(input);
        self
    }
    /// <p> The group ID specified in to filter on. </p>
    pub fn set_group_id_filter(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Group>>,
    ) -> Self {
        self.inner = self.inner.set_group_id_filter(input);
        self
    }
    /// <p> The token from a previous call that you use to retrieve the next set of results. For example, if a previous call to this action returned 100 items, but you set <code>maxResults</code> to 10. You'll receive a set of 10 results along with a token. You then use the returned token to retrieve the next set of 10. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> The token from a previous call that you use to retrieve the next set of results. For example, if a previous call to this action returned 100 items, but you set <code>maxResults</code> to 10. You'll receive a set of 10 results along with a token. You then use the returned token to retrieve the next set of 10. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p> The maximum number of items to include in the response. The maximum value is 100. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p> The maximum number of items to include in the response. The maximum value is 100. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}
