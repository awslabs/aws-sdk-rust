// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Represents input for ListAnalyzableServers operation.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListAnalyzableServersInput {
    /// Specifies whether to sort by ascending (ASC) or descending (DESC) order.
    pub sort: ::std::option::Option<crate::types::SortOrder>,
    /// The token from a previous call that you use to retrieve the next set of results. For example, if a previous call to this action returned 100 items, but you set maxResults to 10. You'll receive a set of 10 results along with a token. You then use the returned token to retrieve the next set of 10.
    pub next_token: ::std::option::Option<::std::string::String>,
    /// The maximum number of items to include in the response. The maximum value is 100.
    pub max_results: ::std::option::Option<i32>,
}
impl ListAnalyzableServersInput {
    /// Specifies whether to sort by ascending (ASC) or descending (DESC) order.
    pub fn sort(&self) -> ::std::option::Option<&crate::types::SortOrder> {
        self.sort.as_ref()
    }
    /// The token from a previous call that you use to retrieve the next set of results. For example, if a previous call to this action returned 100 items, but you set maxResults to 10. You'll receive a set of 10 results along with a token. You then use the returned token to retrieve the next set of 10.
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// The maximum number of items to include in the response. The maximum value is 100.
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl ListAnalyzableServersInput {
    /// Creates a new builder-style object to manufacture [`ListAnalyzableServersInput`](crate::operation::list_analyzable_servers::ListAnalyzableServersInput).
    pub fn builder() -> crate::operation::list_analyzable_servers::builders::ListAnalyzableServersInputBuilder {
        crate::operation::list_analyzable_servers::builders::ListAnalyzableServersInputBuilder::default()
    }
}

/// A builder for [`ListAnalyzableServersInput`](crate::operation::list_analyzable_servers::ListAnalyzableServersInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListAnalyzableServersInputBuilder {
    pub(crate) sort: ::std::option::Option<crate::types::SortOrder>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl ListAnalyzableServersInputBuilder {
    /// Specifies whether to sort by ascending (ASC) or descending (DESC) order.
    pub fn sort(mut self, input: crate::types::SortOrder) -> Self {
        self.sort = ::std::option::Option::Some(input);
        self
    }
    /// Specifies whether to sort by ascending (ASC) or descending (DESC) order.
    pub fn set_sort(mut self, input: ::std::option::Option<crate::types::SortOrder>) -> Self {
        self.sort = input;
        self
    }
    /// Specifies whether to sort by ascending (ASC) or descending (DESC) order.
    pub fn get_sort(&self) -> &::std::option::Option<crate::types::SortOrder> {
        &self.sort
    }
    /// The token from a previous call that you use to retrieve the next set of results. For example, if a previous call to this action returned 100 items, but you set maxResults to 10. You'll receive a set of 10 results along with a token. You then use the returned token to retrieve the next set of 10.
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// The token from a previous call that you use to retrieve the next set of results. For example, if a previous call to this action returned 100 items, but you set maxResults to 10. You'll receive a set of 10 results along with a token. You then use the returned token to retrieve the next set of 10.
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// The token from a previous call that you use to retrieve the next set of results. For example, if a previous call to this action returned 100 items, but you set maxResults to 10. You'll receive a set of 10 results along with a token. You then use the returned token to retrieve the next set of 10.
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// The maximum number of items to include in the response. The maximum value is 100.
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// The maximum number of items to include in the response. The maximum value is 100.
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// The maximum number of items to include in the response. The maximum value is 100.
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`ListAnalyzableServersInput`](crate::operation::list_analyzable_servers::ListAnalyzableServersInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_analyzable_servers::ListAnalyzableServersInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_analyzable_servers::ListAnalyzableServersInput {
            sort: self.sort,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
