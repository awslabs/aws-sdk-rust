// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartImportFileTaskInput {
    /// <p> A descriptive name for the request. </p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p> The S3 bucket where the import file is located. The bucket name is required to begin with <code>migrationhub-strategy-</code>.</p>
    pub s3_bucket: ::std::option::Option<::std::string::String>,
    /// <p> The Amazon S3 key name of the import file. </p>
    pub s3_key: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the source that the servers are coming from. By default, Strategy Recommendations assumes that the servers specified in the import file are available in AWS Application Discovery Service. </p>
    pub data_source_type: ::std::option::Option<crate::types::DataSourceType>,
    /// <p>Groups the resources in the import file together with a unique name. This ID can be as filter in <code>ListApplicationComponents</code> and <code>ListServers</code>. </p>
    pub group_id: ::std::option::Option<::std::vec::Vec<crate::types::Group>>,
    /// <p> The S3 bucket where Strategy Recommendations uploads import results. The bucket name is required to begin with migrationhub-strategy-. </p>
    pub s3bucket_for_report_data: ::std::option::Option<::std::string::String>,
}
impl StartImportFileTaskInput {
    /// <p> A descriptive name for the request. </p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p> The S3 bucket where the import file is located. The bucket name is required to begin with <code>migrationhub-strategy-</code>.</p>
    pub fn s3_bucket(&self) -> ::std::option::Option<&str> {
        self.s3_bucket.as_deref()
    }
    /// <p> The Amazon S3 key name of the import file. </p>
    pub fn s3_key(&self) -> ::std::option::Option<&str> {
        self.s3_key.as_deref()
    }
    /// <p>Specifies the source that the servers are coming from. By default, Strategy Recommendations assumes that the servers specified in the import file are available in AWS Application Discovery Service. </p>
    pub fn data_source_type(&self) -> ::std::option::Option<&crate::types::DataSourceType> {
        self.data_source_type.as_ref()
    }
    /// <p>Groups the resources in the import file together with a unique name. This ID can be as filter in <code>ListApplicationComponents</code> and <code>ListServers</code>. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.group_id.is_none()`.
    pub fn group_id(&self) -> &[crate::types::Group] {
        self.group_id.as_deref().unwrap_or_default()
    }
    /// <p> The S3 bucket where Strategy Recommendations uploads import results. The bucket name is required to begin with migrationhub-strategy-. </p>
    pub fn s3bucket_for_report_data(&self) -> ::std::option::Option<&str> {
        self.s3bucket_for_report_data.as_deref()
    }
}
impl StartImportFileTaskInput {
    /// Creates a new builder-style object to manufacture [`StartImportFileTaskInput`](crate::operation::start_import_file_task::StartImportFileTaskInput).
    pub fn builder() -> crate::operation::start_import_file_task::builders::StartImportFileTaskInputBuilder {
        crate::operation::start_import_file_task::builders::StartImportFileTaskInputBuilder::default()
    }
}

/// A builder for [`StartImportFileTaskInput`](crate::operation::start_import_file_task::StartImportFileTaskInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StartImportFileTaskInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) s3_bucket: ::std::option::Option<::std::string::String>,
    pub(crate) s3_key: ::std::option::Option<::std::string::String>,
    pub(crate) data_source_type: ::std::option::Option<crate::types::DataSourceType>,
    pub(crate) group_id: ::std::option::Option<::std::vec::Vec<crate::types::Group>>,
    pub(crate) s3bucket_for_report_data: ::std::option::Option<::std::string::String>,
}
impl StartImportFileTaskInputBuilder {
    /// <p> A descriptive name for the request. </p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> A descriptive name for the request. </p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p> A descriptive name for the request. </p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p> The S3 bucket where the import file is located. The bucket name is required to begin with <code>migrationhub-strategy-</code>.</p>
    /// This field is required.
    pub fn s3_bucket(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_bucket = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The S3 bucket where the import file is located. The bucket name is required to begin with <code>migrationhub-strategy-</code>.</p>
    pub fn set_s3_bucket(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_bucket = input;
        self
    }
    /// <p> The S3 bucket where the import file is located. The bucket name is required to begin with <code>migrationhub-strategy-</code>.</p>
    pub fn get_s3_bucket(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_bucket
    }
    /// <p> The Amazon S3 key name of the import file. </p>
    /// This field is required.
    pub fn s3_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The Amazon S3 key name of the import file. </p>
    pub fn set_s3_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_key = input;
        self
    }
    /// <p> The Amazon S3 key name of the import file. </p>
    pub fn get_s3_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_key
    }
    /// <p>Specifies the source that the servers are coming from. By default, Strategy Recommendations assumes that the servers specified in the import file are available in AWS Application Discovery Service. </p>
    pub fn data_source_type(mut self, input: crate::types::DataSourceType) -> Self {
        self.data_source_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the source that the servers are coming from. By default, Strategy Recommendations assumes that the servers specified in the import file are available in AWS Application Discovery Service. </p>
    pub fn set_data_source_type(mut self, input: ::std::option::Option<crate::types::DataSourceType>) -> Self {
        self.data_source_type = input;
        self
    }
    /// <p>Specifies the source that the servers are coming from. By default, Strategy Recommendations assumes that the servers specified in the import file are available in AWS Application Discovery Service. </p>
    pub fn get_data_source_type(&self) -> &::std::option::Option<crate::types::DataSourceType> {
        &self.data_source_type
    }
    /// Appends an item to `group_id`.
    ///
    /// To override the contents of this collection use [`set_group_id`](Self::set_group_id).
    ///
    /// <p>Groups the resources in the import file together with a unique name. This ID can be as filter in <code>ListApplicationComponents</code> and <code>ListServers</code>. </p>
    pub fn group_id(mut self, input: crate::types::Group) -> Self {
        let mut v = self.group_id.unwrap_or_default();
        v.push(input);
        self.group_id = ::std::option::Option::Some(v);
        self
    }
    /// <p>Groups the resources in the import file together with a unique name. This ID can be as filter in <code>ListApplicationComponents</code> and <code>ListServers</code>. </p>
    pub fn set_group_id(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Group>>) -> Self {
        self.group_id = input;
        self
    }
    /// <p>Groups the resources in the import file together with a unique name. This ID can be as filter in <code>ListApplicationComponents</code> and <code>ListServers</code>. </p>
    pub fn get_group_id(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Group>> {
        &self.group_id
    }
    /// <p> The S3 bucket where Strategy Recommendations uploads import results. The bucket name is required to begin with migrationhub-strategy-. </p>
    pub fn s3bucket_for_report_data(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3bucket_for_report_data = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The S3 bucket where Strategy Recommendations uploads import results. The bucket name is required to begin with migrationhub-strategy-. </p>
    pub fn set_s3bucket_for_report_data(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3bucket_for_report_data = input;
        self
    }
    /// <p> The S3 bucket where Strategy Recommendations uploads import results. The bucket name is required to begin with migrationhub-strategy-. </p>
    pub fn get_s3bucket_for_report_data(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3bucket_for_report_data
    }
    /// Consumes the builder and constructs a [`StartImportFileTaskInput`](crate::operation::start_import_file_task::StartImportFileTaskInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::start_import_file_task::StartImportFileTaskInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::start_import_file_task::StartImportFileTaskInput {
            name: self.name,
            s3_bucket: self.s3_bucket,
            s3_key: self.s3_key,
            data_source_type: self.data_source_type,
            group_id: self.group_id,
            s3bucket_for_report_data: self.s3bucket_for_report_data,
        })
    }
}
