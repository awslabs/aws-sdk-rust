// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::start_import_file_task::_start_import_file_task_output::StartImportFileTaskOutputBuilder;

pub use crate::operation::start_import_file_task::_start_import_file_task_input::StartImportFileTaskInputBuilder;

/// Fluent builder constructing a request to `StartImportFileTask`.
///
/// <p> Starts a file import. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StartImportFileTaskFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::start_import_file_task::builders::StartImportFileTaskInputBuilder,
}
impl StartImportFileTaskFluentBuilder {
    /// Creates a new `StartImportFileTask`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::start_import_file_task::StartImportFileTask,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::start_import_file_task::StartImportFileTaskError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::start_import_file_task::StartImportFileTaskOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::start_import_file_task::StartImportFileTaskError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> A descriptive name for the request. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p> A descriptive name for the request. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p> The S3 bucket where the import file is located. The bucket name is required to begin with <code>migrationhub-strategy-</code>.</p>
    pub fn s3_bucket(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.s3_bucket(input.into());
        self
    }
    /// <p> The S3 bucket where the import file is located. The bucket name is required to begin with <code>migrationhub-strategy-</code>.</p>
    pub fn set_s3_bucket(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_s3_bucket(input);
        self
    }
    /// <p> The Amazon S3 key name of the import file. </p>
    pub fn s3key(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.s3key(input.into());
        self
    }
    /// <p> The Amazon S3 key name of the import file. </p>
    pub fn set_s3key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_s3key(input);
        self
    }
    /// <p>Specifies the source that the servers are coming from. By default, Strategy Recommendations assumes that the servers specified in the import file are available in AWS Application Discovery Service. </p>
    pub fn data_source_type(mut self, input: crate::types::DataSourceType) -> Self {
        self.inner = self.inner.data_source_type(input);
        self
    }
    /// <p>Specifies the source that the servers are coming from. By default, Strategy Recommendations assumes that the servers specified in the import file are available in AWS Application Discovery Service. </p>
    pub fn set_data_source_type(
        mut self,
        input: std::option::Option<crate::types::DataSourceType>,
    ) -> Self {
        self.inner = self.inner.set_data_source_type(input);
        self
    }
    /// Appends an item to `groupId`.
    ///
    /// To override the contents of this collection use [`set_group_id`](Self::set_group_id).
    ///
    /// <p>Groups the resources in the import file together with a unique name. This ID can be as filter in <code>ListApplicationComponents</code> and <code>ListServers</code>. </p>
    pub fn group_id(mut self, input: crate::types::Group) -> Self {
        self.inner = self.inner.group_id(input);
        self
    }
    /// <p>Groups the resources in the import file together with a unique name. This ID can be as filter in <code>ListApplicationComponents</code> and <code>ListServers</code>. </p>
    pub fn set_group_id(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Group>>,
    ) -> Self {
        self.inner = self.inner.set_group_id(input);
        self
    }
    /// <p> The S3 bucket where Strategy Recommendations uploads import results. The bucket name is required to begin with migrationhub-strategy-. </p>
    pub fn s3bucket_for_report_data(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.s3bucket_for_report_data(input.into());
        self
    }
    /// <p> The S3 bucket where Strategy Recommendations uploads import results. The bucket name is required to begin with migrationhub-strategy-. </p>
    pub fn set_s3bucket_for_report_data(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_s3bucket_for_report_data(input);
        self
    }
}
