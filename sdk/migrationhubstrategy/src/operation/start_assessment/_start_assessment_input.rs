// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartAssessmentInput {
    /// <p> The S3 bucket used by the collectors to send analysis data to the service. The bucket name must begin with <code>migrationhub-strategy-</code>. </p>
    #[doc(hidden)]
    pub s3bucket_for_analysis_data: std::option::Option<std::string::String>,
    /// <p> The S3 bucket where all the reports generated by the service are stored. The bucket name must begin with <code>migrationhub-strategy-</code>. </p>
    #[doc(hidden)]
    pub s3bucket_for_report_data: std::option::Option<std::string::String>,
    /// <p>List of criteria for assessment.</p>
    #[doc(hidden)]
    pub assessment_targets: std::option::Option<std::vec::Vec<crate::types::AssessmentTarget>>,
}
impl StartAssessmentInput {
    /// <p> The S3 bucket used by the collectors to send analysis data to the service. The bucket name must begin with <code>migrationhub-strategy-</code>. </p>
    pub fn s3bucket_for_analysis_data(&self) -> std::option::Option<&str> {
        self.s3bucket_for_analysis_data.as_deref()
    }
    /// <p> The S3 bucket where all the reports generated by the service are stored. The bucket name must begin with <code>migrationhub-strategy-</code>. </p>
    pub fn s3bucket_for_report_data(&self) -> std::option::Option<&str> {
        self.s3bucket_for_report_data.as_deref()
    }
    /// <p>List of criteria for assessment.</p>
    pub fn assessment_targets(&self) -> std::option::Option<&[crate::types::AssessmentTarget]> {
        self.assessment_targets.as_deref()
    }
}
impl StartAssessmentInput {
    /// Creates a new builder-style object to manufacture [`StartAssessmentInput`](crate::operation::start_assessment::StartAssessmentInput).
    pub fn builder() -> crate::operation::start_assessment::builders::StartAssessmentInputBuilder {
        crate::operation::start_assessment::builders::StartAssessmentInputBuilder::default()
    }
}

/// A builder for [`StartAssessmentInput`](crate::operation::start_assessment::StartAssessmentInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StartAssessmentInputBuilder {
    pub(crate) s3bucket_for_analysis_data: std::option::Option<std::string::String>,
    pub(crate) s3bucket_for_report_data: std::option::Option<std::string::String>,
    pub(crate) assessment_targets:
        std::option::Option<std::vec::Vec<crate::types::AssessmentTarget>>,
}
impl StartAssessmentInputBuilder {
    /// <p> The S3 bucket used by the collectors to send analysis data to the service. The bucket name must begin with <code>migrationhub-strategy-</code>. </p>
    pub fn s3bucket_for_analysis_data(mut self, input: impl Into<std::string::String>) -> Self {
        self.s3bucket_for_analysis_data = Some(input.into());
        self
    }
    /// <p> The S3 bucket used by the collectors to send analysis data to the service. The bucket name must begin with <code>migrationhub-strategy-</code>. </p>
    pub fn set_s3bucket_for_analysis_data(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.s3bucket_for_analysis_data = input;
        self
    }
    /// <p> The S3 bucket where all the reports generated by the service are stored. The bucket name must begin with <code>migrationhub-strategy-</code>. </p>
    pub fn s3bucket_for_report_data(mut self, input: impl Into<std::string::String>) -> Self {
        self.s3bucket_for_report_data = Some(input.into());
        self
    }
    /// <p> The S3 bucket where all the reports generated by the service are stored. The bucket name must begin with <code>migrationhub-strategy-</code>. </p>
    pub fn set_s3bucket_for_report_data(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.s3bucket_for_report_data = input;
        self
    }
    /// Appends an item to `assessment_targets`.
    ///
    /// To override the contents of this collection use [`set_assessment_targets`](Self::set_assessment_targets).
    ///
    /// <p>List of criteria for assessment.</p>
    pub fn assessment_targets(mut self, input: crate::types::AssessmentTarget) -> Self {
        let mut v = self.assessment_targets.unwrap_or_default();
        v.push(input);
        self.assessment_targets = Some(v);
        self
    }
    /// <p>List of criteria for assessment.</p>
    pub fn set_assessment_targets(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AssessmentTarget>>,
    ) -> Self {
        self.assessment_targets = input;
        self
    }
    /// Consumes the builder and constructs a [`StartAssessmentInput`](crate::operation::start_assessment::StartAssessmentInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::start_assessment::StartAssessmentInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::start_assessment::StartAssessmentInput {
            s3bucket_for_analysis_data: self.s3bucket_for_analysis_data,
            s3bucket_for_report_data: self.s3bucket_for_report_data,
            assessment_targets: self.assessment_targets,
        })
    }
}
