// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetApplicationComponentDetailsOutput {
    /// <p> Detailed information about an application component. </p>
    #[doc(hidden)]
    pub application_component_detail: std::option::Option<crate::types::ApplicationComponentDetail>,
    /// <p> The associated application group as defined in AWS Application Discovery Service. </p>
    #[doc(hidden)]
    pub associated_applications:
        std::option::Option<std::vec::Vec<crate::types::AssociatedApplication>>,
    /// <p> Set to true if the application component belongs to more than one application group. </p>
    #[doc(hidden)]
    pub more_application_resource: std::option::Option<bool>,
    /// <p> A list of the IDs of the servers on which the application component is running. </p>
    #[doc(hidden)]
    pub associated_server_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl GetApplicationComponentDetailsOutput {
    /// <p> Detailed information about an application component. </p>
    pub fn application_component_detail(
        &self,
    ) -> std::option::Option<&crate::types::ApplicationComponentDetail> {
        self.application_component_detail.as_ref()
    }
    /// <p> The associated application group as defined in AWS Application Discovery Service. </p>
    pub fn associated_applications(
        &self,
    ) -> std::option::Option<&[crate::types::AssociatedApplication]> {
        self.associated_applications.as_deref()
    }
    /// <p> Set to true if the application component belongs to more than one application group. </p>
    pub fn more_application_resource(&self) -> std::option::Option<bool> {
        self.more_application_resource
    }
    /// <p> A list of the IDs of the servers on which the application component is running. </p>
    pub fn associated_server_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.associated_server_ids.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetApplicationComponentDetailsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetApplicationComponentDetailsOutput {
    /// Creates a new builder-style object to manufacture [`GetApplicationComponentDetailsOutput`](crate::operation::get_application_component_details::GetApplicationComponentDetailsOutput).
    pub fn builder() -> crate::operation::get_application_component_details::builders::GetApplicationComponentDetailsOutputBuilder{
        crate::operation::get_application_component_details::builders::GetApplicationComponentDetailsOutputBuilder::default()
    }
}

/// A builder for [`GetApplicationComponentDetailsOutput`](crate::operation::get_application_component_details::GetApplicationComponentDetailsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetApplicationComponentDetailsOutputBuilder {
    pub(crate) application_component_detail:
        std::option::Option<crate::types::ApplicationComponentDetail>,
    pub(crate) associated_applications:
        std::option::Option<std::vec::Vec<crate::types::AssociatedApplication>>,
    pub(crate) more_application_resource: std::option::Option<bool>,
    pub(crate) associated_server_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl GetApplicationComponentDetailsOutputBuilder {
    /// <p> Detailed information about an application component. </p>
    pub fn application_component_detail(
        mut self,
        input: crate::types::ApplicationComponentDetail,
    ) -> Self {
        self.application_component_detail = Some(input);
        self
    }
    /// <p> Detailed information about an application component. </p>
    pub fn set_application_component_detail(
        mut self,
        input: std::option::Option<crate::types::ApplicationComponentDetail>,
    ) -> Self {
        self.application_component_detail = input;
        self
    }
    /// Appends an item to `associated_applications`.
    ///
    /// To override the contents of this collection use [`set_associated_applications`](Self::set_associated_applications).
    ///
    /// <p> The associated application group as defined in AWS Application Discovery Service. </p>
    pub fn associated_applications(mut self, input: crate::types::AssociatedApplication) -> Self {
        let mut v = self.associated_applications.unwrap_or_default();
        v.push(input);
        self.associated_applications = Some(v);
        self
    }
    /// <p> The associated application group as defined in AWS Application Discovery Service. </p>
    pub fn set_associated_applications(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AssociatedApplication>>,
    ) -> Self {
        self.associated_applications = input;
        self
    }
    /// <p> Set to true if the application component belongs to more than one application group. </p>
    pub fn more_application_resource(mut self, input: bool) -> Self {
        self.more_application_resource = Some(input);
        self
    }
    /// <p> Set to true if the application component belongs to more than one application group. </p>
    pub fn set_more_application_resource(mut self, input: std::option::Option<bool>) -> Self {
        self.more_application_resource = input;
        self
    }
    /// Appends an item to `associated_server_ids`.
    ///
    /// To override the contents of this collection use [`set_associated_server_ids`](Self::set_associated_server_ids).
    ///
    /// <p> A list of the IDs of the servers on which the application component is running. </p>
    pub fn associated_server_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.associated_server_ids.unwrap_or_default();
        v.push(input.into());
        self.associated_server_ids = Some(v);
        self
    }
    /// <p> A list of the IDs of the servers on which the application component is running. </p>
    pub fn set_associated_server_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.associated_server_ids = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetApplicationComponentDetailsOutput`](crate::operation::get_application_component_details::GetApplicationComponentDetailsOutput).
    pub fn build(
        self,
    ) -> crate::operation::get_application_component_details::GetApplicationComponentDetailsOutput
    {
        crate::operation::get_application_component_details::GetApplicationComponentDetailsOutput {
            application_component_detail: self.application_component_detail,
            associated_applications: self.associated_applications,
            more_application_resource: self.more_application_resource,
            associated_server_ids: self.associated_server_ids,
            _request_id: self._request_id,
        }
    }
}
