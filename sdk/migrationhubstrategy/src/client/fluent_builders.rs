// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Fluent builder constructing a request to `GetApplicationComponentDetails`.
///
/// <p> Retrieves details about an application component. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetApplicationComponentDetails {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_application_component_details_input::Builder,
}
impl GetApplicationComponentDetails {
    /// Creates a new `GetApplicationComponentDetails`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetApplicationComponentDetails,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetApplicationComponentDetailsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetApplicationComponentDetailsOutput,
        aws_smithy_http::result::SdkError<crate::error::GetApplicationComponentDetailsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The ID of the application component. The ID is unique within an AWS account.</p>
    pub fn application_component_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.application_component_id(input.into());
        self
    }
    /// <p> The ID of the application component. The ID is unique within an AWS account.</p>
    pub fn set_application_component_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_application_component_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetApplicationComponentStrategies`.
///
/// <p> Retrieves a list of all the recommended strategies and tools for an application component running on a server. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetApplicationComponentStrategies {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_application_component_strategies_input::Builder,
}
impl GetApplicationComponentStrategies {
    /// Creates a new `GetApplicationComponentStrategies`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetApplicationComponentStrategies,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetApplicationComponentStrategiesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetApplicationComponentStrategiesOutput,
        aws_smithy_http::result::SdkError<crate::error::GetApplicationComponentStrategiesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The ID of the application component. The ID is unique within an AWS account.</p>
    pub fn application_component_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.application_component_id(input.into());
        self
    }
    /// <p> The ID of the application component. The ID is unique within an AWS account.</p>
    pub fn set_application_component_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_application_component_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetAssessment`.
///
/// <p> Retrieves the status of an on-going assessment. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetAssessment {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_assessment_input::Builder,
}
impl GetAssessment {
    /// Creates a new `GetAssessment`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetAssessment,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetAssessmentError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetAssessmentOutput,
        aws_smithy_http::result::SdkError<crate::error::GetAssessmentError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The <code>assessmentid</code> returned by <code>StartAssessment</code>.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// <p> The <code>assessmentid</code> returned by <code>StartAssessment</code>.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetImportFileTask`.
///
/// <p> Retrieves the details about a specific import task. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetImportFileTask {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_import_file_task_input::Builder,
}
impl GetImportFileTask {
    /// Creates a new `GetImportFileTask`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetImportFileTask,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetImportFileTaskError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetImportFileTaskOutput,
        aws_smithy_http::result::SdkError<crate::error::GetImportFileTaskError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The ID of the import file task. This ID is returned in the response of <code>StartImportFileTask</code>. </p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// <p> The ID of the import file task. This ID is returned in the response of <code>StartImportFileTask</code>. </p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetLatestAssessmentId`.
///
/// <p>Retrieve the latest ID of a specific assessment task.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetLatestAssessmentId {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_latest_assessment_id_input::Builder,
}
impl GetLatestAssessmentId {
    /// Creates a new `GetLatestAssessmentId`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetLatestAssessmentId,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetLatestAssessmentIdError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetLatestAssessmentIdOutput,
        aws_smithy_http::result::SdkError<crate::error::GetLatestAssessmentIdError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
}

/// Fluent builder constructing a request to `GetPortfolioPreferences`.
///
/// <p> Retrieves your migration and modernization preferences. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetPortfolioPreferences {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_portfolio_preferences_input::Builder,
}
impl GetPortfolioPreferences {
    /// Creates a new `GetPortfolioPreferences`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetPortfolioPreferences,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetPortfolioPreferencesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetPortfolioPreferencesOutput,
        aws_smithy_http::result::SdkError<crate::error::GetPortfolioPreferencesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
}

/// Fluent builder constructing a request to `GetPortfolioSummary`.
///
/// <p> Retrieves overall summary including the number of servers to rehost and the overall number of anti-patterns. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetPortfolioSummary {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_portfolio_summary_input::Builder,
}
impl GetPortfolioSummary {
    /// Creates a new `GetPortfolioSummary`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetPortfolioSummary,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetPortfolioSummaryError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetPortfolioSummaryOutput,
        aws_smithy_http::result::SdkError<crate::error::GetPortfolioSummaryError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
}

/// Fluent builder constructing a request to `GetRecommendationReportDetails`.
///
/// <p> Retrieves detailed information about the specified recommendation report. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetRecommendationReportDetails {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_recommendation_report_details_input::Builder,
}
impl GetRecommendationReportDetails {
    /// Creates a new `GetRecommendationReportDetails`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetRecommendationReportDetails,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetRecommendationReportDetailsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetRecommendationReportDetailsOutput,
        aws_smithy_http::result::SdkError<crate::error::GetRecommendationReportDetailsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The recommendation report generation task <code>id</code> returned by <code>StartRecommendationReportGeneration</code>. </p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// <p> The recommendation report generation task <code>id</code> returned by <code>StartRecommendationReportGeneration</code>. </p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetServerDetails`.
///
/// <p> Retrieves detailed information about a specified server. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetServerDetails {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_server_details_input::Builder,
}
impl GetServerDetails {
    /// Creates a new `GetServerDetails`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetServerDetails,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetServerDetailsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetServerDetailsOutput,
        aws_smithy_http::result::SdkError<crate::error::GetServerDetailsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::GetServerDetailsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::GetServerDetailsPaginator {
        crate::paginator::GetServerDetailsPaginator::new(self.handle, self.inner)
    }
    /// <p> The ID of the server. </p>
    pub fn server_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.server_id(input.into());
        self
    }
    /// <p> The ID of the server. </p>
    pub fn set_server_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_server_id(input);
        self
    }
    /// <p> The token from a previous call that you use to retrieve the next set of results. For example, if a previous call to this action returned 100 items, but you set <code>maxResults</code> to 10. You'll receive a set of 10 results along with a token. You then use the returned token to retrieve the next set of 10. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> The token from a previous call that you use to retrieve the next set of results. For example, if a previous call to this action returned 100 items, but you set <code>maxResults</code> to 10. You'll receive a set of 10 results along with a token. You then use the returned token to retrieve the next set of 10. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p> The maximum number of items to include in the response. The maximum value is 100. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p> The maximum number of items to include in the response. The maximum value is 100. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `GetServerStrategies`.
///
/// <p> Retrieves recommended strategies and tools for the specified server. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetServerStrategies {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_server_strategies_input::Builder,
}
impl GetServerStrategies {
    /// Creates a new `GetServerStrategies`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetServerStrategies,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetServerStrategiesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetServerStrategiesOutput,
        aws_smithy_http::result::SdkError<crate::error::GetServerStrategiesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The ID of the server. </p>
    pub fn server_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.server_id(input.into());
        self
    }
    /// <p> The ID of the server. </p>
    pub fn set_server_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_server_id(input);
        self
    }
}

/// Fluent builder constructing a request to `ListApplicationComponents`.
///
/// <p> Retrieves a list of all the application components (processes). </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListApplicationComponents {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_application_components_input::Builder,
}
impl ListApplicationComponents {
    /// Creates a new `ListApplicationComponents`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListApplicationComponents,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListApplicationComponentsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListApplicationComponentsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListApplicationComponentsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListApplicationComponentsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListApplicationComponentsPaginator {
        crate::paginator::ListApplicationComponentsPaginator::new(self.handle, self.inner)
    }
    /// <p> Criteria for filtering the list of application components. </p>
    pub fn application_component_criteria(
        mut self,
        input: crate::model::ApplicationComponentCriteria,
    ) -> Self {
        self.inner = self.inner.application_component_criteria(input);
        self
    }
    /// <p> Criteria for filtering the list of application components. </p>
    pub fn set_application_component_criteria(
        mut self,
        input: std::option::Option<crate::model::ApplicationComponentCriteria>,
    ) -> Self {
        self.inner = self.inner.set_application_component_criteria(input);
        self
    }
    /// <p> Specify the value based on the application component criteria type. For example, if <code>applicationComponentCriteria</code> is set to <code>SERVER_ID</code> and <code>filterValue</code> is set to <code>server1</code>, then <code>ListApplicationComponents</code> returns all the application components running on server1. </p>
    pub fn filter_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.filter_value(input.into());
        self
    }
    /// <p> Specify the value based on the application component criteria type. For example, if <code>applicationComponentCriteria</code> is set to <code>SERVER_ID</code> and <code>filterValue</code> is set to <code>server1</code>, then <code>ListApplicationComponents</code> returns all the application components running on server1. </p>
    pub fn set_filter_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_filter_value(input);
        self
    }
    /// <p> Specifies whether to sort by ascending (<code>ASC</code>) or descending (<code>DESC</code>) order. </p>
    pub fn sort(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort(input);
        self
    }
    /// <p> Specifies whether to sort by ascending (<code>ASC</code>) or descending (<code>DESC</code>) order. </p>
    pub fn set_sort(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort(input);
        self
    }
    /// Appends an item to `groupIdFilter`.
    ///
    /// To override the contents of this collection use [`set_group_id_filter`](Self::set_group_id_filter).
    ///
    /// <p> The group ID specified in to filter on. </p>
    pub fn group_id_filter(mut self, input: crate::model::Group) -> Self {
        self.inner = self.inner.group_id_filter(input);
        self
    }
    /// <p> The group ID specified in to filter on. </p>
    pub fn set_group_id_filter(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Group>>,
    ) -> Self {
        self.inner = self.inner.set_group_id_filter(input);
        self
    }
    /// <p> The token from a previous call that you use to retrieve the next set of results. For example, if a previous call to this action returned 100 items, but you set <code>maxResults</code> to 10. You'll receive a set of 10 results along with a token. You then use the returned token to retrieve the next set of 10. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> The token from a previous call that you use to retrieve the next set of results. For example, if a previous call to this action returned 100 items, but you set <code>maxResults</code> to 10. You'll receive a set of 10 results along with a token. You then use the returned token to retrieve the next set of 10. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p> The maximum number of items to include in the response. The maximum value is 100. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p> The maximum number of items to include in the response. The maximum value is 100. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListCollectors`.
///
/// <p> Retrieves a list of all the installed collectors. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListCollectors {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_collectors_input::Builder,
}
impl ListCollectors {
    /// Creates a new `ListCollectors`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListCollectors,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListCollectorsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListCollectorsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListCollectorsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListCollectorsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListCollectorsPaginator {
        crate::paginator::ListCollectorsPaginator::new(self.handle, self.inner)
    }
    /// <p> The token from a previous call that you use to retrieve the next set of results. For example, if a previous call to this action returned 100 items, but you set <code>maxResults</code> to 10. You'll receive a set of 10 results along with a token. You then use the returned token to retrieve the next set of 10. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> The token from a previous call that you use to retrieve the next set of results. For example, if a previous call to this action returned 100 items, but you set <code>maxResults</code> to 10. You'll receive a set of 10 results along with a token. You then use the returned token to retrieve the next set of 10. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p> The maximum number of items to include in the response. The maximum value is 100. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p> The maximum number of items to include in the response. The maximum value is 100. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListImportFileTask`.
///
/// <p> Retrieves a list of all the imports performed. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListImportFileTask {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_import_file_task_input::Builder,
}
impl ListImportFileTask {
    /// Creates a new `ListImportFileTask`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListImportFileTask,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListImportFileTaskError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListImportFileTaskOutput,
        aws_smithy_http::result::SdkError<crate::error::ListImportFileTaskError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListImportFileTaskPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListImportFileTaskPaginator {
        crate::paginator::ListImportFileTaskPaginator::new(self.handle, self.inner)
    }
    /// <p> The token from a previous call that you use to retrieve the next set of results. For example, if a previous call to this action returned 100 items, but you set <code>maxResults</code> to 10. You'll receive a set of 10 results along with a token. You then use the returned token to retrieve the next set of 10. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> The token from a previous call that you use to retrieve the next set of results. For example, if a previous call to this action returned 100 items, but you set <code>maxResults</code> to 10. You'll receive a set of 10 results along with a token. You then use the returned token to retrieve the next set of 10. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p> The total number of items to return. The maximum value is 100. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p> The total number of items to return. The maximum value is 100. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListServers`.
///
/// <p> Returns a list of all the servers. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListServers {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_servers_input::Builder,
}
impl ListServers {
    /// Creates a new `ListServers`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListServers,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListServersError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListServersOutput,
        aws_smithy_http::result::SdkError<crate::error::ListServersError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListServersPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListServersPaginator {
        crate::paginator::ListServersPaginator::new(self.handle, self.inner)
    }
    /// <p> Criteria for filtering servers. </p>
    pub fn server_criteria(mut self, input: crate::model::ServerCriteria) -> Self {
        self.inner = self.inner.server_criteria(input);
        self
    }
    /// <p> Criteria for filtering servers. </p>
    pub fn set_server_criteria(
        mut self,
        input: std::option::Option<crate::model::ServerCriteria>,
    ) -> Self {
        self.inner = self.inner.set_server_criteria(input);
        self
    }
    /// <p> Specifies the filter value, which is based on the type of server criteria. For example, if <code>serverCriteria</code> is <code>OS_NAME</code>, and the <code>filterValue</code> is equal to <code>WindowsServer</code>, then <code>ListServers</code> returns all of the servers matching the OS name <code>WindowsServer</code>. </p>
    pub fn filter_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.filter_value(input.into());
        self
    }
    /// <p> Specifies the filter value, which is based on the type of server criteria. For example, if <code>serverCriteria</code> is <code>OS_NAME</code>, and the <code>filterValue</code> is equal to <code>WindowsServer</code>, then <code>ListServers</code> returns all of the servers matching the OS name <code>WindowsServer</code>. </p>
    pub fn set_filter_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_filter_value(input);
        self
    }
    /// <p> Specifies whether to sort by ascending (<code>ASC</code>) or descending (<code>DESC</code>) order. </p>
    pub fn sort(mut self, input: crate::model::SortOrder) -> Self {
        self.inner = self.inner.sort(input);
        self
    }
    /// <p> Specifies whether to sort by ascending (<code>ASC</code>) or descending (<code>DESC</code>) order. </p>
    pub fn set_sort(mut self, input: std::option::Option<crate::model::SortOrder>) -> Self {
        self.inner = self.inner.set_sort(input);
        self
    }
    /// Appends an item to `groupIdFilter`.
    ///
    /// To override the contents of this collection use [`set_group_id_filter`](Self::set_group_id_filter).
    ///
    /// <p> Specifies the group ID to filter on. </p>
    pub fn group_id_filter(mut self, input: crate::model::Group) -> Self {
        self.inner = self.inner.group_id_filter(input);
        self
    }
    /// <p> Specifies the group ID to filter on. </p>
    pub fn set_group_id_filter(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Group>>,
    ) -> Self {
        self.inner = self.inner.set_group_id_filter(input);
        self
    }
    /// <p> The token from a previous call that you use to retrieve the next set of results. For example, if a previous call to this action returned 100 items, but you set <code>maxResults</code> to 10. You'll receive a set of 10 results along with a token. You then use the returned token to retrieve the next set of 10. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> The token from a previous call that you use to retrieve the next set of results. For example, if a previous call to this action returned 100 items, but you set <code>maxResults</code> to 10. You'll receive a set of 10 results along with a token. You then use the returned token to retrieve the next set of 10. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p> The maximum number of items to include in the response. The maximum value is 100. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p> The maximum number of items to include in the response. The maximum value is 100. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `PutPortfolioPreferences`.
///
/// <p> Saves the specified migration and modernization preferences. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct PutPortfolioPreferences {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::put_portfolio_preferences_input::Builder,
}
impl PutPortfolioPreferences {
    /// Creates a new `PutPortfolioPreferences`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::PutPortfolioPreferences,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::PutPortfolioPreferencesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::PutPortfolioPreferencesOutput,
        aws_smithy_http::result::SdkError<crate::error::PutPortfolioPreferencesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The rank of the business goals based on priority. </p>
    pub fn prioritize_business_goals(
        mut self,
        input: crate::model::PrioritizeBusinessGoals,
    ) -> Self {
        self.inner = self.inner.prioritize_business_goals(input);
        self
    }
    /// <p> The rank of the business goals based on priority. </p>
    pub fn set_prioritize_business_goals(
        mut self,
        input: std::option::Option<crate::model::PrioritizeBusinessGoals>,
    ) -> Self {
        self.inner = self.inner.set_prioritize_business_goals(input);
        self
    }
    /// <p> The transformation preferences for non-database applications. </p>
    pub fn application_preferences(mut self, input: crate::model::ApplicationPreferences) -> Self {
        self.inner = self.inner.application_preferences(input);
        self
    }
    /// <p> The transformation preferences for non-database applications. </p>
    pub fn set_application_preferences(
        mut self,
        input: std::option::Option<crate::model::ApplicationPreferences>,
    ) -> Self {
        self.inner = self.inner.set_application_preferences(input);
        self
    }
    /// <p> The transformation preferences for database applications. </p>
    pub fn database_preferences(mut self, input: crate::model::DatabasePreferences) -> Self {
        self.inner = self.inner.database_preferences(input);
        self
    }
    /// <p> The transformation preferences for database applications. </p>
    pub fn set_database_preferences(
        mut self,
        input: std::option::Option<crate::model::DatabasePreferences>,
    ) -> Self {
        self.inner = self.inner.set_database_preferences(input);
        self
    }
    /// <p>The classification for application component types.</p>
    pub fn application_mode(mut self, input: crate::model::ApplicationMode) -> Self {
        self.inner = self.inner.application_mode(input);
        self
    }
    /// <p>The classification for application component types.</p>
    pub fn set_application_mode(
        mut self,
        input: std::option::Option<crate::model::ApplicationMode>,
    ) -> Self {
        self.inner = self.inner.set_application_mode(input);
        self
    }
}

/// Fluent builder constructing a request to `StartAssessment`.
///
/// <p> Starts the assessment of an on-premises environment. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StartAssessment {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::start_assessment_input::Builder,
}
impl StartAssessment {
    /// Creates a new `StartAssessment`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StartAssessment,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StartAssessmentError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StartAssessmentOutput,
        aws_smithy_http::result::SdkError<crate::error::StartAssessmentError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The S3 bucket used by the collectors to send analysis data to the service. The bucket name must begin with <code>migrationhub-strategy-</code>. </p>
    pub fn s3bucket_for_analysis_data(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.s3bucket_for_analysis_data(input.into());
        self
    }
    /// <p> The S3 bucket used by the collectors to send analysis data to the service. The bucket name must begin with <code>migrationhub-strategy-</code>. </p>
    pub fn set_s3bucket_for_analysis_data(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_s3bucket_for_analysis_data(input);
        self
    }
    /// <p> The S3 bucket where all the reports generated by the service are stored. The bucket name must begin with <code>migrationhub-strategy-</code>. </p>
    pub fn s3bucket_for_report_data(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.s3bucket_for_report_data(input.into());
        self
    }
    /// <p> The S3 bucket where all the reports generated by the service are stored. The bucket name must begin with <code>migrationhub-strategy-</code>. </p>
    pub fn set_s3bucket_for_report_data(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_s3bucket_for_report_data(input);
        self
    }
    /// Appends an item to `assessmentTargets`.
    ///
    /// To override the contents of this collection use [`set_assessment_targets`](Self::set_assessment_targets).
    ///
    /// <p>List of criteria for assessment.</p>
    pub fn assessment_targets(mut self, input: crate::model::AssessmentTarget) -> Self {
        self.inner = self.inner.assessment_targets(input);
        self
    }
    /// <p>List of criteria for assessment.</p>
    pub fn set_assessment_targets(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::AssessmentTarget>>,
    ) -> Self {
        self.inner = self.inner.set_assessment_targets(input);
        self
    }
}

/// Fluent builder constructing a request to `StartImportFileTask`.
///
/// <p> Starts a file import. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StartImportFileTask {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::start_import_file_task_input::Builder,
}
impl StartImportFileTask {
    /// Creates a new `StartImportFileTask`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StartImportFileTask,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StartImportFileTaskError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StartImportFileTaskOutput,
        aws_smithy_http::result::SdkError<crate::error::StartImportFileTaskError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> A descriptive name for the request. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p> A descriptive name for the request. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p> The S3 bucket where the import file is located. The bucket name is required to begin with <code>migrationhub-strategy-</code>.</p>
    pub fn s3_bucket(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.s3_bucket(input.into());
        self
    }
    /// <p> The S3 bucket where the import file is located. The bucket name is required to begin with <code>migrationhub-strategy-</code>.</p>
    pub fn set_s3_bucket(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_s3_bucket(input);
        self
    }
    /// <p> The Amazon S3 key name of the import file. </p>
    pub fn s3key(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.s3key(input.into());
        self
    }
    /// <p> The Amazon S3 key name of the import file. </p>
    pub fn set_s3key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_s3key(input);
        self
    }
    /// <p>Specifies the source that the servers are coming from. By default, Strategy Recommendations assumes that the servers specified in the import file are available in AWS Application Discovery Service. </p>
    pub fn data_source_type(mut self, input: crate::model::DataSourceType) -> Self {
        self.inner = self.inner.data_source_type(input);
        self
    }
    /// <p>Specifies the source that the servers are coming from. By default, Strategy Recommendations assumes that the servers specified in the import file are available in AWS Application Discovery Service. </p>
    pub fn set_data_source_type(
        mut self,
        input: std::option::Option<crate::model::DataSourceType>,
    ) -> Self {
        self.inner = self.inner.set_data_source_type(input);
        self
    }
    /// Appends an item to `groupId`.
    ///
    /// To override the contents of this collection use [`set_group_id`](Self::set_group_id).
    ///
    /// <p>Groups the resources in the import file together with a unique name. This ID can be as filter in <code>ListApplicationComponents</code> and <code>ListServers</code>. </p>
    pub fn group_id(mut self, input: crate::model::Group) -> Self {
        self.inner = self.inner.group_id(input);
        self
    }
    /// <p>Groups the resources in the import file together with a unique name. This ID can be as filter in <code>ListApplicationComponents</code> and <code>ListServers</code>. </p>
    pub fn set_group_id(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Group>>,
    ) -> Self {
        self.inner = self.inner.set_group_id(input);
        self
    }
    /// <p> The S3 bucket where Strategy Recommendations uploads import results. The bucket name is required to begin with migrationhub-strategy-. </p>
    pub fn s3bucket_for_report_data(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.s3bucket_for_report_data(input.into());
        self
    }
    /// <p> The S3 bucket where Strategy Recommendations uploads import results. The bucket name is required to begin with migrationhub-strategy-. </p>
    pub fn set_s3bucket_for_report_data(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_s3bucket_for_report_data(input);
        self
    }
}

/// Fluent builder constructing a request to `StartRecommendationReportGeneration`.
///
/// <p> Starts generating a recommendation report. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StartRecommendationReportGeneration {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::start_recommendation_report_generation_input::Builder,
}
impl StartRecommendationReportGeneration {
    /// Creates a new `StartRecommendationReportGeneration`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StartRecommendationReportGeneration,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StartRecommendationReportGenerationError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StartRecommendationReportGenerationOutput,
        aws_smithy_http::result::SdkError<crate::error::StartRecommendationReportGenerationError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The output format for the recommendation report file. The default format is Microsoft Excel. </p>
    pub fn output_format(mut self, input: crate::model::OutputFormat) -> Self {
        self.inner = self.inner.output_format(input);
        self
    }
    /// <p> The output format for the recommendation report file. The default format is Microsoft Excel. </p>
    pub fn set_output_format(
        mut self,
        input: std::option::Option<crate::model::OutputFormat>,
    ) -> Self {
        self.inner = self.inner.set_output_format(input);
        self
    }
    /// Appends an item to `groupIdFilter`.
    ///
    /// To override the contents of this collection use [`set_group_id_filter`](Self::set_group_id_filter).
    ///
    /// <p> Groups the resources in the recommendation report with a unique name. </p>
    pub fn group_id_filter(mut self, input: crate::model::Group) -> Self {
        self.inner = self.inner.group_id_filter(input);
        self
    }
    /// <p> Groups the resources in the recommendation report with a unique name. </p>
    pub fn set_group_id_filter(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Group>>,
    ) -> Self {
        self.inner = self.inner.set_group_id_filter(input);
        self
    }
}

/// Fluent builder constructing a request to `StopAssessment`.
///
/// <p> Stops the assessment of an on-premises environment. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StopAssessment {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::stop_assessment_input::Builder,
}
impl StopAssessment {
    /// Creates a new `StopAssessment`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StopAssessment,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StopAssessmentError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StopAssessmentOutput,
        aws_smithy_http::result::SdkError<crate::error::StopAssessmentError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The <code>assessmentId</code> returned by <code>StartAssessment</code>. </p>
    pub fn assessment_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.assessment_id(input.into());
        self
    }
    /// <p> The <code>assessmentId</code> returned by <code>StartAssessment</code>. </p>
    pub fn set_assessment_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_assessment_id(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateApplicationComponentConfig`.
///
/// <p> Updates the configuration of an application component. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateApplicationComponentConfig {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_application_component_config_input::Builder,
}
impl UpdateApplicationComponentConfig {
    /// Creates a new `UpdateApplicationComponentConfig`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateApplicationComponentConfig,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateApplicationComponentConfigError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateApplicationComponentConfigOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateApplicationComponentConfigError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The ID of the application component. The ID is unique within an AWS account. </p>
    pub fn application_component_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.application_component_id(input.into());
        self
    }
    /// <p> The ID of the application component. The ID is unique within an AWS account. </p>
    pub fn set_application_component_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_application_component_id(input);
        self
    }
    /// <p> Indicates whether the application component has been included for server recommendation or not. </p>
    pub fn inclusion_status(mut self, input: crate::model::InclusionStatus) -> Self {
        self.inner = self.inner.inclusion_status(input);
        self
    }
    /// <p> Indicates whether the application component has been included for server recommendation or not. </p>
    pub fn set_inclusion_status(
        mut self,
        input: std::option::Option<crate::model::InclusionStatus>,
    ) -> Self {
        self.inner = self.inner.set_inclusion_status(input);
        self
    }
    /// <p> The preferred strategy options for the application component. Use values from the <code>GetApplicationComponentStrategies</code> response. </p>
    pub fn strategy_option(mut self, input: crate::model::StrategyOption) -> Self {
        self.inner = self.inner.strategy_option(input);
        self
    }
    /// <p> The preferred strategy options for the application component. Use values from the <code>GetApplicationComponentStrategies</code> response. </p>
    pub fn set_strategy_option(
        mut self,
        input: std::option::Option<crate::model::StrategyOption>,
    ) -> Self {
        self.inner = self.inner.set_strategy_option(input);
        self
    }
    /// Appends an item to `sourceCodeList`.
    ///
    /// To override the contents of this collection use [`set_source_code_list`](Self::set_source_code_list).
    ///
    /// <p> The list of source code configurations to update for the application component. </p>
    pub fn source_code_list(mut self, input: crate::model::SourceCode) -> Self {
        self.inner = self.inner.source_code_list(input);
        self
    }
    /// <p> The list of source code configurations to update for the application component. </p>
    pub fn set_source_code_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::SourceCode>>,
    ) -> Self {
        self.inner = self.inner.set_source_code_list(input);
        self
    }
    /// <p> Database credentials. </p>
    pub fn secrets_manager_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.secrets_manager_key(input.into());
        self
    }
    /// <p> Database credentials. </p>
    pub fn set_secrets_manager_key(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_secrets_manager_key(input);
        self
    }
    /// <p>Update the configuration request of an application component. If it is set to true, the source code and/or database credentials are updated. If it is set to false, the source code and/or database credentials are updated and an analysis is initiated.</p>
    pub fn configure_only(mut self, input: bool) -> Self {
        self.inner = self.inner.configure_only(input);
        self
    }
    /// <p>Update the configuration request of an application component. If it is set to true, the source code and/or database credentials are updated. If it is set to false, the source code and/or database credentials are updated and an analysis is initiated.</p>
    pub fn set_configure_only(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_configure_only(input);
        self
    }
    /// <p>The type of known component.</p>
    pub fn app_type(mut self, input: crate::model::AppType) -> Self {
        self.inner = self.inner.app_type(input);
        self
    }
    /// <p>The type of known component.</p>
    pub fn set_app_type(mut self, input: std::option::Option<crate::model::AppType>) -> Self {
        self.inner = self.inner.set_app_type(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateServerConfig`.
///
/// <p> Updates the configuration of the specified server. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateServerConfig {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_server_config_input::Builder,
}
impl UpdateServerConfig {
    /// Creates a new `UpdateServerConfig`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateServerConfig,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateServerConfigError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateServerConfigOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateServerConfigError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The ID of the server. </p>
    pub fn server_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.server_id(input.into());
        self
    }
    /// <p> The ID of the server. </p>
    pub fn set_server_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_server_id(input);
        self
    }
    /// <p> The preferred strategy options for the application component. See the response from <code>GetServerStrategies</code>.</p>
    pub fn strategy_option(mut self, input: crate::model::StrategyOption) -> Self {
        self.inner = self.inner.strategy_option(input);
        self
    }
    /// <p> The preferred strategy options for the application component. See the response from <code>GetServerStrategies</code>.</p>
    pub fn set_strategy_option(
        mut self,
        input: std::option::Option<crate::model::StrategyOption>,
    ) -> Self {
        self.inner = self.inner.set_strategy_option(input);
        self
    }
}
