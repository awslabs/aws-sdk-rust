// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p> The user does not have permission to perform the action. Check the AWS Identity and Access Management (IAM) policy associated with this user.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p> Exception to indicate that there is an ongoing task when a new task is created. Return when once the existing tasks are complete. </p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>Dependency encountered an error.</p>
    DependencyException(crate::types::error::DependencyException),
    /// <p> The server experienced an internal error. Try again. </p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p> The specified ID in the request is not found. </p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p> Exception to indicate that the service-linked role (SLR) is locked. </p>
    ServiceLinkedRoleLockClientException(crate::types::error::ServiceLinkedRoleLockClientException),
    /// <p> The AWS account has reached its quota of imports. Contact AWS Support to increase the quota for this account. </p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p> The request was denied due to request throttling. </p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p> The request body isn't valid. </p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(::aws_smithy_types::error::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::DependencyException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceLinkedRoleLockClientException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_application_component_details::GetApplicationComponentDetailsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_application_component_details::GetApplicationComponentDetailsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_application_component_details::GetApplicationComponentDetailsError> for Error {
    fn from(err: crate::operation::get_application_component_details::GetApplicationComponentDetailsError) -> Self {
        match err {
            crate::operation::get_application_component_details::GetApplicationComponentDetailsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_application_component_details::GetApplicationComponentDetailsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_application_component_details::GetApplicationComponentDetailsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_application_component_details::GetApplicationComponentDetailsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_application_component_strategies::GetApplicationComponentStrategiesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_application_component_strategies::GetApplicationComponentStrategiesError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_application_component_strategies::GetApplicationComponentStrategiesError> for Error {
    fn from(err: crate::operation::get_application_component_strategies::GetApplicationComponentStrategiesError) -> Self {
        match err {
            crate::operation::get_application_component_strategies::GetApplicationComponentStrategiesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_application_component_strategies::GetApplicationComponentStrategiesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_application_component_strategies::GetApplicationComponentStrategiesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_application_component_strategies::GetApplicationComponentStrategiesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_assessment::GetAssessmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_assessment::GetAssessmentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_assessment::GetAssessmentError> for Error {
    fn from(err: crate::operation::get_assessment::GetAssessmentError) -> Self {
        match err {
            crate::operation::get_assessment::GetAssessmentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_assessment::GetAssessmentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_assessment::GetAssessmentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_assessment::GetAssessmentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_assessment::GetAssessmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_import_file_task::GetImportFileTaskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_import_file_task::GetImportFileTaskError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_import_file_task::GetImportFileTaskError> for Error {
    fn from(err: crate::operation::get_import_file_task::GetImportFileTaskError) -> Self {
        match err {
            crate::operation::get_import_file_task::GetImportFileTaskError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_import_file_task::GetImportFileTaskError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_import_file_task::GetImportFileTaskError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_import_file_task::GetImportFileTaskError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_import_file_task::GetImportFileTaskError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_import_file_task::GetImportFileTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_latest_assessment_id::GetLatestAssessmentIdError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_latest_assessment_id::GetLatestAssessmentIdError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_latest_assessment_id::GetLatestAssessmentIdError> for Error {
    fn from(err: crate::operation::get_latest_assessment_id::GetLatestAssessmentIdError) -> Self {
        match err {
            crate::operation::get_latest_assessment_id::GetLatestAssessmentIdError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_latest_assessment_id::GetLatestAssessmentIdError::DependencyException(inner) => Error::DependencyException(inner),
            crate::operation::get_latest_assessment_id::GetLatestAssessmentIdError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_latest_assessment_id::GetLatestAssessmentIdError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_latest_assessment_id::GetLatestAssessmentIdError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_portfolio_preferences::GetPortfolioPreferencesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_portfolio_preferences::GetPortfolioPreferencesError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_portfolio_preferences::GetPortfolioPreferencesError> for Error {
    fn from(err: crate::operation::get_portfolio_preferences::GetPortfolioPreferencesError) -> Self {
        match err {
            crate::operation::get_portfolio_preferences::GetPortfolioPreferencesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_portfolio_preferences::GetPortfolioPreferencesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_portfolio_preferences::GetPortfolioPreferencesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_portfolio_preferences::GetPortfolioPreferencesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_portfolio_preferences::GetPortfolioPreferencesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_portfolio_summary::GetPortfolioSummaryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_portfolio_summary::GetPortfolioSummaryError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_portfolio_summary::GetPortfolioSummaryError> for Error {
    fn from(err: crate::operation::get_portfolio_summary::GetPortfolioSummaryError) -> Self {
        match err {
            crate::operation::get_portfolio_summary::GetPortfolioSummaryError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_portfolio_summary::GetPortfolioSummaryError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_portfolio_summary::GetPortfolioSummaryError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_portfolio_summary::GetPortfolioSummaryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_recommendation_report_details::GetRecommendationReportDetailsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_recommendation_report_details::GetRecommendationReportDetailsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_recommendation_report_details::GetRecommendationReportDetailsError> for Error {
    fn from(err: crate::operation::get_recommendation_report_details::GetRecommendationReportDetailsError) -> Self {
        match err {
            crate::operation::get_recommendation_report_details::GetRecommendationReportDetailsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_recommendation_report_details::GetRecommendationReportDetailsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_recommendation_report_details::GetRecommendationReportDetailsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_recommendation_report_details::GetRecommendationReportDetailsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_recommendation_report_details::GetRecommendationReportDetailsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_recommendation_report_details::GetRecommendationReportDetailsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_server_details::GetServerDetailsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_server_details::GetServerDetailsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_server_details::GetServerDetailsError> for Error {
    fn from(err: crate::operation::get_server_details::GetServerDetailsError) -> Self {
        match err {
            crate::operation::get_server_details::GetServerDetailsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_server_details::GetServerDetailsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_server_details::GetServerDetailsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_server_details::GetServerDetailsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_server_details::GetServerDetailsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_server_details::GetServerDetailsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_server_strategies::GetServerStrategiesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_server_strategies::GetServerStrategiesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_server_strategies::GetServerStrategiesError> for Error {
    fn from(err: crate::operation::get_server_strategies::GetServerStrategiesError) -> Self {
        match err {
            crate::operation::get_server_strategies::GetServerStrategiesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_server_strategies::GetServerStrategiesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_server_strategies::GetServerStrategiesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_server_strategies::GetServerStrategiesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_server_strategies::GetServerStrategiesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_server_strategies::GetServerStrategiesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_analyzable_servers::ListAnalyzableServersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_analyzable_servers::ListAnalyzableServersError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_analyzable_servers::ListAnalyzableServersError> for Error {
    fn from(err: crate::operation::list_analyzable_servers::ListAnalyzableServersError) -> Self {
        match err {
            crate::operation::list_analyzable_servers::ListAnalyzableServersError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_analyzable_servers::ListAnalyzableServersError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_analyzable_servers::ListAnalyzableServersError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_analyzable_servers::ListAnalyzableServersError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_analyzable_servers::ListAnalyzableServersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_application_components::ListApplicationComponentsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_application_components::ListApplicationComponentsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_application_components::ListApplicationComponentsError> for Error {
    fn from(err: crate::operation::list_application_components::ListApplicationComponentsError) -> Self {
        match err {
            crate::operation::list_application_components::ListApplicationComponentsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_application_components::ListApplicationComponentsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_application_components::ListApplicationComponentsError::ServiceLinkedRoleLockClientException(inner) => {
                Error::ServiceLinkedRoleLockClientException(inner)
            }
            crate::operation::list_application_components::ListApplicationComponentsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_application_components::ListApplicationComponentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_collectors::ListCollectorsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_collectors::ListCollectorsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_collectors::ListCollectorsError> for Error {
    fn from(err: crate::operation::list_collectors::ListCollectorsError) -> Self {
        match err {
            crate::operation::list_collectors::ListCollectorsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_collectors::ListCollectorsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_collectors::ListCollectorsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_collectors::ListCollectorsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_collectors::ListCollectorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_import_file_task::ListImportFileTaskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_import_file_task::ListImportFileTaskError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_import_file_task::ListImportFileTaskError> for Error {
    fn from(err: crate::operation::list_import_file_task::ListImportFileTaskError) -> Self {
        match err {
            crate::operation::list_import_file_task::ListImportFileTaskError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_import_file_task::ListImportFileTaskError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_import_file_task::ListImportFileTaskError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_import_file_task::ListImportFileTaskError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_import_file_task::ListImportFileTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_servers::ListServersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_servers::ListServersError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_servers::ListServersError> for Error {
    fn from(err: crate::operation::list_servers::ListServersError) -> Self {
        match err {
            crate::operation::list_servers::ListServersError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_servers::ListServersError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_servers::ListServersError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_servers::ListServersError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_servers::ListServersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_portfolio_preferences::PutPortfolioPreferencesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_portfolio_preferences::PutPortfolioPreferencesError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_portfolio_preferences::PutPortfolioPreferencesError> for Error {
    fn from(err: crate::operation::put_portfolio_preferences::PutPortfolioPreferencesError) -> Self {
        match err {
            crate::operation::put_portfolio_preferences::PutPortfolioPreferencesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::put_portfolio_preferences::PutPortfolioPreferencesError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::put_portfolio_preferences::PutPortfolioPreferencesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::put_portfolio_preferences::PutPortfolioPreferencesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::put_portfolio_preferences::PutPortfolioPreferencesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::put_portfolio_preferences::PutPortfolioPreferencesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_assessment::StartAssessmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_assessment::StartAssessmentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_assessment::StartAssessmentError> for Error {
    fn from(err: crate::operation::start_assessment::StartAssessmentError) -> Self {
        match err {
            crate::operation::start_assessment::StartAssessmentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_assessment::StartAssessmentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::start_assessment::StartAssessmentError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::start_assessment::StartAssessmentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_assessment::StartAssessmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_import_file_task::StartImportFileTaskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_import_file_task::StartImportFileTaskError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_import_file_task::StartImportFileTaskError> for Error {
    fn from(err: crate::operation::start_import_file_task::StartImportFileTaskError) -> Self {
        match err {
            crate::operation::start_import_file_task::StartImportFileTaskError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_import_file_task::StartImportFileTaskError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::start_import_file_task::StartImportFileTaskError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::start_import_file_task::StartImportFileTaskError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_import_file_task::StartImportFileTaskError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_import_file_task::StartImportFileTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_recommendation_report_generation::StartRecommendationReportGenerationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_recommendation_report_generation::StartRecommendationReportGenerationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_recommendation_report_generation::StartRecommendationReportGenerationError> for Error {
    fn from(err: crate::operation::start_recommendation_report_generation::StartRecommendationReportGenerationError) -> Self {
        match err {
            crate::operation::start_recommendation_report_generation::StartRecommendationReportGenerationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::start_recommendation_report_generation::StartRecommendationReportGenerationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::start_recommendation_report_generation::StartRecommendationReportGenerationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::start_recommendation_report_generation::StartRecommendationReportGenerationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::start_recommendation_report_generation::StartRecommendationReportGenerationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::start_recommendation_report_generation::StartRecommendationReportGenerationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_assessment::StopAssessmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_assessment::StopAssessmentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_assessment::StopAssessmentError> for Error {
    fn from(err: crate::operation::stop_assessment::StopAssessmentError) -> Self {
        match err {
            crate::operation::stop_assessment::StopAssessmentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::stop_assessment::StopAssessmentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::stop_assessment::StopAssessmentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::stop_assessment::StopAssessmentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::stop_assessment::StopAssessmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_application_component_config::UpdateApplicationComponentConfigError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_application_component_config::UpdateApplicationComponentConfigError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_application_component_config::UpdateApplicationComponentConfigError> for Error {
    fn from(err: crate::operation::update_application_component_config::UpdateApplicationComponentConfigError) -> Self {
        match err {
            crate::operation::update_application_component_config::UpdateApplicationComponentConfigError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_application_component_config::UpdateApplicationComponentConfigError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_application_component_config::UpdateApplicationComponentConfigError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_application_component_config::UpdateApplicationComponentConfigError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_application_component_config::UpdateApplicationComponentConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_server_config::UpdateServerConfigError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_server_config::UpdateServerConfigError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_server_config::UpdateServerConfigError> for Error {
    fn from(err: crate::operation::update_server_config::UpdateServerConfigError) -> Self {
        match err {
            crate::operation::update_server_config::UpdateServerConfigError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_server_config::UpdateServerConfigError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_server_config::UpdateServerConfigError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_server_config::UpdateServerConfigError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_server_config::UpdateServerConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::DependencyException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceLinkedRoleLockClientException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => inner.source(),
        }
    }
}
impl ::aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::DependencyException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceLinkedRoleLockClientException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
