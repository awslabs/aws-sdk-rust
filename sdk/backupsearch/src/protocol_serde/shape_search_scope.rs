// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_search_scope<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::SearchScope>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::SearchScopeBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "BackupResourceTypes" => {
                            builder =
                                builder.set_backup_resource_types(crate::protocol_serde::shape_resource_type_list::de_resource_type_list(tokens)?);
                        }
                        "BackupResourceCreationTime" => {
                            builder = builder.set_backup_resource_creation_time(
                                crate::protocol_serde::shape_backup_creation_time_filter::de_backup_creation_time_filter(tokens)?,
                            );
                        }
                        "SourceResourceArns" => {
                            builder = builder.set_source_resource_arns(crate::protocol_serde::shape_resource_arn_list::de_resource_arn_list(tokens)?);
                        }
                        "BackupResourceArns" => {
                            builder = builder
                                .set_backup_resource_arns(crate::protocol_serde::shape_recovery_point_arn_list::de_recovery_point_arn_list(tokens)?);
                        }
                        "BackupResourceTags" => {
                            builder = builder.set_backup_resource_tags(crate::protocol_serde::shape_tag_map::de_tag_map(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::search_scope_correct_errors(builder).build().map_err(|err| {
                ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err)
            })?))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}

pub fn ser_search_scope(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::SearchScope,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        let mut array_1 = object.key("BackupResourceTypes").start_array();
        for item_2 in &input.backup_resource_types {
            {
                array_1.value().string(item_2.as_str());
            }
        }
        array_1.finish();
    }
    if let Some(var_3) = &input.backup_resource_creation_time {
        #[allow(unused_mut)]
        let mut object_4 = object.key("BackupResourceCreationTime").start_object();
        crate::protocol_serde::shape_backup_creation_time_filter::ser_backup_creation_time_filter(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.source_resource_arns {
        let mut array_6 = object.key("SourceResourceArns").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7.as_str());
            }
        }
        array_6.finish();
    }
    if let Some(var_8) = &input.backup_resource_arns {
        let mut array_9 = object.key("BackupResourceArns").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.backup_resource_tags {
        #[allow(unused_mut)]
        let mut object_12 = object.key("BackupResourceTags").start_object();
        for (key_13, value_14) in var_11 {
            if let Some(var_15) = value_14 {
                object_12.key(key_13.as_str()).string(var_15.as_str());
            } else {
                object_12.key(key_13.as_str()).null();
            }
        }
        object_12.finish();
    }
    Ok(())
}
