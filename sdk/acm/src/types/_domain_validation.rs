// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the validation of each domain name in the certificate.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DomainValidation {
    /// <p>A fully qualified domain name (FQDN) in the certificate. For example, <code>www.example.com</code> or <code>example.com</code>. </p>
    #[doc(hidden)]
    pub domain_name: std::option::Option<std::string::String>,
    /// <p>A list of email addresses that ACM used to send domain validation emails.</p>
    #[doc(hidden)]
    pub validation_emails: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The domain name that ACM used to send domain validation emails.</p>
    #[doc(hidden)]
    pub validation_domain: std::option::Option<std::string::String>,
    /// <p>The validation status of the domain name. This can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>PENDING_VALIDATION</code> </p> </li>
    /// <li> <p> <code></code>SUCCESS</p> </li>
    /// <li> <p> <code></code>FAILED</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub validation_status: std::option::Option<crate::types::DomainStatus>,
    /// <p>Contains the CNAME record that you add to your DNS database for domain validation. For more information, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate-dns.html">Use DNS to Validate Domain Ownership</a>.</p>
    /// <p>Note: The CNAME information that you need does not include the name of your domain. If you include  your domain name in the DNS database CNAME record, validation fails.  For example, if the name is "_a79865eb4cd1a6ab990a45779b4e0b96.yourdomain.com", only "_a79865eb4cd1a6ab990a45779b4e0b96" must be used.</p>
    #[doc(hidden)]
    pub resource_record: std::option::Option<crate::types::ResourceRecord>,
    /// <p>Specifies the domain validation method.</p>
    #[doc(hidden)]
    pub validation_method: std::option::Option<crate::types::ValidationMethod>,
}
impl DomainValidation {
    /// <p>A fully qualified domain name (FQDN) in the certificate. For example, <code>www.example.com</code> or <code>example.com</code>. </p>
    pub fn domain_name(&self) -> std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>A list of email addresses that ACM used to send domain validation emails.</p>
    pub fn validation_emails(&self) -> std::option::Option<&[std::string::String]> {
        self.validation_emails.as_deref()
    }
    /// <p>The domain name that ACM used to send domain validation emails.</p>
    pub fn validation_domain(&self) -> std::option::Option<&str> {
        self.validation_domain.as_deref()
    }
    /// <p>The validation status of the domain name. This can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>PENDING_VALIDATION</code> </p> </li>
    /// <li> <p> <code></code>SUCCESS</p> </li>
    /// <li> <p> <code></code>FAILED</p> </li>
    /// </ul>
    pub fn validation_status(&self) -> std::option::Option<&crate::types::DomainStatus> {
        self.validation_status.as_ref()
    }
    /// <p>Contains the CNAME record that you add to your DNS database for domain validation. For more information, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate-dns.html">Use DNS to Validate Domain Ownership</a>.</p>
    /// <p>Note: The CNAME information that you need does not include the name of your domain. If you include  your domain name in the DNS database CNAME record, validation fails.  For example, if the name is "_a79865eb4cd1a6ab990a45779b4e0b96.yourdomain.com", only "_a79865eb4cd1a6ab990a45779b4e0b96" must be used.</p>
    pub fn resource_record(&self) -> std::option::Option<&crate::types::ResourceRecord> {
        self.resource_record.as_ref()
    }
    /// <p>Specifies the domain validation method.</p>
    pub fn validation_method(&self) -> std::option::Option<&crate::types::ValidationMethod> {
        self.validation_method.as_ref()
    }
}
impl DomainValidation {
    /// Creates a new builder-style object to manufacture [`DomainValidation`](crate::types::DomainValidation).
    pub fn builder() -> crate::types::builders::DomainValidationBuilder {
        crate::types::builders::DomainValidationBuilder::default()
    }
}

/// A builder for [`DomainValidation`](crate::types::DomainValidation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DomainValidationBuilder {
    pub(crate) domain_name: std::option::Option<std::string::String>,
    pub(crate) validation_emails: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) validation_domain: std::option::Option<std::string::String>,
    pub(crate) validation_status: std::option::Option<crate::types::DomainStatus>,
    pub(crate) resource_record: std::option::Option<crate::types::ResourceRecord>,
    pub(crate) validation_method: std::option::Option<crate::types::ValidationMethod>,
}
impl DomainValidationBuilder {
    /// <p>A fully qualified domain name (FQDN) in the certificate. For example, <code>www.example.com</code> or <code>example.com</code>. </p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_name = Some(input.into());
        self
    }
    /// <p>A fully qualified domain name (FQDN) in the certificate. For example, <code>www.example.com</code> or <code>example.com</code>. </p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// Appends an item to `validation_emails`.
    ///
    /// To override the contents of this collection use [`set_validation_emails`](Self::set_validation_emails).
    ///
    /// <p>A list of email addresses that ACM used to send domain validation emails.</p>
    pub fn validation_emails(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.validation_emails.unwrap_or_default();
        v.push(input.into());
        self.validation_emails = Some(v);
        self
    }
    /// <p>A list of email addresses that ACM used to send domain validation emails.</p>
    pub fn set_validation_emails(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.validation_emails = input;
        self
    }
    /// <p>The domain name that ACM used to send domain validation emails.</p>
    pub fn validation_domain(mut self, input: impl Into<std::string::String>) -> Self {
        self.validation_domain = Some(input.into());
        self
    }
    /// <p>The domain name that ACM used to send domain validation emails.</p>
    pub fn set_validation_domain(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.validation_domain = input;
        self
    }
    /// <p>The validation status of the domain name. This can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>PENDING_VALIDATION</code> </p> </li>
    /// <li> <p> <code></code>SUCCESS</p> </li>
    /// <li> <p> <code></code>FAILED</p> </li>
    /// </ul>
    pub fn validation_status(mut self, input: crate::types::DomainStatus) -> Self {
        self.validation_status = Some(input);
        self
    }
    /// <p>The validation status of the domain name. This can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>PENDING_VALIDATION</code> </p> </li>
    /// <li> <p> <code></code>SUCCESS</p> </li>
    /// <li> <p> <code></code>FAILED</p> </li>
    /// </ul>
    pub fn set_validation_status(
        mut self,
        input: std::option::Option<crate::types::DomainStatus>,
    ) -> Self {
        self.validation_status = input;
        self
    }
    /// <p>Contains the CNAME record that you add to your DNS database for domain validation. For more information, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate-dns.html">Use DNS to Validate Domain Ownership</a>.</p>
    /// <p>Note: The CNAME information that you need does not include the name of your domain. If you include  your domain name in the DNS database CNAME record, validation fails.  For example, if the name is "_a79865eb4cd1a6ab990a45779b4e0b96.yourdomain.com", only "_a79865eb4cd1a6ab990a45779b4e0b96" must be used.</p>
    pub fn resource_record(mut self, input: crate::types::ResourceRecord) -> Self {
        self.resource_record = Some(input);
        self
    }
    /// <p>Contains the CNAME record that you add to your DNS database for domain validation. For more information, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate-dns.html">Use DNS to Validate Domain Ownership</a>.</p>
    /// <p>Note: The CNAME information that you need does not include the name of your domain. If you include  your domain name in the DNS database CNAME record, validation fails.  For example, if the name is "_a79865eb4cd1a6ab990a45779b4e0b96.yourdomain.com", only "_a79865eb4cd1a6ab990a45779b4e0b96" must be used.</p>
    pub fn set_resource_record(
        mut self,
        input: std::option::Option<crate::types::ResourceRecord>,
    ) -> Self {
        self.resource_record = input;
        self
    }
    /// <p>Specifies the domain validation method.</p>
    pub fn validation_method(mut self, input: crate::types::ValidationMethod) -> Self {
        self.validation_method = Some(input);
        self
    }
    /// <p>Specifies the domain validation method.</p>
    pub fn set_validation_method(
        mut self,
        input: std::option::Option<crate::types::ValidationMethod>,
    ) -> Self {
        self.validation_method = input;
        self
    }
    /// Consumes the builder and constructs a [`DomainValidation`](crate::types::DomainValidation).
    pub fn build(self) -> crate::types::DomainValidation {
        crate::types::DomainValidation {
            domain_name: self.domain_name,
            validation_emails: self.validation_emails,
            validation_domain: self.validation_domain,
            validation_status: self.validation_status,
            resource_record: self.resource_record,
            validation_method: self.validation_method,
        }
    }
}
