// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `FailureReason`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let failurereason = unimplemented!();
/// match failurereason {
///     FailureReason::AdditionalVerificationRequired => { /* ... */ },
///     FailureReason::CaaError => { /* ... */ },
///     FailureReason::DomainNotAllowed => { /* ... */ },
///     FailureReason::DomainValidationDenied => { /* ... */ },
///     FailureReason::InvalidPublicDomain => { /* ... */ },
///     FailureReason::NoAvailableContacts => { /* ... */ },
///     FailureReason::Other => { /* ... */ },
///     FailureReason::PcaAccessDenied => { /* ... */ },
///     FailureReason::PcaInvalidArgs => { /* ... */ },
///     FailureReason::PcaInvalidArn => { /* ... */ },
///     FailureReason::PcaInvalidDuration => { /* ... */ },
///     FailureReason::PcaInvalidState => { /* ... */ },
///     FailureReason::PcaLimitExceeded => { /* ... */ },
///     FailureReason::PcaNameConstraintsValidation => { /* ... */ },
///     FailureReason::PcaRequestFailed => { /* ... */ },
///     FailureReason::PcaResourceNotFound => { /* ... */ },
///     FailureReason::SlrNotFound => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `failurereason` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `FailureReason::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `FailureReason::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `FailureReason::NewFeature` is defined.
/// Specifically, when `failurereason` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `FailureReason::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum FailureReason {
    #[allow(missing_docs)] // documentation missing in model
    AdditionalVerificationRequired,
    #[allow(missing_docs)] // documentation missing in model
    CaaError,
    #[allow(missing_docs)] // documentation missing in model
    DomainNotAllowed,
    #[allow(missing_docs)] // documentation missing in model
    DomainValidationDenied,
    #[allow(missing_docs)] // documentation missing in model
    InvalidPublicDomain,
    #[allow(missing_docs)] // documentation missing in model
    NoAvailableContacts,
    #[allow(missing_docs)] // documentation missing in model
    Other,
    #[allow(missing_docs)] // documentation missing in model
    PcaAccessDenied,
    #[allow(missing_docs)] // documentation missing in model
    PcaInvalidArgs,
    #[allow(missing_docs)] // documentation missing in model
    PcaInvalidArn,
    #[allow(missing_docs)] // documentation missing in model
    PcaInvalidDuration,
    #[allow(missing_docs)] // documentation missing in model
    PcaInvalidState,
    #[allow(missing_docs)] // documentation missing in model
    PcaLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    PcaNameConstraintsValidation,
    #[allow(missing_docs)] // documentation missing in model
    PcaRequestFailed,
    #[allow(missing_docs)] // documentation missing in model
    PcaResourceNotFound,
    #[allow(missing_docs)] // documentation missing in model
    SlrNotFound,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for FailureReason {
    fn from(s: &str) -> Self {
        match s {
            "ADDITIONAL_VERIFICATION_REQUIRED" => FailureReason::AdditionalVerificationRequired,
            "CAA_ERROR" => FailureReason::CaaError,
            "DOMAIN_NOT_ALLOWED" => FailureReason::DomainNotAllowed,
            "DOMAIN_VALIDATION_DENIED" => FailureReason::DomainValidationDenied,
            "INVALID_PUBLIC_DOMAIN" => FailureReason::InvalidPublicDomain,
            "NO_AVAILABLE_CONTACTS" => FailureReason::NoAvailableContacts,
            "OTHER" => FailureReason::Other,
            "PCA_ACCESS_DENIED" => FailureReason::PcaAccessDenied,
            "PCA_INVALID_ARGS" => FailureReason::PcaInvalidArgs,
            "PCA_INVALID_ARN" => FailureReason::PcaInvalidArn,
            "PCA_INVALID_DURATION" => FailureReason::PcaInvalidDuration,
            "PCA_INVALID_STATE" => FailureReason::PcaInvalidState,
            "PCA_LIMIT_EXCEEDED" => FailureReason::PcaLimitExceeded,
            "PCA_NAME_CONSTRAINTS_VALIDATION" => FailureReason::PcaNameConstraintsValidation,
            "PCA_REQUEST_FAILED" => FailureReason::PcaRequestFailed,
            "PCA_RESOURCE_NOT_FOUND" => FailureReason::PcaResourceNotFound,
            "SLR_NOT_FOUND" => FailureReason::SlrNotFound,
            other => {
                FailureReason::Unknown(crate::primitives::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for FailureReason {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(FailureReason::from(s))
    }
}
impl FailureReason {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            FailureReason::AdditionalVerificationRequired => "ADDITIONAL_VERIFICATION_REQUIRED",
            FailureReason::CaaError => "CAA_ERROR",
            FailureReason::DomainNotAllowed => "DOMAIN_NOT_ALLOWED",
            FailureReason::DomainValidationDenied => "DOMAIN_VALIDATION_DENIED",
            FailureReason::InvalidPublicDomain => "INVALID_PUBLIC_DOMAIN",
            FailureReason::NoAvailableContacts => "NO_AVAILABLE_CONTACTS",
            FailureReason::Other => "OTHER",
            FailureReason::PcaAccessDenied => "PCA_ACCESS_DENIED",
            FailureReason::PcaInvalidArgs => "PCA_INVALID_ARGS",
            FailureReason::PcaInvalidArn => "PCA_INVALID_ARN",
            FailureReason::PcaInvalidDuration => "PCA_INVALID_DURATION",
            FailureReason::PcaInvalidState => "PCA_INVALID_STATE",
            FailureReason::PcaLimitExceeded => "PCA_LIMIT_EXCEEDED",
            FailureReason::PcaNameConstraintsValidation => "PCA_NAME_CONSTRAINTS_VALIDATION",
            FailureReason::PcaRequestFailed => "PCA_REQUEST_FAILED",
            FailureReason::PcaResourceNotFound => "PCA_RESOURCE_NOT_FOUND",
            FailureReason::SlrNotFound => "SLR_NOT_FOUND",
            FailureReason::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ADDITIONAL_VERIFICATION_REQUIRED",
            "CAA_ERROR",
            "DOMAIN_NOT_ALLOWED",
            "DOMAIN_VALIDATION_DENIED",
            "INVALID_PUBLIC_DOMAIN",
            "NO_AVAILABLE_CONTACTS",
            "OTHER",
            "PCA_ACCESS_DENIED",
            "PCA_INVALID_ARGS",
            "PCA_INVALID_ARN",
            "PCA_INVALID_DURATION",
            "PCA_INVALID_STATE",
            "PCA_LIMIT_EXCEEDED",
            "PCA_NAME_CONSTRAINTS_VALIDATION",
            "PCA_REQUEST_FAILED",
            "PCA_RESOURCE_NOT_FOUND",
            "SLR_NOT_FOUND",
        ]
    }
}
impl AsRef<str> for FailureReason {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
