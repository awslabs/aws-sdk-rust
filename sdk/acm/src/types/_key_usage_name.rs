// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `KeyUsageName`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let keyusagename = unimplemented!();
/// match keyusagename {
///     KeyUsageName::Any => { /* ... */ },
///     KeyUsageName::CertificateSigning => { /* ... */ },
///     KeyUsageName::CrlSigning => { /* ... */ },
///     KeyUsageName::Custom => { /* ... */ },
///     KeyUsageName::DataEncipherment => { /* ... */ },
///     KeyUsageName::DecipherOnly => { /* ... */ },
///     KeyUsageName::DigitalSignature => { /* ... */ },
///     KeyUsageName::EnchiperOnly => { /* ... */ },
///     KeyUsageName::KeyAgreement => { /* ... */ },
///     KeyUsageName::KeyEncipherment => { /* ... */ },
///     KeyUsageName::NonRepudation => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `keyusagename` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `KeyUsageName::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `KeyUsageName::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `KeyUsageName::NewFeature` is defined.
/// Specifically, when `keyusagename` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `KeyUsageName::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum KeyUsageName {
    #[allow(missing_docs)] // documentation missing in model
    Any,
    #[allow(missing_docs)] // documentation missing in model
    CertificateSigning,
    #[allow(missing_docs)] // documentation missing in model
    CrlSigning,
    #[allow(missing_docs)] // documentation missing in model
    Custom,
    #[allow(missing_docs)] // documentation missing in model
    DataEncipherment,
    #[allow(missing_docs)] // documentation missing in model
    DecipherOnly,
    #[allow(missing_docs)] // documentation missing in model
    DigitalSignature,
    #[allow(missing_docs)] // documentation missing in model
    EnchiperOnly,
    #[allow(missing_docs)] // documentation missing in model
    KeyAgreement,
    #[allow(missing_docs)] // documentation missing in model
    KeyEncipherment,
    #[allow(missing_docs)] // documentation missing in model
    NonRepudation,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for KeyUsageName {
    fn from(s: &str) -> Self {
        match s {
            "ANY" => KeyUsageName::Any,
            "CERTIFICATE_SIGNING" => KeyUsageName::CertificateSigning,
            "CRL_SIGNING" => KeyUsageName::CrlSigning,
            "CUSTOM" => KeyUsageName::Custom,
            "DATA_ENCIPHERMENT" => KeyUsageName::DataEncipherment,
            "DECIPHER_ONLY" => KeyUsageName::DecipherOnly,
            "DIGITAL_SIGNATURE" => KeyUsageName::DigitalSignature,
            "ENCIPHER_ONLY" => KeyUsageName::EnchiperOnly,
            "KEY_AGREEMENT" => KeyUsageName::KeyAgreement,
            "KEY_ENCIPHERMENT" => KeyUsageName::KeyEncipherment,
            "NON_REPUDIATION" => KeyUsageName::NonRepudation,
            other => {
                KeyUsageName::Unknown(crate::primitives::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for KeyUsageName {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(KeyUsageName::from(s))
    }
}
impl KeyUsageName {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            KeyUsageName::Any => "ANY",
            KeyUsageName::CertificateSigning => "CERTIFICATE_SIGNING",
            KeyUsageName::CrlSigning => "CRL_SIGNING",
            KeyUsageName::Custom => "CUSTOM",
            KeyUsageName::DataEncipherment => "DATA_ENCIPHERMENT",
            KeyUsageName::DecipherOnly => "DECIPHER_ONLY",
            KeyUsageName::DigitalSignature => "DIGITAL_SIGNATURE",
            KeyUsageName::EnchiperOnly => "ENCIPHER_ONLY",
            KeyUsageName::KeyAgreement => "KEY_AGREEMENT",
            KeyUsageName::KeyEncipherment => "KEY_ENCIPHERMENT",
            KeyUsageName::NonRepudation => "NON_REPUDIATION",
            KeyUsageName::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ANY",
            "CERTIFICATE_SIGNING",
            "CRL_SIGNING",
            "CUSTOM",
            "DATA_ENCIPHERMENT",
            "DECIPHER_ONLY",
            "DIGITAL_SIGNATURE",
            "ENCIPHER_ONLY",
            "KEY_AGREEMENT",
            "KEY_ENCIPHERMENT",
            "NON_REPUDIATION",
        ]
    }
}
impl AsRef<str> for KeyUsageName {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
