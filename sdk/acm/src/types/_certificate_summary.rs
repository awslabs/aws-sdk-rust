// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This structure is returned in the response object of <code>ListCertificates</code> action. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CertificateSummary {
    /// <p>Amazon Resource Name (ARN) of the certificate. This is of the form:</p>
    /// <p> <code>arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012</code> </p>
    /// <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a>.</p>
    #[doc(hidden)]
    pub certificate_arn: std::option::Option<std::string::String>,
    /// <p>Fully qualified domain name (FQDN), such as www.example.com or example.com, for the certificate.</p>
    #[doc(hidden)]
    pub domain_name: std::option::Option<std::string::String>,
    /// <p>One or more domain names (subject alternative names) included in the certificate. This list contains the domain names that are bound to the public key that is contained in the certificate. The subject alternative names include the canonical domain name (CN) of the certificate and additional domain names that can be used to connect to the website. </p>
    /// <p>When called by <a href="https://docs.aws.amazon.com/acm/latestAPIReference/API_ListCertificates.html">ListCertificates</a>, this parameter will only return the first 100 subject alternative names included in the certificate. To display the full list of subject alternative names, use <a href="https://docs.aws.amazon.com/acm/latestAPIReference/API_DescribeCertificate.html">DescribeCertificate</a>.</p>
    #[doc(hidden)]
    pub subject_alternative_name_summaries: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>When called by <a href="https://docs.aws.amazon.com/acm/latestAPIReference/API_ListCertificates.html">ListCertificates</a>, indicates whether the full list of subject alternative names has been included in the response. If false, the response includes all of the subject alternative names included in the certificate. If true, the response only includes the first 100 subject alternative names included in the certificate. To display the full list of subject alternative names, use <a href="https://docs.aws.amazon.com/acm/latestAPIReference/API_DescribeCertificate.html">DescribeCertificate</a>.</p>
    #[doc(hidden)]
    pub has_additional_subject_alternative_names: std::option::Option<bool>,
    /// <p>The status of the certificate.</p>
    /// <p>A certificate enters status PENDING_VALIDATION upon being requested, unless it fails for any of the reasons given in the troubleshooting topic <a href="https://docs.aws.amazon.com/acm/latest/userguide/troubleshooting-failed.html">Certificate request fails</a>. ACM makes repeated attempts to validate a certificate for 72 hours and then times out. If a certificate shows status FAILED or VALIDATION_TIMED_OUT, delete the request, correct the issue with <a href="https://docs.aws.amazon.com/acm/latest/userguide/dns-validation.html">DNS validation</a> or <a href="https://docs.aws.amazon.com/acm/latest/userguide/email-validation.html">Email validation</a>, and try again. If validation succeeds, the certificate enters status ISSUED. </p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::CertificateStatus>,
    /// <p>The source of the certificate. For certificates provided by ACM, this value is <code>AMAZON_ISSUED</code>. For certificates that you imported with <code>ImportCertificate</code>, this value is <code>IMPORTED</code>. ACM does not provide <a href="https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html">managed renewal</a> for imported certificates. For more information about the differences between certificates that you import and those that ACM provides, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html">Importing Certificates</a> in the <i>Certificate Manager User Guide</i>. </p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::CertificateType>,
    /// <p>The algorithm that was used to generate the public-private key pair.</p>
    #[doc(hidden)]
    pub key_algorithm: std::option::Option<crate::types::KeyAlgorithm>,
    /// <p>A list of Key Usage X.509 v3 extension objects. Each object is a string value that identifies the purpose of the public key contained in the certificate. Possible extension values include DIGITAL_SIGNATURE, KEY_ENCHIPHERMENT, NON_REPUDIATION, and more.</p>
    #[doc(hidden)]
    pub key_usages: std::option::Option<std::vec::Vec<crate::types::KeyUsageName>>,
    /// <p>Contains a list of Extended Key Usage X.509 v3 extension objects. Each object specifies a purpose for which the certificate public key can be used and consists of a name and an object identifier (OID). </p>
    #[doc(hidden)]
    pub extended_key_usages: std::option::Option<std::vec::Vec<crate::types::ExtendedKeyUsageName>>,
    /// <p>Indicates whether the certificate is currently in use by any Amazon Web Services resources.</p>
    #[doc(hidden)]
    pub in_use: std::option::Option<bool>,
    /// <p>Indicates whether the certificate has been exported. This value exists only when the certificate type is <code>PRIVATE</code>.</p>
    #[doc(hidden)]
    pub exported: std::option::Option<bool>,
    /// <p>Specifies whether the certificate is eligible for renewal. At this time, only exported private certificates can be renewed with the <code>RenewCertificate</code> command.</p>
    #[doc(hidden)]
    pub renewal_eligibility: std::option::Option<crate::types::RenewalEligibility>,
    /// <p>The time before which the certificate is not valid.</p>
    #[doc(hidden)]
    pub not_before: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time after which the certificate is not valid.</p>
    #[doc(hidden)]
    pub not_after: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time at which the certificate was requested.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time at which the certificate was issued. This value exists only when the certificate type is <code>AMAZON_ISSUED</code>. </p>
    #[doc(hidden)]
    pub issued_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time when the certificate was imported. This value exists only when the certificate type is <code>IMPORTED</code>. </p>
    #[doc(hidden)]
    pub imported_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time at which the certificate was revoked. This value exists only when the certificate status is <code>REVOKED</code>. </p>
    #[doc(hidden)]
    pub revoked_at: std::option::Option<aws_smithy_types::DateTime>,
}
impl CertificateSummary {
    /// <p>Amazon Resource Name (ARN) of the certificate. This is of the form:</p>
    /// <p> <code>arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012</code> </p>
    /// <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a>.</p>
    pub fn certificate_arn(&self) -> std::option::Option<&str> {
        self.certificate_arn.as_deref()
    }
    /// <p>Fully qualified domain name (FQDN), such as www.example.com or example.com, for the certificate.</p>
    pub fn domain_name(&self) -> std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>One or more domain names (subject alternative names) included in the certificate. This list contains the domain names that are bound to the public key that is contained in the certificate. The subject alternative names include the canonical domain name (CN) of the certificate and additional domain names that can be used to connect to the website. </p>
    /// <p>When called by <a href="https://docs.aws.amazon.com/acm/latestAPIReference/API_ListCertificates.html">ListCertificates</a>, this parameter will only return the first 100 subject alternative names included in the certificate. To display the full list of subject alternative names, use <a href="https://docs.aws.amazon.com/acm/latestAPIReference/API_DescribeCertificate.html">DescribeCertificate</a>.</p>
    pub fn subject_alternative_name_summaries(
        &self,
    ) -> std::option::Option<&[std::string::String]> {
        self.subject_alternative_name_summaries.as_deref()
    }
    /// <p>When called by <a href="https://docs.aws.amazon.com/acm/latestAPIReference/API_ListCertificates.html">ListCertificates</a>, indicates whether the full list of subject alternative names has been included in the response. If false, the response includes all of the subject alternative names included in the certificate. If true, the response only includes the first 100 subject alternative names included in the certificate. To display the full list of subject alternative names, use <a href="https://docs.aws.amazon.com/acm/latestAPIReference/API_DescribeCertificate.html">DescribeCertificate</a>.</p>
    pub fn has_additional_subject_alternative_names(&self) -> std::option::Option<bool> {
        self.has_additional_subject_alternative_names
    }
    /// <p>The status of the certificate.</p>
    /// <p>A certificate enters status PENDING_VALIDATION upon being requested, unless it fails for any of the reasons given in the troubleshooting topic <a href="https://docs.aws.amazon.com/acm/latest/userguide/troubleshooting-failed.html">Certificate request fails</a>. ACM makes repeated attempts to validate a certificate for 72 hours and then times out. If a certificate shows status FAILED or VALIDATION_TIMED_OUT, delete the request, correct the issue with <a href="https://docs.aws.amazon.com/acm/latest/userguide/dns-validation.html">DNS validation</a> or <a href="https://docs.aws.amazon.com/acm/latest/userguide/email-validation.html">Email validation</a>, and try again. If validation succeeds, the certificate enters status ISSUED. </p>
    pub fn status(&self) -> std::option::Option<&crate::types::CertificateStatus> {
        self.status.as_ref()
    }
    /// <p>The source of the certificate. For certificates provided by ACM, this value is <code>AMAZON_ISSUED</code>. For certificates that you imported with <code>ImportCertificate</code>, this value is <code>IMPORTED</code>. ACM does not provide <a href="https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html">managed renewal</a> for imported certificates. For more information about the differences between certificates that you import and those that ACM provides, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html">Importing Certificates</a> in the <i>Certificate Manager User Guide</i>. </p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::CertificateType> {
        self.r#type.as_ref()
    }
    /// <p>The algorithm that was used to generate the public-private key pair.</p>
    pub fn key_algorithm(&self) -> std::option::Option<&crate::types::KeyAlgorithm> {
        self.key_algorithm.as_ref()
    }
    /// <p>A list of Key Usage X.509 v3 extension objects. Each object is a string value that identifies the purpose of the public key contained in the certificate. Possible extension values include DIGITAL_SIGNATURE, KEY_ENCHIPHERMENT, NON_REPUDIATION, and more.</p>
    pub fn key_usages(&self) -> std::option::Option<&[crate::types::KeyUsageName]> {
        self.key_usages.as_deref()
    }
    /// <p>Contains a list of Extended Key Usage X.509 v3 extension objects. Each object specifies a purpose for which the certificate public key can be used and consists of a name and an object identifier (OID). </p>
    pub fn extended_key_usages(
        &self,
    ) -> std::option::Option<&[crate::types::ExtendedKeyUsageName]> {
        self.extended_key_usages.as_deref()
    }
    /// <p>Indicates whether the certificate is currently in use by any Amazon Web Services resources.</p>
    pub fn in_use(&self) -> std::option::Option<bool> {
        self.in_use
    }
    /// <p>Indicates whether the certificate has been exported. This value exists only when the certificate type is <code>PRIVATE</code>.</p>
    pub fn exported(&self) -> std::option::Option<bool> {
        self.exported
    }
    /// <p>Specifies whether the certificate is eligible for renewal. At this time, only exported private certificates can be renewed with the <code>RenewCertificate</code> command.</p>
    pub fn renewal_eligibility(&self) -> std::option::Option<&crate::types::RenewalEligibility> {
        self.renewal_eligibility.as_ref()
    }
    /// <p>The time before which the certificate is not valid.</p>
    pub fn not_before(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.not_before.as_ref()
    }
    /// <p>The time after which the certificate is not valid.</p>
    pub fn not_after(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.not_after.as_ref()
    }
    /// <p>The time at which the certificate was requested.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The time at which the certificate was issued. This value exists only when the certificate type is <code>AMAZON_ISSUED</code>. </p>
    pub fn issued_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.issued_at.as_ref()
    }
    /// <p>The date and time when the certificate was imported. This value exists only when the certificate type is <code>IMPORTED</code>. </p>
    pub fn imported_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.imported_at.as_ref()
    }
    /// <p>The time at which the certificate was revoked. This value exists only when the certificate status is <code>REVOKED</code>. </p>
    pub fn revoked_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.revoked_at.as_ref()
    }
}
impl CertificateSummary {
    /// Creates a new builder-style object to manufacture [`CertificateSummary`](crate::types::CertificateSummary).
    pub fn builder() -> crate::types::builders::CertificateSummaryBuilder {
        crate::types::builders::CertificateSummaryBuilder::default()
    }
}

/// A builder for [`CertificateSummary`](crate::types::CertificateSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CertificateSummaryBuilder {
    pub(crate) certificate_arn: std::option::Option<std::string::String>,
    pub(crate) domain_name: std::option::Option<std::string::String>,
    pub(crate) subject_alternative_name_summaries:
        std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) has_additional_subject_alternative_names: std::option::Option<bool>,
    pub(crate) status: std::option::Option<crate::types::CertificateStatus>,
    pub(crate) r#type: std::option::Option<crate::types::CertificateType>,
    pub(crate) key_algorithm: std::option::Option<crate::types::KeyAlgorithm>,
    pub(crate) key_usages: std::option::Option<std::vec::Vec<crate::types::KeyUsageName>>,
    pub(crate) extended_key_usages:
        std::option::Option<std::vec::Vec<crate::types::ExtendedKeyUsageName>>,
    pub(crate) in_use: std::option::Option<bool>,
    pub(crate) exported: std::option::Option<bool>,
    pub(crate) renewal_eligibility: std::option::Option<crate::types::RenewalEligibility>,
    pub(crate) not_before: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) not_after: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) issued_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) imported_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) revoked_at: std::option::Option<aws_smithy_types::DateTime>,
}
impl CertificateSummaryBuilder {
    /// <p>Amazon Resource Name (ARN) of the certificate. This is of the form:</p>
    /// <p> <code>arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012</code> </p>
    /// <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a>.</p>
    pub fn certificate_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.certificate_arn = Some(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) of the certificate. This is of the form:</p>
    /// <p> <code>arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012</code> </p>
    /// <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a>.</p>
    pub fn set_certificate_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.certificate_arn = input;
        self
    }
    /// <p>Fully qualified domain name (FQDN), such as www.example.com or example.com, for the certificate.</p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_name = Some(input.into());
        self
    }
    /// <p>Fully qualified domain name (FQDN), such as www.example.com or example.com, for the certificate.</p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// Appends an item to `subject_alternative_name_summaries`.
    ///
    /// To override the contents of this collection use [`set_subject_alternative_name_summaries`](Self::set_subject_alternative_name_summaries).
    ///
    /// <p>One or more domain names (subject alternative names) included in the certificate. This list contains the domain names that are bound to the public key that is contained in the certificate. The subject alternative names include the canonical domain name (CN) of the certificate and additional domain names that can be used to connect to the website. </p>
    /// <p>When called by <a href="https://docs.aws.amazon.com/acm/latestAPIReference/API_ListCertificates.html">ListCertificates</a>, this parameter will only return the first 100 subject alternative names included in the certificate. To display the full list of subject alternative names, use <a href="https://docs.aws.amazon.com/acm/latestAPIReference/API_DescribeCertificate.html">DescribeCertificate</a>.</p>
    pub fn subject_alternative_name_summaries(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        let mut v = self.subject_alternative_name_summaries.unwrap_or_default();
        v.push(input.into());
        self.subject_alternative_name_summaries = Some(v);
        self
    }
    /// <p>One or more domain names (subject alternative names) included in the certificate. This list contains the domain names that are bound to the public key that is contained in the certificate. The subject alternative names include the canonical domain name (CN) of the certificate and additional domain names that can be used to connect to the website. </p>
    /// <p>When called by <a href="https://docs.aws.amazon.com/acm/latestAPIReference/API_ListCertificates.html">ListCertificates</a>, this parameter will only return the first 100 subject alternative names included in the certificate. To display the full list of subject alternative names, use <a href="https://docs.aws.amazon.com/acm/latestAPIReference/API_DescribeCertificate.html">DescribeCertificate</a>.</p>
    pub fn set_subject_alternative_name_summaries(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.subject_alternative_name_summaries = input;
        self
    }
    /// <p>When called by <a href="https://docs.aws.amazon.com/acm/latestAPIReference/API_ListCertificates.html">ListCertificates</a>, indicates whether the full list of subject alternative names has been included in the response. If false, the response includes all of the subject alternative names included in the certificate. If true, the response only includes the first 100 subject alternative names included in the certificate. To display the full list of subject alternative names, use <a href="https://docs.aws.amazon.com/acm/latestAPIReference/API_DescribeCertificate.html">DescribeCertificate</a>.</p>
    pub fn has_additional_subject_alternative_names(mut self, input: bool) -> Self {
        self.has_additional_subject_alternative_names = Some(input);
        self
    }
    /// <p>When called by <a href="https://docs.aws.amazon.com/acm/latestAPIReference/API_ListCertificates.html">ListCertificates</a>, indicates whether the full list of subject alternative names has been included in the response. If false, the response includes all of the subject alternative names included in the certificate. If true, the response only includes the first 100 subject alternative names included in the certificate. To display the full list of subject alternative names, use <a href="https://docs.aws.amazon.com/acm/latestAPIReference/API_DescribeCertificate.html">DescribeCertificate</a>.</p>
    pub fn set_has_additional_subject_alternative_names(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.has_additional_subject_alternative_names = input;
        self
    }
    /// <p>The status of the certificate.</p>
    /// <p>A certificate enters status PENDING_VALIDATION upon being requested, unless it fails for any of the reasons given in the troubleshooting topic <a href="https://docs.aws.amazon.com/acm/latest/userguide/troubleshooting-failed.html">Certificate request fails</a>. ACM makes repeated attempts to validate a certificate for 72 hours and then times out. If a certificate shows status FAILED or VALIDATION_TIMED_OUT, delete the request, correct the issue with <a href="https://docs.aws.amazon.com/acm/latest/userguide/dns-validation.html">DNS validation</a> or <a href="https://docs.aws.amazon.com/acm/latest/userguide/email-validation.html">Email validation</a>, and try again. If validation succeeds, the certificate enters status ISSUED. </p>
    pub fn status(mut self, input: crate::types::CertificateStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the certificate.</p>
    /// <p>A certificate enters status PENDING_VALIDATION upon being requested, unless it fails for any of the reasons given in the troubleshooting topic <a href="https://docs.aws.amazon.com/acm/latest/userguide/troubleshooting-failed.html">Certificate request fails</a>. ACM makes repeated attempts to validate a certificate for 72 hours and then times out. If a certificate shows status FAILED or VALIDATION_TIMED_OUT, delete the request, correct the issue with <a href="https://docs.aws.amazon.com/acm/latest/userguide/dns-validation.html">DNS validation</a> or <a href="https://docs.aws.amazon.com/acm/latest/userguide/email-validation.html">Email validation</a>, and try again. If validation succeeds, the certificate enters status ISSUED. </p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::CertificateStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The source of the certificate. For certificates provided by ACM, this value is <code>AMAZON_ISSUED</code>. For certificates that you imported with <code>ImportCertificate</code>, this value is <code>IMPORTED</code>. ACM does not provide <a href="https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html">managed renewal</a> for imported certificates. For more information about the differences between certificates that you import and those that ACM provides, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html">Importing Certificates</a> in the <i>Certificate Manager User Guide</i>. </p>
    pub fn r#type(mut self, input: crate::types::CertificateType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The source of the certificate. For certificates provided by ACM, this value is <code>AMAZON_ISSUED</code>. For certificates that you imported with <code>ImportCertificate</code>, this value is <code>IMPORTED</code>. ACM does not provide <a href="https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html">managed renewal</a> for imported certificates. For more information about the differences between certificates that you import and those that ACM provides, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html">Importing Certificates</a> in the <i>Certificate Manager User Guide</i>. </p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::CertificateType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The algorithm that was used to generate the public-private key pair.</p>
    pub fn key_algorithm(mut self, input: crate::types::KeyAlgorithm) -> Self {
        self.key_algorithm = Some(input);
        self
    }
    /// <p>The algorithm that was used to generate the public-private key pair.</p>
    pub fn set_key_algorithm(
        mut self,
        input: std::option::Option<crate::types::KeyAlgorithm>,
    ) -> Self {
        self.key_algorithm = input;
        self
    }
    /// Appends an item to `key_usages`.
    ///
    /// To override the contents of this collection use [`set_key_usages`](Self::set_key_usages).
    ///
    /// <p>A list of Key Usage X.509 v3 extension objects. Each object is a string value that identifies the purpose of the public key contained in the certificate. Possible extension values include DIGITAL_SIGNATURE, KEY_ENCHIPHERMENT, NON_REPUDIATION, and more.</p>
    pub fn key_usages(mut self, input: crate::types::KeyUsageName) -> Self {
        let mut v = self.key_usages.unwrap_or_default();
        v.push(input);
        self.key_usages = Some(v);
        self
    }
    /// <p>A list of Key Usage X.509 v3 extension objects. Each object is a string value that identifies the purpose of the public key contained in the certificate. Possible extension values include DIGITAL_SIGNATURE, KEY_ENCHIPHERMENT, NON_REPUDIATION, and more.</p>
    pub fn set_key_usages(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::KeyUsageName>>,
    ) -> Self {
        self.key_usages = input;
        self
    }
    /// Appends an item to `extended_key_usages`.
    ///
    /// To override the contents of this collection use [`set_extended_key_usages`](Self::set_extended_key_usages).
    ///
    /// <p>Contains a list of Extended Key Usage X.509 v3 extension objects. Each object specifies a purpose for which the certificate public key can be used and consists of a name and an object identifier (OID). </p>
    pub fn extended_key_usages(mut self, input: crate::types::ExtendedKeyUsageName) -> Self {
        let mut v = self.extended_key_usages.unwrap_or_default();
        v.push(input);
        self.extended_key_usages = Some(v);
        self
    }
    /// <p>Contains a list of Extended Key Usage X.509 v3 extension objects. Each object specifies a purpose for which the certificate public key can be used and consists of a name and an object identifier (OID). </p>
    pub fn set_extended_key_usages(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ExtendedKeyUsageName>>,
    ) -> Self {
        self.extended_key_usages = input;
        self
    }
    /// <p>Indicates whether the certificate is currently in use by any Amazon Web Services resources.</p>
    pub fn in_use(mut self, input: bool) -> Self {
        self.in_use = Some(input);
        self
    }
    /// <p>Indicates whether the certificate is currently in use by any Amazon Web Services resources.</p>
    pub fn set_in_use(mut self, input: std::option::Option<bool>) -> Self {
        self.in_use = input;
        self
    }
    /// <p>Indicates whether the certificate has been exported. This value exists only when the certificate type is <code>PRIVATE</code>.</p>
    pub fn exported(mut self, input: bool) -> Self {
        self.exported = Some(input);
        self
    }
    /// <p>Indicates whether the certificate has been exported. This value exists only when the certificate type is <code>PRIVATE</code>.</p>
    pub fn set_exported(mut self, input: std::option::Option<bool>) -> Self {
        self.exported = input;
        self
    }
    /// <p>Specifies whether the certificate is eligible for renewal. At this time, only exported private certificates can be renewed with the <code>RenewCertificate</code> command.</p>
    pub fn renewal_eligibility(mut self, input: crate::types::RenewalEligibility) -> Self {
        self.renewal_eligibility = Some(input);
        self
    }
    /// <p>Specifies whether the certificate is eligible for renewal. At this time, only exported private certificates can be renewed with the <code>RenewCertificate</code> command.</p>
    pub fn set_renewal_eligibility(
        mut self,
        input: std::option::Option<crate::types::RenewalEligibility>,
    ) -> Self {
        self.renewal_eligibility = input;
        self
    }
    /// <p>The time before which the certificate is not valid.</p>
    pub fn not_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.not_before = Some(input);
        self
    }
    /// <p>The time before which the certificate is not valid.</p>
    pub fn set_not_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.not_before = input;
        self
    }
    /// <p>The time after which the certificate is not valid.</p>
    pub fn not_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.not_after = Some(input);
        self
    }
    /// <p>The time after which the certificate is not valid.</p>
    pub fn set_not_after(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.not_after = input;
        self
    }
    /// <p>The time at which the certificate was requested.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The time at which the certificate was requested.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The time at which the certificate was issued. This value exists only when the certificate type is <code>AMAZON_ISSUED</code>. </p>
    pub fn issued_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.issued_at = Some(input);
        self
    }
    /// <p>The time at which the certificate was issued. This value exists only when the certificate type is <code>AMAZON_ISSUED</code>. </p>
    pub fn set_issued_at(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.issued_at = input;
        self
    }
    /// <p>The date and time when the certificate was imported. This value exists only when the certificate type is <code>IMPORTED</code>. </p>
    pub fn imported_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.imported_at = Some(input);
        self
    }
    /// <p>The date and time when the certificate was imported. This value exists only when the certificate type is <code>IMPORTED</code>. </p>
    pub fn set_imported_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.imported_at = input;
        self
    }
    /// <p>The time at which the certificate was revoked. This value exists only when the certificate status is <code>REVOKED</code>. </p>
    pub fn revoked_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.revoked_at = Some(input);
        self
    }
    /// <p>The time at which the certificate was revoked. This value exists only when the certificate status is <code>REVOKED</code>. </p>
    pub fn set_revoked_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.revoked_at = input;
        self
    }
    /// Consumes the builder and constructs a [`CertificateSummary`](crate::types::CertificateSummary).
    pub fn build(self) -> crate::types::CertificateSummary {
        crate::types::CertificateSummary {
            certificate_arn: self.certificate_arn,
            domain_name: self.domain_name,
            subject_alternative_name_summaries: self.subject_alternative_name_summaries,
            has_additional_subject_alternative_names: self.has_additional_subject_alternative_names,
            status: self.status,
            r#type: self.r#type,
            key_algorithm: self.key_algorithm,
            key_usages: self.key_usages,
            extended_key_usages: self.extended_key_usages,
            in_use: self.in_use,
            exported: self.exported,
            renewal_eligibility: self.renewal_eligibility,
            not_before: self.not_before,
            not_after: self.not_after,
            created_at: self.created_at,
            issued_at: self.issued_at,
            imported_at: self.imported_at,
            revoked_at: self.revoked_at,
        }
    }
}
