// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Structure that contains options for your certificate. Currently, you can use this only to specify whether to opt in to or out of certificate transparency logging. Some browsers require that public certificates issued for your domain be recorded in a log. Certificates that are not logged typically generate a browser error. Transparency makes it possible for you to detect SSL/TLS certificates that have been mistakenly or maliciously issued for your domain. For general information, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/acm-concepts.html#concept-transparency">Certificate Transparency Logging</a>. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CertificateOptions {
    /// <p>You can opt out of certificate transparency logging by specifying the <code>DISABLED</code> option. Opt in by specifying <code>ENABLED</code>. </p>
    #[doc(hidden)]
    pub certificate_transparency_logging_preference:
        std::option::Option<crate::types::CertificateTransparencyLoggingPreference>,
}
impl CertificateOptions {
    /// <p>You can opt out of certificate transparency logging by specifying the <code>DISABLED</code> option. Opt in by specifying <code>ENABLED</code>. </p>
    pub fn certificate_transparency_logging_preference(
        &self,
    ) -> std::option::Option<&crate::types::CertificateTransparencyLoggingPreference> {
        self.certificate_transparency_logging_preference.as_ref()
    }
}
impl CertificateOptions {
    /// Creates a new builder-style object to manufacture [`CertificateOptions`](crate::types::CertificateOptions).
    pub fn builder() -> crate::types::builders::CertificateOptionsBuilder {
        crate::types::builders::CertificateOptionsBuilder::default()
    }
}

/// A builder for [`CertificateOptions`](crate::types::CertificateOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CertificateOptionsBuilder {
    pub(crate) certificate_transparency_logging_preference:
        std::option::Option<crate::types::CertificateTransparencyLoggingPreference>,
}
impl CertificateOptionsBuilder {
    /// <p>You can opt out of certificate transparency logging by specifying the <code>DISABLED</code> option. Opt in by specifying <code>ENABLED</code>. </p>
    pub fn certificate_transparency_logging_preference(
        mut self,
        input: crate::types::CertificateTransparencyLoggingPreference,
    ) -> Self {
        self.certificate_transparency_logging_preference = Some(input);
        self
    }
    /// <p>You can opt out of certificate transparency logging by specifying the <code>DISABLED</code> option. Opt in by specifying <code>ENABLED</code>. </p>
    pub fn set_certificate_transparency_logging_preference(
        mut self,
        input: std::option::Option<crate::types::CertificateTransparencyLoggingPreference>,
    ) -> Self {
        self.certificate_transparency_logging_preference = input;
        self
    }
    /// Consumes the builder and constructs a [`CertificateOptions`](crate::types::CertificateOptions).
    pub fn build(self) -> crate::types::CertificateOptions {
        crate::types::CertificateOptions {
            certificate_transparency_logging_preference: self
                .certificate_transparency_logging_preference,
        }
    }
}
