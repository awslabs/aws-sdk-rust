// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::export_certificate::_export_certificate_output::ExportCertificateOutputBuilder;

pub use crate::operation::export_certificate::_export_certificate_input::ExportCertificateInputBuilder;

impl ExportCertificateInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::export_certificate::ExportCertificateOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::export_certificate::ExportCertificateError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.export_certificate();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ExportCertificate`.
///
/// <p>Exports a private certificate issued by a private certificate authority (CA) for use anywhere. The exported file contains the certificate, the certificate chain, and the encrypted private 2048-bit RSA key associated with the public key that is embedded in the certificate. For security, you must assign a passphrase for the private key when exporting it. </p>
/// <p>For information about exporting and formatting a certificate using the ACM console or CLI, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-export-private.html">Export a Private Certificate</a>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ExportCertificateFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::export_certificate::builders::ExportCertificateInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::export_certificate::ExportCertificateOutput,
        crate::operation::export_certificate::ExportCertificateError,
    > for ExportCertificateFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::export_certificate::ExportCertificateOutput,
            crate::operation::export_certificate::ExportCertificateError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ExportCertificateFluentBuilder {
    /// Creates a new `ExportCertificate`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ExportCertificate as a reference.
    pub fn as_input(&self) -> &crate::operation::export_certificate::builders::ExportCertificateInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::export_certificate::ExportCertificateOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::export_certificate::ExportCertificateError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::export_certificate::ExportCertificate::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::export_certificate::ExportCertificate::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::export_certificate::ExportCertificateOutput,
        crate::operation::export_certificate::ExportCertificateError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>An Amazon Resource Name (ARN) of the issued certificate. This must be of the form:</p>
    /// <p> <code>arn:aws:acm:region:account:certificate/12345678-1234-1234-1234-123456789012</code> </p>
    pub fn certificate_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.certificate_arn(input.into());
        self
    }
    /// <p>An Amazon Resource Name (ARN) of the issued certificate. This must be of the form:</p>
    /// <p> <code>arn:aws:acm:region:account:certificate/12345678-1234-1234-1234-123456789012</code> </p>
    pub fn set_certificate_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_certificate_arn(input);
        self
    }
    /// <p>An Amazon Resource Name (ARN) of the issued certificate. This must be of the form:</p>
    /// <p> <code>arn:aws:acm:region:account:certificate/12345678-1234-1234-1234-123456789012</code> </p>
    pub fn get_certificate_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_certificate_arn()
    }
    /// <p>Passphrase to associate with the encrypted exported private key. </p> <note>
    /// <p>When creating your passphrase, you can use any ASCII character except #, $, or %.</p>
    /// </note>
    /// <p>If you want to later decrypt the private key, you must have the passphrase. You can use the following OpenSSL command to decrypt a private key. After entering the command, you are prompted for the passphrase.</p>
    /// <p> <code>openssl rsa -in encrypted_key.pem -out decrypted_key.pem</code> </p>
    pub fn passphrase(mut self, input: ::aws_smithy_types::Blob) -> Self {
        self.inner = self.inner.passphrase(input);
        self
    }
    /// <p>Passphrase to associate with the encrypted exported private key. </p> <note>
    /// <p>When creating your passphrase, you can use any ASCII character except #, $, or %.</p>
    /// </note>
    /// <p>If you want to later decrypt the private key, you must have the passphrase. You can use the following OpenSSL command to decrypt a private key. After entering the command, you are prompted for the passphrase.</p>
    /// <p> <code>openssl rsa -in encrypted_key.pem -out decrypted_key.pem</code> </p>
    pub fn set_passphrase(mut self, input: ::std::option::Option<::aws_smithy_types::Blob>) -> Self {
        self.inner = self.inner.set_passphrase(input);
        self
    }
    /// <p>Passphrase to associate with the encrypted exported private key. </p> <note>
    /// <p>When creating your passphrase, you can use any ASCII character except #, $, or %.</p>
    /// </note>
    /// <p>If you want to later decrypt the private key, you must have the passphrase. You can use the following OpenSSL command to decrypt a private key. After entering the command, you are prompted for the passphrase.</p>
    /// <p> <code>openssl rsa -in encrypted_key.pem -out decrypted_key.pem</code> </p>
    pub fn get_passphrase(&self) -> &::std::option::Option<::aws_smithy_types::Blob> {
        self.inner.get_passphrase()
    }
}
