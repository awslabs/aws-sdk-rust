// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResendValidationEmailInput {
    /// <p>String that contains the ARN of the requested certificate. The certificate ARN is generated and returned by the <code>RequestCertificate</code> action as soon as the request is made. By default, using this parameter causes email to be sent to all top-level domains you specified in the certificate request. The ARN must be of the form: </p>
    /// <p> <code>arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012</code> </p>
    #[doc(hidden)]
    pub certificate_arn: std::option::Option<std::string::String>,
    /// <p>The fully qualified domain name (FQDN) of the certificate that needs to be validated.</p>
    #[doc(hidden)]
    pub domain: std::option::Option<std::string::String>,
    /// <p>The base validation domain that will act as the suffix of the email addresses that are used to send the emails. This must be the same as the <code>Domain</code> value or a superdomain of the <code>Domain</code> value. For example, if you requested a certificate for <code>site.subdomain.example.com</code> and specify a <b>ValidationDomain</b> of <code>subdomain.example.com</code>, ACM sends email to the domain registrant, technical contact, and administrative contact in WHOIS and the following five addresses:</p>
    /// <ul>
    /// <li> <p>admin@subdomain.example.com</p> </li>
    /// <li> <p>administrator@subdomain.example.com</p> </li>
    /// <li> <p>hostmaster@subdomain.example.com</p> </li>
    /// <li> <p>postmaster@subdomain.example.com</p> </li>
    /// <li> <p>webmaster@subdomain.example.com</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub validation_domain: std::option::Option<std::string::String>,
}
impl ResendValidationEmailInput {
    /// <p>String that contains the ARN of the requested certificate. The certificate ARN is generated and returned by the <code>RequestCertificate</code> action as soon as the request is made. By default, using this parameter causes email to be sent to all top-level domains you specified in the certificate request. The ARN must be of the form: </p>
    /// <p> <code>arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012</code> </p>
    pub fn certificate_arn(&self) -> std::option::Option<&str> {
        self.certificate_arn.as_deref()
    }
    /// <p>The fully qualified domain name (FQDN) of the certificate that needs to be validated.</p>
    pub fn domain(&self) -> std::option::Option<&str> {
        self.domain.as_deref()
    }
    /// <p>The base validation domain that will act as the suffix of the email addresses that are used to send the emails. This must be the same as the <code>Domain</code> value or a superdomain of the <code>Domain</code> value. For example, if you requested a certificate for <code>site.subdomain.example.com</code> and specify a <b>ValidationDomain</b> of <code>subdomain.example.com</code>, ACM sends email to the domain registrant, technical contact, and administrative contact in WHOIS and the following five addresses:</p>
    /// <ul>
    /// <li> <p>admin@subdomain.example.com</p> </li>
    /// <li> <p>administrator@subdomain.example.com</p> </li>
    /// <li> <p>hostmaster@subdomain.example.com</p> </li>
    /// <li> <p>postmaster@subdomain.example.com</p> </li>
    /// <li> <p>webmaster@subdomain.example.com</p> </li>
    /// </ul>
    pub fn validation_domain(&self) -> std::option::Option<&str> {
        self.validation_domain.as_deref()
    }
}
impl ResendValidationEmailInput {
    /// Creates a new builder-style object to manufacture [`ResendValidationEmailInput`](crate::operation::resend_validation_email::ResendValidationEmailInput).
    pub fn builder(
    ) -> crate::operation::resend_validation_email::builders::ResendValidationEmailInputBuilder
    {
        crate::operation::resend_validation_email::builders::ResendValidationEmailInputBuilder::default()
    }
}

/// A builder for [`ResendValidationEmailInput`](crate::operation::resend_validation_email::ResendValidationEmailInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResendValidationEmailInputBuilder {
    pub(crate) certificate_arn: std::option::Option<std::string::String>,
    pub(crate) domain: std::option::Option<std::string::String>,
    pub(crate) validation_domain: std::option::Option<std::string::String>,
}
impl ResendValidationEmailInputBuilder {
    /// <p>String that contains the ARN of the requested certificate. The certificate ARN is generated and returned by the <code>RequestCertificate</code> action as soon as the request is made. By default, using this parameter causes email to be sent to all top-level domains you specified in the certificate request. The ARN must be of the form: </p>
    /// <p> <code>arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012</code> </p>
    pub fn certificate_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.certificate_arn = Some(input.into());
        self
    }
    /// <p>String that contains the ARN of the requested certificate. The certificate ARN is generated and returned by the <code>RequestCertificate</code> action as soon as the request is made. By default, using this parameter causes email to be sent to all top-level domains you specified in the certificate request. The ARN must be of the form: </p>
    /// <p> <code>arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012</code> </p>
    pub fn set_certificate_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.certificate_arn = input;
        self
    }
    /// <p>The fully qualified domain name (FQDN) of the certificate that needs to be validated.</p>
    pub fn domain(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain = Some(input.into());
        self
    }
    /// <p>The fully qualified domain name (FQDN) of the certificate that needs to be validated.</p>
    pub fn set_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// <p>The base validation domain that will act as the suffix of the email addresses that are used to send the emails. This must be the same as the <code>Domain</code> value or a superdomain of the <code>Domain</code> value. For example, if you requested a certificate for <code>site.subdomain.example.com</code> and specify a <b>ValidationDomain</b> of <code>subdomain.example.com</code>, ACM sends email to the domain registrant, technical contact, and administrative contact in WHOIS and the following five addresses:</p>
    /// <ul>
    /// <li> <p>admin@subdomain.example.com</p> </li>
    /// <li> <p>administrator@subdomain.example.com</p> </li>
    /// <li> <p>hostmaster@subdomain.example.com</p> </li>
    /// <li> <p>postmaster@subdomain.example.com</p> </li>
    /// <li> <p>webmaster@subdomain.example.com</p> </li>
    /// </ul>
    pub fn validation_domain(mut self, input: impl Into<std::string::String>) -> Self {
        self.validation_domain = Some(input.into());
        self
    }
    /// <p>The base validation domain that will act as the suffix of the email addresses that are used to send the emails. This must be the same as the <code>Domain</code> value or a superdomain of the <code>Domain</code> value. For example, if you requested a certificate for <code>site.subdomain.example.com</code> and specify a <b>ValidationDomain</b> of <code>subdomain.example.com</code>, ACM sends email to the domain registrant, technical contact, and administrative contact in WHOIS and the following five addresses:</p>
    /// <ul>
    /// <li> <p>admin@subdomain.example.com</p> </li>
    /// <li> <p>administrator@subdomain.example.com</p> </li>
    /// <li> <p>hostmaster@subdomain.example.com</p> </li>
    /// <li> <p>postmaster@subdomain.example.com</p> </li>
    /// <li> <p>webmaster@subdomain.example.com</p> </li>
    /// </ul>
    pub fn set_validation_domain(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.validation_domain = input;
        self
    }
    /// Consumes the builder and constructs a [`ResendValidationEmailInput`](crate::operation::resend_validation_email::ResendValidationEmailInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::resend_validation_email::ResendValidationEmailInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::resend_validation_email::ResendValidationEmailInput {
                certificate_arn: self.certificate_arn,
                domain: self.domain,
                validation_domain: self.validation_domain,
            },
        )
    }
}
