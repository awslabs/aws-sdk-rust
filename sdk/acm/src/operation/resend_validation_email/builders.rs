// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::resend_validation_email::_resend_validation_email_output::ResendValidationEmailOutputBuilder;

pub use crate::operation::resend_validation_email::_resend_validation_email_input::ResendValidationEmailInputBuilder;

impl ResendValidationEmailInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::resend_validation_email::ResendValidationEmailOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::resend_validation_email::ResendValidationEmailError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.resend_validation_email();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ResendValidationEmail`.
///
/// <p>Resends the email that requests domain ownership validation. The domain owner or an authorized representative must approve the ACM certificate before it can be issued. The certificate can be approved by clicking a link in the mail to navigate to the Amazon certificate approval website and then clicking <b>I Approve</b>. However, the validation email can be blocked by spam filters. Therefore, if you do not receive the original mail, you can request that the mail be resent within 72 hours of requesting the ACM certificate. If more than 72 hours have elapsed since your original request or since your last attempt to resend validation mail, you must request a new certificate. For more information about setting up your contact email addresses, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/setup-email.html">Configure Email for your Domain</a>. </p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ResendValidationEmailFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::resend_validation_email::builders::ResendValidationEmailInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::resend_validation_email::ResendValidationEmailOutput,
        crate::operation::resend_validation_email::ResendValidationEmailError,
    > for ResendValidationEmailFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::resend_validation_email::ResendValidationEmailOutput,
            crate::operation::resend_validation_email::ResendValidationEmailError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ResendValidationEmailFluentBuilder {
    /// Creates a new `ResendValidationEmail`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ResendValidationEmail as a reference.
    pub fn as_input(&self) -> &crate::operation::resend_validation_email::builders::ResendValidationEmailInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::resend_validation_email::ResendValidationEmailOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::resend_validation_email::ResendValidationEmailError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::resend_validation_email::ResendValidationEmail::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::resend_validation_email::ResendValidationEmail::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::resend_validation_email::ResendValidationEmailOutput,
        crate::operation::resend_validation_email::ResendValidationEmailError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>String that contains the ARN of the requested certificate. The certificate ARN is generated and returned by the <code>RequestCertificate</code> action as soon as the request is made. By default, using this parameter causes email to be sent to all top-level domains you specified in the certificate request. The ARN must be of the form: </p>
    /// <p> <code>arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012</code> </p>
    pub fn certificate_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.certificate_arn(input.into());
        self
    }
    /// <p>String that contains the ARN of the requested certificate. The certificate ARN is generated and returned by the <code>RequestCertificate</code> action as soon as the request is made. By default, using this parameter causes email to be sent to all top-level domains you specified in the certificate request. The ARN must be of the form: </p>
    /// <p> <code>arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012</code> </p>
    pub fn set_certificate_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_certificate_arn(input);
        self
    }
    /// <p>String that contains the ARN of the requested certificate. The certificate ARN is generated and returned by the <code>RequestCertificate</code> action as soon as the request is made. By default, using this parameter causes email to be sent to all top-level domains you specified in the certificate request. The ARN must be of the form: </p>
    /// <p> <code>arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012</code> </p>
    pub fn get_certificate_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_certificate_arn()
    }
    /// <p>The fully qualified domain name (FQDN) of the certificate that needs to be validated.</p>
    pub fn domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.domain(input.into());
        self
    }
    /// <p>The fully qualified domain name (FQDN) of the certificate that needs to be validated.</p>
    pub fn set_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_domain(input);
        self
    }
    /// <p>The fully qualified domain name (FQDN) of the certificate that needs to be validated.</p>
    pub fn get_domain(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_domain()
    }
    /// <p>The base validation domain that will act as the suffix of the email addresses that are used to send the emails. This must be the same as the <code>Domain</code> value or a superdomain of the <code>Domain</code> value. For example, if you requested a certificate for <code>site.subdomain.example.com</code> and specify a <b>ValidationDomain</b> of <code>subdomain.example.com</code>, ACM sends email to the domain registrant, technical contact, and administrative contact in WHOIS and the following five addresses:</p>
    /// <ul>
    /// <li> <p>admin@subdomain.example.com</p> </li>
    /// <li> <p>administrator@subdomain.example.com</p> </li>
    /// <li> <p>hostmaster@subdomain.example.com</p> </li>
    /// <li> <p>postmaster@subdomain.example.com</p> </li>
    /// <li> <p>webmaster@subdomain.example.com</p> </li>
    /// </ul>
    pub fn validation_domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.validation_domain(input.into());
        self
    }
    /// <p>The base validation domain that will act as the suffix of the email addresses that are used to send the emails. This must be the same as the <code>Domain</code> value or a superdomain of the <code>Domain</code> value. For example, if you requested a certificate for <code>site.subdomain.example.com</code> and specify a <b>ValidationDomain</b> of <code>subdomain.example.com</code>, ACM sends email to the domain registrant, technical contact, and administrative contact in WHOIS and the following five addresses:</p>
    /// <ul>
    /// <li> <p>admin@subdomain.example.com</p> </li>
    /// <li> <p>administrator@subdomain.example.com</p> </li>
    /// <li> <p>hostmaster@subdomain.example.com</p> </li>
    /// <li> <p>postmaster@subdomain.example.com</p> </li>
    /// <li> <p>webmaster@subdomain.example.com</p> </li>
    /// </ul>
    pub fn set_validation_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_validation_domain(input);
        self
    }
    /// <p>The base validation domain that will act as the suffix of the email addresses that are used to send the emails. This must be the same as the <code>Domain</code> value or a superdomain of the <code>Domain</code> value. For example, if you requested a certificate for <code>site.subdomain.example.com</code> and specify a <b>ValidationDomain</b> of <code>subdomain.example.com</code>, ACM sends email to the domain registrant, technical contact, and administrative contact in WHOIS and the following five addresses:</p>
    /// <ul>
    /// <li> <p>admin@subdomain.example.com</p> </li>
    /// <li> <p>administrator@subdomain.example.com</p> </li>
    /// <li> <p>hostmaster@subdomain.example.com</p> </li>
    /// <li> <p>postmaster@subdomain.example.com</p> </li>
    /// <li> <p>webmaster@subdomain.example.com</p> </li>
    /// </ul>
    pub fn get_validation_domain(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_validation_domain()
    }
}
