// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::import_certificate::_import_certificate_output::ImportCertificateOutputBuilder;

pub use crate::operation::import_certificate::_import_certificate_input::ImportCertificateInputBuilder;

/// Fluent builder constructing a request to `ImportCertificate`.
///
/// <p>Imports a certificate into Certificate Manager (ACM) to use with services that are integrated with ACM. Note that <a href="https://docs.aws.amazon.com/acm/latest/userguide/acm-services.html">integrated services</a> allow only certificate types and keys they support to be associated with their resources. Further, their support differs depending on whether the certificate is imported into IAM or into ACM. For more information, see the documentation for each service. For more information about importing certificates into ACM, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html">Importing Certificates</a> in the <i>Certificate Manager User Guide</i>. </p> <note>
/// <p>ACM does not provide <a href="https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html">managed renewal</a> for certificates that you import.</p>
/// </note>
/// <p>Note the following guidelines when importing third party certificates:</p>
/// <ul>
/// <li> <p>You must enter the private key that matches the certificate you are importing.</p> </li>
/// <li> <p>The private key must be unencrypted. You cannot import a private key that is protected by a password or a passphrase.</p> </li>
/// <li> <p>The private key must be no larger than 5 KB (5,120 bytes).</p> </li>
/// <li> <p>If the certificate you are importing is not self-signed, you must enter its certificate chain.</p> </li>
/// <li> <p>If a certificate chain is included, the issuer must be the subject of one of the certificates in the chain.</p> </li>
/// <li> <p>The certificate, private key, and certificate chain must be PEM-encoded.</p> </li>
/// <li> <p>The current time must be between the <code>Not Before</code> and <code>Not After</code> certificate fields.</p> </li>
/// <li> <p>The <code>Issuer</code> field must not be empty.</p> </li>
/// <li> <p>The OCSP authority URL, if present, must not exceed 1000 characters.</p> </li>
/// <li> <p>To import a new certificate, omit the <code>CertificateArn</code> argument. Include this argument only when you want to replace a previously imported certificate.</p> </li>
/// <li> <p>When you import a certificate by using the CLI, you must specify the certificate, the certificate chain, and the private key by their file names preceded by <code>fileb://</code>. For example, you can specify a certificate saved in the <code>C:\temp</code> folder as <code>fileb://C:\temp\certificate_to_import.pem</code>. If you are making an HTTP or HTTPS Query request, include these arguments as BLOBs. </p> </li>
/// <li> <p>When you import a certificate by using an SDK, you must specify the certificate, the certificate chain, and the private key files in the manner required by the programming language you're using. </p> </li>
/// <li> <p>The cryptographic algorithm of an imported certificate must match the algorithm of the signing CA. For example, if the signing CA key type is RSA, then the certificate key type must also be RSA.</p> </li>
/// </ul>
/// <p>This operation returns the <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Name (ARN)</a> of the imported certificate.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ImportCertificateFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::import_certificate::builders::ImportCertificateInputBuilder,
}
impl ImportCertificateFluentBuilder {
    /// Creates a new `ImportCertificate`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::import_certificate::ImportCertificate,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::import_certificate::ImportCertificateError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::import_certificate::ImportCertificateOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::import_certificate::ImportCertificateError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Name (ARN)</a> of an imported certificate to replace. To import a new certificate, omit this field. </p>
    pub fn certificate_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.certificate_arn(input.into());
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Name (ARN)</a> of an imported certificate to replace. To import a new certificate, omit this field. </p>
    pub fn set_certificate_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_certificate_arn(input);
        self
    }
    /// <p>The certificate to import.</p>
    pub fn certificate(mut self, input: aws_smithy_types::Blob) -> Self {
        self.inner = self.inner.certificate(input);
        self
    }
    /// <p>The certificate to import.</p>
    pub fn set_certificate(mut self, input: std::option::Option<aws_smithy_types::Blob>) -> Self {
        self.inner = self.inner.set_certificate(input);
        self
    }
    /// <p>The private key that matches the public key in the certificate.</p>
    pub fn private_key(mut self, input: aws_smithy_types::Blob) -> Self {
        self.inner = self.inner.private_key(input);
        self
    }
    /// <p>The private key that matches the public key in the certificate.</p>
    pub fn set_private_key(mut self, input: std::option::Option<aws_smithy_types::Blob>) -> Self {
        self.inner = self.inner.set_private_key(input);
        self
    }
    /// <p>The PEM encoded certificate chain.</p>
    pub fn certificate_chain(mut self, input: aws_smithy_types::Blob) -> Self {
        self.inner = self.inner.certificate_chain(input);
        self
    }
    /// <p>The PEM encoded certificate chain.</p>
    pub fn set_certificate_chain(
        mut self,
        input: std::option::Option<aws_smithy_types::Blob>,
    ) -> Self {
        self.inner = self.inner.set_certificate_chain(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>One or more resource tags to associate with the imported certificate. </p>
    /// <p>Note: You cannot apply tags when reimporting a certificate.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>One or more resource tags to associate with the imported certificate. </p>
    /// <p>Note: You cannot apply tags when reimporting a certificate.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}
