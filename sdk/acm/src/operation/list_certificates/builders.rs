// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_certificates::_list_certificates_output::ListCertificatesOutputBuilder;

pub use crate::operation::list_certificates::_list_certificates_input::ListCertificatesInputBuilder;

/// Fluent builder constructing a request to `ListCertificates`.
///
/// <p>Retrieves a list of certificate ARNs and domain names. You can request that only certificates that match a specific status be listed. You can also filter by specific attributes of the certificate. Default filtering returns only <code>RSA_2048</code> certificates. For more information, see <code>Filters</code>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListCertificatesFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_certificates::builders::ListCertificatesInputBuilder,
}
impl ListCertificatesFluentBuilder {
    /// Creates a new `ListCertificates`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::list_certificates::ListCertificates,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::list_certificates::ListCertificatesError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::list_certificates::ListCertificatesOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::list_certificates::ListCertificatesError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_certificates::paginator::ListCertificatesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::operation::list_certificates::paginator::ListCertificatesPaginator {
        crate::operation::list_certificates::paginator::ListCertificatesPaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// Appends an item to `CertificateStatuses`.
    ///
    /// To override the contents of this collection use [`set_certificate_statuses`](Self::set_certificate_statuses).
    ///
    /// <p>Filter the certificate list by status value.</p>
    pub fn certificate_statuses(mut self, input: crate::types::CertificateStatus) -> Self {
        self.inner = self.inner.certificate_statuses(input);
        self
    }
    /// <p>Filter the certificate list by status value.</p>
    pub fn set_certificate_statuses(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::CertificateStatus>>,
    ) -> Self {
        self.inner = self.inner.set_certificate_statuses(input);
        self
    }
    /// <p>Filter the certificate list. For more information, see the <code>Filters</code> structure.</p>
    pub fn includes(mut self, input: crate::types::Filters) -> Self {
        self.inner = self.inner.includes(input);
        self
    }
    /// <p>Filter the certificate list. For more information, see the <code>Filters</code> structure.</p>
    pub fn set_includes(mut self, input: std::option::Option<crate::types::Filters>) -> Self {
        self.inner = self.inner.set_includes(input);
        self
    }
    /// <p>Use this parameter only when paginating results and only in a subsequent request after you receive a response with truncated results. Set it to the value of <code>NextToken</code> from the response you just received.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>Use this parameter only when paginating results and only in a subsequent request after you receive a response with truncated results. Set it to the value of <code>NextToken</code> from the response you just received.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>Use this parameter when paginating results to specify the maximum number of items to return in the response. If additional items exist beyond the number you specify, the <code>NextToken</code> element is sent in the response. Use this <code>NextToken</code> value in a subsequent request to retrieve additional items.</p>
    pub fn max_items(mut self, input: i32) -> Self {
        self.inner = self.inner.max_items(input);
        self
    }
    /// <p>Use this parameter when paginating results to specify the maximum number of items to return in the response. If additional items exist beyond the number you specify, the <code>NextToken</code> element is sent in the response. Use this <code>NextToken</code> value in a subsequent request to retrieve additional items.</p>
    pub fn set_max_items(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_items(input);
        self
    }
    /// <p>Specifies the field to sort results by. If you specify <code>SortBy</code>, you must also specify <code>SortOrder</code>.</p>
    pub fn sort_by(mut self, input: crate::types::SortBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>Specifies the field to sort results by. If you specify <code>SortBy</code>, you must also specify <code>SortOrder</code>.</p>
    pub fn set_sort_by(mut self, input: std::option::Option<crate::types::SortBy>) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>Specifies the order of sorted results. If you specify <code>SortOrder</code>, you must also specify <code>SortBy</code>.</p>
    pub fn sort_order(mut self, input: crate::types::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>Specifies the order of sorted results. If you specify <code>SortOrder</code>, you must also specify <code>SortBy</code>.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::types::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
}
