// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListCertificatesInput {
    /// <p>Filter the certificate list by status value.</p>
    #[doc(hidden)]
    pub certificate_statuses: std::option::Option<std::vec::Vec<crate::types::CertificateStatus>>,
    /// <p>Filter the certificate list. For more information, see the <code>Filters</code> structure.</p>
    #[doc(hidden)]
    pub includes: std::option::Option<crate::types::Filters>,
    /// <p>Use this parameter only when paginating results and only in a subsequent request after you receive a response with truncated results. Set it to the value of <code>NextToken</code> from the response you just received.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Use this parameter when paginating results to specify the maximum number of items to return in the response. If additional items exist beyond the number you specify, the <code>NextToken</code> element is sent in the response. Use this <code>NextToken</code> value in a subsequent request to retrieve additional items.</p>
    #[doc(hidden)]
    pub max_items: std::option::Option<i32>,
    /// <p>Specifies the field to sort results by. If you specify <code>SortBy</code>, you must also specify <code>SortOrder</code>.</p>
    #[doc(hidden)]
    pub sort_by: std::option::Option<crate::types::SortBy>,
    /// <p>Specifies the order of sorted results. If you specify <code>SortOrder</code>, you must also specify <code>SortBy</code>.</p>
    #[doc(hidden)]
    pub sort_order: std::option::Option<crate::types::SortOrder>,
}
impl ListCertificatesInput {
    /// <p>Filter the certificate list by status value.</p>
    pub fn certificate_statuses(&self) -> std::option::Option<&[crate::types::CertificateStatus]> {
        self.certificate_statuses.as_deref()
    }
    /// <p>Filter the certificate list. For more information, see the <code>Filters</code> structure.</p>
    pub fn includes(&self) -> std::option::Option<&crate::types::Filters> {
        self.includes.as_ref()
    }
    /// <p>Use this parameter only when paginating results and only in a subsequent request after you receive a response with truncated results. Set it to the value of <code>NextToken</code> from the response you just received.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Use this parameter when paginating results to specify the maximum number of items to return in the response. If additional items exist beyond the number you specify, the <code>NextToken</code> element is sent in the response. Use this <code>NextToken</code> value in a subsequent request to retrieve additional items.</p>
    pub fn max_items(&self) -> std::option::Option<i32> {
        self.max_items
    }
    /// <p>Specifies the field to sort results by. If you specify <code>SortBy</code>, you must also specify <code>SortOrder</code>.</p>
    pub fn sort_by(&self) -> std::option::Option<&crate::types::SortBy> {
        self.sort_by.as_ref()
    }
    /// <p>Specifies the order of sorted results. If you specify <code>SortOrder</code>, you must also specify <code>SortBy</code>.</p>
    pub fn sort_order(&self) -> std::option::Option<&crate::types::SortOrder> {
        self.sort_order.as_ref()
    }
}
impl ListCertificatesInput {
    /// Creates a new builder-style object to manufacture [`ListCertificatesInput`](crate::operation::list_certificates::ListCertificatesInput).
    pub fn builder() -> crate::operation::list_certificates::builders::ListCertificatesInputBuilder
    {
        crate::operation::list_certificates::builders::ListCertificatesInputBuilder::default()
    }
}

/// A builder for [`ListCertificatesInput`](crate::operation::list_certificates::ListCertificatesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListCertificatesInputBuilder {
    pub(crate) certificate_statuses:
        std::option::Option<std::vec::Vec<crate::types::CertificateStatus>>,
    pub(crate) includes: std::option::Option<crate::types::Filters>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_items: std::option::Option<i32>,
    pub(crate) sort_by: std::option::Option<crate::types::SortBy>,
    pub(crate) sort_order: std::option::Option<crate::types::SortOrder>,
}
impl ListCertificatesInputBuilder {
    /// Appends an item to `certificate_statuses`.
    ///
    /// To override the contents of this collection use [`set_certificate_statuses`](Self::set_certificate_statuses).
    ///
    /// <p>Filter the certificate list by status value.</p>
    pub fn certificate_statuses(mut self, input: crate::types::CertificateStatus) -> Self {
        let mut v = self.certificate_statuses.unwrap_or_default();
        v.push(input);
        self.certificate_statuses = Some(v);
        self
    }
    /// <p>Filter the certificate list by status value.</p>
    pub fn set_certificate_statuses(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::CertificateStatus>>,
    ) -> Self {
        self.certificate_statuses = input;
        self
    }
    /// <p>Filter the certificate list. For more information, see the <code>Filters</code> structure.</p>
    pub fn includes(mut self, input: crate::types::Filters) -> Self {
        self.includes = Some(input);
        self
    }
    /// <p>Filter the certificate list. For more information, see the <code>Filters</code> structure.</p>
    pub fn set_includes(mut self, input: std::option::Option<crate::types::Filters>) -> Self {
        self.includes = input;
        self
    }
    /// <p>Use this parameter only when paginating results and only in a subsequent request after you receive a response with truncated results. Set it to the value of <code>NextToken</code> from the response you just received.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>Use this parameter only when paginating results and only in a subsequent request after you receive a response with truncated results. Set it to the value of <code>NextToken</code> from the response you just received.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Use this parameter when paginating results to specify the maximum number of items to return in the response. If additional items exist beyond the number you specify, the <code>NextToken</code> element is sent in the response. Use this <code>NextToken</code> value in a subsequent request to retrieve additional items.</p>
    pub fn max_items(mut self, input: i32) -> Self {
        self.max_items = Some(input);
        self
    }
    /// <p>Use this parameter when paginating results to specify the maximum number of items to return in the response. If additional items exist beyond the number you specify, the <code>NextToken</code> element is sent in the response. Use this <code>NextToken</code> value in a subsequent request to retrieve additional items.</p>
    pub fn set_max_items(mut self, input: std::option::Option<i32>) -> Self {
        self.max_items = input;
        self
    }
    /// <p>Specifies the field to sort results by. If you specify <code>SortBy</code>, you must also specify <code>SortOrder</code>.</p>
    pub fn sort_by(mut self, input: crate::types::SortBy) -> Self {
        self.sort_by = Some(input);
        self
    }
    /// <p>Specifies the field to sort results by. If you specify <code>SortBy</code>, you must also specify <code>SortOrder</code>.</p>
    pub fn set_sort_by(mut self, input: std::option::Option<crate::types::SortBy>) -> Self {
        self.sort_by = input;
        self
    }
    /// <p>Specifies the order of sorted results. If you specify <code>SortOrder</code>, you must also specify <code>SortBy</code>.</p>
    pub fn sort_order(mut self, input: crate::types::SortOrder) -> Self {
        self.sort_order = Some(input);
        self
    }
    /// <p>Specifies the order of sorted results. If you specify <code>SortOrder</code>, you must also specify <code>SortBy</code>.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::types::SortOrder>) -> Self {
        self.sort_order = input;
        self
    }
    /// Consumes the builder and constructs a [`ListCertificatesInput`](crate::operation::list_certificates::ListCertificatesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_certificates::ListCertificatesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_certificates::ListCertificatesInput {
            certificate_statuses: self.certificate_statuses,
            includes: self.includes,
            next_token: self.next_token,
            max_items: self.max_items,
            sort_by: self.sort_by,
            sort_order: self.sort_order,
        })
    }
}
