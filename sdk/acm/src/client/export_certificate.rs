// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ExportCertificate`](crate::operation::export_certificate::builders::ExportCertificateFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`certificate_arn(impl Into<String>)`](crate::operation::export_certificate::builders::ExportCertificateFluentBuilder::certificate_arn) / [`set_certificate_arn(Option<String>)`](crate::operation::export_certificate::builders::ExportCertificateFluentBuilder::set_certificate_arn): <p>An Amazon Resource Name (ARN) of the issued certificate. This must be of the form:</p>  <p> <code>arn:aws:acm:region:account:certificate/12345678-1234-1234-1234-123456789012</code> </p>
    ///   - [`passphrase(Blob)`](crate::operation::export_certificate::builders::ExportCertificateFluentBuilder::passphrase) / [`set_passphrase(Option<Blob>)`](crate::operation::export_certificate::builders::ExportCertificateFluentBuilder::set_passphrase): <p>Passphrase to associate with the encrypted exported private key. </p> <note>   <p>When creating your passphrase, you can use any ASCII character except #, $, or %.</p>  </note>  <p>If you want to later decrypt the private key, you must have the passphrase. You can use the following OpenSSL command to decrypt a private key. After entering the command, you are prompted for the passphrase.</p>  <p> <code>openssl rsa -in encrypted_key.pem -out decrypted_key.pem</code> </p>
    /// - On success, responds with [`ExportCertificateOutput`](crate::operation::export_certificate::ExportCertificateOutput) with field(s):
    ///   - [`certificate(Option<String>)`](crate::operation::export_certificate::ExportCertificateOutput::certificate): <p>The base64 PEM-encoded certificate.</p>
    ///   - [`certificate_chain(Option<String>)`](crate::operation::export_certificate::ExportCertificateOutput::certificate_chain): <p>The base64 PEM-encoded certificate chain. This does not include the certificate that you are exporting.</p>
    ///   - [`private_key(Option<String>)`](crate::operation::export_certificate::ExportCertificateOutput::private_key): <p>The encrypted private key associated with the public key in the certificate. The key is output in PKCS #8 format and is base64 PEM-encoded. </p>
    /// - On failure, responds with [`SdkError<ExportCertificateError>`](crate::operation::export_certificate::ExportCertificateError)
    pub fn export_certificate(
        &self,
    ) -> crate::operation::export_certificate::builders::ExportCertificateFluentBuilder {
        crate::operation::export_certificate::builders::ExportCertificateFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
