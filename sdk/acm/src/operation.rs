// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Adds one or more tags to an ACM certificate. Tags are labels that you can use to
/// identify and organize your Amazon Web Services resources. Each tag consists of a <code>key</code> and an
/// optional <code>value</code>. You specify the certificate on input by its Amazon Resource Name
/// (ARN). You specify the tag by using a key-value pair. </p>
/// <p>You can apply a tag to just one certificate if you want to identify a specific
/// characteristic of that certificate, or you can apply the same tag to multiple certificates if
/// you want to filter for a common relationship among those certificates. Similarly, you can
/// apply the same tag to multiple resources if you want to specify a relationship among those
/// resources. For example, you can add the same tag to an ACM certificate and an Elastic Load
/// Balancing load balancer to indicate that they are both used by the same website. For more
/// information, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/tags.html">Tagging ACM
/// certificates</a>. </p>
/// <p>To remove one or more tags, use the <a>RemoveTagsFromCertificate</a> action. To
/// view all of the tags that have been applied to the certificate, use the <a>ListTagsForCertificate</a> action. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AddTagsToCertificate {
    _private: (),
}
impl AddTagsToCertificate {
    /// Creates a new builder-style object to manufacture [`AddTagsToCertificateInput`](crate::input::AddTagsToCertificateInput)
    pub fn builder() -> crate::input::add_tags_to_certificate_input::Builder {
        crate::input::add_tags_to_certificate_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AddTagsToCertificate {
    type Output = std::result::Result<
        crate::output::AddTagsToCertificateOutput,
        crate::error::AddTagsToCertificateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_add_tags_to_certificate_error(response)
        } else {
            crate::operation_deser::parse_add_tags_to_certificate_response(response)
        }
    }
}

/// <p>Deletes a certificate and its associated private key. If this action succeeds, the
/// certificate no longer appears in the list that can be displayed by calling the <a>ListCertificates</a> action or be retrieved by calling the <a>GetCertificate</a> action. The certificate will not be available for use by Amazon Web Services
/// services integrated with ACM. </p>
/// <note>
/// <p>You cannot delete an ACM certificate that is being used by another Amazon Web Services service. To
/// delete a certificate that is in use, the certificate association must first be
/// removed.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteCertificate {
    _private: (),
}
impl DeleteCertificate {
    /// Creates a new builder-style object to manufacture [`DeleteCertificateInput`](crate::input::DeleteCertificateInput)
    pub fn builder() -> crate::input::delete_certificate_input::Builder {
        crate::input::delete_certificate_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteCertificate {
    type Output = std::result::Result<
        crate::output::DeleteCertificateOutput,
        crate::error::DeleteCertificateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_certificate_error(response)
        } else {
            crate::operation_deser::parse_delete_certificate_response(response)
        }
    }
}

/// <p>Returns detailed metadata about the specified ACM certificate.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeCertificate {
    _private: (),
}
impl DescribeCertificate {
    /// Creates a new builder-style object to manufacture [`DescribeCertificateInput`](crate::input::DescribeCertificateInput)
    pub fn builder() -> crate::input::describe_certificate_input::Builder {
        crate::input::describe_certificate_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeCertificate {
    type Output = std::result::Result<
        crate::output::DescribeCertificateOutput,
        crate::error::DescribeCertificateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_certificate_error(response)
        } else {
            crate::operation_deser::parse_describe_certificate_response(response)
        }
    }
}

/// <p>Exports a private certificate issued by a private certificate authority (CA) for use
/// anywhere. The exported file contains the certificate, the certificate chain, and the encrypted
/// private 2048-bit RSA key associated with the public key that is embedded in the certificate.
/// For security, you must assign a passphrase for the private key when exporting it. </p>
/// <p>For information about exporting and formatting a certificate using the ACM console or
/// CLI, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-export-private.html">Export a
/// Private Certificate</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ExportCertificate {
    _private: (),
}
impl ExportCertificate {
    /// Creates a new builder-style object to manufacture [`ExportCertificateInput`](crate::input::ExportCertificateInput)
    pub fn builder() -> crate::input::export_certificate_input::Builder {
        crate::input::export_certificate_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ExportCertificate {
    type Output = std::result::Result<
        crate::output::ExportCertificateOutput,
        crate::error::ExportCertificateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_export_certificate_error(response)
        } else {
            crate::operation_deser::parse_export_certificate_response(response)
        }
    }
}

/// <p>Returns the account
/// configuration options associated with an Amazon Web Services account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetAccountConfiguration {
    _private: (),
}
impl GetAccountConfiguration {
    /// Creates a new builder-style object to manufacture [`GetAccountConfigurationInput`](crate::input::GetAccountConfigurationInput)
    pub fn builder() -> crate::input::get_account_configuration_input::Builder {
        crate::input::get_account_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetAccountConfiguration {
    type Output = std::result::Result<
        crate::output::GetAccountConfigurationOutput,
        crate::error::GetAccountConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_account_configuration_error(response)
        } else {
            crate::operation_deser::parse_get_account_configuration_response(response)
        }
    }
}

/// <p>Retrieves an Amazon-issued certificate and its certificate chain. The chain consists of
/// the certificate of the issuing CA and the intermediate certificates of any other subordinate
/// CAs. All of the certificates are base64 encoded. You can use <a href="https://wiki.openssl.org/index.php/Command_Line_Utilities">OpenSSL</a> to decode
/// the certificates and inspect individual fields.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetCertificate {
    _private: (),
}
impl GetCertificate {
    /// Creates a new builder-style object to manufacture [`GetCertificateInput`](crate::input::GetCertificateInput)
    pub fn builder() -> crate::input::get_certificate_input::Builder {
        crate::input::get_certificate_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetCertificate {
    type Output =
        std::result::Result<crate::output::GetCertificateOutput, crate::error::GetCertificateError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_certificate_error(response)
        } else {
            crate::operation_deser::parse_get_certificate_response(response)
        }
    }
}

/// <p>Imports a certificate into Amazon Web Services Certificate Manager (ACM) to use with services that are integrated with
/// ACM. Note that <a href="https://docs.aws.amazon.com/acm/latest/userguide/acm-services.html">integrated
/// services</a> allow only certificate types and keys they support to be associated with
/// their resources. Further, their support differs depending on whether the certificate is
/// imported into IAM or into ACM. For more information, see the documentation for each
/// service. For more information about importing certificates into ACM, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html">Importing
/// Certificates</a> in the <i>Amazon Web Services Certificate Manager User Guide</i>. </p>
/// <note>
/// <p>ACM does not provide <a href="https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html">managed renewal</a> for certificates that you import.</p>
/// </note>
/// <p>Note the following guidelines when importing third party certificates:</p>
/// <ul>
/// <li>
/// <p>You must enter the private key that matches the certificate you are importing.</p>
/// </li>
/// <li>
/// <p>The private key must be unencrypted. You cannot import a private key that is protected
/// by a password or a passphrase.</p>
/// </li>
/// <li>
/// <p>The private key must be no larger than 5 KB (5,120 bytes).</p>
/// </li>
/// <li>
/// <p>If the certificate you are importing is not self-signed, you must enter its
/// certificate chain.</p>
/// </li>
/// <li>
/// <p>If a certificate chain is included, the issuer must be the subject of one of the
/// certificates in the chain.</p>
/// </li>
/// <li>
/// <p>The certificate, private key, and certificate chain must be PEM-encoded.</p>
/// </li>
/// <li>
/// <p>The current time must be between the <code>Not Before</code> and <code>Not
/// After</code> certificate fields.</p>
/// </li>
/// <li>
/// <p>The <code>Issuer</code> field must not be empty.</p>
/// </li>
/// <li>
/// <p>The OCSP authority URL, if present, must not exceed 1000 characters.</p>
/// </li>
/// <li>
/// <p>To import a new certificate, omit the <code>CertificateArn</code> argument. Include
/// this argument only when you want to replace a previously imported certificate.</p>
/// </li>
/// <li>
/// <p>When you import a certificate by using the CLI, you must specify the certificate, the
/// certificate chain, and the private key by their file names preceded by
/// <code>fileb://</code>. For example, you can specify a certificate saved in the
/// <code>C:\temp</code> folder as <code>fileb://C:\temp\certificate_to_import.pem</code>.
/// If you are making an HTTP or HTTPS Query request, include these arguments as BLOBs.
/// </p>
/// </li>
/// <li>
/// <p>When you import a certificate by using an SDK, you must specify the certificate, the
/// certificate chain, and the private key files in the manner required by the programming
/// language you're using. </p>
/// </li>
/// <li>
/// <p>The cryptographic algorithm of an imported certificate must match the algorithm of the
/// signing CA. For example, if the signing CA key type is RSA, then the certificate key type
/// must also be RSA.</p>
/// </li>
/// </ul>
/// <p>This operation returns the <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon
/// Resource Name (ARN)</a> of the imported certificate.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ImportCertificate {
    _private: (),
}
impl ImportCertificate {
    /// Creates a new builder-style object to manufacture [`ImportCertificateInput`](crate::input::ImportCertificateInput)
    pub fn builder() -> crate::input::import_certificate_input::Builder {
        crate::input::import_certificate_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ImportCertificate {
    type Output = std::result::Result<
        crate::output::ImportCertificateOutput,
        crate::error::ImportCertificateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_import_certificate_error(response)
        } else {
            crate::operation_deser::parse_import_certificate_response(response)
        }
    }
}

/// <p>Retrieves a list of certificate ARNs and domain names. You can request that only
/// certificates that match a specific status be listed. You can also filter by specific
/// attributes of the certificate. Default filtering returns only <code>RSA_2048</code>
/// certificates. For more information, see <a>Filters</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListCertificates {
    _private: (),
}
impl ListCertificates {
    /// Creates a new builder-style object to manufacture [`ListCertificatesInput`](crate::input::ListCertificatesInput)
    pub fn builder() -> crate::input::list_certificates_input::Builder {
        crate::input::list_certificates_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListCertificates {
    type Output = std::result::Result<
        crate::output::ListCertificatesOutput,
        crate::error::ListCertificatesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_certificates_error(response)
        } else {
            crate::operation_deser::parse_list_certificates_response(response)
        }
    }
}

/// <p>Lists the tags that have been applied to the ACM certificate. Use the certificate's
/// Amazon Resource Name (ARN) to specify the certificate. To add a tag to an ACM certificate,
/// use the <a>AddTagsToCertificate</a> action. To delete a tag, use the <a>RemoveTagsFromCertificate</a> action. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForCertificate {
    _private: (),
}
impl ListTagsForCertificate {
    /// Creates a new builder-style object to manufacture [`ListTagsForCertificateInput`](crate::input::ListTagsForCertificateInput)
    pub fn builder() -> crate::input::list_tags_for_certificate_input::Builder {
        crate::input::list_tags_for_certificate_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTagsForCertificate {
    type Output = std::result::Result<
        crate::output::ListTagsForCertificateOutput,
        crate::error::ListTagsForCertificateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_certificate_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_certificate_response(response)
        }
    }
}

/// <p>Adds or modifies
/// account-level configurations in ACM.
/// </p>
/// <p>The
/// supported configuration option is <code>DaysBeforeExpiry</code>. This option specifies the
/// number of days prior to certificate expiration when ACM starts generating
/// <code>EventBridge</code> events. ACM sends one event per day per certificate until the
/// certificate expires. By default, accounts receive events starting 45 days before certificate
/// expiration.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutAccountConfiguration {
    _private: (),
}
impl PutAccountConfiguration {
    /// Creates a new builder-style object to manufacture [`PutAccountConfigurationInput`](crate::input::PutAccountConfigurationInput)
    pub fn builder() -> crate::input::put_account_configuration_input::Builder {
        crate::input::put_account_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutAccountConfiguration {
    type Output = std::result::Result<
        crate::output::PutAccountConfigurationOutput,
        crate::error::PutAccountConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_account_configuration_error(response)
        } else {
            crate::operation_deser::parse_put_account_configuration_response(response)
        }
    }
}

/// <p>Remove one or more tags from an ACM certificate. A tag consists of a key-value pair. If
/// you do not specify the value portion of the tag when calling this function, the tag will be
/// removed regardless of value. If you specify a value, the tag is removed only if it is
/// associated with the specified value. </p>
/// <p>To add tags to a certificate, use the <a>AddTagsToCertificate</a> action. To
/// view all of the tags that have been applied to a specific ACM certificate, use the <a>ListTagsForCertificate</a> action. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RemoveTagsFromCertificate {
    _private: (),
}
impl RemoveTagsFromCertificate {
    /// Creates a new builder-style object to manufacture [`RemoveTagsFromCertificateInput`](crate::input::RemoveTagsFromCertificateInput)
    pub fn builder() -> crate::input::remove_tags_from_certificate_input::Builder {
        crate::input::remove_tags_from_certificate_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RemoveTagsFromCertificate {
    type Output = std::result::Result<
        crate::output::RemoveTagsFromCertificateOutput,
        crate::error::RemoveTagsFromCertificateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_remove_tags_from_certificate_error(response)
        } else {
            crate::operation_deser::parse_remove_tags_from_certificate_response(response)
        }
    }
}

/// <p>Renews an eligible ACM certificate. At this time, only exported private certificates can
/// be renewed with this operation. In order to renew your ACM PCA certificates with ACM, you must
/// first <a href="https://docs.aws.amazon.com/acm-pca/latest/userguide/PcaPermissions.html">grant the ACM
/// service principal permission to do so</a>. For more information, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/manual-renewal.html">Testing Managed Renewal</a>
/// in the ACM User Guide.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RenewCertificate {
    _private: (),
}
impl RenewCertificate {
    /// Creates a new builder-style object to manufacture [`RenewCertificateInput`](crate::input::RenewCertificateInput)
    pub fn builder() -> crate::input::renew_certificate_input::Builder {
        crate::input::renew_certificate_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RenewCertificate {
    type Output = std::result::Result<
        crate::output::RenewCertificateOutput,
        crate::error::RenewCertificateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_renew_certificate_error(response)
        } else {
            crate::operation_deser::parse_renew_certificate_response(response)
        }
    }
}

/// <p>Requests an ACM certificate for use with other Amazon Web Services services. To request an ACM
/// certificate, you must specify a fully qualified domain name (FQDN) in the
/// <code>DomainName</code> parameter. You can also specify additional FQDNs in the
/// <code>SubjectAlternativeNames</code> parameter. </p>
/// <p>If you are requesting a private certificate, domain validation is not required. If you are
/// requesting a public certificate, each domain name that you specify must be validated to verify
/// that you own or control the domain. You can use <a href="https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate-dns.html">DNS validation</a> or <a href="https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate-email.html">email validation</a>.
/// We recommend that you use DNS validation. ACM issues public certificates after receiving
/// approval from the domain owner. </p>
/// <note>
/// <p>ACM behavior differs from the <a href="https://tools.ietf.org/html/rfc6125#appendix-B.2">https://tools.ietf.org/html/rfc6125#appendix-B.2</a>RFC 6125 specification of the
/// certificate validation process. first checks for a subject alternative name, and, if it
/// finds one, ignores the common name (CN)</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RequestCertificate {
    _private: (),
}
impl RequestCertificate {
    /// Creates a new builder-style object to manufacture [`RequestCertificateInput`](crate::input::RequestCertificateInput)
    pub fn builder() -> crate::input::request_certificate_input::Builder {
        crate::input::request_certificate_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RequestCertificate {
    type Output = std::result::Result<
        crate::output::RequestCertificateOutput,
        crate::error::RequestCertificateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_request_certificate_error(response)
        } else {
            crate::operation_deser::parse_request_certificate_response(response)
        }
    }
}

/// <p>Resends the email that requests domain ownership validation. The domain owner or an
/// authorized representative must approve the ACM certificate before it can be issued. The
/// certificate can be approved by clicking a link in the mail to navigate to the Amazon
/// certificate approval website and then clicking <b>I Approve</b>.
/// However, the validation email can be blocked by spam filters. Therefore, if you do not receive
/// the original mail, you can request that the mail be resent within 72 hours of requesting the
/// ACM certificate. If more than 72 hours have elapsed since your original request or since
/// your last attempt to resend validation mail, you must request a new certificate. For more
/// information about setting up your contact email addresses, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/setup-email.html">Configure Email for your Domain</a>. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ResendValidationEmail {
    _private: (),
}
impl ResendValidationEmail {
    /// Creates a new builder-style object to manufacture [`ResendValidationEmailInput`](crate::input::ResendValidationEmailInput)
    pub fn builder() -> crate::input::resend_validation_email_input::Builder {
        crate::input::resend_validation_email_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ResendValidationEmail {
    type Output = std::result::Result<
        crate::output::ResendValidationEmailOutput,
        crate::error::ResendValidationEmailError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_resend_validation_email_error(response)
        } else {
            crate::operation_deser::parse_resend_validation_email_response(response)
        }
    }
}

/// <p>Updates a certificate. Currently, you can use this function to specify whether to opt in
/// to or out of recording your certificate in a certificate transparency log. For more
/// information, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/acm-bestpractices.html#best-practices-transparency"> Opting Out of
/// Certificate Transparency Logging</a>. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateCertificateOptions {
    _private: (),
}
impl UpdateCertificateOptions {
    /// Creates a new builder-style object to manufacture [`UpdateCertificateOptionsInput`](crate::input::UpdateCertificateOptionsInput)
    pub fn builder() -> crate::input::update_certificate_options_input::Builder {
        crate::input::update_certificate_options_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateCertificateOptions {
    type Output = std::result::Result<
        crate::output::UpdateCertificateOptionsOutput,
        crate::error::UpdateCertificateOptionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_certificate_options_error(response)
        } else {
            crate::operation_deser::parse_update_certificate_options_response(response)
        }
    }
}
