// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You do not have access required to perform this action.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>You are trying to update a resource or configuration that is already being created or updated. Wait for the previous operation to finish and try again.</p>
    ConflictException(crate::error::ConflictException),
    /// <p>One or more of of request parameters specified is not valid.</p>
    InvalidArgsException(crate::error::InvalidArgsException),
    /// <p>The requested Amazon Resource Name (ARN) does not refer to an existing resource.</p>
    InvalidArnException(crate::error::InvalidArnException),
    /// <p>One or more values in the <code>DomainValidationOption</code> structure is incorrect.</p>
    InvalidDomainValidationOptionsException(crate::error::InvalidDomainValidationOptionsException),
    /// <p>An input parameter was invalid.</p>
    InvalidParameterException(crate::error::InvalidParameterException),
    /// <p>Processing has reached an invalid state.</p>
    InvalidStateException(crate::error::InvalidStateException),
    /// <p>One or both of the values that make up the key-value pair is not valid. For example, you cannot specify a tag value that begins with <code>aws:</code>.</p>
    InvalidTagException(crate::error::InvalidTagException),
    /// <p>An ACM quota has been exceeded.</p>
    LimitExceededException(crate::error::LimitExceededException),
    /// <p>The certificate request is in process and the certificate in your account has not yet been issued.</p>
    RequestInProgressException(crate::error::RequestInProgressException),
    /// <p>The certificate is in use by another Amazon Web Services service in the caller's account. Remove the association and try again.</p>
    ResourceInUseException(crate::error::ResourceInUseException),
    /// <p>The specified certificate cannot be found in the caller's account or the caller's account cannot be found.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>A specified tag did not comply with an existing tag policy and was rejected.</p>
    TagPolicyException(crate::error::TagPolicyException),
    /// <p>The request was denied because it exceeded a quota.</p>
    ThrottlingException(crate::error::ThrottlingException),
    /// <p>The request contains too many tags. Try the request again with fewer tags.</p>
    TooManyTagsException(crate::error::TooManyTagsException),
    /// <p>The supplied input failed to satisfy constraints of an Amazon Web Services service.</p>
    ValidationException(crate::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InvalidArgsException(inner) => inner.fmt(f),
            Error::InvalidArnException(inner) => inner.fmt(f),
            Error::InvalidDomainValidationOptionsException(inner) => inner.fmt(f),
            Error::InvalidParameterException(inner) => inner.fmt(f),
            Error::InvalidStateException(inner) => inner.fmt(f),
            Error::InvalidTagException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::RequestInProgressException(inner) => inner.fmt(f),
            Error::ResourceInUseException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::TagPolicyException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::TooManyTagsException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AddTagsToCertificateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AddTagsToCertificateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AddTagsToCertificateError> for Error {
    fn from(err: crate::error::AddTagsToCertificateError) -> Self {
        match err {
            crate::error::AddTagsToCertificateError::InvalidArnException(inner) => {
                Error::InvalidArnException(inner)
            }
            crate::error::AddTagsToCertificateError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::AddTagsToCertificateError::InvalidTagException(inner) => {
                Error::InvalidTagException(inner)
            }
            crate::error::AddTagsToCertificateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AddTagsToCertificateError::TagPolicyException(inner) => {
                Error::TagPolicyException(inner)
            }
            crate::error::AddTagsToCertificateError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::AddTagsToCertificateError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::AddTagsToCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteCertificateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteCertificateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteCertificateError> for Error {
    fn from(err: crate::error::DeleteCertificateError) -> Self {
        match err {
            crate::error::DeleteCertificateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteCertificateError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteCertificateError::InvalidArnException(inner) => {
                Error::InvalidArnException(inner)
            }
            crate::error::DeleteCertificateError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::DeleteCertificateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteCertificateError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeCertificateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeCertificateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeCertificateError> for Error {
    fn from(err: crate::error::DescribeCertificateError) -> Self {
        match err {
            crate::error::DescribeCertificateError::InvalidArnException(inner) => {
                Error::InvalidArnException(inner)
            }
            crate::error::DescribeCertificateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ExportCertificateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ExportCertificateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ExportCertificateError> for Error {
    fn from(err: crate::error::ExportCertificateError) -> Self {
        match err {
            crate::error::ExportCertificateError::InvalidArnException(inner) => {
                Error::InvalidArnException(inner)
            }
            crate::error::ExportCertificateError::RequestInProgressException(inner) => {
                Error::RequestInProgressException(inner)
            }
            crate::error::ExportCertificateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ExportCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAccountConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetAccountConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAccountConfigurationError> for Error {
    fn from(err: crate::error::GetAccountConfigurationError) -> Self {
        match err {
            crate::error::GetAccountConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetAccountConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetAccountConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetCertificateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetCertificateError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetCertificateError> for Error {
    fn from(err: crate::error::GetCertificateError) -> Self {
        match err {
            crate::error::GetCertificateError::InvalidArnException(inner) => {
                Error::InvalidArnException(inner)
            }
            crate::error::GetCertificateError::RequestInProgressException(inner) => {
                Error::RequestInProgressException(inner)
            }
            crate::error::GetCertificateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ImportCertificateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ImportCertificateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ImportCertificateError> for Error {
    fn from(err: crate::error::ImportCertificateError) -> Self {
        match err {
            crate::error::ImportCertificateError::InvalidArnException(inner) => {
                Error::InvalidArnException(inner)
            }
            crate::error::ImportCertificateError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ImportCertificateError::InvalidTagException(inner) => {
                Error::InvalidTagException(inner)
            }
            crate::error::ImportCertificateError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ImportCertificateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ImportCertificateError::TagPolicyException(inner) => {
                Error::TagPolicyException(inner)
            }
            crate::error::ImportCertificateError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::ImportCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListCertificatesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListCertificatesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListCertificatesError> for Error {
    fn from(err: crate::error::ListCertificatesError) -> Self {
        match err {
            crate::error::ListCertificatesError::InvalidArgsException(inner) => {
                Error::InvalidArgsException(inner)
            }
            crate::error::ListCertificatesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListCertificatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForCertificateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForCertificateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForCertificateError> for Error {
    fn from(err: crate::error::ListTagsForCertificateError) -> Self {
        match err {
            crate::error::ListTagsForCertificateError::InvalidArnException(inner) => {
                Error::InvalidArnException(inner)
            }
            crate::error::ListTagsForCertificateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListTagsForCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutAccountConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutAccountConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutAccountConfigurationError> for Error {
    fn from(err: crate::error::PutAccountConfigurationError) -> Self {
        match err {
            crate::error::PutAccountConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::PutAccountConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::PutAccountConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::PutAccountConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::PutAccountConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RemoveTagsFromCertificateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RemoveTagsFromCertificateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RemoveTagsFromCertificateError> for Error {
    fn from(err: crate::error::RemoveTagsFromCertificateError) -> Self {
        match err {
            crate::error::RemoveTagsFromCertificateError::InvalidArnException(inner) => {
                Error::InvalidArnException(inner)
            }
            crate::error::RemoveTagsFromCertificateError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::RemoveTagsFromCertificateError::InvalidTagException(inner) => {
                Error::InvalidTagException(inner)
            }
            crate::error::RemoveTagsFromCertificateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::RemoveTagsFromCertificateError::TagPolicyException(inner) => {
                Error::TagPolicyException(inner)
            }
            crate::error::RemoveTagsFromCertificateError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::RemoveTagsFromCertificateError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RenewCertificateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RenewCertificateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RenewCertificateError> for Error {
    fn from(err: crate::error::RenewCertificateError) -> Self {
        match err {
            crate::error::RenewCertificateError::InvalidArnException(inner) => {
                Error::InvalidArnException(inner)
            }
            crate::error::RenewCertificateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::RenewCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RequestCertificateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RequestCertificateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RequestCertificateError> for Error {
    fn from(err: crate::error::RequestCertificateError) -> Self {
        match err {
            crate::error::RequestCertificateError::InvalidArnException(inner) => {
                Error::InvalidArnException(inner)
            }
            crate::error::RequestCertificateError::InvalidDomainValidationOptionsException(
                inner,
            ) => Error::InvalidDomainValidationOptionsException(inner),
            crate::error::RequestCertificateError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::RequestCertificateError::InvalidTagException(inner) => {
                Error::InvalidTagException(inner)
            }
            crate::error::RequestCertificateError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::RequestCertificateError::TagPolicyException(inner) => {
                Error::TagPolicyException(inner)
            }
            crate::error::RequestCertificateError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::RequestCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ResendValidationEmailError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ResendValidationEmailError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ResendValidationEmailError> for Error {
    fn from(err: crate::error::ResendValidationEmailError) -> Self {
        match err {
            crate::error::ResendValidationEmailError::InvalidArnException(inner) => {
                Error::InvalidArnException(inner)
            }
            crate::error::ResendValidationEmailError::InvalidDomainValidationOptionsException(
                inner,
            ) => Error::InvalidDomainValidationOptionsException(inner),
            crate::error::ResendValidationEmailError::InvalidStateException(inner) => {
                Error::InvalidStateException(inner)
            }
            crate::error::ResendValidationEmailError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ResendValidationEmailError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateCertificateOptionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateCertificateOptionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateCertificateOptionsError> for Error {
    fn from(err: crate::error::UpdateCertificateOptionsError) -> Self {
        match err {
            crate::error::UpdateCertificateOptionsError::InvalidArnException(inner) => {
                Error::InvalidArnException(inner)
            }
            crate::error::UpdateCertificateOptionsError::InvalidStateException(inner) => {
                Error::InvalidStateException(inner)
            }
            crate::error::UpdateCertificateOptionsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateCertificateOptionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateCertificateOptionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InvalidArgsException(e) => e.request_id(),
            Self::InvalidArnException(e) => e.request_id(),
            Self::InvalidDomainValidationOptionsException(e) => e.request_id(),
            Self::InvalidParameterException(e) => e.request_id(),
            Self::InvalidStateException(e) => e.request_id(),
            Self::InvalidTagException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::RequestInProgressException(e) => e.request_id(),
            Self::ResourceInUseException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::TagPolicyException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::TooManyTagsException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
