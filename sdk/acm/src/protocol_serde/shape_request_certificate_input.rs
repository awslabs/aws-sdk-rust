// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_request_certificate_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::request_certificate::RequestCertificateInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.domain_name {
        object.key("DomainName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.validation_method {
        object.key("ValidationMethod").string(var_2.as_str());
    }
    if let Some(var_3) = &input.subject_alternative_names {
        let mut array_4 = object.key("SubjectAlternativeNames").start_array();
        for item_5 in var_3 {
            {
                array_4.value().string(item_5.as_str());
            }
        }
        array_4.finish();
    }
    if let Some(var_6) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_6.as_str());
    }
    if let Some(var_7) = &input.domain_validation_options {
        let mut array_8 = object.key("DomainValidationOptions").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_domain_validation_option::ser_domain_validation_option(&mut object_10, item_9)?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if let Some(var_11) = &input.options {
        #[allow(unused_mut)]
        let mut object_12 = object.key("Options").start_object();
        crate::protocol_serde::shape_certificate_options::ser_certificate_options(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.certificate_authority_arn {
        object.key("CertificateAuthorityArn").string(var_13.as_str());
    }
    if let Some(var_14) = &input.tags {
        let mut array_15 = object.key("Tags").start_array();
        for item_16 in var_14 {
            {
                #[allow(unused_mut)]
                let mut object_17 = array_15.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_17, item_16)?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    if let Some(var_18) = &input.key_algorithm {
        object.key("KeyAlgorithm").string(var_18.as_str());
    }
    Ok(())
}
