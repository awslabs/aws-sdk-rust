// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ValidateE911AddressOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub validation_result: i32,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub address_external_id: std::option::Option<std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub address: std::option::Option<crate::model::Address>,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub candidate_address_list: std::option::Option<std::vec::Vec<crate::model::CandidateAddress>>,
    _request_id: Option<String>,
}
impl ValidateE911AddressOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn validation_result(&self) -> i32 {
        self.validation_result
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn address_external_id(&self) -> std::option::Option<&str> {
        self.address_external_id.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn address(&self) -> std::option::Option<&crate::model::Address> {
        self.address.as_ref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn candidate_address_list(&self) -> std::option::Option<&[crate::model::CandidateAddress]> {
        self.candidate_address_list.as_deref()
    }
}
impl aws_http::request_id::RequestId for ValidateE911AddressOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ValidateE911AddressOutput {
    /// Creates a new builder-style object to manufacture [`ValidateE911AddressOutput`](crate::output::ValidateE911AddressOutput).
    pub fn builder() -> crate::output::validate_e911_address_output::Builder {
        crate::output::validate_e911_address_output::Builder::default()
    }
}

/// See [`ValidateE911AddressOutput`](crate::output::ValidateE911AddressOutput).
pub mod validate_e911_address_output {

    /// A builder for [`ValidateE911AddressOutput`](crate::output::ValidateE911AddressOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) validation_result: std::option::Option<i32>,
        pub(crate) address_external_id: std::option::Option<std::string::String>,
        pub(crate) address: std::option::Option<crate::model::Address>,
        pub(crate) candidate_address_list:
            std::option::Option<std::vec::Vec<crate::model::CandidateAddress>>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn validation_result(mut self, input: i32) -> Self {
            self.validation_result = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_validation_result(mut self, input: std::option::Option<i32>) -> Self {
            self.validation_result = input;
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn address_external_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.address_external_id = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_address_external_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.address_external_id = input;
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn address(mut self, input: crate::model::Address) -> Self {
            self.address = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_address(mut self, input: std::option::Option<crate::model::Address>) -> Self {
            self.address = input;
            self
        }
        /// Appends an item to `candidate_address_list`.
        ///
        /// To override the contents of this collection use [`set_candidate_address_list`](Self::set_candidate_address_list).
        ///
        pub fn candidate_address_list(mut self, input: crate::model::CandidateAddress) -> Self {
            let mut v = self.candidate_address_list.unwrap_or_default();
            v.push(input);
            self.candidate_address_list = Some(v);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_candidate_address_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CandidateAddress>>,
        ) -> Self {
            self.candidate_address_list = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ValidateE911AddressOutput`](crate::output::ValidateE911AddressOutput).
        pub fn build(self) -> crate::output::ValidateE911AddressOutput {
            crate::output::ValidateE911AddressOutput {
                validation_result: self.validation_result.unwrap_or_default(),
                address_external_id: self.address_external_id,
                address: self.address,
                candidate_address_list: self.candidate_address_list,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateVoiceConnectorGroupOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub voice_connector_group: std::option::Option<crate::model::VoiceConnectorGroup>,
    _request_id: Option<String>,
}
impl UpdateVoiceConnectorGroupOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_group(&self) -> std::option::Option<&crate::model::VoiceConnectorGroup> {
        self.voice_connector_group.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateVoiceConnectorGroupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateVoiceConnectorGroupOutput {
    /// Creates a new builder-style object to manufacture [`UpdateVoiceConnectorGroupOutput`](crate::output::UpdateVoiceConnectorGroupOutput).
    pub fn builder() -> crate::output::update_voice_connector_group_output::Builder {
        crate::output::update_voice_connector_group_output::Builder::default()
    }
}

/// See [`UpdateVoiceConnectorGroupOutput`](crate::output::UpdateVoiceConnectorGroupOutput).
pub mod update_voice_connector_group_output {

    /// A builder for [`UpdateVoiceConnectorGroupOutput`](crate::output::UpdateVoiceConnectorGroupOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) voice_connector_group: std::option::Option<crate::model::VoiceConnectorGroup>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn voice_connector_group(mut self, input: crate::model::VoiceConnectorGroup) -> Self {
            self.voice_connector_group = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_voice_connector_group(
            mut self,
            input: std::option::Option<crate::model::VoiceConnectorGroup>,
        ) -> Self {
            self.voice_connector_group = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateVoiceConnectorGroupOutput`](crate::output::UpdateVoiceConnectorGroupOutput).
        pub fn build(self) -> crate::output::UpdateVoiceConnectorGroupOutput {
            crate::output::UpdateVoiceConnectorGroupOutput {
                voice_connector_group: self.voice_connector_group,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateVoiceConnectorOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub voice_connector: std::option::Option<crate::model::VoiceConnector>,
    _request_id: Option<String>,
}
impl UpdateVoiceConnectorOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector(&self) -> std::option::Option<&crate::model::VoiceConnector> {
        self.voice_connector.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateVoiceConnectorOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateVoiceConnectorOutput {
    /// Creates a new builder-style object to manufacture [`UpdateVoiceConnectorOutput`](crate::output::UpdateVoiceConnectorOutput).
    pub fn builder() -> crate::output::update_voice_connector_output::Builder {
        crate::output::update_voice_connector_output::Builder::default()
    }
}

/// See [`UpdateVoiceConnectorOutput`](crate::output::UpdateVoiceConnectorOutput).
pub mod update_voice_connector_output {

    /// A builder for [`UpdateVoiceConnectorOutput`](crate::output::UpdateVoiceConnectorOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) voice_connector: std::option::Option<crate::model::VoiceConnector>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn voice_connector(mut self, input: crate::model::VoiceConnector) -> Self {
            self.voice_connector = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_voice_connector(
            mut self,
            input: std::option::Option<crate::model::VoiceConnector>,
        ) -> Self {
            self.voice_connector = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateVoiceConnectorOutput`](crate::output::UpdateVoiceConnectorOutput).
        pub fn build(self) -> crate::output::UpdateVoiceConnectorOutput {
            crate::output::UpdateVoiceConnectorOutput {
                voice_connector: self.voice_connector,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateSipRuleOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub sip_rule: std::option::Option<crate::model::SipRule>,
    _request_id: Option<String>,
}
impl UpdateSipRuleOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn sip_rule(&self) -> std::option::Option<&crate::model::SipRule> {
        self.sip_rule.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateSipRuleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateSipRuleOutput {
    /// Creates a new builder-style object to manufacture [`UpdateSipRuleOutput`](crate::output::UpdateSipRuleOutput).
    pub fn builder() -> crate::output::update_sip_rule_output::Builder {
        crate::output::update_sip_rule_output::Builder::default()
    }
}

/// See [`UpdateSipRuleOutput`](crate::output::UpdateSipRuleOutput).
pub mod update_sip_rule_output {

    /// A builder for [`UpdateSipRuleOutput`](crate::output::UpdateSipRuleOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) sip_rule: std::option::Option<crate::model::SipRule>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn sip_rule(mut self, input: crate::model::SipRule) -> Self {
            self.sip_rule = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_sip_rule(mut self, input: std::option::Option<crate::model::SipRule>) -> Self {
            self.sip_rule = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateSipRuleOutput`](crate::output::UpdateSipRuleOutput).
        pub fn build(self) -> crate::output::UpdateSipRuleOutput {
            crate::output::UpdateSipRuleOutput {
                sip_rule: self.sip_rule,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateSipMediaApplicationCallOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub sip_media_application_call: std::option::Option<crate::model::SipMediaApplicationCall>,
    _request_id: Option<String>,
}
impl UpdateSipMediaApplicationCallOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn sip_media_application_call(
        &self,
    ) -> std::option::Option<&crate::model::SipMediaApplicationCall> {
        self.sip_media_application_call.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateSipMediaApplicationCallOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateSipMediaApplicationCallOutput {
    /// Creates a new builder-style object to manufacture [`UpdateSipMediaApplicationCallOutput`](crate::output::UpdateSipMediaApplicationCallOutput).
    pub fn builder() -> crate::output::update_sip_media_application_call_output::Builder {
        crate::output::update_sip_media_application_call_output::Builder::default()
    }
}

/// See [`UpdateSipMediaApplicationCallOutput`](crate::output::UpdateSipMediaApplicationCallOutput).
pub mod update_sip_media_application_call_output {

    /// A builder for [`UpdateSipMediaApplicationCallOutput`](crate::output::UpdateSipMediaApplicationCallOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) sip_media_application_call:
            std::option::Option<crate::model::SipMediaApplicationCall>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn sip_media_application_call(
            mut self,
            input: crate::model::SipMediaApplicationCall,
        ) -> Self {
            self.sip_media_application_call = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_sip_media_application_call(
            mut self,
            input: std::option::Option<crate::model::SipMediaApplicationCall>,
        ) -> Self {
            self.sip_media_application_call = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateSipMediaApplicationCallOutput`](crate::output::UpdateSipMediaApplicationCallOutput).
        pub fn build(self) -> crate::output::UpdateSipMediaApplicationCallOutput {
            crate::output::UpdateSipMediaApplicationCallOutput {
                sip_media_application_call: self.sip_media_application_call,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateSipMediaApplicationOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub sip_media_application: std::option::Option<crate::model::SipMediaApplication>,
    _request_id: Option<String>,
}
impl UpdateSipMediaApplicationOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn sip_media_application(&self) -> std::option::Option<&crate::model::SipMediaApplication> {
        self.sip_media_application.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateSipMediaApplicationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateSipMediaApplicationOutput {
    /// Creates a new builder-style object to manufacture [`UpdateSipMediaApplicationOutput`](crate::output::UpdateSipMediaApplicationOutput).
    pub fn builder() -> crate::output::update_sip_media_application_output::Builder {
        crate::output::update_sip_media_application_output::Builder::default()
    }
}

/// See [`UpdateSipMediaApplicationOutput`](crate::output::UpdateSipMediaApplicationOutput).
pub mod update_sip_media_application_output {

    /// A builder for [`UpdateSipMediaApplicationOutput`](crate::output::UpdateSipMediaApplicationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) sip_media_application: std::option::Option<crate::model::SipMediaApplication>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn sip_media_application(mut self, input: crate::model::SipMediaApplication) -> Self {
            self.sip_media_application = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_sip_media_application(
            mut self,
            input: std::option::Option<crate::model::SipMediaApplication>,
        ) -> Self {
            self.sip_media_application = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateSipMediaApplicationOutput`](crate::output::UpdateSipMediaApplicationOutput).
        pub fn build(self) -> crate::output::UpdateSipMediaApplicationOutput {
            crate::output::UpdateSipMediaApplicationOutput {
                sip_media_application: self.sip_media_application,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateProxySessionOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub proxy_session: std::option::Option<crate::model::ProxySession>,
    _request_id: Option<String>,
}
impl UpdateProxySessionOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn proxy_session(&self) -> std::option::Option<&crate::model::ProxySession> {
        self.proxy_session.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateProxySessionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateProxySessionOutput {
    /// Creates a new builder-style object to manufacture [`UpdateProxySessionOutput`](crate::output::UpdateProxySessionOutput).
    pub fn builder() -> crate::output::update_proxy_session_output::Builder {
        crate::output::update_proxy_session_output::Builder::default()
    }
}

/// See [`UpdateProxySessionOutput`](crate::output::UpdateProxySessionOutput).
pub mod update_proxy_session_output {

    /// A builder for [`UpdateProxySessionOutput`](crate::output::UpdateProxySessionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) proxy_session: std::option::Option<crate::model::ProxySession>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn proxy_session(mut self, input: crate::model::ProxySession) -> Self {
            self.proxy_session = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_proxy_session(
            mut self,
            input: std::option::Option<crate::model::ProxySession>,
        ) -> Self {
            self.proxy_session = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateProxySessionOutput`](crate::output::UpdateProxySessionOutput).
        pub fn build(self) -> crate::output::UpdateProxySessionOutput {
            crate::output::UpdateProxySessionOutput {
                proxy_session: self.proxy_session,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdatePhoneNumberSettingsOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdatePhoneNumberSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdatePhoneNumberSettingsOutput {
    /// Creates a new builder-style object to manufacture [`UpdatePhoneNumberSettingsOutput`](crate::output::UpdatePhoneNumberSettingsOutput).
    pub fn builder() -> crate::output::update_phone_number_settings_output::Builder {
        crate::output::update_phone_number_settings_output::Builder::default()
    }
}

/// See [`UpdatePhoneNumberSettingsOutput`](crate::output::UpdatePhoneNumberSettingsOutput).
pub mod update_phone_number_settings_output {

    /// A builder for [`UpdatePhoneNumberSettingsOutput`](crate::output::UpdatePhoneNumberSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdatePhoneNumberSettingsOutput`](crate::output::UpdatePhoneNumberSettingsOutput).
        pub fn build(self) -> crate::output::UpdatePhoneNumberSettingsOutput {
            crate::output::UpdatePhoneNumberSettingsOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdatePhoneNumberOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub phone_number: std::option::Option<crate::model::PhoneNumber>,
    _request_id: Option<String>,
}
impl UpdatePhoneNumberOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn phone_number(&self) -> std::option::Option<&crate::model::PhoneNumber> {
        self.phone_number.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdatePhoneNumberOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdatePhoneNumberOutput {
    /// Creates a new builder-style object to manufacture [`UpdatePhoneNumberOutput`](crate::output::UpdatePhoneNumberOutput).
    pub fn builder() -> crate::output::update_phone_number_output::Builder {
        crate::output::update_phone_number_output::Builder::default()
    }
}

/// See [`UpdatePhoneNumberOutput`](crate::output::UpdatePhoneNumberOutput).
pub mod update_phone_number_output {

    /// A builder for [`UpdatePhoneNumberOutput`](crate::output::UpdatePhoneNumberOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) phone_number: std::option::Option<crate::model::PhoneNumber>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn phone_number(mut self, input: crate::model::PhoneNumber) -> Self {
            self.phone_number = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_phone_number(
            mut self,
            input: std::option::Option<crate::model::PhoneNumber>,
        ) -> Self {
            self.phone_number = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdatePhoneNumberOutput`](crate::output::UpdatePhoneNumberOutput).
        pub fn build(self) -> crate::output::UpdatePhoneNumberOutput {
            crate::output::UpdatePhoneNumberOutput {
                phone_number: self.phone_number,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateGlobalSettingsOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateGlobalSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateGlobalSettingsOutput {
    /// Creates a new builder-style object to manufacture [`UpdateGlobalSettingsOutput`](crate::output::UpdateGlobalSettingsOutput).
    pub fn builder() -> crate::output::update_global_settings_output::Builder {
        crate::output::update_global_settings_output::Builder::default()
    }
}

/// See [`UpdateGlobalSettingsOutput`](crate::output::UpdateGlobalSettingsOutput).
pub mod update_global_settings_output {

    /// A builder for [`UpdateGlobalSettingsOutput`](crate::output::UpdateGlobalSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateGlobalSettingsOutput`](crate::output::UpdateGlobalSettingsOutput).
        pub fn build(self) -> crate::output::UpdateGlobalSettingsOutput {
            crate::output::UpdateGlobalSettingsOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SearchAvailablePhoneNumbersOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub e164_phone_numbers: std::option::Option<std::vec::Vec<std::string::String>>,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl SearchAvailablePhoneNumbersOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn e164_phone_numbers(&self) -> std::option::Option<&[std::string::String]> {
        self.e164_phone_numbers.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for SearchAvailablePhoneNumbersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl SearchAvailablePhoneNumbersOutput {
    /// Creates a new builder-style object to manufacture [`SearchAvailablePhoneNumbersOutput`](crate::output::SearchAvailablePhoneNumbersOutput).
    pub fn builder() -> crate::output::search_available_phone_numbers_output::Builder {
        crate::output::search_available_phone_numbers_output::Builder::default()
    }
}

/// See [`SearchAvailablePhoneNumbersOutput`](crate::output::SearchAvailablePhoneNumbersOutput).
pub mod search_available_phone_numbers_output {

    /// A builder for [`SearchAvailablePhoneNumbersOutput`](crate::output::SearchAvailablePhoneNumbersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) e164_phone_numbers: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `e164_phone_numbers`.
        ///
        /// To override the contents of this collection use [`set_e164_phone_numbers`](Self::set_e164_phone_numbers).
        ///
        pub fn e164_phone_numbers(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.e164_phone_numbers.unwrap_or_default();
            v.push(input.into());
            self.e164_phone_numbers = Some(v);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_e164_phone_numbers(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.e164_phone_numbers = input;
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`SearchAvailablePhoneNumbersOutput`](crate::output::SearchAvailablePhoneNumbersOutput).
        pub fn build(self) -> crate::output::SearchAvailablePhoneNumbersOutput {
            crate::output::SearchAvailablePhoneNumbersOutput {
                e164_phone_numbers: self.e164_phone_numbers,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RestorePhoneNumberOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub phone_number: std::option::Option<crate::model::PhoneNumber>,
    _request_id: Option<String>,
}
impl RestorePhoneNumberOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn phone_number(&self) -> std::option::Option<&crate::model::PhoneNumber> {
        self.phone_number.as_ref()
    }
}
impl aws_http::request_id::RequestId for RestorePhoneNumberOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl RestorePhoneNumberOutput {
    /// Creates a new builder-style object to manufacture [`RestorePhoneNumberOutput`](crate::output::RestorePhoneNumberOutput).
    pub fn builder() -> crate::output::restore_phone_number_output::Builder {
        crate::output::restore_phone_number_output::Builder::default()
    }
}

/// See [`RestorePhoneNumberOutput`](crate::output::RestorePhoneNumberOutput).
pub mod restore_phone_number_output {

    /// A builder for [`RestorePhoneNumberOutput`](crate::output::RestorePhoneNumberOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) phone_number: std::option::Option<crate::model::PhoneNumber>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn phone_number(mut self, input: crate::model::PhoneNumber) -> Self {
            self.phone_number = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_phone_number(
            mut self,
            input: std::option::Option<crate::model::PhoneNumber>,
        ) -> Self {
            self.phone_number = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`RestorePhoneNumberOutput`](crate::output::RestorePhoneNumberOutput).
        pub fn build(self) -> crate::output::RestorePhoneNumberOutput {
            crate::output::RestorePhoneNumberOutput {
                phone_number: self.phone_number,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutVoiceConnectorTerminationCredentialsOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for PutVoiceConnectorTerminationCredentialsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl PutVoiceConnectorTerminationCredentialsOutput {
    /// Creates a new builder-style object to manufacture [`PutVoiceConnectorTerminationCredentialsOutput`](crate::output::PutVoiceConnectorTerminationCredentialsOutput).
    pub fn builder() -> crate::output::put_voice_connector_termination_credentials_output::Builder {
        crate::output::put_voice_connector_termination_credentials_output::Builder::default()
    }
}

/// See [`PutVoiceConnectorTerminationCredentialsOutput`](crate::output::PutVoiceConnectorTerminationCredentialsOutput).
pub mod put_voice_connector_termination_credentials_output {

    /// A builder for [`PutVoiceConnectorTerminationCredentialsOutput`](crate::output::PutVoiceConnectorTerminationCredentialsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PutVoiceConnectorTerminationCredentialsOutput`](crate::output::PutVoiceConnectorTerminationCredentialsOutput).
        pub fn build(self) -> crate::output::PutVoiceConnectorTerminationCredentialsOutput {
            crate::output::PutVoiceConnectorTerminationCredentialsOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutVoiceConnectorTerminationOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub termination: std::option::Option<crate::model::Termination>,
    _request_id: Option<String>,
}
impl PutVoiceConnectorTerminationOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn termination(&self) -> std::option::Option<&crate::model::Termination> {
        self.termination.as_ref()
    }
}
impl aws_http::request_id::RequestId for PutVoiceConnectorTerminationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl PutVoiceConnectorTerminationOutput {
    /// Creates a new builder-style object to manufacture [`PutVoiceConnectorTerminationOutput`](crate::output::PutVoiceConnectorTerminationOutput).
    pub fn builder() -> crate::output::put_voice_connector_termination_output::Builder {
        crate::output::put_voice_connector_termination_output::Builder::default()
    }
}

/// See [`PutVoiceConnectorTerminationOutput`](crate::output::PutVoiceConnectorTerminationOutput).
pub mod put_voice_connector_termination_output {

    /// A builder for [`PutVoiceConnectorTerminationOutput`](crate::output::PutVoiceConnectorTerminationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) termination: std::option::Option<crate::model::Termination>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn termination(mut self, input: crate::model::Termination) -> Self {
            self.termination = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_termination(
            mut self,
            input: std::option::Option<crate::model::Termination>,
        ) -> Self {
            self.termination = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PutVoiceConnectorTerminationOutput`](crate::output::PutVoiceConnectorTerminationOutput).
        pub fn build(self) -> crate::output::PutVoiceConnectorTerminationOutput {
            crate::output::PutVoiceConnectorTerminationOutput {
                termination: self.termination,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutVoiceConnectorStreamingConfigurationOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub streaming_configuration: std::option::Option<crate::model::StreamingConfiguration>,
    _request_id: Option<String>,
}
impl PutVoiceConnectorStreamingConfigurationOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn streaming_configuration(
        &self,
    ) -> std::option::Option<&crate::model::StreamingConfiguration> {
        self.streaming_configuration.as_ref()
    }
}
impl aws_http::request_id::RequestId for PutVoiceConnectorStreamingConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl PutVoiceConnectorStreamingConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`PutVoiceConnectorStreamingConfigurationOutput`](crate::output::PutVoiceConnectorStreamingConfigurationOutput).
    pub fn builder() -> crate::output::put_voice_connector_streaming_configuration_output::Builder {
        crate::output::put_voice_connector_streaming_configuration_output::Builder::default()
    }
}

/// See [`PutVoiceConnectorStreamingConfigurationOutput`](crate::output::PutVoiceConnectorStreamingConfigurationOutput).
pub mod put_voice_connector_streaming_configuration_output {

    /// A builder for [`PutVoiceConnectorStreamingConfigurationOutput`](crate::output::PutVoiceConnectorStreamingConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) streaming_configuration:
            std::option::Option<crate::model::StreamingConfiguration>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn streaming_configuration(
            mut self,
            input: crate::model::StreamingConfiguration,
        ) -> Self {
            self.streaming_configuration = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_streaming_configuration(
            mut self,
            input: std::option::Option<crate::model::StreamingConfiguration>,
        ) -> Self {
            self.streaming_configuration = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PutVoiceConnectorStreamingConfigurationOutput`](crate::output::PutVoiceConnectorStreamingConfigurationOutput).
        pub fn build(self) -> crate::output::PutVoiceConnectorStreamingConfigurationOutput {
            crate::output::PutVoiceConnectorStreamingConfigurationOutput {
                streaming_configuration: self.streaming_configuration,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutVoiceConnectorProxyOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub proxy: std::option::Option<crate::model::Proxy>,
    _request_id: Option<String>,
}
impl PutVoiceConnectorProxyOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn proxy(&self) -> std::option::Option<&crate::model::Proxy> {
        self.proxy.as_ref()
    }
}
impl aws_http::request_id::RequestId for PutVoiceConnectorProxyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl PutVoiceConnectorProxyOutput {
    /// Creates a new builder-style object to manufacture [`PutVoiceConnectorProxyOutput`](crate::output::PutVoiceConnectorProxyOutput).
    pub fn builder() -> crate::output::put_voice_connector_proxy_output::Builder {
        crate::output::put_voice_connector_proxy_output::Builder::default()
    }
}

/// See [`PutVoiceConnectorProxyOutput`](crate::output::PutVoiceConnectorProxyOutput).
pub mod put_voice_connector_proxy_output {

    /// A builder for [`PutVoiceConnectorProxyOutput`](crate::output::PutVoiceConnectorProxyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) proxy: std::option::Option<crate::model::Proxy>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn proxy(mut self, input: crate::model::Proxy) -> Self {
            self.proxy = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_proxy(mut self, input: std::option::Option<crate::model::Proxy>) -> Self {
            self.proxy = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PutVoiceConnectorProxyOutput`](crate::output::PutVoiceConnectorProxyOutput).
        pub fn build(self) -> crate::output::PutVoiceConnectorProxyOutput {
            crate::output::PutVoiceConnectorProxyOutput {
                proxy: self.proxy,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutVoiceConnectorOriginationOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub origination: std::option::Option<crate::model::Origination>,
    _request_id: Option<String>,
}
impl PutVoiceConnectorOriginationOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn origination(&self) -> std::option::Option<&crate::model::Origination> {
        self.origination.as_ref()
    }
}
impl aws_http::request_id::RequestId for PutVoiceConnectorOriginationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl PutVoiceConnectorOriginationOutput {
    /// Creates a new builder-style object to manufacture [`PutVoiceConnectorOriginationOutput`](crate::output::PutVoiceConnectorOriginationOutput).
    pub fn builder() -> crate::output::put_voice_connector_origination_output::Builder {
        crate::output::put_voice_connector_origination_output::Builder::default()
    }
}

/// See [`PutVoiceConnectorOriginationOutput`](crate::output::PutVoiceConnectorOriginationOutput).
pub mod put_voice_connector_origination_output {

    /// A builder for [`PutVoiceConnectorOriginationOutput`](crate::output::PutVoiceConnectorOriginationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) origination: std::option::Option<crate::model::Origination>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn origination(mut self, input: crate::model::Origination) -> Self {
            self.origination = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_origination(
            mut self,
            input: std::option::Option<crate::model::Origination>,
        ) -> Self {
            self.origination = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PutVoiceConnectorOriginationOutput`](crate::output::PutVoiceConnectorOriginationOutput).
        pub fn build(self) -> crate::output::PutVoiceConnectorOriginationOutput {
            crate::output::PutVoiceConnectorOriginationOutput {
                origination: self.origination,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutVoiceConnectorLoggingConfigurationOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub logging_configuration: std::option::Option<crate::model::LoggingConfiguration>,
    _request_id: Option<String>,
}
impl PutVoiceConnectorLoggingConfigurationOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn logging_configuration(
        &self,
    ) -> std::option::Option<&crate::model::LoggingConfiguration> {
        self.logging_configuration.as_ref()
    }
}
impl aws_http::request_id::RequestId for PutVoiceConnectorLoggingConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl PutVoiceConnectorLoggingConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`PutVoiceConnectorLoggingConfigurationOutput`](crate::output::PutVoiceConnectorLoggingConfigurationOutput).
    pub fn builder() -> crate::output::put_voice_connector_logging_configuration_output::Builder {
        crate::output::put_voice_connector_logging_configuration_output::Builder::default()
    }
}

/// See [`PutVoiceConnectorLoggingConfigurationOutput`](crate::output::PutVoiceConnectorLoggingConfigurationOutput).
pub mod put_voice_connector_logging_configuration_output {

    /// A builder for [`PutVoiceConnectorLoggingConfigurationOutput`](crate::output::PutVoiceConnectorLoggingConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) logging_configuration: std::option::Option<crate::model::LoggingConfiguration>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn logging_configuration(mut self, input: crate::model::LoggingConfiguration) -> Self {
            self.logging_configuration = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_logging_configuration(
            mut self,
            input: std::option::Option<crate::model::LoggingConfiguration>,
        ) -> Self {
            self.logging_configuration = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PutVoiceConnectorLoggingConfigurationOutput`](crate::output::PutVoiceConnectorLoggingConfigurationOutput).
        pub fn build(self) -> crate::output::PutVoiceConnectorLoggingConfigurationOutput {
            crate::output::PutVoiceConnectorLoggingConfigurationOutput {
                logging_configuration: self.logging_configuration,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutVoiceConnectorEmergencyCallingConfigurationOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub emergency_calling_configuration:
        std::option::Option<crate::model::EmergencyCallingConfiguration>,
    _request_id: Option<String>,
}
impl PutVoiceConnectorEmergencyCallingConfigurationOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn emergency_calling_configuration(
        &self,
    ) -> std::option::Option<&crate::model::EmergencyCallingConfiguration> {
        self.emergency_calling_configuration.as_ref()
    }
}
impl aws_http::request_id::RequestId for PutVoiceConnectorEmergencyCallingConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl PutVoiceConnectorEmergencyCallingConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`PutVoiceConnectorEmergencyCallingConfigurationOutput`](crate::output::PutVoiceConnectorEmergencyCallingConfigurationOutput).
    pub fn builder(
    ) -> crate::output::put_voice_connector_emergency_calling_configuration_output::Builder {
        crate::output::put_voice_connector_emergency_calling_configuration_output::Builder::default(
        )
    }
}

/// See [`PutVoiceConnectorEmergencyCallingConfigurationOutput`](crate::output::PutVoiceConnectorEmergencyCallingConfigurationOutput).
pub mod put_voice_connector_emergency_calling_configuration_output {

    /// A builder for [`PutVoiceConnectorEmergencyCallingConfigurationOutput`](crate::output::PutVoiceConnectorEmergencyCallingConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) emergency_calling_configuration:
            std::option::Option<crate::model::EmergencyCallingConfiguration>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn emergency_calling_configuration(
            mut self,
            input: crate::model::EmergencyCallingConfiguration,
        ) -> Self {
            self.emergency_calling_configuration = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_emergency_calling_configuration(
            mut self,
            input: std::option::Option<crate::model::EmergencyCallingConfiguration>,
        ) -> Self {
            self.emergency_calling_configuration = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PutVoiceConnectorEmergencyCallingConfigurationOutput`](crate::output::PutVoiceConnectorEmergencyCallingConfigurationOutput).
        pub fn build(self) -> crate::output::PutVoiceConnectorEmergencyCallingConfigurationOutput {
            crate::output::PutVoiceConnectorEmergencyCallingConfigurationOutput {
                emergency_calling_configuration: self.emergency_calling_configuration,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutSipMediaApplicationLoggingConfigurationOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub sip_media_application_logging_configuration:
        std::option::Option<crate::model::SipMediaApplicationLoggingConfiguration>,
    _request_id: Option<String>,
}
impl PutSipMediaApplicationLoggingConfigurationOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn sip_media_application_logging_configuration(
        &self,
    ) -> std::option::Option<&crate::model::SipMediaApplicationLoggingConfiguration> {
        self.sip_media_application_logging_configuration.as_ref()
    }
}
impl aws_http::request_id::RequestId for PutSipMediaApplicationLoggingConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl PutSipMediaApplicationLoggingConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`PutSipMediaApplicationLoggingConfigurationOutput`](crate::output::PutSipMediaApplicationLoggingConfigurationOutput).
    pub fn builder(
    ) -> crate::output::put_sip_media_application_logging_configuration_output::Builder {
        crate::output::put_sip_media_application_logging_configuration_output::Builder::default()
    }
}

/// See [`PutSipMediaApplicationLoggingConfigurationOutput`](crate::output::PutSipMediaApplicationLoggingConfigurationOutput).
pub mod put_sip_media_application_logging_configuration_output {

    /// A builder for [`PutSipMediaApplicationLoggingConfigurationOutput`](crate::output::PutSipMediaApplicationLoggingConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) sip_media_application_logging_configuration:
            std::option::Option<crate::model::SipMediaApplicationLoggingConfiguration>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn sip_media_application_logging_configuration(
            mut self,
            input: crate::model::SipMediaApplicationLoggingConfiguration,
        ) -> Self {
            self.sip_media_application_logging_configuration = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_sip_media_application_logging_configuration(
            mut self,
            input: std::option::Option<crate::model::SipMediaApplicationLoggingConfiguration>,
        ) -> Self {
            self.sip_media_application_logging_configuration = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PutSipMediaApplicationLoggingConfigurationOutput`](crate::output::PutSipMediaApplicationLoggingConfigurationOutput).
        pub fn build(self) -> crate::output::PutSipMediaApplicationLoggingConfigurationOutput {
            crate::output::PutSipMediaApplicationLoggingConfigurationOutput {
                sip_media_application_logging_configuration: self
                    .sip_media_application_logging_configuration,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutSipMediaApplicationAlexaSkillConfigurationOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub sip_media_application_alexa_skill_configuration:
        std::option::Option<crate::model::SipMediaApplicationAlexaSkillConfiguration>,
    _request_id: Option<String>,
}
impl PutSipMediaApplicationAlexaSkillConfigurationOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn sip_media_application_alexa_skill_configuration(
        &self,
    ) -> std::option::Option<&crate::model::SipMediaApplicationAlexaSkillConfiguration> {
        self.sip_media_application_alexa_skill_configuration
            .as_ref()
    }
}
impl aws_http::request_id::RequestId for PutSipMediaApplicationAlexaSkillConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl PutSipMediaApplicationAlexaSkillConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`PutSipMediaApplicationAlexaSkillConfigurationOutput`](crate::output::PutSipMediaApplicationAlexaSkillConfigurationOutput).
    pub fn builder(
    ) -> crate::output::put_sip_media_application_alexa_skill_configuration_output::Builder {
        crate::output::put_sip_media_application_alexa_skill_configuration_output::Builder::default(
        )
    }
}

/// See [`PutSipMediaApplicationAlexaSkillConfigurationOutput`](crate::output::PutSipMediaApplicationAlexaSkillConfigurationOutput).
pub mod put_sip_media_application_alexa_skill_configuration_output {

    /// A builder for [`PutSipMediaApplicationAlexaSkillConfigurationOutput`](crate::output::PutSipMediaApplicationAlexaSkillConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) sip_media_application_alexa_skill_configuration:
            std::option::Option<crate::model::SipMediaApplicationAlexaSkillConfiguration>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn sip_media_application_alexa_skill_configuration(
            mut self,
            input: crate::model::SipMediaApplicationAlexaSkillConfiguration,
        ) -> Self {
            self.sip_media_application_alexa_skill_configuration = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_sip_media_application_alexa_skill_configuration(
            mut self,
            input: std::option::Option<crate::model::SipMediaApplicationAlexaSkillConfiguration>,
        ) -> Self {
            self.sip_media_application_alexa_skill_configuration = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PutSipMediaApplicationAlexaSkillConfigurationOutput`](crate::output::PutSipMediaApplicationAlexaSkillConfigurationOutput).
        pub fn build(self) -> crate::output::PutSipMediaApplicationAlexaSkillConfigurationOutput {
            crate::output::PutSipMediaApplicationAlexaSkillConfigurationOutput {
                sip_media_application_alexa_skill_configuration: self
                    .sip_media_application_alexa_skill_configuration,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListVoiceConnectorTerminationCredentialsOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub usernames: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl ListVoiceConnectorTerminationCredentialsOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn usernames(&self) -> std::option::Option<&[std::string::String]> {
        self.usernames.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListVoiceConnectorTerminationCredentialsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListVoiceConnectorTerminationCredentialsOutput {
    /// Creates a new builder-style object to manufacture [`ListVoiceConnectorTerminationCredentialsOutput`](crate::output::ListVoiceConnectorTerminationCredentialsOutput).
    pub fn builder() -> crate::output::list_voice_connector_termination_credentials_output::Builder
    {
        crate::output::list_voice_connector_termination_credentials_output::Builder::default()
    }
}

/// See [`ListVoiceConnectorTerminationCredentialsOutput`](crate::output::ListVoiceConnectorTerminationCredentialsOutput).
pub mod list_voice_connector_termination_credentials_output {

    /// A builder for [`ListVoiceConnectorTerminationCredentialsOutput`](crate::output::ListVoiceConnectorTerminationCredentialsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) usernames: std::option::Option<std::vec::Vec<std::string::String>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `usernames`.
        ///
        /// To override the contents of this collection use [`set_usernames`](Self::set_usernames).
        ///
        pub fn usernames(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.usernames.unwrap_or_default();
            v.push(input.into());
            self.usernames = Some(v);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_usernames(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.usernames = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListVoiceConnectorTerminationCredentialsOutput`](crate::output::ListVoiceConnectorTerminationCredentialsOutput).
        pub fn build(self) -> crate::output::ListVoiceConnectorTerminationCredentialsOutput {
            crate::output::ListVoiceConnectorTerminationCredentialsOutput {
                usernames: self.usernames,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListVoiceConnectorsOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub voice_connectors: std::option::Option<std::vec::Vec<crate::model::VoiceConnector>>,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListVoiceConnectorsOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connectors(&self) -> std::option::Option<&[crate::model::VoiceConnector]> {
        self.voice_connectors.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListVoiceConnectorsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListVoiceConnectorsOutput {
    /// Creates a new builder-style object to manufacture [`ListVoiceConnectorsOutput`](crate::output::ListVoiceConnectorsOutput).
    pub fn builder() -> crate::output::list_voice_connectors_output::Builder {
        crate::output::list_voice_connectors_output::Builder::default()
    }
}

/// See [`ListVoiceConnectorsOutput`](crate::output::ListVoiceConnectorsOutput).
pub mod list_voice_connectors_output {

    /// A builder for [`ListVoiceConnectorsOutput`](crate::output::ListVoiceConnectorsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) voice_connectors:
            std::option::Option<std::vec::Vec<crate::model::VoiceConnector>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `voice_connectors`.
        ///
        /// To override the contents of this collection use [`set_voice_connectors`](Self::set_voice_connectors).
        ///
        pub fn voice_connectors(mut self, input: crate::model::VoiceConnector) -> Self {
            let mut v = self.voice_connectors.unwrap_or_default();
            v.push(input);
            self.voice_connectors = Some(v);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_voice_connectors(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::VoiceConnector>>,
        ) -> Self {
            self.voice_connectors = input;
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListVoiceConnectorsOutput`](crate::output::ListVoiceConnectorsOutput).
        pub fn build(self) -> crate::output::ListVoiceConnectorsOutput {
            crate::output::ListVoiceConnectorsOutput {
                voice_connectors: self.voice_connectors,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListVoiceConnectorGroupsOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub voice_connector_groups:
        std::option::Option<std::vec::Vec<crate::model::VoiceConnectorGroup>>,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListVoiceConnectorGroupsOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_groups(
        &self,
    ) -> std::option::Option<&[crate::model::VoiceConnectorGroup]> {
        self.voice_connector_groups.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListVoiceConnectorGroupsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListVoiceConnectorGroupsOutput {
    /// Creates a new builder-style object to manufacture [`ListVoiceConnectorGroupsOutput`](crate::output::ListVoiceConnectorGroupsOutput).
    pub fn builder() -> crate::output::list_voice_connector_groups_output::Builder {
        crate::output::list_voice_connector_groups_output::Builder::default()
    }
}

/// See [`ListVoiceConnectorGroupsOutput`](crate::output::ListVoiceConnectorGroupsOutput).
pub mod list_voice_connector_groups_output {

    /// A builder for [`ListVoiceConnectorGroupsOutput`](crate::output::ListVoiceConnectorGroupsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) voice_connector_groups:
            std::option::Option<std::vec::Vec<crate::model::VoiceConnectorGroup>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `voice_connector_groups`.
        ///
        /// To override the contents of this collection use [`set_voice_connector_groups`](Self::set_voice_connector_groups).
        ///
        pub fn voice_connector_groups(mut self, input: crate::model::VoiceConnectorGroup) -> Self {
            let mut v = self.voice_connector_groups.unwrap_or_default();
            v.push(input);
            self.voice_connector_groups = Some(v);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_voice_connector_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::VoiceConnectorGroup>>,
        ) -> Self {
            self.voice_connector_groups = input;
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListVoiceConnectorGroupsOutput`](crate::output::ListVoiceConnectorGroupsOutput).
        pub fn build(self) -> crate::output::ListVoiceConnectorGroupsOutput {
            crate::output::ListVoiceConnectorGroupsOutput {
                voice_connector_groups: self.voice_connector_groups,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListSupportedPhoneNumberCountriesOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub phone_number_countries:
        std::option::Option<std::vec::Vec<crate::model::PhoneNumberCountry>>,
    _request_id: Option<String>,
}
impl ListSupportedPhoneNumberCountriesOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn phone_number_countries(
        &self,
    ) -> std::option::Option<&[crate::model::PhoneNumberCountry]> {
        self.phone_number_countries.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListSupportedPhoneNumberCountriesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListSupportedPhoneNumberCountriesOutput {
    /// Creates a new builder-style object to manufacture [`ListSupportedPhoneNumberCountriesOutput`](crate::output::ListSupportedPhoneNumberCountriesOutput).
    pub fn builder() -> crate::output::list_supported_phone_number_countries_output::Builder {
        crate::output::list_supported_phone_number_countries_output::Builder::default()
    }
}

/// See [`ListSupportedPhoneNumberCountriesOutput`](crate::output::ListSupportedPhoneNumberCountriesOutput).
pub mod list_supported_phone_number_countries_output {

    /// A builder for [`ListSupportedPhoneNumberCountriesOutput`](crate::output::ListSupportedPhoneNumberCountriesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) phone_number_countries:
            std::option::Option<std::vec::Vec<crate::model::PhoneNumberCountry>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `phone_number_countries`.
        ///
        /// To override the contents of this collection use [`set_phone_number_countries`](Self::set_phone_number_countries).
        ///
        pub fn phone_number_countries(mut self, input: crate::model::PhoneNumberCountry) -> Self {
            let mut v = self.phone_number_countries.unwrap_or_default();
            v.push(input);
            self.phone_number_countries = Some(v);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_phone_number_countries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PhoneNumberCountry>>,
        ) -> Self {
            self.phone_number_countries = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListSupportedPhoneNumberCountriesOutput`](crate::output::ListSupportedPhoneNumberCountriesOutput).
        pub fn build(self) -> crate::output::ListSupportedPhoneNumberCountriesOutput {
            crate::output::ListSupportedPhoneNumberCountriesOutput {
                phone_number_countries: self.phone_number_countries,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListSipRulesOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub sip_rules: std::option::Option<std::vec::Vec<crate::model::SipRule>>,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListSipRulesOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn sip_rules(&self) -> std::option::Option<&[crate::model::SipRule]> {
        self.sip_rules.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListSipRulesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListSipRulesOutput {
    /// Creates a new builder-style object to manufacture [`ListSipRulesOutput`](crate::output::ListSipRulesOutput).
    pub fn builder() -> crate::output::list_sip_rules_output::Builder {
        crate::output::list_sip_rules_output::Builder::default()
    }
}

/// See [`ListSipRulesOutput`](crate::output::ListSipRulesOutput).
pub mod list_sip_rules_output {

    /// A builder for [`ListSipRulesOutput`](crate::output::ListSipRulesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) sip_rules: std::option::Option<std::vec::Vec<crate::model::SipRule>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `sip_rules`.
        ///
        /// To override the contents of this collection use [`set_sip_rules`](Self::set_sip_rules).
        ///
        pub fn sip_rules(mut self, input: crate::model::SipRule) -> Self {
            let mut v = self.sip_rules.unwrap_or_default();
            v.push(input);
            self.sip_rules = Some(v);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_sip_rules(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SipRule>>,
        ) -> Self {
            self.sip_rules = input;
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListSipRulesOutput`](crate::output::ListSipRulesOutput).
        pub fn build(self) -> crate::output::ListSipRulesOutput {
            crate::output::ListSipRulesOutput {
                sip_rules: self.sip_rules,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListSipMediaApplicationsOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub sip_media_applications:
        std::option::Option<std::vec::Vec<crate::model::SipMediaApplication>>,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListSipMediaApplicationsOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn sip_media_applications(
        &self,
    ) -> std::option::Option<&[crate::model::SipMediaApplication]> {
        self.sip_media_applications.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListSipMediaApplicationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListSipMediaApplicationsOutput {
    /// Creates a new builder-style object to manufacture [`ListSipMediaApplicationsOutput`](crate::output::ListSipMediaApplicationsOutput).
    pub fn builder() -> crate::output::list_sip_media_applications_output::Builder {
        crate::output::list_sip_media_applications_output::Builder::default()
    }
}

/// See [`ListSipMediaApplicationsOutput`](crate::output::ListSipMediaApplicationsOutput).
pub mod list_sip_media_applications_output {

    /// A builder for [`ListSipMediaApplicationsOutput`](crate::output::ListSipMediaApplicationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) sip_media_applications:
            std::option::Option<std::vec::Vec<crate::model::SipMediaApplication>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `sip_media_applications`.
        ///
        /// To override the contents of this collection use [`set_sip_media_applications`](Self::set_sip_media_applications).
        ///
        pub fn sip_media_applications(mut self, input: crate::model::SipMediaApplication) -> Self {
            let mut v = self.sip_media_applications.unwrap_or_default();
            v.push(input);
            self.sip_media_applications = Some(v);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_sip_media_applications(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SipMediaApplication>>,
        ) -> Self {
            self.sip_media_applications = input;
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListSipMediaApplicationsOutput`](crate::output::ListSipMediaApplicationsOutput).
        pub fn build(self) -> crate::output::ListSipMediaApplicationsOutput {
            crate::output::ListSipMediaApplicationsOutput {
                sip_media_applications: self.sip_media_applications,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListProxySessionsOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub proxy_sessions: std::option::Option<std::vec::Vec<crate::model::ProxySession>>,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListProxySessionsOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn proxy_sessions(&self) -> std::option::Option<&[crate::model::ProxySession]> {
        self.proxy_sessions.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListProxySessionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListProxySessionsOutput {
    /// Creates a new builder-style object to manufacture [`ListProxySessionsOutput`](crate::output::ListProxySessionsOutput).
    pub fn builder() -> crate::output::list_proxy_sessions_output::Builder {
        crate::output::list_proxy_sessions_output::Builder::default()
    }
}

/// See [`ListProxySessionsOutput`](crate::output::ListProxySessionsOutput).
pub mod list_proxy_sessions_output {

    /// A builder for [`ListProxySessionsOutput`](crate::output::ListProxySessionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) proxy_sessions: std::option::Option<std::vec::Vec<crate::model::ProxySession>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `proxy_sessions`.
        ///
        /// To override the contents of this collection use [`set_proxy_sessions`](Self::set_proxy_sessions).
        ///
        pub fn proxy_sessions(mut self, input: crate::model::ProxySession) -> Self {
            let mut v = self.proxy_sessions.unwrap_or_default();
            v.push(input);
            self.proxy_sessions = Some(v);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_proxy_sessions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ProxySession>>,
        ) -> Self {
            self.proxy_sessions = input;
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListProxySessionsOutput`](crate::output::ListProxySessionsOutput).
        pub fn build(self) -> crate::output::ListProxySessionsOutput {
            crate::output::ListProxySessionsOutput {
                proxy_sessions: self.proxy_sessions,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListPhoneNumbersOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub phone_numbers: std::option::Option<std::vec::Vec<crate::model::PhoneNumber>>,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListPhoneNumbersOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn phone_numbers(&self) -> std::option::Option<&[crate::model::PhoneNumber]> {
        self.phone_numbers.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListPhoneNumbersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListPhoneNumbersOutput {
    /// Creates a new builder-style object to manufacture [`ListPhoneNumbersOutput`](crate::output::ListPhoneNumbersOutput).
    pub fn builder() -> crate::output::list_phone_numbers_output::Builder {
        crate::output::list_phone_numbers_output::Builder::default()
    }
}

/// See [`ListPhoneNumbersOutput`](crate::output::ListPhoneNumbersOutput).
pub mod list_phone_numbers_output {

    /// A builder for [`ListPhoneNumbersOutput`](crate::output::ListPhoneNumbersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) phone_numbers: std::option::Option<std::vec::Vec<crate::model::PhoneNumber>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `phone_numbers`.
        ///
        /// To override the contents of this collection use [`set_phone_numbers`](Self::set_phone_numbers).
        ///
        pub fn phone_numbers(mut self, input: crate::model::PhoneNumber) -> Self {
            let mut v = self.phone_numbers.unwrap_or_default();
            v.push(input);
            self.phone_numbers = Some(v);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_phone_numbers(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PhoneNumber>>,
        ) -> Self {
            self.phone_numbers = input;
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListPhoneNumbersOutput`](crate::output::ListPhoneNumbersOutput).
        pub fn build(self) -> crate::output::ListPhoneNumbersOutput {
            crate::output::ListPhoneNumbersOutput {
                phone_numbers: self.phone_numbers,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListPhoneNumberOrdersOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub phone_number_orders: std::option::Option<std::vec::Vec<crate::model::PhoneNumberOrder>>,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListPhoneNumberOrdersOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn phone_number_orders(&self) -> std::option::Option<&[crate::model::PhoneNumberOrder]> {
        self.phone_number_orders.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListPhoneNumberOrdersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListPhoneNumberOrdersOutput {
    /// Creates a new builder-style object to manufacture [`ListPhoneNumberOrdersOutput`](crate::output::ListPhoneNumberOrdersOutput).
    pub fn builder() -> crate::output::list_phone_number_orders_output::Builder {
        crate::output::list_phone_number_orders_output::Builder::default()
    }
}

/// See [`ListPhoneNumberOrdersOutput`](crate::output::ListPhoneNumberOrdersOutput).
pub mod list_phone_number_orders_output {

    /// A builder for [`ListPhoneNumberOrdersOutput`](crate::output::ListPhoneNumberOrdersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) phone_number_orders:
            std::option::Option<std::vec::Vec<crate::model::PhoneNumberOrder>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `phone_number_orders`.
        ///
        /// To override the contents of this collection use [`set_phone_number_orders`](Self::set_phone_number_orders).
        ///
        pub fn phone_number_orders(mut self, input: crate::model::PhoneNumberOrder) -> Self {
            let mut v = self.phone_number_orders.unwrap_or_default();
            v.push(input);
            self.phone_number_orders = Some(v);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_phone_number_orders(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PhoneNumberOrder>>,
        ) -> Self {
            self.phone_number_orders = input;
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListPhoneNumberOrdersOutput`](crate::output::ListPhoneNumberOrdersOutput).
        pub fn build(self) -> crate::output::ListPhoneNumberOrdersOutput {
            crate::output::ListPhoneNumberOrdersOutput {
                phone_number_orders: self.phone_number_orders,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListAvailableVoiceConnectorRegionsOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub voice_connector_regions:
        std::option::Option<std::vec::Vec<crate::model::VoiceConnectorAwsRegion>>,
    _request_id: Option<String>,
}
impl ListAvailableVoiceConnectorRegionsOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_regions(
        &self,
    ) -> std::option::Option<&[crate::model::VoiceConnectorAwsRegion]> {
        self.voice_connector_regions.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListAvailableVoiceConnectorRegionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListAvailableVoiceConnectorRegionsOutput {
    /// Creates a new builder-style object to manufacture [`ListAvailableVoiceConnectorRegionsOutput`](crate::output::ListAvailableVoiceConnectorRegionsOutput).
    pub fn builder() -> crate::output::list_available_voice_connector_regions_output::Builder {
        crate::output::list_available_voice_connector_regions_output::Builder::default()
    }
}

/// See [`ListAvailableVoiceConnectorRegionsOutput`](crate::output::ListAvailableVoiceConnectorRegionsOutput).
pub mod list_available_voice_connector_regions_output {

    /// A builder for [`ListAvailableVoiceConnectorRegionsOutput`](crate::output::ListAvailableVoiceConnectorRegionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) voice_connector_regions:
            std::option::Option<std::vec::Vec<crate::model::VoiceConnectorAwsRegion>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `voice_connector_regions`.
        ///
        /// To override the contents of this collection use [`set_voice_connector_regions`](Self::set_voice_connector_regions).
        ///
        pub fn voice_connector_regions(
            mut self,
            input: crate::model::VoiceConnectorAwsRegion,
        ) -> Self {
            let mut v = self.voice_connector_regions.unwrap_or_default();
            v.push(input);
            self.voice_connector_regions = Some(v);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_voice_connector_regions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::VoiceConnectorAwsRegion>>,
        ) -> Self {
            self.voice_connector_regions = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListAvailableVoiceConnectorRegionsOutput`](crate::output::ListAvailableVoiceConnectorRegionsOutput).
        pub fn build(self) -> crate::output::ListAvailableVoiceConnectorRegionsOutput {
            crate::output::ListAvailableVoiceConnectorRegionsOutput {
                voice_connector_regions: self.voice_connector_regions,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetVoiceConnectorTerminationHealthOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub termination_health: std::option::Option<crate::model::TerminationHealth>,
    _request_id: Option<String>,
}
impl GetVoiceConnectorTerminationHealthOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn termination_health(&self) -> std::option::Option<&crate::model::TerminationHealth> {
        self.termination_health.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetVoiceConnectorTerminationHealthOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetVoiceConnectorTerminationHealthOutput {
    /// Creates a new builder-style object to manufacture [`GetVoiceConnectorTerminationHealthOutput`](crate::output::GetVoiceConnectorTerminationHealthOutput).
    pub fn builder() -> crate::output::get_voice_connector_termination_health_output::Builder {
        crate::output::get_voice_connector_termination_health_output::Builder::default()
    }
}

/// See [`GetVoiceConnectorTerminationHealthOutput`](crate::output::GetVoiceConnectorTerminationHealthOutput).
pub mod get_voice_connector_termination_health_output {

    /// A builder for [`GetVoiceConnectorTerminationHealthOutput`](crate::output::GetVoiceConnectorTerminationHealthOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) termination_health: std::option::Option<crate::model::TerminationHealth>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn termination_health(mut self, input: crate::model::TerminationHealth) -> Self {
            self.termination_health = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_termination_health(
            mut self,
            input: std::option::Option<crate::model::TerminationHealth>,
        ) -> Self {
            self.termination_health = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetVoiceConnectorTerminationHealthOutput`](crate::output::GetVoiceConnectorTerminationHealthOutput).
        pub fn build(self) -> crate::output::GetVoiceConnectorTerminationHealthOutput {
            crate::output::GetVoiceConnectorTerminationHealthOutput {
                termination_health: self.termination_health,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetVoiceConnectorTerminationOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub termination: std::option::Option<crate::model::Termination>,
    _request_id: Option<String>,
}
impl GetVoiceConnectorTerminationOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn termination(&self) -> std::option::Option<&crate::model::Termination> {
        self.termination.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetVoiceConnectorTerminationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetVoiceConnectorTerminationOutput {
    /// Creates a new builder-style object to manufacture [`GetVoiceConnectorTerminationOutput`](crate::output::GetVoiceConnectorTerminationOutput).
    pub fn builder() -> crate::output::get_voice_connector_termination_output::Builder {
        crate::output::get_voice_connector_termination_output::Builder::default()
    }
}

/// See [`GetVoiceConnectorTerminationOutput`](crate::output::GetVoiceConnectorTerminationOutput).
pub mod get_voice_connector_termination_output {

    /// A builder for [`GetVoiceConnectorTerminationOutput`](crate::output::GetVoiceConnectorTerminationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) termination: std::option::Option<crate::model::Termination>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn termination(mut self, input: crate::model::Termination) -> Self {
            self.termination = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_termination(
            mut self,
            input: std::option::Option<crate::model::Termination>,
        ) -> Self {
            self.termination = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetVoiceConnectorTerminationOutput`](crate::output::GetVoiceConnectorTerminationOutput).
        pub fn build(self) -> crate::output::GetVoiceConnectorTerminationOutput {
            crate::output::GetVoiceConnectorTerminationOutput {
                termination: self.termination,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetVoiceConnectorStreamingConfigurationOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub streaming_configuration: std::option::Option<crate::model::StreamingConfiguration>,
    _request_id: Option<String>,
}
impl GetVoiceConnectorStreamingConfigurationOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn streaming_configuration(
        &self,
    ) -> std::option::Option<&crate::model::StreamingConfiguration> {
        self.streaming_configuration.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetVoiceConnectorStreamingConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetVoiceConnectorStreamingConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`GetVoiceConnectorStreamingConfigurationOutput`](crate::output::GetVoiceConnectorStreamingConfigurationOutput).
    pub fn builder() -> crate::output::get_voice_connector_streaming_configuration_output::Builder {
        crate::output::get_voice_connector_streaming_configuration_output::Builder::default()
    }
}

/// See [`GetVoiceConnectorStreamingConfigurationOutput`](crate::output::GetVoiceConnectorStreamingConfigurationOutput).
pub mod get_voice_connector_streaming_configuration_output {

    /// A builder for [`GetVoiceConnectorStreamingConfigurationOutput`](crate::output::GetVoiceConnectorStreamingConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) streaming_configuration:
            std::option::Option<crate::model::StreamingConfiguration>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn streaming_configuration(
            mut self,
            input: crate::model::StreamingConfiguration,
        ) -> Self {
            self.streaming_configuration = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_streaming_configuration(
            mut self,
            input: std::option::Option<crate::model::StreamingConfiguration>,
        ) -> Self {
            self.streaming_configuration = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetVoiceConnectorStreamingConfigurationOutput`](crate::output::GetVoiceConnectorStreamingConfigurationOutput).
        pub fn build(self) -> crate::output::GetVoiceConnectorStreamingConfigurationOutput {
            crate::output::GetVoiceConnectorStreamingConfigurationOutput {
                streaming_configuration: self.streaming_configuration,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetVoiceConnectorProxyOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub proxy: std::option::Option<crate::model::Proxy>,
    _request_id: Option<String>,
}
impl GetVoiceConnectorProxyOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn proxy(&self) -> std::option::Option<&crate::model::Proxy> {
        self.proxy.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetVoiceConnectorProxyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetVoiceConnectorProxyOutput {
    /// Creates a new builder-style object to manufacture [`GetVoiceConnectorProxyOutput`](crate::output::GetVoiceConnectorProxyOutput).
    pub fn builder() -> crate::output::get_voice_connector_proxy_output::Builder {
        crate::output::get_voice_connector_proxy_output::Builder::default()
    }
}

/// See [`GetVoiceConnectorProxyOutput`](crate::output::GetVoiceConnectorProxyOutput).
pub mod get_voice_connector_proxy_output {

    /// A builder for [`GetVoiceConnectorProxyOutput`](crate::output::GetVoiceConnectorProxyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) proxy: std::option::Option<crate::model::Proxy>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn proxy(mut self, input: crate::model::Proxy) -> Self {
            self.proxy = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_proxy(mut self, input: std::option::Option<crate::model::Proxy>) -> Self {
            self.proxy = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetVoiceConnectorProxyOutput`](crate::output::GetVoiceConnectorProxyOutput).
        pub fn build(self) -> crate::output::GetVoiceConnectorProxyOutput {
            crate::output::GetVoiceConnectorProxyOutput {
                proxy: self.proxy,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetVoiceConnectorOriginationOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub origination: std::option::Option<crate::model::Origination>,
    _request_id: Option<String>,
}
impl GetVoiceConnectorOriginationOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn origination(&self) -> std::option::Option<&crate::model::Origination> {
        self.origination.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetVoiceConnectorOriginationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetVoiceConnectorOriginationOutput {
    /// Creates a new builder-style object to manufacture [`GetVoiceConnectorOriginationOutput`](crate::output::GetVoiceConnectorOriginationOutput).
    pub fn builder() -> crate::output::get_voice_connector_origination_output::Builder {
        crate::output::get_voice_connector_origination_output::Builder::default()
    }
}

/// See [`GetVoiceConnectorOriginationOutput`](crate::output::GetVoiceConnectorOriginationOutput).
pub mod get_voice_connector_origination_output {

    /// A builder for [`GetVoiceConnectorOriginationOutput`](crate::output::GetVoiceConnectorOriginationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) origination: std::option::Option<crate::model::Origination>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn origination(mut self, input: crate::model::Origination) -> Self {
            self.origination = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_origination(
            mut self,
            input: std::option::Option<crate::model::Origination>,
        ) -> Self {
            self.origination = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetVoiceConnectorOriginationOutput`](crate::output::GetVoiceConnectorOriginationOutput).
        pub fn build(self) -> crate::output::GetVoiceConnectorOriginationOutput {
            crate::output::GetVoiceConnectorOriginationOutput {
                origination: self.origination,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetVoiceConnectorLoggingConfigurationOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub logging_configuration: std::option::Option<crate::model::LoggingConfiguration>,
    _request_id: Option<String>,
}
impl GetVoiceConnectorLoggingConfigurationOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn logging_configuration(
        &self,
    ) -> std::option::Option<&crate::model::LoggingConfiguration> {
        self.logging_configuration.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetVoiceConnectorLoggingConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetVoiceConnectorLoggingConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`GetVoiceConnectorLoggingConfigurationOutput`](crate::output::GetVoiceConnectorLoggingConfigurationOutput).
    pub fn builder() -> crate::output::get_voice_connector_logging_configuration_output::Builder {
        crate::output::get_voice_connector_logging_configuration_output::Builder::default()
    }
}

/// See [`GetVoiceConnectorLoggingConfigurationOutput`](crate::output::GetVoiceConnectorLoggingConfigurationOutput).
pub mod get_voice_connector_logging_configuration_output {

    /// A builder for [`GetVoiceConnectorLoggingConfigurationOutput`](crate::output::GetVoiceConnectorLoggingConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) logging_configuration: std::option::Option<crate::model::LoggingConfiguration>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn logging_configuration(mut self, input: crate::model::LoggingConfiguration) -> Self {
            self.logging_configuration = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_logging_configuration(
            mut self,
            input: std::option::Option<crate::model::LoggingConfiguration>,
        ) -> Self {
            self.logging_configuration = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetVoiceConnectorLoggingConfigurationOutput`](crate::output::GetVoiceConnectorLoggingConfigurationOutput).
        pub fn build(self) -> crate::output::GetVoiceConnectorLoggingConfigurationOutput {
            crate::output::GetVoiceConnectorLoggingConfigurationOutput {
                logging_configuration: self.logging_configuration,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetVoiceConnectorGroupOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub voice_connector_group: std::option::Option<crate::model::VoiceConnectorGroup>,
    _request_id: Option<String>,
}
impl GetVoiceConnectorGroupOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_group(&self) -> std::option::Option<&crate::model::VoiceConnectorGroup> {
        self.voice_connector_group.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetVoiceConnectorGroupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetVoiceConnectorGroupOutput {
    /// Creates a new builder-style object to manufacture [`GetVoiceConnectorGroupOutput`](crate::output::GetVoiceConnectorGroupOutput).
    pub fn builder() -> crate::output::get_voice_connector_group_output::Builder {
        crate::output::get_voice_connector_group_output::Builder::default()
    }
}

/// See [`GetVoiceConnectorGroupOutput`](crate::output::GetVoiceConnectorGroupOutput).
pub mod get_voice_connector_group_output {

    /// A builder for [`GetVoiceConnectorGroupOutput`](crate::output::GetVoiceConnectorGroupOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) voice_connector_group: std::option::Option<crate::model::VoiceConnectorGroup>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn voice_connector_group(mut self, input: crate::model::VoiceConnectorGroup) -> Self {
            self.voice_connector_group = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_voice_connector_group(
            mut self,
            input: std::option::Option<crate::model::VoiceConnectorGroup>,
        ) -> Self {
            self.voice_connector_group = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetVoiceConnectorGroupOutput`](crate::output::GetVoiceConnectorGroupOutput).
        pub fn build(self) -> crate::output::GetVoiceConnectorGroupOutput {
            crate::output::GetVoiceConnectorGroupOutput {
                voice_connector_group: self.voice_connector_group,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetVoiceConnectorEmergencyCallingConfigurationOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub emergency_calling_configuration:
        std::option::Option<crate::model::EmergencyCallingConfiguration>,
    _request_id: Option<String>,
}
impl GetVoiceConnectorEmergencyCallingConfigurationOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn emergency_calling_configuration(
        &self,
    ) -> std::option::Option<&crate::model::EmergencyCallingConfiguration> {
        self.emergency_calling_configuration.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetVoiceConnectorEmergencyCallingConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetVoiceConnectorEmergencyCallingConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`GetVoiceConnectorEmergencyCallingConfigurationOutput`](crate::output::GetVoiceConnectorEmergencyCallingConfigurationOutput).
    pub fn builder(
    ) -> crate::output::get_voice_connector_emergency_calling_configuration_output::Builder {
        crate::output::get_voice_connector_emergency_calling_configuration_output::Builder::default(
        )
    }
}

/// See [`GetVoiceConnectorEmergencyCallingConfigurationOutput`](crate::output::GetVoiceConnectorEmergencyCallingConfigurationOutput).
pub mod get_voice_connector_emergency_calling_configuration_output {

    /// A builder for [`GetVoiceConnectorEmergencyCallingConfigurationOutput`](crate::output::GetVoiceConnectorEmergencyCallingConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) emergency_calling_configuration:
            std::option::Option<crate::model::EmergencyCallingConfiguration>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn emergency_calling_configuration(
            mut self,
            input: crate::model::EmergencyCallingConfiguration,
        ) -> Self {
            self.emergency_calling_configuration = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_emergency_calling_configuration(
            mut self,
            input: std::option::Option<crate::model::EmergencyCallingConfiguration>,
        ) -> Self {
            self.emergency_calling_configuration = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetVoiceConnectorEmergencyCallingConfigurationOutput`](crate::output::GetVoiceConnectorEmergencyCallingConfigurationOutput).
        pub fn build(self) -> crate::output::GetVoiceConnectorEmergencyCallingConfigurationOutput {
            crate::output::GetVoiceConnectorEmergencyCallingConfigurationOutput {
                emergency_calling_configuration: self.emergency_calling_configuration,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetVoiceConnectorOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub voice_connector: std::option::Option<crate::model::VoiceConnector>,
    _request_id: Option<String>,
}
impl GetVoiceConnectorOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector(&self) -> std::option::Option<&crate::model::VoiceConnector> {
        self.voice_connector.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetVoiceConnectorOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetVoiceConnectorOutput {
    /// Creates a new builder-style object to manufacture [`GetVoiceConnectorOutput`](crate::output::GetVoiceConnectorOutput).
    pub fn builder() -> crate::output::get_voice_connector_output::Builder {
        crate::output::get_voice_connector_output::Builder::default()
    }
}

/// See [`GetVoiceConnectorOutput`](crate::output::GetVoiceConnectorOutput).
pub mod get_voice_connector_output {

    /// A builder for [`GetVoiceConnectorOutput`](crate::output::GetVoiceConnectorOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) voice_connector: std::option::Option<crate::model::VoiceConnector>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn voice_connector(mut self, input: crate::model::VoiceConnector) -> Self {
            self.voice_connector = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_voice_connector(
            mut self,
            input: std::option::Option<crate::model::VoiceConnector>,
        ) -> Self {
            self.voice_connector = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetVoiceConnectorOutput`](crate::output::GetVoiceConnectorOutput).
        pub fn build(self) -> crate::output::GetVoiceConnectorOutput {
            crate::output::GetVoiceConnectorOutput {
                voice_connector: self.voice_connector,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSipRuleOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub sip_rule: std::option::Option<crate::model::SipRule>,
    _request_id: Option<String>,
}
impl GetSipRuleOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn sip_rule(&self) -> std::option::Option<&crate::model::SipRule> {
        self.sip_rule.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetSipRuleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetSipRuleOutput {
    /// Creates a new builder-style object to manufacture [`GetSipRuleOutput`](crate::output::GetSipRuleOutput).
    pub fn builder() -> crate::output::get_sip_rule_output::Builder {
        crate::output::get_sip_rule_output::Builder::default()
    }
}

/// See [`GetSipRuleOutput`](crate::output::GetSipRuleOutput).
pub mod get_sip_rule_output {

    /// A builder for [`GetSipRuleOutput`](crate::output::GetSipRuleOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) sip_rule: std::option::Option<crate::model::SipRule>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn sip_rule(mut self, input: crate::model::SipRule) -> Self {
            self.sip_rule = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_sip_rule(mut self, input: std::option::Option<crate::model::SipRule>) -> Self {
            self.sip_rule = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetSipRuleOutput`](crate::output::GetSipRuleOutput).
        pub fn build(self) -> crate::output::GetSipRuleOutput {
            crate::output::GetSipRuleOutput {
                sip_rule: self.sip_rule,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSipMediaApplicationLoggingConfigurationOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub sip_media_application_logging_configuration:
        std::option::Option<crate::model::SipMediaApplicationLoggingConfiguration>,
    _request_id: Option<String>,
}
impl GetSipMediaApplicationLoggingConfigurationOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn sip_media_application_logging_configuration(
        &self,
    ) -> std::option::Option<&crate::model::SipMediaApplicationLoggingConfiguration> {
        self.sip_media_application_logging_configuration.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetSipMediaApplicationLoggingConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetSipMediaApplicationLoggingConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`GetSipMediaApplicationLoggingConfigurationOutput`](crate::output::GetSipMediaApplicationLoggingConfigurationOutput).
    pub fn builder(
    ) -> crate::output::get_sip_media_application_logging_configuration_output::Builder {
        crate::output::get_sip_media_application_logging_configuration_output::Builder::default()
    }
}

/// See [`GetSipMediaApplicationLoggingConfigurationOutput`](crate::output::GetSipMediaApplicationLoggingConfigurationOutput).
pub mod get_sip_media_application_logging_configuration_output {

    /// A builder for [`GetSipMediaApplicationLoggingConfigurationOutput`](crate::output::GetSipMediaApplicationLoggingConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) sip_media_application_logging_configuration:
            std::option::Option<crate::model::SipMediaApplicationLoggingConfiguration>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn sip_media_application_logging_configuration(
            mut self,
            input: crate::model::SipMediaApplicationLoggingConfiguration,
        ) -> Self {
            self.sip_media_application_logging_configuration = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_sip_media_application_logging_configuration(
            mut self,
            input: std::option::Option<crate::model::SipMediaApplicationLoggingConfiguration>,
        ) -> Self {
            self.sip_media_application_logging_configuration = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetSipMediaApplicationLoggingConfigurationOutput`](crate::output::GetSipMediaApplicationLoggingConfigurationOutput).
        pub fn build(self) -> crate::output::GetSipMediaApplicationLoggingConfigurationOutput {
            crate::output::GetSipMediaApplicationLoggingConfigurationOutput {
                sip_media_application_logging_configuration: self
                    .sip_media_application_logging_configuration,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSipMediaApplicationAlexaSkillConfigurationOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub sip_media_application_alexa_skill_configuration:
        std::option::Option<crate::model::SipMediaApplicationAlexaSkillConfiguration>,
    _request_id: Option<String>,
}
impl GetSipMediaApplicationAlexaSkillConfigurationOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn sip_media_application_alexa_skill_configuration(
        &self,
    ) -> std::option::Option<&crate::model::SipMediaApplicationAlexaSkillConfiguration> {
        self.sip_media_application_alexa_skill_configuration
            .as_ref()
    }
}
impl aws_http::request_id::RequestId for GetSipMediaApplicationAlexaSkillConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetSipMediaApplicationAlexaSkillConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`GetSipMediaApplicationAlexaSkillConfigurationOutput`](crate::output::GetSipMediaApplicationAlexaSkillConfigurationOutput).
    pub fn builder(
    ) -> crate::output::get_sip_media_application_alexa_skill_configuration_output::Builder {
        crate::output::get_sip_media_application_alexa_skill_configuration_output::Builder::default(
        )
    }
}

/// See [`GetSipMediaApplicationAlexaSkillConfigurationOutput`](crate::output::GetSipMediaApplicationAlexaSkillConfigurationOutput).
pub mod get_sip_media_application_alexa_skill_configuration_output {

    /// A builder for [`GetSipMediaApplicationAlexaSkillConfigurationOutput`](crate::output::GetSipMediaApplicationAlexaSkillConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) sip_media_application_alexa_skill_configuration:
            std::option::Option<crate::model::SipMediaApplicationAlexaSkillConfiguration>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn sip_media_application_alexa_skill_configuration(
            mut self,
            input: crate::model::SipMediaApplicationAlexaSkillConfiguration,
        ) -> Self {
            self.sip_media_application_alexa_skill_configuration = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_sip_media_application_alexa_skill_configuration(
            mut self,
            input: std::option::Option<crate::model::SipMediaApplicationAlexaSkillConfiguration>,
        ) -> Self {
            self.sip_media_application_alexa_skill_configuration = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetSipMediaApplicationAlexaSkillConfigurationOutput`](crate::output::GetSipMediaApplicationAlexaSkillConfigurationOutput).
        pub fn build(self) -> crate::output::GetSipMediaApplicationAlexaSkillConfigurationOutput {
            crate::output::GetSipMediaApplicationAlexaSkillConfigurationOutput {
                sip_media_application_alexa_skill_configuration: self
                    .sip_media_application_alexa_skill_configuration,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSipMediaApplicationOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub sip_media_application: std::option::Option<crate::model::SipMediaApplication>,
    _request_id: Option<String>,
}
impl GetSipMediaApplicationOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn sip_media_application(&self) -> std::option::Option<&crate::model::SipMediaApplication> {
        self.sip_media_application.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetSipMediaApplicationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetSipMediaApplicationOutput {
    /// Creates a new builder-style object to manufacture [`GetSipMediaApplicationOutput`](crate::output::GetSipMediaApplicationOutput).
    pub fn builder() -> crate::output::get_sip_media_application_output::Builder {
        crate::output::get_sip_media_application_output::Builder::default()
    }
}

/// See [`GetSipMediaApplicationOutput`](crate::output::GetSipMediaApplicationOutput).
pub mod get_sip_media_application_output {

    /// A builder for [`GetSipMediaApplicationOutput`](crate::output::GetSipMediaApplicationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) sip_media_application: std::option::Option<crate::model::SipMediaApplication>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn sip_media_application(mut self, input: crate::model::SipMediaApplication) -> Self {
            self.sip_media_application = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_sip_media_application(
            mut self,
            input: std::option::Option<crate::model::SipMediaApplication>,
        ) -> Self {
            self.sip_media_application = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetSipMediaApplicationOutput`](crate::output::GetSipMediaApplicationOutput).
        pub fn build(self) -> crate::output::GetSipMediaApplicationOutput {
            crate::output::GetSipMediaApplicationOutput {
                sip_media_application: self.sip_media_application,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetProxySessionOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub proxy_session: std::option::Option<crate::model::ProxySession>,
    _request_id: Option<String>,
}
impl GetProxySessionOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn proxy_session(&self) -> std::option::Option<&crate::model::ProxySession> {
        self.proxy_session.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetProxySessionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetProxySessionOutput {
    /// Creates a new builder-style object to manufacture [`GetProxySessionOutput`](crate::output::GetProxySessionOutput).
    pub fn builder() -> crate::output::get_proxy_session_output::Builder {
        crate::output::get_proxy_session_output::Builder::default()
    }
}

/// See [`GetProxySessionOutput`](crate::output::GetProxySessionOutput).
pub mod get_proxy_session_output {

    /// A builder for [`GetProxySessionOutput`](crate::output::GetProxySessionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) proxy_session: std::option::Option<crate::model::ProxySession>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn proxy_session(mut self, input: crate::model::ProxySession) -> Self {
            self.proxy_session = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_proxy_session(
            mut self,
            input: std::option::Option<crate::model::ProxySession>,
        ) -> Self {
            self.proxy_session = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetProxySessionOutput`](crate::output::GetProxySessionOutput).
        pub fn build(self) -> crate::output::GetProxySessionOutput {
            crate::output::GetProxySessionOutput {
                proxy_session: self.proxy_session,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetPhoneNumberSettingsOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub calling_name: std::option::Option<std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub calling_name_updated_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetPhoneNumberSettingsOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn calling_name(&self) -> std::option::Option<&str> {
        self.calling_name.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn calling_name_updated_timestamp(
        &self,
    ) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.calling_name_updated_timestamp.as_ref()
    }
}
impl std::fmt::Debug for GetPhoneNumberSettingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetPhoneNumberSettingsOutput");
        formatter.field("calling_name", &"*** Sensitive Data Redacted ***");
        formatter.field(
            "calling_name_updated_timestamp",
            &self.calling_name_updated_timestamp,
        );
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl aws_http::request_id::RequestId for GetPhoneNumberSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetPhoneNumberSettingsOutput {
    /// Creates a new builder-style object to manufacture [`GetPhoneNumberSettingsOutput`](crate::output::GetPhoneNumberSettingsOutput).
    pub fn builder() -> crate::output::get_phone_number_settings_output::Builder {
        crate::output::get_phone_number_settings_output::Builder::default()
    }
}

/// See [`GetPhoneNumberSettingsOutput`](crate::output::GetPhoneNumberSettingsOutput).
pub mod get_phone_number_settings_output {

    /// A builder for [`GetPhoneNumberSettingsOutput`](crate::output::GetPhoneNumberSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
    pub struct Builder {
        pub(crate) calling_name: std::option::Option<std::string::String>,
        pub(crate) calling_name_updated_timestamp: std::option::Option<aws_smithy_types::DateTime>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn calling_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.calling_name = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_calling_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.calling_name = input;
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn calling_name_updated_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.calling_name_updated_timestamp = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_calling_name_updated_timestamp(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.calling_name_updated_timestamp = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetPhoneNumberSettingsOutput`](crate::output::GetPhoneNumberSettingsOutput).
        pub fn build(self) -> crate::output::GetPhoneNumberSettingsOutput {
            crate::output::GetPhoneNumberSettingsOutput {
                calling_name: self.calling_name,
                calling_name_updated_timestamp: self.calling_name_updated_timestamp,
                _request_id: self._request_id,
            }
        }
    }
    impl std::fmt::Debug for Builder {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut formatter = f.debug_struct("Builder");
            formatter.field("calling_name", &"*** Sensitive Data Redacted ***");
            formatter.field(
                "calling_name_updated_timestamp",
                &self.calling_name_updated_timestamp,
            );
            formatter.field("_request_id", &self._request_id);
            formatter.finish()
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetPhoneNumberOrderOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub phone_number_order: std::option::Option<crate::model::PhoneNumberOrder>,
    _request_id: Option<String>,
}
impl GetPhoneNumberOrderOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn phone_number_order(&self) -> std::option::Option<&crate::model::PhoneNumberOrder> {
        self.phone_number_order.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetPhoneNumberOrderOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetPhoneNumberOrderOutput {
    /// Creates a new builder-style object to manufacture [`GetPhoneNumberOrderOutput`](crate::output::GetPhoneNumberOrderOutput).
    pub fn builder() -> crate::output::get_phone_number_order_output::Builder {
        crate::output::get_phone_number_order_output::Builder::default()
    }
}

/// See [`GetPhoneNumberOrderOutput`](crate::output::GetPhoneNumberOrderOutput).
pub mod get_phone_number_order_output {

    /// A builder for [`GetPhoneNumberOrderOutput`](crate::output::GetPhoneNumberOrderOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) phone_number_order: std::option::Option<crate::model::PhoneNumberOrder>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn phone_number_order(mut self, input: crate::model::PhoneNumberOrder) -> Self {
            self.phone_number_order = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_phone_number_order(
            mut self,
            input: std::option::Option<crate::model::PhoneNumberOrder>,
        ) -> Self {
            self.phone_number_order = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetPhoneNumberOrderOutput`](crate::output::GetPhoneNumberOrderOutput).
        pub fn build(self) -> crate::output::GetPhoneNumberOrderOutput {
            crate::output::GetPhoneNumberOrderOutput {
                phone_number_order: self.phone_number_order,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetPhoneNumberOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub phone_number: std::option::Option<crate::model::PhoneNumber>,
    _request_id: Option<String>,
}
impl GetPhoneNumberOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn phone_number(&self) -> std::option::Option<&crate::model::PhoneNumber> {
        self.phone_number.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetPhoneNumberOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetPhoneNumberOutput {
    /// Creates a new builder-style object to manufacture [`GetPhoneNumberOutput`](crate::output::GetPhoneNumberOutput).
    pub fn builder() -> crate::output::get_phone_number_output::Builder {
        crate::output::get_phone_number_output::Builder::default()
    }
}

/// See [`GetPhoneNumberOutput`](crate::output::GetPhoneNumberOutput).
pub mod get_phone_number_output {

    /// A builder for [`GetPhoneNumberOutput`](crate::output::GetPhoneNumberOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) phone_number: std::option::Option<crate::model::PhoneNumber>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn phone_number(mut self, input: crate::model::PhoneNumber) -> Self {
            self.phone_number = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_phone_number(
            mut self,
            input: std::option::Option<crate::model::PhoneNumber>,
        ) -> Self {
            self.phone_number = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetPhoneNumberOutput`](crate::output::GetPhoneNumberOutput).
        pub fn build(self) -> crate::output::GetPhoneNumberOutput {
            crate::output::GetPhoneNumberOutput {
                phone_number: self.phone_number,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetGlobalSettingsOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub voice_connector: std::option::Option<crate::model::VoiceConnectorSettings>,
    _request_id: Option<String>,
}
impl GetGlobalSettingsOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector(&self) -> std::option::Option<&crate::model::VoiceConnectorSettings> {
        self.voice_connector.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetGlobalSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetGlobalSettingsOutput {
    /// Creates a new builder-style object to manufacture [`GetGlobalSettingsOutput`](crate::output::GetGlobalSettingsOutput).
    pub fn builder() -> crate::output::get_global_settings_output::Builder {
        crate::output::get_global_settings_output::Builder::default()
    }
}

/// See [`GetGlobalSettingsOutput`](crate::output::GetGlobalSettingsOutput).
pub mod get_global_settings_output {

    /// A builder for [`GetGlobalSettingsOutput`](crate::output::GetGlobalSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) voice_connector: std::option::Option<crate::model::VoiceConnectorSettings>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn voice_connector(mut self, input: crate::model::VoiceConnectorSettings) -> Self {
            self.voice_connector = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_voice_connector(
            mut self,
            input: std::option::Option<crate::model::VoiceConnectorSettings>,
        ) -> Self {
            self.voice_connector = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetGlobalSettingsOutput`](crate::output::GetGlobalSettingsOutput).
        pub fn build(self) -> crate::output::GetGlobalSettingsOutput {
            crate::output::GetGlobalSettingsOutput {
                voice_connector: self.voice_connector,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociatePhoneNumbersFromVoiceConnectorGroupOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub phone_number_errors: std::option::Option<std::vec::Vec<crate::model::PhoneNumberError>>,
    _request_id: Option<String>,
}
impl DisassociatePhoneNumbersFromVoiceConnectorGroupOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn phone_number_errors(&self) -> std::option::Option<&[crate::model::PhoneNumberError]> {
        self.phone_number_errors.as_deref()
    }
}
impl aws_http::request_id::RequestId for DisassociatePhoneNumbersFromVoiceConnectorGroupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DisassociatePhoneNumbersFromVoiceConnectorGroupOutput {
    /// Creates a new builder-style object to manufacture [`DisassociatePhoneNumbersFromVoiceConnectorGroupOutput`](crate::output::DisassociatePhoneNumbersFromVoiceConnectorGroupOutput).
    pub fn builder(
    ) -> crate::output::disassociate_phone_numbers_from_voice_connector_group_output::Builder {
        crate::output::disassociate_phone_numbers_from_voice_connector_group_output::Builder::default()
    }
}

/// See [`DisassociatePhoneNumbersFromVoiceConnectorGroupOutput`](crate::output::DisassociatePhoneNumbersFromVoiceConnectorGroupOutput).
pub mod disassociate_phone_numbers_from_voice_connector_group_output {

    /// A builder for [`DisassociatePhoneNumbersFromVoiceConnectorGroupOutput`](crate::output::DisassociatePhoneNumbersFromVoiceConnectorGroupOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) phone_number_errors:
            std::option::Option<std::vec::Vec<crate::model::PhoneNumberError>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `phone_number_errors`.
        ///
        /// To override the contents of this collection use [`set_phone_number_errors`](Self::set_phone_number_errors).
        ///
        pub fn phone_number_errors(mut self, input: crate::model::PhoneNumberError) -> Self {
            let mut v = self.phone_number_errors.unwrap_or_default();
            v.push(input);
            self.phone_number_errors = Some(v);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_phone_number_errors(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PhoneNumberError>>,
        ) -> Self {
            self.phone_number_errors = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisassociatePhoneNumbersFromVoiceConnectorGroupOutput`](crate::output::DisassociatePhoneNumbersFromVoiceConnectorGroupOutput).
        pub fn build(self) -> crate::output::DisassociatePhoneNumbersFromVoiceConnectorGroupOutput {
            crate::output::DisassociatePhoneNumbersFromVoiceConnectorGroupOutput {
                phone_number_errors: self.phone_number_errors,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociatePhoneNumbersFromVoiceConnectorOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub phone_number_errors: std::option::Option<std::vec::Vec<crate::model::PhoneNumberError>>,
    _request_id: Option<String>,
}
impl DisassociatePhoneNumbersFromVoiceConnectorOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn phone_number_errors(&self) -> std::option::Option<&[crate::model::PhoneNumberError]> {
        self.phone_number_errors.as_deref()
    }
}
impl aws_http::request_id::RequestId for DisassociatePhoneNumbersFromVoiceConnectorOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DisassociatePhoneNumbersFromVoiceConnectorOutput {
    /// Creates a new builder-style object to manufacture [`DisassociatePhoneNumbersFromVoiceConnectorOutput`](crate::output::DisassociatePhoneNumbersFromVoiceConnectorOutput).
    pub fn builder(
    ) -> crate::output::disassociate_phone_numbers_from_voice_connector_output::Builder {
        crate::output::disassociate_phone_numbers_from_voice_connector_output::Builder::default()
    }
}

/// See [`DisassociatePhoneNumbersFromVoiceConnectorOutput`](crate::output::DisassociatePhoneNumbersFromVoiceConnectorOutput).
pub mod disassociate_phone_numbers_from_voice_connector_output {

    /// A builder for [`DisassociatePhoneNumbersFromVoiceConnectorOutput`](crate::output::DisassociatePhoneNumbersFromVoiceConnectorOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) phone_number_errors:
            std::option::Option<std::vec::Vec<crate::model::PhoneNumberError>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `phone_number_errors`.
        ///
        /// To override the contents of this collection use [`set_phone_number_errors`](Self::set_phone_number_errors).
        ///
        pub fn phone_number_errors(mut self, input: crate::model::PhoneNumberError) -> Self {
            let mut v = self.phone_number_errors.unwrap_or_default();
            v.push(input);
            self.phone_number_errors = Some(v);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_phone_number_errors(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PhoneNumberError>>,
        ) -> Self {
            self.phone_number_errors = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisassociatePhoneNumbersFromVoiceConnectorOutput`](crate::output::DisassociatePhoneNumbersFromVoiceConnectorOutput).
        pub fn build(self) -> crate::output::DisassociatePhoneNumbersFromVoiceConnectorOutput {
            crate::output::DisassociatePhoneNumbersFromVoiceConnectorOutput {
                phone_number_errors: self.phone_number_errors,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteVoiceConnectorTerminationCredentialsOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteVoiceConnectorTerminationCredentialsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteVoiceConnectorTerminationCredentialsOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVoiceConnectorTerminationCredentialsOutput`](crate::output::DeleteVoiceConnectorTerminationCredentialsOutput).
    pub fn builder() -> crate::output::delete_voice_connector_termination_credentials_output::Builder
    {
        crate::output::delete_voice_connector_termination_credentials_output::Builder::default()
    }
}

/// See [`DeleteVoiceConnectorTerminationCredentialsOutput`](crate::output::DeleteVoiceConnectorTerminationCredentialsOutput).
pub mod delete_voice_connector_termination_credentials_output {

    /// A builder for [`DeleteVoiceConnectorTerminationCredentialsOutput`](crate::output::DeleteVoiceConnectorTerminationCredentialsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteVoiceConnectorTerminationCredentialsOutput`](crate::output::DeleteVoiceConnectorTerminationCredentialsOutput).
        pub fn build(self) -> crate::output::DeleteVoiceConnectorTerminationCredentialsOutput {
            crate::output::DeleteVoiceConnectorTerminationCredentialsOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteVoiceConnectorTerminationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteVoiceConnectorTerminationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteVoiceConnectorTerminationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVoiceConnectorTerminationOutput`](crate::output::DeleteVoiceConnectorTerminationOutput).
    pub fn builder() -> crate::output::delete_voice_connector_termination_output::Builder {
        crate::output::delete_voice_connector_termination_output::Builder::default()
    }
}

/// See [`DeleteVoiceConnectorTerminationOutput`](crate::output::DeleteVoiceConnectorTerminationOutput).
pub mod delete_voice_connector_termination_output {

    /// A builder for [`DeleteVoiceConnectorTerminationOutput`](crate::output::DeleteVoiceConnectorTerminationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteVoiceConnectorTerminationOutput`](crate::output::DeleteVoiceConnectorTerminationOutput).
        pub fn build(self) -> crate::output::DeleteVoiceConnectorTerminationOutput {
            crate::output::DeleteVoiceConnectorTerminationOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteVoiceConnectorStreamingConfigurationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteVoiceConnectorStreamingConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteVoiceConnectorStreamingConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVoiceConnectorStreamingConfigurationOutput`](crate::output::DeleteVoiceConnectorStreamingConfigurationOutput).
    pub fn builder() -> crate::output::delete_voice_connector_streaming_configuration_output::Builder
    {
        crate::output::delete_voice_connector_streaming_configuration_output::Builder::default()
    }
}

/// See [`DeleteVoiceConnectorStreamingConfigurationOutput`](crate::output::DeleteVoiceConnectorStreamingConfigurationOutput).
pub mod delete_voice_connector_streaming_configuration_output {

    /// A builder for [`DeleteVoiceConnectorStreamingConfigurationOutput`](crate::output::DeleteVoiceConnectorStreamingConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteVoiceConnectorStreamingConfigurationOutput`](crate::output::DeleteVoiceConnectorStreamingConfigurationOutput).
        pub fn build(self) -> crate::output::DeleteVoiceConnectorStreamingConfigurationOutput {
            crate::output::DeleteVoiceConnectorStreamingConfigurationOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteVoiceConnectorProxyOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteVoiceConnectorProxyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteVoiceConnectorProxyOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVoiceConnectorProxyOutput`](crate::output::DeleteVoiceConnectorProxyOutput).
    pub fn builder() -> crate::output::delete_voice_connector_proxy_output::Builder {
        crate::output::delete_voice_connector_proxy_output::Builder::default()
    }
}

/// See [`DeleteVoiceConnectorProxyOutput`](crate::output::DeleteVoiceConnectorProxyOutput).
pub mod delete_voice_connector_proxy_output {

    /// A builder for [`DeleteVoiceConnectorProxyOutput`](crate::output::DeleteVoiceConnectorProxyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteVoiceConnectorProxyOutput`](crate::output::DeleteVoiceConnectorProxyOutput).
        pub fn build(self) -> crate::output::DeleteVoiceConnectorProxyOutput {
            crate::output::DeleteVoiceConnectorProxyOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteVoiceConnectorOriginationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteVoiceConnectorOriginationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteVoiceConnectorOriginationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVoiceConnectorOriginationOutput`](crate::output::DeleteVoiceConnectorOriginationOutput).
    pub fn builder() -> crate::output::delete_voice_connector_origination_output::Builder {
        crate::output::delete_voice_connector_origination_output::Builder::default()
    }
}

/// See [`DeleteVoiceConnectorOriginationOutput`](crate::output::DeleteVoiceConnectorOriginationOutput).
pub mod delete_voice_connector_origination_output {

    /// A builder for [`DeleteVoiceConnectorOriginationOutput`](crate::output::DeleteVoiceConnectorOriginationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteVoiceConnectorOriginationOutput`](crate::output::DeleteVoiceConnectorOriginationOutput).
        pub fn build(self) -> crate::output::DeleteVoiceConnectorOriginationOutput {
            crate::output::DeleteVoiceConnectorOriginationOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteVoiceConnectorGroupOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteVoiceConnectorGroupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteVoiceConnectorGroupOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVoiceConnectorGroupOutput`](crate::output::DeleteVoiceConnectorGroupOutput).
    pub fn builder() -> crate::output::delete_voice_connector_group_output::Builder {
        crate::output::delete_voice_connector_group_output::Builder::default()
    }
}

/// See [`DeleteVoiceConnectorGroupOutput`](crate::output::DeleteVoiceConnectorGroupOutput).
pub mod delete_voice_connector_group_output {

    /// A builder for [`DeleteVoiceConnectorGroupOutput`](crate::output::DeleteVoiceConnectorGroupOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteVoiceConnectorGroupOutput`](crate::output::DeleteVoiceConnectorGroupOutput).
        pub fn build(self) -> crate::output::DeleteVoiceConnectorGroupOutput {
            crate::output::DeleteVoiceConnectorGroupOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteVoiceConnectorEmergencyCallingConfigurationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteVoiceConnectorEmergencyCallingConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteVoiceConnectorEmergencyCallingConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVoiceConnectorEmergencyCallingConfigurationOutput`](crate::output::DeleteVoiceConnectorEmergencyCallingConfigurationOutput).
    pub fn builder(
    ) -> crate::output::delete_voice_connector_emergency_calling_configuration_output::Builder {
        crate::output::delete_voice_connector_emergency_calling_configuration_output::Builder::default()
    }
}

/// See [`DeleteVoiceConnectorEmergencyCallingConfigurationOutput`](crate::output::DeleteVoiceConnectorEmergencyCallingConfigurationOutput).
pub mod delete_voice_connector_emergency_calling_configuration_output {

    /// A builder for [`DeleteVoiceConnectorEmergencyCallingConfigurationOutput`](crate::output::DeleteVoiceConnectorEmergencyCallingConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteVoiceConnectorEmergencyCallingConfigurationOutput`](crate::output::DeleteVoiceConnectorEmergencyCallingConfigurationOutput).
        pub fn build(
            self,
        ) -> crate::output::DeleteVoiceConnectorEmergencyCallingConfigurationOutput {
            crate::output::DeleteVoiceConnectorEmergencyCallingConfigurationOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteVoiceConnectorOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteVoiceConnectorOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteVoiceConnectorOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVoiceConnectorOutput`](crate::output::DeleteVoiceConnectorOutput).
    pub fn builder() -> crate::output::delete_voice_connector_output::Builder {
        crate::output::delete_voice_connector_output::Builder::default()
    }
}

/// See [`DeleteVoiceConnectorOutput`](crate::output::DeleteVoiceConnectorOutput).
pub mod delete_voice_connector_output {

    /// A builder for [`DeleteVoiceConnectorOutput`](crate::output::DeleteVoiceConnectorOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteVoiceConnectorOutput`](crate::output::DeleteVoiceConnectorOutput).
        pub fn build(self) -> crate::output::DeleteVoiceConnectorOutput {
            crate::output::DeleteVoiceConnectorOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteSipRuleOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteSipRuleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteSipRuleOutput {
    /// Creates a new builder-style object to manufacture [`DeleteSipRuleOutput`](crate::output::DeleteSipRuleOutput).
    pub fn builder() -> crate::output::delete_sip_rule_output::Builder {
        crate::output::delete_sip_rule_output::Builder::default()
    }
}

/// See [`DeleteSipRuleOutput`](crate::output::DeleteSipRuleOutput).
pub mod delete_sip_rule_output {

    /// A builder for [`DeleteSipRuleOutput`](crate::output::DeleteSipRuleOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteSipRuleOutput`](crate::output::DeleteSipRuleOutput).
        pub fn build(self) -> crate::output::DeleteSipRuleOutput {
            crate::output::DeleteSipRuleOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteSipMediaApplicationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteSipMediaApplicationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteSipMediaApplicationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteSipMediaApplicationOutput`](crate::output::DeleteSipMediaApplicationOutput).
    pub fn builder() -> crate::output::delete_sip_media_application_output::Builder {
        crate::output::delete_sip_media_application_output::Builder::default()
    }
}

/// See [`DeleteSipMediaApplicationOutput`](crate::output::DeleteSipMediaApplicationOutput).
pub mod delete_sip_media_application_output {

    /// A builder for [`DeleteSipMediaApplicationOutput`](crate::output::DeleteSipMediaApplicationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteSipMediaApplicationOutput`](crate::output::DeleteSipMediaApplicationOutput).
        pub fn build(self) -> crate::output::DeleteSipMediaApplicationOutput {
            crate::output::DeleteSipMediaApplicationOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteProxySessionOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteProxySessionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteProxySessionOutput {
    /// Creates a new builder-style object to manufacture [`DeleteProxySessionOutput`](crate::output::DeleteProxySessionOutput).
    pub fn builder() -> crate::output::delete_proxy_session_output::Builder {
        crate::output::delete_proxy_session_output::Builder::default()
    }
}

/// See [`DeleteProxySessionOutput`](crate::output::DeleteProxySessionOutput).
pub mod delete_proxy_session_output {

    /// A builder for [`DeleteProxySessionOutput`](crate::output::DeleteProxySessionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteProxySessionOutput`](crate::output::DeleteProxySessionOutput).
        pub fn build(self) -> crate::output::DeleteProxySessionOutput {
            crate::output::DeleteProxySessionOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeletePhoneNumberOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeletePhoneNumberOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeletePhoneNumberOutput {
    /// Creates a new builder-style object to manufacture [`DeletePhoneNumberOutput`](crate::output::DeletePhoneNumberOutput).
    pub fn builder() -> crate::output::delete_phone_number_output::Builder {
        crate::output::delete_phone_number_output::Builder::default()
    }
}

/// See [`DeletePhoneNumberOutput`](crate::output::DeletePhoneNumberOutput).
pub mod delete_phone_number_output {

    /// A builder for [`DeletePhoneNumberOutput`](crate::output::DeletePhoneNumberOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeletePhoneNumberOutput`](crate::output::DeletePhoneNumberOutput).
        pub fn build(self) -> crate::output::DeletePhoneNumberOutput {
            crate::output::DeletePhoneNumberOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateVoiceConnectorGroupOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub voice_connector_group: std::option::Option<crate::model::VoiceConnectorGroup>,
    _request_id: Option<String>,
}
impl CreateVoiceConnectorGroupOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_group(&self) -> std::option::Option<&crate::model::VoiceConnectorGroup> {
        self.voice_connector_group.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateVoiceConnectorGroupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateVoiceConnectorGroupOutput {
    /// Creates a new builder-style object to manufacture [`CreateVoiceConnectorGroupOutput`](crate::output::CreateVoiceConnectorGroupOutput).
    pub fn builder() -> crate::output::create_voice_connector_group_output::Builder {
        crate::output::create_voice_connector_group_output::Builder::default()
    }
}

/// See [`CreateVoiceConnectorGroupOutput`](crate::output::CreateVoiceConnectorGroupOutput).
pub mod create_voice_connector_group_output {

    /// A builder for [`CreateVoiceConnectorGroupOutput`](crate::output::CreateVoiceConnectorGroupOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) voice_connector_group: std::option::Option<crate::model::VoiceConnectorGroup>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn voice_connector_group(mut self, input: crate::model::VoiceConnectorGroup) -> Self {
            self.voice_connector_group = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_voice_connector_group(
            mut self,
            input: std::option::Option<crate::model::VoiceConnectorGroup>,
        ) -> Self {
            self.voice_connector_group = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateVoiceConnectorGroupOutput`](crate::output::CreateVoiceConnectorGroupOutput).
        pub fn build(self) -> crate::output::CreateVoiceConnectorGroupOutput {
            crate::output::CreateVoiceConnectorGroupOutput {
                voice_connector_group: self.voice_connector_group,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateVoiceConnectorOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub voice_connector: std::option::Option<crate::model::VoiceConnector>,
    _request_id: Option<String>,
}
impl CreateVoiceConnectorOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector(&self) -> std::option::Option<&crate::model::VoiceConnector> {
        self.voice_connector.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateVoiceConnectorOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateVoiceConnectorOutput {
    /// Creates a new builder-style object to manufacture [`CreateVoiceConnectorOutput`](crate::output::CreateVoiceConnectorOutput).
    pub fn builder() -> crate::output::create_voice_connector_output::Builder {
        crate::output::create_voice_connector_output::Builder::default()
    }
}

/// See [`CreateVoiceConnectorOutput`](crate::output::CreateVoiceConnectorOutput).
pub mod create_voice_connector_output {

    /// A builder for [`CreateVoiceConnectorOutput`](crate::output::CreateVoiceConnectorOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) voice_connector: std::option::Option<crate::model::VoiceConnector>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn voice_connector(mut self, input: crate::model::VoiceConnector) -> Self {
            self.voice_connector = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_voice_connector(
            mut self,
            input: std::option::Option<crate::model::VoiceConnector>,
        ) -> Self {
            self.voice_connector = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateVoiceConnectorOutput`](crate::output::CreateVoiceConnectorOutput).
        pub fn build(self) -> crate::output::CreateVoiceConnectorOutput {
            crate::output::CreateVoiceConnectorOutput {
                voice_connector: self.voice_connector,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateSipRuleOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub sip_rule: std::option::Option<crate::model::SipRule>,
    _request_id: Option<String>,
}
impl CreateSipRuleOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn sip_rule(&self) -> std::option::Option<&crate::model::SipRule> {
        self.sip_rule.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateSipRuleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateSipRuleOutput {
    /// Creates a new builder-style object to manufacture [`CreateSipRuleOutput`](crate::output::CreateSipRuleOutput).
    pub fn builder() -> crate::output::create_sip_rule_output::Builder {
        crate::output::create_sip_rule_output::Builder::default()
    }
}

/// See [`CreateSipRuleOutput`](crate::output::CreateSipRuleOutput).
pub mod create_sip_rule_output {

    /// A builder for [`CreateSipRuleOutput`](crate::output::CreateSipRuleOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) sip_rule: std::option::Option<crate::model::SipRule>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn sip_rule(mut self, input: crate::model::SipRule) -> Self {
            self.sip_rule = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_sip_rule(mut self, input: std::option::Option<crate::model::SipRule>) -> Self {
            self.sip_rule = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateSipRuleOutput`](crate::output::CreateSipRuleOutput).
        pub fn build(self) -> crate::output::CreateSipRuleOutput {
            crate::output::CreateSipRuleOutput {
                sip_rule: self.sip_rule,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateSipMediaApplicationCallOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub sip_media_application_call: std::option::Option<crate::model::SipMediaApplicationCall>,
    _request_id: Option<String>,
}
impl CreateSipMediaApplicationCallOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn sip_media_application_call(
        &self,
    ) -> std::option::Option<&crate::model::SipMediaApplicationCall> {
        self.sip_media_application_call.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateSipMediaApplicationCallOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateSipMediaApplicationCallOutput {
    /// Creates a new builder-style object to manufacture [`CreateSipMediaApplicationCallOutput`](crate::output::CreateSipMediaApplicationCallOutput).
    pub fn builder() -> crate::output::create_sip_media_application_call_output::Builder {
        crate::output::create_sip_media_application_call_output::Builder::default()
    }
}

/// See [`CreateSipMediaApplicationCallOutput`](crate::output::CreateSipMediaApplicationCallOutput).
pub mod create_sip_media_application_call_output {

    /// A builder for [`CreateSipMediaApplicationCallOutput`](crate::output::CreateSipMediaApplicationCallOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) sip_media_application_call:
            std::option::Option<crate::model::SipMediaApplicationCall>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn sip_media_application_call(
            mut self,
            input: crate::model::SipMediaApplicationCall,
        ) -> Self {
            self.sip_media_application_call = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_sip_media_application_call(
            mut self,
            input: std::option::Option<crate::model::SipMediaApplicationCall>,
        ) -> Self {
            self.sip_media_application_call = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateSipMediaApplicationCallOutput`](crate::output::CreateSipMediaApplicationCallOutput).
        pub fn build(self) -> crate::output::CreateSipMediaApplicationCallOutput {
            crate::output::CreateSipMediaApplicationCallOutput {
                sip_media_application_call: self.sip_media_application_call,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateSipMediaApplicationOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub sip_media_application: std::option::Option<crate::model::SipMediaApplication>,
    _request_id: Option<String>,
}
impl CreateSipMediaApplicationOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn sip_media_application(&self) -> std::option::Option<&crate::model::SipMediaApplication> {
        self.sip_media_application.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateSipMediaApplicationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateSipMediaApplicationOutput {
    /// Creates a new builder-style object to manufacture [`CreateSipMediaApplicationOutput`](crate::output::CreateSipMediaApplicationOutput).
    pub fn builder() -> crate::output::create_sip_media_application_output::Builder {
        crate::output::create_sip_media_application_output::Builder::default()
    }
}

/// See [`CreateSipMediaApplicationOutput`](crate::output::CreateSipMediaApplicationOutput).
pub mod create_sip_media_application_output {

    /// A builder for [`CreateSipMediaApplicationOutput`](crate::output::CreateSipMediaApplicationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) sip_media_application: std::option::Option<crate::model::SipMediaApplication>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn sip_media_application(mut self, input: crate::model::SipMediaApplication) -> Self {
            self.sip_media_application = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_sip_media_application(
            mut self,
            input: std::option::Option<crate::model::SipMediaApplication>,
        ) -> Self {
            self.sip_media_application = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateSipMediaApplicationOutput`](crate::output::CreateSipMediaApplicationOutput).
        pub fn build(self) -> crate::output::CreateSipMediaApplicationOutput {
            crate::output::CreateSipMediaApplicationOutput {
                sip_media_application: self.sip_media_application,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateProxySessionOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub proxy_session: std::option::Option<crate::model::ProxySession>,
    _request_id: Option<String>,
}
impl CreateProxySessionOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn proxy_session(&self) -> std::option::Option<&crate::model::ProxySession> {
        self.proxy_session.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateProxySessionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateProxySessionOutput {
    /// Creates a new builder-style object to manufacture [`CreateProxySessionOutput`](crate::output::CreateProxySessionOutput).
    pub fn builder() -> crate::output::create_proxy_session_output::Builder {
        crate::output::create_proxy_session_output::Builder::default()
    }
}

/// See [`CreateProxySessionOutput`](crate::output::CreateProxySessionOutput).
pub mod create_proxy_session_output {

    /// A builder for [`CreateProxySessionOutput`](crate::output::CreateProxySessionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) proxy_session: std::option::Option<crate::model::ProxySession>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn proxy_session(mut self, input: crate::model::ProxySession) -> Self {
            self.proxy_session = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_proxy_session(
            mut self,
            input: std::option::Option<crate::model::ProxySession>,
        ) -> Self {
            self.proxy_session = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateProxySessionOutput`](crate::output::CreateProxySessionOutput).
        pub fn build(self) -> crate::output::CreateProxySessionOutput {
            crate::output::CreateProxySessionOutput {
                proxy_session: self.proxy_session,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreatePhoneNumberOrderOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub phone_number_order: std::option::Option<crate::model::PhoneNumberOrder>,
    _request_id: Option<String>,
}
impl CreatePhoneNumberOrderOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn phone_number_order(&self) -> std::option::Option<&crate::model::PhoneNumberOrder> {
        self.phone_number_order.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreatePhoneNumberOrderOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreatePhoneNumberOrderOutput {
    /// Creates a new builder-style object to manufacture [`CreatePhoneNumberOrderOutput`](crate::output::CreatePhoneNumberOrderOutput).
    pub fn builder() -> crate::output::create_phone_number_order_output::Builder {
        crate::output::create_phone_number_order_output::Builder::default()
    }
}

/// See [`CreatePhoneNumberOrderOutput`](crate::output::CreatePhoneNumberOrderOutput).
pub mod create_phone_number_order_output {

    /// A builder for [`CreatePhoneNumberOrderOutput`](crate::output::CreatePhoneNumberOrderOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) phone_number_order: std::option::Option<crate::model::PhoneNumberOrder>,
        _request_id: Option<String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn phone_number_order(mut self, input: crate::model::PhoneNumberOrder) -> Self {
            self.phone_number_order = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_phone_number_order(
            mut self,
            input: std::option::Option<crate::model::PhoneNumberOrder>,
        ) -> Self {
            self.phone_number_order = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreatePhoneNumberOrderOutput`](crate::output::CreatePhoneNumberOrderOutput).
        pub fn build(self) -> crate::output::CreatePhoneNumberOrderOutput {
            crate::output::CreatePhoneNumberOrderOutput {
                phone_number_order: self.phone_number_order,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchUpdatePhoneNumberOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub phone_number_errors: std::option::Option<std::vec::Vec<crate::model::PhoneNumberError>>,
    _request_id: Option<String>,
}
impl BatchUpdatePhoneNumberOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn phone_number_errors(&self) -> std::option::Option<&[crate::model::PhoneNumberError]> {
        self.phone_number_errors.as_deref()
    }
}
impl aws_http::request_id::RequestId for BatchUpdatePhoneNumberOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchUpdatePhoneNumberOutput {
    /// Creates a new builder-style object to manufacture [`BatchUpdatePhoneNumberOutput`](crate::output::BatchUpdatePhoneNumberOutput).
    pub fn builder() -> crate::output::batch_update_phone_number_output::Builder {
        crate::output::batch_update_phone_number_output::Builder::default()
    }
}

/// See [`BatchUpdatePhoneNumberOutput`](crate::output::BatchUpdatePhoneNumberOutput).
pub mod batch_update_phone_number_output {

    /// A builder for [`BatchUpdatePhoneNumberOutput`](crate::output::BatchUpdatePhoneNumberOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) phone_number_errors:
            std::option::Option<std::vec::Vec<crate::model::PhoneNumberError>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `phone_number_errors`.
        ///
        /// To override the contents of this collection use [`set_phone_number_errors`](Self::set_phone_number_errors).
        ///
        pub fn phone_number_errors(mut self, input: crate::model::PhoneNumberError) -> Self {
            let mut v = self.phone_number_errors.unwrap_or_default();
            v.push(input);
            self.phone_number_errors = Some(v);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_phone_number_errors(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PhoneNumberError>>,
        ) -> Self {
            self.phone_number_errors = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`BatchUpdatePhoneNumberOutput`](crate::output::BatchUpdatePhoneNumberOutput).
        pub fn build(self) -> crate::output::BatchUpdatePhoneNumberOutput {
            crate::output::BatchUpdatePhoneNumberOutput {
                phone_number_errors: self.phone_number_errors,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchDeletePhoneNumberOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub phone_number_errors: std::option::Option<std::vec::Vec<crate::model::PhoneNumberError>>,
    _request_id: Option<String>,
}
impl BatchDeletePhoneNumberOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn phone_number_errors(&self) -> std::option::Option<&[crate::model::PhoneNumberError]> {
        self.phone_number_errors.as_deref()
    }
}
impl aws_http::request_id::RequestId for BatchDeletePhoneNumberOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchDeletePhoneNumberOutput {
    /// Creates a new builder-style object to manufacture [`BatchDeletePhoneNumberOutput`](crate::output::BatchDeletePhoneNumberOutput).
    pub fn builder() -> crate::output::batch_delete_phone_number_output::Builder {
        crate::output::batch_delete_phone_number_output::Builder::default()
    }
}

/// See [`BatchDeletePhoneNumberOutput`](crate::output::BatchDeletePhoneNumberOutput).
pub mod batch_delete_phone_number_output {

    /// A builder for [`BatchDeletePhoneNumberOutput`](crate::output::BatchDeletePhoneNumberOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) phone_number_errors:
            std::option::Option<std::vec::Vec<crate::model::PhoneNumberError>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `phone_number_errors`.
        ///
        /// To override the contents of this collection use [`set_phone_number_errors`](Self::set_phone_number_errors).
        ///
        pub fn phone_number_errors(mut self, input: crate::model::PhoneNumberError) -> Self {
            let mut v = self.phone_number_errors.unwrap_or_default();
            v.push(input);
            self.phone_number_errors = Some(v);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_phone_number_errors(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PhoneNumberError>>,
        ) -> Self {
            self.phone_number_errors = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`BatchDeletePhoneNumberOutput`](crate::output::BatchDeletePhoneNumberOutput).
        pub fn build(self) -> crate::output::BatchDeletePhoneNumberOutput {
            crate::output::BatchDeletePhoneNumberOutput {
                phone_number_errors: self.phone_number_errors,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociatePhoneNumbersWithVoiceConnectorGroupOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub phone_number_errors: std::option::Option<std::vec::Vec<crate::model::PhoneNumberError>>,
    _request_id: Option<String>,
}
impl AssociatePhoneNumbersWithVoiceConnectorGroupOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn phone_number_errors(&self) -> std::option::Option<&[crate::model::PhoneNumberError]> {
        self.phone_number_errors.as_deref()
    }
}
impl aws_http::request_id::RequestId for AssociatePhoneNumbersWithVoiceConnectorGroupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl AssociatePhoneNumbersWithVoiceConnectorGroupOutput {
    /// Creates a new builder-style object to manufacture [`AssociatePhoneNumbersWithVoiceConnectorGroupOutput`](crate::output::AssociatePhoneNumbersWithVoiceConnectorGroupOutput).
    pub fn builder(
    ) -> crate::output::associate_phone_numbers_with_voice_connector_group_output::Builder {
        crate::output::associate_phone_numbers_with_voice_connector_group_output::Builder::default()
    }
}

/// See [`AssociatePhoneNumbersWithVoiceConnectorGroupOutput`](crate::output::AssociatePhoneNumbersWithVoiceConnectorGroupOutput).
pub mod associate_phone_numbers_with_voice_connector_group_output {

    /// A builder for [`AssociatePhoneNumbersWithVoiceConnectorGroupOutput`](crate::output::AssociatePhoneNumbersWithVoiceConnectorGroupOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) phone_number_errors:
            std::option::Option<std::vec::Vec<crate::model::PhoneNumberError>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `phone_number_errors`.
        ///
        /// To override the contents of this collection use [`set_phone_number_errors`](Self::set_phone_number_errors).
        ///
        pub fn phone_number_errors(mut self, input: crate::model::PhoneNumberError) -> Self {
            let mut v = self.phone_number_errors.unwrap_or_default();
            v.push(input);
            self.phone_number_errors = Some(v);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_phone_number_errors(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PhoneNumberError>>,
        ) -> Self {
            self.phone_number_errors = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AssociatePhoneNumbersWithVoiceConnectorGroupOutput`](crate::output::AssociatePhoneNumbersWithVoiceConnectorGroupOutput).
        pub fn build(self) -> crate::output::AssociatePhoneNumbersWithVoiceConnectorGroupOutput {
            crate::output::AssociatePhoneNumbersWithVoiceConnectorGroupOutput {
                phone_number_errors: self.phone_number_errors,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociatePhoneNumbersWithVoiceConnectorOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub phone_number_errors: std::option::Option<std::vec::Vec<crate::model::PhoneNumberError>>,
    _request_id: Option<String>,
}
impl AssociatePhoneNumbersWithVoiceConnectorOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn phone_number_errors(&self) -> std::option::Option<&[crate::model::PhoneNumberError]> {
        self.phone_number_errors.as_deref()
    }
}
impl aws_http::request_id::RequestId for AssociatePhoneNumbersWithVoiceConnectorOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl AssociatePhoneNumbersWithVoiceConnectorOutput {
    /// Creates a new builder-style object to manufacture [`AssociatePhoneNumbersWithVoiceConnectorOutput`](crate::output::AssociatePhoneNumbersWithVoiceConnectorOutput).
    pub fn builder() -> crate::output::associate_phone_numbers_with_voice_connector_output::Builder
    {
        crate::output::associate_phone_numbers_with_voice_connector_output::Builder::default()
    }
}

/// See [`AssociatePhoneNumbersWithVoiceConnectorOutput`](crate::output::AssociatePhoneNumbersWithVoiceConnectorOutput).
pub mod associate_phone_numbers_with_voice_connector_output {

    /// A builder for [`AssociatePhoneNumbersWithVoiceConnectorOutput`](crate::output::AssociatePhoneNumbersWithVoiceConnectorOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) phone_number_errors:
            std::option::Option<std::vec::Vec<crate::model::PhoneNumberError>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `phone_number_errors`.
        ///
        /// To override the contents of this collection use [`set_phone_number_errors`](Self::set_phone_number_errors).
        ///
        pub fn phone_number_errors(mut self, input: crate::model::PhoneNumberError) -> Self {
            let mut v = self.phone_number_errors.unwrap_or_default();
            v.push(input);
            self.phone_number_errors = Some(v);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_phone_number_errors(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PhoneNumberError>>,
        ) -> Self {
            self.phone_number_errors = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AssociatePhoneNumbersWithVoiceConnectorOutput`](crate::output::AssociatePhoneNumbersWithVoiceConnectorOutput).
        pub fn build(self) -> crate::output::AssociatePhoneNumbersWithVoiceConnectorOutput {
            crate::output::AssociatePhoneNumbersWithVoiceConnectorOutput {
                phone_number_errors: self.phone_number_errors,
                _request_id: self._request_id,
            }
        }
    }
}
