// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `AssociatePhoneNumbersWithVoiceConnector`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`associate_phone_numbers_with_voice_connector`](crate::client::Client::associate_phone_numbers_with_voice_connector).
///
/// See [`crate::client::fluent_builders::AssociatePhoneNumbersWithVoiceConnector`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct AssociatePhoneNumbersWithVoiceConnector {
    _private: (),
}
impl AssociatePhoneNumbersWithVoiceConnector {
    /// Creates a new builder-style object to manufacture [`AssociatePhoneNumbersWithVoiceConnectorInput`](crate::input::AssociatePhoneNumbersWithVoiceConnectorInput).
    pub fn builder() -> crate::input::associate_phone_numbers_with_voice_connector_input::Builder {
        crate::input::associate_phone_numbers_with_voice_connector_input::Builder::default()
    }
    /// Creates a new `AssociatePhoneNumbersWithVoiceConnector` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for AssociatePhoneNumbersWithVoiceConnector {
    type Output = std::result::Result<
        crate::output::AssociatePhoneNumbersWithVoiceConnectorOutput,
        crate::error::AssociatePhoneNumbersWithVoiceConnectorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_phone_numbers_with_voice_connector_error(
                response,
            )
        } else {
            crate::operation_deser::parse_associate_phone_numbers_with_voice_connector_response(
                response,
            )
        }
    }
}

/// Operation shape for `AssociatePhoneNumbersWithVoiceConnectorGroup`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`associate_phone_numbers_with_voice_connector_group`](crate::client::Client::associate_phone_numbers_with_voice_connector_group).
///
/// See [`crate::client::fluent_builders::AssociatePhoneNumbersWithVoiceConnectorGroup`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct AssociatePhoneNumbersWithVoiceConnectorGroup {
    _private: (),
}
impl AssociatePhoneNumbersWithVoiceConnectorGroup {
    /// Creates a new builder-style object to manufacture [`AssociatePhoneNumbersWithVoiceConnectorGroupInput`](crate::input::AssociatePhoneNumbersWithVoiceConnectorGroupInput).
    pub fn builder(
    ) -> crate::input::associate_phone_numbers_with_voice_connector_group_input::Builder {
        crate::input::associate_phone_numbers_with_voice_connector_group_input::Builder::default()
    }
    /// Creates a new `AssociatePhoneNumbersWithVoiceConnectorGroup` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse
    for AssociatePhoneNumbersWithVoiceConnectorGroup
{
    type Output = std::result::Result<
        crate::output::AssociatePhoneNumbersWithVoiceConnectorGroupOutput,
        crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_phone_numbers_with_voice_connector_group_error(
                response,
            )
        } else {
            crate::operation_deser::parse_associate_phone_numbers_with_voice_connector_group_response(response)
        }
    }
}

/// Operation shape for `BatchDeletePhoneNumber`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`batch_delete_phone_number`](crate::client::Client::batch_delete_phone_number).
///
/// See [`crate::client::fluent_builders::BatchDeletePhoneNumber`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct BatchDeletePhoneNumber {
    _private: (),
}
impl BatchDeletePhoneNumber {
    /// Creates a new builder-style object to manufacture [`BatchDeletePhoneNumberInput`](crate::input::BatchDeletePhoneNumberInput).
    pub fn builder() -> crate::input::batch_delete_phone_number_input::Builder {
        crate::input::batch_delete_phone_number_input::Builder::default()
    }
    /// Creates a new `BatchDeletePhoneNumber` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for BatchDeletePhoneNumber {
    type Output = std::result::Result<
        crate::output::BatchDeletePhoneNumberOutput,
        crate::error::BatchDeletePhoneNumberError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_batch_delete_phone_number_error(response)
        } else {
            crate::operation_deser::parse_batch_delete_phone_number_response(response)
        }
    }
}

/// Operation shape for `BatchUpdatePhoneNumber`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`batch_update_phone_number`](crate::client::Client::batch_update_phone_number).
///
/// See [`crate::client::fluent_builders::BatchUpdatePhoneNumber`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct BatchUpdatePhoneNumber {
    _private: (),
}
impl BatchUpdatePhoneNumber {
    /// Creates a new builder-style object to manufacture [`BatchUpdatePhoneNumberInput`](crate::input::BatchUpdatePhoneNumberInput).
    pub fn builder() -> crate::input::batch_update_phone_number_input::Builder {
        crate::input::batch_update_phone_number_input::Builder::default()
    }
    /// Creates a new `BatchUpdatePhoneNumber` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for BatchUpdatePhoneNumber {
    type Output = std::result::Result<
        crate::output::BatchUpdatePhoneNumberOutput,
        crate::error::BatchUpdatePhoneNumberError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_batch_update_phone_number_error(response)
        } else {
            crate::operation_deser::parse_batch_update_phone_number_response(response)
        }
    }
}

/// Operation shape for `CreatePhoneNumberOrder`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_phone_number_order`](crate::client::Client::create_phone_number_order).
///
/// See [`crate::client::fluent_builders::CreatePhoneNumberOrder`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreatePhoneNumberOrder {
    _private: (),
}
impl CreatePhoneNumberOrder {
    /// Creates a new builder-style object to manufacture [`CreatePhoneNumberOrderInput`](crate::input::CreatePhoneNumberOrderInput).
    pub fn builder() -> crate::input::create_phone_number_order_input::Builder {
        crate::input::create_phone_number_order_input::Builder::default()
    }
    /// Creates a new `CreatePhoneNumberOrder` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreatePhoneNumberOrder {
    type Output = std::result::Result<
        crate::output::CreatePhoneNumberOrderOutput,
        crate::error::CreatePhoneNumberOrderError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_phone_number_order_error(response)
        } else {
            crate::operation_deser::parse_create_phone_number_order_response(response)
        }
    }
}

/// Operation shape for `CreateProxySession`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_proxy_session`](crate::client::Client::create_proxy_session).
///
/// See [`crate::client::fluent_builders::CreateProxySession`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateProxySession {
    _private: (),
}
impl CreateProxySession {
    /// Creates a new builder-style object to manufacture [`CreateProxySessionInput`](crate::input::CreateProxySessionInput).
    pub fn builder() -> crate::input::create_proxy_session_input::Builder {
        crate::input::create_proxy_session_input::Builder::default()
    }
    /// Creates a new `CreateProxySession` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateProxySession {
    type Output = std::result::Result<
        crate::output::CreateProxySessionOutput,
        crate::error::CreateProxySessionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_proxy_session_error(response)
        } else {
            crate::operation_deser::parse_create_proxy_session_response(response)
        }
    }
}

/// Operation shape for `CreateSipMediaApplication`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_sip_media_application`](crate::client::Client::create_sip_media_application).
///
/// See [`crate::client::fluent_builders::CreateSipMediaApplication`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateSipMediaApplication {
    _private: (),
}
impl CreateSipMediaApplication {
    /// Creates a new builder-style object to manufacture [`CreateSipMediaApplicationInput`](crate::input::CreateSipMediaApplicationInput).
    pub fn builder() -> crate::input::create_sip_media_application_input::Builder {
        crate::input::create_sip_media_application_input::Builder::default()
    }
    /// Creates a new `CreateSipMediaApplication` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateSipMediaApplication {
    type Output = std::result::Result<
        crate::output::CreateSipMediaApplicationOutput,
        crate::error::CreateSipMediaApplicationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_sip_media_application_error(response)
        } else {
            crate::operation_deser::parse_create_sip_media_application_response(response)
        }
    }
}

/// Operation shape for `CreateSipMediaApplicationCall`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_sip_media_application_call`](crate::client::Client::create_sip_media_application_call).
///
/// See [`crate::client::fluent_builders::CreateSipMediaApplicationCall`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateSipMediaApplicationCall {
    _private: (),
}
impl CreateSipMediaApplicationCall {
    /// Creates a new builder-style object to manufacture [`CreateSipMediaApplicationCallInput`](crate::input::CreateSipMediaApplicationCallInput).
    pub fn builder() -> crate::input::create_sip_media_application_call_input::Builder {
        crate::input::create_sip_media_application_call_input::Builder::default()
    }
    /// Creates a new `CreateSipMediaApplicationCall` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateSipMediaApplicationCall {
    type Output = std::result::Result<
        crate::output::CreateSipMediaApplicationCallOutput,
        crate::error::CreateSipMediaApplicationCallError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_sip_media_application_call_error(response)
        } else {
            crate::operation_deser::parse_create_sip_media_application_call_response(response)
        }
    }
}

/// Operation shape for `CreateSipRule`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_sip_rule`](crate::client::Client::create_sip_rule).
///
/// See [`crate::client::fluent_builders::CreateSipRule`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateSipRule {
    _private: (),
}
impl CreateSipRule {
    /// Creates a new builder-style object to manufacture [`CreateSipRuleInput`](crate::input::CreateSipRuleInput).
    pub fn builder() -> crate::input::create_sip_rule_input::Builder {
        crate::input::create_sip_rule_input::Builder::default()
    }
    /// Creates a new `CreateSipRule` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateSipRule {
    type Output =
        std::result::Result<crate::output::CreateSipRuleOutput, crate::error::CreateSipRuleError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_sip_rule_error(response)
        } else {
            crate::operation_deser::parse_create_sip_rule_response(response)
        }
    }
}

/// Operation shape for `CreateVoiceConnector`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_voice_connector`](crate::client::Client::create_voice_connector).
///
/// See [`crate::client::fluent_builders::CreateVoiceConnector`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateVoiceConnector {
    _private: (),
}
impl CreateVoiceConnector {
    /// Creates a new builder-style object to manufacture [`CreateVoiceConnectorInput`](crate::input::CreateVoiceConnectorInput).
    pub fn builder() -> crate::input::create_voice_connector_input::Builder {
        crate::input::create_voice_connector_input::Builder::default()
    }
    /// Creates a new `CreateVoiceConnector` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateVoiceConnector {
    type Output = std::result::Result<
        crate::output::CreateVoiceConnectorOutput,
        crate::error::CreateVoiceConnectorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_voice_connector_error(response)
        } else {
            crate::operation_deser::parse_create_voice_connector_response(response)
        }
    }
}

/// Operation shape for `CreateVoiceConnectorGroup`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_voice_connector_group`](crate::client::Client::create_voice_connector_group).
///
/// See [`crate::client::fluent_builders::CreateVoiceConnectorGroup`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateVoiceConnectorGroup {
    _private: (),
}
impl CreateVoiceConnectorGroup {
    /// Creates a new builder-style object to manufacture [`CreateVoiceConnectorGroupInput`](crate::input::CreateVoiceConnectorGroupInput).
    pub fn builder() -> crate::input::create_voice_connector_group_input::Builder {
        crate::input::create_voice_connector_group_input::Builder::default()
    }
    /// Creates a new `CreateVoiceConnectorGroup` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateVoiceConnectorGroup {
    type Output = std::result::Result<
        crate::output::CreateVoiceConnectorGroupOutput,
        crate::error::CreateVoiceConnectorGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_voice_connector_group_error(response)
        } else {
            crate::operation_deser::parse_create_voice_connector_group_response(response)
        }
    }
}

/// Operation shape for `DeletePhoneNumber`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_phone_number`](crate::client::Client::delete_phone_number).
///
/// See [`crate::client::fluent_builders::DeletePhoneNumber`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeletePhoneNumber {
    _private: (),
}
impl DeletePhoneNumber {
    /// Creates a new builder-style object to manufacture [`DeletePhoneNumberInput`](crate::input::DeletePhoneNumberInput).
    pub fn builder() -> crate::input::delete_phone_number_input::Builder {
        crate::input::delete_phone_number_input::Builder::default()
    }
    /// Creates a new `DeletePhoneNumber` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeletePhoneNumber {
    type Output = std::result::Result<
        crate::output::DeletePhoneNumberOutput,
        crate::error::DeletePhoneNumberError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_phone_number_error(response)
        } else {
            crate::operation_deser::parse_delete_phone_number_response(response)
        }
    }
}

/// Operation shape for `DeleteProxySession`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_proxy_session`](crate::client::Client::delete_proxy_session).
///
/// See [`crate::client::fluent_builders::DeleteProxySession`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteProxySession {
    _private: (),
}
impl DeleteProxySession {
    /// Creates a new builder-style object to manufacture [`DeleteProxySessionInput`](crate::input::DeleteProxySessionInput).
    pub fn builder() -> crate::input::delete_proxy_session_input::Builder {
        crate::input::delete_proxy_session_input::Builder::default()
    }
    /// Creates a new `DeleteProxySession` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteProxySession {
    type Output = std::result::Result<
        crate::output::DeleteProxySessionOutput,
        crate::error::DeleteProxySessionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_proxy_session_error(response)
        } else {
            crate::operation_deser::parse_delete_proxy_session_response(response)
        }
    }
}

/// Operation shape for `DeleteSipMediaApplication`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_sip_media_application`](crate::client::Client::delete_sip_media_application).
///
/// See [`crate::client::fluent_builders::DeleteSipMediaApplication`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteSipMediaApplication {
    _private: (),
}
impl DeleteSipMediaApplication {
    /// Creates a new builder-style object to manufacture [`DeleteSipMediaApplicationInput`](crate::input::DeleteSipMediaApplicationInput).
    pub fn builder() -> crate::input::delete_sip_media_application_input::Builder {
        crate::input::delete_sip_media_application_input::Builder::default()
    }
    /// Creates a new `DeleteSipMediaApplication` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteSipMediaApplication {
    type Output = std::result::Result<
        crate::output::DeleteSipMediaApplicationOutput,
        crate::error::DeleteSipMediaApplicationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_sip_media_application_error(response)
        } else {
            crate::operation_deser::parse_delete_sip_media_application_response(response)
        }
    }
}

/// Operation shape for `DeleteSipRule`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_sip_rule`](crate::client::Client::delete_sip_rule).
///
/// See [`crate::client::fluent_builders::DeleteSipRule`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteSipRule {
    _private: (),
}
impl DeleteSipRule {
    /// Creates a new builder-style object to manufacture [`DeleteSipRuleInput`](crate::input::DeleteSipRuleInput).
    pub fn builder() -> crate::input::delete_sip_rule_input::Builder {
        crate::input::delete_sip_rule_input::Builder::default()
    }
    /// Creates a new `DeleteSipRule` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteSipRule {
    type Output =
        std::result::Result<crate::output::DeleteSipRuleOutput, crate::error::DeleteSipRuleError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_sip_rule_error(response)
        } else {
            crate::operation_deser::parse_delete_sip_rule_response(response)
        }
    }
}

/// Operation shape for `DeleteVoiceConnector`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_voice_connector`](crate::client::Client::delete_voice_connector).
///
/// See [`crate::client::fluent_builders::DeleteVoiceConnector`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteVoiceConnector {
    _private: (),
}
impl DeleteVoiceConnector {
    /// Creates a new builder-style object to manufacture [`DeleteVoiceConnectorInput`](crate::input::DeleteVoiceConnectorInput).
    pub fn builder() -> crate::input::delete_voice_connector_input::Builder {
        crate::input::delete_voice_connector_input::Builder::default()
    }
    /// Creates a new `DeleteVoiceConnector` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteVoiceConnector {
    type Output = std::result::Result<
        crate::output::DeleteVoiceConnectorOutput,
        crate::error::DeleteVoiceConnectorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_voice_connector_error(response)
        } else {
            crate::operation_deser::parse_delete_voice_connector_response(response)
        }
    }
}

/// Operation shape for `DeleteVoiceConnectorEmergencyCallingConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_voice_connector_emergency_calling_configuration`](crate::client::Client::delete_voice_connector_emergency_calling_configuration).
///
/// See [`crate::client::fluent_builders::DeleteVoiceConnectorEmergencyCallingConfiguration`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteVoiceConnectorEmergencyCallingConfiguration {
    _private: (),
}
impl DeleteVoiceConnectorEmergencyCallingConfiguration {
    /// Creates a new builder-style object to manufacture [`DeleteVoiceConnectorEmergencyCallingConfigurationInput`](crate::input::DeleteVoiceConnectorEmergencyCallingConfigurationInput).
    pub fn builder(
    ) -> crate::input::delete_voice_connector_emergency_calling_configuration_input::Builder {
        crate::input::delete_voice_connector_emergency_calling_configuration_input::Builder::default(
        )
    }
    /// Creates a new `DeleteVoiceConnectorEmergencyCallingConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse
    for DeleteVoiceConnectorEmergencyCallingConfiguration
{
    type Output = std::result::Result<
        crate::output::DeleteVoiceConnectorEmergencyCallingConfigurationOutput,
        crate::error::DeleteVoiceConnectorEmergencyCallingConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_voice_connector_emergency_calling_configuration_error(response)
        } else {
            crate::operation_deser::parse_delete_voice_connector_emergency_calling_configuration_response(response)
        }
    }
}

/// Operation shape for `DeleteVoiceConnectorGroup`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_voice_connector_group`](crate::client::Client::delete_voice_connector_group).
///
/// See [`crate::client::fluent_builders::DeleteVoiceConnectorGroup`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteVoiceConnectorGroup {
    _private: (),
}
impl DeleteVoiceConnectorGroup {
    /// Creates a new builder-style object to manufacture [`DeleteVoiceConnectorGroupInput`](crate::input::DeleteVoiceConnectorGroupInput).
    pub fn builder() -> crate::input::delete_voice_connector_group_input::Builder {
        crate::input::delete_voice_connector_group_input::Builder::default()
    }
    /// Creates a new `DeleteVoiceConnectorGroup` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteVoiceConnectorGroup {
    type Output = std::result::Result<
        crate::output::DeleteVoiceConnectorGroupOutput,
        crate::error::DeleteVoiceConnectorGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_voice_connector_group_error(response)
        } else {
            crate::operation_deser::parse_delete_voice_connector_group_response(response)
        }
    }
}

/// Operation shape for `DeleteVoiceConnectorOrigination`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_voice_connector_origination`](crate::client::Client::delete_voice_connector_origination).
///
/// See [`crate::client::fluent_builders::DeleteVoiceConnectorOrigination`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteVoiceConnectorOrigination {
    _private: (),
}
impl DeleteVoiceConnectorOrigination {
    /// Creates a new builder-style object to manufacture [`DeleteVoiceConnectorOriginationInput`](crate::input::DeleteVoiceConnectorOriginationInput).
    pub fn builder() -> crate::input::delete_voice_connector_origination_input::Builder {
        crate::input::delete_voice_connector_origination_input::Builder::default()
    }
    /// Creates a new `DeleteVoiceConnectorOrigination` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteVoiceConnectorOrigination {
    type Output = std::result::Result<
        crate::output::DeleteVoiceConnectorOriginationOutput,
        crate::error::DeleteVoiceConnectorOriginationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_voice_connector_origination_error(response)
        } else {
            crate::operation_deser::parse_delete_voice_connector_origination_response(response)
        }
    }
}

/// Operation shape for `DeleteVoiceConnectorProxy`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_voice_connector_proxy`](crate::client::Client::delete_voice_connector_proxy).
///
/// See [`crate::client::fluent_builders::DeleteVoiceConnectorProxy`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteVoiceConnectorProxy {
    _private: (),
}
impl DeleteVoiceConnectorProxy {
    /// Creates a new builder-style object to manufacture [`DeleteVoiceConnectorProxyInput`](crate::input::DeleteVoiceConnectorProxyInput).
    pub fn builder() -> crate::input::delete_voice_connector_proxy_input::Builder {
        crate::input::delete_voice_connector_proxy_input::Builder::default()
    }
    /// Creates a new `DeleteVoiceConnectorProxy` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteVoiceConnectorProxy {
    type Output = std::result::Result<
        crate::output::DeleteVoiceConnectorProxyOutput,
        crate::error::DeleteVoiceConnectorProxyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_voice_connector_proxy_error(response)
        } else {
            crate::operation_deser::parse_delete_voice_connector_proxy_response(response)
        }
    }
}

/// Operation shape for `DeleteVoiceConnectorStreamingConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_voice_connector_streaming_configuration`](crate::client::Client::delete_voice_connector_streaming_configuration).
///
/// See [`crate::client::fluent_builders::DeleteVoiceConnectorStreamingConfiguration`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteVoiceConnectorStreamingConfiguration {
    _private: (),
}
impl DeleteVoiceConnectorStreamingConfiguration {
    /// Creates a new builder-style object to manufacture [`DeleteVoiceConnectorStreamingConfigurationInput`](crate::input::DeleteVoiceConnectorStreamingConfigurationInput).
    pub fn builder() -> crate::input::delete_voice_connector_streaming_configuration_input::Builder
    {
        crate::input::delete_voice_connector_streaming_configuration_input::Builder::default()
    }
    /// Creates a new `DeleteVoiceConnectorStreamingConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteVoiceConnectorStreamingConfiguration {
    type Output = std::result::Result<
        crate::output::DeleteVoiceConnectorStreamingConfigurationOutput,
        crate::error::DeleteVoiceConnectorStreamingConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_voice_connector_streaming_configuration_error(
                response,
            )
        } else {
            crate::operation_deser::parse_delete_voice_connector_streaming_configuration_response(
                response,
            )
        }
    }
}

/// Operation shape for `DeleteVoiceConnectorTermination`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_voice_connector_termination`](crate::client::Client::delete_voice_connector_termination).
///
/// See [`crate::client::fluent_builders::DeleteVoiceConnectorTermination`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteVoiceConnectorTermination {
    _private: (),
}
impl DeleteVoiceConnectorTermination {
    /// Creates a new builder-style object to manufacture [`DeleteVoiceConnectorTerminationInput`](crate::input::DeleteVoiceConnectorTerminationInput).
    pub fn builder() -> crate::input::delete_voice_connector_termination_input::Builder {
        crate::input::delete_voice_connector_termination_input::Builder::default()
    }
    /// Creates a new `DeleteVoiceConnectorTermination` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteVoiceConnectorTermination {
    type Output = std::result::Result<
        crate::output::DeleteVoiceConnectorTerminationOutput,
        crate::error::DeleteVoiceConnectorTerminationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_voice_connector_termination_error(response)
        } else {
            crate::operation_deser::parse_delete_voice_connector_termination_response(response)
        }
    }
}

/// Operation shape for `DeleteVoiceConnectorTerminationCredentials`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_voice_connector_termination_credentials`](crate::client::Client::delete_voice_connector_termination_credentials).
///
/// See [`crate::client::fluent_builders::DeleteVoiceConnectorTerminationCredentials`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteVoiceConnectorTerminationCredentials {
    _private: (),
}
impl DeleteVoiceConnectorTerminationCredentials {
    /// Creates a new builder-style object to manufacture [`DeleteVoiceConnectorTerminationCredentialsInput`](crate::input::DeleteVoiceConnectorTerminationCredentialsInput).
    pub fn builder() -> crate::input::delete_voice_connector_termination_credentials_input::Builder
    {
        crate::input::delete_voice_connector_termination_credentials_input::Builder::default()
    }
    /// Creates a new `DeleteVoiceConnectorTerminationCredentials` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteVoiceConnectorTerminationCredentials {
    type Output = std::result::Result<
        crate::output::DeleteVoiceConnectorTerminationCredentialsOutput,
        crate::error::DeleteVoiceConnectorTerminationCredentialsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_voice_connector_termination_credentials_error(
                response,
            )
        } else {
            crate::operation_deser::parse_delete_voice_connector_termination_credentials_response(
                response,
            )
        }
    }
}

/// Operation shape for `DisassociatePhoneNumbersFromVoiceConnector`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`disassociate_phone_numbers_from_voice_connector`](crate::client::Client::disassociate_phone_numbers_from_voice_connector).
///
/// See [`crate::client::fluent_builders::DisassociatePhoneNumbersFromVoiceConnector`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DisassociatePhoneNumbersFromVoiceConnector {
    _private: (),
}
impl DisassociatePhoneNumbersFromVoiceConnector {
    /// Creates a new builder-style object to manufacture [`DisassociatePhoneNumbersFromVoiceConnectorInput`](crate::input::DisassociatePhoneNumbersFromVoiceConnectorInput).
    pub fn builder() -> crate::input::disassociate_phone_numbers_from_voice_connector_input::Builder
    {
        crate::input::disassociate_phone_numbers_from_voice_connector_input::Builder::default()
    }
    /// Creates a new `DisassociatePhoneNumbersFromVoiceConnector` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DisassociatePhoneNumbersFromVoiceConnector {
    type Output = std::result::Result<
        crate::output::DisassociatePhoneNumbersFromVoiceConnectorOutput,
        crate::error::DisassociatePhoneNumbersFromVoiceConnectorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_phone_numbers_from_voice_connector_error(
                response,
            )
        } else {
            crate::operation_deser::parse_disassociate_phone_numbers_from_voice_connector_response(
                response,
            )
        }
    }
}

/// Operation shape for `DisassociatePhoneNumbersFromVoiceConnectorGroup`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`disassociate_phone_numbers_from_voice_connector_group`](crate::client::Client::disassociate_phone_numbers_from_voice_connector_group).
///
/// See [`crate::client::fluent_builders::DisassociatePhoneNumbersFromVoiceConnectorGroup`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DisassociatePhoneNumbersFromVoiceConnectorGroup {
    _private: (),
}
impl DisassociatePhoneNumbersFromVoiceConnectorGroup {
    /// Creates a new builder-style object to manufacture [`DisassociatePhoneNumbersFromVoiceConnectorGroupInput`](crate::input::DisassociatePhoneNumbersFromVoiceConnectorGroupInput).
    pub fn builder(
    ) -> crate::input::disassociate_phone_numbers_from_voice_connector_group_input::Builder {
        crate::input::disassociate_phone_numbers_from_voice_connector_group_input::Builder::default(
        )
    }
    /// Creates a new `DisassociatePhoneNumbersFromVoiceConnectorGroup` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse
    for DisassociatePhoneNumbersFromVoiceConnectorGroup
{
    type Output = std::result::Result<
        crate::output::DisassociatePhoneNumbersFromVoiceConnectorGroupOutput,
        crate::error::DisassociatePhoneNumbersFromVoiceConnectorGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_phone_numbers_from_voice_connector_group_error(response)
        } else {
            crate::operation_deser::parse_disassociate_phone_numbers_from_voice_connector_group_response(response)
        }
    }
}

/// Operation shape for `GetGlobalSettings`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_global_settings`](crate::client::Client::get_global_settings).
///
/// See [`crate::client::fluent_builders::GetGlobalSettings`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetGlobalSettings {
    _private: (),
}
impl GetGlobalSettings {
    /// Creates a new builder-style object to manufacture [`GetGlobalSettingsInput`](crate::input::GetGlobalSettingsInput).
    pub fn builder() -> crate::input::get_global_settings_input::Builder {
        crate::input::get_global_settings_input::Builder::default()
    }
    /// Creates a new `GetGlobalSettings` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetGlobalSettings {
    type Output = std::result::Result<
        crate::output::GetGlobalSettingsOutput,
        crate::error::GetGlobalSettingsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_global_settings_error(response)
        } else {
            crate::operation_deser::parse_get_global_settings_response(response)
        }
    }
}

/// Operation shape for `GetPhoneNumber`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_phone_number`](crate::client::Client::get_phone_number).
///
/// See [`crate::client::fluent_builders::GetPhoneNumber`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetPhoneNumber {
    _private: (),
}
impl GetPhoneNumber {
    /// Creates a new builder-style object to manufacture [`GetPhoneNumberInput`](crate::input::GetPhoneNumberInput).
    pub fn builder() -> crate::input::get_phone_number_input::Builder {
        crate::input::get_phone_number_input::Builder::default()
    }
    /// Creates a new `GetPhoneNumber` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetPhoneNumber {
    type Output =
        std::result::Result<crate::output::GetPhoneNumberOutput, crate::error::GetPhoneNumberError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_phone_number_error(response)
        } else {
            crate::operation_deser::parse_get_phone_number_response(response)
        }
    }
}

/// Operation shape for `GetPhoneNumberOrder`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_phone_number_order`](crate::client::Client::get_phone_number_order).
///
/// See [`crate::client::fluent_builders::GetPhoneNumberOrder`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetPhoneNumberOrder {
    _private: (),
}
impl GetPhoneNumberOrder {
    /// Creates a new builder-style object to manufacture [`GetPhoneNumberOrderInput`](crate::input::GetPhoneNumberOrderInput).
    pub fn builder() -> crate::input::get_phone_number_order_input::Builder {
        crate::input::get_phone_number_order_input::Builder::default()
    }
    /// Creates a new `GetPhoneNumberOrder` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetPhoneNumberOrder {
    type Output = std::result::Result<
        crate::output::GetPhoneNumberOrderOutput,
        crate::error::GetPhoneNumberOrderError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_phone_number_order_error(response)
        } else {
            crate::operation_deser::parse_get_phone_number_order_response(response)
        }
    }
}

/// Operation shape for `GetPhoneNumberSettings`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_phone_number_settings`](crate::client::Client::get_phone_number_settings).
///
/// See [`crate::client::fluent_builders::GetPhoneNumberSettings`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetPhoneNumberSettings {
    _private: (),
}
impl GetPhoneNumberSettings {
    /// Creates a new builder-style object to manufacture [`GetPhoneNumberSettingsInput`](crate::input::GetPhoneNumberSettingsInput).
    pub fn builder() -> crate::input::get_phone_number_settings_input::Builder {
        crate::input::get_phone_number_settings_input::Builder::default()
    }
    /// Creates a new `GetPhoneNumberSettings` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetPhoneNumberSettings {
    type Output = std::result::Result<
        crate::output::GetPhoneNumberSettingsOutput,
        crate::error::GetPhoneNumberSettingsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_phone_number_settings_error(response)
        } else {
            crate::operation_deser::parse_get_phone_number_settings_response(response)
        }
    }
}

/// Operation shape for `GetProxySession`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_proxy_session`](crate::client::Client::get_proxy_session).
///
/// See [`crate::client::fluent_builders::GetProxySession`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetProxySession {
    _private: (),
}
impl GetProxySession {
    /// Creates a new builder-style object to manufacture [`GetProxySessionInput`](crate::input::GetProxySessionInput).
    pub fn builder() -> crate::input::get_proxy_session_input::Builder {
        crate::input::get_proxy_session_input::Builder::default()
    }
    /// Creates a new `GetProxySession` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetProxySession {
    type Output = std::result::Result<
        crate::output::GetProxySessionOutput,
        crate::error::GetProxySessionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_proxy_session_error(response)
        } else {
            crate::operation_deser::parse_get_proxy_session_response(response)
        }
    }
}

/// Operation shape for `GetSipMediaApplication`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_sip_media_application`](crate::client::Client::get_sip_media_application).
///
/// See [`crate::client::fluent_builders::GetSipMediaApplication`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetSipMediaApplication {
    _private: (),
}
impl GetSipMediaApplication {
    /// Creates a new builder-style object to manufacture [`GetSipMediaApplicationInput`](crate::input::GetSipMediaApplicationInput).
    pub fn builder() -> crate::input::get_sip_media_application_input::Builder {
        crate::input::get_sip_media_application_input::Builder::default()
    }
    /// Creates a new `GetSipMediaApplication` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetSipMediaApplication {
    type Output = std::result::Result<
        crate::output::GetSipMediaApplicationOutput,
        crate::error::GetSipMediaApplicationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_sip_media_application_error(response)
        } else {
            crate::operation_deser::parse_get_sip_media_application_response(response)
        }
    }
}

/// Operation shape for `GetSipMediaApplicationAlexaSkillConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_sip_media_application_alexa_skill_configuration`](crate::client::Client::get_sip_media_application_alexa_skill_configuration).
///
/// See [`crate::client::fluent_builders::GetSipMediaApplicationAlexaSkillConfiguration`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetSipMediaApplicationAlexaSkillConfiguration {
    _private: (),
}
impl GetSipMediaApplicationAlexaSkillConfiguration {
    /// Creates a new builder-style object to manufacture [`GetSipMediaApplicationAlexaSkillConfigurationInput`](crate::input::GetSipMediaApplicationAlexaSkillConfigurationInput).
    pub fn builder(
    ) -> crate::input::get_sip_media_application_alexa_skill_configuration_input::Builder {
        crate::input::get_sip_media_application_alexa_skill_configuration_input::Builder::default()
    }
    /// Creates a new `GetSipMediaApplicationAlexaSkillConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse
    for GetSipMediaApplicationAlexaSkillConfiguration
{
    type Output = std::result::Result<
        crate::output::GetSipMediaApplicationAlexaSkillConfigurationOutput,
        crate::error::GetSipMediaApplicationAlexaSkillConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_sip_media_application_alexa_skill_configuration_error(
                response,
            )
        } else {
            crate::operation_deser::parse_get_sip_media_application_alexa_skill_configuration_response(response)
        }
    }
}

/// Operation shape for `GetSipMediaApplicationLoggingConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_sip_media_application_logging_configuration`](crate::client::Client::get_sip_media_application_logging_configuration).
///
/// See [`crate::client::fluent_builders::GetSipMediaApplicationLoggingConfiguration`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetSipMediaApplicationLoggingConfiguration {
    _private: (),
}
impl GetSipMediaApplicationLoggingConfiguration {
    /// Creates a new builder-style object to manufacture [`GetSipMediaApplicationLoggingConfigurationInput`](crate::input::GetSipMediaApplicationLoggingConfigurationInput).
    pub fn builder() -> crate::input::get_sip_media_application_logging_configuration_input::Builder
    {
        crate::input::get_sip_media_application_logging_configuration_input::Builder::default()
    }
    /// Creates a new `GetSipMediaApplicationLoggingConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetSipMediaApplicationLoggingConfiguration {
    type Output = std::result::Result<
        crate::output::GetSipMediaApplicationLoggingConfigurationOutput,
        crate::error::GetSipMediaApplicationLoggingConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_sip_media_application_logging_configuration_error(
                response,
            )
        } else {
            crate::operation_deser::parse_get_sip_media_application_logging_configuration_response(
                response,
            )
        }
    }
}

/// Operation shape for `GetSipRule`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_sip_rule`](crate::client::Client::get_sip_rule).
///
/// See [`crate::client::fluent_builders::GetSipRule`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetSipRule {
    _private: (),
}
impl GetSipRule {
    /// Creates a new builder-style object to manufacture [`GetSipRuleInput`](crate::input::GetSipRuleInput).
    pub fn builder() -> crate::input::get_sip_rule_input::Builder {
        crate::input::get_sip_rule_input::Builder::default()
    }
    /// Creates a new `GetSipRule` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetSipRule {
    type Output =
        std::result::Result<crate::output::GetSipRuleOutput, crate::error::GetSipRuleError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_sip_rule_error(response)
        } else {
            crate::operation_deser::parse_get_sip_rule_response(response)
        }
    }
}

/// Operation shape for `GetVoiceConnector`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_voice_connector`](crate::client::Client::get_voice_connector).
///
/// See [`crate::client::fluent_builders::GetVoiceConnector`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetVoiceConnector {
    _private: (),
}
impl GetVoiceConnector {
    /// Creates a new builder-style object to manufacture [`GetVoiceConnectorInput`](crate::input::GetVoiceConnectorInput).
    pub fn builder() -> crate::input::get_voice_connector_input::Builder {
        crate::input::get_voice_connector_input::Builder::default()
    }
    /// Creates a new `GetVoiceConnector` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetVoiceConnector {
    type Output = std::result::Result<
        crate::output::GetVoiceConnectorOutput,
        crate::error::GetVoiceConnectorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_voice_connector_error(response)
        } else {
            crate::operation_deser::parse_get_voice_connector_response(response)
        }
    }
}

/// Operation shape for `GetVoiceConnectorEmergencyCallingConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_voice_connector_emergency_calling_configuration`](crate::client::Client::get_voice_connector_emergency_calling_configuration).
///
/// See [`crate::client::fluent_builders::GetVoiceConnectorEmergencyCallingConfiguration`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetVoiceConnectorEmergencyCallingConfiguration {
    _private: (),
}
impl GetVoiceConnectorEmergencyCallingConfiguration {
    /// Creates a new builder-style object to manufacture [`GetVoiceConnectorEmergencyCallingConfigurationInput`](crate::input::GetVoiceConnectorEmergencyCallingConfigurationInput).
    pub fn builder(
    ) -> crate::input::get_voice_connector_emergency_calling_configuration_input::Builder {
        crate::input::get_voice_connector_emergency_calling_configuration_input::Builder::default()
    }
    /// Creates a new `GetVoiceConnectorEmergencyCallingConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse
    for GetVoiceConnectorEmergencyCallingConfiguration
{
    type Output = std::result::Result<
        crate::output::GetVoiceConnectorEmergencyCallingConfigurationOutput,
        crate::error::GetVoiceConnectorEmergencyCallingConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_voice_connector_emergency_calling_configuration_error(
                response,
            )
        } else {
            crate::operation_deser::parse_get_voice_connector_emergency_calling_configuration_response(response)
        }
    }
}

/// Operation shape for `GetVoiceConnectorGroup`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_voice_connector_group`](crate::client::Client::get_voice_connector_group).
///
/// See [`crate::client::fluent_builders::GetVoiceConnectorGroup`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetVoiceConnectorGroup {
    _private: (),
}
impl GetVoiceConnectorGroup {
    /// Creates a new builder-style object to manufacture [`GetVoiceConnectorGroupInput`](crate::input::GetVoiceConnectorGroupInput).
    pub fn builder() -> crate::input::get_voice_connector_group_input::Builder {
        crate::input::get_voice_connector_group_input::Builder::default()
    }
    /// Creates a new `GetVoiceConnectorGroup` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetVoiceConnectorGroup {
    type Output = std::result::Result<
        crate::output::GetVoiceConnectorGroupOutput,
        crate::error::GetVoiceConnectorGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_voice_connector_group_error(response)
        } else {
            crate::operation_deser::parse_get_voice_connector_group_response(response)
        }
    }
}

/// Operation shape for `GetVoiceConnectorLoggingConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_voice_connector_logging_configuration`](crate::client::Client::get_voice_connector_logging_configuration).
///
/// See [`crate::client::fluent_builders::GetVoiceConnectorLoggingConfiguration`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetVoiceConnectorLoggingConfiguration {
    _private: (),
}
impl GetVoiceConnectorLoggingConfiguration {
    /// Creates a new builder-style object to manufacture [`GetVoiceConnectorLoggingConfigurationInput`](crate::input::GetVoiceConnectorLoggingConfigurationInput).
    pub fn builder() -> crate::input::get_voice_connector_logging_configuration_input::Builder {
        crate::input::get_voice_connector_logging_configuration_input::Builder::default()
    }
    /// Creates a new `GetVoiceConnectorLoggingConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetVoiceConnectorLoggingConfiguration {
    type Output = std::result::Result<
        crate::output::GetVoiceConnectorLoggingConfigurationOutput,
        crate::error::GetVoiceConnectorLoggingConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_voice_connector_logging_configuration_error(response)
        } else {
            crate::operation_deser::parse_get_voice_connector_logging_configuration_response(
                response,
            )
        }
    }
}

/// Operation shape for `GetVoiceConnectorOrigination`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_voice_connector_origination`](crate::client::Client::get_voice_connector_origination).
///
/// See [`crate::client::fluent_builders::GetVoiceConnectorOrigination`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetVoiceConnectorOrigination {
    _private: (),
}
impl GetVoiceConnectorOrigination {
    /// Creates a new builder-style object to manufacture [`GetVoiceConnectorOriginationInput`](crate::input::GetVoiceConnectorOriginationInput).
    pub fn builder() -> crate::input::get_voice_connector_origination_input::Builder {
        crate::input::get_voice_connector_origination_input::Builder::default()
    }
    /// Creates a new `GetVoiceConnectorOrigination` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetVoiceConnectorOrigination {
    type Output = std::result::Result<
        crate::output::GetVoiceConnectorOriginationOutput,
        crate::error::GetVoiceConnectorOriginationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_voice_connector_origination_error(response)
        } else {
            crate::operation_deser::parse_get_voice_connector_origination_response(response)
        }
    }
}

/// Operation shape for `GetVoiceConnectorProxy`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_voice_connector_proxy`](crate::client::Client::get_voice_connector_proxy).
///
/// See [`crate::client::fluent_builders::GetVoiceConnectorProxy`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetVoiceConnectorProxy {
    _private: (),
}
impl GetVoiceConnectorProxy {
    /// Creates a new builder-style object to manufacture [`GetVoiceConnectorProxyInput`](crate::input::GetVoiceConnectorProxyInput).
    pub fn builder() -> crate::input::get_voice_connector_proxy_input::Builder {
        crate::input::get_voice_connector_proxy_input::Builder::default()
    }
    /// Creates a new `GetVoiceConnectorProxy` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetVoiceConnectorProxy {
    type Output = std::result::Result<
        crate::output::GetVoiceConnectorProxyOutput,
        crate::error::GetVoiceConnectorProxyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_voice_connector_proxy_error(response)
        } else {
            crate::operation_deser::parse_get_voice_connector_proxy_response(response)
        }
    }
}

/// Operation shape for `GetVoiceConnectorStreamingConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_voice_connector_streaming_configuration`](crate::client::Client::get_voice_connector_streaming_configuration).
///
/// See [`crate::client::fluent_builders::GetVoiceConnectorStreamingConfiguration`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetVoiceConnectorStreamingConfiguration {
    _private: (),
}
impl GetVoiceConnectorStreamingConfiguration {
    /// Creates a new builder-style object to manufacture [`GetVoiceConnectorStreamingConfigurationInput`](crate::input::GetVoiceConnectorStreamingConfigurationInput).
    pub fn builder() -> crate::input::get_voice_connector_streaming_configuration_input::Builder {
        crate::input::get_voice_connector_streaming_configuration_input::Builder::default()
    }
    /// Creates a new `GetVoiceConnectorStreamingConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetVoiceConnectorStreamingConfiguration {
    type Output = std::result::Result<
        crate::output::GetVoiceConnectorStreamingConfigurationOutput,
        crate::error::GetVoiceConnectorStreamingConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_voice_connector_streaming_configuration_error(
                response,
            )
        } else {
            crate::operation_deser::parse_get_voice_connector_streaming_configuration_response(
                response,
            )
        }
    }
}

/// Operation shape for `GetVoiceConnectorTermination`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_voice_connector_termination`](crate::client::Client::get_voice_connector_termination).
///
/// See [`crate::client::fluent_builders::GetVoiceConnectorTermination`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetVoiceConnectorTermination {
    _private: (),
}
impl GetVoiceConnectorTermination {
    /// Creates a new builder-style object to manufacture [`GetVoiceConnectorTerminationInput`](crate::input::GetVoiceConnectorTerminationInput).
    pub fn builder() -> crate::input::get_voice_connector_termination_input::Builder {
        crate::input::get_voice_connector_termination_input::Builder::default()
    }
    /// Creates a new `GetVoiceConnectorTermination` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetVoiceConnectorTermination {
    type Output = std::result::Result<
        crate::output::GetVoiceConnectorTerminationOutput,
        crate::error::GetVoiceConnectorTerminationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_voice_connector_termination_error(response)
        } else {
            crate::operation_deser::parse_get_voice_connector_termination_response(response)
        }
    }
}

/// Operation shape for `GetVoiceConnectorTerminationHealth`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_voice_connector_termination_health`](crate::client::Client::get_voice_connector_termination_health).
///
/// See [`crate::client::fluent_builders::GetVoiceConnectorTerminationHealth`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetVoiceConnectorTerminationHealth {
    _private: (),
}
impl GetVoiceConnectorTerminationHealth {
    /// Creates a new builder-style object to manufacture [`GetVoiceConnectorTerminationHealthInput`](crate::input::GetVoiceConnectorTerminationHealthInput).
    pub fn builder() -> crate::input::get_voice_connector_termination_health_input::Builder {
        crate::input::get_voice_connector_termination_health_input::Builder::default()
    }
    /// Creates a new `GetVoiceConnectorTerminationHealth` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetVoiceConnectorTerminationHealth {
    type Output = std::result::Result<
        crate::output::GetVoiceConnectorTerminationHealthOutput,
        crate::error::GetVoiceConnectorTerminationHealthError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_voice_connector_termination_health_error(response)
        } else {
            crate::operation_deser::parse_get_voice_connector_termination_health_response(response)
        }
    }
}

/// Operation shape for `ListAvailableVoiceConnectorRegions`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_available_voice_connector_regions`](crate::client::Client::list_available_voice_connector_regions).
///
/// See [`crate::client::fluent_builders::ListAvailableVoiceConnectorRegions`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListAvailableVoiceConnectorRegions {
    _private: (),
}
impl ListAvailableVoiceConnectorRegions {
    /// Creates a new builder-style object to manufacture [`ListAvailableVoiceConnectorRegionsInput`](crate::input::ListAvailableVoiceConnectorRegionsInput).
    pub fn builder() -> crate::input::list_available_voice_connector_regions_input::Builder {
        crate::input::list_available_voice_connector_regions_input::Builder::default()
    }
    /// Creates a new `ListAvailableVoiceConnectorRegions` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListAvailableVoiceConnectorRegions {
    type Output = std::result::Result<
        crate::output::ListAvailableVoiceConnectorRegionsOutput,
        crate::error::ListAvailableVoiceConnectorRegionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_available_voice_connector_regions_error(response)
        } else {
            crate::operation_deser::parse_list_available_voice_connector_regions_response(response)
        }
    }
}

/// Operation shape for `ListPhoneNumberOrders`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_phone_number_orders`](crate::client::Client::list_phone_number_orders).
///
/// See [`crate::client::fluent_builders::ListPhoneNumberOrders`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListPhoneNumberOrders {
    _private: (),
}
impl ListPhoneNumberOrders {
    /// Creates a new builder-style object to manufacture [`ListPhoneNumberOrdersInput`](crate::input::ListPhoneNumberOrdersInput).
    pub fn builder() -> crate::input::list_phone_number_orders_input::Builder {
        crate::input::list_phone_number_orders_input::Builder::default()
    }
    /// Creates a new `ListPhoneNumberOrders` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListPhoneNumberOrders {
    type Output = std::result::Result<
        crate::output::ListPhoneNumberOrdersOutput,
        crate::error::ListPhoneNumberOrdersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_phone_number_orders_error(response)
        } else {
            crate::operation_deser::parse_list_phone_number_orders_response(response)
        }
    }
}

/// Operation shape for `ListPhoneNumbers`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_phone_numbers`](crate::client::Client::list_phone_numbers).
///
/// See [`crate::client::fluent_builders::ListPhoneNumbers`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListPhoneNumbers {
    _private: (),
}
impl ListPhoneNumbers {
    /// Creates a new builder-style object to manufacture [`ListPhoneNumbersInput`](crate::input::ListPhoneNumbersInput).
    pub fn builder() -> crate::input::list_phone_numbers_input::Builder {
        crate::input::list_phone_numbers_input::Builder::default()
    }
    /// Creates a new `ListPhoneNumbers` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListPhoneNumbers {
    type Output = std::result::Result<
        crate::output::ListPhoneNumbersOutput,
        crate::error::ListPhoneNumbersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_phone_numbers_error(response)
        } else {
            crate::operation_deser::parse_list_phone_numbers_response(response)
        }
    }
}

/// Operation shape for `ListProxySessions`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_proxy_sessions`](crate::client::Client::list_proxy_sessions).
///
/// See [`crate::client::fluent_builders::ListProxySessions`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListProxySessions {
    _private: (),
}
impl ListProxySessions {
    /// Creates a new builder-style object to manufacture [`ListProxySessionsInput`](crate::input::ListProxySessionsInput).
    pub fn builder() -> crate::input::list_proxy_sessions_input::Builder {
        crate::input::list_proxy_sessions_input::Builder::default()
    }
    /// Creates a new `ListProxySessions` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListProxySessions {
    type Output = std::result::Result<
        crate::output::ListProxySessionsOutput,
        crate::error::ListProxySessionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_proxy_sessions_error(response)
        } else {
            crate::operation_deser::parse_list_proxy_sessions_response(response)
        }
    }
}

/// Operation shape for `ListSipMediaApplications`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_sip_media_applications`](crate::client::Client::list_sip_media_applications).
///
/// See [`crate::client::fluent_builders::ListSipMediaApplications`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListSipMediaApplications {
    _private: (),
}
impl ListSipMediaApplications {
    /// Creates a new builder-style object to manufacture [`ListSipMediaApplicationsInput`](crate::input::ListSipMediaApplicationsInput).
    pub fn builder() -> crate::input::list_sip_media_applications_input::Builder {
        crate::input::list_sip_media_applications_input::Builder::default()
    }
    /// Creates a new `ListSipMediaApplications` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListSipMediaApplications {
    type Output = std::result::Result<
        crate::output::ListSipMediaApplicationsOutput,
        crate::error::ListSipMediaApplicationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_sip_media_applications_error(response)
        } else {
            crate::operation_deser::parse_list_sip_media_applications_response(response)
        }
    }
}

/// Operation shape for `ListSipRules`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_sip_rules`](crate::client::Client::list_sip_rules).
///
/// See [`crate::client::fluent_builders::ListSipRules`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListSipRules {
    _private: (),
}
impl ListSipRules {
    /// Creates a new builder-style object to manufacture [`ListSipRulesInput`](crate::input::ListSipRulesInput).
    pub fn builder() -> crate::input::list_sip_rules_input::Builder {
        crate::input::list_sip_rules_input::Builder::default()
    }
    /// Creates a new `ListSipRules` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListSipRules {
    type Output =
        std::result::Result<crate::output::ListSipRulesOutput, crate::error::ListSipRulesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_sip_rules_error(response)
        } else {
            crate::operation_deser::parse_list_sip_rules_response(response)
        }
    }
}

/// Operation shape for `ListSupportedPhoneNumberCountries`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_supported_phone_number_countries`](crate::client::Client::list_supported_phone_number_countries).
///
/// See [`crate::client::fluent_builders::ListSupportedPhoneNumberCountries`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListSupportedPhoneNumberCountries {
    _private: (),
}
impl ListSupportedPhoneNumberCountries {
    /// Creates a new builder-style object to manufacture [`ListSupportedPhoneNumberCountriesInput`](crate::input::ListSupportedPhoneNumberCountriesInput).
    pub fn builder() -> crate::input::list_supported_phone_number_countries_input::Builder {
        crate::input::list_supported_phone_number_countries_input::Builder::default()
    }
    /// Creates a new `ListSupportedPhoneNumberCountries` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListSupportedPhoneNumberCountries {
    type Output = std::result::Result<
        crate::output::ListSupportedPhoneNumberCountriesOutput,
        crate::error::ListSupportedPhoneNumberCountriesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_supported_phone_number_countries_error(response)
        } else {
            crate::operation_deser::parse_list_supported_phone_number_countries_response(response)
        }
    }
}

/// Operation shape for `ListVoiceConnectorGroups`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_voice_connector_groups`](crate::client::Client::list_voice_connector_groups).
///
/// See [`crate::client::fluent_builders::ListVoiceConnectorGroups`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListVoiceConnectorGroups {
    _private: (),
}
impl ListVoiceConnectorGroups {
    /// Creates a new builder-style object to manufacture [`ListVoiceConnectorGroupsInput`](crate::input::ListVoiceConnectorGroupsInput).
    pub fn builder() -> crate::input::list_voice_connector_groups_input::Builder {
        crate::input::list_voice_connector_groups_input::Builder::default()
    }
    /// Creates a new `ListVoiceConnectorGroups` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListVoiceConnectorGroups {
    type Output = std::result::Result<
        crate::output::ListVoiceConnectorGroupsOutput,
        crate::error::ListVoiceConnectorGroupsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_voice_connector_groups_error(response)
        } else {
            crate::operation_deser::parse_list_voice_connector_groups_response(response)
        }
    }
}

/// Operation shape for `ListVoiceConnectors`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_voice_connectors`](crate::client::Client::list_voice_connectors).
///
/// See [`crate::client::fluent_builders::ListVoiceConnectors`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListVoiceConnectors {
    _private: (),
}
impl ListVoiceConnectors {
    /// Creates a new builder-style object to manufacture [`ListVoiceConnectorsInput`](crate::input::ListVoiceConnectorsInput).
    pub fn builder() -> crate::input::list_voice_connectors_input::Builder {
        crate::input::list_voice_connectors_input::Builder::default()
    }
    /// Creates a new `ListVoiceConnectors` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListVoiceConnectors {
    type Output = std::result::Result<
        crate::output::ListVoiceConnectorsOutput,
        crate::error::ListVoiceConnectorsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_voice_connectors_error(response)
        } else {
            crate::operation_deser::parse_list_voice_connectors_response(response)
        }
    }
}

/// Operation shape for `ListVoiceConnectorTerminationCredentials`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_voice_connector_termination_credentials`](crate::client::Client::list_voice_connector_termination_credentials).
///
/// See [`crate::client::fluent_builders::ListVoiceConnectorTerminationCredentials`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListVoiceConnectorTerminationCredentials {
    _private: (),
}
impl ListVoiceConnectorTerminationCredentials {
    /// Creates a new builder-style object to manufacture [`ListVoiceConnectorTerminationCredentialsInput`](crate::input::ListVoiceConnectorTerminationCredentialsInput).
    pub fn builder() -> crate::input::list_voice_connector_termination_credentials_input::Builder {
        crate::input::list_voice_connector_termination_credentials_input::Builder::default()
    }
    /// Creates a new `ListVoiceConnectorTerminationCredentials` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListVoiceConnectorTerminationCredentials {
    type Output = std::result::Result<
        crate::output::ListVoiceConnectorTerminationCredentialsOutput,
        crate::error::ListVoiceConnectorTerminationCredentialsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_voice_connector_termination_credentials_error(
                response,
            )
        } else {
            crate::operation_deser::parse_list_voice_connector_termination_credentials_response(
                response,
            )
        }
    }
}

/// Operation shape for `PutSipMediaApplicationAlexaSkillConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_sip_media_application_alexa_skill_configuration`](crate::client::Client::put_sip_media_application_alexa_skill_configuration).
///
/// See [`crate::client::fluent_builders::PutSipMediaApplicationAlexaSkillConfiguration`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutSipMediaApplicationAlexaSkillConfiguration {
    _private: (),
}
impl PutSipMediaApplicationAlexaSkillConfiguration {
    /// Creates a new builder-style object to manufacture [`PutSipMediaApplicationAlexaSkillConfigurationInput`](crate::input::PutSipMediaApplicationAlexaSkillConfigurationInput).
    pub fn builder(
    ) -> crate::input::put_sip_media_application_alexa_skill_configuration_input::Builder {
        crate::input::put_sip_media_application_alexa_skill_configuration_input::Builder::default()
    }
    /// Creates a new `PutSipMediaApplicationAlexaSkillConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse
    for PutSipMediaApplicationAlexaSkillConfiguration
{
    type Output = std::result::Result<
        crate::output::PutSipMediaApplicationAlexaSkillConfigurationOutput,
        crate::error::PutSipMediaApplicationAlexaSkillConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_sip_media_application_alexa_skill_configuration_error(
                response,
            )
        } else {
            crate::operation_deser::parse_put_sip_media_application_alexa_skill_configuration_response(response)
        }
    }
}

/// Operation shape for `PutSipMediaApplicationLoggingConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_sip_media_application_logging_configuration`](crate::client::Client::put_sip_media_application_logging_configuration).
///
/// See [`crate::client::fluent_builders::PutSipMediaApplicationLoggingConfiguration`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutSipMediaApplicationLoggingConfiguration {
    _private: (),
}
impl PutSipMediaApplicationLoggingConfiguration {
    /// Creates a new builder-style object to manufacture [`PutSipMediaApplicationLoggingConfigurationInput`](crate::input::PutSipMediaApplicationLoggingConfigurationInput).
    pub fn builder() -> crate::input::put_sip_media_application_logging_configuration_input::Builder
    {
        crate::input::put_sip_media_application_logging_configuration_input::Builder::default()
    }
    /// Creates a new `PutSipMediaApplicationLoggingConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutSipMediaApplicationLoggingConfiguration {
    type Output = std::result::Result<
        crate::output::PutSipMediaApplicationLoggingConfigurationOutput,
        crate::error::PutSipMediaApplicationLoggingConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_sip_media_application_logging_configuration_error(
                response,
            )
        } else {
            crate::operation_deser::parse_put_sip_media_application_logging_configuration_response(
                response,
            )
        }
    }
}

/// Operation shape for `PutVoiceConnectorEmergencyCallingConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_voice_connector_emergency_calling_configuration`](crate::client::Client::put_voice_connector_emergency_calling_configuration).
///
/// See [`crate::client::fluent_builders::PutVoiceConnectorEmergencyCallingConfiguration`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutVoiceConnectorEmergencyCallingConfiguration {
    _private: (),
}
impl PutVoiceConnectorEmergencyCallingConfiguration {
    /// Creates a new builder-style object to manufacture [`PutVoiceConnectorEmergencyCallingConfigurationInput`](crate::input::PutVoiceConnectorEmergencyCallingConfigurationInput).
    pub fn builder(
    ) -> crate::input::put_voice_connector_emergency_calling_configuration_input::Builder {
        crate::input::put_voice_connector_emergency_calling_configuration_input::Builder::default()
    }
    /// Creates a new `PutVoiceConnectorEmergencyCallingConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse
    for PutVoiceConnectorEmergencyCallingConfiguration
{
    type Output = std::result::Result<
        crate::output::PutVoiceConnectorEmergencyCallingConfigurationOutput,
        crate::error::PutVoiceConnectorEmergencyCallingConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_voice_connector_emergency_calling_configuration_error(
                response,
            )
        } else {
            crate::operation_deser::parse_put_voice_connector_emergency_calling_configuration_response(response)
        }
    }
}

/// Operation shape for `PutVoiceConnectorLoggingConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_voice_connector_logging_configuration`](crate::client::Client::put_voice_connector_logging_configuration).
///
/// See [`crate::client::fluent_builders::PutVoiceConnectorLoggingConfiguration`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutVoiceConnectorLoggingConfiguration {
    _private: (),
}
impl PutVoiceConnectorLoggingConfiguration {
    /// Creates a new builder-style object to manufacture [`PutVoiceConnectorLoggingConfigurationInput`](crate::input::PutVoiceConnectorLoggingConfigurationInput).
    pub fn builder() -> crate::input::put_voice_connector_logging_configuration_input::Builder {
        crate::input::put_voice_connector_logging_configuration_input::Builder::default()
    }
    /// Creates a new `PutVoiceConnectorLoggingConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutVoiceConnectorLoggingConfiguration {
    type Output = std::result::Result<
        crate::output::PutVoiceConnectorLoggingConfigurationOutput,
        crate::error::PutVoiceConnectorLoggingConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_voice_connector_logging_configuration_error(response)
        } else {
            crate::operation_deser::parse_put_voice_connector_logging_configuration_response(
                response,
            )
        }
    }
}

/// Operation shape for `PutVoiceConnectorOrigination`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_voice_connector_origination`](crate::client::Client::put_voice_connector_origination).
///
/// See [`crate::client::fluent_builders::PutVoiceConnectorOrigination`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutVoiceConnectorOrigination {
    _private: (),
}
impl PutVoiceConnectorOrigination {
    /// Creates a new builder-style object to manufacture [`PutVoiceConnectorOriginationInput`](crate::input::PutVoiceConnectorOriginationInput).
    pub fn builder() -> crate::input::put_voice_connector_origination_input::Builder {
        crate::input::put_voice_connector_origination_input::Builder::default()
    }
    /// Creates a new `PutVoiceConnectorOrigination` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutVoiceConnectorOrigination {
    type Output = std::result::Result<
        crate::output::PutVoiceConnectorOriginationOutput,
        crate::error::PutVoiceConnectorOriginationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_voice_connector_origination_error(response)
        } else {
            crate::operation_deser::parse_put_voice_connector_origination_response(response)
        }
    }
}

/// Operation shape for `PutVoiceConnectorProxy`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_voice_connector_proxy`](crate::client::Client::put_voice_connector_proxy).
///
/// See [`crate::client::fluent_builders::PutVoiceConnectorProxy`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutVoiceConnectorProxy {
    _private: (),
}
impl PutVoiceConnectorProxy {
    /// Creates a new builder-style object to manufacture [`PutVoiceConnectorProxyInput`](crate::input::PutVoiceConnectorProxyInput).
    pub fn builder() -> crate::input::put_voice_connector_proxy_input::Builder {
        crate::input::put_voice_connector_proxy_input::Builder::default()
    }
    /// Creates a new `PutVoiceConnectorProxy` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutVoiceConnectorProxy {
    type Output = std::result::Result<
        crate::output::PutVoiceConnectorProxyOutput,
        crate::error::PutVoiceConnectorProxyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_voice_connector_proxy_error(response)
        } else {
            crate::operation_deser::parse_put_voice_connector_proxy_response(response)
        }
    }
}

/// Operation shape for `PutVoiceConnectorStreamingConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_voice_connector_streaming_configuration`](crate::client::Client::put_voice_connector_streaming_configuration).
///
/// See [`crate::client::fluent_builders::PutVoiceConnectorStreamingConfiguration`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutVoiceConnectorStreamingConfiguration {
    _private: (),
}
impl PutVoiceConnectorStreamingConfiguration {
    /// Creates a new builder-style object to manufacture [`PutVoiceConnectorStreamingConfigurationInput`](crate::input::PutVoiceConnectorStreamingConfigurationInput).
    pub fn builder() -> crate::input::put_voice_connector_streaming_configuration_input::Builder {
        crate::input::put_voice_connector_streaming_configuration_input::Builder::default()
    }
    /// Creates a new `PutVoiceConnectorStreamingConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutVoiceConnectorStreamingConfiguration {
    type Output = std::result::Result<
        crate::output::PutVoiceConnectorStreamingConfigurationOutput,
        crate::error::PutVoiceConnectorStreamingConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_voice_connector_streaming_configuration_error(
                response,
            )
        } else {
            crate::operation_deser::parse_put_voice_connector_streaming_configuration_response(
                response,
            )
        }
    }
}

/// Operation shape for `PutVoiceConnectorTermination`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_voice_connector_termination`](crate::client::Client::put_voice_connector_termination).
///
/// See [`crate::client::fluent_builders::PutVoiceConnectorTermination`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutVoiceConnectorTermination {
    _private: (),
}
impl PutVoiceConnectorTermination {
    /// Creates a new builder-style object to manufacture [`PutVoiceConnectorTerminationInput`](crate::input::PutVoiceConnectorTerminationInput).
    pub fn builder() -> crate::input::put_voice_connector_termination_input::Builder {
        crate::input::put_voice_connector_termination_input::Builder::default()
    }
    /// Creates a new `PutVoiceConnectorTermination` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutVoiceConnectorTermination {
    type Output = std::result::Result<
        crate::output::PutVoiceConnectorTerminationOutput,
        crate::error::PutVoiceConnectorTerminationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_voice_connector_termination_error(response)
        } else {
            crate::operation_deser::parse_put_voice_connector_termination_response(response)
        }
    }
}

/// Operation shape for `PutVoiceConnectorTerminationCredentials`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_voice_connector_termination_credentials`](crate::client::Client::put_voice_connector_termination_credentials).
///
/// See [`crate::client::fluent_builders::PutVoiceConnectorTerminationCredentials`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutVoiceConnectorTerminationCredentials {
    _private: (),
}
impl PutVoiceConnectorTerminationCredentials {
    /// Creates a new builder-style object to manufacture [`PutVoiceConnectorTerminationCredentialsInput`](crate::input::PutVoiceConnectorTerminationCredentialsInput).
    pub fn builder() -> crate::input::put_voice_connector_termination_credentials_input::Builder {
        crate::input::put_voice_connector_termination_credentials_input::Builder::default()
    }
    /// Creates a new `PutVoiceConnectorTerminationCredentials` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutVoiceConnectorTerminationCredentials {
    type Output = std::result::Result<
        crate::output::PutVoiceConnectorTerminationCredentialsOutput,
        crate::error::PutVoiceConnectorTerminationCredentialsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_put_voice_connector_termination_credentials_error(
                response,
            )
        } else {
            crate::operation_deser::parse_put_voice_connector_termination_credentials_response(
                response,
            )
        }
    }
}

/// Operation shape for `RestorePhoneNumber`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`restore_phone_number`](crate::client::Client::restore_phone_number).
///
/// See [`crate::client::fluent_builders::RestorePhoneNumber`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct RestorePhoneNumber {
    _private: (),
}
impl RestorePhoneNumber {
    /// Creates a new builder-style object to manufacture [`RestorePhoneNumberInput`](crate::input::RestorePhoneNumberInput).
    pub fn builder() -> crate::input::restore_phone_number_input::Builder {
        crate::input::restore_phone_number_input::Builder::default()
    }
    /// Creates a new `RestorePhoneNumber` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for RestorePhoneNumber {
    type Output = std::result::Result<
        crate::output::RestorePhoneNumberOutput,
        crate::error::RestorePhoneNumberError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_restore_phone_number_error(response)
        } else {
            crate::operation_deser::parse_restore_phone_number_response(response)
        }
    }
}

/// Operation shape for `SearchAvailablePhoneNumbers`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`search_available_phone_numbers`](crate::client::Client::search_available_phone_numbers).
///
/// See [`crate::client::fluent_builders::SearchAvailablePhoneNumbers`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct SearchAvailablePhoneNumbers {
    _private: (),
}
impl SearchAvailablePhoneNumbers {
    /// Creates a new builder-style object to manufacture [`SearchAvailablePhoneNumbersInput`](crate::input::SearchAvailablePhoneNumbersInput).
    pub fn builder() -> crate::input::search_available_phone_numbers_input::Builder {
        crate::input::search_available_phone_numbers_input::Builder::default()
    }
    /// Creates a new `SearchAvailablePhoneNumbers` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for SearchAvailablePhoneNumbers {
    type Output = std::result::Result<
        crate::output::SearchAvailablePhoneNumbersOutput,
        crate::error::SearchAvailablePhoneNumbersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_search_available_phone_numbers_error(response)
        } else {
            crate::operation_deser::parse_search_available_phone_numbers_response(response)
        }
    }
}

/// Operation shape for `UpdateGlobalSettings`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_global_settings`](crate::client::Client::update_global_settings).
///
/// See [`crate::client::fluent_builders::UpdateGlobalSettings`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateGlobalSettings {
    _private: (),
}
impl UpdateGlobalSettings {
    /// Creates a new builder-style object to manufacture [`UpdateGlobalSettingsInput`](crate::input::UpdateGlobalSettingsInput).
    pub fn builder() -> crate::input::update_global_settings_input::Builder {
        crate::input::update_global_settings_input::Builder::default()
    }
    /// Creates a new `UpdateGlobalSettings` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateGlobalSettings {
    type Output = std::result::Result<
        crate::output::UpdateGlobalSettingsOutput,
        crate::error::UpdateGlobalSettingsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_update_global_settings_error(response)
        } else {
            crate::operation_deser::parse_update_global_settings_response(response)
        }
    }
}

/// Operation shape for `UpdatePhoneNumber`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_phone_number`](crate::client::Client::update_phone_number).
///
/// See [`crate::client::fluent_builders::UpdatePhoneNumber`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdatePhoneNumber {
    _private: (),
}
impl UpdatePhoneNumber {
    /// Creates a new builder-style object to manufacture [`UpdatePhoneNumberInput`](crate::input::UpdatePhoneNumberInput).
    pub fn builder() -> crate::input::update_phone_number_input::Builder {
        crate::input::update_phone_number_input::Builder::default()
    }
    /// Creates a new `UpdatePhoneNumber` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdatePhoneNumber {
    type Output = std::result::Result<
        crate::output::UpdatePhoneNumberOutput,
        crate::error::UpdatePhoneNumberError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_phone_number_error(response)
        } else {
            crate::operation_deser::parse_update_phone_number_response(response)
        }
    }
}

/// Operation shape for `UpdatePhoneNumberSettings`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_phone_number_settings`](crate::client::Client::update_phone_number_settings).
///
/// See [`crate::client::fluent_builders::UpdatePhoneNumberSettings`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdatePhoneNumberSettings {
    _private: (),
}
impl UpdatePhoneNumberSettings {
    /// Creates a new builder-style object to manufacture [`UpdatePhoneNumberSettingsInput`](crate::input::UpdatePhoneNumberSettingsInput).
    pub fn builder() -> crate::input::update_phone_number_settings_input::Builder {
        crate::input::update_phone_number_settings_input::Builder::default()
    }
    /// Creates a new `UpdatePhoneNumberSettings` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdatePhoneNumberSettings {
    type Output = std::result::Result<
        crate::output::UpdatePhoneNumberSettingsOutput,
        crate::error::UpdatePhoneNumberSettingsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_update_phone_number_settings_error(response)
        } else {
            crate::operation_deser::parse_update_phone_number_settings_response(response)
        }
    }
}

/// Operation shape for `UpdateProxySession`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_proxy_session`](crate::client::Client::update_proxy_session).
///
/// See [`crate::client::fluent_builders::UpdateProxySession`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateProxySession {
    _private: (),
}
impl UpdateProxySession {
    /// Creates a new builder-style object to manufacture [`UpdateProxySessionInput`](crate::input::UpdateProxySessionInput).
    pub fn builder() -> crate::input::update_proxy_session_input::Builder {
        crate::input::update_proxy_session_input::Builder::default()
    }
    /// Creates a new `UpdateProxySession` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateProxySession {
    type Output = std::result::Result<
        crate::output::UpdateProxySessionOutput,
        crate::error::UpdateProxySessionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_update_proxy_session_error(response)
        } else {
            crate::operation_deser::parse_update_proxy_session_response(response)
        }
    }
}

/// Operation shape for `UpdateSipMediaApplication`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_sip_media_application`](crate::client::Client::update_sip_media_application).
///
/// See [`crate::client::fluent_builders::UpdateSipMediaApplication`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateSipMediaApplication {
    _private: (),
}
impl UpdateSipMediaApplication {
    /// Creates a new builder-style object to manufacture [`UpdateSipMediaApplicationInput`](crate::input::UpdateSipMediaApplicationInput).
    pub fn builder() -> crate::input::update_sip_media_application_input::Builder {
        crate::input::update_sip_media_application_input::Builder::default()
    }
    /// Creates a new `UpdateSipMediaApplication` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateSipMediaApplication {
    type Output = std::result::Result<
        crate::output::UpdateSipMediaApplicationOutput,
        crate::error::UpdateSipMediaApplicationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_sip_media_application_error(response)
        } else {
            crate::operation_deser::parse_update_sip_media_application_response(response)
        }
    }
}

/// Operation shape for `UpdateSipMediaApplicationCall`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_sip_media_application_call`](crate::client::Client::update_sip_media_application_call).
///
/// See [`crate::client::fluent_builders::UpdateSipMediaApplicationCall`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateSipMediaApplicationCall {
    _private: (),
}
impl UpdateSipMediaApplicationCall {
    /// Creates a new builder-style object to manufacture [`UpdateSipMediaApplicationCallInput`](crate::input::UpdateSipMediaApplicationCallInput).
    pub fn builder() -> crate::input::update_sip_media_application_call_input::Builder {
        crate::input::update_sip_media_application_call_input::Builder::default()
    }
    /// Creates a new `UpdateSipMediaApplicationCall` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateSipMediaApplicationCall {
    type Output = std::result::Result<
        crate::output::UpdateSipMediaApplicationCallOutput,
        crate::error::UpdateSipMediaApplicationCallError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_update_sip_media_application_call_error(response)
        } else {
            crate::operation_deser::parse_update_sip_media_application_call_response(response)
        }
    }
}

/// Operation shape for `UpdateSipRule`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_sip_rule`](crate::client::Client::update_sip_rule).
///
/// See [`crate::client::fluent_builders::UpdateSipRule`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateSipRule {
    _private: (),
}
impl UpdateSipRule {
    /// Creates a new builder-style object to manufacture [`UpdateSipRuleInput`](crate::input::UpdateSipRuleInput).
    pub fn builder() -> crate::input::update_sip_rule_input::Builder {
        crate::input::update_sip_rule_input::Builder::default()
    }
    /// Creates a new `UpdateSipRule` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateSipRule {
    type Output =
        std::result::Result<crate::output::UpdateSipRuleOutput, crate::error::UpdateSipRuleError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_update_sip_rule_error(response)
        } else {
            crate::operation_deser::parse_update_sip_rule_response(response)
        }
    }
}

/// Operation shape for `UpdateVoiceConnector`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_voice_connector`](crate::client::Client::update_voice_connector).
///
/// See [`crate::client::fluent_builders::UpdateVoiceConnector`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateVoiceConnector {
    _private: (),
}
impl UpdateVoiceConnector {
    /// Creates a new builder-style object to manufacture [`UpdateVoiceConnectorInput`](crate::input::UpdateVoiceConnectorInput).
    pub fn builder() -> crate::input::update_voice_connector_input::Builder {
        crate::input::update_voice_connector_input::Builder::default()
    }
    /// Creates a new `UpdateVoiceConnector` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateVoiceConnector {
    type Output = std::result::Result<
        crate::output::UpdateVoiceConnectorOutput,
        crate::error::UpdateVoiceConnectorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_voice_connector_error(response)
        } else {
            crate::operation_deser::parse_update_voice_connector_response(response)
        }
    }
}

/// Operation shape for `UpdateVoiceConnectorGroup`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_voice_connector_group`](crate::client::Client::update_voice_connector_group).
///
/// See [`crate::client::fluent_builders::UpdateVoiceConnectorGroup`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateVoiceConnectorGroup {
    _private: (),
}
impl UpdateVoiceConnectorGroup {
    /// Creates a new builder-style object to manufacture [`UpdateVoiceConnectorGroupInput`](crate::input::UpdateVoiceConnectorGroupInput).
    pub fn builder() -> crate::input::update_voice_connector_group_input::Builder {
        crate::input::update_voice_connector_group_input::Builder::default()
    }
    /// Creates a new `UpdateVoiceConnectorGroup` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateVoiceConnectorGroup {
    type Output = std::result::Result<
        crate::output::UpdateVoiceConnectorGroupOutput,
        crate::error::UpdateVoiceConnectorGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_update_voice_connector_group_error(response)
        } else {
            crate::operation_deser::parse_update_voice_connector_group_response(response)
        }
    }
}

/// Operation shape for `ValidateE911Address`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`validate_e911_address`](crate::client::Client::validate_e911_address).
///
/// See [`crate::client::fluent_builders::ValidateE911Address`] for more details about the operation.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ValidateE911Address {
    _private: (),
}
impl ValidateE911Address {
    /// Creates a new builder-style object to manufacture [`ValidateE911AddressInput`](crate::input::ValidateE911AddressInput).
    pub fn builder() -> crate::input::validate_e911_address_input::Builder {
        crate::input::validate_e911_address_input::Builder::default()
    }
    /// Creates a new `ValidateE911Address` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ValidateE911Address {
    type Output = std::result::Result<
        crate::output::ValidateE911AddressOutput,
        crate::error::ValidateE911AddressError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_validate_e911_address_error(response)
        } else {
            crate::operation_deser::parse_validate_e911_address_response(response)
        }
    }
}

/// Operation customization and supporting types
pub mod customize;
