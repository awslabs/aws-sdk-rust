// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_phone_number_orders_output_next_token(
    input: &crate::output::ListPhoneNumberOrdersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_phone_numbers_output_next_token(
    input: &crate::output::ListPhoneNumbersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_proxy_sessions_output_next_token(
    input: &crate::output::ListProxySessionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_sip_media_applications_output_next_token(
    input: &crate::output::ListSipMediaApplicationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_sip_rules_output_next_token(
    input: &crate::output::ListSipRulesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_voice_connector_groups_output_next_token(
    input: &crate::output::ListVoiceConnectorGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_voice_connectors_output_next_token(
    input: &crate::output::ListVoiceConnectorsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_search_available_phone_numbers_output_next_token(
    input: &crate::output::SearchAvailablePhoneNumbersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_sip_media_applications_output_sip_media_applications(
    input: crate::output::ListSipMediaApplicationsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::SipMediaApplication>> {
    let input = match input.sip_media_applications {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_sip_rules_output_sip_rules(
    input: crate::output::ListSipRulesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::SipRule>> {
    let input = match input.sip_rules {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
