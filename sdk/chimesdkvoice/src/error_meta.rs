// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    #[allow(missing_docs)] // documentation missing in model
    AccessDeniedException(crate::error::AccessDeniedException),
    #[allow(missing_docs)] // documentation missing in model
    BadRequestException(crate::error::BadRequestException),
    #[allow(missing_docs)] // documentation missing in model
    ConflictException(crate::error::ConflictException),
    #[allow(missing_docs)] // documentation missing in model
    ForbiddenException(crate::error::ForbiddenException),
    #[allow(missing_docs)] // documentation missing in model
    NotFoundException(crate::error::NotFoundException),
    #[allow(missing_docs)] // documentation missing in model
    ResourceLimitExceededException(crate::error::ResourceLimitExceededException),
    #[allow(missing_docs)] // documentation missing in model
    ServiceFailureException(crate::error::ServiceFailureException),
    #[allow(missing_docs)] // documentation missing in model
    ServiceUnavailableException(crate::error::ServiceUnavailableException),
    #[allow(missing_docs)] // documentation missing in model
    ThrottledClientException(crate::error::ThrottledClientException),
    #[allow(missing_docs)] // documentation missing in model
    UnauthorizedClientException(crate::error::UnauthorizedClientException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::BadRequestException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::ForbiddenException(inner) => inner.fmt(f),
            Error::NotFoundException(inner) => inner.fmt(f),
            Error::ResourceLimitExceededException(inner) => inner.fmt(f),
            Error::ServiceFailureException(inner) => inner.fmt(f),
            Error::ServiceUnavailableException(inner) => inner.fmt(f),
            Error::ThrottledClientException(inner) => inner.fmt(f),
            Error::UnauthorizedClientException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::AssociatePhoneNumbersWithVoiceConnectorError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::AssociatePhoneNumbersWithVoiceConnectorError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociatePhoneNumbersWithVoiceConnectorError> for Error {
    fn from(err: crate::error::AssociatePhoneNumbersWithVoiceConnectorError) -> Self {
        match err {
            crate::error::AssociatePhoneNumbersWithVoiceConnectorError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupError> for Error {
    fn from(err: crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupError) -> Self {
        match err {
            crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchDeletePhoneNumberError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchDeletePhoneNumberError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchDeletePhoneNumberError> for Error {
    fn from(err: crate::error::BatchDeletePhoneNumberError) -> Self {
        match err {
            crate::error::BatchDeletePhoneNumberError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::BatchDeletePhoneNumberError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::BatchDeletePhoneNumberError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::BatchDeletePhoneNumberError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::BatchDeletePhoneNumberError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::BatchDeletePhoneNumberError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::BatchDeletePhoneNumberError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::BatchDeletePhoneNumberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchUpdatePhoneNumberError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchUpdatePhoneNumberError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchUpdatePhoneNumberError> for Error {
    fn from(err: crate::error::BatchUpdatePhoneNumberError) -> Self {
        match err {
            crate::error::BatchUpdatePhoneNumberError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::BatchUpdatePhoneNumberError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::BatchUpdatePhoneNumberError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::BatchUpdatePhoneNumberError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::BatchUpdatePhoneNumberError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::BatchUpdatePhoneNumberError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::BatchUpdatePhoneNumberError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::BatchUpdatePhoneNumberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreatePhoneNumberOrderError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreatePhoneNumberOrderError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreatePhoneNumberOrderError> for Error {
    fn from(err: crate::error::CreatePhoneNumberOrderError) -> Self {
        match err {
            crate::error::CreatePhoneNumberOrderError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreatePhoneNumberOrderError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreatePhoneNumberOrderError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreatePhoneNumberOrderError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::CreatePhoneNumberOrderError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreatePhoneNumberOrderError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreatePhoneNumberOrderError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::CreatePhoneNumberOrderError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::CreatePhoneNumberOrderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateProxySessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateProxySessionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateProxySessionError> for Error {
    fn from(err: crate::error::CreateProxySessionError) -> Self {
        match err {
            crate::error::CreateProxySessionError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateProxySessionError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateProxySessionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateProxySessionError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateProxySessionError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateProxySessionError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::CreateProxySessionError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::CreateProxySessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateSipMediaApplicationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateSipMediaApplicationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateSipMediaApplicationError> for Error {
    fn from(err: crate::error::CreateSipMediaApplicationError) -> Self {
        match err {
            crate::error::CreateSipMediaApplicationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateSipMediaApplicationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateSipMediaApplicationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateSipMediaApplicationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateSipMediaApplicationError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::CreateSipMediaApplicationError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateSipMediaApplicationError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateSipMediaApplicationError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::CreateSipMediaApplicationError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::CreateSipMediaApplicationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateSipMediaApplicationCallError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateSipMediaApplicationCallError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateSipMediaApplicationCallError> for Error {
    fn from(err: crate::error::CreateSipMediaApplicationCallError) -> Self {
        match err {
            crate::error::CreateSipMediaApplicationCallError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateSipMediaApplicationCallError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateSipMediaApplicationCallError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateSipMediaApplicationCallError::ResourceLimitExceededException(
                inner,
            ) => Error::ResourceLimitExceededException(inner),
            crate::error::CreateSipMediaApplicationCallError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateSipMediaApplicationCallError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::error::CreateSipMediaApplicationCallError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::CreateSipMediaApplicationCallError::UnauthorizedClientException(
                inner,
            ) => Error::UnauthorizedClientException(inner),
            crate::error::CreateSipMediaApplicationCallError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateSipRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateSipRuleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateSipRuleError> for Error {
    fn from(err: crate::error::CreateSipRuleError) -> Self {
        match err {
            crate::error::CreateSipRuleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateSipRuleError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateSipRuleError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateSipRuleError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateSipRuleError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::CreateSipRuleError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateSipRuleError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateSipRuleError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::CreateSipRuleError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::CreateSipRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateVoiceConnectorError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateVoiceConnectorError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateVoiceConnectorError> for Error {
    fn from(err: crate::error::CreateVoiceConnectorError) -> Self {
        match err {
            crate::error::CreateVoiceConnectorError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateVoiceConnectorError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateVoiceConnectorError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateVoiceConnectorError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::CreateVoiceConnectorError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateVoiceConnectorError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateVoiceConnectorError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::CreateVoiceConnectorError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::CreateVoiceConnectorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateVoiceConnectorGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateVoiceConnectorGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateVoiceConnectorGroupError> for Error {
    fn from(err: crate::error::CreateVoiceConnectorGroupError) -> Self {
        match err {
            crate::error::CreateVoiceConnectorGroupError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateVoiceConnectorGroupError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateVoiceConnectorGroupError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateVoiceConnectorGroupError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::CreateVoiceConnectorGroupError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateVoiceConnectorGroupError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateVoiceConnectorGroupError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::CreateVoiceConnectorGroupError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::CreateVoiceConnectorGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeletePhoneNumberError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeletePhoneNumberError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeletePhoneNumberError> for Error {
    fn from(err: crate::error::DeletePhoneNumberError) -> Self {
        match err {
            crate::error::DeletePhoneNumberError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeletePhoneNumberError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeletePhoneNumberError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeletePhoneNumberError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeletePhoneNumberError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeletePhoneNumberError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DeletePhoneNumberError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DeletePhoneNumberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteProxySessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteProxySessionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteProxySessionError> for Error {
    fn from(err: crate::error::DeleteProxySessionError) -> Self {
        match err {
            crate::error::DeleteProxySessionError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteProxySessionError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteProxySessionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteProxySessionError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteProxySessionError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteProxySessionError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DeleteProxySessionError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DeleteProxySessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteSipMediaApplicationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteSipMediaApplicationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteSipMediaApplicationError> for Error {
    fn from(err: crate::error::DeleteSipMediaApplicationError) -> Self {
        match err {
            crate::error::DeleteSipMediaApplicationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteSipMediaApplicationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteSipMediaApplicationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteSipMediaApplicationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteSipMediaApplicationError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteSipMediaApplicationError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteSipMediaApplicationError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DeleteSipMediaApplicationError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DeleteSipMediaApplicationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteSipRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteSipRuleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteSipRuleError> for Error {
    fn from(err: crate::error::DeleteSipRuleError) -> Self {
        match err {
            crate::error::DeleteSipRuleError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteSipRuleError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteSipRuleError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteSipRuleError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteSipRuleError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteSipRuleError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteSipRuleError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DeleteSipRuleError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DeleteSipRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteVoiceConnectorError> for Error {
    fn from(err: crate::error::DeleteVoiceConnectorError) -> Self {
        match err {
            crate::error::DeleteVoiceConnectorError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteVoiceConnectorError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteVoiceConnectorError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteVoiceConnectorError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteVoiceConnectorError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteVoiceConnectorError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteVoiceConnectorError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DeleteVoiceConnectorError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DeleteVoiceConnectorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DeleteVoiceConnectorEmergencyCallingConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteVoiceConnectorEmergencyCallingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteVoiceConnectorEmergencyCallingConfigurationError> for Error {
    fn from(err: crate::error::DeleteVoiceConnectorEmergencyCallingConfigurationError) -> Self {
        match err {
            crate::error::DeleteVoiceConnectorEmergencyCallingConfigurationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DeleteVoiceConnectorEmergencyCallingConfigurationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::DeleteVoiceConnectorEmergencyCallingConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::DeleteVoiceConnectorEmergencyCallingConfigurationError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::DeleteVoiceConnectorEmergencyCallingConfigurationError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::DeleteVoiceConnectorEmergencyCallingConfigurationError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::DeleteVoiceConnectorEmergencyCallingConfigurationError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::DeleteVoiceConnectorEmergencyCallingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteVoiceConnectorGroupError> for Error {
    fn from(err: crate::error::DeleteVoiceConnectorGroupError) -> Self {
        match err {
            crate::error::DeleteVoiceConnectorGroupError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteVoiceConnectorGroupError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteVoiceConnectorGroupError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteVoiceConnectorGroupError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteVoiceConnectorGroupError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteVoiceConnectorGroupError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteVoiceConnectorGroupError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DeleteVoiceConnectorGroupError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DeleteVoiceConnectorGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorOriginationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteVoiceConnectorOriginationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteVoiceConnectorOriginationError> for Error {
    fn from(err: crate::error::DeleteVoiceConnectorOriginationError) -> Self {
        match err {
            crate::error::DeleteVoiceConnectorOriginationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteVoiceConnectorOriginationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteVoiceConnectorOriginationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteVoiceConnectorOriginationError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteVoiceConnectorOriginationError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::error::DeleteVoiceConnectorOriginationError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DeleteVoiceConnectorOriginationError::UnauthorizedClientException(
                inner,
            ) => Error::UnauthorizedClientException(inner),
            crate::error::DeleteVoiceConnectorOriginationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorProxyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorProxyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteVoiceConnectorProxyError> for Error {
    fn from(err: crate::error::DeleteVoiceConnectorProxyError) -> Self {
        match err {
            crate::error::DeleteVoiceConnectorProxyError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteVoiceConnectorProxyError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteVoiceConnectorProxyError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteVoiceConnectorProxyError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteVoiceConnectorProxyError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteVoiceConnectorProxyError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DeleteVoiceConnectorProxyError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DeleteVoiceConnectorProxyError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DeleteVoiceConnectorStreamingConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteVoiceConnectorStreamingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteVoiceConnectorStreamingConfigurationError> for Error {
    fn from(err: crate::error::DeleteVoiceConnectorStreamingConfigurationError) -> Self {
        match err {
            crate::error::DeleteVoiceConnectorStreamingConfigurationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DeleteVoiceConnectorStreamingConfigurationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::DeleteVoiceConnectorStreamingConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::DeleteVoiceConnectorStreamingConfigurationError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::DeleteVoiceConnectorStreamingConfigurationError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::DeleteVoiceConnectorStreamingConfigurationError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::DeleteVoiceConnectorStreamingConfigurationError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::DeleteVoiceConnectorStreamingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorTerminationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteVoiceConnectorTerminationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteVoiceConnectorTerminationError> for Error {
    fn from(err: crate::error::DeleteVoiceConnectorTerminationError) -> Self {
        match err {
            crate::error::DeleteVoiceConnectorTerminationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteVoiceConnectorTerminationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteVoiceConnectorTerminationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteVoiceConnectorTerminationError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteVoiceConnectorTerminationError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::error::DeleteVoiceConnectorTerminationError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DeleteVoiceConnectorTerminationError::UnauthorizedClientException(
                inner,
            ) => Error::UnauthorizedClientException(inner),
            crate::error::DeleteVoiceConnectorTerminationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DeleteVoiceConnectorTerminationCredentialsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteVoiceConnectorTerminationCredentialsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteVoiceConnectorTerminationCredentialsError> for Error {
    fn from(err: crate::error::DeleteVoiceConnectorTerminationCredentialsError) -> Self {
        match err {
            crate::error::DeleteVoiceConnectorTerminationCredentialsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DeleteVoiceConnectorTerminationCredentialsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::DeleteVoiceConnectorTerminationCredentialsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::DeleteVoiceConnectorTerminationCredentialsError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::DeleteVoiceConnectorTerminationCredentialsError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::DeleteVoiceConnectorTerminationCredentialsError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::DeleteVoiceConnectorTerminationCredentialsError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::DeleteVoiceConnectorTerminationCredentialsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociatePhoneNumbersFromVoiceConnectorError> for Error {
    fn from(err: crate::error::DisassociatePhoneNumbersFromVoiceConnectorError) -> Self {
        match err {
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociatePhoneNumbersFromVoiceConnectorGroupError> for Error {
    fn from(err: crate::error::DisassociatePhoneNumbersFromVoiceConnectorGroupError) -> Self {
        match err {
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorGroupError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorGroupError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorGroupError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorGroupError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorGroupError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorGroupError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorGroupError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetGlobalSettingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetGlobalSettingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetGlobalSettingsError> for Error {
    fn from(err: crate::error::GetGlobalSettingsError) -> Self {
        match err {
            crate::error::GetGlobalSettingsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetGlobalSettingsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetGlobalSettingsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetGlobalSettingsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetGlobalSettingsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetGlobalSettingsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::GetGlobalSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetPhoneNumberError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetPhoneNumberError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetPhoneNumberError> for Error {
    fn from(err: crate::error::GetPhoneNumberError) -> Self {
        match err {
            crate::error::GetPhoneNumberError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetPhoneNumberError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetPhoneNumberError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetPhoneNumberError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetPhoneNumberError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetPhoneNumberError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetPhoneNumberError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::GetPhoneNumberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetPhoneNumberOrderError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetPhoneNumberOrderError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetPhoneNumberOrderError> for Error {
    fn from(err: crate::error::GetPhoneNumberOrderError) -> Self {
        match err {
            crate::error::GetPhoneNumberOrderError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetPhoneNumberOrderError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetPhoneNumberOrderError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetPhoneNumberOrderError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetPhoneNumberOrderError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetPhoneNumberOrderError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetPhoneNumberOrderError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::GetPhoneNumberOrderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetPhoneNumberSettingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetPhoneNumberSettingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetPhoneNumberSettingsError> for Error {
    fn from(err: crate::error::GetPhoneNumberSettingsError) -> Self {
        match err {
            crate::error::GetPhoneNumberSettingsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetPhoneNumberSettingsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetPhoneNumberSettingsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetPhoneNumberSettingsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetPhoneNumberSettingsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetPhoneNumberSettingsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::GetPhoneNumberSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetProxySessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetProxySessionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetProxySessionError> for Error {
    fn from(err: crate::error::GetProxySessionError) -> Self {
        match err {
            crate::error::GetProxySessionError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetProxySessionError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetProxySessionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetProxySessionError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetProxySessionError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetProxySessionError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetProxySessionError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::GetProxySessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSipMediaApplicationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetSipMediaApplicationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSipMediaApplicationError> for Error {
    fn from(err: crate::error::GetSipMediaApplicationError) -> Self {
        match err {
            crate::error::GetSipMediaApplicationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetSipMediaApplicationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetSipMediaApplicationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetSipMediaApplicationError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetSipMediaApplicationError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetSipMediaApplicationError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetSipMediaApplicationError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::GetSipMediaApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::GetSipMediaApplicationAlexaSkillConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetSipMediaApplicationAlexaSkillConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSipMediaApplicationAlexaSkillConfigurationError> for Error {
    fn from(err: crate::error::GetSipMediaApplicationAlexaSkillConfigurationError) -> Self {
        match err {
            crate::error::GetSipMediaApplicationAlexaSkillConfigurationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetSipMediaApplicationAlexaSkillConfigurationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::GetSipMediaApplicationAlexaSkillConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetSipMediaApplicationAlexaSkillConfigurationError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::GetSipMediaApplicationAlexaSkillConfigurationError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::GetSipMediaApplicationAlexaSkillConfigurationError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::GetSipMediaApplicationAlexaSkillConfigurationError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::GetSipMediaApplicationAlexaSkillConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::GetSipMediaApplicationLoggingConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetSipMediaApplicationLoggingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSipMediaApplicationLoggingConfigurationError> for Error {
    fn from(err: crate::error::GetSipMediaApplicationLoggingConfigurationError) -> Self {
        match err {
            crate::error::GetSipMediaApplicationLoggingConfigurationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetSipMediaApplicationLoggingConfigurationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::GetSipMediaApplicationLoggingConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetSipMediaApplicationLoggingConfigurationError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::GetSipMediaApplicationLoggingConfigurationError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::GetSipMediaApplicationLoggingConfigurationError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::GetSipMediaApplicationLoggingConfigurationError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::GetSipMediaApplicationLoggingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSipRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetSipRuleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSipRuleError> for Error {
    fn from(err: crate::error::GetSipRuleError) -> Self {
        match err {
            crate::error::GetSipRuleError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetSipRuleError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetSipRuleError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetSipRuleError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetSipRuleError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetSipRuleError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetSipRuleError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::GetSipRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetVoiceConnectorError> for Error {
    fn from(err: crate::error::GetVoiceConnectorError) -> Self {
        match err {
            crate::error::GetVoiceConnectorError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetVoiceConnectorError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetVoiceConnectorError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetVoiceConnectorError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetVoiceConnectorError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetVoiceConnectorError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetVoiceConnectorError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::GetVoiceConnectorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::GetVoiceConnectorEmergencyCallingConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetVoiceConnectorEmergencyCallingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetVoiceConnectorEmergencyCallingConfigurationError> for Error {
    fn from(err: crate::error::GetVoiceConnectorEmergencyCallingConfigurationError) -> Self {
        match err {
            crate::error::GetVoiceConnectorEmergencyCallingConfigurationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetVoiceConnectorEmergencyCallingConfigurationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::GetVoiceConnectorEmergencyCallingConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetVoiceConnectorEmergencyCallingConfigurationError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::GetVoiceConnectorEmergencyCallingConfigurationError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::GetVoiceConnectorEmergencyCallingConfigurationError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::GetVoiceConnectorEmergencyCallingConfigurationError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::GetVoiceConnectorEmergencyCallingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetVoiceConnectorGroupError> for Error {
    fn from(err: crate::error::GetVoiceConnectorGroupError) -> Self {
        match err {
            crate::error::GetVoiceConnectorGroupError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetVoiceConnectorGroupError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetVoiceConnectorGroupError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetVoiceConnectorGroupError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetVoiceConnectorGroupError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetVoiceConnectorGroupError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetVoiceConnectorGroupError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::GetVoiceConnectorGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::GetVoiceConnectorLoggingConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetVoiceConnectorLoggingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetVoiceConnectorLoggingConfigurationError> for Error {
    fn from(err: crate::error::GetVoiceConnectorLoggingConfigurationError) -> Self {
        match err {
            crate::error::GetVoiceConnectorLoggingConfigurationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetVoiceConnectorLoggingConfigurationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::GetVoiceConnectorLoggingConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetVoiceConnectorLoggingConfigurationError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::GetVoiceConnectorLoggingConfigurationError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::GetVoiceConnectorLoggingConfigurationError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::GetVoiceConnectorLoggingConfigurationError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::GetVoiceConnectorLoggingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorOriginationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorOriginationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetVoiceConnectorOriginationError> for Error {
    fn from(err: crate::error::GetVoiceConnectorOriginationError) -> Self {
        match err {
            crate::error::GetVoiceConnectorOriginationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetVoiceConnectorOriginationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetVoiceConnectorOriginationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetVoiceConnectorOriginationError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetVoiceConnectorOriginationError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetVoiceConnectorOriginationError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetVoiceConnectorOriginationError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::GetVoiceConnectorOriginationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorProxyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorProxyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetVoiceConnectorProxyError> for Error {
    fn from(err: crate::error::GetVoiceConnectorProxyError) -> Self {
        match err {
            crate::error::GetVoiceConnectorProxyError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetVoiceConnectorProxyError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetVoiceConnectorProxyError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetVoiceConnectorProxyError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetVoiceConnectorProxyError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetVoiceConnectorProxyError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetVoiceConnectorProxyError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::GetVoiceConnectorProxyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::GetVoiceConnectorStreamingConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetVoiceConnectorStreamingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetVoiceConnectorStreamingConfigurationError> for Error {
    fn from(err: crate::error::GetVoiceConnectorStreamingConfigurationError) -> Self {
        match err {
            crate::error::GetVoiceConnectorStreamingConfigurationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetVoiceConnectorStreamingConfigurationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::GetVoiceConnectorStreamingConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetVoiceConnectorStreamingConfigurationError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::GetVoiceConnectorStreamingConfigurationError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::GetVoiceConnectorStreamingConfigurationError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::GetVoiceConnectorStreamingConfigurationError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::GetVoiceConnectorStreamingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorTerminationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorTerminationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetVoiceConnectorTerminationError> for Error {
    fn from(err: crate::error::GetVoiceConnectorTerminationError) -> Self {
        match err {
            crate::error::GetVoiceConnectorTerminationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetVoiceConnectorTerminationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetVoiceConnectorTerminationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetVoiceConnectorTerminationError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetVoiceConnectorTerminationError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetVoiceConnectorTerminationError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetVoiceConnectorTerminationError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::GetVoiceConnectorTerminationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorTerminationHealthError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetVoiceConnectorTerminationHealthError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetVoiceConnectorTerminationHealthError> for Error {
    fn from(err: crate::error::GetVoiceConnectorTerminationHealthError) -> Self {
        match err {
            crate::error::GetVoiceConnectorTerminationHealthError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetVoiceConnectorTerminationHealthError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetVoiceConnectorTerminationHealthError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetVoiceConnectorTerminationHealthError::ServiceFailureException(
                inner,
            ) => Error::ServiceFailureException(inner),
            crate::error::GetVoiceConnectorTerminationHealthError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::error::GetVoiceConnectorTerminationHealthError::ThrottledClientException(
                inner,
            ) => Error::ThrottledClientException(inner),
            crate::error::GetVoiceConnectorTerminationHealthError::UnauthorizedClientException(
                inner,
            ) => Error::UnauthorizedClientException(inner),
            crate::error::GetVoiceConnectorTerminationHealthError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::ListAvailableVoiceConnectorRegionsError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListAvailableVoiceConnectorRegionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAvailableVoiceConnectorRegionsError> for Error {
    fn from(err: crate::error::ListAvailableVoiceConnectorRegionsError) -> Self {
        match err {
            crate::error::ListAvailableVoiceConnectorRegionsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListAvailableVoiceConnectorRegionsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListAvailableVoiceConnectorRegionsError::ServiceFailureException(
                inner,
            ) => Error::ServiceFailureException(inner),
            crate::error::ListAvailableVoiceConnectorRegionsError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::error::ListAvailableVoiceConnectorRegionsError::ThrottledClientException(
                inner,
            ) => Error::ThrottledClientException(inner),
            crate::error::ListAvailableVoiceConnectorRegionsError::UnauthorizedClientException(
                inner,
            ) => Error::UnauthorizedClientException(inner),
            crate::error::ListAvailableVoiceConnectorRegionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListPhoneNumberOrdersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListPhoneNumberOrdersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListPhoneNumberOrdersError> for Error {
    fn from(err: crate::error::ListPhoneNumberOrdersError) -> Self {
        match err {
            crate::error::ListPhoneNumberOrdersError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListPhoneNumberOrdersError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListPhoneNumberOrdersError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListPhoneNumberOrdersError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListPhoneNumberOrdersError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListPhoneNumberOrdersError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListPhoneNumberOrdersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListPhoneNumbersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListPhoneNumbersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListPhoneNumbersError> for Error {
    fn from(err: crate::error::ListPhoneNumbersError) -> Self {
        match err {
            crate::error::ListPhoneNumbersError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListPhoneNumbersError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListPhoneNumbersError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListPhoneNumbersError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListPhoneNumbersError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListPhoneNumbersError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListPhoneNumbersError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListPhoneNumbersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListProxySessionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListProxySessionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListProxySessionsError> for Error {
    fn from(err: crate::error::ListProxySessionsError) -> Self {
        match err {
            crate::error::ListProxySessionsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListProxySessionsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListProxySessionsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListProxySessionsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListProxySessionsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListProxySessionsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListProxySessionsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListProxySessionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListSipMediaApplicationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListSipMediaApplicationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListSipMediaApplicationsError> for Error {
    fn from(err: crate::error::ListSipMediaApplicationsError) -> Self {
        match err {
            crate::error::ListSipMediaApplicationsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListSipMediaApplicationsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListSipMediaApplicationsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListSipMediaApplicationsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListSipMediaApplicationsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListSipMediaApplicationsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListSipMediaApplicationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListSipRulesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListSipRulesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListSipRulesError> for Error {
    fn from(err: crate::error::ListSipRulesError) -> Self {
        match err {
            crate::error::ListSipRulesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListSipRulesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListSipRulesError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListSipRulesError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListSipRulesError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListSipRulesError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListSipRulesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ListSupportedPhoneNumberCountriesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListSupportedPhoneNumberCountriesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListSupportedPhoneNumberCountriesError> for Error {
    fn from(err: crate::error::ListSupportedPhoneNumberCountriesError) -> Self {
        match err {
            crate::error::ListSupportedPhoneNumberCountriesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListSupportedPhoneNumberCountriesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListSupportedPhoneNumberCountriesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListSupportedPhoneNumberCountriesError::ServiceFailureException(
                inner,
            ) => Error::ServiceFailureException(inner),
            crate::error::ListSupportedPhoneNumberCountriesError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::error::ListSupportedPhoneNumberCountriesError::ThrottledClientException(
                inner,
            ) => Error::ThrottledClientException(inner),
            crate::error::ListSupportedPhoneNumberCountriesError::UnauthorizedClientException(
                inner,
            ) => Error::UnauthorizedClientException(inner),
            crate::error::ListSupportedPhoneNumberCountriesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListVoiceConnectorGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListVoiceConnectorGroupsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListVoiceConnectorGroupsError> for Error {
    fn from(err: crate::error::ListVoiceConnectorGroupsError) -> Self {
        match err {
            crate::error::ListVoiceConnectorGroupsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListVoiceConnectorGroupsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListVoiceConnectorGroupsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListVoiceConnectorGroupsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListVoiceConnectorGroupsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListVoiceConnectorGroupsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListVoiceConnectorGroupsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListVoiceConnectorsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListVoiceConnectorsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListVoiceConnectorsError> for Error {
    fn from(err: crate::error::ListVoiceConnectorsError) -> Self {
        match err {
            crate::error::ListVoiceConnectorsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListVoiceConnectorsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListVoiceConnectorsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListVoiceConnectorsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListVoiceConnectorsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListVoiceConnectorsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListVoiceConnectorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::ListVoiceConnectorTerminationCredentialsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListVoiceConnectorTerminationCredentialsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListVoiceConnectorTerminationCredentialsError> for Error {
    fn from(err: crate::error::ListVoiceConnectorTerminationCredentialsError) -> Self {
        match err {
            crate::error::ListVoiceConnectorTerminationCredentialsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::ListVoiceConnectorTerminationCredentialsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::ListVoiceConnectorTerminationCredentialsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::ListVoiceConnectorTerminationCredentialsError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::ListVoiceConnectorTerminationCredentialsError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::ListVoiceConnectorTerminationCredentialsError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::ListVoiceConnectorTerminationCredentialsError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::ListVoiceConnectorTerminationCredentialsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::PutSipMediaApplicationAlexaSkillConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::PutSipMediaApplicationAlexaSkillConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutSipMediaApplicationAlexaSkillConfigurationError> for Error {
    fn from(err: crate::error::PutSipMediaApplicationAlexaSkillConfigurationError) -> Self {
        match err {
            crate::error::PutSipMediaApplicationAlexaSkillConfigurationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::PutSipMediaApplicationAlexaSkillConfigurationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::PutSipMediaApplicationAlexaSkillConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::PutSipMediaApplicationAlexaSkillConfigurationError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::PutSipMediaApplicationAlexaSkillConfigurationError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::PutSipMediaApplicationAlexaSkillConfigurationError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::PutSipMediaApplicationAlexaSkillConfigurationError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::PutSipMediaApplicationAlexaSkillConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::PutSipMediaApplicationLoggingConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::PutSipMediaApplicationLoggingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutSipMediaApplicationLoggingConfigurationError> for Error {
    fn from(err: crate::error::PutSipMediaApplicationLoggingConfigurationError) -> Self {
        match err {
            crate::error::PutSipMediaApplicationLoggingConfigurationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::PutSipMediaApplicationLoggingConfigurationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::PutSipMediaApplicationLoggingConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::PutSipMediaApplicationLoggingConfigurationError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::PutSipMediaApplicationLoggingConfigurationError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::PutSipMediaApplicationLoggingConfigurationError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::PutSipMediaApplicationLoggingConfigurationError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::PutSipMediaApplicationLoggingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::PutVoiceConnectorEmergencyCallingConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::PutVoiceConnectorEmergencyCallingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutVoiceConnectorEmergencyCallingConfigurationError> for Error {
    fn from(err: crate::error::PutVoiceConnectorEmergencyCallingConfigurationError) -> Self {
        match err {
            crate::error::PutVoiceConnectorEmergencyCallingConfigurationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::PutVoiceConnectorEmergencyCallingConfigurationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::PutVoiceConnectorEmergencyCallingConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::PutVoiceConnectorEmergencyCallingConfigurationError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::PutVoiceConnectorEmergencyCallingConfigurationError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::PutVoiceConnectorEmergencyCallingConfigurationError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::PutVoiceConnectorEmergencyCallingConfigurationError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::PutVoiceConnectorEmergencyCallingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::PutVoiceConnectorLoggingConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::PutVoiceConnectorLoggingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutVoiceConnectorLoggingConfigurationError> for Error {
    fn from(err: crate::error::PutVoiceConnectorLoggingConfigurationError) -> Self {
        match err {
            crate::error::PutVoiceConnectorLoggingConfigurationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::PutVoiceConnectorLoggingConfigurationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::PutVoiceConnectorLoggingConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::PutVoiceConnectorLoggingConfigurationError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::PutVoiceConnectorLoggingConfigurationError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::PutVoiceConnectorLoggingConfigurationError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::PutVoiceConnectorLoggingConfigurationError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::PutVoiceConnectorLoggingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutVoiceConnectorOriginationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutVoiceConnectorOriginationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutVoiceConnectorOriginationError> for Error {
    fn from(err: crate::error::PutVoiceConnectorOriginationError) -> Self {
        match err {
            crate::error::PutVoiceConnectorOriginationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::PutVoiceConnectorOriginationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::PutVoiceConnectorOriginationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::PutVoiceConnectorOriginationError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::PutVoiceConnectorOriginationError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::PutVoiceConnectorOriginationError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::PutVoiceConnectorOriginationError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::PutVoiceConnectorOriginationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutVoiceConnectorProxyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutVoiceConnectorProxyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutVoiceConnectorProxyError> for Error {
    fn from(err: crate::error::PutVoiceConnectorProxyError) -> Self {
        match err {
            crate::error::PutVoiceConnectorProxyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::PutVoiceConnectorProxyError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::PutVoiceConnectorProxyError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::PutVoiceConnectorProxyError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::PutVoiceConnectorProxyError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::PutVoiceConnectorProxyError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::PutVoiceConnectorProxyError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::PutVoiceConnectorProxyError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::PutVoiceConnectorProxyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::PutVoiceConnectorStreamingConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::PutVoiceConnectorStreamingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutVoiceConnectorStreamingConfigurationError> for Error {
    fn from(err: crate::error::PutVoiceConnectorStreamingConfigurationError) -> Self {
        match err {
            crate::error::PutVoiceConnectorStreamingConfigurationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::PutVoiceConnectorStreamingConfigurationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::PutVoiceConnectorStreamingConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::PutVoiceConnectorStreamingConfigurationError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::PutVoiceConnectorStreamingConfigurationError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::PutVoiceConnectorStreamingConfigurationError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::PutVoiceConnectorStreamingConfigurationError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::PutVoiceConnectorStreamingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutVoiceConnectorTerminationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutVoiceConnectorTerminationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutVoiceConnectorTerminationError> for Error {
    fn from(err: crate::error::PutVoiceConnectorTerminationError) -> Self {
        match err {
            crate::error::PutVoiceConnectorTerminationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::PutVoiceConnectorTerminationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::PutVoiceConnectorTerminationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::PutVoiceConnectorTerminationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::PutVoiceConnectorTerminationError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::PutVoiceConnectorTerminationError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::PutVoiceConnectorTerminationError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::PutVoiceConnectorTerminationError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::PutVoiceConnectorTerminationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::PutVoiceConnectorTerminationCredentialsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::PutVoiceConnectorTerminationCredentialsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutVoiceConnectorTerminationCredentialsError> for Error {
    fn from(err: crate::error::PutVoiceConnectorTerminationCredentialsError) -> Self {
        match err {
            crate::error::PutVoiceConnectorTerminationCredentialsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::PutVoiceConnectorTerminationCredentialsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::PutVoiceConnectorTerminationCredentialsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::PutVoiceConnectorTerminationCredentialsError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::PutVoiceConnectorTerminationCredentialsError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::PutVoiceConnectorTerminationCredentialsError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::PutVoiceConnectorTerminationCredentialsError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::PutVoiceConnectorTerminationCredentialsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RestorePhoneNumberError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RestorePhoneNumberError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RestorePhoneNumberError> for Error {
    fn from(err: crate::error::RestorePhoneNumberError) -> Self {
        match err {
            crate::error::RestorePhoneNumberError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::RestorePhoneNumberError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::RestorePhoneNumberError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::RestorePhoneNumberError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::RestorePhoneNumberError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::RestorePhoneNumberError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::RestorePhoneNumberError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::RestorePhoneNumberError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::RestorePhoneNumberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SearchAvailablePhoneNumbersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SearchAvailablePhoneNumbersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SearchAvailablePhoneNumbersError> for Error {
    fn from(err: crate::error::SearchAvailablePhoneNumbersError) -> Self {
        match err {
            crate::error::SearchAvailablePhoneNumbersError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::SearchAvailablePhoneNumbersError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::SearchAvailablePhoneNumbersError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::SearchAvailablePhoneNumbersError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::SearchAvailablePhoneNumbersError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::SearchAvailablePhoneNumbersError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::SearchAvailablePhoneNumbersError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::SearchAvailablePhoneNumbersError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateGlobalSettingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateGlobalSettingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateGlobalSettingsError> for Error {
    fn from(err: crate::error::UpdateGlobalSettingsError) -> Self {
        match err {
            crate::error::UpdateGlobalSettingsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateGlobalSettingsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateGlobalSettingsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateGlobalSettingsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdateGlobalSettingsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::UpdateGlobalSettingsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::UpdateGlobalSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdatePhoneNumberError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdatePhoneNumberError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdatePhoneNumberError> for Error {
    fn from(err: crate::error::UpdatePhoneNumberError) -> Self {
        match err {
            crate::error::UpdatePhoneNumberError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdatePhoneNumberError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdatePhoneNumberError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdatePhoneNumberError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdatePhoneNumberError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdatePhoneNumberError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdatePhoneNumberError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::UpdatePhoneNumberError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::UpdatePhoneNumberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdatePhoneNumberSettingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdatePhoneNumberSettingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdatePhoneNumberSettingsError> for Error {
    fn from(err: crate::error::UpdatePhoneNumberSettingsError) -> Self {
        match err {
            crate::error::UpdatePhoneNumberSettingsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdatePhoneNumberSettingsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdatePhoneNumberSettingsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdatePhoneNumberSettingsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdatePhoneNumberSettingsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::UpdatePhoneNumberSettingsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::UpdatePhoneNumberSettingsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateProxySessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateProxySessionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateProxySessionError> for Error {
    fn from(err: crate::error::UpdateProxySessionError) -> Self {
        match err {
            crate::error::UpdateProxySessionError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateProxySessionError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateProxySessionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateProxySessionError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateProxySessionError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdateProxySessionError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::UpdateProxySessionError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::UpdateProxySessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateSipMediaApplicationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateSipMediaApplicationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateSipMediaApplicationError> for Error {
    fn from(err: crate::error::UpdateSipMediaApplicationError) -> Self {
        match err {
            crate::error::UpdateSipMediaApplicationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateSipMediaApplicationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateSipMediaApplicationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateSipMediaApplicationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateSipMediaApplicationError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateSipMediaApplicationError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdateSipMediaApplicationError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::UpdateSipMediaApplicationError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::UpdateSipMediaApplicationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateSipMediaApplicationCallError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateSipMediaApplicationCallError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateSipMediaApplicationCallError> for Error {
    fn from(err: crate::error::UpdateSipMediaApplicationCallError) -> Self {
        match err {
            crate::error::UpdateSipMediaApplicationCallError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateSipMediaApplicationCallError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateSipMediaApplicationCallError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateSipMediaApplicationCallError::ResourceLimitExceededException(
                inner,
            ) => Error::ResourceLimitExceededException(inner),
            crate::error::UpdateSipMediaApplicationCallError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateSipMediaApplicationCallError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::error::UpdateSipMediaApplicationCallError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::UpdateSipMediaApplicationCallError::UnauthorizedClientException(
                inner,
            ) => Error::UnauthorizedClientException(inner),
            crate::error::UpdateSipMediaApplicationCallError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateSipRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateSipRuleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateSipRuleError> for Error {
    fn from(err: crate::error::UpdateSipRuleError) -> Self {
        match err {
            crate::error::UpdateSipRuleError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateSipRuleError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateSipRuleError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateSipRuleError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateSipRuleError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::UpdateSipRuleError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateSipRuleError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdateSipRuleError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::UpdateSipRuleError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::UpdateSipRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateVoiceConnectorError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateVoiceConnectorError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateVoiceConnectorError> for Error {
    fn from(err: crate::error::UpdateVoiceConnectorError) -> Self {
        match err {
            crate::error::UpdateVoiceConnectorError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateVoiceConnectorError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateVoiceConnectorError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateVoiceConnectorError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateVoiceConnectorError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdateVoiceConnectorError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::UpdateVoiceConnectorError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::UpdateVoiceConnectorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateVoiceConnectorGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateVoiceConnectorGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateVoiceConnectorGroupError> for Error {
    fn from(err: crate::error::UpdateVoiceConnectorGroupError) -> Self {
        match err {
            crate::error::UpdateVoiceConnectorGroupError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateVoiceConnectorGroupError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateVoiceConnectorGroupError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateVoiceConnectorGroupError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateVoiceConnectorGroupError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateVoiceConnectorGroupError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdateVoiceConnectorGroupError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::UpdateVoiceConnectorGroupError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::UpdateVoiceConnectorGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ValidateE911AddressError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ValidateE911AddressError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ValidateE911AddressError> for Error {
    fn from(err: crate::error::ValidateE911AddressError) -> Self {
        match err {
            crate::error::ValidateE911AddressError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ValidateE911AddressError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ValidateE911AddressError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ValidateE911AddressError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ValidateE911AddressError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ValidateE911AddressError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ValidateE911AddressError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ValidateE911AddressError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::BadRequestException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::ForbiddenException(e) => e.request_id(),
            Self::NotFoundException(e) => e.request_id(),
            Self::ResourceLimitExceededException(e) => e.request_id(),
            Self::ServiceFailureException(e) => e.request_id(),
            Self::ServiceUnavailableException(e) => e.request_id(),
            Self::ThrottledClientException(e) => e.request_id(),
            Self::UnauthorizedClientException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
