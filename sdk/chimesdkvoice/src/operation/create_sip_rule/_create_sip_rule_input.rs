// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateSipRuleInput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub trigger_type: std::option::Option<crate::types::SipRuleTriggerType>,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub trigger_value: std::option::Option<std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub disabled: std::option::Option<bool>,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub target_applications:
        std::option::Option<std::vec::Vec<crate::types::SipRuleTargetApplication>>,
}
impl CreateSipRuleInput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn trigger_type(&self) -> std::option::Option<&crate::types::SipRuleTriggerType> {
        self.trigger_type.as_ref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn trigger_value(&self) -> std::option::Option<&str> {
        self.trigger_value.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn disabled(&self) -> std::option::Option<bool> {
        self.disabled
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn target_applications(
        &self,
    ) -> std::option::Option<&[crate::types::SipRuleTargetApplication]> {
        self.target_applications.as_deref()
    }
}
impl CreateSipRuleInput {
    /// Creates a new builder-style object to manufacture [`CreateSipRuleInput`](crate::operation::create_sip_rule::CreateSipRuleInput).
    pub fn builder() -> crate::operation::create_sip_rule::builders::CreateSipRuleInputBuilder {
        crate::operation::create_sip_rule::builders::CreateSipRuleInputBuilder::default()
    }
}

/// A builder for [`CreateSipRuleInput`](crate::operation::create_sip_rule::CreateSipRuleInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateSipRuleInputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) trigger_type: std::option::Option<crate::types::SipRuleTriggerType>,
    pub(crate) trigger_value: std::option::Option<std::string::String>,
    pub(crate) disabled: std::option::Option<bool>,
    pub(crate) target_applications:
        std::option::Option<std::vec::Vec<crate::types::SipRuleTargetApplication>>,
}
impl CreateSipRuleInputBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn trigger_type(mut self, input: crate::types::SipRuleTriggerType) -> Self {
        self.trigger_type = Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_trigger_type(
        mut self,
        input: std::option::Option<crate::types::SipRuleTriggerType>,
    ) -> Self {
        self.trigger_type = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn trigger_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.trigger_value = Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_trigger_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.trigger_value = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn disabled(mut self, input: bool) -> Self {
        self.disabled = Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_disabled(mut self, input: std::option::Option<bool>) -> Self {
        self.disabled = input;
        self
    }
    /// Appends an item to `target_applications`.
    ///
    /// To override the contents of this collection use [`set_target_applications`](Self::set_target_applications).
    ///
    pub fn target_applications(mut self, input: crate::types::SipRuleTargetApplication) -> Self {
        let mut v = self.target_applications.unwrap_or_default();
        v.push(input);
        self.target_applications = Some(v);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_target_applications(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SipRuleTargetApplication>>,
    ) -> Self {
        self.target_applications = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateSipRuleInput`](crate::operation::create_sip_rule::CreateSipRuleInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_sip_rule::CreateSipRuleInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_sip_rule::CreateSipRuleInput {
            name: self.name,
            trigger_type: self.trigger_type,
            trigger_value: self.trigger_value,
            disabled: self.disabled,
            target_applications: self.target_applications,
        })
    }
}
