// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_voice_profile::_update_voice_profile_output::UpdateVoiceProfileOutputBuilder;

pub use crate::operation::update_voice_profile::_update_voice_profile_input::UpdateVoiceProfileInputBuilder;

impl UpdateVoiceProfileInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_voice_profile::UpdateVoiceProfileOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_voice_profile::UpdateVoiceProfileError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_voice_profile();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateVoiceProfile`.
///
/// <p>Updates the specified voice profile’s voice print and refreshes its expiration timestamp.</p> <important>
/// <p>As a condition of using this feature, you acknowledge that the collection, use, storage, and retention of your caller’s biometric identifiers and biometric information (“biometric data”) in the form of a digital voiceprint requires the caller’s informed consent via a written release. Such consent is required under various state laws, including biometrics laws in Illinois, Texas, Washington and other state privacy laws.</p>
/// <p>You must provide a written release to each caller through a process that clearly reflects each caller’s informed consent before using Amazon Chime SDK Voice Insights service, as required under the terms of your agreement with AWS governing your use of the service.</p>
/// </important>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateVoiceProfileFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_voice_profile::builders::UpdateVoiceProfileInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_voice_profile::UpdateVoiceProfileOutput,
        crate::operation::update_voice_profile::UpdateVoiceProfileError,
    > for UpdateVoiceProfileFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_voice_profile::UpdateVoiceProfileOutput,
            crate::operation::update_voice_profile::UpdateVoiceProfileError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateVoiceProfileFluentBuilder {
    /// Creates a new `UpdateVoiceProfile`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateVoiceProfile as a reference.
    pub fn as_input(&self) -> &crate::operation::update_voice_profile::builders::UpdateVoiceProfileInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_voice_profile::UpdateVoiceProfileOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_voice_profile::UpdateVoiceProfileError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_voice_profile::UpdateVoiceProfile::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_voice_profile::UpdateVoiceProfile::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_voice_profile::UpdateVoiceProfileOutput,
        crate::operation::update_voice_profile::UpdateVoiceProfileError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The profile ID.</p>
    pub fn voice_profile_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.voice_profile_id(input.into());
        self
    }
    /// <p>The profile ID.</p>
    pub fn set_voice_profile_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_voice_profile_id(input);
        self
    }
    /// <p>The profile ID.</p>
    pub fn get_voice_profile_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_voice_profile_id()
    }
    /// <p>The ID of the speaker search task.</p>
    pub fn speaker_search_task_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.speaker_search_task_id(input.into());
        self
    }
    /// <p>The ID of the speaker search task.</p>
    pub fn set_speaker_search_task_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_speaker_search_task_id(input);
        self
    }
    /// <p>The ID of the speaker search task.</p>
    pub fn get_speaker_search_task_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_speaker_search_task_id()
    }
}
