// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateSipMediaApplicationInput {
    /// <p>The SIP media application ID.</p>
    pub sip_media_application_id: ::std::option::Option<::std::string::String>,
    /// <p>The new name for the specified SIP media application.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The new set of endpoints for the specified SIP media application.</p>
    pub endpoints: ::std::option::Option<::std::vec::Vec<crate::types::SipMediaApplicationEndpoint>>,
}
impl UpdateSipMediaApplicationInput {
    /// <p>The SIP media application ID.</p>
    pub fn sip_media_application_id(&self) -> ::std::option::Option<&str> {
        self.sip_media_application_id.as_deref()
    }
    /// <p>The new name for the specified SIP media application.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The new set of endpoints for the specified SIP media application.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.endpoints.is_none()`.
    pub fn endpoints(&self) -> &[crate::types::SipMediaApplicationEndpoint] {
        self.endpoints.as_deref().unwrap_or_default()
    }
}
impl UpdateSipMediaApplicationInput {
    /// Creates a new builder-style object to manufacture [`UpdateSipMediaApplicationInput`](crate::operation::update_sip_media_application::UpdateSipMediaApplicationInput).
    pub fn builder() -> crate::operation::update_sip_media_application::builders::UpdateSipMediaApplicationInputBuilder {
        crate::operation::update_sip_media_application::builders::UpdateSipMediaApplicationInputBuilder::default()
    }
}

/// A builder for [`UpdateSipMediaApplicationInput`](crate::operation::update_sip_media_application::UpdateSipMediaApplicationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateSipMediaApplicationInputBuilder {
    pub(crate) sip_media_application_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) endpoints: ::std::option::Option<::std::vec::Vec<crate::types::SipMediaApplicationEndpoint>>,
}
impl UpdateSipMediaApplicationInputBuilder {
    /// <p>The SIP media application ID.</p>
    /// This field is required.
    pub fn sip_media_application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sip_media_application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The SIP media application ID.</p>
    pub fn set_sip_media_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sip_media_application_id = input;
        self
    }
    /// <p>The SIP media application ID.</p>
    pub fn get_sip_media_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.sip_media_application_id
    }
    /// <p>The new name for the specified SIP media application.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The new name for the specified SIP media application.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The new name for the specified SIP media application.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `endpoints`.
    ///
    /// To override the contents of this collection use [`set_endpoints`](Self::set_endpoints).
    ///
    /// <p>The new set of endpoints for the specified SIP media application.</p>
    pub fn endpoints(mut self, input: crate::types::SipMediaApplicationEndpoint) -> Self {
        let mut v = self.endpoints.unwrap_or_default();
        v.push(input);
        self.endpoints = ::std::option::Option::Some(v);
        self
    }
    /// <p>The new set of endpoints for the specified SIP media application.</p>
    pub fn set_endpoints(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SipMediaApplicationEndpoint>>) -> Self {
        self.endpoints = input;
        self
    }
    /// <p>The new set of endpoints for the specified SIP media application.</p>
    pub fn get_endpoints(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SipMediaApplicationEndpoint>> {
        &self.endpoints
    }
    /// Consumes the builder and constructs a [`UpdateSipMediaApplicationInput`](crate::operation::update_sip_media_application::UpdateSipMediaApplicationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_sip_media_application::UpdateSipMediaApplicationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_sip_media_application::UpdateSipMediaApplicationInput {
            sip_media_application_id: self.sip_media_application_id,
            name: self.name,
            endpoints: self.endpoints,
        })
    }
}
