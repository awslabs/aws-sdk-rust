// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListPhoneNumbersInput {
    /// <p>The status of your organization's phone numbers.</p>
    pub status: ::std::option::Option<::std::string::String>,
    /// <p>The phone number product types.</p>
    pub product_type: ::std::option::Option<crate::types::PhoneNumberProductType>,
    /// <p>The filter to limit the number of results.</p>
    pub filter_name: ::std::option::Option<crate::types::PhoneNumberAssociationName>,
    /// <p>The filter value.</p>
    pub filter_value: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to return in a single call.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The token used to return the next page of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListPhoneNumbersInput {
    /// <p>The status of your organization's phone numbers.</p>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>The phone number product types.</p>
    pub fn product_type(&self) -> ::std::option::Option<&crate::types::PhoneNumberProductType> {
        self.product_type.as_ref()
    }
    /// <p>The filter to limit the number of results.</p>
    pub fn filter_name(&self) -> ::std::option::Option<&crate::types::PhoneNumberAssociationName> {
        self.filter_name.as_ref()
    }
    /// <p>The filter value.</p>
    pub fn filter_value(&self) -> ::std::option::Option<&str> {
        self.filter_value.as_deref()
    }
    /// <p>The maximum number of results to return in a single call.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The token used to return the next page of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListPhoneNumbersInput {
    /// Creates a new builder-style object to manufacture [`ListPhoneNumbersInput`](crate::operation::list_phone_numbers::ListPhoneNumbersInput).
    pub fn builder() -> crate::operation::list_phone_numbers::builders::ListPhoneNumbersInputBuilder {
        crate::operation::list_phone_numbers::builders::ListPhoneNumbersInputBuilder::default()
    }
}

/// A builder for [`ListPhoneNumbersInput`](crate::operation::list_phone_numbers::ListPhoneNumbersInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListPhoneNumbersInputBuilder {
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) product_type: ::std::option::Option<crate::types::PhoneNumberProductType>,
    pub(crate) filter_name: ::std::option::Option<crate::types::PhoneNumberAssociationName>,
    pub(crate) filter_value: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListPhoneNumbersInputBuilder {
    /// <p>The status of your organization's phone numbers.</p>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of your organization's phone numbers.</p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of your organization's phone numbers.</p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>The phone number product types.</p>
    pub fn product_type(mut self, input: crate::types::PhoneNumberProductType) -> Self {
        self.product_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The phone number product types.</p>
    pub fn set_product_type(mut self, input: ::std::option::Option<crate::types::PhoneNumberProductType>) -> Self {
        self.product_type = input;
        self
    }
    /// <p>The phone number product types.</p>
    pub fn get_product_type(&self) -> &::std::option::Option<crate::types::PhoneNumberProductType> {
        &self.product_type
    }
    /// <p>The filter to limit the number of results.</p>
    pub fn filter_name(mut self, input: crate::types::PhoneNumberAssociationName) -> Self {
        self.filter_name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The filter to limit the number of results.</p>
    pub fn set_filter_name(mut self, input: ::std::option::Option<crate::types::PhoneNumberAssociationName>) -> Self {
        self.filter_name = input;
        self
    }
    /// <p>The filter to limit the number of results.</p>
    pub fn get_filter_name(&self) -> &::std::option::Option<crate::types::PhoneNumberAssociationName> {
        &self.filter_name
    }
    /// <p>The filter value.</p>
    pub fn filter_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.filter_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The filter value.</p>
    pub fn set_filter_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.filter_value = input;
        self
    }
    /// <p>The filter value.</p>
    pub fn get_filter_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.filter_value
    }
    /// <p>The maximum number of results to return in a single call.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return in a single call.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return in a single call.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The token used to return the next page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token used to return the next page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token used to return the next page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListPhoneNumbersInput`](crate::operation::list_phone_numbers::ListPhoneNumbersInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_phone_numbers::ListPhoneNumbersInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_phone_numbers::ListPhoneNumbersInput {
            status: self.status,
            product_type: self.product_type,
            filter_name: self.filter_name,
            filter_value: self.filter_value,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
