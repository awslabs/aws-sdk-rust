// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SearchAvailablePhoneNumbersInput {
    /// <p>Confines a search to just the phone numbers associated with the specified area code.</p>
    pub area_code: ::std::option::Option<::std::string::String>,
    /// <p>Confines a search to just the phone numbers associated with the specified city.</p>
    pub city: ::std::option::Option<::std::string::String>,
    /// <p>Confines a search to just the phone numbers associated with the specified country.</p>
    pub country: ::std::option::Option<::std::string::String>,
    /// <p>Confines a search to just the phone numbers associated with the specified state.</p>
    pub state: ::std::option::Option<::std::string::String>,
    /// <p>Confines a search to just the phone numbers associated with the specified toll-free prefix.</p>
    pub toll_free_prefix: ::std::option::Option<::std::string::String>,
    /// <p>Confines a search to just the phone numbers associated with the specified phone number type, either <b>local</b> or <b>toll-free</b>.</p>
    pub phone_number_type: ::std::option::Option<crate::types::PhoneNumberType>,
    /// <p>The maximum number of results to return.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The token used to return the next page of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl SearchAvailablePhoneNumbersInput {
    /// <p>Confines a search to just the phone numbers associated with the specified area code.</p>
    pub fn area_code(&self) -> ::std::option::Option<&str> {
        self.area_code.as_deref()
    }
    /// <p>Confines a search to just the phone numbers associated with the specified city.</p>
    pub fn city(&self) -> ::std::option::Option<&str> {
        self.city.as_deref()
    }
    /// <p>Confines a search to just the phone numbers associated with the specified country.</p>
    pub fn country(&self) -> ::std::option::Option<&str> {
        self.country.as_deref()
    }
    /// <p>Confines a search to just the phone numbers associated with the specified state.</p>
    pub fn state(&self) -> ::std::option::Option<&str> {
        self.state.as_deref()
    }
    /// <p>Confines a search to just the phone numbers associated with the specified toll-free prefix.</p>
    pub fn toll_free_prefix(&self) -> ::std::option::Option<&str> {
        self.toll_free_prefix.as_deref()
    }
    /// <p>Confines a search to just the phone numbers associated with the specified phone number type, either <b>local</b> or <b>toll-free</b>.</p>
    pub fn phone_number_type(&self) -> ::std::option::Option<&crate::types::PhoneNumberType> {
        self.phone_number_type.as_ref()
    }
    /// <p>The maximum number of results to return.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The token used to return the next page of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl SearchAvailablePhoneNumbersInput {
    /// Creates a new builder-style object to manufacture [`SearchAvailablePhoneNumbersInput`](crate::operation::search_available_phone_numbers::SearchAvailablePhoneNumbersInput).
    pub fn builder() -> crate::operation::search_available_phone_numbers::builders::SearchAvailablePhoneNumbersInputBuilder {
        crate::operation::search_available_phone_numbers::builders::SearchAvailablePhoneNumbersInputBuilder::default()
    }
}

/// A builder for [`SearchAvailablePhoneNumbersInput`](crate::operation::search_available_phone_numbers::SearchAvailablePhoneNumbersInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SearchAvailablePhoneNumbersInputBuilder {
    pub(crate) area_code: ::std::option::Option<::std::string::String>,
    pub(crate) city: ::std::option::Option<::std::string::String>,
    pub(crate) country: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<::std::string::String>,
    pub(crate) toll_free_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) phone_number_type: ::std::option::Option<crate::types::PhoneNumberType>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl SearchAvailablePhoneNumbersInputBuilder {
    /// <p>Confines a search to just the phone numbers associated with the specified area code.</p>
    pub fn area_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.area_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Confines a search to just the phone numbers associated with the specified area code.</p>
    pub fn set_area_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.area_code = input;
        self
    }
    /// <p>Confines a search to just the phone numbers associated with the specified area code.</p>
    pub fn get_area_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.area_code
    }
    /// <p>Confines a search to just the phone numbers associated with the specified city.</p>
    pub fn city(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.city = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Confines a search to just the phone numbers associated with the specified city.</p>
    pub fn set_city(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.city = input;
        self
    }
    /// <p>Confines a search to just the phone numbers associated with the specified city.</p>
    pub fn get_city(&self) -> &::std::option::Option<::std::string::String> {
        &self.city
    }
    /// <p>Confines a search to just the phone numbers associated with the specified country.</p>
    pub fn country(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.country = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Confines a search to just the phone numbers associated with the specified country.</p>
    pub fn set_country(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.country = input;
        self
    }
    /// <p>Confines a search to just the phone numbers associated with the specified country.</p>
    pub fn get_country(&self) -> &::std::option::Option<::std::string::String> {
        &self.country
    }
    /// <p>Confines a search to just the phone numbers associated with the specified state.</p>
    pub fn state(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Confines a search to just the phone numbers associated with the specified state.</p>
    pub fn set_state(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state = input;
        self
    }
    /// <p>Confines a search to just the phone numbers associated with the specified state.</p>
    pub fn get_state(&self) -> &::std::option::Option<::std::string::String> {
        &self.state
    }
    /// <p>Confines a search to just the phone numbers associated with the specified toll-free prefix.</p>
    pub fn toll_free_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.toll_free_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Confines a search to just the phone numbers associated with the specified toll-free prefix.</p>
    pub fn set_toll_free_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.toll_free_prefix = input;
        self
    }
    /// <p>Confines a search to just the phone numbers associated with the specified toll-free prefix.</p>
    pub fn get_toll_free_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.toll_free_prefix
    }
    /// <p>Confines a search to just the phone numbers associated with the specified phone number type, either <b>local</b> or <b>toll-free</b>.</p>
    pub fn phone_number_type(mut self, input: crate::types::PhoneNumberType) -> Self {
        self.phone_number_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Confines a search to just the phone numbers associated with the specified phone number type, either <b>local</b> or <b>toll-free</b>.</p>
    pub fn set_phone_number_type(mut self, input: ::std::option::Option<crate::types::PhoneNumberType>) -> Self {
        self.phone_number_type = input;
        self
    }
    /// <p>Confines a search to just the phone numbers associated with the specified phone number type, either <b>local</b> or <b>toll-free</b>.</p>
    pub fn get_phone_number_type(&self) -> &::std::option::Option<crate::types::PhoneNumberType> {
        &self.phone_number_type
    }
    /// <p>The maximum number of results to return.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The token used to return the next page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token used to return the next page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token used to return the next page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`SearchAvailablePhoneNumbersInput`](crate::operation::search_available_phone_numbers::SearchAvailablePhoneNumbersInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::search_available_phone_numbers::SearchAvailablePhoneNumbersInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::search_available_phone_numbers::SearchAvailablePhoneNumbersInput {
            area_code: self.area_code,
            city: self.city,
            country: self.country,
            state: self.state,
            toll_free_prefix: self.toll_free_prefix,
            phone_number_type: self.phone_number_type,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
