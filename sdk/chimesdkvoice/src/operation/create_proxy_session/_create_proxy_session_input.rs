// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateProxySessionInput {
    /// <p>The Voice Connector ID.</p>
    pub voice_connector_id: ::std::option::Option<::std::string::String>,
    /// <p>The participant phone numbers.</p>
    pub participant_phone_numbers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The name of the proxy session.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The number of minutes allowed for the proxy session.</p>
    pub expiry_minutes: ::std::option::Option<i32>,
    /// <p>The proxy session's capabilities.</p>
    pub capabilities: ::std::option::Option<::std::vec::Vec<crate::types::Capability>>,
    /// <p>The preference for proxy phone number reuse, or stickiness, between the same participants across sessions.</p>
    pub number_selection_behavior: ::std::option::Option<crate::types::NumberSelectionBehavior>,
    /// <p>The preference for matching the country or area code of the proxy phone number with that of the first participant.</p>
    pub geo_match_level: ::std::option::Option<crate::types::GeoMatchLevel>,
    /// <p>The country and area code for the proxy phone number.</p>
    pub geo_match_params: ::std::option::Option<crate::types::GeoMatchParams>,
}
impl CreateProxySessionInput {
    /// <p>The Voice Connector ID.</p>
    pub fn voice_connector_id(&self) -> ::std::option::Option<&str> {
        self.voice_connector_id.as_deref()
    }
    /// <p>The participant phone numbers.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.participant_phone_numbers.is_none()`.
    pub fn participant_phone_numbers(&self) -> &[::std::string::String] {
        self.participant_phone_numbers.as_deref().unwrap_or_default()
    }
    /// <p>The name of the proxy session.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The number of minutes allowed for the proxy session.</p>
    pub fn expiry_minutes(&self) -> ::std::option::Option<i32> {
        self.expiry_minutes
    }
    /// <p>The proxy session's capabilities.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.capabilities.is_none()`.
    pub fn capabilities(&self) -> &[crate::types::Capability] {
        self.capabilities.as_deref().unwrap_or_default()
    }
    /// <p>The preference for proxy phone number reuse, or stickiness, between the same participants across sessions.</p>
    pub fn number_selection_behavior(&self) -> ::std::option::Option<&crate::types::NumberSelectionBehavior> {
        self.number_selection_behavior.as_ref()
    }
    /// <p>The preference for matching the country or area code of the proxy phone number with that of the first participant.</p>
    pub fn geo_match_level(&self) -> ::std::option::Option<&crate::types::GeoMatchLevel> {
        self.geo_match_level.as_ref()
    }
    /// <p>The country and area code for the proxy phone number.</p>
    pub fn geo_match_params(&self) -> ::std::option::Option<&crate::types::GeoMatchParams> {
        self.geo_match_params.as_ref()
    }
}
impl ::std::fmt::Debug for CreateProxySessionInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateProxySessionInput");
        formatter.field("voice_connector_id", &self.voice_connector_id);
        formatter.field("participant_phone_numbers", &self.participant_phone_numbers);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("expiry_minutes", &self.expiry_minutes);
        formatter.field("capabilities", &self.capabilities);
        formatter.field("number_selection_behavior", &self.number_selection_behavior);
        formatter.field("geo_match_level", &self.geo_match_level);
        formatter.field("geo_match_params", &self.geo_match_params);
        formatter.finish()
    }
}
impl CreateProxySessionInput {
    /// Creates a new builder-style object to manufacture [`CreateProxySessionInput`](crate::operation::create_proxy_session::CreateProxySessionInput).
    pub fn builder() -> crate::operation::create_proxy_session::builders::CreateProxySessionInputBuilder {
        crate::operation::create_proxy_session::builders::CreateProxySessionInputBuilder::default()
    }
}

/// A builder for [`CreateProxySessionInput`](crate::operation::create_proxy_session::CreateProxySessionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct CreateProxySessionInputBuilder {
    pub(crate) voice_connector_id: ::std::option::Option<::std::string::String>,
    pub(crate) participant_phone_numbers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) expiry_minutes: ::std::option::Option<i32>,
    pub(crate) capabilities: ::std::option::Option<::std::vec::Vec<crate::types::Capability>>,
    pub(crate) number_selection_behavior: ::std::option::Option<crate::types::NumberSelectionBehavior>,
    pub(crate) geo_match_level: ::std::option::Option<crate::types::GeoMatchLevel>,
    pub(crate) geo_match_params: ::std::option::Option<crate::types::GeoMatchParams>,
}
impl CreateProxySessionInputBuilder {
    /// <p>The Voice Connector ID.</p>
    /// This field is required.
    pub fn voice_connector_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.voice_connector_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Voice Connector ID.</p>
    pub fn set_voice_connector_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.voice_connector_id = input;
        self
    }
    /// <p>The Voice Connector ID.</p>
    pub fn get_voice_connector_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.voice_connector_id
    }
    /// Appends an item to `participant_phone_numbers`.
    ///
    /// To override the contents of this collection use [`set_participant_phone_numbers`](Self::set_participant_phone_numbers).
    ///
    /// <p>The participant phone numbers.</p>
    pub fn participant_phone_numbers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.participant_phone_numbers.unwrap_or_default();
        v.push(input.into());
        self.participant_phone_numbers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The participant phone numbers.</p>
    pub fn set_participant_phone_numbers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.participant_phone_numbers = input;
        self
    }
    /// <p>The participant phone numbers.</p>
    pub fn get_participant_phone_numbers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.participant_phone_numbers
    }
    /// <p>The name of the proxy session.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the proxy session.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the proxy session.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The number of minutes allowed for the proxy session.</p>
    pub fn expiry_minutes(mut self, input: i32) -> Self {
        self.expiry_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of minutes allowed for the proxy session.</p>
    pub fn set_expiry_minutes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.expiry_minutes = input;
        self
    }
    /// <p>The number of minutes allowed for the proxy session.</p>
    pub fn get_expiry_minutes(&self) -> &::std::option::Option<i32> {
        &self.expiry_minutes
    }
    /// Appends an item to `capabilities`.
    ///
    /// To override the contents of this collection use [`set_capabilities`](Self::set_capabilities).
    ///
    /// <p>The proxy session's capabilities.</p>
    pub fn capabilities(mut self, input: crate::types::Capability) -> Self {
        let mut v = self.capabilities.unwrap_or_default();
        v.push(input);
        self.capabilities = ::std::option::Option::Some(v);
        self
    }
    /// <p>The proxy session's capabilities.</p>
    pub fn set_capabilities(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Capability>>) -> Self {
        self.capabilities = input;
        self
    }
    /// <p>The proxy session's capabilities.</p>
    pub fn get_capabilities(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Capability>> {
        &self.capabilities
    }
    /// <p>The preference for proxy phone number reuse, or stickiness, between the same participants across sessions.</p>
    pub fn number_selection_behavior(mut self, input: crate::types::NumberSelectionBehavior) -> Self {
        self.number_selection_behavior = ::std::option::Option::Some(input);
        self
    }
    /// <p>The preference for proxy phone number reuse, or stickiness, between the same participants across sessions.</p>
    pub fn set_number_selection_behavior(mut self, input: ::std::option::Option<crate::types::NumberSelectionBehavior>) -> Self {
        self.number_selection_behavior = input;
        self
    }
    /// <p>The preference for proxy phone number reuse, or stickiness, between the same participants across sessions.</p>
    pub fn get_number_selection_behavior(&self) -> &::std::option::Option<crate::types::NumberSelectionBehavior> {
        &self.number_selection_behavior
    }
    /// <p>The preference for matching the country or area code of the proxy phone number with that of the first participant.</p>
    pub fn geo_match_level(mut self, input: crate::types::GeoMatchLevel) -> Self {
        self.geo_match_level = ::std::option::Option::Some(input);
        self
    }
    /// <p>The preference for matching the country or area code of the proxy phone number with that of the first participant.</p>
    pub fn set_geo_match_level(mut self, input: ::std::option::Option<crate::types::GeoMatchLevel>) -> Self {
        self.geo_match_level = input;
        self
    }
    /// <p>The preference for matching the country or area code of the proxy phone number with that of the first participant.</p>
    pub fn get_geo_match_level(&self) -> &::std::option::Option<crate::types::GeoMatchLevel> {
        &self.geo_match_level
    }
    /// <p>The country and area code for the proxy phone number.</p>
    pub fn geo_match_params(mut self, input: crate::types::GeoMatchParams) -> Self {
        self.geo_match_params = ::std::option::Option::Some(input);
        self
    }
    /// <p>The country and area code for the proxy phone number.</p>
    pub fn set_geo_match_params(mut self, input: ::std::option::Option<crate::types::GeoMatchParams>) -> Self {
        self.geo_match_params = input;
        self
    }
    /// <p>The country and area code for the proxy phone number.</p>
    pub fn get_geo_match_params(&self) -> &::std::option::Option<crate::types::GeoMatchParams> {
        &self.geo_match_params
    }
    /// Consumes the builder and constructs a [`CreateProxySessionInput`](crate::operation::create_proxy_session::CreateProxySessionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_proxy_session::CreateProxySessionInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_proxy_session::CreateProxySessionInput {
            voice_connector_id: self.voice_connector_id,
            participant_phone_numbers: self.participant_phone_numbers,
            name: self.name,
            expiry_minutes: self.expiry_minutes,
            capabilities: self.capabilities,
            number_selection_behavior: self.number_selection_behavior,
            geo_match_level: self.geo_match_level,
            geo_match_params: self.geo_match_params,
        })
    }
}
impl ::std::fmt::Debug for CreateProxySessionInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateProxySessionInputBuilder");
        formatter.field("voice_connector_id", &self.voice_connector_id);
        formatter.field("participant_phone_numbers", &self.participant_phone_numbers);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("expiry_minutes", &self.expiry_minutes);
        formatter.field("capabilities", &self.capabilities);
        formatter.field("number_selection_behavior", &self.number_selection_behavior);
        formatter.field("geo_match_level", &self.geo_match_level);
        formatter.field("geo_match_params", &self.geo_match_params);
        formatter.finish()
    }
}
