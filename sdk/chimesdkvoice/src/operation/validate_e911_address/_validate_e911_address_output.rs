// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ValidateE911AddressOutput {
    /// <p>Number indicating the result of address validation. <code>0</code> means the address was perfect as-is and successfully validated. <code>1</code> means the address was corrected. <code>2</code> means the address sent was not close enough and was not validated.</p>
    pub validation_result: i32,
    /// <p>The ID that represents the address.</p>
    pub address_external_id: ::std::option::Option<::std::string::String>,
    /// <p>The validated address.</p>
    pub address: ::std::option::Option<crate::types::Address>,
    /// <p>The list of address suggestions..</p>
    pub candidate_address_list: ::std::option::Option<::std::vec::Vec<crate::types::CandidateAddress>>,
    _request_id: Option<String>,
}
impl ValidateE911AddressOutput {
    /// <p>Number indicating the result of address validation. <code>0</code> means the address was perfect as-is and successfully validated. <code>1</code> means the address was corrected. <code>2</code> means the address sent was not close enough and was not validated.</p>
    pub fn validation_result(&self) -> i32 {
        self.validation_result
    }
    /// <p>The ID that represents the address.</p>
    pub fn address_external_id(&self) -> ::std::option::Option<&str> {
        self.address_external_id.as_deref()
    }
    /// <p>The validated address.</p>
    pub fn address(&self) -> ::std::option::Option<&crate::types::Address> {
        self.address.as_ref()
    }
    /// <p>The list of address suggestions..</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.candidate_address_list.is_none()`.
    pub fn candidate_address_list(&self) -> &[crate::types::CandidateAddress] {
        self.candidate_address_list.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for ValidateE911AddressOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ValidateE911AddressOutput {
    /// Creates a new builder-style object to manufacture [`ValidateE911AddressOutput`](crate::operation::validate_e911_address::ValidateE911AddressOutput).
    pub fn builder() -> crate::operation::validate_e911_address::builders::ValidateE911AddressOutputBuilder {
        crate::operation::validate_e911_address::builders::ValidateE911AddressOutputBuilder::default()
    }
}

/// A builder for [`ValidateE911AddressOutput`](crate::operation::validate_e911_address::ValidateE911AddressOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ValidateE911AddressOutputBuilder {
    pub(crate) validation_result: ::std::option::Option<i32>,
    pub(crate) address_external_id: ::std::option::Option<::std::string::String>,
    pub(crate) address: ::std::option::Option<crate::types::Address>,
    pub(crate) candidate_address_list: ::std::option::Option<::std::vec::Vec<crate::types::CandidateAddress>>,
    _request_id: Option<String>,
}
impl ValidateE911AddressOutputBuilder {
    /// <p>Number indicating the result of address validation. <code>0</code> means the address was perfect as-is and successfully validated. <code>1</code> means the address was corrected. <code>2</code> means the address sent was not close enough and was not validated.</p>
    pub fn validation_result(mut self, input: i32) -> Self {
        self.validation_result = ::std::option::Option::Some(input);
        self
    }
    /// <p>Number indicating the result of address validation. <code>0</code> means the address was perfect as-is and successfully validated. <code>1</code> means the address was corrected. <code>2</code> means the address sent was not close enough and was not validated.</p>
    pub fn set_validation_result(mut self, input: ::std::option::Option<i32>) -> Self {
        self.validation_result = input;
        self
    }
    /// <p>Number indicating the result of address validation. <code>0</code> means the address was perfect as-is and successfully validated. <code>1</code> means the address was corrected. <code>2</code> means the address sent was not close enough and was not validated.</p>
    pub fn get_validation_result(&self) -> &::std::option::Option<i32> {
        &self.validation_result
    }
    /// <p>The ID that represents the address.</p>
    pub fn address_external_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.address_external_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID that represents the address.</p>
    pub fn set_address_external_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.address_external_id = input;
        self
    }
    /// <p>The ID that represents the address.</p>
    pub fn get_address_external_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.address_external_id
    }
    /// <p>The validated address.</p>
    pub fn address(mut self, input: crate::types::Address) -> Self {
        self.address = ::std::option::Option::Some(input);
        self
    }
    /// <p>The validated address.</p>
    pub fn set_address(mut self, input: ::std::option::Option<crate::types::Address>) -> Self {
        self.address = input;
        self
    }
    /// <p>The validated address.</p>
    pub fn get_address(&self) -> &::std::option::Option<crate::types::Address> {
        &self.address
    }
    /// Appends an item to `candidate_address_list`.
    ///
    /// To override the contents of this collection use [`set_candidate_address_list`](Self::set_candidate_address_list).
    ///
    /// <p>The list of address suggestions..</p>
    pub fn candidate_address_list(mut self, input: crate::types::CandidateAddress) -> Self {
        let mut v = self.candidate_address_list.unwrap_or_default();
        v.push(input);
        self.candidate_address_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of address suggestions..</p>
    pub fn set_candidate_address_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CandidateAddress>>) -> Self {
        self.candidate_address_list = input;
        self
    }
    /// <p>The list of address suggestions..</p>
    pub fn get_candidate_address_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CandidateAddress>> {
        &self.candidate_address_list
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ValidateE911AddressOutput`](crate::operation::validate_e911_address::ValidateE911AddressOutput).
    pub fn build(self) -> crate::operation::validate_e911_address::ValidateE911AddressOutput {
        crate::operation::validate_e911_address::ValidateE911AddressOutput {
            validation_result: self.validation_result.unwrap_or_default(),
            address_external_id: self.address_external_id,
            address: self.address,
            candidate_address_list: self.candidate_address_list,
            _request_id: self._request_id,
        }
    }
}
