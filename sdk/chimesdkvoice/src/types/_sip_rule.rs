// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of a SIP rule, including name, triggers, and target applications. An AWS account can have multiple SIP rules.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SipRule {
    /// <p>A SIP rule's ID.</p>
    pub sip_rule_id: ::std::option::Option<::std::string::String>,
    /// <p>A SIP rule's name.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether the SIP rule is enabled or disabled. You must disable a rule before you can delete it.</p>
    pub disabled: ::std::option::Option<bool>,
    /// <p>The type of trigger set for a SIP rule, either a phone number or a URI request host name.</p>
    pub trigger_type: ::std::option::Option<crate::types::SipRuleTriggerType>,
    /// <p>The value set for a SIP rule's trigger type. Either a phone number or a URI hostname.</p>
    pub trigger_value: ::std::option::Option<::std::string::String>,
    /// <p>The target SIP media application and other details, such as priority and AWS Region, to be specified in the SIP rule. Only one SIP rule per AWS Region can be provided.</p>
    pub target_applications: ::std::option::Option<::std::vec::Vec<crate::types::SipRuleTargetApplication>>,
    /// <p>The time at which the SIP rule was created, in ISO 8601 format.</p>
    pub created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time at which the SIP rule was updated, in ISO 8601 format.</p>
    pub updated_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl SipRule {
    /// <p>A SIP rule's ID.</p>
    pub fn sip_rule_id(&self) -> ::std::option::Option<&str> {
        self.sip_rule_id.as_deref()
    }
    /// <p>A SIP rule's name.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Indicates whether the SIP rule is enabled or disabled. You must disable a rule before you can delete it.</p>
    pub fn disabled(&self) -> ::std::option::Option<bool> {
        self.disabled
    }
    /// <p>The type of trigger set for a SIP rule, either a phone number or a URI request host name.</p>
    pub fn trigger_type(&self) -> ::std::option::Option<&crate::types::SipRuleTriggerType> {
        self.trigger_type.as_ref()
    }
    /// <p>The value set for a SIP rule's trigger type. Either a phone number or a URI hostname.</p>
    pub fn trigger_value(&self) -> ::std::option::Option<&str> {
        self.trigger_value.as_deref()
    }
    /// <p>The target SIP media application and other details, such as priority and AWS Region, to be specified in the SIP rule. Only one SIP rule per AWS Region can be provided.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.target_applications.is_none()`.
    pub fn target_applications(&self) -> &[crate::types::SipRuleTargetApplication] {
        self.target_applications.as_deref().unwrap_or_default()
    }
    /// <p>The time at which the SIP rule was created, in ISO 8601 format.</p>
    pub fn created_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_timestamp.as_ref()
    }
    /// <p>The time at which the SIP rule was updated, in ISO 8601 format.</p>
    pub fn updated_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_timestamp.as_ref()
    }
}
impl SipRule {
    /// Creates a new builder-style object to manufacture [`SipRule`](crate::types::SipRule).
    pub fn builder() -> crate::types::builders::SipRuleBuilder {
        crate::types::builders::SipRuleBuilder::default()
    }
}

/// A builder for [`SipRule`](crate::types::SipRule).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SipRuleBuilder {
    pub(crate) sip_rule_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) disabled: ::std::option::Option<bool>,
    pub(crate) trigger_type: ::std::option::Option<crate::types::SipRuleTriggerType>,
    pub(crate) trigger_value: ::std::option::Option<::std::string::String>,
    pub(crate) target_applications: ::std::option::Option<::std::vec::Vec<crate::types::SipRuleTargetApplication>>,
    pub(crate) created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl SipRuleBuilder {
    /// <p>A SIP rule's ID.</p>
    pub fn sip_rule_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sip_rule_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A SIP rule's ID.</p>
    pub fn set_sip_rule_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sip_rule_id = input;
        self
    }
    /// <p>A SIP rule's ID.</p>
    pub fn get_sip_rule_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.sip_rule_id
    }
    /// <p>A SIP rule's name.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A SIP rule's name.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A SIP rule's name.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Indicates whether the SIP rule is enabled or disabled. You must disable a rule before you can delete it.</p>
    pub fn disabled(mut self, input: bool) -> Self {
        self.disabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the SIP rule is enabled or disabled. You must disable a rule before you can delete it.</p>
    pub fn set_disabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.disabled = input;
        self
    }
    /// <p>Indicates whether the SIP rule is enabled or disabled. You must disable a rule before you can delete it.</p>
    pub fn get_disabled(&self) -> &::std::option::Option<bool> {
        &self.disabled
    }
    /// <p>The type of trigger set for a SIP rule, either a phone number or a URI request host name.</p>
    pub fn trigger_type(mut self, input: crate::types::SipRuleTriggerType) -> Self {
        self.trigger_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of trigger set for a SIP rule, either a phone number or a URI request host name.</p>
    pub fn set_trigger_type(mut self, input: ::std::option::Option<crate::types::SipRuleTriggerType>) -> Self {
        self.trigger_type = input;
        self
    }
    /// <p>The type of trigger set for a SIP rule, either a phone number or a URI request host name.</p>
    pub fn get_trigger_type(&self) -> &::std::option::Option<crate::types::SipRuleTriggerType> {
        &self.trigger_type
    }
    /// <p>The value set for a SIP rule's trigger type. Either a phone number or a URI hostname.</p>
    pub fn trigger_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.trigger_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value set for a SIP rule's trigger type. Either a phone number or a URI hostname.</p>
    pub fn set_trigger_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.trigger_value = input;
        self
    }
    /// <p>The value set for a SIP rule's trigger type. Either a phone number or a URI hostname.</p>
    pub fn get_trigger_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.trigger_value
    }
    /// Appends an item to `target_applications`.
    ///
    /// To override the contents of this collection use [`set_target_applications`](Self::set_target_applications).
    ///
    /// <p>The target SIP media application and other details, such as priority and AWS Region, to be specified in the SIP rule. Only one SIP rule per AWS Region can be provided.</p>
    pub fn target_applications(mut self, input: crate::types::SipRuleTargetApplication) -> Self {
        let mut v = self.target_applications.unwrap_or_default();
        v.push(input);
        self.target_applications = ::std::option::Option::Some(v);
        self
    }
    /// <p>The target SIP media application and other details, such as priority and AWS Region, to be specified in the SIP rule. Only one SIP rule per AWS Region can be provided.</p>
    pub fn set_target_applications(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SipRuleTargetApplication>>) -> Self {
        self.target_applications = input;
        self
    }
    /// <p>The target SIP media application and other details, such as priority and AWS Region, to be specified in the SIP rule. Only one SIP rule per AWS Region can be provided.</p>
    pub fn get_target_applications(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SipRuleTargetApplication>> {
        &self.target_applications
    }
    /// <p>The time at which the SIP rule was created, in ISO 8601 format.</p>
    pub fn created_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the SIP rule was created, in ISO 8601 format.</p>
    pub fn set_created_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_timestamp = input;
        self
    }
    /// <p>The time at which the SIP rule was created, in ISO 8601 format.</p>
    pub fn get_created_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_timestamp
    }
    /// <p>The time at which the SIP rule was updated, in ISO 8601 format.</p>
    pub fn updated_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the SIP rule was updated, in ISO 8601 format.</p>
    pub fn set_updated_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_timestamp = input;
        self
    }
    /// <p>The time at which the SIP rule was updated, in ISO 8601 format.</p>
    pub fn get_updated_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_timestamp
    }
    /// Consumes the builder and constructs a [`SipRule`](crate::types::SipRule).
    pub fn build(self) -> crate::types::SipRule {
        crate::types::SipRule {
            sip_rule_id: self.sip_rule_id,
            name: self.name,
            disabled: self.disabled,
            trigger_type: self.trigger_type,
            trigger_value: self.trigger_value,
            target_applications: self.target_applications,
            created_timestamp: self.created_timestamp,
            updated_timestamp: self.updated_timestamp,
        }
    }
}
