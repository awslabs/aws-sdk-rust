// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PhoneNumberCountry {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub country_code: std::option::Option<std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub supported_phone_number_types:
        std::option::Option<std::vec::Vec<crate::types::PhoneNumberType>>,
}
impl PhoneNumberCountry {
    #[allow(missing_docs)] // documentation missing in model
    pub fn country_code(&self) -> std::option::Option<&str> {
        self.country_code.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn supported_phone_number_types(
        &self,
    ) -> std::option::Option<&[crate::types::PhoneNumberType]> {
        self.supported_phone_number_types.as_deref()
    }
}
impl PhoneNumberCountry {
    /// Creates a new builder-style object to manufacture [`PhoneNumberCountry`](crate::types::PhoneNumberCountry).
    pub fn builder() -> crate::types::builders::PhoneNumberCountryBuilder {
        crate::types::builders::PhoneNumberCountryBuilder::default()
    }
}

/// A builder for [`PhoneNumberCountry`](crate::types::PhoneNumberCountry).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PhoneNumberCountryBuilder {
    pub(crate) country_code: std::option::Option<std::string::String>,
    pub(crate) supported_phone_number_types:
        std::option::Option<std::vec::Vec<crate::types::PhoneNumberType>>,
}
impl PhoneNumberCountryBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn country_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.country_code = Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_country_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.country_code = input;
        self
    }
    /// Appends an item to `supported_phone_number_types`.
    ///
    /// To override the contents of this collection use [`set_supported_phone_number_types`](Self::set_supported_phone_number_types).
    ///
    pub fn supported_phone_number_types(mut self, input: crate::types::PhoneNumberType) -> Self {
        let mut v = self.supported_phone_number_types.unwrap_or_default();
        v.push(input);
        self.supported_phone_number_types = Some(v);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_supported_phone_number_types(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PhoneNumberType>>,
    ) -> Self {
        self.supported_phone_number_types = input;
        self
    }
    /// Consumes the builder and constructs a [`PhoneNumberCountry`](crate::types::PhoneNumberCountry).
    pub fn build(self) -> crate::types::PhoneNumberCountry {
        crate::types::PhoneNumberCountry {
            country_code: self.country_code,
            supported_phone_number_types: self.supported_phone_number_types,
        }
    }
}
