// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The phone number's country.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PhoneNumberCountry {
    /// <p>The phone number country code. Format: ISO 3166-1 alpha-2.</p>
    pub country_code: ::std::option::Option<::std::string::String>,
    /// <p>The supported phone number types.</p>
    pub supported_phone_number_types: ::std::option::Option<::std::vec::Vec<crate::types::PhoneNumberType>>,
}
impl PhoneNumberCountry {
    /// <p>The phone number country code. Format: ISO 3166-1 alpha-2.</p>
    pub fn country_code(&self) -> ::std::option::Option<&str> {
        self.country_code.as_deref()
    }
    /// <p>The supported phone number types.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.supported_phone_number_types.is_none()`.
    pub fn supported_phone_number_types(&self) -> &[crate::types::PhoneNumberType] {
        self.supported_phone_number_types.as_deref().unwrap_or_default()
    }
}
impl PhoneNumberCountry {
    /// Creates a new builder-style object to manufacture [`PhoneNumberCountry`](crate::types::PhoneNumberCountry).
    pub fn builder() -> crate::types::builders::PhoneNumberCountryBuilder {
        crate::types::builders::PhoneNumberCountryBuilder::default()
    }
}

/// A builder for [`PhoneNumberCountry`](crate::types::PhoneNumberCountry).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PhoneNumberCountryBuilder {
    pub(crate) country_code: ::std::option::Option<::std::string::String>,
    pub(crate) supported_phone_number_types: ::std::option::Option<::std::vec::Vec<crate::types::PhoneNumberType>>,
}
impl PhoneNumberCountryBuilder {
    /// <p>The phone number country code. Format: ISO 3166-1 alpha-2.</p>
    pub fn country_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.country_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The phone number country code. Format: ISO 3166-1 alpha-2.</p>
    pub fn set_country_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.country_code = input;
        self
    }
    /// <p>The phone number country code. Format: ISO 3166-1 alpha-2.</p>
    pub fn get_country_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.country_code
    }
    /// Appends an item to `supported_phone_number_types`.
    ///
    /// To override the contents of this collection use [`set_supported_phone_number_types`](Self::set_supported_phone_number_types).
    ///
    /// <p>The supported phone number types.</p>
    pub fn supported_phone_number_types(mut self, input: crate::types::PhoneNumberType) -> Self {
        let mut v = self.supported_phone_number_types.unwrap_or_default();
        v.push(input);
        self.supported_phone_number_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The supported phone number types.</p>
    pub fn set_supported_phone_number_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PhoneNumberType>>) -> Self {
        self.supported_phone_number_types = input;
        self
    }
    /// <p>The supported phone number types.</p>
    pub fn get_supported_phone_number_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PhoneNumberType>> {
        &self.supported_phone_number_types
    }
    /// Consumes the builder and constructs a [`PhoneNumberCountry`](crate::types::PhoneNumberCountry).
    pub fn build(self) -> crate::types::PhoneNumberCountry {
        crate::types::PhoneNumberCountry {
            country_code: self.country_code,
            supported_phone_number_types: self.supported_phone_number_types,
        }
    }
}
