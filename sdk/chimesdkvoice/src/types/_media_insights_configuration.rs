// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for a call analytics task.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct MediaInsightsConfiguration {
    /// <p>Denotes the configuration as enabled or disabled.</p>
    pub disabled: ::std::option::Option<bool>,
    /// <p>The configuration's ARN.</p>
    pub configuration_arn: ::std::option::Option<::std::string::String>,
}
impl MediaInsightsConfiguration {
    /// <p>Denotes the configuration as enabled or disabled.</p>
    pub fn disabled(&self) -> ::std::option::Option<bool> {
        self.disabled
    }
    /// <p>The configuration's ARN.</p>
    pub fn configuration_arn(&self) -> ::std::option::Option<&str> {
        self.configuration_arn.as_deref()
    }
}
impl ::std::fmt::Debug for MediaInsightsConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("MediaInsightsConfiguration");
        formatter.field("disabled", &self.disabled);
        formatter.field("configuration_arn", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl MediaInsightsConfiguration {
    /// Creates a new builder-style object to manufacture [`MediaInsightsConfiguration`](crate::types::MediaInsightsConfiguration).
    pub fn builder() -> crate::types::builders::MediaInsightsConfigurationBuilder {
        crate::types::builders::MediaInsightsConfigurationBuilder::default()
    }
}

/// A builder for [`MediaInsightsConfiguration`](crate::types::MediaInsightsConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct MediaInsightsConfigurationBuilder {
    pub(crate) disabled: ::std::option::Option<bool>,
    pub(crate) configuration_arn: ::std::option::Option<::std::string::String>,
}
impl MediaInsightsConfigurationBuilder {
    /// <p>Denotes the configuration as enabled or disabled.</p>
    pub fn disabled(mut self, input: bool) -> Self {
        self.disabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Denotes the configuration as enabled or disabled.</p>
    pub fn set_disabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.disabled = input;
        self
    }
    /// <p>Denotes the configuration as enabled or disabled.</p>
    pub fn get_disabled(&self) -> &::std::option::Option<bool> {
        &self.disabled
    }
    /// <p>The configuration's ARN.</p>
    pub fn configuration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.configuration_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The configuration's ARN.</p>
    pub fn set_configuration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.configuration_arn = input;
        self
    }
    /// <p>The configuration's ARN.</p>
    pub fn get_configuration_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.configuration_arn
    }
    /// Consumes the builder and constructs a [`MediaInsightsConfiguration`](crate::types::MediaInsightsConfiguration).
    pub fn build(self) -> crate::types::MediaInsightsConfiguration {
        crate::types::MediaInsightsConfiguration {
            disabled: self.disabled,
            configuration_arn: self.configuration_arn,
        }
    }
}
impl ::std::fmt::Debug for MediaInsightsConfigurationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("MediaInsightsConfigurationBuilder");
        formatter.field("disabled", &self.disabled);
        formatter.field("configuration_arn", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
