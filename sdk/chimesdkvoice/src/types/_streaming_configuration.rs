// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StreamingConfiguration {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub data_retention_in_hours: std::option::Option<i32>,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub disabled: std::option::Option<bool>,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub streaming_notification_targets:
        std::option::Option<std::vec::Vec<crate::types::StreamingNotificationTarget>>,
}
impl StreamingConfiguration {
    #[allow(missing_docs)] // documentation missing in model
    pub fn data_retention_in_hours(&self) -> std::option::Option<i32> {
        self.data_retention_in_hours
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn disabled(&self) -> std::option::Option<bool> {
        self.disabled
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn streaming_notification_targets(
        &self,
    ) -> std::option::Option<&[crate::types::StreamingNotificationTarget]> {
        self.streaming_notification_targets.as_deref()
    }
}
impl StreamingConfiguration {
    /// Creates a new builder-style object to manufacture [`StreamingConfiguration`](crate::types::StreamingConfiguration).
    pub fn builder() -> crate::types::builders::StreamingConfigurationBuilder {
        crate::types::builders::StreamingConfigurationBuilder::default()
    }
}

/// A builder for [`StreamingConfiguration`](crate::types::StreamingConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StreamingConfigurationBuilder {
    pub(crate) data_retention_in_hours: std::option::Option<i32>,
    pub(crate) disabled: std::option::Option<bool>,
    pub(crate) streaming_notification_targets:
        std::option::Option<std::vec::Vec<crate::types::StreamingNotificationTarget>>,
}
impl StreamingConfigurationBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn data_retention_in_hours(mut self, input: i32) -> Self {
        self.data_retention_in_hours = Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_data_retention_in_hours(mut self, input: std::option::Option<i32>) -> Self {
        self.data_retention_in_hours = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn disabled(mut self, input: bool) -> Self {
        self.disabled = Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_disabled(mut self, input: std::option::Option<bool>) -> Self {
        self.disabled = input;
        self
    }
    /// Appends an item to `streaming_notification_targets`.
    ///
    /// To override the contents of this collection use [`set_streaming_notification_targets`](Self::set_streaming_notification_targets).
    ///
    pub fn streaming_notification_targets(
        mut self,
        input: crate::types::StreamingNotificationTarget,
    ) -> Self {
        let mut v = self.streaming_notification_targets.unwrap_or_default();
        v.push(input);
        self.streaming_notification_targets = Some(v);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_streaming_notification_targets(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::StreamingNotificationTarget>>,
    ) -> Self {
        self.streaming_notification_targets = input;
        self
    }
    /// Consumes the builder and constructs a [`StreamingConfiguration`](crate::types::StreamingConfiguration).
    pub fn build(self) -> crate::types::StreamingConfiguration {
        crate::types::StreamingConfiguration {
            data_retention_in_hours: self.data_retention_in_hours,
            disabled: self.disabled,
            streaming_notification_targets: self.streaming_notification_targets,
        }
    }
}
