// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of the SIP media application, including name and endpoints. An AWS account can have multiple SIP media applications.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SipMediaApplication {
    /// <p>A SIP media application's ID.</p>
    pub sip_media_application_id: ::std::option::Option<::std::string::String>,
    /// <p>The AWS Region in which the SIP media application is created.</p>
    pub aws_region: ::std::option::Option<::std::string::String>,
    /// <p>The SIP media application's name.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>List of endpoints for a SIP media application. Currently, only one endpoint per SIP media application is permitted.</p>
    pub endpoints: ::std::option::Option<::std::vec::Vec<crate::types::SipMediaApplicationEndpoint>>,
    /// <p>The SIP media application creation timestamp, in ISO 8601 format.</p>
    pub created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time at which the SIP media application was updated.</p>
    pub updated_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The ARN of the SIP media application.</p>
    pub sip_media_application_arn: ::std::option::Option<::std::string::String>,
}
impl SipMediaApplication {
    /// <p>A SIP media application's ID.</p>
    pub fn sip_media_application_id(&self) -> ::std::option::Option<&str> {
        self.sip_media_application_id.as_deref()
    }
    /// <p>The AWS Region in which the SIP media application is created.</p>
    pub fn aws_region(&self) -> ::std::option::Option<&str> {
        self.aws_region.as_deref()
    }
    /// <p>The SIP media application's name.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>List of endpoints for a SIP media application. Currently, only one endpoint per SIP media application is permitted.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.endpoints.is_none()`.
    pub fn endpoints(&self) -> &[crate::types::SipMediaApplicationEndpoint] {
        self.endpoints.as_deref().unwrap_or_default()
    }
    /// <p>The SIP media application creation timestamp, in ISO 8601 format.</p>
    pub fn created_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_timestamp.as_ref()
    }
    /// <p>The time at which the SIP media application was updated.</p>
    pub fn updated_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_timestamp.as_ref()
    }
    /// <p>The ARN of the SIP media application.</p>
    pub fn sip_media_application_arn(&self) -> ::std::option::Option<&str> {
        self.sip_media_application_arn.as_deref()
    }
}
impl SipMediaApplication {
    /// Creates a new builder-style object to manufacture [`SipMediaApplication`](crate::types::SipMediaApplication).
    pub fn builder() -> crate::types::builders::SipMediaApplicationBuilder {
        crate::types::builders::SipMediaApplicationBuilder::default()
    }
}

/// A builder for [`SipMediaApplication`](crate::types::SipMediaApplication).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SipMediaApplicationBuilder {
    pub(crate) sip_media_application_id: ::std::option::Option<::std::string::String>,
    pub(crate) aws_region: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) endpoints: ::std::option::Option<::std::vec::Vec<crate::types::SipMediaApplicationEndpoint>>,
    pub(crate) created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) sip_media_application_arn: ::std::option::Option<::std::string::String>,
}
impl SipMediaApplicationBuilder {
    /// <p>A SIP media application's ID.</p>
    pub fn sip_media_application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sip_media_application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A SIP media application's ID.</p>
    pub fn set_sip_media_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sip_media_application_id = input;
        self
    }
    /// <p>A SIP media application's ID.</p>
    pub fn get_sip_media_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.sip_media_application_id
    }
    /// <p>The AWS Region in which the SIP media application is created.</p>
    pub fn aws_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The AWS Region in which the SIP media application is created.</p>
    pub fn set_aws_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_region = input;
        self
    }
    /// <p>The AWS Region in which the SIP media application is created.</p>
    pub fn get_aws_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_region
    }
    /// <p>The SIP media application's name.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The SIP media application's name.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The SIP media application's name.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `endpoints`.
    ///
    /// To override the contents of this collection use [`set_endpoints`](Self::set_endpoints).
    ///
    /// <p>List of endpoints for a SIP media application. Currently, only one endpoint per SIP media application is permitted.</p>
    pub fn endpoints(mut self, input: crate::types::SipMediaApplicationEndpoint) -> Self {
        let mut v = self.endpoints.unwrap_or_default();
        v.push(input);
        self.endpoints = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of endpoints for a SIP media application. Currently, only one endpoint per SIP media application is permitted.</p>
    pub fn set_endpoints(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SipMediaApplicationEndpoint>>) -> Self {
        self.endpoints = input;
        self
    }
    /// <p>List of endpoints for a SIP media application. Currently, only one endpoint per SIP media application is permitted.</p>
    pub fn get_endpoints(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SipMediaApplicationEndpoint>> {
        &self.endpoints
    }
    /// <p>The SIP media application creation timestamp, in ISO 8601 format.</p>
    pub fn created_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The SIP media application creation timestamp, in ISO 8601 format.</p>
    pub fn set_created_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_timestamp = input;
        self
    }
    /// <p>The SIP media application creation timestamp, in ISO 8601 format.</p>
    pub fn get_created_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_timestamp
    }
    /// <p>The time at which the SIP media application was updated.</p>
    pub fn updated_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the SIP media application was updated.</p>
    pub fn set_updated_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_timestamp = input;
        self
    }
    /// <p>The time at which the SIP media application was updated.</p>
    pub fn get_updated_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_timestamp
    }
    /// <p>The ARN of the SIP media application.</p>
    pub fn sip_media_application_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sip_media_application_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the SIP media application.</p>
    pub fn set_sip_media_application_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sip_media_application_arn = input;
        self
    }
    /// <p>The ARN of the SIP media application.</p>
    pub fn get_sip_media_application_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.sip_media_application_arn
    }
    /// Consumes the builder and constructs a [`SipMediaApplication`](crate::types::SipMediaApplication).
    pub fn build(self) -> crate::types::SipMediaApplication {
        crate::types::SipMediaApplication {
            sip_media_application_id: self.sip_media_application_id,
            aws_region: self.aws_region,
            name: self.name,
            endpoints: self.endpoints,
            created_timestamp: self.created_timestamp,
            updated_timestamp: self.updated_timestamp,
            sip_media_application_arn: self.sip_media_application_arn,
        }
    }
}
