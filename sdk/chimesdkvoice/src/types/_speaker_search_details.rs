// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of a speaker search task.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SpeakerSearchDetails {
    /// <p>The result value in the speaker search details.</p>
    pub results: ::std::option::Option<::std::vec::Vec<crate::types::SpeakerSearchResult>>,
    /// <p>The status of a voice print generation operation, <code>VoiceprintGenerationSuccess</code> or <code>VoiceprintGenerationFailure</code>..</p>
    pub voiceprint_generation_status: ::std::option::Option<::std::string::String>,
}
impl SpeakerSearchDetails {
    /// <p>The result value in the speaker search details.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.results.is_none()`.
    pub fn results(&self) -> &[crate::types::SpeakerSearchResult] {
        self.results.as_deref().unwrap_or_default()
    }
    /// <p>The status of a voice print generation operation, <code>VoiceprintGenerationSuccess</code> or <code>VoiceprintGenerationFailure</code>..</p>
    pub fn voiceprint_generation_status(&self) -> ::std::option::Option<&str> {
        self.voiceprint_generation_status.as_deref()
    }
}
impl SpeakerSearchDetails {
    /// Creates a new builder-style object to manufacture [`SpeakerSearchDetails`](crate::types::SpeakerSearchDetails).
    pub fn builder() -> crate::types::builders::SpeakerSearchDetailsBuilder {
        crate::types::builders::SpeakerSearchDetailsBuilder::default()
    }
}

/// A builder for [`SpeakerSearchDetails`](crate::types::SpeakerSearchDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SpeakerSearchDetailsBuilder {
    pub(crate) results: ::std::option::Option<::std::vec::Vec<crate::types::SpeakerSearchResult>>,
    pub(crate) voiceprint_generation_status: ::std::option::Option<::std::string::String>,
}
impl SpeakerSearchDetailsBuilder {
    /// Appends an item to `results`.
    ///
    /// To override the contents of this collection use [`set_results`](Self::set_results).
    ///
    /// <p>The result value in the speaker search details.</p>
    pub fn results(mut self, input: crate::types::SpeakerSearchResult) -> Self {
        let mut v = self.results.unwrap_or_default();
        v.push(input);
        self.results = ::std::option::Option::Some(v);
        self
    }
    /// <p>The result value in the speaker search details.</p>
    pub fn set_results(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SpeakerSearchResult>>) -> Self {
        self.results = input;
        self
    }
    /// <p>The result value in the speaker search details.</p>
    pub fn get_results(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SpeakerSearchResult>> {
        &self.results
    }
    /// <p>The status of a voice print generation operation, <code>VoiceprintGenerationSuccess</code> or <code>VoiceprintGenerationFailure</code>..</p>
    pub fn voiceprint_generation_status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.voiceprint_generation_status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of a voice print generation operation, <code>VoiceprintGenerationSuccess</code> or <code>VoiceprintGenerationFailure</code>..</p>
    pub fn set_voiceprint_generation_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.voiceprint_generation_status = input;
        self
    }
    /// <p>The status of a voice print generation operation, <code>VoiceprintGenerationSuccess</code> or <code>VoiceprintGenerationFailure</code>..</p>
    pub fn get_voiceprint_generation_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.voiceprint_generation_status
    }
    /// Consumes the builder and constructs a [`SpeakerSearchDetails`](crate::types::SpeakerSearchDetails).
    pub fn build(self) -> crate::types::SpeakerSearchDetails {
        crate::types::SpeakerSearchDetails {
            results: self.results,
            voiceprint_generation_status: self.voiceprint_generation_status,
        }
    }
}
