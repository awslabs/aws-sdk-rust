// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Fluent builder constructing a request to `AssociatePhoneNumbersWithVoiceConnector`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct AssociatePhoneNumbersWithVoiceConnector {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::associate_phone_numbers_with_voice_connector_input::Builder,
}
impl AssociatePhoneNumbersWithVoiceConnector {
    /// Creates a new `AssociatePhoneNumbersWithVoiceConnector`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::AssociatePhoneNumbersWithVoiceConnector,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::error::AssociatePhoneNumbersWithVoiceConnectorError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::AssociatePhoneNumbersWithVoiceConnectorOutput,
        aws_smithy_http::result::SdkError<
            crate::error::AssociatePhoneNumbersWithVoiceConnectorError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.voice_connector_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_voice_connector_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_voice_connector_id(input);
        self
    }
    /// Appends an item to `E164PhoneNumbers`.
    ///
    /// To override the contents of this collection use [`set_e164_phone_numbers`](Self::set_e164_phone_numbers).
    ///
    #[allow(missing_docs)] // documentation missing in model
    pub fn e164_phone_numbers(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.e164_phone_numbers(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_e164_phone_numbers(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_e164_phone_numbers(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn force_associate(mut self, input: bool) -> Self {
        self.inner = self.inner.force_associate(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_force_associate(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_force_associate(input);
        self
    }
}

/// Fluent builder constructing a request to `AssociatePhoneNumbersWithVoiceConnectorGroup`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct AssociatePhoneNumbersWithVoiceConnectorGroup {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::associate_phone_numbers_with_voice_connector_group_input::Builder,
}
impl AssociatePhoneNumbersWithVoiceConnectorGroup {
    /// Creates a new `AssociatePhoneNumbersWithVoiceConnectorGroup`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::AssociatePhoneNumbersWithVoiceConnectorGroup,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::AssociatePhoneNumbersWithVoiceConnectorGroupOutput,
        aws_smithy_http::result::SdkError<
            crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_group_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.voice_connector_group_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_voice_connector_group_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_voice_connector_group_id(input);
        self
    }
    /// Appends an item to `E164PhoneNumbers`.
    ///
    /// To override the contents of this collection use [`set_e164_phone_numbers`](Self::set_e164_phone_numbers).
    ///
    #[allow(missing_docs)] // documentation missing in model
    pub fn e164_phone_numbers(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.e164_phone_numbers(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_e164_phone_numbers(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_e164_phone_numbers(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn force_associate(mut self, input: bool) -> Self {
        self.inner = self.inner.force_associate(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_force_associate(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_force_associate(input);
        self
    }
}

/// Fluent builder constructing a request to `BatchDeletePhoneNumber`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct BatchDeletePhoneNumber {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::batch_delete_phone_number_input::Builder,
}
impl BatchDeletePhoneNumber {
    /// Creates a new `BatchDeletePhoneNumber`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::BatchDeletePhoneNumber,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::BatchDeletePhoneNumberError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::BatchDeletePhoneNumberOutput,
        aws_smithy_http::result::SdkError<crate::error::BatchDeletePhoneNumberError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `PhoneNumberIds`.
    ///
    /// To override the contents of this collection use [`set_phone_number_ids`](Self::set_phone_number_ids).
    ///
    #[allow(missing_docs)] // documentation missing in model
    pub fn phone_number_ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.phone_number_ids(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_phone_number_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_phone_number_ids(input);
        self
    }
}

/// Fluent builder constructing a request to `BatchUpdatePhoneNumber`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct BatchUpdatePhoneNumber {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::batch_update_phone_number_input::Builder,
}
impl BatchUpdatePhoneNumber {
    /// Creates a new `BatchUpdatePhoneNumber`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::BatchUpdatePhoneNumber,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::BatchUpdatePhoneNumberError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::BatchUpdatePhoneNumberOutput,
        aws_smithy_http::result::SdkError<crate::error::BatchUpdatePhoneNumberError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `UpdatePhoneNumberRequestItems`.
    ///
    /// To override the contents of this collection use [`set_update_phone_number_request_items`](Self::set_update_phone_number_request_items).
    ///
    #[allow(missing_docs)] // documentation missing in model
    pub fn update_phone_number_request_items(
        mut self,
        input: crate::model::UpdatePhoneNumberRequestItem,
    ) -> Self {
        self.inner = self.inner.update_phone_number_request_items(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_update_phone_number_request_items(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::UpdatePhoneNumberRequestItem>>,
    ) -> Self {
        self.inner = self.inner.set_update_phone_number_request_items(input);
        self
    }
}

/// Fluent builder constructing a request to `CreatePhoneNumberOrder`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreatePhoneNumberOrder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_phone_number_order_input::Builder,
}
impl CreatePhoneNumberOrder {
    /// Creates a new `CreatePhoneNumberOrder`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreatePhoneNumberOrder,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreatePhoneNumberOrderError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreatePhoneNumberOrderOutput,
        aws_smithy_http::result::SdkError<crate::error::CreatePhoneNumberOrderError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn product_type(mut self, input: crate::model::PhoneNumberProductType) -> Self {
        self.inner = self.inner.product_type(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_product_type(
        mut self,
        input: std::option::Option<crate::model::PhoneNumberProductType>,
    ) -> Self {
        self.inner = self.inner.set_product_type(input);
        self
    }
    /// Appends an item to `E164PhoneNumbers`.
    ///
    /// To override the contents of this collection use [`set_e164_phone_numbers`](Self::set_e164_phone_numbers).
    ///
    #[allow(missing_docs)] // documentation missing in model
    pub fn e164_phone_numbers(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.e164_phone_numbers(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_e164_phone_numbers(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_e164_phone_numbers(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateProxySession`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateProxySession {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_proxy_session_input::Builder,
}
impl CreateProxySession {
    /// Creates a new `CreateProxySession`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateProxySession,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateProxySessionError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateProxySessionOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateProxySessionError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.voice_connector_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_voice_connector_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_voice_connector_id(input);
        self
    }
    /// Appends an item to `ParticipantPhoneNumbers`.
    ///
    /// To override the contents of this collection use [`set_participant_phone_numbers`](Self::set_participant_phone_numbers).
    ///
    #[allow(missing_docs)] // documentation missing in model
    pub fn participant_phone_numbers(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.participant_phone_numbers(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_participant_phone_numbers(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_participant_phone_numbers(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn expiry_minutes(mut self, input: i32) -> Self {
        self.inner = self.inner.expiry_minutes(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_expiry_minutes(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_expiry_minutes(input);
        self
    }
    /// Appends an item to `Capabilities`.
    ///
    /// To override the contents of this collection use [`set_capabilities`](Self::set_capabilities).
    ///
    #[allow(missing_docs)] // documentation missing in model
    pub fn capabilities(mut self, input: crate::model::Capability) -> Self {
        self.inner = self.inner.capabilities(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_capabilities(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Capability>>,
    ) -> Self {
        self.inner = self.inner.set_capabilities(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn number_selection_behavior(
        mut self,
        input: crate::model::NumberSelectionBehavior,
    ) -> Self {
        self.inner = self.inner.number_selection_behavior(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_number_selection_behavior(
        mut self,
        input: std::option::Option<crate::model::NumberSelectionBehavior>,
    ) -> Self {
        self.inner = self.inner.set_number_selection_behavior(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn geo_match_level(mut self, input: crate::model::GeoMatchLevel) -> Self {
        self.inner = self.inner.geo_match_level(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_geo_match_level(
        mut self,
        input: std::option::Option<crate::model::GeoMatchLevel>,
    ) -> Self {
        self.inner = self.inner.set_geo_match_level(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn geo_match_params(mut self, input: crate::model::GeoMatchParams) -> Self {
        self.inner = self.inner.geo_match_params(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_geo_match_params(
        mut self,
        input: std::option::Option<crate::model::GeoMatchParams>,
    ) -> Self {
        self.inner = self.inner.set_geo_match_params(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateSipMediaApplication`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateSipMediaApplication {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_sip_media_application_input::Builder,
}
impl CreateSipMediaApplication {
    /// Creates a new `CreateSipMediaApplication`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateSipMediaApplication,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateSipMediaApplicationError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateSipMediaApplicationOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateSipMediaApplicationError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn aws_region(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.aws_region(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_aws_region(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_aws_region(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// Appends an item to `Endpoints`.
    ///
    /// To override the contents of this collection use [`set_endpoints`](Self::set_endpoints).
    ///
    #[allow(missing_docs)] // documentation missing in model
    pub fn endpoints(mut self, input: crate::model::SipMediaApplicationEndpoint) -> Self {
        self.inner = self.inner.endpoints(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_endpoints(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::SipMediaApplicationEndpoint>>,
    ) -> Self {
        self.inner = self.inner.set_endpoints(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateSipMediaApplicationCall`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateSipMediaApplicationCall {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_sip_media_application_call_input::Builder,
}
impl CreateSipMediaApplicationCall {
    /// Creates a new `CreateSipMediaApplicationCall`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateSipMediaApplicationCall,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateSipMediaApplicationCallError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateSipMediaApplicationCallOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateSipMediaApplicationCallError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn from_phone_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.from_phone_number(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_from_phone_number(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_from_phone_number(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn to_phone_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.to_phone_number(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_to_phone_number(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_to_phone_number(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn sip_media_application_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sip_media_application_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_sip_media_application_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_sip_media_application_id(input);
        self
    }
    /// Adds a key-value pair to `SipHeaders`.
    ///
    /// To override the contents of this collection use [`set_sip_headers`](Self::set_sip_headers).
    ///
    #[allow(missing_docs)] // documentation missing in model
    pub fn sip_headers(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.sip_headers(k.into(), v.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_sip_headers(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_sip_headers(input);
        self
    }
    /// Adds a key-value pair to `ArgumentsMap`.
    ///
    /// To override the contents of this collection use [`set_arguments_map`](Self::set_arguments_map).
    ///
    #[allow(missing_docs)] // documentation missing in model
    pub fn arguments_map(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.arguments_map(k.into(), v.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_arguments_map(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_arguments_map(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateSipRule`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateSipRule {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_sip_rule_input::Builder,
}
impl CreateSipRule {
    /// Creates a new `CreateSipRule`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateSipRule,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateSipRuleError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateSipRuleOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateSipRuleError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn trigger_type(mut self, input: crate::model::SipRuleTriggerType) -> Self {
        self.inner = self.inner.trigger_type(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_trigger_type(
        mut self,
        input: std::option::Option<crate::model::SipRuleTriggerType>,
    ) -> Self {
        self.inner = self.inner.set_trigger_type(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn trigger_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.trigger_value(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_trigger_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_trigger_value(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn disabled(mut self, input: bool) -> Self {
        self.inner = self.inner.disabled(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_disabled(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_disabled(input);
        self
    }
    /// Appends an item to `TargetApplications`.
    ///
    /// To override the contents of this collection use [`set_target_applications`](Self::set_target_applications).
    ///
    #[allow(missing_docs)] // documentation missing in model
    pub fn target_applications(mut self, input: crate::model::SipRuleTargetApplication) -> Self {
        self.inner = self.inner.target_applications(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_target_applications(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::SipRuleTargetApplication>>,
    ) -> Self {
        self.inner = self.inner.set_target_applications(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateVoiceConnector`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateVoiceConnector {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_voice_connector_input::Builder,
}
impl CreateVoiceConnector {
    /// Creates a new `CreateVoiceConnector`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateVoiceConnector,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateVoiceConnectorError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateVoiceConnectorOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateVoiceConnectorError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn aws_region(mut self, input: crate::model::VoiceConnectorAwsRegion) -> Self {
        self.inner = self.inner.aws_region(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_aws_region(
        mut self,
        input: std::option::Option<crate::model::VoiceConnectorAwsRegion>,
    ) -> Self {
        self.inner = self.inner.set_aws_region(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn require_encryption(mut self, input: bool) -> Self {
        self.inner = self.inner.require_encryption(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_require_encryption(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_require_encryption(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateVoiceConnectorGroup`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateVoiceConnectorGroup {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_voice_connector_group_input::Builder,
}
impl CreateVoiceConnectorGroup {
    /// Creates a new `CreateVoiceConnectorGroup`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateVoiceConnectorGroup,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateVoiceConnectorGroupError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateVoiceConnectorGroupOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateVoiceConnectorGroupError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// Appends an item to `VoiceConnectorItems`.
    ///
    /// To override the contents of this collection use [`set_voice_connector_items`](Self::set_voice_connector_items).
    ///
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_items(mut self, input: crate::model::VoiceConnectorItem) -> Self {
        self.inner = self.inner.voice_connector_items(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_voice_connector_items(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::VoiceConnectorItem>>,
    ) -> Self {
        self.inner = self.inner.set_voice_connector_items(input);
        self
    }
}

/// Fluent builder constructing a request to `DeletePhoneNumber`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeletePhoneNumber {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_phone_number_input::Builder,
}
impl DeletePhoneNumber {
    /// Creates a new `DeletePhoneNumber`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeletePhoneNumber,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeletePhoneNumberError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeletePhoneNumberOutput,
        aws_smithy_http::result::SdkError<crate::error::DeletePhoneNumberError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn phone_number_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.phone_number_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_phone_number_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_phone_number_id(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteProxySession`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteProxySession {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_proxy_session_input::Builder,
}
impl DeleteProxySession {
    /// Creates a new `DeleteProxySession`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteProxySession,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteProxySessionError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteProxySessionOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteProxySessionError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.voice_connector_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_voice_connector_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_voice_connector_id(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn proxy_session_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.proxy_session_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_proxy_session_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_proxy_session_id(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteSipMediaApplication`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteSipMediaApplication {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_sip_media_application_input::Builder,
}
impl DeleteSipMediaApplication {
    /// Creates a new `DeleteSipMediaApplication`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteSipMediaApplication,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteSipMediaApplicationError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteSipMediaApplicationOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteSipMediaApplicationError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn sip_media_application_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sip_media_application_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_sip_media_application_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_sip_media_application_id(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteSipRule`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteSipRule {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_sip_rule_input::Builder,
}
impl DeleteSipRule {
    /// Creates a new `DeleteSipRule`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteSipRule,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteSipRuleError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteSipRuleOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteSipRuleError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn sip_rule_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sip_rule_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_sip_rule_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_sip_rule_id(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteVoiceConnector`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteVoiceConnector {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_voice_connector_input::Builder,
}
impl DeleteVoiceConnector {
    /// Creates a new `DeleteVoiceConnector`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteVoiceConnector,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteVoiceConnectorOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.voice_connector_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_voice_connector_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_voice_connector_id(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteVoiceConnectorEmergencyCallingConfiguration`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteVoiceConnectorEmergencyCallingConfiguration {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_voice_connector_emergency_calling_configuration_input::Builder,
}
impl DeleteVoiceConnectorEmergencyCallingConfiguration {
    /// Creates a new `DeleteVoiceConnectorEmergencyCallingConfiguration`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteVoiceConnectorEmergencyCallingConfiguration,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::error::DeleteVoiceConnectorEmergencyCallingConfigurationError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteVoiceConnectorEmergencyCallingConfigurationOutput,
        aws_smithy_http::result::SdkError<
            crate::error::DeleteVoiceConnectorEmergencyCallingConfigurationError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.voice_connector_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_voice_connector_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_voice_connector_id(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteVoiceConnectorGroup`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteVoiceConnectorGroup {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_voice_connector_group_input::Builder,
}
impl DeleteVoiceConnectorGroup {
    /// Creates a new `DeleteVoiceConnectorGroup`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteVoiceConnectorGroup,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorGroupError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteVoiceConnectorGroupOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorGroupError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_group_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.voice_connector_group_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_voice_connector_group_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_voice_connector_group_id(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteVoiceConnectorOrigination`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteVoiceConnectorOrigination {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_voice_connector_origination_input::Builder,
}
impl DeleteVoiceConnectorOrigination {
    /// Creates a new `DeleteVoiceConnectorOrigination`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteVoiceConnectorOrigination,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorOriginationError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteVoiceConnectorOriginationOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorOriginationError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.voice_connector_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_voice_connector_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_voice_connector_id(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteVoiceConnectorProxy`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteVoiceConnectorProxy {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_voice_connector_proxy_input::Builder,
}
impl DeleteVoiceConnectorProxy {
    /// Creates a new `DeleteVoiceConnectorProxy`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteVoiceConnectorProxy,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorProxyError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteVoiceConnectorProxyOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorProxyError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.voice_connector_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_voice_connector_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_voice_connector_id(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteVoiceConnectorStreamingConfiguration`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteVoiceConnectorStreamingConfiguration {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_voice_connector_streaming_configuration_input::Builder,
}
impl DeleteVoiceConnectorStreamingConfiguration {
    /// Creates a new `DeleteVoiceConnectorStreamingConfiguration`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteVoiceConnectorStreamingConfiguration,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::error::DeleteVoiceConnectorStreamingConfigurationError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteVoiceConnectorStreamingConfigurationOutput,
        aws_smithy_http::result::SdkError<
            crate::error::DeleteVoiceConnectorStreamingConfigurationError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.voice_connector_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_voice_connector_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_voice_connector_id(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteVoiceConnectorTermination`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteVoiceConnectorTermination {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_voice_connector_termination_input::Builder,
}
impl DeleteVoiceConnectorTermination {
    /// Creates a new `DeleteVoiceConnectorTermination`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteVoiceConnectorTermination,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorTerminationError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteVoiceConnectorTerminationOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteVoiceConnectorTerminationError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.voice_connector_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_voice_connector_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_voice_connector_id(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteVoiceConnectorTerminationCredentials`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteVoiceConnectorTerminationCredentials {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_voice_connector_termination_credentials_input::Builder,
}
impl DeleteVoiceConnectorTerminationCredentials {
    /// Creates a new `DeleteVoiceConnectorTerminationCredentials`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteVoiceConnectorTerminationCredentials,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::error::DeleteVoiceConnectorTerminationCredentialsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteVoiceConnectorTerminationCredentialsOutput,
        aws_smithy_http::result::SdkError<
            crate::error::DeleteVoiceConnectorTerminationCredentialsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.voice_connector_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_voice_connector_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_voice_connector_id(input);
        self
    }
    /// Appends an item to `Usernames`.
    ///
    /// To override the contents of this collection use [`set_usernames`](Self::set_usernames).
    ///
    #[allow(missing_docs)] // documentation missing in model
    pub fn usernames(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.usernames(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_usernames(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_usernames(input);
        self
    }
}

/// Fluent builder constructing a request to `DisassociatePhoneNumbersFromVoiceConnector`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DisassociatePhoneNumbersFromVoiceConnector {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::disassociate_phone_numbers_from_voice_connector_input::Builder,
}
impl DisassociatePhoneNumbersFromVoiceConnector {
    /// Creates a new `DisassociatePhoneNumbersFromVoiceConnector`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DisassociatePhoneNumbersFromVoiceConnector,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DisassociatePhoneNumbersFromVoiceConnectorOutput,
        aws_smithy_http::result::SdkError<
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.voice_connector_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_voice_connector_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_voice_connector_id(input);
        self
    }
    /// Appends an item to `E164PhoneNumbers`.
    ///
    /// To override the contents of this collection use [`set_e164_phone_numbers`](Self::set_e164_phone_numbers).
    ///
    #[allow(missing_docs)] // documentation missing in model
    pub fn e164_phone_numbers(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.e164_phone_numbers(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_e164_phone_numbers(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_e164_phone_numbers(input);
        self
    }
}

/// Fluent builder constructing a request to `DisassociatePhoneNumbersFromVoiceConnectorGroup`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DisassociatePhoneNumbersFromVoiceConnectorGroup {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::disassociate_phone_numbers_from_voice_connector_group_input::Builder,
}
impl DisassociatePhoneNumbersFromVoiceConnectorGroup {
    /// Creates a new `DisassociatePhoneNumbersFromVoiceConnectorGroup`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DisassociatePhoneNumbersFromVoiceConnectorGroup,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorGroupError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DisassociatePhoneNumbersFromVoiceConnectorGroupOutput,
        aws_smithy_http::result::SdkError<
            crate::error::DisassociatePhoneNumbersFromVoiceConnectorGroupError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_group_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.voice_connector_group_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_voice_connector_group_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_voice_connector_group_id(input);
        self
    }
    /// Appends an item to `E164PhoneNumbers`.
    ///
    /// To override the contents of this collection use [`set_e164_phone_numbers`](Self::set_e164_phone_numbers).
    ///
    #[allow(missing_docs)] // documentation missing in model
    pub fn e164_phone_numbers(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.e164_phone_numbers(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_e164_phone_numbers(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_e164_phone_numbers(input);
        self
    }
}

/// Fluent builder constructing a request to `GetGlobalSettings`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetGlobalSettings {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_global_settings_input::Builder,
}
impl GetGlobalSettings {
    /// Creates a new `GetGlobalSettings`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetGlobalSettings,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetGlobalSettingsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetGlobalSettingsOutput,
        aws_smithy_http::result::SdkError<crate::error::GetGlobalSettingsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
}

/// Fluent builder constructing a request to `GetPhoneNumber`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetPhoneNumber {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_phone_number_input::Builder,
}
impl GetPhoneNumber {
    /// Creates a new `GetPhoneNumber`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetPhoneNumber,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetPhoneNumberError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetPhoneNumberOutput,
        aws_smithy_http::result::SdkError<crate::error::GetPhoneNumberError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn phone_number_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.phone_number_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_phone_number_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_phone_number_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetPhoneNumberOrder`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetPhoneNumberOrder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_phone_number_order_input::Builder,
}
impl GetPhoneNumberOrder {
    /// Creates a new `GetPhoneNumberOrder`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetPhoneNumberOrder,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetPhoneNumberOrderError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetPhoneNumberOrderOutput,
        aws_smithy_http::result::SdkError<crate::error::GetPhoneNumberOrderError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn phone_number_order_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.phone_number_order_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_phone_number_order_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_phone_number_order_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetPhoneNumberSettings`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetPhoneNumberSettings {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_phone_number_settings_input::Builder,
}
impl GetPhoneNumberSettings {
    /// Creates a new `GetPhoneNumberSettings`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetPhoneNumberSettings,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetPhoneNumberSettingsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetPhoneNumberSettingsOutput,
        aws_smithy_http::result::SdkError<crate::error::GetPhoneNumberSettingsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
}

/// Fluent builder constructing a request to `GetProxySession`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetProxySession {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_proxy_session_input::Builder,
}
impl GetProxySession {
    /// Creates a new `GetProxySession`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetProxySession,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetProxySessionError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetProxySessionOutput,
        aws_smithy_http::result::SdkError<crate::error::GetProxySessionError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.voice_connector_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_voice_connector_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_voice_connector_id(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn proxy_session_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.proxy_session_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_proxy_session_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_proxy_session_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetSipMediaApplication`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetSipMediaApplication {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_sip_media_application_input::Builder,
}
impl GetSipMediaApplication {
    /// Creates a new `GetSipMediaApplication`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetSipMediaApplication,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetSipMediaApplicationError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetSipMediaApplicationOutput,
        aws_smithy_http::result::SdkError<crate::error::GetSipMediaApplicationError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn sip_media_application_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sip_media_application_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_sip_media_application_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_sip_media_application_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetSipMediaApplicationAlexaSkillConfiguration`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetSipMediaApplicationAlexaSkillConfiguration {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_sip_media_application_alexa_skill_configuration_input::Builder,
}
impl GetSipMediaApplicationAlexaSkillConfiguration {
    /// Creates a new `GetSipMediaApplicationAlexaSkillConfiguration`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetSipMediaApplicationAlexaSkillConfiguration,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::error::GetSipMediaApplicationAlexaSkillConfigurationError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetSipMediaApplicationAlexaSkillConfigurationOutput,
        aws_smithy_http::result::SdkError<
            crate::error::GetSipMediaApplicationAlexaSkillConfigurationError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn sip_media_application_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sip_media_application_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_sip_media_application_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_sip_media_application_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetSipMediaApplicationLoggingConfiguration`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetSipMediaApplicationLoggingConfiguration {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_sip_media_application_logging_configuration_input::Builder,
}
impl GetSipMediaApplicationLoggingConfiguration {
    /// Creates a new `GetSipMediaApplicationLoggingConfiguration`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetSipMediaApplicationLoggingConfiguration,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::error::GetSipMediaApplicationLoggingConfigurationError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetSipMediaApplicationLoggingConfigurationOutput,
        aws_smithy_http::result::SdkError<
            crate::error::GetSipMediaApplicationLoggingConfigurationError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn sip_media_application_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sip_media_application_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_sip_media_application_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_sip_media_application_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetSipRule`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetSipRule {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_sip_rule_input::Builder,
}
impl GetSipRule {
    /// Creates a new `GetSipRule`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetSipRule,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetSipRuleError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetSipRuleOutput,
        aws_smithy_http::result::SdkError<crate::error::GetSipRuleError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn sip_rule_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sip_rule_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_sip_rule_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_sip_rule_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetVoiceConnector`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetVoiceConnector {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_voice_connector_input::Builder,
}
impl GetVoiceConnector {
    /// Creates a new `GetVoiceConnector`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetVoiceConnector,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetVoiceConnectorOutput,
        aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.voice_connector_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_voice_connector_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_voice_connector_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetVoiceConnectorEmergencyCallingConfiguration`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetVoiceConnectorEmergencyCallingConfiguration {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_voice_connector_emergency_calling_configuration_input::Builder,
}
impl GetVoiceConnectorEmergencyCallingConfiguration {
    /// Creates a new `GetVoiceConnectorEmergencyCallingConfiguration`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetVoiceConnectorEmergencyCallingConfiguration,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::error::GetVoiceConnectorEmergencyCallingConfigurationError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetVoiceConnectorEmergencyCallingConfigurationOutput,
        aws_smithy_http::result::SdkError<
            crate::error::GetVoiceConnectorEmergencyCallingConfigurationError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.voice_connector_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_voice_connector_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_voice_connector_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetVoiceConnectorGroup`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetVoiceConnectorGroup {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_voice_connector_group_input::Builder,
}
impl GetVoiceConnectorGroup {
    /// Creates a new `GetVoiceConnectorGroup`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetVoiceConnectorGroup,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorGroupError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetVoiceConnectorGroupOutput,
        aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorGroupError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_group_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.voice_connector_group_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_voice_connector_group_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_voice_connector_group_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetVoiceConnectorLoggingConfiguration`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetVoiceConnectorLoggingConfiguration {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_voice_connector_logging_configuration_input::Builder,
}
impl GetVoiceConnectorLoggingConfiguration {
    /// Creates a new `GetVoiceConnectorLoggingConfiguration`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetVoiceConnectorLoggingConfiguration,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorLoggingConfigurationError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetVoiceConnectorLoggingConfigurationOutput,
        aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorLoggingConfigurationError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.voice_connector_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_voice_connector_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_voice_connector_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetVoiceConnectorOrigination`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetVoiceConnectorOrigination {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_voice_connector_origination_input::Builder,
}
impl GetVoiceConnectorOrigination {
    /// Creates a new `GetVoiceConnectorOrigination`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetVoiceConnectorOrigination,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorOriginationError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetVoiceConnectorOriginationOutput,
        aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorOriginationError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.voice_connector_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_voice_connector_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_voice_connector_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetVoiceConnectorProxy`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetVoiceConnectorProxy {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_voice_connector_proxy_input::Builder,
}
impl GetVoiceConnectorProxy {
    /// Creates a new `GetVoiceConnectorProxy`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetVoiceConnectorProxy,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorProxyError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetVoiceConnectorProxyOutput,
        aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorProxyError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.voice_connector_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_voice_connector_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_voice_connector_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetVoiceConnectorStreamingConfiguration`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetVoiceConnectorStreamingConfiguration {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_voice_connector_streaming_configuration_input::Builder,
}
impl GetVoiceConnectorStreamingConfiguration {
    /// Creates a new `GetVoiceConnectorStreamingConfiguration`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetVoiceConnectorStreamingConfiguration,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::error::GetVoiceConnectorStreamingConfigurationError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetVoiceConnectorStreamingConfigurationOutput,
        aws_smithy_http::result::SdkError<
            crate::error::GetVoiceConnectorStreamingConfigurationError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.voice_connector_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_voice_connector_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_voice_connector_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetVoiceConnectorTermination`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetVoiceConnectorTermination {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_voice_connector_termination_input::Builder,
}
impl GetVoiceConnectorTermination {
    /// Creates a new `GetVoiceConnectorTermination`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetVoiceConnectorTermination,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorTerminationError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetVoiceConnectorTerminationOutput,
        aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorTerminationError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.voice_connector_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_voice_connector_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_voice_connector_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetVoiceConnectorTerminationHealth`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetVoiceConnectorTerminationHealth {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_voice_connector_termination_health_input::Builder,
}
impl GetVoiceConnectorTerminationHealth {
    /// Creates a new `GetVoiceConnectorTerminationHealth`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetVoiceConnectorTerminationHealth,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorTerminationHealthError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetVoiceConnectorTerminationHealthOutput,
        aws_smithy_http::result::SdkError<crate::error::GetVoiceConnectorTerminationHealthError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.voice_connector_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_voice_connector_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_voice_connector_id(input);
        self
    }
}

/// Fluent builder constructing a request to `ListAvailableVoiceConnectorRegions`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListAvailableVoiceConnectorRegions {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_available_voice_connector_regions_input::Builder,
}
impl ListAvailableVoiceConnectorRegions {
    /// Creates a new `ListAvailableVoiceConnectorRegions`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListAvailableVoiceConnectorRegions,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListAvailableVoiceConnectorRegionsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListAvailableVoiceConnectorRegionsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListAvailableVoiceConnectorRegionsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
}

/// Fluent builder constructing a request to `ListPhoneNumberOrders`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListPhoneNumberOrders {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_phone_number_orders_input::Builder,
}
impl ListPhoneNumberOrders {
    /// Creates a new `ListPhoneNumberOrders`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListPhoneNumberOrders,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListPhoneNumberOrdersError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListPhoneNumberOrdersOutput,
        aws_smithy_http::result::SdkError<crate::error::ListPhoneNumberOrdersError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListPhoneNumberOrdersPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListPhoneNumberOrdersPaginator {
        crate::paginator::ListPhoneNumberOrdersPaginator::new(self.handle, self.inner)
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListPhoneNumbers`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListPhoneNumbers {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_phone_numbers_input::Builder,
}
impl ListPhoneNumbers {
    /// Creates a new `ListPhoneNumbers`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListPhoneNumbers,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListPhoneNumbersError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListPhoneNumbersOutput,
        aws_smithy_http::result::SdkError<crate::error::ListPhoneNumbersError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListPhoneNumbersPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListPhoneNumbersPaginator {
        crate::paginator::ListPhoneNumbersPaginator::new(self.handle, self.inner)
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.status(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_status(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn product_type(mut self, input: crate::model::PhoneNumberProductType) -> Self {
        self.inner = self.inner.product_type(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_product_type(
        mut self,
        input: std::option::Option<crate::model::PhoneNumberProductType>,
    ) -> Self {
        self.inner = self.inner.set_product_type(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn filter_name(mut self, input: crate::model::PhoneNumberAssociationName) -> Self {
        self.inner = self.inner.filter_name(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_filter_name(
        mut self,
        input: std::option::Option<crate::model::PhoneNumberAssociationName>,
    ) -> Self {
        self.inner = self.inner.set_filter_name(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn filter_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.filter_value(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_filter_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_filter_value(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListProxySessions`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListProxySessions {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_proxy_sessions_input::Builder,
}
impl ListProxySessions {
    /// Creates a new `ListProxySessions`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListProxySessions,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListProxySessionsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListProxySessionsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListProxySessionsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListProxySessionsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListProxySessionsPaginator {
        crate::paginator::ListProxySessionsPaginator::new(self.handle, self.inner)
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.voice_connector_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_voice_connector_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_voice_connector_id(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn status(mut self, input: crate::model::ProxySessionStatus) -> Self {
        self.inner = self.inner.status(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::model::ProxySessionStatus>,
    ) -> Self {
        self.inner = self.inner.set_status(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListSipMediaApplications`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListSipMediaApplications {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_sip_media_applications_input::Builder,
}
impl ListSipMediaApplications {
    /// Creates a new `ListSipMediaApplications`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListSipMediaApplications,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListSipMediaApplicationsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListSipMediaApplicationsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListSipMediaApplicationsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListSipMediaApplicationsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListSipMediaApplicationsPaginator {
        crate::paginator::ListSipMediaApplicationsPaginator::new(self.handle, self.inner)
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListSipRules`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListSipRules {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_sip_rules_input::Builder,
}
impl ListSipRules {
    /// Creates a new `ListSipRules`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListSipRules,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListSipRulesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListSipRulesOutput,
        aws_smithy_http::result::SdkError<crate::error::ListSipRulesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListSipRulesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListSipRulesPaginator {
        crate::paginator::ListSipRulesPaginator::new(self.handle, self.inner)
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn sip_media_application_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sip_media_application_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_sip_media_application_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_sip_media_application_id(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListSupportedPhoneNumberCountries`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListSupportedPhoneNumberCountries {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_supported_phone_number_countries_input::Builder,
}
impl ListSupportedPhoneNumberCountries {
    /// Creates a new `ListSupportedPhoneNumberCountries`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListSupportedPhoneNumberCountries,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListSupportedPhoneNumberCountriesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListSupportedPhoneNumberCountriesOutput,
        aws_smithy_http::result::SdkError<crate::error::ListSupportedPhoneNumberCountriesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn product_type(mut self, input: crate::model::PhoneNumberProductType) -> Self {
        self.inner = self.inner.product_type(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_product_type(
        mut self,
        input: std::option::Option<crate::model::PhoneNumberProductType>,
    ) -> Self {
        self.inner = self.inner.set_product_type(input);
        self
    }
}

/// Fluent builder constructing a request to `ListVoiceConnectorGroups`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListVoiceConnectorGroups {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_voice_connector_groups_input::Builder,
}
impl ListVoiceConnectorGroups {
    /// Creates a new `ListVoiceConnectorGroups`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListVoiceConnectorGroups,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListVoiceConnectorGroupsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListVoiceConnectorGroupsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListVoiceConnectorGroupsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListVoiceConnectorGroupsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListVoiceConnectorGroupsPaginator {
        crate::paginator::ListVoiceConnectorGroupsPaginator::new(self.handle, self.inner)
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListVoiceConnectors`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListVoiceConnectors {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_voice_connectors_input::Builder,
}
impl ListVoiceConnectors {
    /// Creates a new `ListVoiceConnectors`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListVoiceConnectors,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListVoiceConnectorsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListVoiceConnectorsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListVoiceConnectorsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListVoiceConnectorsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListVoiceConnectorsPaginator {
        crate::paginator::ListVoiceConnectorsPaginator::new(self.handle, self.inner)
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListVoiceConnectorTerminationCredentials`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListVoiceConnectorTerminationCredentials {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_voice_connector_termination_credentials_input::Builder,
}
impl ListVoiceConnectorTerminationCredentials {
    /// Creates a new `ListVoiceConnectorTerminationCredentials`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListVoiceConnectorTerminationCredentials,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::error::ListVoiceConnectorTerminationCredentialsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListVoiceConnectorTerminationCredentialsOutput,
        aws_smithy_http::result::SdkError<
            crate::error::ListVoiceConnectorTerminationCredentialsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.voice_connector_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_voice_connector_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_voice_connector_id(input);
        self
    }
}

/// Fluent builder constructing a request to `PutSipMediaApplicationAlexaSkillConfiguration`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct PutSipMediaApplicationAlexaSkillConfiguration {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::put_sip_media_application_alexa_skill_configuration_input::Builder,
}
impl PutSipMediaApplicationAlexaSkillConfiguration {
    /// Creates a new `PutSipMediaApplicationAlexaSkillConfiguration`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::PutSipMediaApplicationAlexaSkillConfiguration,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::error::PutSipMediaApplicationAlexaSkillConfigurationError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::PutSipMediaApplicationAlexaSkillConfigurationOutput,
        aws_smithy_http::result::SdkError<
            crate::error::PutSipMediaApplicationAlexaSkillConfigurationError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn sip_media_application_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sip_media_application_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_sip_media_application_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_sip_media_application_id(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn sip_media_application_alexa_skill_configuration(
        mut self,
        input: crate::model::SipMediaApplicationAlexaSkillConfiguration,
    ) -> Self {
        self.inner = self
            .inner
            .sip_media_application_alexa_skill_configuration(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_sip_media_application_alexa_skill_configuration(
        mut self,
        input: std::option::Option<crate::model::SipMediaApplicationAlexaSkillConfiguration>,
    ) -> Self {
        self.inner = self
            .inner
            .set_sip_media_application_alexa_skill_configuration(input);
        self
    }
}

/// Fluent builder constructing a request to `PutSipMediaApplicationLoggingConfiguration`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct PutSipMediaApplicationLoggingConfiguration {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::put_sip_media_application_logging_configuration_input::Builder,
}
impl PutSipMediaApplicationLoggingConfiguration {
    /// Creates a new `PutSipMediaApplicationLoggingConfiguration`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::PutSipMediaApplicationLoggingConfiguration,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::error::PutSipMediaApplicationLoggingConfigurationError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::PutSipMediaApplicationLoggingConfigurationOutput,
        aws_smithy_http::result::SdkError<
            crate::error::PutSipMediaApplicationLoggingConfigurationError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn sip_media_application_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sip_media_application_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_sip_media_application_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_sip_media_application_id(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn sip_media_application_logging_configuration(
        mut self,
        input: crate::model::SipMediaApplicationLoggingConfiguration,
    ) -> Self {
        self.inner = self
            .inner
            .sip_media_application_logging_configuration(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_sip_media_application_logging_configuration(
        mut self,
        input: std::option::Option<crate::model::SipMediaApplicationLoggingConfiguration>,
    ) -> Self {
        self.inner = self
            .inner
            .set_sip_media_application_logging_configuration(input);
        self
    }
}

/// Fluent builder constructing a request to `PutVoiceConnectorEmergencyCallingConfiguration`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct PutVoiceConnectorEmergencyCallingConfiguration {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::put_voice_connector_emergency_calling_configuration_input::Builder,
}
impl PutVoiceConnectorEmergencyCallingConfiguration {
    /// Creates a new `PutVoiceConnectorEmergencyCallingConfiguration`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::PutVoiceConnectorEmergencyCallingConfiguration,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::error::PutVoiceConnectorEmergencyCallingConfigurationError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::PutVoiceConnectorEmergencyCallingConfigurationOutput,
        aws_smithy_http::result::SdkError<
            crate::error::PutVoiceConnectorEmergencyCallingConfigurationError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.voice_connector_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_voice_connector_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_voice_connector_id(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn emergency_calling_configuration(
        mut self,
        input: crate::model::EmergencyCallingConfiguration,
    ) -> Self {
        self.inner = self.inner.emergency_calling_configuration(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_emergency_calling_configuration(
        mut self,
        input: std::option::Option<crate::model::EmergencyCallingConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_emergency_calling_configuration(input);
        self
    }
}

/// Fluent builder constructing a request to `PutVoiceConnectorLoggingConfiguration`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct PutVoiceConnectorLoggingConfiguration {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::put_voice_connector_logging_configuration_input::Builder,
}
impl PutVoiceConnectorLoggingConfiguration {
    /// Creates a new `PutVoiceConnectorLoggingConfiguration`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::PutVoiceConnectorLoggingConfiguration,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::PutVoiceConnectorLoggingConfigurationError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::PutVoiceConnectorLoggingConfigurationOutput,
        aws_smithy_http::result::SdkError<crate::error::PutVoiceConnectorLoggingConfigurationError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.voice_connector_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_voice_connector_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_voice_connector_id(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn logging_configuration(mut self, input: crate::model::LoggingConfiguration) -> Self {
        self.inner = self.inner.logging_configuration(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_logging_configuration(
        mut self,
        input: std::option::Option<crate::model::LoggingConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_logging_configuration(input);
        self
    }
}

/// Fluent builder constructing a request to `PutVoiceConnectorOrigination`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct PutVoiceConnectorOrigination {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::put_voice_connector_origination_input::Builder,
}
impl PutVoiceConnectorOrigination {
    /// Creates a new `PutVoiceConnectorOrigination`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::PutVoiceConnectorOrigination,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::PutVoiceConnectorOriginationError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::PutVoiceConnectorOriginationOutput,
        aws_smithy_http::result::SdkError<crate::error::PutVoiceConnectorOriginationError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.voice_connector_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_voice_connector_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_voice_connector_id(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn origination(mut self, input: crate::model::Origination) -> Self {
        self.inner = self.inner.origination(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_origination(
        mut self,
        input: std::option::Option<crate::model::Origination>,
    ) -> Self {
        self.inner = self.inner.set_origination(input);
        self
    }
}

/// Fluent builder constructing a request to `PutVoiceConnectorProxy`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct PutVoiceConnectorProxy {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::put_voice_connector_proxy_input::Builder,
}
impl PutVoiceConnectorProxy {
    /// Creates a new `PutVoiceConnectorProxy`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::PutVoiceConnectorProxy,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::PutVoiceConnectorProxyError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::PutVoiceConnectorProxyOutput,
        aws_smithy_http::result::SdkError<crate::error::PutVoiceConnectorProxyError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.voice_connector_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_voice_connector_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_voice_connector_id(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn default_session_expiry_minutes(mut self, input: i32) -> Self {
        self.inner = self.inner.default_session_expiry_minutes(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_default_session_expiry_minutes(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_default_session_expiry_minutes(input);
        self
    }
    /// Appends an item to `PhoneNumberPoolCountries`.
    ///
    /// To override the contents of this collection use [`set_phone_number_pool_countries`](Self::set_phone_number_pool_countries).
    ///
    #[allow(missing_docs)] // documentation missing in model
    pub fn phone_number_pool_countries(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.phone_number_pool_countries(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_phone_number_pool_countries(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_phone_number_pool_countries(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn fall_back_phone_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.fall_back_phone_number(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_fall_back_phone_number(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_fall_back_phone_number(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn disabled(mut self, input: bool) -> Self {
        self.inner = self.inner.disabled(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_disabled(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_disabled(input);
        self
    }
}

/// Fluent builder constructing a request to `PutVoiceConnectorStreamingConfiguration`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct PutVoiceConnectorStreamingConfiguration {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::put_voice_connector_streaming_configuration_input::Builder,
}
impl PutVoiceConnectorStreamingConfiguration {
    /// Creates a new `PutVoiceConnectorStreamingConfiguration`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::PutVoiceConnectorStreamingConfiguration,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::error::PutVoiceConnectorStreamingConfigurationError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::PutVoiceConnectorStreamingConfigurationOutput,
        aws_smithy_http::result::SdkError<
            crate::error::PutVoiceConnectorStreamingConfigurationError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.voice_connector_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_voice_connector_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_voice_connector_id(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn streaming_configuration(mut self, input: crate::model::StreamingConfiguration) -> Self {
        self.inner = self.inner.streaming_configuration(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_streaming_configuration(
        mut self,
        input: std::option::Option<crate::model::StreamingConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_streaming_configuration(input);
        self
    }
}

/// Fluent builder constructing a request to `PutVoiceConnectorTermination`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct PutVoiceConnectorTermination {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::put_voice_connector_termination_input::Builder,
}
impl PutVoiceConnectorTermination {
    /// Creates a new `PutVoiceConnectorTermination`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::PutVoiceConnectorTermination,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::PutVoiceConnectorTerminationError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::PutVoiceConnectorTerminationOutput,
        aws_smithy_http::result::SdkError<crate::error::PutVoiceConnectorTerminationError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.voice_connector_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_voice_connector_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_voice_connector_id(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn termination(mut self, input: crate::model::Termination) -> Self {
        self.inner = self.inner.termination(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_termination(
        mut self,
        input: std::option::Option<crate::model::Termination>,
    ) -> Self {
        self.inner = self.inner.set_termination(input);
        self
    }
}

/// Fluent builder constructing a request to `PutVoiceConnectorTerminationCredentials`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct PutVoiceConnectorTerminationCredentials {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::put_voice_connector_termination_credentials_input::Builder,
}
impl PutVoiceConnectorTerminationCredentials {
    /// Creates a new `PutVoiceConnectorTerminationCredentials`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::PutVoiceConnectorTerminationCredentials,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::error::PutVoiceConnectorTerminationCredentialsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::PutVoiceConnectorTerminationCredentialsOutput,
        aws_smithy_http::result::SdkError<
            crate::error::PutVoiceConnectorTerminationCredentialsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.voice_connector_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_voice_connector_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_voice_connector_id(input);
        self
    }
    /// Appends an item to `Credentials`.
    ///
    /// To override the contents of this collection use [`set_credentials`](Self::set_credentials).
    ///
    #[allow(missing_docs)] // documentation missing in model
    pub fn credentials(mut self, input: crate::model::Credential) -> Self {
        self.inner = self.inner.credentials(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_credentials(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Credential>>,
    ) -> Self {
        self.inner = self.inner.set_credentials(input);
        self
    }
}

/// Fluent builder constructing a request to `RestorePhoneNumber`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct RestorePhoneNumber {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::restore_phone_number_input::Builder,
}
impl RestorePhoneNumber {
    /// Creates a new `RestorePhoneNumber`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::RestorePhoneNumber,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::RestorePhoneNumberError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::RestorePhoneNumberOutput,
        aws_smithy_http::result::SdkError<crate::error::RestorePhoneNumberError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn phone_number_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.phone_number_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_phone_number_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_phone_number_id(input);
        self
    }
}

/// Fluent builder constructing a request to `SearchAvailablePhoneNumbers`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct SearchAvailablePhoneNumbers {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::search_available_phone_numbers_input::Builder,
}
impl SearchAvailablePhoneNumbers {
    /// Creates a new `SearchAvailablePhoneNumbers`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::SearchAvailablePhoneNumbers,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::SearchAvailablePhoneNumbersError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::SearchAvailablePhoneNumbersOutput,
        aws_smithy_http::result::SdkError<crate::error::SearchAvailablePhoneNumbersError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::SearchAvailablePhoneNumbersPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::SearchAvailablePhoneNumbersPaginator {
        crate::paginator::SearchAvailablePhoneNumbersPaginator::new(self.handle, self.inner)
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn area_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.area_code(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_area_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_area_code(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn city(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.city(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_city(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_city(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn country(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.country(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_country(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_country(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn state(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.state(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_state(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_state(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn toll_free_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.toll_free_prefix(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_toll_free_prefix(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_toll_free_prefix(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn phone_number_type(mut self, input: crate::model::PhoneNumberType) -> Self {
        self.inner = self.inner.phone_number_type(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_phone_number_type(
        mut self,
        input: std::option::Option<crate::model::PhoneNumberType>,
    ) -> Self {
        self.inner = self.inner.set_phone_number_type(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateGlobalSettings`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateGlobalSettings {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_global_settings_input::Builder,
}
impl UpdateGlobalSettings {
    /// Creates a new `UpdateGlobalSettings`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateGlobalSettings,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateGlobalSettingsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateGlobalSettingsOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateGlobalSettingsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector(mut self, input: crate::model::VoiceConnectorSettings) -> Self {
        self.inner = self.inner.voice_connector(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_voice_connector(
        mut self,
        input: std::option::Option<crate::model::VoiceConnectorSettings>,
    ) -> Self {
        self.inner = self.inner.set_voice_connector(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdatePhoneNumber`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdatePhoneNumber {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_phone_number_input::Builder,
}
impl UpdatePhoneNumber {
    /// Creates a new `UpdatePhoneNumber`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdatePhoneNumber,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdatePhoneNumberError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdatePhoneNumberOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdatePhoneNumberError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn phone_number_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.phone_number_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_phone_number_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_phone_number_id(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn product_type(mut self, input: crate::model::PhoneNumberProductType) -> Self {
        self.inner = self.inner.product_type(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_product_type(
        mut self,
        input: std::option::Option<crate::model::PhoneNumberProductType>,
    ) -> Self {
        self.inner = self.inner.set_product_type(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn calling_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.calling_name(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_calling_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_calling_name(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdatePhoneNumberSettings`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdatePhoneNumberSettings {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_phone_number_settings_input::Builder,
}
impl UpdatePhoneNumberSettings {
    /// Creates a new `UpdatePhoneNumberSettings`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdatePhoneNumberSettings,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdatePhoneNumberSettingsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdatePhoneNumberSettingsOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdatePhoneNumberSettingsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn calling_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.calling_name(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_calling_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_calling_name(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateProxySession`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateProxySession {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_proxy_session_input::Builder,
}
impl UpdateProxySession {
    /// Creates a new `UpdateProxySession`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateProxySession,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateProxySessionError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateProxySessionOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateProxySessionError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.voice_connector_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_voice_connector_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_voice_connector_id(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn proxy_session_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.proxy_session_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_proxy_session_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_proxy_session_id(input);
        self
    }
    /// Appends an item to `Capabilities`.
    ///
    /// To override the contents of this collection use [`set_capabilities`](Self::set_capabilities).
    ///
    #[allow(missing_docs)] // documentation missing in model
    pub fn capabilities(mut self, input: crate::model::Capability) -> Self {
        self.inner = self.inner.capabilities(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_capabilities(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Capability>>,
    ) -> Self {
        self.inner = self.inner.set_capabilities(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn expiry_minutes(mut self, input: i32) -> Self {
        self.inner = self.inner.expiry_minutes(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_expiry_minutes(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_expiry_minutes(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateSipMediaApplication`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateSipMediaApplication {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_sip_media_application_input::Builder,
}
impl UpdateSipMediaApplication {
    /// Creates a new `UpdateSipMediaApplication`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateSipMediaApplication,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateSipMediaApplicationError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateSipMediaApplicationOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateSipMediaApplicationError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn sip_media_application_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sip_media_application_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_sip_media_application_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_sip_media_application_id(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// Appends an item to `Endpoints`.
    ///
    /// To override the contents of this collection use [`set_endpoints`](Self::set_endpoints).
    ///
    #[allow(missing_docs)] // documentation missing in model
    pub fn endpoints(mut self, input: crate::model::SipMediaApplicationEndpoint) -> Self {
        self.inner = self.inner.endpoints(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_endpoints(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::SipMediaApplicationEndpoint>>,
    ) -> Self {
        self.inner = self.inner.set_endpoints(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateSipMediaApplicationCall`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateSipMediaApplicationCall {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_sip_media_application_call_input::Builder,
}
impl UpdateSipMediaApplicationCall {
    /// Creates a new `UpdateSipMediaApplicationCall`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateSipMediaApplicationCall,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateSipMediaApplicationCallError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateSipMediaApplicationCallOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateSipMediaApplicationCallError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn sip_media_application_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sip_media_application_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_sip_media_application_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_sip_media_application_id(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn transaction_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.transaction_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_transaction_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_transaction_id(input);
        self
    }
    /// Adds a key-value pair to `Arguments`.
    ///
    /// To override the contents of this collection use [`set_arguments`](Self::set_arguments).
    ///
    #[allow(missing_docs)] // documentation missing in model
    pub fn arguments(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.arguments(k.into(), v.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_arguments(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_arguments(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateSipRule`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateSipRule {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_sip_rule_input::Builder,
}
impl UpdateSipRule {
    /// Creates a new `UpdateSipRule`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateSipRule,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateSipRuleError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateSipRuleOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateSipRuleError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn sip_rule_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sip_rule_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_sip_rule_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_sip_rule_id(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn disabled(mut self, input: bool) -> Self {
        self.inner = self.inner.disabled(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_disabled(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_disabled(input);
        self
    }
    /// Appends an item to `TargetApplications`.
    ///
    /// To override the contents of this collection use [`set_target_applications`](Self::set_target_applications).
    ///
    #[allow(missing_docs)] // documentation missing in model
    pub fn target_applications(mut self, input: crate::model::SipRuleTargetApplication) -> Self {
        self.inner = self.inner.target_applications(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_target_applications(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::SipRuleTargetApplication>>,
    ) -> Self {
        self.inner = self.inner.set_target_applications(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateVoiceConnector`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateVoiceConnector {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_voice_connector_input::Builder,
}
impl UpdateVoiceConnector {
    /// Creates a new `UpdateVoiceConnector`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateVoiceConnector,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateVoiceConnectorError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateVoiceConnectorOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateVoiceConnectorError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.voice_connector_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_voice_connector_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_voice_connector_id(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn require_encryption(mut self, input: bool) -> Self {
        self.inner = self.inner.require_encryption(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_require_encryption(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_require_encryption(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateVoiceConnectorGroup`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateVoiceConnectorGroup {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_voice_connector_group_input::Builder,
}
impl UpdateVoiceConnectorGroup {
    /// Creates a new `UpdateVoiceConnectorGroup`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateVoiceConnectorGroup,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateVoiceConnectorGroupError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateVoiceConnectorGroupOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateVoiceConnectorGroupError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_group_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.voice_connector_group_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_voice_connector_group_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_voice_connector_group_id(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// Appends an item to `VoiceConnectorItems`.
    ///
    /// To override the contents of this collection use [`set_voice_connector_items`](Self::set_voice_connector_items).
    ///
    #[allow(missing_docs)] // documentation missing in model
    pub fn voice_connector_items(mut self, input: crate::model::VoiceConnectorItem) -> Self {
        self.inner = self.inner.voice_connector_items(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_voice_connector_items(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::VoiceConnectorItem>>,
    ) -> Self {
        self.inner = self.inner.set_voice_connector_items(input);
        self
    }
}

/// Fluent builder constructing a request to `ValidateE911Address`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ValidateE911Address {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::validate_e911_address_input::Builder,
}
impl ValidateE911Address {
    /// Creates a new `ValidateE911Address`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ValidateE911Address,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ValidateE911AddressError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ValidateE911AddressOutput,
        aws_smithy_http::result::SdkError<crate::error::ValidateE911AddressError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn aws_account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.aws_account_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_aws_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_aws_account_id(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn street_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.street_number(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_street_number(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_street_number(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn street_info(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.street_info(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_street_info(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_street_info(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn city(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.city(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_city(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_city(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn state(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.state(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_state(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_state(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn country(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.country(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_country(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_country(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn postal_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.postal_code(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_postal_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_postal_code(input);
        self
    }
}
