// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_custom_domain_associations_output_next_token(
    input: &crate::operation::list_custom_domain_associations::ListCustomDomainAssociationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_endpoint_access_output_next_token(
    input: &crate::operation::list_endpoint_access::ListEndpointAccessOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_namespaces_output_next_token(
    input: &crate::operation::list_namespaces::ListNamespacesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_recovery_points_output_next_token(
    input: &crate::operation::list_recovery_points::ListRecoveryPointsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_snapshots_output_next_token(
    input: &crate::operation::list_snapshots::ListSnapshotsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_table_restore_status_output_next_token(
    input: &crate::operation::list_table_restore_status::ListTableRestoreStatusOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_usage_limits_output_next_token(
    input: &crate::operation::list_usage_limits::ListUsageLimitsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_workgroups_output_next_token(
    input: &crate::operation::list_workgroups::ListWorkgroupsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_custom_domain_associations_output_associations(
    input: crate::operation::list_custom_domain_associations::ListCustomDomainAssociationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Association>> {
    let input = match input.associations {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_endpoint_access_output_endpoints(
    input: crate::operation::list_endpoint_access::ListEndpointAccessOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::EndpointAccess>> {
    let input = input.endpoints;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_namespaces_output_namespaces(
    input: crate::operation::list_namespaces::ListNamespacesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Namespace>> {
    let input = input.namespaces;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_recovery_points_output_recovery_points(
    input: crate::operation::list_recovery_points::ListRecoveryPointsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::RecoveryPoint>> {
    let input = match input.recovery_points {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_snapshots_output_snapshots(
    input: crate::operation::list_snapshots::ListSnapshotsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Snapshot>> {
    let input = match input.snapshots {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_table_restore_status_output_table_restore_statuses(
    input: crate::operation::list_table_restore_status::ListTableRestoreStatusOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TableRestoreStatus>> {
    let input = match input.table_restore_statuses {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_usage_limits_output_usage_limits(
    input: crate::operation::list_usage_limits::ListUsageLimitsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::UsageLimit>> {
    let input = match input.usage_limits {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_workgroups_output_workgroups(
    input: crate::operation::list_workgroups::ListWorkgroupsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Workgroup>> {
    let input = input.workgroups;
    ::std::option::Option::Some(input)
}
