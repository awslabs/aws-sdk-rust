// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `ConvertRecoveryPointToSnapshot`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`convert_recovery_point_to_snapshot`](crate::client::fluent_builders::ConvertRecoveryPointToSnapshot).
///
/// `ParseStrictResponse` impl for `ConvertRecoveryPointToSnapshot`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ConvertRecoveryPointToSnapshot {
    _private: (),
}
impl ConvertRecoveryPointToSnapshot {
    /// Creates a new builder-style object to manufacture [`ConvertRecoveryPointToSnapshotInput`](crate::input::ConvertRecoveryPointToSnapshotInput).
    pub fn builder() -> crate::input::convert_recovery_point_to_snapshot_input::Builder {
        crate::input::convert_recovery_point_to_snapshot_input::Builder::default()
    }
    /// Creates a new `ConvertRecoveryPointToSnapshot` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ConvertRecoveryPointToSnapshot {
    type Output = std::result::Result<
        crate::output::ConvertRecoveryPointToSnapshotOutput,
        crate::error::ConvertRecoveryPointToSnapshotError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_convert_recovery_point_to_snapshot::de_convert_recovery_point_to_snapshot_http_error(response)
        } else {
            crate::protocol_serde::shape_convert_recovery_point_to_snapshot::de_convert_recovery_point_to_snapshot_http_response(response)
        }
    }
}

/// Operation shape for `CreateEndpointAccess`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_endpoint_access`](crate::client::fluent_builders::CreateEndpointAccess).
///
/// `ParseStrictResponse` impl for `CreateEndpointAccess`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateEndpointAccess {
    _private: (),
}
impl CreateEndpointAccess {
    /// Creates a new builder-style object to manufacture [`CreateEndpointAccessInput`](crate::input::CreateEndpointAccessInput).
    pub fn builder() -> crate::input::create_endpoint_access_input::Builder {
        crate::input::create_endpoint_access_input::Builder::default()
    }
    /// Creates a new `CreateEndpointAccess` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateEndpointAccess {
    type Output = std::result::Result<
        crate::output::CreateEndpointAccessOutput,
        crate::error::CreateEndpointAccessError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_endpoint_access::de_create_endpoint_access_http_error(response)
        } else {
            crate::protocol_serde::shape_create_endpoint_access::de_create_endpoint_access_http_response(response)
        }
    }
}

/// Operation shape for `CreateNamespace`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_namespace`](crate::client::fluent_builders::CreateNamespace).
///
/// `ParseStrictResponse` impl for `CreateNamespace`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateNamespace {
    _private: (),
}
impl CreateNamespace {
    /// Creates a new builder-style object to manufacture [`CreateNamespaceInput`](crate::input::CreateNamespaceInput).
    pub fn builder() -> crate::input::create_namespace_input::Builder {
        crate::input::create_namespace_input::Builder::default()
    }
    /// Creates a new `CreateNamespace` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateNamespace {
    type Output = std::result::Result<
        crate::output::CreateNamespaceOutput,
        crate::error::CreateNamespaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_namespace::de_create_namespace_http_error(response)
        } else {
            crate::protocol_serde::shape_create_namespace::de_create_namespace_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `CreateSnapshot`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_snapshot`](crate::client::fluent_builders::CreateSnapshot).
///
/// `ParseStrictResponse` impl for `CreateSnapshot`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateSnapshot {
    _private: (),
}
impl CreateSnapshot {
    /// Creates a new builder-style object to manufacture [`CreateSnapshotInput`](crate::input::CreateSnapshotInput).
    pub fn builder() -> crate::input::create_snapshot_input::Builder {
        crate::input::create_snapshot_input::Builder::default()
    }
    /// Creates a new `CreateSnapshot` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateSnapshot {
    type Output =
        std::result::Result<crate::output::CreateSnapshotOutput, crate::error::CreateSnapshotError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_snapshot::de_create_snapshot_http_error(response)
        } else {
            crate::protocol_serde::shape_create_snapshot::de_create_snapshot_http_response(response)
        }
    }
}

/// Operation shape for `CreateUsageLimit`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_usage_limit`](crate::client::fluent_builders::CreateUsageLimit).
///
/// `ParseStrictResponse` impl for `CreateUsageLimit`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateUsageLimit {
    _private: (),
}
impl CreateUsageLimit {
    /// Creates a new builder-style object to manufacture [`CreateUsageLimitInput`](crate::input::CreateUsageLimitInput).
    pub fn builder() -> crate::input::create_usage_limit_input::Builder {
        crate::input::create_usage_limit_input::Builder::default()
    }
    /// Creates a new `CreateUsageLimit` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateUsageLimit {
    type Output = std::result::Result<
        crate::output::CreateUsageLimitOutput,
        crate::error::CreateUsageLimitError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_usage_limit::de_create_usage_limit_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_create_usage_limit::de_create_usage_limit_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `CreateWorkgroup`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_workgroup`](crate::client::fluent_builders::CreateWorkgroup).
///
/// `ParseStrictResponse` impl for `CreateWorkgroup`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateWorkgroup {
    _private: (),
}
impl CreateWorkgroup {
    /// Creates a new builder-style object to manufacture [`CreateWorkgroupInput`](crate::input::CreateWorkgroupInput).
    pub fn builder() -> crate::input::create_workgroup_input::Builder {
        crate::input::create_workgroup_input::Builder::default()
    }
    /// Creates a new `CreateWorkgroup` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateWorkgroup {
    type Output = std::result::Result<
        crate::output::CreateWorkgroupOutput,
        crate::error::CreateWorkgroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_workgroup::de_create_workgroup_http_error(response)
        } else {
            crate::protocol_serde::shape_create_workgroup::de_create_workgroup_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DeleteEndpointAccess`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_endpoint_access`](crate::client::fluent_builders::DeleteEndpointAccess).
///
/// `ParseStrictResponse` impl for `DeleteEndpointAccess`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteEndpointAccess {
    _private: (),
}
impl DeleteEndpointAccess {
    /// Creates a new builder-style object to manufacture [`DeleteEndpointAccessInput`](crate::input::DeleteEndpointAccessInput).
    pub fn builder() -> crate::input::delete_endpoint_access_input::Builder {
        crate::input::delete_endpoint_access_input::Builder::default()
    }
    /// Creates a new `DeleteEndpointAccess` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteEndpointAccess {
    type Output = std::result::Result<
        crate::output::DeleteEndpointAccessOutput,
        crate::error::DeleteEndpointAccessError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_endpoint_access::de_delete_endpoint_access_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_endpoint_access::de_delete_endpoint_access_http_response(response)
        }
    }
}

/// Operation shape for `DeleteNamespace`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_namespace`](crate::client::fluent_builders::DeleteNamespace).
///
/// `ParseStrictResponse` impl for `DeleteNamespace`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteNamespace {
    _private: (),
}
impl DeleteNamespace {
    /// Creates a new builder-style object to manufacture [`DeleteNamespaceInput`](crate::input::DeleteNamespaceInput).
    pub fn builder() -> crate::input::delete_namespace_input::Builder {
        crate::input::delete_namespace_input::Builder::default()
    }
    /// Creates a new `DeleteNamespace` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteNamespace {
    type Output = std::result::Result<
        crate::output::DeleteNamespaceOutput,
        crate::error::DeleteNamespaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_namespace::de_delete_namespace_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_namespace::de_delete_namespace_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DeleteResourcePolicy`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_resource_policy`](crate::client::fluent_builders::DeleteResourcePolicy).
///
/// `ParseStrictResponse` impl for `DeleteResourcePolicy`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteResourcePolicy {
    _private: (),
}
impl DeleteResourcePolicy {
    /// Creates a new builder-style object to manufacture [`DeleteResourcePolicyInput`](crate::input::DeleteResourcePolicyInput).
    pub fn builder() -> crate::input::delete_resource_policy_input::Builder {
        crate::input::delete_resource_policy_input::Builder::default()
    }
    /// Creates a new `DeleteResourcePolicy` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteResourcePolicy {
    type Output = std::result::Result<
        crate::output::DeleteResourcePolicyOutput,
        crate::error::DeleteResourcePolicyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_resource_policy::de_delete_resource_policy_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_resource_policy::de_delete_resource_policy_http_response(response)
        }
    }
}

/// Operation shape for `DeleteSnapshot`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_snapshot`](crate::client::fluent_builders::DeleteSnapshot).
///
/// `ParseStrictResponse` impl for `DeleteSnapshot`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteSnapshot {
    _private: (),
}
impl DeleteSnapshot {
    /// Creates a new builder-style object to manufacture [`DeleteSnapshotInput`](crate::input::DeleteSnapshotInput).
    pub fn builder() -> crate::input::delete_snapshot_input::Builder {
        crate::input::delete_snapshot_input::Builder::default()
    }
    /// Creates a new `DeleteSnapshot` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteSnapshot {
    type Output =
        std::result::Result<crate::output::DeleteSnapshotOutput, crate::error::DeleteSnapshotError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_snapshot::de_delete_snapshot_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_snapshot::de_delete_snapshot_http_response(response)
        }
    }
}

/// Operation shape for `DeleteUsageLimit`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_usage_limit`](crate::client::fluent_builders::DeleteUsageLimit).
///
/// `ParseStrictResponse` impl for `DeleteUsageLimit`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteUsageLimit {
    _private: (),
}
impl DeleteUsageLimit {
    /// Creates a new builder-style object to manufacture [`DeleteUsageLimitInput`](crate::input::DeleteUsageLimitInput).
    pub fn builder() -> crate::input::delete_usage_limit_input::Builder {
        crate::input::delete_usage_limit_input::Builder::default()
    }
    /// Creates a new `DeleteUsageLimit` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteUsageLimit {
    type Output = std::result::Result<
        crate::output::DeleteUsageLimitOutput,
        crate::error::DeleteUsageLimitError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_usage_limit::de_delete_usage_limit_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_delete_usage_limit::de_delete_usage_limit_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DeleteWorkgroup`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_workgroup`](crate::client::fluent_builders::DeleteWorkgroup).
///
/// `ParseStrictResponse` impl for `DeleteWorkgroup`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteWorkgroup {
    _private: (),
}
impl DeleteWorkgroup {
    /// Creates a new builder-style object to manufacture [`DeleteWorkgroupInput`](crate::input::DeleteWorkgroupInput).
    pub fn builder() -> crate::input::delete_workgroup_input::Builder {
        crate::input::delete_workgroup_input::Builder::default()
    }
    /// Creates a new `DeleteWorkgroup` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteWorkgroup {
    type Output = std::result::Result<
        crate::output::DeleteWorkgroupOutput,
        crate::error::DeleteWorkgroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_workgroup::de_delete_workgroup_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_workgroup::de_delete_workgroup_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `GetCredentials`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_credentials`](crate::client::fluent_builders::GetCredentials).
///
/// `ParseStrictResponse` impl for `GetCredentials`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetCredentials {
    _private: (),
}
impl GetCredentials {
    /// Creates a new builder-style object to manufacture [`GetCredentialsInput`](crate::input::GetCredentialsInput).
    pub fn builder() -> crate::input::get_credentials_input::Builder {
        crate::input::get_credentials_input::Builder::default()
    }
    /// Creates a new `GetCredentials` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetCredentials {
    type Output =
        std::result::Result<crate::output::GetCredentialsOutput, crate::error::GetCredentialsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_credentials::de_get_credentials_http_error(response)
        } else {
            crate::protocol_serde::shape_get_credentials::de_get_credentials_http_response(response)
        }
    }
}

/// Operation shape for `GetEndpointAccess`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_endpoint_access`](crate::client::fluent_builders::GetEndpointAccess).
///
/// `ParseStrictResponse` impl for `GetEndpointAccess`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetEndpointAccess {
    _private: (),
}
impl GetEndpointAccess {
    /// Creates a new builder-style object to manufacture [`GetEndpointAccessInput`](crate::input::GetEndpointAccessInput).
    pub fn builder() -> crate::input::get_endpoint_access_input::Builder {
        crate::input::get_endpoint_access_input::Builder::default()
    }
    /// Creates a new `GetEndpointAccess` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetEndpointAccess {
    type Output = std::result::Result<
        crate::output::GetEndpointAccessOutput,
        crate::error::GetEndpointAccessError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_endpoint_access::de_get_endpoint_access_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_get_endpoint_access::de_get_endpoint_access_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `GetNamespace`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_namespace`](crate::client::fluent_builders::GetNamespace).
///
/// `ParseStrictResponse` impl for `GetNamespace`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetNamespace {
    _private: (),
}
impl GetNamespace {
    /// Creates a new builder-style object to manufacture [`GetNamespaceInput`](crate::input::GetNamespaceInput).
    pub fn builder() -> crate::input::get_namespace_input::Builder {
        crate::input::get_namespace_input::Builder::default()
    }
    /// Creates a new `GetNamespace` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetNamespace {
    type Output =
        std::result::Result<crate::output::GetNamespaceOutput, crate::error::GetNamespaceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_namespace::de_get_namespace_http_error(response)
        } else {
            crate::protocol_serde::shape_get_namespace::de_get_namespace_http_response(response)
        }
    }
}

/// Operation shape for `GetRecoveryPoint`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_recovery_point`](crate::client::fluent_builders::GetRecoveryPoint).
///
/// `ParseStrictResponse` impl for `GetRecoveryPoint`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetRecoveryPoint {
    _private: (),
}
impl GetRecoveryPoint {
    /// Creates a new builder-style object to manufacture [`GetRecoveryPointInput`](crate::input::GetRecoveryPointInput).
    pub fn builder() -> crate::input::get_recovery_point_input::Builder {
        crate::input::get_recovery_point_input::Builder::default()
    }
    /// Creates a new `GetRecoveryPoint` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetRecoveryPoint {
    type Output = std::result::Result<
        crate::output::GetRecoveryPointOutput,
        crate::error::GetRecoveryPointError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_recovery_point::de_get_recovery_point_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_get_recovery_point::de_get_recovery_point_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `GetResourcePolicy`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_resource_policy`](crate::client::fluent_builders::GetResourcePolicy).
///
/// `ParseStrictResponse` impl for `GetResourcePolicy`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetResourcePolicy {
    _private: (),
}
impl GetResourcePolicy {
    /// Creates a new builder-style object to manufacture [`GetResourcePolicyInput`](crate::input::GetResourcePolicyInput).
    pub fn builder() -> crate::input::get_resource_policy_input::Builder {
        crate::input::get_resource_policy_input::Builder::default()
    }
    /// Creates a new `GetResourcePolicy` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetResourcePolicy {
    type Output = std::result::Result<
        crate::output::GetResourcePolicyOutput,
        crate::error::GetResourcePolicyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_resource_policy::de_get_resource_policy_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_get_resource_policy::de_get_resource_policy_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `GetSnapshot`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_snapshot`](crate::client::fluent_builders::GetSnapshot).
///
/// `ParseStrictResponse` impl for `GetSnapshot`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetSnapshot {
    _private: (),
}
impl GetSnapshot {
    /// Creates a new builder-style object to manufacture [`GetSnapshotInput`](crate::input::GetSnapshotInput).
    pub fn builder() -> crate::input::get_snapshot_input::Builder {
        crate::input::get_snapshot_input::Builder::default()
    }
    /// Creates a new `GetSnapshot` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetSnapshot {
    type Output =
        std::result::Result<crate::output::GetSnapshotOutput, crate::error::GetSnapshotError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_snapshot::de_get_snapshot_http_error(response)
        } else {
            crate::protocol_serde::shape_get_snapshot::de_get_snapshot_http_response(response)
        }
    }
}

/// Operation shape for `GetTableRestoreStatus`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_table_restore_status`](crate::client::fluent_builders::GetTableRestoreStatus).
///
/// `ParseStrictResponse` impl for `GetTableRestoreStatus`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetTableRestoreStatus {
    _private: (),
}
impl GetTableRestoreStatus {
    /// Creates a new builder-style object to manufacture [`GetTableRestoreStatusInput`](crate::input::GetTableRestoreStatusInput).
    pub fn builder() -> crate::input::get_table_restore_status_input::Builder {
        crate::input::get_table_restore_status_input::Builder::default()
    }
    /// Creates a new `GetTableRestoreStatus` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetTableRestoreStatus {
    type Output = std::result::Result<
        crate::output::GetTableRestoreStatusOutput,
        crate::error::GetTableRestoreStatusError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_table_restore_status::de_get_table_restore_status_http_error(response)
        } else {
            crate::protocol_serde::shape_get_table_restore_status::de_get_table_restore_status_http_response(response)
        }
    }
}

/// Operation shape for `GetUsageLimit`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_usage_limit`](crate::client::fluent_builders::GetUsageLimit).
///
/// `ParseStrictResponse` impl for `GetUsageLimit`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetUsageLimit {
    _private: (),
}
impl GetUsageLimit {
    /// Creates a new builder-style object to manufacture [`GetUsageLimitInput`](crate::input::GetUsageLimitInput).
    pub fn builder() -> crate::input::get_usage_limit_input::Builder {
        crate::input::get_usage_limit_input::Builder::default()
    }
    /// Creates a new `GetUsageLimit` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetUsageLimit {
    type Output =
        std::result::Result<crate::output::GetUsageLimitOutput, crate::error::GetUsageLimitError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_usage_limit::de_get_usage_limit_http_error(response)
        } else {
            crate::protocol_serde::shape_get_usage_limit::de_get_usage_limit_http_response(response)
        }
    }
}

/// Operation shape for `GetWorkgroup`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_workgroup`](crate::client::fluent_builders::GetWorkgroup).
///
/// `ParseStrictResponse` impl for `GetWorkgroup`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetWorkgroup {
    _private: (),
}
impl GetWorkgroup {
    /// Creates a new builder-style object to manufacture [`GetWorkgroupInput`](crate::input::GetWorkgroupInput).
    pub fn builder() -> crate::input::get_workgroup_input::Builder {
        crate::input::get_workgroup_input::Builder::default()
    }
    /// Creates a new `GetWorkgroup` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetWorkgroup {
    type Output =
        std::result::Result<crate::output::GetWorkgroupOutput, crate::error::GetWorkgroupError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_workgroup::de_get_workgroup_http_error(response)
        } else {
            crate::protocol_serde::shape_get_workgroup::de_get_workgroup_http_response(response)
        }
    }
}

/// Operation shape for `ListEndpointAccess`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_endpoint_access`](crate::client::fluent_builders::ListEndpointAccess).
///
/// `ParseStrictResponse` impl for `ListEndpointAccess`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListEndpointAccess {
    _private: (),
}
impl ListEndpointAccess {
    /// Creates a new builder-style object to manufacture [`ListEndpointAccessInput`](crate::input::ListEndpointAccessInput).
    pub fn builder() -> crate::input::list_endpoint_access_input::Builder {
        crate::input::list_endpoint_access_input::Builder::default()
    }
    /// Creates a new `ListEndpointAccess` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListEndpointAccess {
    type Output = std::result::Result<
        crate::output::ListEndpointAccessOutput,
        crate::error::ListEndpointAccessError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_endpoint_access::de_list_endpoint_access_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_endpoint_access::de_list_endpoint_access_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListNamespaces`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_namespaces`](crate::client::fluent_builders::ListNamespaces).
///
/// `ParseStrictResponse` impl for `ListNamespaces`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListNamespaces {
    _private: (),
}
impl ListNamespaces {
    /// Creates a new builder-style object to manufacture [`ListNamespacesInput`](crate::input::ListNamespacesInput).
    pub fn builder() -> crate::input::list_namespaces_input::Builder {
        crate::input::list_namespaces_input::Builder::default()
    }
    /// Creates a new `ListNamespaces` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListNamespaces {
    type Output =
        std::result::Result<crate::output::ListNamespacesOutput, crate::error::ListNamespacesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_namespaces::de_list_namespaces_http_error(response)
        } else {
            crate::protocol_serde::shape_list_namespaces::de_list_namespaces_http_response(response)
        }
    }
}

/// Operation shape for `ListRecoveryPoints`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_recovery_points`](crate::client::fluent_builders::ListRecoveryPoints).
///
/// `ParseStrictResponse` impl for `ListRecoveryPoints`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListRecoveryPoints {
    _private: (),
}
impl ListRecoveryPoints {
    /// Creates a new builder-style object to manufacture [`ListRecoveryPointsInput`](crate::input::ListRecoveryPointsInput).
    pub fn builder() -> crate::input::list_recovery_points_input::Builder {
        crate::input::list_recovery_points_input::Builder::default()
    }
    /// Creates a new `ListRecoveryPoints` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListRecoveryPoints {
    type Output = std::result::Result<
        crate::output::ListRecoveryPointsOutput,
        crate::error::ListRecoveryPointsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_recovery_points::de_list_recovery_points_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_recovery_points::de_list_recovery_points_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListSnapshots`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_snapshots`](crate::client::fluent_builders::ListSnapshots).
///
/// `ParseStrictResponse` impl for `ListSnapshots`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListSnapshots {
    _private: (),
}
impl ListSnapshots {
    /// Creates a new builder-style object to manufacture [`ListSnapshotsInput`](crate::input::ListSnapshotsInput).
    pub fn builder() -> crate::input::list_snapshots_input::Builder {
        crate::input::list_snapshots_input::Builder::default()
    }
    /// Creates a new `ListSnapshots` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListSnapshots {
    type Output =
        std::result::Result<crate::output::ListSnapshotsOutput, crate::error::ListSnapshotsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_snapshots::de_list_snapshots_http_error(response)
        } else {
            crate::protocol_serde::shape_list_snapshots::de_list_snapshots_http_response(response)
        }
    }
}

/// Operation shape for `ListTableRestoreStatus`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_table_restore_status`](crate::client::fluent_builders::ListTableRestoreStatus).
///
/// `ParseStrictResponse` impl for `ListTableRestoreStatus`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListTableRestoreStatus {
    _private: (),
}
impl ListTableRestoreStatus {
    /// Creates a new builder-style object to manufacture [`ListTableRestoreStatusInput`](crate::input::ListTableRestoreStatusInput).
    pub fn builder() -> crate::input::list_table_restore_status_input::Builder {
        crate::input::list_table_restore_status_input::Builder::default()
    }
    /// Creates a new `ListTableRestoreStatus` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListTableRestoreStatus {
    type Output = std::result::Result<
        crate::output::ListTableRestoreStatusOutput,
        crate::error::ListTableRestoreStatusError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_table_restore_status::de_list_table_restore_status_http_error(response)
        } else {
            crate::protocol_serde::shape_list_table_restore_status::de_list_table_restore_status_http_response(response)
        }
    }
}

/// Operation shape for `ListTagsForResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_tags_for_resource`](crate::client::fluent_builders::ListTagsForResource).
///
/// `ParseStrictResponse` impl for `ListTagsForResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput).
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    /// Creates a new `ListTagsForResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_tags_for_resource::de_list_tags_for_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_list_tags_for_resource::de_list_tags_for_resource_http_response(response)
        }
    }
}

/// Operation shape for `ListUsageLimits`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_usage_limits`](crate::client::fluent_builders::ListUsageLimits).
///
/// `ParseStrictResponse` impl for `ListUsageLimits`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListUsageLimits {
    _private: (),
}
impl ListUsageLimits {
    /// Creates a new builder-style object to manufacture [`ListUsageLimitsInput`](crate::input::ListUsageLimitsInput).
    pub fn builder() -> crate::input::list_usage_limits_input::Builder {
        crate::input::list_usage_limits_input::Builder::default()
    }
    /// Creates a new `ListUsageLimits` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListUsageLimits {
    type Output = std::result::Result<
        crate::output::ListUsageLimitsOutput,
        crate::error::ListUsageLimitsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_usage_limits::de_list_usage_limits_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_usage_limits::de_list_usage_limits_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListWorkgroups`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_workgroups`](crate::client::fluent_builders::ListWorkgroups).
///
/// `ParseStrictResponse` impl for `ListWorkgroups`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListWorkgroups {
    _private: (),
}
impl ListWorkgroups {
    /// Creates a new builder-style object to manufacture [`ListWorkgroupsInput`](crate::input::ListWorkgroupsInput).
    pub fn builder() -> crate::input::list_workgroups_input::Builder {
        crate::input::list_workgroups_input::Builder::default()
    }
    /// Creates a new `ListWorkgroups` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListWorkgroups {
    type Output =
        std::result::Result<crate::output::ListWorkgroupsOutput, crate::error::ListWorkgroupsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_workgroups::de_list_workgroups_http_error(response)
        } else {
            crate::protocol_serde::shape_list_workgroups::de_list_workgroups_http_response(response)
        }
    }
}

/// Operation shape for `PutResourcePolicy`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_resource_policy`](crate::client::fluent_builders::PutResourcePolicy).
///
/// `ParseStrictResponse` impl for `PutResourcePolicy`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutResourcePolicy {
    _private: (),
}
impl PutResourcePolicy {
    /// Creates a new builder-style object to manufacture [`PutResourcePolicyInput`](crate::input::PutResourcePolicyInput).
    pub fn builder() -> crate::input::put_resource_policy_input::Builder {
        crate::input::put_resource_policy_input::Builder::default()
    }
    /// Creates a new `PutResourcePolicy` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutResourcePolicy {
    type Output = std::result::Result<
        crate::output::PutResourcePolicyOutput,
        crate::error::PutResourcePolicyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_put_resource_policy::de_put_resource_policy_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_put_resource_policy::de_put_resource_policy_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `RestoreFromRecoveryPoint`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`restore_from_recovery_point`](crate::client::fluent_builders::RestoreFromRecoveryPoint).
///
/// `ParseStrictResponse` impl for `RestoreFromRecoveryPoint`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct RestoreFromRecoveryPoint {
    _private: (),
}
impl RestoreFromRecoveryPoint {
    /// Creates a new builder-style object to manufacture [`RestoreFromRecoveryPointInput`](crate::input::RestoreFromRecoveryPointInput).
    pub fn builder() -> crate::input::restore_from_recovery_point_input::Builder {
        crate::input::restore_from_recovery_point_input::Builder::default()
    }
    /// Creates a new `RestoreFromRecoveryPoint` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for RestoreFromRecoveryPoint {
    type Output = std::result::Result<
        crate::output::RestoreFromRecoveryPointOutput,
        crate::error::RestoreFromRecoveryPointError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_restore_from_recovery_point::de_restore_from_recovery_point_http_error(response)
        } else {
            crate::protocol_serde::shape_restore_from_recovery_point::de_restore_from_recovery_point_http_response(response)
        }
    }
}

/// Operation shape for `RestoreFromSnapshot`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`restore_from_snapshot`](crate::client::fluent_builders::RestoreFromSnapshot).
///
/// `ParseStrictResponse` impl for `RestoreFromSnapshot`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct RestoreFromSnapshot {
    _private: (),
}
impl RestoreFromSnapshot {
    /// Creates a new builder-style object to manufacture [`RestoreFromSnapshotInput`](crate::input::RestoreFromSnapshotInput).
    pub fn builder() -> crate::input::restore_from_snapshot_input::Builder {
        crate::input::restore_from_snapshot_input::Builder::default()
    }
    /// Creates a new `RestoreFromSnapshot` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for RestoreFromSnapshot {
    type Output = std::result::Result<
        crate::output::RestoreFromSnapshotOutput,
        crate::error::RestoreFromSnapshotError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_restore_from_snapshot::de_restore_from_snapshot_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_restore_from_snapshot::de_restore_from_snapshot_http_response(response)
        }
    }
}

/// Operation shape for `RestoreTableFromSnapshot`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`restore_table_from_snapshot`](crate::client::fluent_builders::RestoreTableFromSnapshot).
///
/// `ParseStrictResponse` impl for `RestoreTableFromSnapshot`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct RestoreTableFromSnapshot {
    _private: (),
}
impl RestoreTableFromSnapshot {
    /// Creates a new builder-style object to manufacture [`RestoreTableFromSnapshotInput`](crate::input::RestoreTableFromSnapshotInput).
    pub fn builder() -> crate::input::restore_table_from_snapshot_input::Builder {
        crate::input::restore_table_from_snapshot_input::Builder::default()
    }
    /// Creates a new `RestoreTableFromSnapshot` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for RestoreTableFromSnapshot {
    type Output = std::result::Result<
        crate::output::RestoreTableFromSnapshotOutput,
        crate::error::RestoreTableFromSnapshotError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_restore_table_from_snapshot::de_restore_table_from_snapshot_http_error(response)
        } else {
            crate::protocol_serde::shape_restore_table_from_snapshot::de_restore_table_from_snapshot_http_response(response)
        }
    }
}

/// Operation shape for `TagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`tag_resource`](crate::client::fluent_builders::TagResource).
///
/// `ParseStrictResponse` impl for `TagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput).
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    /// Creates a new `TagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_tag_resource::de_tag_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_tag_resource::de_tag_resource_http_response(response)
        }
    }
}

/// Operation shape for `UntagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`untag_resource`](crate::client::fluent_builders::UntagResource).
///
/// `ParseStrictResponse` impl for `UntagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput).
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    /// Creates a new `UntagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_untag_resource::de_untag_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_untag_resource::de_untag_resource_http_response(response)
        }
    }
}

/// Operation shape for `UpdateEndpointAccess`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_endpoint_access`](crate::client::fluent_builders::UpdateEndpointAccess).
///
/// `ParseStrictResponse` impl for `UpdateEndpointAccess`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateEndpointAccess {
    _private: (),
}
impl UpdateEndpointAccess {
    /// Creates a new builder-style object to manufacture [`UpdateEndpointAccessInput`](crate::input::UpdateEndpointAccessInput).
    pub fn builder() -> crate::input::update_endpoint_access_input::Builder {
        crate::input::update_endpoint_access_input::Builder::default()
    }
    /// Creates a new `UpdateEndpointAccess` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateEndpointAccess {
    type Output = std::result::Result<
        crate::output::UpdateEndpointAccessOutput,
        crate::error::UpdateEndpointAccessError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_endpoint_access::de_update_endpoint_access_http_error(response)
        } else {
            crate::protocol_serde::shape_update_endpoint_access::de_update_endpoint_access_http_response(response)
        }
    }
}

/// Operation shape for `UpdateNamespace`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_namespace`](crate::client::fluent_builders::UpdateNamespace).
///
/// `ParseStrictResponse` impl for `UpdateNamespace`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateNamespace {
    _private: (),
}
impl UpdateNamespace {
    /// Creates a new builder-style object to manufacture [`UpdateNamespaceInput`](crate::input::UpdateNamespaceInput).
    pub fn builder() -> crate::input::update_namespace_input::Builder {
        crate::input::update_namespace_input::Builder::default()
    }
    /// Creates a new `UpdateNamespace` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateNamespace {
    type Output = std::result::Result<
        crate::output::UpdateNamespaceOutput,
        crate::error::UpdateNamespaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_namespace::de_update_namespace_http_error(response)
        } else {
            crate::protocol_serde::shape_update_namespace::de_update_namespace_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `UpdateSnapshot`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_snapshot`](crate::client::fluent_builders::UpdateSnapshot).
///
/// `ParseStrictResponse` impl for `UpdateSnapshot`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateSnapshot {
    _private: (),
}
impl UpdateSnapshot {
    /// Creates a new builder-style object to manufacture [`UpdateSnapshotInput`](crate::input::UpdateSnapshotInput).
    pub fn builder() -> crate::input::update_snapshot_input::Builder {
        crate::input::update_snapshot_input::Builder::default()
    }
    /// Creates a new `UpdateSnapshot` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateSnapshot {
    type Output =
        std::result::Result<crate::output::UpdateSnapshotOutput, crate::error::UpdateSnapshotError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_snapshot::de_update_snapshot_http_error(response)
        } else {
            crate::protocol_serde::shape_update_snapshot::de_update_snapshot_http_response(response)
        }
    }
}

/// Operation shape for `UpdateUsageLimit`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_usage_limit`](crate::client::fluent_builders::UpdateUsageLimit).
///
/// `ParseStrictResponse` impl for `UpdateUsageLimit`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateUsageLimit {
    _private: (),
}
impl UpdateUsageLimit {
    /// Creates a new builder-style object to manufacture [`UpdateUsageLimitInput`](crate::input::UpdateUsageLimitInput).
    pub fn builder() -> crate::input::update_usage_limit_input::Builder {
        crate::input::update_usage_limit_input::Builder::default()
    }
    /// Creates a new `UpdateUsageLimit` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateUsageLimit {
    type Output = std::result::Result<
        crate::output::UpdateUsageLimitOutput,
        crate::error::UpdateUsageLimitError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_usage_limit::de_update_usage_limit_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_update_usage_limit::de_update_usage_limit_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `UpdateWorkgroup`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_workgroup`](crate::client::fluent_builders::UpdateWorkgroup).
///
/// `ParseStrictResponse` impl for `UpdateWorkgroup`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateWorkgroup {
    _private: (),
}
impl UpdateWorkgroup {
    /// Creates a new builder-style object to manufacture [`UpdateWorkgroupInput`](crate::input::UpdateWorkgroupInput).
    pub fn builder() -> crate::input::update_workgroup_input::Builder {
        crate::input::update_workgroup_input::Builder::default()
    }
    /// Creates a new `UpdateWorkgroup` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateWorkgroup {
    type Output = std::result::Result<
        crate::output::UpdateWorkgroupOutput,
        crate::error::UpdateWorkgroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_workgroup::de_update_workgroup_http_error(response)
        } else {
            crate::protocol_serde::shape_update_workgroup::de_update_workgroup_http_response(
                response,
            )
        }
    }
}

/// Operation customization and supporting types
pub mod customize;
