// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_target_action(
    object_3: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::TargetAction,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    match input {
        crate::types::TargetAction::CreateSnapshot(inner) => {
            #[allow(unused_mut)]
            let mut object_1 = object_3.key("createSnapshot").start_object();
            crate::protocol_serde::shape_create_snapshot_schedule_action_parameters::ser_create_snapshot_schedule_action_parameters(
                &mut object_1,
                inner,
            )?;
            object_1.finish();
        }
        crate::types::TargetAction::Unknown => return Err(::aws_smithy_types::error::operation::SerializationError::unknown_variant("TargetAction")),
    }
    Ok(())
}

pub(crate) fn de_target_action<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::TargetAction>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    let mut variant = None;
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => return Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        if let ::std::option::Option::Some(::std::result::Result::Ok(::aws_smithy_json::deserialize::Token::ValueNull { .. })) =
                            tokens.peek()
                        {
                            let _ = tokens.next().expect("peek returned a token")?;
                            continue;
                        }
                        let key = key.to_unescaped()?;
                        if key == "__type" {
                            ::aws_smithy_json::deserialize::token::skip_value(tokens)?;
                            continue;
                        }
                        if variant.is_some() {
                            return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
                                "encountered mixed variants in union",
                            ));
                        }
                        variant = match key.as_ref() {
                            "createSnapshot" => {
                                Some(crate::types::TargetAction::CreateSnapshot(
                                    crate::protocol_serde::shape_create_snapshot_schedule_action_parameters::de_create_snapshot_schedule_action_parameters(tokens)?
                                    .ok_or_else(|| ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'createSnapshot' cannot be null"))?
                                ))
                            }
                            _ => {
                                                                              ::aws_smithy_json::deserialize::token::skip_value(tokens)?;
                                                                              Some(crate::types::TargetAction::Unknown)
                                                                            }
                        };
                    }
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
        }
        _ => {
            return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ))
        }
    }
    if variant.is_none() {
        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "Union did not contain a valid variant.",
        ));
    }
    Ok(variant)
}
