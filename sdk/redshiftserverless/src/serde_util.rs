// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn insufficient_capacity_exception_correct_errors(
    mut builder: crate::types::error::builders::InsufficientCapacityExceptionBuilder,
) -> crate::types::error::builders::InsufficientCapacityExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_namespace_output_correct_errors(
    mut builder: crate::operation::delete_namespace::builders::DeleteNamespaceOutputBuilder,
) -> crate::operation::delete_namespace::builders::DeleteNamespaceOutputBuilder {
    if builder.namespace.is_none() {
        builder.namespace = {
            let builder = crate::types::builders::NamespaceBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn delete_workgroup_output_correct_errors(
    mut builder: crate::operation::delete_workgroup::builders::DeleteWorkgroupOutputBuilder,
) -> crate::operation::delete_workgroup::builders::DeleteWorkgroupOutputBuilder {
    if builder.workgroup.is_none() {
        builder.workgroup = {
            let builder = crate::types::builders::WorkgroupBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn get_namespace_output_correct_errors(
    mut builder: crate::operation::get_namespace::builders::GetNamespaceOutputBuilder,
) -> crate::operation::get_namespace::builders::GetNamespaceOutputBuilder {
    if builder.namespace.is_none() {
        builder.namespace = {
            let builder = crate::types::builders::NamespaceBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn get_workgroup_output_correct_errors(
    mut builder: crate::operation::get_workgroup::builders::GetWorkgroupOutputBuilder,
) -> crate::operation::get_workgroup::builders::GetWorkgroupOutputBuilder {
    if builder.workgroup.is_none() {
        builder.workgroup = {
            let builder = crate::types::builders::WorkgroupBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn invalid_pagination_exception_correct_errors(
    mut builder: crate::types::error::builders::InvalidPaginationExceptionBuilder,
) -> crate::types::error::builders::InvalidPaginationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn list_endpoint_access_output_correct_errors(
    mut builder: crate::operation::list_endpoint_access::builders::ListEndpointAccessOutputBuilder,
) -> crate::operation::list_endpoint_access::builders::ListEndpointAccessOutputBuilder {
    if builder.endpoints.is_none() {
        builder.endpoints = Some(Default::default())
    }
    builder
}

pub(crate) fn list_namespaces_output_correct_errors(
    mut builder: crate::operation::list_namespaces::builders::ListNamespacesOutputBuilder,
) -> crate::operation::list_namespaces::builders::ListNamespacesOutputBuilder {
    if builder.namespaces.is_none() {
        builder.namespaces = Some(Default::default())
    }
    builder
}

pub(crate) fn list_workgroups_output_correct_errors(
    mut builder: crate::operation::list_workgroups::builders::ListWorkgroupsOutputBuilder,
) -> crate::operation::list_workgroups::builders::ListWorkgroupsOutputBuilder {
    if builder.workgroups.is_none() {
        builder.workgroups = Some(Default::default())
    }
    builder
}

pub(crate) fn update_namespace_output_correct_errors(
    mut builder: crate::operation::update_namespace::builders::UpdateNamespaceOutputBuilder,
) -> crate::operation::update_namespace::builders::UpdateNamespaceOutputBuilder {
    if builder.namespace.is_none() {
        builder.namespace = {
            let builder = crate::types::builders::NamespaceBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn update_workgroup_output_correct_errors(
    mut builder: crate::operation::update_workgroup::builders::UpdateWorkgroupOutputBuilder,
) -> crate::operation::update_workgroup::builders::UpdateWorkgroupOutputBuilder {
    if builder.workgroup.is_none() {
        builder.workgroup = {
            let builder = crate::types::builders::WorkgroupBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}
