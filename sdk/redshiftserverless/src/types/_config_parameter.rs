// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An array of key-value pairs to set for advanced control over Amazon Redshift Serverless.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ConfigParameter {
    /// <p>The key of the parameter. The options are <code>datestyle</code>, <code>enable_user_activity_logging</code>, <code>query_group</code>, <code>search_path</code>, and <code>max_query_execution_time</code>.</p>
    #[doc(hidden)]
    pub parameter_key: std::option::Option<std::string::String>,
    /// <p>The value of the parameter to set.</p>
    #[doc(hidden)]
    pub parameter_value: std::option::Option<std::string::String>,
}
impl ConfigParameter {
    /// <p>The key of the parameter. The options are <code>datestyle</code>, <code>enable_user_activity_logging</code>, <code>query_group</code>, <code>search_path</code>, and <code>max_query_execution_time</code>.</p>
    pub fn parameter_key(&self) -> std::option::Option<&str> {
        self.parameter_key.as_deref()
    }
    /// <p>The value of the parameter to set.</p>
    pub fn parameter_value(&self) -> std::option::Option<&str> {
        self.parameter_value.as_deref()
    }
}
impl ConfigParameter {
    /// Creates a new builder-style object to manufacture [`ConfigParameter`](crate::types::ConfigParameter).
    pub fn builder() -> crate::types::builders::ConfigParameterBuilder {
        crate::types::builders::ConfigParameterBuilder::default()
    }
}

/// A builder for [`ConfigParameter`](crate::types::ConfigParameter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConfigParameterBuilder {
    pub(crate) parameter_key: std::option::Option<std::string::String>,
    pub(crate) parameter_value: std::option::Option<std::string::String>,
}
impl ConfigParameterBuilder {
    /// <p>The key of the parameter. The options are <code>datestyle</code>, <code>enable_user_activity_logging</code>, <code>query_group</code>, <code>search_path</code>, and <code>max_query_execution_time</code>.</p>
    pub fn parameter_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.parameter_key = Some(input.into());
        self
    }
    /// <p>The key of the parameter. The options are <code>datestyle</code>, <code>enable_user_activity_logging</code>, <code>query_group</code>, <code>search_path</code>, and <code>max_query_execution_time</code>.</p>
    pub fn set_parameter_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.parameter_key = input;
        self
    }
    /// <p>The value of the parameter to set.</p>
    pub fn parameter_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.parameter_value = Some(input.into());
        self
    }
    /// <p>The value of the parameter to set.</p>
    pub fn set_parameter_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.parameter_value = input;
        self
    }
    /// Consumes the builder and constructs a [`ConfigParameter`](crate::types::ConfigParameter).
    pub fn build(self) -> crate::types::ConfigParameter {
        crate::types::ConfigParameter {
            parameter_key: self.parameter_key,
            parameter_value: self.parameter_value,
        }
    }
}
