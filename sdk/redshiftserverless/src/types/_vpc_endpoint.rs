// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The connection endpoint for connecting to Amazon Redshift Serverless through the proxy.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VpcEndpoint {
    /// <p>The connection endpoint ID for connecting to Amazon Redshift Serverless.</p>
    pub vpc_endpoint_id: ::std::option::Option<::std::string::String>,
    /// <p>The VPC identifier that the endpoint is associated with.</p>
    pub vpc_id: ::std::option::Option<::std::string::String>,
    /// <p>One or more network interfaces of the endpoint. Also known as an interface endpoint.</p>
    pub network_interfaces: ::std::option::Option<::std::vec::Vec<crate::types::NetworkInterface>>,
}
impl VpcEndpoint {
    /// <p>The connection endpoint ID for connecting to Amazon Redshift Serverless.</p>
    pub fn vpc_endpoint_id(&self) -> ::std::option::Option<&str> {
        self.vpc_endpoint_id.as_deref()
    }
    /// <p>The VPC identifier that the endpoint is associated with.</p>
    pub fn vpc_id(&self) -> ::std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>One or more network interfaces of the endpoint. Also known as an interface endpoint.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.network_interfaces.is_none()`.
    pub fn network_interfaces(&self) -> &[crate::types::NetworkInterface] {
        self.network_interfaces.as_deref().unwrap_or_default()
    }
}
impl VpcEndpoint {
    /// Creates a new builder-style object to manufacture [`VpcEndpoint`](crate::types::VpcEndpoint).
    pub fn builder() -> crate::types::builders::VpcEndpointBuilder {
        crate::types::builders::VpcEndpointBuilder::default()
    }
}

/// A builder for [`VpcEndpoint`](crate::types::VpcEndpoint).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct VpcEndpointBuilder {
    pub(crate) vpc_endpoint_id: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_id: ::std::option::Option<::std::string::String>,
    pub(crate) network_interfaces: ::std::option::Option<::std::vec::Vec<crate::types::NetworkInterface>>,
}
impl VpcEndpointBuilder {
    /// <p>The connection endpoint ID for connecting to Amazon Redshift Serverless.</p>
    pub fn vpc_endpoint_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_endpoint_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The connection endpoint ID for connecting to Amazon Redshift Serverless.</p>
    pub fn set_vpc_endpoint_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_endpoint_id = input;
        self
    }
    /// <p>The connection endpoint ID for connecting to Amazon Redshift Serverless.</p>
    pub fn get_vpc_endpoint_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_endpoint_id
    }
    /// <p>The VPC identifier that the endpoint is associated with.</p>
    pub fn vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The VPC identifier that the endpoint is associated with.</p>
    pub fn set_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The VPC identifier that the endpoint is associated with.</p>
    pub fn get_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_id
    }
    /// Appends an item to `network_interfaces`.
    ///
    /// To override the contents of this collection use [`set_network_interfaces`](Self::set_network_interfaces).
    ///
    /// <p>One or more network interfaces of the endpoint. Also known as an interface endpoint.</p>
    pub fn network_interfaces(mut self, input: crate::types::NetworkInterface) -> Self {
        let mut v = self.network_interfaces.unwrap_or_default();
        v.push(input);
        self.network_interfaces = ::std::option::Option::Some(v);
        self
    }
    /// <p>One or more network interfaces of the endpoint. Also known as an interface endpoint.</p>
    pub fn set_network_interfaces(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::NetworkInterface>>) -> Self {
        self.network_interfaces = input;
        self
    }
    /// <p>One or more network interfaces of the endpoint. Also known as an interface endpoint.</p>
    pub fn get_network_interfaces(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::NetworkInterface>> {
        &self.network_interfaces
    }
    /// Consumes the builder and constructs a [`VpcEndpoint`](crate::types::VpcEndpoint).
    pub fn build(self) -> crate::types::VpcEndpoint {
        crate::types::VpcEndpoint {
            vpc_endpoint_id: self.vpc_endpoint_id,
            vpc_id: self.vpc_id,
            network_interfaces: self.network_interfaces,
        }
    }
}
