// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateUsageLimit`](crate::operation::update_usage_limit::builders::UpdateUsageLimitFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`usage_limit_id(impl Into<String>)`](crate::operation::update_usage_limit::builders::UpdateUsageLimitFluentBuilder::usage_limit_id) / [`set_usage_limit_id(Option<String>)`](crate::operation::update_usage_limit::builders::UpdateUsageLimitFluentBuilder::set_usage_limit_id): <p>The identifier of the usage limit to update.</p>
    ///   - [`amount(i64)`](crate::operation::update_usage_limit::builders::UpdateUsageLimitFluentBuilder::amount) / [`set_amount(Option<i64>)`](crate::operation::update_usage_limit::builders::UpdateUsageLimitFluentBuilder::set_amount): <p>The new limit amount. If time-based, this amount is in Redshift Processing Units (RPU) consumed per hour. If data-based, this amount is in terabytes (TB) of data transferred between Regions in cross-account sharing. The value must be a positive number.</p>
    ///   - [`breach_action(UsageLimitBreachAction)`](crate::operation::update_usage_limit::builders::UpdateUsageLimitFluentBuilder::breach_action) / [`set_breach_action(Option<UsageLimitBreachAction>)`](crate::operation::update_usage_limit::builders::UpdateUsageLimitFluentBuilder::set_breach_action): <p>The new action that Amazon Redshift Serverless takes when the limit is reached.</p>
    /// - On success, responds with [`UpdateUsageLimitOutput`](crate::operation::update_usage_limit::UpdateUsageLimitOutput) with field(s):
    ///   - [`usage_limit(Option<UsageLimit>)`](crate::operation::update_usage_limit::UpdateUsageLimitOutput::usage_limit): <p>The updated usage limit object.</p>
    /// - On failure, responds with [`SdkError<UpdateUsageLimitError>`](crate::operation::update_usage_limit::UpdateUsageLimitError)
    pub fn update_usage_limit(
        &self,
    ) -> crate::operation::update_usage_limit::builders::UpdateUsageLimitFluentBuilder {
        crate::operation::update_usage_limit::builders::UpdateUsageLimitFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
