// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListUsageLimits`](crate::operation::list_usage_limits::builders::ListUsageLimitsFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_usage_limits::builders::ListUsageLimitsFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::operation::list_usage_limits::builders::ListUsageLimitsFluentBuilder::resource_arn) / [`set_resource_arn(Option<String>)`](crate::operation::list_usage_limits::builders::ListUsageLimitsFluentBuilder::set_resource_arn):<br>required: **false**<br><p>The Amazon Resource Name (ARN) associated with the resource whose usage limits you want to list.</p><br>
    ///   - [`usage_type(UsageLimitUsageType)`](crate::operation::list_usage_limits::builders::ListUsageLimitsFluentBuilder::usage_type) / [`set_usage_type(Option<UsageLimitUsageType>)`](crate::operation::list_usage_limits::builders::ListUsageLimitsFluentBuilder::set_usage_type):<br>required: **false**<br><p>The Amazon Redshift Serverless feature whose limits you want to see.</p><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_usage_limits::builders::ListUsageLimitsFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_usage_limits::builders::ListUsageLimitsFluentBuilder::set_next_token):<br>required: **false**<br><p>If your initial <code>ListUsageLimits</code> operation returns a <code>nextToken</code>, you can include the returned <code>nextToken</code> in following <code>ListUsageLimits</code> operations, which returns results in the next page. </p><br>
    ///   - [`max_results(i32)`](crate::operation::list_usage_limits::builders::ListUsageLimitsFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::list_usage_limits::builders::ListUsageLimitsFluentBuilder::set_max_results):<br>required: **false**<br><p>An optional parameter that specifies the maximum number of results to return. You can use <code>nextToken</code> to get the next page of results. The default is 100.</p><br>
    /// - On success, responds with [`ListUsageLimitsOutput`](crate::operation::list_usage_limits::ListUsageLimitsOutput) with field(s):
    ///   - [`usage_limits(Option<Vec::<UsageLimit>>)`](crate::operation::list_usage_limits::ListUsageLimitsOutput::usage_limits): <p>An array of returned usage limit objects.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::list_usage_limits::ListUsageLimitsOutput::next_token): <p>When <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.</p>
    /// - On failure, responds with [`SdkError<ListUsageLimitsError>`](crate::operation::list_usage_limits::ListUsageLimitsError)
    pub fn list_usage_limits(&self) -> crate::operation::list_usage_limits::builders::ListUsageLimitsFluentBuilder {
        crate::operation::list_usage_limits::builders::ListUsageLimitsFluentBuilder::new(self.handle.clone())
    }
}
