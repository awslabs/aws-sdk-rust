// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetCredentials`](crate::operation::get_credentials::builders::GetCredentialsFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`db_name(impl Into<String>)`](crate::operation::get_credentials::builders::GetCredentialsFluentBuilder::db_name) / [`set_db_name(Option<String>)`](crate::operation::get_credentials::builders::GetCredentialsFluentBuilder::set_db_name):<br>required: **false**<br><p>The name of the database to get temporary authorization to log on to.</p>  <p>Constraints:</p>  <ul>   <li> <p>Must be 1 to 64 alphanumeric characters or hyphens.</p> </li>   <li> <p>Must contain only uppercase or lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.</p> </li>   <li> <p>The first character must be a letter.</p> </li>   <li> <p>Must not contain a colon ( : ) or slash ( / ).</p> </li>   <li> <p>Cannot be a reserved word. A list of reserved words can be found in <a href="https://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html">Reserved Words </a> in the Amazon Redshift Database Developer Guide</p> </li>  </ul><br>
    ///   - [`duration_seconds(i32)`](crate::operation::get_credentials::builders::GetCredentialsFluentBuilder::duration_seconds) / [`set_duration_seconds(Option<i32>)`](crate::operation::get_credentials::builders::GetCredentialsFluentBuilder::set_duration_seconds):<br>required: **false**<br><p>The number of seconds until the returned temporary password expires. The minimum is 900 seconds, and the maximum is 3600 seconds.</p><br>
    ///   - [`workgroup_name(impl Into<String>)`](crate::operation::get_credentials::builders::GetCredentialsFluentBuilder::workgroup_name) / [`set_workgroup_name(Option<String>)`](crate::operation::get_credentials::builders::GetCredentialsFluentBuilder::set_workgroup_name):<br>required: **false**<br><p>The name of the workgroup associated with the database.</p><br>
    ///   - [`custom_domain_name(impl Into<String>)`](crate::operation::get_credentials::builders::GetCredentialsFluentBuilder::custom_domain_name) / [`set_custom_domain_name(Option<String>)`](crate::operation::get_credentials::builders::GetCredentialsFluentBuilder::set_custom_domain_name):<br>required: **false**<br><p>The custom domain name associated with the workgroup. The custom domain name or the workgroup name must be included in the request.</p><br>
    /// - On success, responds with [`GetCredentialsOutput`](crate::operation::get_credentials::GetCredentialsOutput) with field(s):
    ///   - [`db_user(Option<String>)`](crate::operation::get_credentials::GetCredentialsOutput::db_user): <p>A database user name that is authorized to log on to the database <code>DbName</code> using the password <code>DbPassword</code>. If the specified <code>DbUser</code> exists in the database, the new user name has the same database privileges as the the user named in <code>DbUser</code>. By default, the user is added to PUBLIC.</p>
    ///   - [`db_password(Option<String>)`](crate::operation::get_credentials::GetCredentialsOutput::db_password): <p>A temporary password that authorizes the user name returned by <code>DbUser</code> to log on to the database <code>DbName</code>.</p>
    ///   - [`expiration(Option<DateTime>)`](crate::operation::get_credentials::GetCredentialsOutput::expiration): <p>The date and time the password in <code>DbPassword</code> expires.</p>
    ///   - [`next_refresh_time(Option<DateTime>)`](crate::operation::get_credentials::GetCredentialsOutput::next_refresh_time): <p>The date and time of when the <code>DbUser</code> and <code>DbPassword</code> authorization refreshes.</p>
    /// - On failure, responds with [`SdkError<GetCredentialsError>`](crate::operation::get_credentials::GetCredentialsError)
    pub fn get_credentials(&self) -> crate::operation::get_credentials::builders::GetCredentialsFluentBuilder {
        crate::operation::get_credentials::builders::GetCredentialsFluentBuilder::new(self.handle.clone())
    }
}
