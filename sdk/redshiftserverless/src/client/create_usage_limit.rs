// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateUsageLimit`](crate::operation::create_usage_limit::builders::CreateUsageLimitFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::operation::create_usage_limit::builders::CreateUsageLimitFluentBuilder::resource_arn) / [`set_resource_arn(Option<String>)`](crate::operation::create_usage_limit::builders::CreateUsageLimitFluentBuilder::set_resource_arn):<br>required: **true**<br><p>The Amazon Resource Name (ARN) of the Amazon Redshift Serverless resource to create the usage limit for.</p><br>
    ///   - [`usage_type(UsageLimitUsageType)`](crate::operation::create_usage_limit::builders::CreateUsageLimitFluentBuilder::usage_type) / [`set_usage_type(Option<UsageLimitUsageType>)`](crate::operation::create_usage_limit::builders::CreateUsageLimitFluentBuilder::set_usage_type):<br>required: **true**<br><p>The type of Amazon Redshift Serverless usage to create a usage limit for.</p><br>
    ///   - [`amount(i64)`](crate::operation::create_usage_limit::builders::CreateUsageLimitFluentBuilder::amount) / [`set_amount(Option<i64>)`](crate::operation::create_usage_limit::builders::CreateUsageLimitFluentBuilder::set_amount):<br>required: **true**<br><p>The limit amount. If time-based, this amount is in Redshift Processing Units (RPU) consumed per hour. If data-based, this amount is in terabytes (TB) of data transferred between Regions in cross-account sharing. The value must be a positive number.</p><br>
    ///   - [`period(UsageLimitPeriod)`](crate::operation::create_usage_limit::builders::CreateUsageLimitFluentBuilder::period) / [`set_period(Option<UsageLimitPeriod>)`](crate::operation::create_usage_limit::builders::CreateUsageLimitFluentBuilder::set_period):<br>required: **false**<br><p>The time period that the amount applies to. A weekly period begins on Sunday. The default is monthly.</p><br>
    ///   - [`breach_action(UsageLimitBreachAction)`](crate::operation::create_usage_limit::builders::CreateUsageLimitFluentBuilder::breach_action) / [`set_breach_action(Option<UsageLimitBreachAction>)`](crate::operation::create_usage_limit::builders::CreateUsageLimitFluentBuilder::set_breach_action):<br>required: **false**<br><p>The action that Amazon Redshift Serverless takes when the limit is reached. The default is log.</p><br>
    /// - On success, responds with [`CreateUsageLimitOutput`](crate::operation::create_usage_limit::CreateUsageLimitOutput) with field(s):
    ///   - [`usage_limit(Option<UsageLimit>)`](crate::operation::create_usage_limit::CreateUsageLimitOutput::usage_limit): <p>The returned usage limit object.</p>
    /// - On failure, responds with [`SdkError<CreateUsageLimitError>`](crate::operation::create_usage_limit::CreateUsageLimitError)
    pub fn create_usage_limit(&self) -> crate::operation::create_usage_limit::builders::CreateUsageLimitFluentBuilder {
        crate::operation::create_usage_limit::builders::CreateUsageLimitFluentBuilder::new(self.handle.clone())
    }
}
