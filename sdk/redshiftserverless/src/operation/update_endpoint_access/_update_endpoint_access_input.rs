// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateEndpointAccessInput {
    /// <p>The name of the VPC endpoint to update.</p>
    pub endpoint_name: ::std::option::Option<::std::string::String>,
    /// <p>The list of VPC security groups associated with the endpoint after the endpoint is modified.</p>
    pub vpc_security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl UpdateEndpointAccessInput {
    /// <p>The name of the VPC endpoint to update.</p>
    pub fn endpoint_name(&self) -> ::std::option::Option<&str> {
        self.endpoint_name.as_deref()
    }
    /// <p>The list of VPC security groups associated with the endpoint after the endpoint is modified.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.vpc_security_group_ids.is_none()`.
    pub fn vpc_security_group_ids(&self) -> &[::std::string::String] {
        self.vpc_security_group_ids.as_deref().unwrap_or_default()
    }
}
impl UpdateEndpointAccessInput {
    /// Creates a new builder-style object to manufacture [`UpdateEndpointAccessInput`](crate::operation::update_endpoint_access::UpdateEndpointAccessInput).
    pub fn builder() -> crate::operation::update_endpoint_access::builders::UpdateEndpointAccessInputBuilder {
        crate::operation::update_endpoint_access::builders::UpdateEndpointAccessInputBuilder::default()
    }
}

/// A builder for [`UpdateEndpointAccessInput`](crate::operation::update_endpoint_access::UpdateEndpointAccessInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateEndpointAccessInputBuilder {
    pub(crate) endpoint_name: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl UpdateEndpointAccessInputBuilder {
    /// <p>The name of the VPC endpoint to update.</p>
    /// This field is required.
    pub fn endpoint_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.endpoint_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the VPC endpoint to update.</p>
    pub fn set_endpoint_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.endpoint_name = input;
        self
    }
    /// <p>The name of the VPC endpoint to update.</p>
    pub fn get_endpoint_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.endpoint_name
    }
    /// Appends an item to `vpc_security_group_ids`.
    ///
    /// To override the contents of this collection use [`set_vpc_security_group_ids`](Self::set_vpc_security_group_ids).
    ///
    /// <p>The list of VPC security groups associated with the endpoint after the endpoint is modified.</p>
    pub fn vpc_security_group_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.vpc_security_group_ids.unwrap_or_default();
        v.push(input.into());
        self.vpc_security_group_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of VPC security groups associated with the endpoint after the endpoint is modified.</p>
    pub fn set_vpc_security_group_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.vpc_security_group_ids = input;
        self
    }
    /// <p>The list of VPC security groups associated with the endpoint after the endpoint is modified.</p>
    pub fn get_vpc_security_group_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.vpc_security_group_ids
    }
    /// Consumes the builder and constructs a [`UpdateEndpointAccessInput`](crate::operation::update_endpoint_access::UpdateEndpointAccessInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_endpoint_access::UpdateEndpointAccessInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_endpoint_access::UpdateEndpointAccessInput {
            endpoint_name: self.endpoint_name,
            vpc_security_group_ids: self.vpc_security_group_ids,
        })
    }
}
