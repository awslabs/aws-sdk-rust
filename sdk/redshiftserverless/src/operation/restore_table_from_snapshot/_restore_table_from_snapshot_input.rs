// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RestoreTableFromSnapshotInput {
    /// <p>The namespace of the snapshot to restore from.</p>
    #[doc(hidden)]
    pub namespace_name: std::option::Option<std::string::String>,
    /// <p>The workgroup to restore the table to.</p>
    #[doc(hidden)]
    pub workgroup_name: std::option::Option<std::string::String>,
    /// <p>The name of the snapshot to restore the table from.</p>
    #[doc(hidden)]
    pub snapshot_name: std::option::Option<std::string::String>,
    /// <p>The name of the source database that contains the table being restored.</p>
    #[doc(hidden)]
    pub source_database_name: std::option::Option<std::string::String>,
    /// <p>The name of the source schema that contains the table being restored.</p>
    #[doc(hidden)]
    pub source_schema_name: std::option::Option<std::string::String>,
    /// <p>The name of the source table being restored.</p>
    #[doc(hidden)]
    pub source_table_name: std::option::Option<std::string::String>,
    /// <p>The name of the database to restore the table to.</p>
    #[doc(hidden)]
    pub target_database_name: std::option::Option<std::string::String>,
    /// <p>The name of the schema to restore the table to.</p>
    #[doc(hidden)]
    pub target_schema_name: std::option::Option<std::string::String>,
    /// <p>The name of the table to create from the restore operation.</p>
    #[doc(hidden)]
    pub new_table_name: std::option::Option<std::string::String>,
    /// <p>Indicates whether name identifiers for database, schema, and table are case sensitive. If true, the names are case sensitive. If false, the names are not case sensitive. The default is false.</p>
    #[doc(hidden)]
    pub activate_case_sensitive_identifier: std::option::Option<bool>,
}
impl RestoreTableFromSnapshotInput {
    /// <p>The namespace of the snapshot to restore from.</p>
    pub fn namespace_name(&self) -> std::option::Option<&str> {
        self.namespace_name.as_deref()
    }
    /// <p>The workgroup to restore the table to.</p>
    pub fn workgroup_name(&self) -> std::option::Option<&str> {
        self.workgroup_name.as_deref()
    }
    /// <p>The name of the snapshot to restore the table from.</p>
    pub fn snapshot_name(&self) -> std::option::Option<&str> {
        self.snapshot_name.as_deref()
    }
    /// <p>The name of the source database that contains the table being restored.</p>
    pub fn source_database_name(&self) -> std::option::Option<&str> {
        self.source_database_name.as_deref()
    }
    /// <p>The name of the source schema that contains the table being restored.</p>
    pub fn source_schema_name(&self) -> std::option::Option<&str> {
        self.source_schema_name.as_deref()
    }
    /// <p>The name of the source table being restored.</p>
    pub fn source_table_name(&self) -> std::option::Option<&str> {
        self.source_table_name.as_deref()
    }
    /// <p>The name of the database to restore the table to.</p>
    pub fn target_database_name(&self) -> std::option::Option<&str> {
        self.target_database_name.as_deref()
    }
    /// <p>The name of the schema to restore the table to.</p>
    pub fn target_schema_name(&self) -> std::option::Option<&str> {
        self.target_schema_name.as_deref()
    }
    /// <p>The name of the table to create from the restore operation.</p>
    pub fn new_table_name(&self) -> std::option::Option<&str> {
        self.new_table_name.as_deref()
    }
    /// <p>Indicates whether name identifiers for database, schema, and table are case sensitive. If true, the names are case sensitive. If false, the names are not case sensitive. The default is false.</p>
    pub fn activate_case_sensitive_identifier(&self) -> std::option::Option<bool> {
        self.activate_case_sensitive_identifier
    }
}
impl RestoreTableFromSnapshotInput {
    /// Creates a new builder-style object to manufacture [`RestoreTableFromSnapshotInput`](crate::operation::restore_table_from_snapshot::RestoreTableFromSnapshotInput).
    pub fn builder(
    ) -> crate::operation::restore_table_from_snapshot::builders::RestoreTableFromSnapshotInputBuilder
    {
        crate::operation::restore_table_from_snapshot::builders::RestoreTableFromSnapshotInputBuilder::default()
    }
}

/// A builder for [`RestoreTableFromSnapshotInput`](crate::operation::restore_table_from_snapshot::RestoreTableFromSnapshotInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RestoreTableFromSnapshotInputBuilder {
    pub(crate) namespace_name: std::option::Option<std::string::String>,
    pub(crate) workgroup_name: std::option::Option<std::string::String>,
    pub(crate) snapshot_name: std::option::Option<std::string::String>,
    pub(crate) source_database_name: std::option::Option<std::string::String>,
    pub(crate) source_schema_name: std::option::Option<std::string::String>,
    pub(crate) source_table_name: std::option::Option<std::string::String>,
    pub(crate) target_database_name: std::option::Option<std::string::String>,
    pub(crate) target_schema_name: std::option::Option<std::string::String>,
    pub(crate) new_table_name: std::option::Option<std::string::String>,
    pub(crate) activate_case_sensitive_identifier: std::option::Option<bool>,
}
impl RestoreTableFromSnapshotInputBuilder {
    /// <p>The namespace of the snapshot to restore from.</p>
    pub fn namespace_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.namespace_name = Some(input.into());
        self
    }
    /// <p>The namespace of the snapshot to restore from.</p>
    pub fn set_namespace_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.namespace_name = input;
        self
    }
    /// <p>The workgroup to restore the table to.</p>
    pub fn workgroup_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.workgroup_name = Some(input.into());
        self
    }
    /// <p>The workgroup to restore the table to.</p>
    pub fn set_workgroup_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.workgroup_name = input;
        self
    }
    /// <p>The name of the snapshot to restore the table from.</p>
    pub fn snapshot_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.snapshot_name = Some(input.into());
        self
    }
    /// <p>The name of the snapshot to restore the table from.</p>
    pub fn set_snapshot_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.snapshot_name = input;
        self
    }
    /// <p>The name of the source database that contains the table being restored.</p>
    pub fn source_database_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_database_name = Some(input.into());
        self
    }
    /// <p>The name of the source database that contains the table being restored.</p>
    pub fn set_source_database_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_database_name = input;
        self
    }
    /// <p>The name of the source schema that contains the table being restored.</p>
    pub fn source_schema_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_schema_name = Some(input.into());
        self
    }
    /// <p>The name of the source schema that contains the table being restored.</p>
    pub fn set_source_schema_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_schema_name = input;
        self
    }
    /// <p>The name of the source table being restored.</p>
    pub fn source_table_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_table_name = Some(input.into());
        self
    }
    /// <p>The name of the source table being restored.</p>
    pub fn set_source_table_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_table_name = input;
        self
    }
    /// <p>The name of the database to restore the table to.</p>
    pub fn target_database_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.target_database_name = Some(input.into());
        self
    }
    /// <p>The name of the database to restore the table to.</p>
    pub fn set_target_database_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.target_database_name = input;
        self
    }
    /// <p>The name of the schema to restore the table to.</p>
    pub fn target_schema_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.target_schema_name = Some(input.into());
        self
    }
    /// <p>The name of the schema to restore the table to.</p>
    pub fn set_target_schema_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.target_schema_name = input;
        self
    }
    /// <p>The name of the table to create from the restore operation.</p>
    pub fn new_table_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.new_table_name = Some(input.into());
        self
    }
    /// <p>The name of the table to create from the restore operation.</p>
    pub fn set_new_table_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.new_table_name = input;
        self
    }
    /// <p>Indicates whether name identifiers for database, schema, and table are case sensitive. If true, the names are case sensitive. If false, the names are not case sensitive. The default is false.</p>
    pub fn activate_case_sensitive_identifier(mut self, input: bool) -> Self {
        self.activate_case_sensitive_identifier = Some(input);
        self
    }
    /// <p>Indicates whether name identifiers for database, schema, and table are case sensitive. If true, the names are case sensitive. If false, the names are not case sensitive. The default is false.</p>
    pub fn set_activate_case_sensitive_identifier(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.activate_case_sensitive_identifier = input;
        self
    }
    /// Consumes the builder and constructs a [`RestoreTableFromSnapshotInput`](crate::operation::restore_table_from_snapshot::RestoreTableFromSnapshotInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::restore_table_from_snapshot::RestoreTableFromSnapshotInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::restore_table_from_snapshot::RestoreTableFromSnapshotInput {
                namespace_name: self.namespace_name,
                workgroup_name: self.workgroup_name,
                snapshot_name: self.snapshot_name,
                source_database_name: self.source_database_name,
                source_schema_name: self.source_schema_name,
                source_table_name: self.source_table_name,
                target_database_name: self.target_database_name,
                target_schema_name: self.target_schema_name,
                new_table_name: self.new_table_name,
                activate_case_sensitive_identifier: self.activate_case_sensitive_identifier,
            },
        )
    }
}
