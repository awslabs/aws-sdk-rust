// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListWorkgroupsOutput {
    /// <p> If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. To retrieve the next page, make the call again using the returned token.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The returned array of workgroups.</p>
    #[doc(hidden)]
    pub workgroups: std::option::Option<std::vec::Vec<crate::types::Workgroup>>,
    _request_id: Option<String>,
}
impl ListWorkgroupsOutput {
    /// <p> If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. To retrieve the next page, make the call again using the returned token.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The returned array of workgroups.</p>
    pub fn workgroups(&self) -> std::option::Option<&[crate::types::Workgroup]> {
        self.workgroups.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListWorkgroupsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListWorkgroupsOutput {
    /// Creates a new builder-style object to manufacture [`ListWorkgroupsOutput`](crate::operation::list_workgroups::ListWorkgroupsOutput).
    pub fn builder() -> crate::operation::list_workgroups::builders::ListWorkgroupsOutputBuilder {
        crate::operation::list_workgroups::builders::ListWorkgroupsOutputBuilder::default()
    }
}

/// A builder for [`ListWorkgroupsOutput`](crate::operation::list_workgroups::ListWorkgroupsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListWorkgroupsOutputBuilder {
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) workgroups: std::option::Option<std::vec::Vec<crate::types::Workgroup>>,
    _request_id: Option<String>,
}
impl ListWorkgroupsOutputBuilder {
    /// <p> If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. To retrieve the next page, make the call again using the returned token.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p> If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. To retrieve the next page, make the call again using the returned token.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Appends an item to `workgroups`.
    ///
    /// To override the contents of this collection use [`set_workgroups`](Self::set_workgroups).
    ///
    /// <p>The returned array of workgroups.</p>
    pub fn workgroups(mut self, input: crate::types::Workgroup) -> Self {
        let mut v = self.workgroups.unwrap_or_default();
        v.push(input);
        self.workgroups = Some(v);
        self
    }
    /// <p>The returned array of workgroups.</p>
    pub fn set_workgroups(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Workgroup>>,
    ) -> Self {
        self.workgroups = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListWorkgroupsOutput`](crate::operation::list_workgroups::ListWorkgroupsOutput).
    pub fn build(self) -> crate::operation::list_workgroups::ListWorkgroupsOutput {
        crate::operation::list_workgroups::ListWorkgroupsOutput {
            next_token: self.next_token,
            workgroups: self.workgroups,
            _request_id: self._request_id,
        }
    }
}
