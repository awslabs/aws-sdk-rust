// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RestoreFromSnapshotOutput {
    /// <p>The name of the snapshot used to restore the namespace.</p>
    #[doc(hidden)]
    pub snapshot_name: std::option::Option<std::string::String>,
    /// <p>The owner Amazon Web Services; account of the snapshot that was restored.</p>
    #[doc(hidden)]
    pub owner_account: std::option::Option<std::string::String>,
    /// <p>A collection of database objects and users.</p>
    #[doc(hidden)]
    pub namespace: std::option::Option<crate::types::Namespace>,
    _request_id: Option<String>,
}
impl RestoreFromSnapshotOutput {
    /// <p>The name of the snapshot used to restore the namespace.</p>
    pub fn snapshot_name(&self) -> std::option::Option<&str> {
        self.snapshot_name.as_deref()
    }
    /// <p>The owner Amazon Web Services; account of the snapshot that was restored.</p>
    pub fn owner_account(&self) -> std::option::Option<&str> {
        self.owner_account.as_deref()
    }
    /// <p>A collection of database objects and users.</p>
    pub fn namespace(&self) -> std::option::Option<&crate::types::Namespace> {
        self.namespace.as_ref()
    }
}
impl aws_http::request_id::RequestId for RestoreFromSnapshotOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl RestoreFromSnapshotOutput {
    /// Creates a new builder-style object to manufacture [`RestoreFromSnapshotOutput`](crate::operation::restore_from_snapshot::RestoreFromSnapshotOutput).
    pub fn builder(
    ) -> crate::operation::restore_from_snapshot::builders::RestoreFromSnapshotOutputBuilder {
        crate::operation::restore_from_snapshot::builders::RestoreFromSnapshotOutputBuilder::default(
        )
    }
}

/// A builder for [`RestoreFromSnapshotOutput`](crate::operation::restore_from_snapshot::RestoreFromSnapshotOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RestoreFromSnapshotOutputBuilder {
    pub(crate) snapshot_name: std::option::Option<std::string::String>,
    pub(crate) owner_account: std::option::Option<std::string::String>,
    pub(crate) namespace: std::option::Option<crate::types::Namespace>,
    _request_id: Option<String>,
}
impl RestoreFromSnapshotOutputBuilder {
    /// <p>The name of the snapshot used to restore the namespace.</p>
    pub fn snapshot_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.snapshot_name = Some(input.into());
        self
    }
    /// <p>The name of the snapshot used to restore the namespace.</p>
    pub fn set_snapshot_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.snapshot_name = input;
        self
    }
    /// <p>The owner Amazon Web Services; account of the snapshot that was restored.</p>
    pub fn owner_account(mut self, input: impl Into<std::string::String>) -> Self {
        self.owner_account = Some(input.into());
        self
    }
    /// <p>The owner Amazon Web Services; account of the snapshot that was restored.</p>
    pub fn set_owner_account(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.owner_account = input;
        self
    }
    /// <p>A collection of database objects and users.</p>
    pub fn namespace(mut self, input: crate::types::Namespace) -> Self {
        self.namespace = Some(input);
        self
    }
    /// <p>A collection of database objects and users.</p>
    pub fn set_namespace(mut self, input: std::option::Option<crate::types::Namespace>) -> Self {
        self.namespace = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`RestoreFromSnapshotOutput`](crate::operation::restore_from_snapshot::RestoreFromSnapshotOutput).
    pub fn build(self) -> crate::operation::restore_from_snapshot::RestoreFromSnapshotOutput {
        crate::operation::restore_from_snapshot::RestoreFromSnapshotOutput {
            snapshot_name: self.snapshot_name,
            owner_account: self.owner_account,
            namespace: self.namespace,
            _request_id: self._request_id,
        }
    }
}
