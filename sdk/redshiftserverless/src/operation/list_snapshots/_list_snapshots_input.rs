// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListSnapshotsInput {
    /// <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>An optional parameter that specifies the maximum number of results to return. You can use <code>nextToken</code> to display the next page of results.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>The namespace from which to list all snapshots.</p>
    #[doc(hidden)]
    pub namespace_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the namespace from which to list all snapshots.</p>
    #[doc(hidden)]
    pub namespace_arn: std::option::Option<std::string::String>,
    /// <p>The owner Amazon Web Services account of the snapshot.</p>
    #[doc(hidden)]
    pub owner_account: std::option::Option<std::string::String>,
    /// <p>The time when the creation of the snapshot was initiated.</p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The timestamp showing when the snapshot creation finished.</p>
    #[doc(hidden)]
    pub end_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl ListSnapshotsInput {
    /// <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>An optional parameter that specifies the maximum number of results to return. You can use <code>nextToken</code> to display the next page of results.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>The namespace from which to list all snapshots.</p>
    pub fn namespace_name(&self) -> std::option::Option<&str> {
        self.namespace_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the namespace from which to list all snapshots.</p>
    pub fn namespace_arn(&self) -> std::option::Option<&str> {
        self.namespace_arn.as_deref()
    }
    /// <p>The owner Amazon Web Services account of the snapshot.</p>
    pub fn owner_account(&self) -> std::option::Option<&str> {
        self.owner_account.as_deref()
    }
    /// <p>The time when the creation of the snapshot was initiated.</p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The timestamp showing when the snapshot creation finished.</p>
    pub fn end_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
}
impl ListSnapshotsInput {
    /// Creates a new builder-style object to manufacture [`ListSnapshotsInput`](crate::operation::list_snapshots::ListSnapshotsInput).
    pub fn builder() -> crate::operation::list_snapshots::builders::ListSnapshotsInputBuilder {
        crate::operation::list_snapshots::builders::ListSnapshotsInputBuilder::default()
    }
}

/// A builder for [`ListSnapshotsInput`](crate::operation::list_snapshots::ListSnapshotsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListSnapshotsInputBuilder {
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) namespace_name: std::option::Option<std::string::String>,
    pub(crate) namespace_arn: std::option::Option<std::string::String>,
    pub(crate) owner_account: std::option::Option<std::string::String>,
    pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) end_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl ListSnapshotsInputBuilder {
    /// <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>An optional parameter that specifies the maximum number of results to return. You can use <code>nextToken</code> to display the next page of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>An optional parameter that specifies the maximum number of results to return. You can use <code>nextToken</code> to display the next page of results.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The namespace from which to list all snapshots.</p>
    pub fn namespace_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.namespace_name = Some(input.into());
        self
    }
    /// <p>The namespace from which to list all snapshots.</p>
    pub fn set_namespace_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.namespace_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the namespace from which to list all snapshots.</p>
    pub fn namespace_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.namespace_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the namespace from which to list all snapshots.</p>
    pub fn set_namespace_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.namespace_arn = input;
        self
    }
    /// <p>The owner Amazon Web Services account of the snapshot.</p>
    pub fn owner_account(mut self, input: impl Into<std::string::String>) -> Self {
        self.owner_account = Some(input.into());
        self
    }
    /// <p>The owner Amazon Web Services account of the snapshot.</p>
    pub fn set_owner_account(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.owner_account = input;
        self
    }
    /// <p>The time when the creation of the snapshot was initiated.</p>
    pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start_time = Some(input);
        self
    }
    /// <p>The time when the creation of the snapshot was initiated.</p>
    pub fn set_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The timestamp showing when the snapshot creation finished.</p>
    pub fn end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.end_time = Some(input);
        self
    }
    /// <p>The timestamp showing when the snapshot creation finished.</p>
    pub fn set_end_time(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// Consumes the builder and constructs a [`ListSnapshotsInput`](crate::operation::list_snapshots::ListSnapshotsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_snapshots::ListSnapshotsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_snapshots::ListSnapshotsInput {
            next_token: self.next_token,
            max_results: self.max_results,
            namespace_name: self.namespace_name,
            namespace_arn: self.namespace_arn,
            owner_account: self.owner_account,
            start_time: self.start_time,
            end_time: self.end_time,
        })
    }
}
