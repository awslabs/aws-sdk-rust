// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_usage_limit::_create_usage_limit_output::CreateUsageLimitOutputBuilder;

pub use crate::operation::create_usage_limit::_create_usage_limit_input::CreateUsageLimitInputBuilder;

impl CreateUsageLimitInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_usage_limit::CreateUsageLimitOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_usage_limit::CreateUsageLimitError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_usage_limit();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateUsageLimit`.
///
/// <p>Creates a usage limit for a specified Amazon Redshift Serverless usage type. The usage limit is identified by the returned usage limit identifier. </p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateUsageLimitFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_usage_limit::builders::CreateUsageLimitInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_usage_limit::CreateUsageLimitOutput,
        crate::operation::create_usage_limit::CreateUsageLimitError,
    > for CreateUsageLimitFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_usage_limit::CreateUsageLimitOutput,
            crate::operation::create_usage_limit::CreateUsageLimitError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateUsageLimitFluentBuilder {
    /// Creates a new `CreateUsageLimit`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateUsageLimit as a reference.
    pub fn as_input(&self) -> &crate::operation::create_usage_limit::builders::CreateUsageLimitInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_usage_limit::CreateUsageLimitOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_usage_limit::CreateUsageLimitError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_usage_limit::CreateUsageLimit::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_usage_limit::CreateUsageLimit::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_usage_limit::CreateUsageLimitOutput,
        crate::operation::create_usage_limit::CreateUsageLimitError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Redshift Serverless resource to create the usage limit for.</p>
    pub fn resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Redshift Serverless resource to create the usage limit for.</p>
    pub fn set_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Redshift Serverless resource to create the usage limit for.</p>
    pub fn get_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_resource_arn()
    }
    /// <p>The type of Amazon Redshift Serverless usage to create a usage limit for.</p>
    pub fn usage_type(mut self, input: crate::types::UsageLimitUsageType) -> Self {
        self.inner = self.inner.usage_type(input);
        self
    }
    /// <p>The type of Amazon Redshift Serverless usage to create a usage limit for.</p>
    pub fn set_usage_type(mut self, input: ::std::option::Option<crate::types::UsageLimitUsageType>) -> Self {
        self.inner = self.inner.set_usage_type(input);
        self
    }
    /// <p>The type of Amazon Redshift Serverless usage to create a usage limit for.</p>
    pub fn get_usage_type(&self) -> &::std::option::Option<crate::types::UsageLimitUsageType> {
        self.inner.get_usage_type()
    }
    /// <p>The limit amount. If time-based, this amount is in Redshift Processing Units (RPU) consumed per hour. If data-based, this amount is in terabytes (TB) of data transferred between Regions in cross-account sharing. The value must be a positive number.</p>
    pub fn amount(mut self, input: i64) -> Self {
        self.inner = self.inner.amount(input);
        self
    }
    /// <p>The limit amount. If time-based, this amount is in Redshift Processing Units (RPU) consumed per hour. If data-based, this amount is in terabytes (TB) of data transferred between Regions in cross-account sharing. The value must be a positive number.</p>
    pub fn set_amount(mut self, input: ::std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_amount(input);
        self
    }
    /// <p>The limit amount. If time-based, this amount is in Redshift Processing Units (RPU) consumed per hour. If data-based, this amount is in terabytes (TB) of data transferred between Regions in cross-account sharing. The value must be a positive number.</p>
    pub fn get_amount(&self) -> &::std::option::Option<i64> {
        self.inner.get_amount()
    }
    /// <p>The time period that the amount applies to. A weekly period begins on Sunday. The default is monthly.</p>
    pub fn period(mut self, input: crate::types::UsageLimitPeriod) -> Self {
        self.inner = self.inner.period(input);
        self
    }
    /// <p>The time period that the amount applies to. A weekly period begins on Sunday. The default is monthly.</p>
    pub fn set_period(mut self, input: ::std::option::Option<crate::types::UsageLimitPeriod>) -> Self {
        self.inner = self.inner.set_period(input);
        self
    }
    /// <p>The time period that the amount applies to. A weekly period begins on Sunday. The default is monthly.</p>
    pub fn get_period(&self) -> &::std::option::Option<crate::types::UsageLimitPeriod> {
        self.inner.get_period()
    }
    /// <p>The action that Amazon Redshift Serverless takes when the limit is reached. The default is log.</p>
    pub fn breach_action(mut self, input: crate::types::UsageLimitBreachAction) -> Self {
        self.inner = self.inner.breach_action(input);
        self
    }
    /// <p>The action that Amazon Redshift Serverless takes when the limit is reached. The default is log.</p>
    pub fn set_breach_action(mut self, input: ::std::option::Option<crate::types::UsageLimitBreachAction>) -> Self {
        self.inner = self.inner.set_breach_action(input);
        self
    }
    /// <p>The action that Amazon Redshift Serverless takes when the limit is reached. The default is log.</p>
    pub fn get_breach_action(&self) -> &::std::option::Option<crate::types::UsageLimitBreachAction> {
        self.inner.get_breach_action()
    }
}
