// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListUsageLimitsInput {
    /// <p>The Amazon Resource Name (ARN) associated with the resource whose usage limits you want to list.</p>
    pub resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Redshift Serverless feature whose limits you want to see.</p>
    pub usage_type: ::std::option::Option<crate::types::UsageLimitUsageType>,
    /// <p>If your initial <code>ListUsageLimits</code> operation returns a <code>nextToken</code>, you can include the returned <code>nextToken</code> in following <code>ListUsageLimits</code> operations, which returns results in the next page. </p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>An optional parameter that specifies the maximum number of results to return. You can use <code>nextToken</code> to get the next page of results. The default is 100.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl ListUsageLimitsInput {
    /// <p>The Amazon Resource Name (ARN) associated with the resource whose usage limits you want to list.</p>
    pub fn resource_arn(&self) -> ::std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>The Amazon Redshift Serverless feature whose limits you want to see.</p>
    pub fn usage_type(&self) -> ::std::option::Option<&crate::types::UsageLimitUsageType> {
        self.usage_type.as_ref()
    }
    /// <p>If your initial <code>ListUsageLimits</code> operation returns a <code>nextToken</code>, you can include the returned <code>nextToken</code> in following <code>ListUsageLimits</code> operations, which returns results in the next page. </p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>An optional parameter that specifies the maximum number of results to return. You can use <code>nextToken</code> to get the next page of results. The default is 100.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl ListUsageLimitsInput {
    /// Creates a new builder-style object to manufacture [`ListUsageLimitsInput`](crate::operation::list_usage_limits::ListUsageLimitsInput).
    pub fn builder() -> crate::operation::list_usage_limits::builders::ListUsageLimitsInputBuilder {
        crate::operation::list_usage_limits::builders::ListUsageLimitsInputBuilder::default()
    }
}

/// A builder for [`ListUsageLimitsInput`](crate::operation::list_usage_limits::ListUsageLimitsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListUsageLimitsInputBuilder {
    pub(crate) resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) usage_type: ::std::option::Option<crate::types::UsageLimitUsageType>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl ListUsageLimitsInputBuilder {
    /// <p>The Amazon Resource Name (ARN) associated with the resource whose usage limits you want to list.</p>
    pub fn resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) associated with the resource whose usage limits you want to list.</p>
    pub fn set_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) associated with the resource whose usage limits you want to list.</p>
    pub fn get_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_arn
    }
    /// <p>The Amazon Redshift Serverless feature whose limits you want to see.</p>
    pub fn usage_type(mut self, input: crate::types::UsageLimitUsageType) -> Self {
        self.usage_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon Redshift Serverless feature whose limits you want to see.</p>
    pub fn set_usage_type(mut self, input: ::std::option::Option<crate::types::UsageLimitUsageType>) -> Self {
        self.usage_type = input;
        self
    }
    /// <p>The Amazon Redshift Serverless feature whose limits you want to see.</p>
    pub fn get_usage_type(&self) -> &::std::option::Option<crate::types::UsageLimitUsageType> {
        &self.usage_type
    }
    /// <p>If your initial <code>ListUsageLimits</code> operation returns a <code>nextToken</code>, you can include the returned <code>nextToken</code> in following <code>ListUsageLimits</code> operations, which returns results in the next page. </p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If your initial <code>ListUsageLimits</code> operation returns a <code>nextToken</code>, you can include the returned <code>nextToken</code> in following <code>ListUsageLimits</code> operations, which returns results in the next page. </p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If your initial <code>ListUsageLimits</code> operation returns a <code>nextToken</code>, you can include the returned <code>nextToken</code> in following <code>ListUsageLimits</code> operations, which returns results in the next page. </p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>An optional parameter that specifies the maximum number of results to return. You can use <code>nextToken</code> to get the next page of results. The default is 100.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>An optional parameter that specifies the maximum number of results to return. You can use <code>nextToken</code> to get the next page of results. The default is 100.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>An optional parameter that specifies the maximum number of results to return. You can use <code>nextToken</code> to get the next page of results. The default is 100.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`ListUsageLimitsInput`](crate::operation::list_usage_limits::ListUsageLimitsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_usage_limits::ListUsageLimitsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_usage_limits::ListUsageLimitsInput {
            resource_arn: self.resource_arn,
            usage_type: self.usage_type,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
