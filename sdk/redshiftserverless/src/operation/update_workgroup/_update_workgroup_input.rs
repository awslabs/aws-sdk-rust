// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateWorkgroupInput {
    /// <p>The name of the workgroup to update.</p>
    #[doc(hidden)]
    pub workgroup_name: std::option::Option<std::string::String>,
    /// <p>The new base data warehouse capacity in Redshift Processing Units (RPUs).</p>
    #[doc(hidden)]
    pub base_capacity: std::option::Option<i32>,
    /// <p>The value that specifies whether to turn on enhanced virtual private cloud (VPC) routing, which forces Amazon Redshift Serverless to route traffic through your VPC.</p>
    #[doc(hidden)]
    pub enhanced_vpc_routing: std::option::Option<bool>,
    /// <p>An array of parameters to set for advanced control over a database. The options are <code>datestyle</code>, <code>enable_user_activity_logging</code>, <code>query_group</code>, <code>search_path</code>, and <code>max_query_execution_time</code>.</p>
    #[doc(hidden)]
    pub config_parameters: std::option::Option<std::vec::Vec<crate::types::ConfigParameter>>,
    /// <p>A value that specifies whether the workgroup can be accessible from a public network.</p>
    #[doc(hidden)]
    pub publicly_accessible: std::option::Option<bool>,
    /// <p>An array of VPC subnet IDs to associate with the workgroup.</p>
    #[doc(hidden)]
    pub subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>An array of security group IDs to associate with the workgroup.</p>
    #[doc(hidden)]
    pub security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The custom port to use when connecting to a workgroup. Valid port ranges are 5431-5455 and 8191-8215. The default is 5439.</p>
    #[doc(hidden)]
    pub port: std::option::Option<i32>,
}
impl UpdateWorkgroupInput {
    /// <p>The name of the workgroup to update.</p>
    pub fn workgroup_name(&self) -> std::option::Option<&str> {
        self.workgroup_name.as_deref()
    }
    /// <p>The new base data warehouse capacity in Redshift Processing Units (RPUs).</p>
    pub fn base_capacity(&self) -> std::option::Option<i32> {
        self.base_capacity
    }
    /// <p>The value that specifies whether to turn on enhanced virtual private cloud (VPC) routing, which forces Amazon Redshift Serverless to route traffic through your VPC.</p>
    pub fn enhanced_vpc_routing(&self) -> std::option::Option<bool> {
        self.enhanced_vpc_routing
    }
    /// <p>An array of parameters to set for advanced control over a database. The options are <code>datestyle</code>, <code>enable_user_activity_logging</code>, <code>query_group</code>, <code>search_path</code>, and <code>max_query_execution_time</code>.</p>
    pub fn config_parameters(&self) -> std::option::Option<&[crate::types::ConfigParameter]> {
        self.config_parameters.as_deref()
    }
    /// <p>A value that specifies whether the workgroup can be accessible from a public network.</p>
    pub fn publicly_accessible(&self) -> std::option::Option<bool> {
        self.publicly_accessible
    }
    /// <p>An array of VPC subnet IDs to associate with the workgroup.</p>
    pub fn subnet_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.subnet_ids.as_deref()
    }
    /// <p>An array of security group IDs to associate with the workgroup.</p>
    pub fn security_group_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.security_group_ids.as_deref()
    }
    /// <p>The custom port to use when connecting to a workgroup. Valid port ranges are 5431-5455 and 8191-8215. The default is 5439.</p>
    pub fn port(&self) -> std::option::Option<i32> {
        self.port
    }
}
impl UpdateWorkgroupInput {
    /// Creates a new builder-style object to manufacture [`UpdateWorkgroupInput`](crate::operation::update_workgroup::UpdateWorkgroupInput).
    pub fn builder() -> crate::operation::update_workgroup::builders::UpdateWorkgroupInputBuilder {
        crate::operation::update_workgroup::builders::UpdateWorkgroupInputBuilder::default()
    }
}

/// A builder for [`UpdateWorkgroupInput`](crate::operation::update_workgroup::UpdateWorkgroupInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateWorkgroupInputBuilder {
    pub(crate) workgroup_name: std::option::Option<std::string::String>,
    pub(crate) base_capacity: std::option::Option<i32>,
    pub(crate) enhanced_vpc_routing: std::option::Option<bool>,
    pub(crate) config_parameters: std::option::Option<std::vec::Vec<crate::types::ConfigParameter>>,
    pub(crate) publicly_accessible: std::option::Option<bool>,
    pub(crate) subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) port: std::option::Option<i32>,
}
impl UpdateWorkgroupInputBuilder {
    /// <p>The name of the workgroup to update.</p>
    pub fn workgroup_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.workgroup_name = Some(input.into());
        self
    }
    /// <p>The name of the workgroup to update.</p>
    pub fn set_workgroup_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.workgroup_name = input;
        self
    }
    /// <p>The new base data warehouse capacity in Redshift Processing Units (RPUs).</p>
    pub fn base_capacity(mut self, input: i32) -> Self {
        self.base_capacity = Some(input);
        self
    }
    /// <p>The new base data warehouse capacity in Redshift Processing Units (RPUs).</p>
    pub fn set_base_capacity(mut self, input: std::option::Option<i32>) -> Self {
        self.base_capacity = input;
        self
    }
    /// <p>The value that specifies whether to turn on enhanced virtual private cloud (VPC) routing, which forces Amazon Redshift Serverless to route traffic through your VPC.</p>
    pub fn enhanced_vpc_routing(mut self, input: bool) -> Self {
        self.enhanced_vpc_routing = Some(input);
        self
    }
    /// <p>The value that specifies whether to turn on enhanced virtual private cloud (VPC) routing, which forces Amazon Redshift Serverless to route traffic through your VPC.</p>
    pub fn set_enhanced_vpc_routing(mut self, input: std::option::Option<bool>) -> Self {
        self.enhanced_vpc_routing = input;
        self
    }
    /// Appends an item to `config_parameters`.
    ///
    /// To override the contents of this collection use [`set_config_parameters`](Self::set_config_parameters).
    ///
    /// <p>An array of parameters to set for advanced control over a database. The options are <code>datestyle</code>, <code>enable_user_activity_logging</code>, <code>query_group</code>, <code>search_path</code>, and <code>max_query_execution_time</code>.</p>
    pub fn config_parameters(mut self, input: crate::types::ConfigParameter) -> Self {
        let mut v = self.config_parameters.unwrap_or_default();
        v.push(input);
        self.config_parameters = Some(v);
        self
    }
    /// <p>An array of parameters to set for advanced control over a database. The options are <code>datestyle</code>, <code>enable_user_activity_logging</code>, <code>query_group</code>, <code>search_path</code>, and <code>max_query_execution_time</code>.</p>
    pub fn set_config_parameters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ConfigParameter>>,
    ) -> Self {
        self.config_parameters = input;
        self
    }
    /// <p>A value that specifies whether the workgroup can be accessible from a public network.</p>
    pub fn publicly_accessible(mut self, input: bool) -> Self {
        self.publicly_accessible = Some(input);
        self
    }
    /// <p>A value that specifies whether the workgroup can be accessible from a public network.</p>
    pub fn set_publicly_accessible(mut self, input: std::option::Option<bool>) -> Self {
        self.publicly_accessible = input;
        self
    }
    /// Appends an item to `subnet_ids`.
    ///
    /// To override the contents of this collection use [`set_subnet_ids`](Self::set_subnet_ids).
    ///
    /// <p>An array of VPC subnet IDs to associate with the workgroup.</p>
    pub fn subnet_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.subnet_ids.unwrap_or_default();
        v.push(input.into());
        self.subnet_ids = Some(v);
        self
    }
    /// <p>An array of VPC subnet IDs to associate with the workgroup.</p>
    pub fn set_subnet_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.subnet_ids = input;
        self
    }
    /// Appends an item to `security_group_ids`.
    ///
    /// To override the contents of this collection use [`set_security_group_ids`](Self::set_security_group_ids).
    ///
    /// <p>An array of security group IDs to associate with the workgroup.</p>
    pub fn security_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.security_group_ids.unwrap_or_default();
        v.push(input.into());
        self.security_group_ids = Some(v);
        self
    }
    /// <p>An array of security group IDs to associate with the workgroup.</p>
    pub fn set_security_group_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.security_group_ids = input;
        self
    }
    /// <p>The custom port to use when connecting to a workgroup. Valid port ranges are 5431-5455 and 8191-8215. The default is 5439.</p>
    pub fn port(mut self, input: i32) -> Self {
        self.port = Some(input);
        self
    }
    /// <p>The custom port to use when connecting to a workgroup. Valid port ranges are 5431-5455 and 8191-8215. The default is 5439.</p>
    pub fn set_port(mut self, input: std::option::Option<i32>) -> Self {
        self.port = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateWorkgroupInput`](crate::operation::update_workgroup::UpdateWorkgroupInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_workgroup::UpdateWorkgroupInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::update_workgroup::UpdateWorkgroupInput {
            workgroup_name: self.workgroup_name,
            base_capacity: self.base_capacity,
            enhanced_vpc_routing: self.enhanced_vpc_routing,
            config_parameters: self.config_parameters,
            publicly_accessible: self.publicly_accessible,
            subnet_ids: self.subnet_ids,
            security_group_ids: self.security_group_ids,
            port: self.port,
        })
    }
}
