// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateNamespaceInput {
    /// <p>The name of the namespace.</p>
    #[doc(hidden)]
    pub namespace_name: std::option::Option<std::string::String>,
    /// <p>The username of the administrator for the first database created in the namespace.</p>
    #[doc(hidden)]
    pub admin_username: std::option::Option<std::string::String>,
    /// <p>The password of the administrator for the first database created in the namespace.</p>
    #[doc(hidden)]
    pub admin_user_password: std::option::Option<std::string::String>,
    /// <p>The name of the first database created in the namespace.</p>
    #[doc(hidden)]
    pub db_name: std::option::Option<std::string::String>,
    /// <p>The ID of the Amazon Web Services Key Management Service key used to encrypt your data.</p>
    #[doc(hidden)]
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the IAM role to set as a default in the namespace.</p>
    #[doc(hidden)]
    pub default_iam_role_arn: std::option::Option<std::string::String>,
    /// <p>A list of IAM roles to associate with the namespace.</p>
    #[doc(hidden)]
    pub iam_roles: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The types of logs the namespace can export. Available export types are <code>userlog</code>, <code>connectionlog</code>, and <code>useractivitylog</code>.</p>
    #[doc(hidden)]
    pub log_exports: std::option::Option<std::vec::Vec<crate::types::LogExport>>,
    /// <p>A list of tag instances.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateNamespaceInput {
    /// <p>The name of the namespace.</p>
    pub fn namespace_name(&self) -> std::option::Option<&str> {
        self.namespace_name.as_deref()
    }
    /// <p>The username of the administrator for the first database created in the namespace.</p>
    pub fn admin_username(&self) -> std::option::Option<&str> {
        self.admin_username.as_deref()
    }
    /// <p>The password of the administrator for the first database created in the namespace.</p>
    pub fn admin_user_password(&self) -> std::option::Option<&str> {
        self.admin_user_password.as_deref()
    }
    /// <p>The name of the first database created in the namespace.</p>
    pub fn db_name(&self) -> std::option::Option<&str> {
        self.db_name.as_deref()
    }
    /// <p>The ID of the Amazon Web Services Key Management Service key used to encrypt your data.</p>
    pub fn kms_key_id(&self) -> std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role to set as a default in the namespace.</p>
    pub fn default_iam_role_arn(&self) -> std::option::Option<&str> {
        self.default_iam_role_arn.as_deref()
    }
    /// <p>A list of IAM roles to associate with the namespace.</p>
    pub fn iam_roles(&self) -> std::option::Option<&[std::string::String]> {
        self.iam_roles.as_deref()
    }
    /// <p>The types of logs the namespace can export. Available export types are <code>userlog</code>, <code>connectionlog</code>, and <code>useractivitylog</code>.</p>
    pub fn log_exports(&self) -> std::option::Option<&[crate::types::LogExport]> {
        self.log_exports.as_deref()
    }
    /// <p>A list of tag instances.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl std::fmt::Debug for CreateNamespaceInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateNamespaceInput");
        formatter.field("namespace_name", &self.namespace_name);
        formatter.field("admin_username", &"*** Sensitive Data Redacted ***");
        formatter.field("admin_user_password", &"*** Sensitive Data Redacted ***");
        formatter.field("db_name", &self.db_name);
        formatter.field("kms_key_id", &self.kms_key_id);
        formatter.field("default_iam_role_arn", &self.default_iam_role_arn);
        formatter.field("iam_roles", &self.iam_roles);
        formatter.field("log_exports", &self.log_exports);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
impl CreateNamespaceInput {
    /// Creates a new builder-style object to manufacture [`CreateNamespaceInput`](crate::operation::create_namespace::CreateNamespaceInput).
    pub fn builder() -> crate::operation::create_namespace::builders::CreateNamespaceInputBuilder {
        crate::operation::create_namespace::builders::CreateNamespaceInputBuilder::default()
    }
}

/// A builder for [`CreateNamespaceInput`](crate::operation::create_namespace::CreateNamespaceInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct CreateNamespaceInputBuilder {
    pub(crate) namespace_name: std::option::Option<std::string::String>,
    pub(crate) admin_username: std::option::Option<std::string::String>,
    pub(crate) admin_user_password: std::option::Option<std::string::String>,
    pub(crate) db_name: std::option::Option<std::string::String>,
    pub(crate) kms_key_id: std::option::Option<std::string::String>,
    pub(crate) default_iam_role_arn: std::option::Option<std::string::String>,
    pub(crate) iam_roles: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) log_exports: std::option::Option<std::vec::Vec<crate::types::LogExport>>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateNamespaceInputBuilder {
    /// <p>The name of the namespace.</p>
    pub fn namespace_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.namespace_name = Some(input.into());
        self
    }
    /// <p>The name of the namespace.</p>
    pub fn set_namespace_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.namespace_name = input;
        self
    }
    /// <p>The username of the administrator for the first database created in the namespace.</p>
    pub fn admin_username(mut self, input: impl Into<std::string::String>) -> Self {
        self.admin_username = Some(input.into());
        self
    }
    /// <p>The username of the administrator for the first database created in the namespace.</p>
    pub fn set_admin_username(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.admin_username = input;
        self
    }
    /// <p>The password of the administrator for the first database created in the namespace.</p>
    pub fn admin_user_password(mut self, input: impl Into<std::string::String>) -> Self {
        self.admin_user_password = Some(input.into());
        self
    }
    /// <p>The password of the administrator for the first database created in the namespace.</p>
    pub fn set_admin_user_password(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.admin_user_password = input;
        self
    }
    /// <p>The name of the first database created in the namespace.</p>
    pub fn db_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.db_name = Some(input.into());
        self
    }
    /// <p>The name of the first database created in the namespace.</p>
    pub fn set_db_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.db_name = input;
        self
    }
    /// <p>The ID of the Amazon Web Services Key Management Service key used to encrypt your data.</p>
    pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.kms_key_id = Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services Key Management Service key used to encrypt your data.</p>
    pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role to set as a default in the namespace.</p>
    pub fn default_iam_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.default_iam_role_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role to set as a default in the namespace.</p>
    pub fn set_default_iam_role_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.default_iam_role_arn = input;
        self
    }
    /// Appends an item to `iam_roles`.
    ///
    /// To override the contents of this collection use [`set_iam_roles`](Self::set_iam_roles).
    ///
    /// <p>A list of IAM roles to associate with the namespace.</p>
    pub fn iam_roles(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.iam_roles.unwrap_or_default();
        v.push(input.into());
        self.iam_roles = Some(v);
        self
    }
    /// <p>A list of IAM roles to associate with the namespace.</p>
    pub fn set_iam_roles(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.iam_roles = input;
        self
    }
    /// Appends an item to `log_exports`.
    ///
    /// To override the contents of this collection use [`set_log_exports`](Self::set_log_exports).
    ///
    /// <p>The types of logs the namespace can export. Available export types are <code>userlog</code>, <code>connectionlog</code>, and <code>useractivitylog</code>.</p>
    pub fn log_exports(mut self, input: crate::types::LogExport) -> Self {
        let mut v = self.log_exports.unwrap_or_default();
        v.push(input);
        self.log_exports = Some(v);
        self
    }
    /// <p>The types of logs the namespace can export. Available export types are <code>userlog</code>, <code>connectionlog</code>, and <code>useractivitylog</code>.</p>
    pub fn set_log_exports(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::LogExport>>,
    ) -> Self {
        self.log_exports = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tag instances.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>A list of tag instances.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateNamespaceInput`](crate::operation::create_namespace::CreateNamespaceInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_namespace::CreateNamespaceInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_namespace::CreateNamespaceInput {
            namespace_name: self.namespace_name,
            admin_username: self.admin_username,
            admin_user_password: self.admin_user_password,
            db_name: self.db_name,
            kms_key_id: self.kms_key_id,
            default_iam_role_arn: self.default_iam_role_arn,
            iam_roles: self.iam_roles,
            log_exports: self.log_exports,
            tags: self.tags,
        })
    }
}
impl std::fmt::Debug for CreateNamespaceInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateNamespaceInputBuilder");
        formatter.field("namespace_name", &self.namespace_name);
        formatter.field("admin_username", &"*** Sensitive Data Redacted ***");
        formatter.field("admin_user_password", &"*** Sensitive Data Redacted ***");
        formatter.field("db_name", &self.db_name);
        formatter.field("kms_key_id", &self.kms_key_id);
        formatter.field("default_iam_role_arn", &self.default_iam_role_arn);
        formatter.field("iam_roles", &self.iam_roles);
        formatter.field("log_exports", &self.log_exports);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
