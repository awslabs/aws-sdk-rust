// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConvertRecoveryPointToSnapshotInput {
    /// <p>The unique identifier of the recovery point.</p>
    pub recovery_point_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the snapshot.</p>
    pub snapshot_name: ::std::option::Option<::std::string::String>,
    /// <p>How long to retain the snapshot.</p>
    pub retention_period: ::std::option::Option<i32>,
    /// <p>An array of <a href="https://docs.aws.amazon.com/redshift-serverless/latest/APIReference/API_Tag.html">Tag objects</a> to associate with the created snapshot.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl ConvertRecoveryPointToSnapshotInput {
    /// <p>The unique identifier of the recovery point.</p>
    pub fn recovery_point_id(&self) -> ::std::option::Option<&str> {
        self.recovery_point_id.as_deref()
    }
    /// <p>The name of the snapshot.</p>
    pub fn snapshot_name(&self) -> ::std::option::Option<&str> {
        self.snapshot_name.as_deref()
    }
    /// <p>How long to retain the snapshot.</p>
    pub fn retention_period(&self) -> ::std::option::Option<i32> {
        self.retention_period
    }
    /// <p>An array of <a href="https://docs.aws.amazon.com/redshift-serverless/latest/APIReference/API_Tag.html">Tag objects</a> to associate with the created snapshot.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl ConvertRecoveryPointToSnapshotInput {
    /// Creates a new builder-style object to manufacture [`ConvertRecoveryPointToSnapshotInput`](crate::operation::convert_recovery_point_to_snapshot::ConvertRecoveryPointToSnapshotInput).
    pub fn builder() -> crate::operation::convert_recovery_point_to_snapshot::builders::ConvertRecoveryPointToSnapshotInputBuilder {
        crate::operation::convert_recovery_point_to_snapshot::builders::ConvertRecoveryPointToSnapshotInputBuilder::default()
    }
}

/// A builder for [`ConvertRecoveryPointToSnapshotInput`](crate::operation::convert_recovery_point_to_snapshot::ConvertRecoveryPointToSnapshotInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ConvertRecoveryPointToSnapshotInputBuilder {
    pub(crate) recovery_point_id: ::std::option::Option<::std::string::String>,
    pub(crate) snapshot_name: ::std::option::Option<::std::string::String>,
    pub(crate) retention_period: ::std::option::Option<i32>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl ConvertRecoveryPointToSnapshotInputBuilder {
    /// <p>The unique identifier of the recovery point.</p>
    /// This field is required.
    pub fn recovery_point_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.recovery_point_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the recovery point.</p>
    pub fn set_recovery_point_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.recovery_point_id = input;
        self
    }
    /// <p>The unique identifier of the recovery point.</p>
    pub fn get_recovery_point_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.recovery_point_id
    }
    /// <p>The name of the snapshot.</p>
    /// This field is required.
    pub fn snapshot_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.snapshot_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the snapshot.</p>
    pub fn set_snapshot_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.snapshot_name = input;
        self
    }
    /// <p>The name of the snapshot.</p>
    pub fn get_snapshot_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.snapshot_name
    }
    /// <p>How long to retain the snapshot.</p>
    pub fn retention_period(mut self, input: i32) -> Self {
        self.retention_period = ::std::option::Option::Some(input);
        self
    }
    /// <p>How long to retain the snapshot.</p>
    pub fn set_retention_period(mut self, input: ::std::option::Option<i32>) -> Self {
        self.retention_period = input;
        self
    }
    /// <p>How long to retain the snapshot.</p>
    pub fn get_retention_period(&self) -> &::std::option::Option<i32> {
        &self.retention_period
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An array of <a href="https://docs.aws.amazon.com/redshift-serverless/latest/APIReference/API_Tag.html">Tag objects</a> to associate with the created snapshot.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of <a href="https://docs.aws.amazon.com/redshift-serverless/latest/APIReference/API_Tag.html">Tag objects</a> to associate with the created snapshot.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>An array of <a href="https://docs.aws.amazon.com/redshift-serverless/latest/APIReference/API_Tag.html">Tag objects</a> to associate with the created snapshot.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`ConvertRecoveryPointToSnapshotInput`](crate::operation::convert_recovery_point_to_snapshot::ConvertRecoveryPointToSnapshotInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::convert_recovery_point_to_snapshot::ConvertRecoveryPointToSnapshotInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::convert_recovery_point_to_snapshot::ConvertRecoveryPointToSnapshotInput {
                recovery_point_id: self.recovery_point_id,
                snapshot_name: self.snapshot_name,
                retention_period: self.retention_period,
                tags: self.tags,
            },
        )
    }
}
