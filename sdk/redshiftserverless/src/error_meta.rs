// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>You do not have sufficient access to perform this action.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>The submitted action has conflicts.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>There is an insufficient capacity to perform the action.</p>
    InsufficientCapacityException(crate::types::error::InsufficientCapacityException),
    /// <p>The request processing has failed because of an unknown error, exception or failure.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>The provided pagination token is invalid.</p>
    InvalidPaginationException(crate::types::error::InvalidPaginationException),
    /// <p>The resource could not be found.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>The service limit was exceeded.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The request was denied due to request throttling.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The request exceeded the number of tags allowed for a resource.</p>
    TooManyTagsException(crate::types::error::TooManyTagsException),
    /// <p>The input failed to satisfy the constraints specified by an AWS service.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(::aws_smithy_types::error::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InsufficientCapacityException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::InvalidPaginationException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::TooManyTagsException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::convert_recovery_point_to_snapshot::ConvertRecoveryPointToSnapshotError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::convert_recovery_point_to_snapshot::ConvertRecoveryPointToSnapshotError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::convert_recovery_point_to_snapshot::ConvertRecoveryPointToSnapshotError> for Error {
    fn from(err: crate::operation::convert_recovery_point_to_snapshot::ConvertRecoveryPointToSnapshotError) -> Self {
        match err {
            crate::operation::convert_recovery_point_to_snapshot::ConvertRecoveryPointToSnapshotError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::convert_recovery_point_to_snapshot::ConvertRecoveryPointToSnapshotError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::convert_recovery_point_to_snapshot::ConvertRecoveryPointToSnapshotError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::convert_recovery_point_to_snapshot::ConvertRecoveryPointToSnapshotError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::convert_recovery_point_to_snapshot::ConvertRecoveryPointToSnapshotError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::operation::convert_recovery_point_to_snapshot::ConvertRecoveryPointToSnapshotError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::convert_recovery_point_to_snapshot::ConvertRecoveryPointToSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_custom_domain_association::CreateCustomDomainAssociationError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_custom_domain_association::CreateCustomDomainAssociationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_custom_domain_association::CreateCustomDomainAssociationError> for Error {
    fn from(err: crate::operation::create_custom_domain_association::CreateCustomDomainAssociationError) -> Self {
        match err {
            crate::operation::create_custom_domain_association::CreateCustomDomainAssociationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_custom_domain_association::CreateCustomDomainAssociationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_custom_domain_association::CreateCustomDomainAssociationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_custom_domain_association::CreateCustomDomainAssociationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_custom_domain_association::CreateCustomDomainAssociationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_custom_domain_association::CreateCustomDomainAssociationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_custom_domain_association::CreateCustomDomainAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_endpoint_access::CreateEndpointAccessError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_endpoint_access::CreateEndpointAccessError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_endpoint_access::CreateEndpointAccessError> for Error {
    fn from(err: crate::operation::create_endpoint_access::CreateEndpointAccessError) -> Self {
        match err {
            crate::operation::create_endpoint_access::CreateEndpointAccessError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_endpoint_access::CreateEndpointAccessError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_endpoint_access::CreateEndpointAccessError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_endpoint_access::CreateEndpointAccessError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_endpoint_access::CreateEndpointAccessError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_endpoint_access::CreateEndpointAccessError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_endpoint_access::CreateEndpointAccessError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_namespace::CreateNamespaceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_namespace::CreateNamespaceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_namespace::CreateNamespaceError> for Error {
    fn from(err: crate::operation::create_namespace::CreateNamespaceError) -> Self {
        match err {
            crate::operation::create_namespace::CreateNamespaceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_namespace::CreateNamespaceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_namespace::CreateNamespaceError::TooManyTagsException(inner) => Error::TooManyTagsException(inner),
            crate::operation::create_namespace::CreateNamespaceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_namespace::CreateNamespaceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_snapshot::CreateSnapshotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_snapshot::CreateSnapshotError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_snapshot::CreateSnapshotError> for Error {
    fn from(err: crate::operation::create_snapshot::CreateSnapshotError) -> Self {
        match err {
            crate::operation::create_snapshot::CreateSnapshotError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_snapshot::CreateSnapshotError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_snapshot::CreateSnapshotError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_snapshot::CreateSnapshotError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_snapshot::CreateSnapshotError::TooManyTagsException(inner) => Error::TooManyTagsException(inner),
            crate::operation::create_snapshot::CreateSnapshotError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_snapshot::CreateSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_usage_limit::CreateUsageLimitError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_usage_limit::CreateUsageLimitError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_usage_limit::CreateUsageLimitError> for Error {
    fn from(err: crate::operation::create_usage_limit::CreateUsageLimitError) -> Self {
        match err {
            crate::operation::create_usage_limit::CreateUsageLimitError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_usage_limit::CreateUsageLimitError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_usage_limit::CreateUsageLimitError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_usage_limit::CreateUsageLimitError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_usage_limit::CreateUsageLimitError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_usage_limit::CreateUsageLimitError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_workgroup::CreateWorkgroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_workgroup::CreateWorkgroupError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_workgroup::CreateWorkgroupError> for Error {
    fn from(err: crate::operation::create_workgroup::CreateWorkgroupError) -> Self {
        match err {
            crate::operation::create_workgroup::CreateWorkgroupError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_workgroup::CreateWorkgroupError::InsufficientCapacityException(inner) => {
                Error::InsufficientCapacityException(inner)
            }
            crate::operation::create_workgroup::CreateWorkgroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_workgroup::CreateWorkgroupError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_workgroup::CreateWorkgroupError::TooManyTagsException(inner) => Error::TooManyTagsException(inner),
            crate::operation::create_workgroup::CreateWorkgroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_workgroup::CreateWorkgroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_custom_domain_association::DeleteCustomDomainAssociationError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_custom_domain_association::DeleteCustomDomainAssociationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_custom_domain_association::DeleteCustomDomainAssociationError> for Error {
    fn from(err: crate::operation::delete_custom_domain_association::DeleteCustomDomainAssociationError) -> Self {
        match err {
            crate::operation::delete_custom_domain_association::DeleteCustomDomainAssociationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_custom_domain_association::DeleteCustomDomainAssociationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_custom_domain_association::DeleteCustomDomainAssociationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_custom_domain_association::DeleteCustomDomainAssociationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_custom_domain_association::DeleteCustomDomainAssociationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_custom_domain_association::DeleteCustomDomainAssociationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_custom_domain_association::DeleteCustomDomainAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_endpoint_access::DeleteEndpointAccessError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_endpoint_access::DeleteEndpointAccessError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_endpoint_access::DeleteEndpointAccessError> for Error {
    fn from(err: crate::operation::delete_endpoint_access::DeleteEndpointAccessError) -> Self {
        match err {
            crate::operation::delete_endpoint_access::DeleteEndpointAccessError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_endpoint_access::DeleteEndpointAccessError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_endpoint_access::DeleteEndpointAccessError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_endpoint_access::DeleteEndpointAccessError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_endpoint_access::DeleteEndpointAccessError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_namespace::DeleteNamespaceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_namespace::DeleteNamespaceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_namespace::DeleteNamespaceError> for Error {
    fn from(err: crate::operation::delete_namespace::DeleteNamespaceError) -> Self {
        match err {
            crate::operation::delete_namespace::DeleteNamespaceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_namespace::DeleteNamespaceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_namespace::DeleteNamespaceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_namespace::DeleteNamespaceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_namespace::DeleteNamespaceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_resource_policy::DeleteResourcePolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_resource_policy::DeleteResourcePolicyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_resource_policy::DeleteResourcePolicyError> for Error {
    fn from(err: crate::operation::delete_resource_policy::DeleteResourcePolicyError) -> Self {
        match err {
            crate::operation::delete_resource_policy::DeleteResourcePolicyError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_resource_policy::DeleteResourcePolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_resource_policy::DeleteResourcePolicyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_resource_policy::DeleteResourcePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_snapshot::DeleteSnapshotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_snapshot::DeleteSnapshotError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_snapshot::DeleteSnapshotError> for Error {
    fn from(err: crate::operation::delete_snapshot::DeleteSnapshotError) -> Self {
        match err {
            crate::operation::delete_snapshot::DeleteSnapshotError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_snapshot::DeleteSnapshotError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_snapshot::DeleteSnapshotError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_snapshot::DeleteSnapshotError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_snapshot::DeleteSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_usage_limit::DeleteUsageLimitError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_usage_limit::DeleteUsageLimitError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_usage_limit::DeleteUsageLimitError> for Error {
    fn from(err: crate::operation::delete_usage_limit::DeleteUsageLimitError) -> Self {
        match err {
            crate::operation::delete_usage_limit::DeleteUsageLimitError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_usage_limit::DeleteUsageLimitError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_usage_limit::DeleteUsageLimitError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_usage_limit::DeleteUsageLimitError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_usage_limit::DeleteUsageLimitError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_workgroup::DeleteWorkgroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_workgroup::DeleteWorkgroupError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_workgroup::DeleteWorkgroupError> for Error {
    fn from(err: crate::operation::delete_workgroup::DeleteWorkgroupError) -> Self {
        match err {
            crate::operation::delete_workgroup::DeleteWorkgroupError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_workgroup::DeleteWorkgroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_workgroup::DeleteWorkgroupError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_workgroup::DeleteWorkgroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_workgroup::DeleteWorkgroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_credentials::GetCredentialsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_credentials::GetCredentialsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_credentials::GetCredentialsError> for Error {
    fn from(err: crate::operation::get_credentials::GetCredentialsError) -> Self {
        match err {
            crate::operation::get_credentials::GetCredentialsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_credentials::GetCredentialsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_credentials::GetCredentialsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_credentials::GetCredentialsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_custom_domain_association::GetCustomDomainAssociationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_custom_domain_association::GetCustomDomainAssociationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_custom_domain_association::GetCustomDomainAssociationError> for Error {
    fn from(err: crate::operation::get_custom_domain_association::GetCustomDomainAssociationError) -> Self {
        match err {
            crate::operation::get_custom_domain_association::GetCustomDomainAssociationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_custom_domain_association::GetCustomDomainAssociationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::get_custom_domain_association::GetCustomDomainAssociationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_custom_domain_association::GetCustomDomainAssociationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_custom_domain_association::GetCustomDomainAssociationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_custom_domain_association::GetCustomDomainAssociationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_custom_domain_association::GetCustomDomainAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_endpoint_access::GetEndpointAccessError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_endpoint_access::GetEndpointAccessError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_endpoint_access::GetEndpointAccessError> for Error {
    fn from(err: crate::operation::get_endpoint_access::GetEndpointAccessError) -> Self {
        match err {
            crate::operation::get_endpoint_access::GetEndpointAccessError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_endpoint_access::GetEndpointAccessError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_endpoint_access::GetEndpointAccessError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_endpoint_access::GetEndpointAccessError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_endpoint_access::GetEndpointAccessError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_namespace::GetNamespaceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_namespace::GetNamespaceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_namespace::GetNamespaceError> for Error {
    fn from(err: crate::operation::get_namespace::GetNamespaceError) -> Self {
        match err {
            crate::operation::get_namespace::GetNamespaceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_namespace::GetNamespaceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_namespace::GetNamespaceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_namespace::GetNamespaceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_recovery_point::GetRecoveryPointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_recovery_point::GetRecoveryPointError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_recovery_point::GetRecoveryPointError> for Error {
    fn from(err: crate::operation::get_recovery_point::GetRecoveryPointError) -> Self {
        match err {
            crate::operation::get_recovery_point::GetRecoveryPointError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_recovery_point::GetRecoveryPointError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_recovery_point::GetRecoveryPointError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_recovery_point::GetRecoveryPointError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_recovery_point::GetRecoveryPointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_resource_policy::GetResourcePolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_resource_policy::GetResourcePolicyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_resource_policy::GetResourcePolicyError> for Error {
    fn from(err: crate::operation::get_resource_policy::GetResourcePolicyError) -> Self {
        match err {
            crate::operation::get_resource_policy::GetResourcePolicyError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_resource_policy::GetResourcePolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_resource_policy::GetResourcePolicyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_resource_policy::GetResourcePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_snapshot::GetSnapshotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_snapshot::GetSnapshotError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_snapshot::GetSnapshotError> for Error {
    fn from(err: crate::operation::get_snapshot::GetSnapshotError) -> Self {
        match err {
            crate::operation::get_snapshot::GetSnapshotError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_snapshot::GetSnapshotError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_snapshot::GetSnapshotError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_snapshot::GetSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_table_restore_status::GetTableRestoreStatusError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_table_restore_status::GetTableRestoreStatusError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_table_restore_status::GetTableRestoreStatusError> for Error {
    fn from(err: crate::operation::get_table_restore_status::GetTableRestoreStatusError) -> Self {
        match err {
            crate::operation::get_table_restore_status::GetTableRestoreStatusError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_table_restore_status::GetTableRestoreStatusError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_table_restore_status::GetTableRestoreStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_usage_limit::GetUsageLimitError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_usage_limit::GetUsageLimitError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_usage_limit::GetUsageLimitError> for Error {
    fn from(err: crate::operation::get_usage_limit::GetUsageLimitError) -> Self {
        match err {
            crate::operation::get_usage_limit::GetUsageLimitError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_usage_limit::GetUsageLimitError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_usage_limit::GetUsageLimitError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_usage_limit::GetUsageLimitError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_usage_limit::GetUsageLimitError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_workgroup::GetWorkgroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_workgroup::GetWorkgroupError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_workgroup::GetWorkgroupError> for Error {
    fn from(err: crate::operation::get_workgroup::GetWorkgroupError) -> Self {
        match err {
            crate::operation::get_workgroup::GetWorkgroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_workgroup::GetWorkgroupError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_workgroup::GetWorkgroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_workgroup::GetWorkgroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_custom_domain_associations::ListCustomDomainAssociationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_custom_domain_associations::ListCustomDomainAssociationsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_custom_domain_associations::ListCustomDomainAssociationsError> for Error {
    fn from(err: crate::operation::list_custom_domain_associations::ListCustomDomainAssociationsError) -> Self {
        match err {
            crate::operation::list_custom_domain_associations::ListCustomDomainAssociationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_custom_domain_associations::ListCustomDomainAssociationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_custom_domain_associations::ListCustomDomainAssociationsError::InvalidPaginationException(inner) => {
                Error::InvalidPaginationException(inner)
            }
            crate::operation::list_custom_domain_associations::ListCustomDomainAssociationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_custom_domain_associations::ListCustomDomainAssociationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_custom_domain_associations::ListCustomDomainAssociationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_endpoint_access::ListEndpointAccessError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_endpoint_access::ListEndpointAccessError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_endpoint_access::ListEndpointAccessError> for Error {
    fn from(err: crate::operation::list_endpoint_access::ListEndpointAccessError) -> Self {
        match err {
            crate::operation::list_endpoint_access::ListEndpointAccessError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_endpoint_access::ListEndpointAccessError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_endpoint_access::ListEndpointAccessError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_endpoint_access::ListEndpointAccessError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_endpoint_access::ListEndpointAccessError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_namespaces::ListNamespacesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_namespaces::ListNamespacesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_namespaces::ListNamespacesError> for Error {
    fn from(err: crate::operation::list_namespaces::ListNamespacesError) -> Self {
        match err {
            crate::operation::list_namespaces::ListNamespacesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_namespaces::ListNamespacesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_namespaces::ListNamespacesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_recovery_points::ListRecoveryPointsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_recovery_points::ListRecoveryPointsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_recovery_points::ListRecoveryPointsError> for Error {
    fn from(err: crate::operation::list_recovery_points::ListRecoveryPointsError) -> Self {
        match err {
            crate::operation::list_recovery_points::ListRecoveryPointsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_recovery_points::ListRecoveryPointsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_recovery_points::ListRecoveryPointsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_snapshots::ListSnapshotsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_snapshots::ListSnapshotsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_snapshots::ListSnapshotsError> for Error {
    fn from(err: crate::operation::list_snapshots::ListSnapshotsError) -> Self {
        match err {
            crate::operation::list_snapshots::ListSnapshotsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_snapshots::ListSnapshotsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_snapshots::ListSnapshotsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_snapshots::ListSnapshotsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_table_restore_status::ListTableRestoreStatusError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_table_restore_status::ListTableRestoreStatusError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_table_restore_status::ListTableRestoreStatusError> for Error {
    fn from(err: crate::operation::list_table_restore_status::ListTableRestoreStatusError) -> Self {
        match err {
            crate::operation::list_table_restore_status::ListTableRestoreStatusError::InvalidPaginationException(inner) => {
                Error::InvalidPaginationException(inner)
            }
            crate::operation::list_table_restore_status::ListTableRestoreStatusError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_table_restore_status::ListTableRestoreStatusError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_table_restore_status::ListTableRestoreStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_usage_limits::ListUsageLimitsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_usage_limits::ListUsageLimitsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_usage_limits::ListUsageLimitsError> for Error {
    fn from(err: crate::operation::list_usage_limits::ListUsageLimitsError) -> Self {
        match err {
            crate::operation::list_usage_limits::ListUsageLimitsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_usage_limits::ListUsageLimitsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_usage_limits::ListUsageLimitsError::InvalidPaginationException(inner) => Error::InvalidPaginationException(inner),
            crate::operation::list_usage_limits::ListUsageLimitsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_usage_limits::ListUsageLimitsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_usage_limits::ListUsageLimitsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_workgroups::ListWorkgroupsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_workgroups::ListWorkgroupsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_workgroups::ListWorkgroupsError> for Error {
    fn from(err: crate::operation::list_workgroups::ListWorkgroupsError) -> Self {
        match err {
            crate::operation::list_workgroups::ListWorkgroupsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_workgroups::ListWorkgroupsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_workgroups::ListWorkgroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_resource_policy::PutResourcePolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_resource_policy::PutResourcePolicyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_resource_policy::PutResourcePolicyError> for Error {
    fn from(err: crate::operation::put_resource_policy::PutResourcePolicyError) -> Self {
        match err {
            crate::operation::put_resource_policy::PutResourcePolicyError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::put_resource_policy::PutResourcePolicyError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::put_resource_policy::PutResourcePolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::put_resource_policy::PutResourcePolicyError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::put_resource_policy::PutResourcePolicyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::put_resource_policy::PutResourcePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::restore_from_recovery_point::RestoreFromRecoveryPointError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::restore_from_recovery_point::RestoreFromRecoveryPointError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::restore_from_recovery_point::RestoreFromRecoveryPointError> for Error {
    fn from(err: crate::operation::restore_from_recovery_point::RestoreFromRecoveryPointError) -> Self {
        match err {
            crate::operation::restore_from_recovery_point::RestoreFromRecoveryPointError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::restore_from_recovery_point::RestoreFromRecoveryPointError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::restore_from_recovery_point::RestoreFromRecoveryPointError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::restore_from_recovery_point::RestoreFromRecoveryPointError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::restore_from_recovery_point::RestoreFromRecoveryPointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::restore_from_snapshot::RestoreFromSnapshotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::restore_from_snapshot::RestoreFromSnapshotError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::restore_from_snapshot::RestoreFromSnapshotError> for Error {
    fn from(err: crate::operation::restore_from_snapshot::RestoreFromSnapshotError) -> Self {
        match err {
            crate::operation::restore_from_snapshot::RestoreFromSnapshotError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::restore_from_snapshot::RestoreFromSnapshotError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::restore_from_snapshot::RestoreFromSnapshotError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::restore_from_snapshot::RestoreFromSnapshotError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::restore_from_snapshot::RestoreFromSnapshotError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::restore_from_snapshot::RestoreFromSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::restore_table_from_snapshot::RestoreTableFromSnapshotError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::restore_table_from_snapshot::RestoreTableFromSnapshotError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::restore_table_from_snapshot::RestoreTableFromSnapshotError> for Error {
    fn from(err: crate::operation::restore_table_from_snapshot::RestoreTableFromSnapshotError) -> Self {
        match err {
            crate::operation::restore_table_from_snapshot::RestoreTableFromSnapshotError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::restore_table_from_snapshot::RestoreTableFromSnapshotError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::restore_table_from_snapshot::RestoreTableFromSnapshotError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::restore_table_from_snapshot::RestoreTableFromSnapshotError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::restore_table_from_snapshot::RestoreTableFromSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::tag_resource::TagResourceError::TooManyTagsException(inner) => Error::TooManyTagsException(inner),
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_custom_domain_association::UpdateCustomDomainAssociationError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_custom_domain_association::UpdateCustomDomainAssociationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_custom_domain_association::UpdateCustomDomainAssociationError> for Error {
    fn from(err: crate::operation::update_custom_domain_association::UpdateCustomDomainAssociationError) -> Self {
        match err {
            crate::operation::update_custom_domain_association::UpdateCustomDomainAssociationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_custom_domain_association::UpdateCustomDomainAssociationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_custom_domain_association::UpdateCustomDomainAssociationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_custom_domain_association::UpdateCustomDomainAssociationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_custom_domain_association::UpdateCustomDomainAssociationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_custom_domain_association::UpdateCustomDomainAssociationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_custom_domain_association::UpdateCustomDomainAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_endpoint_access::UpdateEndpointAccessError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_endpoint_access::UpdateEndpointAccessError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_endpoint_access::UpdateEndpointAccessError> for Error {
    fn from(err: crate::operation::update_endpoint_access::UpdateEndpointAccessError) -> Self {
        match err {
            crate::operation::update_endpoint_access::UpdateEndpointAccessError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_endpoint_access::UpdateEndpointAccessError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_endpoint_access::UpdateEndpointAccessError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_endpoint_access::UpdateEndpointAccessError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_endpoint_access::UpdateEndpointAccessError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_endpoint_access::UpdateEndpointAccessError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_namespace::UpdateNamespaceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_namespace::UpdateNamespaceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_namespace::UpdateNamespaceError> for Error {
    fn from(err: crate::operation::update_namespace::UpdateNamespaceError) -> Self {
        match err {
            crate::operation::update_namespace::UpdateNamespaceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_namespace::UpdateNamespaceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_namespace::UpdateNamespaceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_namespace::UpdateNamespaceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_namespace::UpdateNamespaceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_snapshot::UpdateSnapshotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_snapshot::UpdateSnapshotError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_snapshot::UpdateSnapshotError> for Error {
    fn from(err: crate::operation::update_snapshot::UpdateSnapshotError) -> Self {
        match err {
            crate::operation::update_snapshot::UpdateSnapshotError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_snapshot::UpdateSnapshotError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_snapshot::UpdateSnapshotError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_snapshot::UpdateSnapshotError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_snapshot::UpdateSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_usage_limit::UpdateUsageLimitError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_usage_limit::UpdateUsageLimitError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_usage_limit::UpdateUsageLimitError> for Error {
    fn from(err: crate::operation::update_usage_limit::UpdateUsageLimitError) -> Self {
        match err {
            crate::operation::update_usage_limit::UpdateUsageLimitError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_usage_limit::UpdateUsageLimitError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_usage_limit::UpdateUsageLimitError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_usage_limit::UpdateUsageLimitError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_usage_limit::UpdateUsageLimitError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_workgroup::UpdateWorkgroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_workgroup::UpdateWorkgroupError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_workgroup::UpdateWorkgroupError> for Error {
    fn from(err: crate::operation::update_workgroup::UpdateWorkgroupError) -> Self {
        match err {
            crate::operation::update_workgroup::UpdateWorkgroupError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_workgroup::UpdateWorkgroupError::InsufficientCapacityException(inner) => {
                Error::InsufficientCapacityException(inner)
            }
            crate::operation::update_workgroup::UpdateWorkgroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_workgroup::UpdateWorkgroupError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_workgroup::UpdateWorkgroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_workgroup::UpdateWorkgroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::InsufficientCapacityException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::InvalidPaginationException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::TooManyTagsException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => inner.source(),
        }
    }
}
impl ::aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InsufficientCapacityException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::InvalidPaginationException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::TooManyTagsException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
