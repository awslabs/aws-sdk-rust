// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateSubscriptionOutput {}
impl std::fmt::Debug for UpdateSubscriptionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateSubscriptionOutput");
        formatter.finish()
    }
}
/// See [`UpdateSubscriptionOutput`](crate::output::UpdateSubscriptionOutput)
pub mod update_subscription_output {
    /// A builder for [`UpdateSubscriptionOutput`](crate::output::UpdateSubscriptionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateSubscriptionOutput`](crate::output::UpdateSubscriptionOutput)
        pub fn build(self) -> crate::output::UpdateSubscriptionOutput {
            crate::output::UpdateSubscriptionOutput {}
        }
    }
}
impl UpdateSubscriptionOutput {
    /// Creates a new builder-style object to manufacture [`UpdateSubscriptionOutput`](crate::output::UpdateSubscriptionOutput)
    pub fn builder() -> crate::output::update_subscription_output::Builder {
        crate::output::update_subscription_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateProtectionGroupOutput {}
impl std::fmt::Debug for UpdateProtectionGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateProtectionGroupOutput");
        formatter.finish()
    }
}
/// See [`UpdateProtectionGroupOutput`](crate::output::UpdateProtectionGroupOutput)
pub mod update_protection_group_output {
    /// A builder for [`UpdateProtectionGroupOutput`](crate::output::UpdateProtectionGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateProtectionGroupOutput`](crate::output::UpdateProtectionGroupOutput)
        pub fn build(self) -> crate::output::UpdateProtectionGroupOutput {
            crate::output::UpdateProtectionGroupOutput {}
        }
    }
}
impl UpdateProtectionGroupOutput {
    /// Creates a new builder-style object to manufacture [`UpdateProtectionGroupOutput`](crate::output::UpdateProtectionGroupOutput)
    pub fn builder() -> crate::output::update_protection_group_output::Builder {
        crate::output::update_protection_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateEmergencyContactSettingsOutput {}
impl std::fmt::Debug for UpdateEmergencyContactSettingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateEmergencyContactSettingsOutput");
        formatter.finish()
    }
}
/// See [`UpdateEmergencyContactSettingsOutput`](crate::output::UpdateEmergencyContactSettingsOutput)
pub mod update_emergency_contact_settings_output {
    /// A builder for [`UpdateEmergencyContactSettingsOutput`](crate::output::UpdateEmergencyContactSettingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateEmergencyContactSettingsOutput`](crate::output::UpdateEmergencyContactSettingsOutput)
        pub fn build(self) -> crate::output::UpdateEmergencyContactSettingsOutput {
            crate::output::UpdateEmergencyContactSettingsOutput {}
        }
    }
}
impl UpdateEmergencyContactSettingsOutput {
    /// Creates a new builder-style object to manufacture [`UpdateEmergencyContactSettingsOutput`](crate::output::UpdateEmergencyContactSettingsOutput)
    pub fn builder() -> crate::output::update_emergency_contact_settings_output::Builder {
        crate::output::update_emergency_contact_settings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UntagResourceOutput {}
impl std::fmt::Debug for UntagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UntagResourceOutput");
        formatter.finish()
    }
}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput)
pub mod untag_resource_output {
    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput)
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {}
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TagResourceOutput {}
impl std::fmt::Debug for TagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TagResourceOutput");
        formatter.finish()
    }
}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput)
pub mod tag_resource_output {
    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput)
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {}
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput)
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTagsForResourceOutput {
    /// <p>A list of tag key and value pairs associated with the specified resource.</p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl ListTagsForResourceOutput {
    /// <p>A list of tag key and value pairs associated with the specified resource.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::model::Tag]> {
        self.tags.as_deref()
    }
}
impl std::fmt::Debug for ListTagsForResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTagsForResourceOutput");
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
pub mod list_tags_for_resource_output {
    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>A list of tag key and value pairs associated with the specified resource.</p>
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        /// <p>A list of tag key and value pairs associated with the specified resource.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput { tags: self.tags }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListResourcesInProtectionGroupOutput {
    /// <p>The Amazon Resource Names (ARNs) of the resources that are included in the protection group.</p>
    pub resource_arns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>If you specify a value for <code>MaxResults</code> and you have more resources in the protection group than the value of MaxResults, Shield Advanced returns this token that you can use in your next request, to get the next batch of objects. </p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListResourcesInProtectionGroupOutput {
    /// <p>The Amazon Resource Names (ARNs) of the resources that are included in the protection group.</p>
    pub fn resource_arns(&self) -> std::option::Option<&[std::string::String]> {
        self.resource_arns.as_deref()
    }
    /// <p>If you specify a value for <code>MaxResults</code> and you have more resources in the protection group than the value of MaxResults, Shield Advanced returns this token that you can use in your next request, to get the next batch of objects. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListResourcesInProtectionGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListResourcesInProtectionGroupOutput");
        formatter.field("resource_arns", &self.resource_arns);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListResourcesInProtectionGroupOutput`](crate::output::ListResourcesInProtectionGroupOutput)
pub mod list_resources_in_protection_group_output {
    /// A builder for [`ListResourcesInProtectionGroupOutput`](crate::output::ListResourcesInProtectionGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) resource_arns: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `resource_arns`.
        ///
        /// To override the contents of this collection use [`set_resource_arns`](Self::set_resource_arns).
        ///
        /// <p>The Amazon Resource Names (ARNs) of the resources that are included in the protection group.</p>
        pub fn resource_arns(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.resource_arns.unwrap_or_default();
            v.push(input.into());
            self.resource_arns = Some(v);
            self
        }
        /// <p>The Amazon Resource Names (ARNs) of the resources that are included in the protection group.</p>
        pub fn set_resource_arns(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.resource_arns = input;
            self
        }
        /// <p>If you specify a value for <code>MaxResults</code> and you have more resources in the protection group than the value of MaxResults, Shield Advanced returns this token that you can use in your next request, to get the next batch of objects. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If you specify a value for <code>MaxResults</code> and you have more resources in the protection group than the value of MaxResults, Shield Advanced returns this token that you can use in your next request, to get the next batch of objects. </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListResourcesInProtectionGroupOutput`](crate::output::ListResourcesInProtectionGroupOutput)
        pub fn build(self) -> crate::output::ListResourcesInProtectionGroupOutput {
            crate::output::ListResourcesInProtectionGroupOutput {
                resource_arns: self.resource_arns,
                next_token: self.next_token,
            }
        }
    }
}
impl ListResourcesInProtectionGroupOutput {
    /// Creates a new builder-style object to manufacture [`ListResourcesInProtectionGroupOutput`](crate::output::ListResourcesInProtectionGroupOutput)
    pub fn builder() -> crate::output::list_resources_in_protection_group_output::Builder {
        crate::output::list_resources_in_protection_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListProtectionsOutput {
    /// <p>The array of enabled <a>Protection</a> objects.</p>
    pub protections: std::option::Option<std::vec::Vec<crate::model::Protection>>,
    /// <p>If you specify a value for <code>MaxResults</code> and you have more Protections than the value of MaxResults, Shield Advanced returns a NextToken value in the response that allows you to list another group of Protections. For the second and subsequent ListProtections requests, specify the value of NextToken from the previous response to get information about another batch of Protections.</p>
    /// <p>Shield Advanced might return the list of <a>Protection</a> objects in batches smaller than the number specified by MaxResults. If there are more <a>Protection</a> objects to return, Shield Advanced will always also return a <code>NextToken</code>.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListProtectionsOutput {
    /// <p>The array of enabled <a>Protection</a> objects.</p>
    pub fn protections(&self) -> std::option::Option<&[crate::model::Protection]> {
        self.protections.as_deref()
    }
    /// <p>If you specify a value for <code>MaxResults</code> and you have more Protections than the value of MaxResults, Shield Advanced returns a NextToken value in the response that allows you to list another group of Protections. For the second and subsequent ListProtections requests, specify the value of NextToken from the previous response to get information about another batch of Protections.</p>
    /// <p>Shield Advanced might return the list of <a>Protection</a> objects in batches smaller than the number specified by MaxResults. If there are more <a>Protection</a> objects to return, Shield Advanced will always also return a <code>NextToken</code>.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListProtectionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListProtectionsOutput");
        formatter.field("protections", &self.protections);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListProtectionsOutput`](crate::output::ListProtectionsOutput)
pub mod list_protections_output {
    /// A builder for [`ListProtectionsOutput`](crate::output::ListProtectionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) protections: std::option::Option<std::vec::Vec<crate::model::Protection>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `protections`.
        ///
        /// To override the contents of this collection use [`set_protections`](Self::set_protections).
        ///
        /// <p>The array of enabled <a>Protection</a> objects.</p>
        pub fn protections(mut self, input: impl Into<crate::model::Protection>) -> Self {
            let mut v = self.protections.unwrap_or_default();
            v.push(input.into());
            self.protections = Some(v);
            self
        }
        /// <p>The array of enabled <a>Protection</a> objects.</p>
        pub fn set_protections(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Protection>>,
        ) -> Self {
            self.protections = input;
            self
        }
        /// <p>If you specify a value for <code>MaxResults</code> and you have more Protections than the value of MaxResults, Shield Advanced returns a NextToken value in the response that allows you to list another group of Protections. For the second and subsequent ListProtections requests, specify the value of NextToken from the previous response to get information about another batch of Protections.</p>
        /// <p>Shield Advanced might return the list of <a>Protection</a> objects in batches smaller than the number specified by MaxResults. If there are more <a>Protection</a> objects to return, Shield Advanced will always also return a <code>NextToken</code>.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If you specify a value for <code>MaxResults</code> and you have more Protections than the value of MaxResults, Shield Advanced returns a NextToken value in the response that allows you to list another group of Protections. For the second and subsequent ListProtections requests, specify the value of NextToken from the previous response to get information about another batch of Protections.</p>
        /// <p>Shield Advanced might return the list of <a>Protection</a> objects in batches smaller than the number specified by MaxResults. If there are more <a>Protection</a> objects to return, Shield Advanced will always also return a <code>NextToken</code>.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListProtectionsOutput`](crate::output::ListProtectionsOutput)
        pub fn build(self) -> crate::output::ListProtectionsOutput {
            crate::output::ListProtectionsOutput {
                protections: self.protections,
                next_token: self.next_token,
            }
        }
    }
}
impl ListProtectionsOutput {
    /// Creates a new builder-style object to manufacture [`ListProtectionsOutput`](crate::output::ListProtectionsOutput)
    pub fn builder() -> crate::output::list_protections_output::Builder {
        crate::output::list_protections_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListProtectionGroupsOutput {
    /// <p></p>
    pub protection_groups: std::option::Option<std::vec::Vec<crate::model::ProtectionGroup>>,
    /// <p>If you specify a value for <code>MaxResults</code> and you have more protection groups than the value of MaxResults, Shield Advanced returns this token that you can use in your next request, to get the next batch of objects. </p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListProtectionGroupsOutput {
    /// <p></p>
    pub fn protection_groups(&self) -> std::option::Option<&[crate::model::ProtectionGroup]> {
        self.protection_groups.as_deref()
    }
    /// <p>If you specify a value for <code>MaxResults</code> and you have more protection groups than the value of MaxResults, Shield Advanced returns this token that you can use in your next request, to get the next batch of objects. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListProtectionGroupsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListProtectionGroupsOutput");
        formatter.field("protection_groups", &self.protection_groups);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListProtectionGroupsOutput`](crate::output::ListProtectionGroupsOutput)
pub mod list_protection_groups_output {
    /// A builder for [`ListProtectionGroupsOutput`](crate::output::ListProtectionGroupsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) protection_groups:
            std::option::Option<std::vec::Vec<crate::model::ProtectionGroup>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `protection_groups`.
        ///
        /// To override the contents of this collection use [`set_protection_groups`](Self::set_protection_groups).
        ///
        /// <p></p>
        pub fn protection_groups(
            mut self,
            input: impl Into<crate::model::ProtectionGroup>,
        ) -> Self {
            let mut v = self.protection_groups.unwrap_or_default();
            v.push(input.into());
            self.protection_groups = Some(v);
            self
        }
        /// <p></p>
        pub fn set_protection_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ProtectionGroup>>,
        ) -> Self {
            self.protection_groups = input;
            self
        }
        /// <p>If you specify a value for <code>MaxResults</code> and you have more protection groups than the value of MaxResults, Shield Advanced returns this token that you can use in your next request, to get the next batch of objects. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If you specify a value for <code>MaxResults</code> and you have more protection groups than the value of MaxResults, Shield Advanced returns this token that you can use in your next request, to get the next batch of objects. </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListProtectionGroupsOutput`](crate::output::ListProtectionGroupsOutput)
        pub fn build(self) -> crate::output::ListProtectionGroupsOutput {
            crate::output::ListProtectionGroupsOutput {
                protection_groups: self.protection_groups,
                next_token: self.next_token,
            }
        }
    }
}
impl ListProtectionGroupsOutput {
    /// Creates a new builder-style object to manufacture [`ListProtectionGroupsOutput`](crate::output::ListProtectionGroupsOutput)
    pub fn builder() -> crate::output::list_protection_groups_output::Builder {
        crate::output::list_protection_groups_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListAttacksOutput {
    /// <p>The attack information for the specified time range.</p>
    pub attack_summaries: std::option::Option<std::vec::Vec<crate::model::AttackSummary>>,
    /// <p>The token returned by a previous call to indicate that there is more data available.
    /// If not null, more results are available. Pass this value for the <code>NextMarker</code>
    /// parameter in a subsequent call to <code>ListAttacks</code> to retrieve the next set of
    /// items.</p>
    /// <p>Shield Advanced might return the list of <a>AttackSummary</a> objects in batches smaller than the number specified by MaxResults. If there are more attack summary objects to return, Shield Advanced will always also return a <code>NextToken</code>.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListAttacksOutput {
    /// <p>The attack information for the specified time range.</p>
    pub fn attack_summaries(&self) -> std::option::Option<&[crate::model::AttackSummary]> {
        self.attack_summaries.as_deref()
    }
    /// <p>The token returned by a previous call to indicate that there is more data available.
    /// If not null, more results are available. Pass this value for the <code>NextMarker</code>
    /// parameter in a subsequent call to <code>ListAttacks</code> to retrieve the next set of
    /// items.</p>
    /// <p>Shield Advanced might return the list of <a>AttackSummary</a> objects in batches smaller than the number specified by MaxResults. If there are more attack summary objects to return, Shield Advanced will always also return a <code>NextToken</code>.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListAttacksOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListAttacksOutput");
        formatter.field("attack_summaries", &self.attack_summaries);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListAttacksOutput`](crate::output::ListAttacksOutput)
pub mod list_attacks_output {
    /// A builder for [`ListAttacksOutput`](crate::output::ListAttacksOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) attack_summaries:
            std::option::Option<std::vec::Vec<crate::model::AttackSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `attack_summaries`.
        ///
        /// To override the contents of this collection use [`set_attack_summaries`](Self::set_attack_summaries).
        ///
        /// <p>The attack information for the specified time range.</p>
        pub fn attack_summaries(mut self, input: impl Into<crate::model::AttackSummary>) -> Self {
            let mut v = self.attack_summaries.unwrap_or_default();
            v.push(input.into());
            self.attack_summaries = Some(v);
            self
        }
        /// <p>The attack information for the specified time range.</p>
        pub fn set_attack_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AttackSummary>>,
        ) -> Self {
            self.attack_summaries = input;
            self
        }
        /// <p>The token returned by a previous call to indicate that there is more data available.
        /// If not null, more results are available. Pass this value for the <code>NextMarker</code>
        /// parameter in a subsequent call to <code>ListAttacks</code> to retrieve the next set of
        /// items.</p>
        /// <p>Shield Advanced might return the list of <a>AttackSummary</a> objects in batches smaller than the number specified by MaxResults. If there are more attack summary objects to return, Shield Advanced will always also return a <code>NextToken</code>.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token returned by a previous call to indicate that there is more data available.
        /// If not null, more results are available. Pass this value for the <code>NextMarker</code>
        /// parameter in a subsequent call to <code>ListAttacks</code> to retrieve the next set of
        /// items.</p>
        /// <p>Shield Advanced might return the list of <a>AttackSummary</a> objects in batches smaller than the number specified by MaxResults. If there are more attack summary objects to return, Shield Advanced will always also return a <code>NextToken</code>.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListAttacksOutput`](crate::output::ListAttacksOutput)
        pub fn build(self) -> crate::output::ListAttacksOutput {
            crate::output::ListAttacksOutput {
                attack_summaries: self.attack_summaries,
                next_token: self.next_token,
            }
        }
    }
}
impl ListAttacksOutput {
    /// Creates a new builder-style object to manufacture [`ListAttacksOutput`](crate::output::ListAttacksOutput)
    pub fn builder() -> crate::output::list_attacks_output::Builder {
        crate::output::list_attacks_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetSubscriptionStateOutput {
    /// <p>The status of the subscription.</p>
    pub subscription_state: std::option::Option<crate::model::SubscriptionState>,
}
impl GetSubscriptionStateOutput {
    /// <p>The status of the subscription.</p>
    pub fn subscription_state(&self) -> std::option::Option<&crate::model::SubscriptionState> {
        self.subscription_state.as_ref()
    }
}
impl std::fmt::Debug for GetSubscriptionStateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetSubscriptionStateOutput");
        formatter.field("subscription_state", &self.subscription_state);
        formatter.finish()
    }
}
/// See [`GetSubscriptionStateOutput`](crate::output::GetSubscriptionStateOutput)
pub mod get_subscription_state_output {
    /// A builder for [`GetSubscriptionStateOutput`](crate::output::GetSubscriptionStateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) subscription_state: std::option::Option<crate::model::SubscriptionState>,
    }
    impl Builder {
        /// <p>The status of the subscription.</p>
        pub fn subscription_state(mut self, input: crate::model::SubscriptionState) -> Self {
            self.subscription_state = Some(input);
            self
        }
        /// <p>The status of the subscription.</p>
        pub fn set_subscription_state(
            mut self,
            input: std::option::Option<crate::model::SubscriptionState>,
        ) -> Self {
            self.subscription_state = input;
            self
        }
        /// Consumes the builder and constructs a [`GetSubscriptionStateOutput`](crate::output::GetSubscriptionStateOutput)
        pub fn build(self) -> crate::output::GetSubscriptionStateOutput {
            crate::output::GetSubscriptionStateOutput {
                subscription_state: self.subscription_state,
            }
        }
    }
}
impl GetSubscriptionStateOutput {
    /// Creates a new builder-style object to manufacture [`GetSubscriptionStateOutput`](crate::output::GetSubscriptionStateOutput)
    pub fn builder() -> crate::output::get_subscription_state_output::Builder {
        crate::output::get_subscription_state_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct EnableProactiveEngagementOutput {}
impl std::fmt::Debug for EnableProactiveEngagementOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EnableProactiveEngagementOutput");
        formatter.finish()
    }
}
/// See [`EnableProactiveEngagementOutput`](crate::output::EnableProactiveEngagementOutput)
pub mod enable_proactive_engagement_output {
    /// A builder for [`EnableProactiveEngagementOutput`](crate::output::EnableProactiveEngagementOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`EnableProactiveEngagementOutput`](crate::output::EnableProactiveEngagementOutput)
        pub fn build(self) -> crate::output::EnableProactiveEngagementOutput {
            crate::output::EnableProactiveEngagementOutput {}
        }
    }
}
impl EnableProactiveEngagementOutput {
    /// Creates a new builder-style object to manufacture [`EnableProactiveEngagementOutput`](crate::output::EnableProactiveEngagementOutput)
    pub fn builder() -> crate::output::enable_proactive_engagement_output::Builder {
        crate::output::enable_proactive_engagement_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisassociateHealthCheckOutput {}
impl std::fmt::Debug for DisassociateHealthCheckOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisassociateHealthCheckOutput");
        formatter.finish()
    }
}
/// See [`DisassociateHealthCheckOutput`](crate::output::DisassociateHealthCheckOutput)
pub mod disassociate_health_check_output {
    /// A builder for [`DisassociateHealthCheckOutput`](crate::output::DisassociateHealthCheckOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DisassociateHealthCheckOutput`](crate::output::DisassociateHealthCheckOutput)
        pub fn build(self) -> crate::output::DisassociateHealthCheckOutput {
            crate::output::DisassociateHealthCheckOutput {}
        }
    }
}
impl DisassociateHealthCheckOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateHealthCheckOutput`](crate::output::DisassociateHealthCheckOutput)
    pub fn builder() -> crate::output::disassociate_health_check_output::Builder {
        crate::output::disassociate_health_check_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisassociateDrtRoleOutput {}
impl std::fmt::Debug for DisassociateDrtRoleOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisassociateDrtRoleOutput");
        formatter.finish()
    }
}
/// See [`DisassociateDrtRoleOutput`](crate::output::DisassociateDrtRoleOutput)
pub mod disassociate_drt_role_output {
    /// A builder for [`DisassociateDrtRoleOutput`](crate::output::DisassociateDrtRoleOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DisassociateDrtRoleOutput`](crate::output::DisassociateDrtRoleOutput)
        pub fn build(self) -> crate::output::DisassociateDrtRoleOutput {
            crate::output::DisassociateDrtRoleOutput {}
        }
    }
}
impl DisassociateDrtRoleOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateDrtRoleOutput`](crate::output::DisassociateDrtRoleOutput)
    pub fn builder() -> crate::output::disassociate_drt_role_output::Builder {
        crate::output::disassociate_drt_role_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisassociateDrtLogBucketOutput {}
impl std::fmt::Debug for DisassociateDrtLogBucketOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisassociateDrtLogBucketOutput");
        formatter.finish()
    }
}
/// See [`DisassociateDrtLogBucketOutput`](crate::output::DisassociateDrtLogBucketOutput)
pub mod disassociate_drt_log_bucket_output {
    /// A builder for [`DisassociateDrtLogBucketOutput`](crate::output::DisassociateDrtLogBucketOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DisassociateDrtLogBucketOutput`](crate::output::DisassociateDrtLogBucketOutput)
        pub fn build(self) -> crate::output::DisassociateDrtLogBucketOutput {
            crate::output::DisassociateDrtLogBucketOutput {}
        }
    }
}
impl DisassociateDrtLogBucketOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateDrtLogBucketOutput`](crate::output::DisassociateDrtLogBucketOutput)
    pub fn builder() -> crate::output::disassociate_drt_log_bucket_output::Builder {
        crate::output::disassociate_drt_log_bucket_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisableProactiveEngagementOutput {}
impl std::fmt::Debug for DisableProactiveEngagementOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisableProactiveEngagementOutput");
        formatter.finish()
    }
}
/// See [`DisableProactiveEngagementOutput`](crate::output::DisableProactiveEngagementOutput)
pub mod disable_proactive_engagement_output {
    /// A builder for [`DisableProactiveEngagementOutput`](crate::output::DisableProactiveEngagementOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DisableProactiveEngagementOutput`](crate::output::DisableProactiveEngagementOutput)
        pub fn build(self) -> crate::output::DisableProactiveEngagementOutput {
            crate::output::DisableProactiveEngagementOutput {}
        }
    }
}
impl DisableProactiveEngagementOutput {
    /// Creates a new builder-style object to manufacture [`DisableProactiveEngagementOutput`](crate::output::DisableProactiveEngagementOutput)
    pub fn builder() -> crate::output::disable_proactive_engagement_output::Builder {
        crate::output::disable_proactive_engagement_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeSubscriptionOutput {
    /// <p>The Shield Advanced subscription details for an account.</p>
    pub subscription: std::option::Option<crate::model::Subscription>,
}
impl DescribeSubscriptionOutput {
    /// <p>The Shield Advanced subscription details for an account.</p>
    pub fn subscription(&self) -> std::option::Option<&crate::model::Subscription> {
        self.subscription.as_ref()
    }
}
impl std::fmt::Debug for DescribeSubscriptionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeSubscriptionOutput");
        formatter.field("subscription", &self.subscription);
        formatter.finish()
    }
}
/// See [`DescribeSubscriptionOutput`](crate::output::DescribeSubscriptionOutput)
pub mod describe_subscription_output {
    /// A builder for [`DescribeSubscriptionOutput`](crate::output::DescribeSubscriptionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) subscription: std::option::Option<crate::model::Subscription>,
    }
    impl Builder {
        /// <p>The Shield Advanced subscription details for an account.</p>
        pub fn subscription(mut self, input: crate::model::Subscription) -> Self {
            self.subscription = Some(input);
            self
        }
        /// <p>The Shield Advanced subscription details for an account.</p>
        pub fn set_subscription(
            mut self,
            input: std::option::Option<crate::model::Subscription>,
        ) -> Self {
            self.subscription = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeSubscriptionOutput`](crate::output::DescribeSubscriptionOutput)
        pub fn build(self) -> crate::output::DescribeSubscriptionOutput {
            crate::output::DescribeSubscriptionOutput {
                subscription: self.subscription,
            }
        }
    }
}
impl DescribeSubscriptionOutput {
    /// Creates a new builder-style object to manufacture [`DescribeSubscriptionOutput`](crate::output::DescribeSubscriptionOutput)
    pub fn builder() -> crate::output::describe_subscription_output::Builder {
        crate::output::describe_subscription_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeProtectionGroupOutput {
    /// <p>A grouping of protected resources that you and Shield Advanced can monitor as a collective. This resource grouping improves the accuracy of detection and reduces false positives. </p>
    pub protection_group: std::option::Option<crate::model::ProtectionGroup>,
}
impl DescribeProtectionGroupOutput {
    /// <p>A grouping of protected resources that you and Shield Advanced can monitor as a collective. This resource grouping improves the accuracy of detection and reduces false positives. </p>
    pub fn protection_group(&self) -> std::option::Option<&crate::model::ProtectionGroup> {
        self.protection_group.as_ref()
    }
}
impl std::fmt::Debug for DescribeProtectionGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeProtectionGroupOutput");
        formatter.field("protection_group", &self.protection_group);
        formatter.finish()
    }
}
/// See [`DescribeProtectionGroupOutput`](crate::output::DescribeProtectionGroupOutput)
pub mod describe_protection_group_output {
    /// A builder for [`DescribeProtectionGroupOutput`](crate::output::DescribeProtectionGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) protection_group: std::option::Option<crate::model::ProtectionGroup>,
    }
    impl Builder {
        /// <p>A grouping of protected resources that you and Shield Advanced can monitor as a collective. This resource grouping improves the accuracy of detection and reduces false positives. </p>
        pub fn protection_group(mut self, input: crate::model::ProtectionGroup) -> Self {
            self.protection_group = Some(input);
            self
        }
        /// <p>A grouping of protected resources that you and Shield Advanced can monitor as a collective. This resource grouping improves the accuracy of detection and reduces false positives. </p>
        pub fn set_protection_group(
            mut self,
            input: std::option::Option<crate::model::ProtectionGroup>,
        ) -> Self {
            self.protection_group = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeProtectionGroupOutput`](crate::output::DescribeProtectionGroupOutput)
        pub fn build(self) -> crate::output::DescribeProtectionGroupOutput {
            crate::output::DescribeProtectionGroupOutput {
                protection_group: self.protection_group,
            }
        }
    }
}
impl DescribeProtectionGroupOutput {
    /// Creates a new builder-style object to manufacture [`DescribeProtectionGroupOutput`](crate::output::DescribeProtectionGroupOutput)
    pub fn builder() -> crate::output::describe_protection_group_output::Builder {
        crate::output::describe_protection_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeProtectionOutput {
    /// <p>The <a>Protection</a> object that is described.</p>
    pub protection: std::option::Option<crate::model::Protection>,
}
impl DescribeProtectionOutput {
    /// <p>The <a>Protection</a> object that is described.</p>
    pub fn protection(&self) -> std::option::Option<&crate::model::Protection> {
        self.protection.as_ref()
    }
}
impl std::fmt::Debug for DescribeProtectionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeProtectionOutput");
        formatter.field("protection", &self.protection);
        formatter.finish()
    }
}
/// See [`DescribeProtectionOutput`](crate::output::DescribeProtectionOutput)
pub mod describe_protection_output {
    /// A builder for [`DescribeProtectionOutput`](crate::output::DescribeProtectionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) protection: std::option::Option<crate::model::Protection>,
    }
    impl Builder {
        /// <p>The <a>Protection</a> object that is described.</p>
        pub fn protection(mut self, input: crate::model::Protection) -> Self {
            self.protection = Some(input);
            self
        }
        /// <p>The <a>Protection</a> object that is described.</p>
        pub fn set_protection(
            mut self,
            input: std::option::Option<crate::model::Protection>,
        ) -> Self {
            self.protection = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeProtectionOutput`](crate::output::DescribeProtectionOutput)
        pub fn build(self) -> crate::output::DescribeProtectionOutput {
            crate::output::DescribeProtectionOutput {
                protection: self.protection,
            }
        }
    }
}
impl DescribeProtectionOutput {
    /// Creates a new builder-style object to manufacture [`DescribeProtectionOutput`](crate::output::DescribeProtectionOutput)
    pub fn builder() -> crate::output::describe_protection_output::Builder {
        crate::output::describe_protection_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeEmergencyContactSettingsOutput {
    /// <p>A list of email addresses and phone numbers that the Shield Response Team (SRT) can use to contact you if you have proactive engagement enabled, for escalations to the SRT and to initiate proactive customer support.</p>
    pub emergency_contact_list: std::option::Option<std::vec::Vec<crate::model::EmergencyContact>>,
}
impl DescribeEmergencyContactSettingsOutput {
    /// <p>A list of email addresses and phone numbers that the Shield Response Team (SRT) can use to contact you if you have proactive engagement enabled, for escalations to the SRT and to initiate proactive customer support.</p>
    pub fn emergency_contact_list(&self) -> std::option::Option<&[crate::model::EmergencyContact]> {
        self.emergency_contact_list.as_deref()
    }
}
impl std::fmt::Debug for DescribeEmergencyContactSettingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeEmergencyContactSettingsOutput");
        formatter.field("emergency_contact_list", &self.emergency_contact_list);
        formatter.finish()
    }
}
/// See [`DescribeEmergencyContactSettingsOutput`](crate::output::DescribeEmergencyContactSettingsOutput)
pub mod describe_emergency_contact_settings_output {
    /// A builder for [`DescribeEmergencyContactSettingsOutput`](crate::output::DescribeEmergencyContactSettingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) emergency_contact_list:
            std::option::Option<std::vec::Vec<crate::model::EmergencyContact>>,
    }
    impl Builder {
        /// Appends an item to `emergency_contact_list`.
        ///
        /// To override the contents of this collection use [`set_emergency_contact_list`](Self::set_emergency_contact_list).
        ///
        /// <p>A list of email addresses and phone numbers that the Shield Response Team (SRT) can use to contact you if you have proactive engagement enabled, for escalations to the SRT and to initiate proactive customer support.</p>
        pub fn emergency_contact_list(
            mut self,
            input: impl Into<crate::model::EmergencyContact>,
        ) -> Self {
            let mut v = self.emergency_contact_list.unwrap_or_default();
            v.push(input.into());
            self.emergency_contact_list = Some(v);
            self
        }
        /// <p>A list of email addresses and phone numbers that the Shield Response Team (SRT) can use to contact you if you have proactive engagement enabled, for escalations to the SRT and to initiate proactive customer support.</p>
        pub fn set_emergency_contact_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EmergencyContact>>,
        ) -> Self {
            self.emergency_contact_list = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeEmergencyContactSettingsOutput`](crate::output::DescribeEmergencyContactSettingsOutput)
        pub fn build(self) -> crate::output::DescribeEmergencyContactSettingsOutput {
            crate::output::DescribeEmergencyContactSettingsOutput {
                emergency_contact_list: self.emergency_contact_list,
            }
        }
    }
}
impl DescribeEmergencyContactSettingsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeEmergencyContactSettingsOutput`](crate::output::DescribeEmergencyContactSettingsOutput)
    pub fn builder() -> crate::output::describe_emergency_contact_settings_output::Builder {
        crate::output::describe_emergency_contact_settings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDrtAccessOutput {
    /// <p>The Amazon Resource Name (ARN) of the role the SRT used to access your Amazon Web Services account.</p>
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The list of Amazon S3 buckets accessed by the SRT.</p>
    pub log_bucket_list: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl DescribeDrtAccessOutput {
    /// <p>The Amazon Resource Name (ARN) of the role the SRT used to access your Amazon Web Services account.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The list of Amazon S3 buckets accessed by the SRT.</p>
    pub fn log_bucket_list(&self) -> std::option::Option<&[std::string::String]> {
        self.log_bucket_list.as_deref()
    }
}
impl std::fmt::Debug for DescribeDrtAccessOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDrtAccessOutput");
        formatter.field("role_arn", &self.role_arn);
        formatter.field("log_bucket_list", &self.log_bucket_list);
        formatter.finish()
    }
}
/// See [`DescribeDrtAccessOutput`](crate::output::DescribeDrtAccessOutput)
pub mod describe_drt_access_output {
    /// A builder for [`DescribeDrtAccessOutput`](crate::output::DescribeDrtAccessOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) role_arn: std::option::Option<std::string::String>,
        pub(crate) log_bucket_list: std::option::Option<std::vec::Vec<std::string::String>>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the role the SRT used to access your Amazon Web Services account.</p>
        pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.role_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the role the SRT used to access your Amazon Web Services account.</p>
        pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.role_arn = input;
            self
        }
        /// Appends an item to `log_bucket_list`.
        ///
        /// To override the contents of this collection use [`set_log_bucket_list`](Self::set_log_bucket_list).
        ///
        /// <p>The list of Amazon S3 buckets accessed by the SRT.</p>
        pub fn log_bucket_list(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.log_bucket_list.unwrap_or_default();
            v.push(input.into());
            self.log_bucket_list = Some(v);
            self
        }
        /// <p>The list of Amazon S3 buckets accessed by the SRT.</p>
        pub fn set_log_bucket_list(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.log_bucket_list = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDrtAccessOutput`](crate::output::DescribeDrtAccessOutput)
        pub fn build(self) -> crate::output::DescribeDrtAccessOutput {
            crate::output::DescribeDrtAccessOutput {
                role_arn: self.role_arn,
                log_bucket_list: self.log_bucket_list,
            }
        }
    }
}
impl DescribeDrtAccessOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDrtAccessOutput`](crate::output::DescribeDrtAccessOutput)
    pub fn builder() -> crate::output::describe_drt_access_output::Builder {
        crate::output::describe_drt_access_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeAttackStatisticsOutput {
    /// <p>The time range. </p>
    pub time_range: std::option::Option<crate::model::TimeRange>,
    /// <p>The data that describes the attacks detected during the time period.</p>
    pub data_items: std::option::Option<std::vec::Vec<crate::model::AttackStatisticsDataItem>>,
}
impl DescribeAttackStatisticsOutput {
    /// <p>The time range. </p>
    pub fn time_range(&self) -> std::option::Option<&crate::model::TimeRange> {
        self.time_range.as_ref()
    }
    /// <p>The data that describes the attacks detected during the time period.</p>
    pub fn data_items(&self) -> std::option::Option<&[crate::model::AttackStatisticsDataItem]> {
        self.data_items.as_deref()
    }
}
impl std::fmt::Debug for DescribeAttackStatisticsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeAttackStatisticsOutput");
        formatter.field("time_range", &self.time_range);
        formatter.field("data_items", &self.data_items);
        formatter.finish()
    }
}
/// See [`DescribeAttackStatisticsOutput`](crate::output::DescribeAttackStatisticsOutput)
pub mod describe_attack_statistics_output {
    /// A builder for [`DescribeAttackStatisticsOutput`](crate::output::DescribeAttackStatisticsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) time_range: std::option::Option<crate::model::TimeRange>,
        pub(crate) data_items:
            std::option::Option<std::vec::Vec<crate::model::AttackStatisticsDataItem>>,
    }
    impl Builder {
        /// <p>The time range. </p>
        pub fn time_range(mut self, input: crate::model::TimeRange) -> Self {
            self.time_range = Some(input);
            self
        }
        /// <p>The time range. </p>
        pub fn set_time_range(
            mut self,
            input: std::option::Option<crate::model::TimeRange>,
        ) -> Self {
            self.time_range = input;
            self
        }
        /// Appends an item to `data_items`.
        ///
        /// To override the contents of this collection use [`set_data_items`](Self::set_data_items).
        ///
        /// <p>The data that describes the attacks detected during the time period.</p>
        pub fn data_items(
            mut self,
            input: impl Into<crate::model::AttackStatisticsDataItem>,
        ) -> Self {
            let mut v = self.data_items.unwrap_or_default();
            v.push(input.into());
            self.data_items = Some(v);
            self
        }
        /// <p>The data that describes the attacks detected during the time period.</p>
        pub fn set_data_items(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AttackStatisticsDataItem>>,
        ) -> Self {
            self.data_items = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAttackStatisticsOutput`](crate::output::DescribeAttackStatisticsOutput)
        pub fn build(self) -> crate::output::DescribeAttackStatisticsOutput {
            crate::output::DescribeAttackStatisticsOutput {
                time_range: self.time_range,
                data_items: self.data_items,
            }
        }
    }
}
impl DescribeAttackStatisticsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAttackStatisticsOutput`](crate::output::DescribeAttackStatisticsOutput)
    pub fn builder() -> crate::output::describe_attack_statistics_output::Builder {
        crate::output::describe_attack_statistics_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeAttackOutput {
    /// <p>The attack that is described.</p>
    pub attack: std::option::Option<crate::model::AttackDetail>,
}
impl DescribeAttackOutput {
    /// <p>The attack that is described.</p>
    pub fn attack(&self) -> std::option::Option<&crate::model::AttackDetail> {
        self.attack.as_ref()
    }
}
impl std::fmt::Debug for DescribeAttackOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeAttackOutput");
        formatter.field("attack", &self.attack);
        formatter.finish()
    }
}
/// See [`DescribeAttackOutput`](crate::output::DescribeAttackOutput)
pub mod describe_attack_output {
    /// A builder for [`DescribeAttackOutput`](crate::output::DescribeAttackOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) attack: std::option::Option<crate::model::AttackDetail>,
    }
    impl Builder {
        /// <p>The attack that is described.</p>
        pub fn attack(mut self, input: crate::model::AttackDetail) -> Self {
            self.attack = Some(input);
            self
        }
        /// <p>The attack that is described.</p>
        pub fn set_attack(
            mut self,
            input: std::option::Option<crate::model::AttackDetail>,
        ) -> Self {
            self.attack = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAttackOutput`](crate::output::DescribeAttackOutput)
        pub fn build(self) -> crate::output::DescribeAttackOutput {
            crate::output::DescribeAttackOutput {
                attack: self.attack,
            }
        }
    }
}
impl DescribeAttackOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAttackOutput`](crate::output::DescribeAttackOutput)
    pub fn builder() -> crate::output::describe_attack_output::Builder {
        crate::output::describe_attack_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteSubscriptionOutput {}
impl std::fmt::Debug for DeleteSubscriptionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteSubscriptionOutput");
        formatter.finish()
    }
}
/// See [`DeleteSubscriptionOutput`](crate::output::DeleteSubscriptionOutput)
pub mod delete_subscription_output {
    /// A builder for [`DeleteSubscriptionOutput`](crate::output::DeleteSubscriptionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteSubscriptionOutput`](crate::output::DeleteSubscriptionOutput)
        pub fn build(self) -> crate::output::DeleteSubscriptionOutput {
            crate::output::DeleteSubscriptionOutput {}
        }
    }
}
impl DeleteSubscriptionOutput {
    /// Creates a new builder-style object to manufacture [`DeleteSubscriptionOutput`](crate::output::DeleteSubscriptionOutput)
    pub fn builder() -> crate::output::delete_subscription_output::Builder {
        crate::output::delete_subscription_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteProtectionGroupOutput {}
impl std::fmt::Debug for DeleteProtectionGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteProtectionGroupOutput");
        formatter.finish()
    }
}
/// See [`DeleteProtectionGroupOutput`](crate::output::DeleteProtectionGroupOutput)
pub mod delete_protection_group_output {
    /// A builder for [`DeleteProtectionGroupOutput`](crate::output::DeleteProtectionGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteProtectionGroupOutput`](crate::output::DeleteProtectionGroupOutput)
        pub fn build(self) -> crate::output::DeleteProtectionGroupOutput {
            crate::output::DeleteProtectionGroupOutput {}
        }
    }
}
impl DeleteProtectionGroupOutput {
    /// Creates a new builder-style object to manufacture [`DeleteProtectionGroupOutput`](crate::output::DeleteProtectionGroupOutput)
    pub fn builder() -> crate::output::delete_protection_group_output::Builder {
        crate::output::delete_protection_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteProtectionOutput {}
impl std::fmt::Debug for DeleteProtectionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteProtectionOutput");
        formatter.finish()
    }
}
/// See [`DeleteProtectionOutput`](crate::output::DeleteProtectionOutput)
pub mod delete_protection_output {
    /// A builder for [`DeleteProtectionOutput`](crate::output::DeleteProtectionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteProtectionOutput`](crate::output::DeleteProtectionOutput)
        pub fn build(self) -> crate::output::DeleteProtectionOutput {
            crate::output::DeleteProtectionOutput {}
        }
    }
}
impl DeleteProtectionOutput {
    /// Creates a new builder-style object to manufacture [`DeleteProtectionOutput`](crate::output::DeleteProtectionOutput)
    pub fn builder() -> crate::output::delete_protection_output::Builder {
        crate::output::delete_protection_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateSubscriptionOutput {}
impl std::fmt::Debug for CreateSubscriptionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateSubscriptionOutput");
        formatter.finish()
    }
}
/// See [`CreateSubscriptionOutput`](crate::output::CreateSubscriptionOutput)
pub mod create_subscription_output {
    /// A builder for [`CreateSubscriptionOutput`](crate::output::CreateSubscriptionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`CreateSubscriptionOutput`](crate::output::CreateSubscriptionOutput)
        pub fn build(self) -> crate::output::CreateSubscriptionOutput {
            crate::output::CreateSubscriptionOutput {}
        }
    }
}
impl CreateSubscriptionOutput {
    /// Creates a new builder-style object to manufacture [`CreateSubscriptionOutput`](crate::output::CreateSubscriptionOutput)
    pub fn builder() -> crate::output::create_subscription_output::Builder {
        crate::output::create_subscription_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateProtectionGroupOutput {}
impl std::fmt::Debug for CreateProtectionGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateProtectionGroupOutput");
        formatter.finish()
    }
}
/// See [`CreateProtectionGroupOutput`](crate::output::CreateProtectionGroupOutput)
pub mod create_protection_group_output {
    /// A builder for [`CreateProtectionGroupOutput`](crate::output::CreateProtectionGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`CreateProtectionGroupOutput`](crate::output::CreateProtectionGroupOutput)
        pub fn build(self) -> crate::output::CreateProtectionGroupOutput {
            crate::output::CreateProtectionGroupOutput {}
        }
    }
}
impl CreateProtectionGroupOutput {
    /// Creates a new builder-style object to manufacture [`CreateProtectionGroupOutput`](crate::output::CreateProtectionGroupOutput)
    pub fn builder() -> crate::output::create_protection_group_output::Builder {
        crate::output::create_protection_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateProtectionOutput {
    /// <p>The unique identifier (ID) for the <a>Protection</a> object that is created.</p>
    pub protection_id: std::option::Option<std::string::String>,
}
impl CreateProtectionOutput {
    /// <p>The unique identifier (ID) for the <a>Protection</a> object that is created.</p>
    pub fn protection_id(&self) -> std::option::Option<&str> {
        self.protection_id.as_deref()
    }
}
impl std::fmt::Debug for CreateProtectionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateProtectionOutput");
        formatter.field("protection_id", &self.protection_id);
        formatter.finish()
    }
}
/// See [`CreateProtectionOutput`](crate::output::CreateProtectionOutput)
pub mod create_protection_output {
    /// A builder for [`CreateProtectionOutput`](crate::output::CreateProtectionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) protection_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The unique identifier (ID) for the <a>Protection</a> object that is created.</p>
        pub fn protection_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.protection_id = Some(input.into());
            self
        }
        /// <p>The unique identifier (ID) for the <a>Protection</a> object that is created.</p>
        pub fn set_protection_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.protection_id = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateProtectionOutput`](crate::output::CreateProtectionOutput)
        pub fn build(self) -> crate::output::CreateProtectionOutput {
            crate::output::CreateProtectionOutput {
                protection_id: self.protection_id,
            }
        }
    }
}
impl CreateProtectionOutput {
    /// Creates a new builder-style object to manufacture [`CreateProtectionOutput`](crate::output::CreateProtectionOutput)
    pub fn builder() -> crate::output::create_protection_output::Builder {
        crate::output::create_protection_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AssociateProactiveEngagementDetailsOutput {}
impl std::fmt::Debug for AssociateProactiveEngagementDetailsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AssociateProactiveEngagementDetailsOutput");
        formatter.finish()
    }
}
/// See [`AssociateProactiveEngagementDetailsOutput`](crate::output::AssociateProactiveEngagementDetailsOutput)
pub mod associate_proactive_engagement_details_output {
    /// A builder for [`AssociateProactiveEngagementDetailsOutput`](crate::output::AssociateProactiveEngagementDetailsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`AssociateProactiveEngagementDetailsOutput`](crate::output::AssociateProactiveEngagementDetailsOutput)
        pub fn build(self) -> crate::output::AssociateProactiveEngagementDetailsOutput {
            crate::output::AssociateProactiveEngagementDetailsOutput {}
        }
    }
}
impl AssociateProactiveEngagementDetailsOutput {
    /// Creates a new builder-style object to manufacture [`AssociateProactiveEngagementDetailsOutput`](crate::output::AssociateProactiveEngagementDetailsOutput)
    pub fn builder() -> crate::output::associate_proactive_engagement_details_output::Builder {
        crate::output::associate_proactive_engagement_details_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AssociateHealthCheckOutput {}
impl std::fmt::Debug for AssociateHealthCheckOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AssociateHealthCheckOutput");
        formatter.finish()
    }
}
/// See [`AssociateHealthCheckOutput`](crate::output::AssociateHealthCheckOutput)
pub mod associate_health_check_output {
    /// A builder for [`AssociateHealthCheckOutput`](crate::output::AssociateHealthCheckOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`AssociateHealthCheckOutput`](crate::output::AssociateHealthCheckOutput)
        pub fn build(self) -> crate::output::AssociateHealthCheckOutput {
            crate::output::AssociateHealthCheckOutput {}
        }
    }
}
impl AssociateHealthCheckOutput {
    /// Creates a new builder-style object to manufacture [`AssociateHealthCheckOutput`](crate::output::AssociateHealthCheckOutput)
    pub fn builder() -> crate::output::associate_health_check_output::Builder {
        crate::output::associate_health_check_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AssociateDrtRoleOutput {}
impl std::fmt::Debug for AssociateDrtRoleOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AssociateDrtRoleOutput");
        formatter.finish()
    }
}
/// See [`AssociateDrtRoleOutput`](crate::output::AssociateDrtRoleOutput)
pub mod associate_drt_role_output {
    /// A builder for [`AssociateDrtRoleOutput`](crate::output::AssociateDrtRoleOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`AssociateDrtRoleOutput`](crate::output::AssociateDrtRoleOutput)
        pub fn build(self) -> crate::output::AssociateDrtRoleOutput {
            crate::output::AssociateDrtRoleOutput {}
        }
    }
}
impl AssociateDrtRoleOutput {
    /// Creates a new builder-style object to manufacture [`AssociateDrtRoleOutput`](crate::output::AssociateDrtRoleOutput)
    pub fn builder() -> crate::output::associate_drt_role_output::Builder {
        crate::output::associate_drt_role_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AssociateDrtLogBucketOutput {}
impl std::fmt::Debug for AssociateDrtLogBucketOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AssociateDrtLogBucketOutput");
        formatter.finish()
    }
}
/// See [`AssociateDrtLogBucketOutput`](crate::output::AssociateDrtLogBucketOutput)
pub mod associate_drt_log_bucket_output {
    /// A builder for [`AssociateDrtLogBucketOutput`](crate::output::AssociateDrtLogBucketOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`AssociateDrtLogBucketOutput`](crate::output::AssociateDrtLogBucketOutput)
        pub fn build(self) -> crate::output::AssociateDrtLogBucketOutput {
            crate::output::AssociateDrtLogBucketOutput {}
        }
    }
}
impl AssociateDrtLogBucketOutput {
    /// Creates a new builder-style object to manufacture [`AssociateDrtLogBucketOutput`](crate::output::AssociateDrtLogBucketOutput)
    pub fn builder() -> crate::output::associate_drt_log_bucket_output::Builder {
        crate::output::associate_drt_log_bucket_output::Builder::default()
    }
}
