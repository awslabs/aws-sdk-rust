// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateSubscriptionOutput {}
/// See [`UpdateSubscriptionOutput`](crate::output::UpdateSubscriptionOutput).
pub mod update_subscription_output {

    /// A builder for [`UpdateSubscriptionOutput`](crate::output::UpdateSubscriptionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateSubscriptionOutput`](crate::output::UpdateSubscriptionOutput).
        pub fn build(self) -> crate::output::UpdateSubscriptionOutput {
            crate::output::UpdateSubscriptionOutput {}
        }
    }
}
impl UpdateSubscriptionOutput {
    /// Creates a new builder-style object to manufacture [`UpdateSubscriptionOutput`](crate::output::UpdateSubscriptionOutput).
    pub fn builder() -> crate::output::update_subscription_output::Builder {
        crate::output::update_subscription_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateProtectionGroupOutput {}
/// See [`UpdateProtectionGroupOutput`](crate::output::UpdateProtectionGroupOutput).
pub mod update_protection_group_output {

    /// A builder for [`UpdateProtectionGroupOutput`](crate::output::UpdateProtectionGroupOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateProtectionGroupOutput`](crate::output::UpdateProtectionGroupOutput).
        pub fn build(self) -> crate::output::UpdateProtectionGroupOutput {
            crate::output::UpdateProtectionGroupOutput {}
        }
    }
}
impl UpdateProtectionGroupOutput {
    /// Creates a new builder-style object to manufacture [`UpdateProtectionGroupOutput`](crate::output::UpdateProtectionGroupOutput).
    pub fn builder() -> crate::output::update_protection_group_output::Builder {
        crate::output::update_protection_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateEmergencyContactSettingsOutput {}
/// See [`UpdateEmergencyContactSettingsOutput`](crate::output::UpdateEmergencyContactSettingsOutput).
pub mod update_emergency_contact_settings_output {

    /// A builder for [`UpdateEmergencyContactSettingsOutput`](crate::output::UpdateEmergencyContactSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateEmergencyContactSettingsOutput`](crate::output::UpdateEmergencyContactSettingsOutput).
        pub fn build(self) -> crate::output::UpdateEmergencyContactSettingsOutput {
            crate::output::UpdateEmergencyContactSettingsOutput {}
        }
    }
}
impl UpdateEmergencyContactSettingsOutput {
    /// Creates a new builder-style object to manufacture [`UpdateEmergencyContactSettingsOutput`](crate::output::UpdateEmergencyContactSettingsOutput).
    pub fn builder() -> crate::output::update_emergency_contact_settings_output::Builder {
        crate::output::update_emergency_contact_settings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateApplicationLayerAutomaticResponseOutput {}
/// See [`UpdateApplicationLayerAutomaticResponseOutput`](crate::output::UpdateApplicationLayerAutomaticResponseOutput).
pub mod update_application_layer_automatic_response_output {

    /// A builder for [`UpdateApplicationLayerAutomaticResponseOutput`](crate::output::UpdateApplicationLayerAutomaticResponseOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateApplicationLayerAutomaticResponseOutput`](crate::output::UpdateApplicationLayerAutomaticResponseOutput).
        pub fn build(self) -> crate::output::UpdateApplicationLayerAutomaticResponseOutput {
            crate::output::UpdateApplicationLayerAutomaticResponseOutput {}
        }
    }
}
impl UpdateApplicationLayerAutomaticResponseOutput {
    /// Creates a new builder-style object to manufacture [`UpdateApplicationLayerAutomaticResponseOutput`](crate::output::UpdateApplicationLayerAutomaticResponseOutput).
    pub fn builder() -> crate::output::update_application_layer_automatic_response_output::Builder {
        crate::output::update_application_layer_automatic_response_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UntagResourceOutput {}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput).
pub mod untag_resource_output {

    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput).
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {}
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagResourceOutput {}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput).
pub mod tag_resource_output {

    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput).
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {}
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput).
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTagsForResourceOutput {
    /// <p>A list of tag key and value pairs associated with the specified resource.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl ListTagsForResourceOutput {
    /// <p>A list of tag key and value pairs associated with the specified resource.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::model::Tag]> {
        self.tags.as_deref()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
pub mod list_tags_for_resource_output {

    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>A list of tag key and value pairs associated with the specified resource.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input);
            self.tags = Some(v);
            self
        }
        /// <p>A list of tag key and value pairs associated with the specified resource.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput { tags: self.tags }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListResourcesInProtectionGroupOutput {
    /// <p>The Amazon Resource Names (ARNs) of the resources that are included in the protection group.</p>
    #[doc(hidden)]
    pub resource_arns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>When you request a list of objects from Shield Advanced, if the response does not include all of the remaining available objects, Shield Advanced includes a <code>NextToken</code> value in the response. You can retrieve the next batch of objects by requesting the list again and providing the token that was returned by the prior call in your request. </p>
    /// <p>You can indicate the maximum number of objects that you want Shield Advanced to return for a single call with the <code>MaxResults</code> setting. Shield Advanced will not return more than <code>MaxResults</code> objects, but may return fewer, even if more objects are still available.</p>
    /// <p>Whenever more objects remain that Shield Advanced has not yet returned to you, the response will include a <code>NextToken</code> value.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListResourcesInProtectionGroupOutput {
    /// <p>The Amazon Resource Names (ARNs) of the resources that are included in the protection group.</p>
    pub fn resource_arns(&self) -> std::option::Option<&[std::string::String]> {
        self.resource_arns.as_deref()
    }
    /// <p>When you request a list of objects from Shield Advanced, if the response does not include all of the remaining available objects, Shield Advanced includes a <code>NextToken</code> value in the response. You can retrieve the next batch of objects by requesting the list again and providing the token that was returned by the prior call in your request. </p>
    /// <p>You can indicate the maximum number of objects that you want Shield Advanced to return for a single call with the <code>MaxResults</code> setting. Shield Advanced will not return more than <code>MaxResults</code> objects, but may return fewer, even if more objects are still available.</p>
    /// <p>Whenever more objects remain that Shield Advanced has not yet returned to you, the response will include a <code>NextToken</code> value.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
/// See [`ListResourcesInProtectionGroupOutput`](crate::output::ListResourcesInProtectionGroupOutput).
pub mod list_resources_in_protection_group_output {

    /// A builder for [`ListResourcesInProtectionGroupOutput`](crate::output::ListResourcesInProtectionGroupOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) resource_arns: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `resource_arns`.
        ///
        /// To override the contents of this collection use [`set_resource_arns`](Self::set_resource_arns).
        ///
        /// <p>The Amazon Resource Names (ARNs) of the resources that are included in the protection group.</p>
        pub fn resource_arns(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.resource_arns.unwrap_or_default();
            v.push(input.into());
            self.resource_arns = Some(v);
            self
        }
        /// <p>The Amazon Resource Names (ARNs) of the resources that are included in the protection group.</p>
        pub fn set_resource_arns(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.resource_arns = input;
            self
        }
        /// <p>When you request a list of objects from Shield Advanced, if the response does not include all of the remaining available objects, Shield Advanced includes a <code>NextToken</code> value in the response. You can retrieve the next batch of objects by requesting the list again and providing the token that was returned by the prior call in your request. </p>
        /// <p>You can indicate the maximum number of objects that you want Shield Advanced to return for a single call with the <code>MaxResults</code> setting. Shield Advanced will not return more than <code>MaxResults</code> objects, but may return fewer, even if more objects are still available.</p>
        /// <p>Whenever more objects remain that Shield Advanced has not yet returned to you, the response will include a <code>NextToken</code> value.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>When you request a list of objects from Shield Advanced, if the response does not include all of the remaining available objects, Shield Advanced includes a <code>NextToken</code> value in the response. You can retrieve the next batch of objects by requesting the list again and providing the token that was returned by the prior call in your request. </p>
        /// <p>You can indicate the maximum number of objects that you want Shield Advanced to return for a single call with the <code>MaxResults</code> setting. Shield Advanced will not return more than <code>MaxResults</code> objects, but may return fewer, even if more objects are still available.</p>
        /// <p>Whenever more objects remain that Shield Advanced has not yet returned to you, the response will include a <code>NextToken</code> value.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListResourcesInProtectionGroupOutput`](crate::output::ListResourcesInProtectionGroupOutput).
        pub fn build(self) -> crate::output::ListResourcesInProtectionGroupOutput {
            crate::output::ListResourcesInProtectionGroupOutput {
                resource_arns: self.resource_arns,
                next_token: self.next_token,
            }
        }
    }
}
impl ListResourcesInProtectionGroupOutput {
    /// Creates a new builder-style object to manufacture [`ListResourcesInProtectionGroupOutput`](crate::output::ListResourcesInProtectionGroupOutput).
    pub fn builder() -> crate::output::list_resources_in_protection_group_output::Builder {
        crate::output::list_resources_in_protection_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListProtectionsOutput {
    /// <p>The array of enabled <code>Protection</code> objects.</p>
    #[doc(hidden)]
    pub protections: std::option::Option<std::vec::Vec<crate::model::Protection>>,
    /// <p>When you request a list of objects from Shield Advanced, if the response does not include all of the remaining available objects, Shield Advanced includes a <code>NextToken</code> value in the response. You can retrieve the next batch of objects by requesting the list again and providing the token that was returned by the prior call in your request. </p>
    /// <p>You can indicate the maximum number of objects that you want Shield Advanced to return for a single call with the <code>MaxResults</code> setting. Shield Advanced will not return more than <code>MaxResults</code> objects, but may return fewer, even if more objects are still available.</p>
    /// <p>Whenever more objects remain that Shield Advanced has not yet returned to you, the response will include a <code>NextToken</code> value.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListProtectionsOutput {
    /// <p>The array of enabled <code>Protection</code> objects.</p>
    pub fn protections(&self) -> std::option::Option<&[crate::model::Protection]> {
        self.protections.as_deref()
    }
    /// <p>When you request a list of objects from Shield Advanced, if the response does not include all of the remaining available objects, Shield Advanced includes a <code>NextToken</code> value in the response. You can retrieve the next batch of objects by requesting the list again and providing the token that was returned by the prior call in your request. </p>
    /// <p>You can indicate the maximum number of objects that you want Shield Advanced to return for a single call with the <code>MaxResults</code> setting. Shield Advanced will not return more than <code>MaxResults</code> objects, but may return fewer, even if more objects are still available.</p>
    /// <p>Whenever more objects remain that Shield Advanced has not yet returned to you, the response will include a <code>NextToken</code> value.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
/// See [`ListProtectionsOutput`](crate::output::ListProtectionsOutput).
pub mod list_protections_output {

    /// A builder for [`ListProtectionsOutput`](crate::output::ListProtectionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) protections: std::option::Option<std::vec::Vec<crate::model::Protection>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `protections`.
        ///
        /// To override the contents of this collection use [`set_protections`](Self::set_protections).
        ///
        /// <p>The array of enabled <code>Protection</code> objects.</p>
        pub fn protections(mut self, input: crate::model::Protection) -> Self {
            let mut v = self.protections.unwrap_or_default();
            v.push(input);
            self.protections = Some(v);
            self
        }
        /// <p>The array of enabled <code>Protection</code> objects.</p>
        pub fn set_protections(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Protection>>,
        ) -> Self {
            self.protections = input;
            self
        }
        /// <p>When you request a list of objects from Shield Advanced, if the response does not include all of the remaining available objects, Shield Advanced includes a <code>NextToken</code> value in the response. You can retrieve the next batch of objects by requesting the list again and providing the token that was returned by the prior call in your request. </p>
        /// <p>You can indicate the maximum number of objects that you want Shield Advanced to return for a single call with the <code>MaxResults</code> setting. Shield Advanced will not return more than <code>MaxResults</code> objects, but may return fewer, even if more objects are still available.</p>
        /// <p>Whenever more objects remain that Shield Advanced has not yet returned to you, the response will include a <code>NextToken</code> value.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>When you request a list of objects from Shield Advanced, if the response does not include all of the remaining available objects, Shield Advanced includes a <code>NextToken</code> value in the response. You can retrieve the next batch of objects by requesting the list again and providing the token that was returned by the prior call in your request. </p>
        /// <p>You can indicate the maximum number of objects that you want Shield Advanced to return for a single call with the <code>MaxResults</code> setting. Shield Advanced will not return more than <code>MaxResults</code> objects, but may return fewer, even if more objects are still available.</p>
        /// <p>Whenever more objects remain that Shield Advanced has not yet returned to you, the response will include a <code>NextToken</code> value.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListProtectionsOutput`](crate::output::ListProtectionsOutput).
        pub fn build(self) -> crate::output::ListProtectionsOutput {
            crate::output::ListProtectionsOutput {
                protections: self.protections,
                next_token: self.next_token,
            }
        }
    }
}
impl ListProtectionsOutput {
    /// Creates a new builder-style object to manufacture [`ListProtectionsOutput`](crate::output::ListProtectionsOutput).
    pub fn builder() -> crate::output::list_protections_output::Builder {
        crate::output::list_protections_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListProtectionGroupsOutput {
    /// <p></p>
    #[doc(hidden)]
    pub protection_groups: std::option::Option<std::vec::Vec<crate::model::ProtectionGroup>>,
    /// <p>When you request a list of objects from Shield Advanced, if the response does not include all of the remaining available objects, Shield Advanced includes a <code>NextToken</code> value in the response. You can retrieve the next batch of objects by requesting the list again and providing the token that was returned by the prior call in your request. </p>
    /// <p>You can indicate the maximum number of objects that you want Shield Advanced to return for a single call with the <code>MaxResults</code> setting. Shield Advanced will not return more than <code>MaxResults</code> objects, but may return fewer, even if more objects are still available.</p>
    /// <p>Whenever more objects remain that Shield Advanced has not yet returned to you, the response will include a <code>NextToken</code> value.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListProtectionGroupsOutput {
    /// <p></p>
    pub fn protection_groups(&self) -> std::option::Option<&[crate::model::ProtectionGroup]> {
        self.protection_groups.as_deref()
    }
    /// <p>When you request a list of objects from Shield Advanced, if the response does not include all of the remaining available objects, Shield Advanced includes a <code>NextToken</code> value in the response. You can retrieve the next batch of objects by requesting the list again and providing the token that was returned by the prior call in your request. </p>
    /// <p>You can indicate the maximum number of objects that you want Shield Advanced to return for a single call with the <code>MaxResults</code> setting. Shield Advanced will not return more than <code>MaxResults</code> objects, but may return fewer, even if more objects are still available.</p>
    /// <p>Whenever more objects remain that Shield Advanced has not yet returned to you, the response will include a <code>NextToken</code> value.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
/// See [`ListProtectionGroupsOutput`](crate::output::ListProtectionGroupsOutput).
pub mod list_protection_groups_output {

    /// A builder for [`ListProtectionGroupsOutput`](crate::output::ListProtectionGroupsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) protection_groups:
            std::option::Option<std::vec::Vec<crate::model::ProtectionGroup>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `protection_groups`.
        ///
        /// To override the contents of this collection use [`set_protection_groups`](Self::set_protection_groups).
        ///
        /// <p></p>
        pub fn protection_groups(mut self, input: crate::model::ProtectionGroup) -> Self {
            let mut v = self.protection_groups.unwrap_or_default();
            v.push(input);
            self.protection_groups = Some(v);
            self
        }
        /// <p></p>
        pub fn set_protection_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ProtectionGroup>>,
        ) -> Self {
            self.protection_groups = input;
            self
        }
        /// <p>When you request a list of objects from Shield Advanced, if the response does not include all of the remaining available objects, Shield Advanced includes a <code>NextToken</code> value in the response. You can retrieve the next batch of objects by requesting the list again and providing the token that was returned by the prior call in your request. </p>
        /// <p>You can indicate the maximum number of objects that you want Shield Advanced to return for a single call with the <code>MaxResults</code> setting. Shield Advanced will not return more than <code>MaxResults</code> objects, but may return fewer, even if more objects are still available.</p>
        /// <p>Whenever more objects remain that Shield Advanced has not yet returned to you, the response will include a <code>NextToken</code> value.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>When you request a list of objects from Shield Advanced, if the response does not include all of the remaining available objects, Shield Advanced includes a <code>NextToken</code> value in the response. You can retrieve the next batch of objects by requesting the list again and providing the token that was returned by the prior call in your request. </p>
        /// <p>You can indicate the maximum number of objects that you want Shield Advanced to return for a single call with the <code>MaxResults</code> setting. Shield Advanced will not return more than <code>MaxResults</code> objects, but may return fewer, even if more objects are still available.</p>
        /// <p>Whenever more objects remain that Shield Advanced has not yet returned to you, the response will include a <code>NextToken</code> value.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListProtectionGroupsOutput`](crate::output::ListProtectionGroupsOutput).
        pub fn build(self) -> crate::output::ListProtectionGroupsOutput {
            crate::output::ListProtectionGroupsOutput {
                protection_groups: self.protection_groups,
                next_token: self.next_token,
            }
        }
    }
}
impl ListProtectionGroupsOutput {
    /// Creates a new builder-style object to manufacture [`ListProtectionGroupsOutput`](crate::output::ListProtectionGroupsOutput).
    pub fn builder() -> crate::output::list_protection_groups_output::Builder {
        crate::output::list_protection_groups_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListAttacksOutput {
    /// <p>The attack information for the specified time range.</p>
    #[doc(hidden)]
    pub attack_summaries: std::option::Option<std::vec::Vec<crate::model::AttackSummary>>,
    /// <p>When you request a list of objects from Shield Advanced, if the response does not include all of the remaining available objects, Shield Advanced includes a <code>NextToken</code> value in the response. You can retrieve the next batch of objects by requesting the list again and providing the token that was returned by the prior call in your request. </p>
    /// <p>You can indicate the maximum number of objects that you want Shield Advanced to return for a single call with the <code>MaxResults</code> setting. Shield Advanced will not return more than <code>MaxResults</code> objects, but may return fewer, even if more objects are still available.</p>
    /// <p>Whenever more objects remain that Shield Advanced has not yet returned to you, the response will include a <code>NextToken</code> value.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListAttacksOutput {
    /// <p>The attack information for the specified time range.</p>
    pub fn attack_summaries(&self) -> std::option::Option<&[crate::model::AttackSummary]> {
        self.attack_summaries.as_deref()
    }
    /// <p>When you request a list of objects from Shield Advanced, if the response does not include all of the remaining available objects, Shield Advanced includes a <code>NextToken</code> value in the response. You can retrieve the next batch of objects by requesting the list again and providing the token that was returned by the prior call in your request. </p>
    /// <p>You can indicate the maximum number of objects that you want Shield Advanced to return for a single call with the <code>MaxResults</code> setting. Shield Advanced will not return more than <code>MaxResults</code> objects, but may return fewer, even if more objects are still available.</p>
    /// <p>Whenever more objects remain that Shield Advanced has not yet returned to you, the response will include a <code>NextToken</code> value.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
/// See [`ListAttacksOutput`](crate::output::ListAttacksOutput).
pub mod list_attacks_output {

    /// A builder for [`ListAttacksOutput`](crate::output::ListAttacksOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) attack_summaries:
            std::option::Option<std::vec::Vec<crate::model::AttackSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `attack_summaries`.
        ///
        /// To override the contents of this collection use [`set_attack_summaries`](Self::set_attack_summaries).
        ///
        /// <p>The attack information for the specified time range.</p>
        pub fn attack_summaries(mut self, input: crate::model::AttackSummary) -> Self {
            let mut v = self.attack_summaries.unwrap_or_default();
            v.push(input);
            self.attack_summaries = Some(v);
            self
        }
        /// <p>The attack information for the specified time range.</p>
        pub fn set_attack_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AttackSummary>>,
        ) -> Self {
            self.attack_summaries = input;
            self
        }
        /// <p>When you request a list of objects from Shield Advanced, if the response does not include all of the remaining available objects, Shield Advanced includes a <code>NextToken</code> value in the response. You can retrieve the next batch of objects by requesting the list again and providing the token that was returned by the prior call in your request. </p>
        /// <p>You can indicate the maximum number of objects that you want Shield Advanced to return for a single call with the <code>MaxResults</code> setting. Shield Advanced will not return more than <code>MaxResults</code> objects, but may return fewer, even if more objects are still available.</p>
        /// <p>Whenever more objects remain that Shield Advanced has not yet returned to you, the response will include a <code>NextToken</code> value.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>When you request a list of objects from Shield Advanced, if the response does not include all of the remaining available objects, Shield Advanced includes a <code>NextToken</code> value in the response. You can retrieve the next batch of objects by requesting the list again and providing the token that was returned by the prior call in your request. </p>
        /// <p>You can indicate the maximum number of objects that you want Shield Advanced to return for a single call with the <code>MaxResults</code> setting. Shield Advanced will not return more than <code>MaxResults</code> objects, but may return fewer, even if more objects are still available.</p>
        /// <p>Whenever more objects remain that Shield Advanced has not yet returned to you, the response will include a <code>NextToken</code> value.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListAttacksOutput`](crate::output::ListAttacksOutput).
        pub fn build(self) -> crate::output::ListAttacksOutput {
            crate::output::ListAttacksOutput {
                attack_summaries: self.attack_summaries,
                next_token: self.next_token,
            }
        }
    }
}
impl ListAttacksOutput {
    /// Creates a new builder-style object to manufacture [`ListAttacksOutput`](crate::output::ListAttacksOutput).
    pub fn builder() -> crate::output::list_attacks_output::Builder {
        crate::output::list_attacks_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSubscriptionStateOutput {
    /// <p>The status of the subscription.</p>
    #[doc(hidden)]
    pub subscription_state: std::option::Option<crate::model::SubscriptionState>,
}
impl GetSubscriptionStateOutput {
    /// <p>The status of the subscription.</p>
    pub fn subscription_state(&self) -> std::option::Option<&crate::model::SubscriptionState> {
        self.subscription_state.as_ref()
    }
}
/// See [`GetSubscriptionStateOutput`](crate::output::GetSubscriptionStateOutput).
pub mod get_subscription_state_output {

    /// A builder for [`GetSubscriptionStateOutput`](crate::output::GetSubscriptionStateOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) subscription_state: std::option::Option<crate::model::SubscriptionState>,
    }
    impl Builder {
        /// <p>The status of the subscription.</p>
        pub fn subscription_state(mut self, input: crate::model::SubscriptionState) -> Self {
            self.subscription_state = Some(input);
            self
        }
        /// <p>The status of the subscription.</p>
        pub fn set_subscription_state(
            mut self,
            input: std::option::Option<crate::model::SubscriptionState>,
        ) -> Self {
            self.subscription_state = input;
            self
        }
        /// Consumes the builder and constructs a [`GetSubscriptionStateOutput`](crate::output::GetSubscriptionStateOutput).
        pub fn build(self) -> crate::output::GetSubscriptionStateOutput {
            crate::output::GetSubscriptionStateOutput {
                subscription_state: self.subscription_state,
            }
        }
    }
}
impl GetSubscriptionStateOutput {
    /// Creates a new builder-style object to manufacture [`GetSubscriptionStateOutput`](crate::output::GetSubscriptionStateOutput).
    pub fn builder() -> crate::output::get_subscription_state_output::Builder {
        crate::output::get_subscription_state_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EnableProactiveEngagementOutput {}
/// See [`EnableProactiveEngagementOutput`](crate::output::EnableProactiveEngagementOutput).
pub mod enable_proactive_engagement_output {

    /// A builder for [`EnableProactiveEngagementOutput`](crate::output::EnableProactiveEngagementOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`EnableProactiveEngagementOutput`](crate::output::EnableProactiveEngagementOutput).
        pub fn build(self) -> crate::output::EnableProactiveEngagementOutput {
            crate::output::EnableProactiveEngagementOutput {}
        }
    }
}
impl EnableProactiveEngagementOutput {
    /// Creates a new builder-style object to manufacture [`EnableProactiveEngagementOutput`](crate::output::EnableProactiveEngagementOutput).
    pub fn builder() -> crate::output::enable_proactive_engagement_output::Builder {
        crate::output::enable_proactive_engagement_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EnableApplicationLayerAutomaticResponseOutput {}
/// See [`EnableApplicationLayerAutomaticResponseOutput`](crate::output::EnableApplicationLayerAutomaticResponseOutput).
pub mod enable_application_layer_automatic_response_output {

    /// A builder for [`EnableApplicationLayerAutomaticResponseOutput`](crate::output::EnableApplicationLayerAutomaticResponseOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`EnableApplicationLayerAutomaticResponseOutput`](crate::output::EnableApplicationLayerAutomaticResponseOutput).
        pub fn build(self) -> crate::output::EnableApplicationLayerAutomaticResponseOutput {
            crate::output::EnableApplicationLayerAutomaticResponseOutput {}
        }
    }
}
impl EnableApplicationLayerAutomaticResponseOutput {
    /// Creates a new builder-style object to manufacture [`EnableApplicationLayerAutomaticResponseOutput`](crate::output::EnableApplicationLayerAutomaticResponseOutput).
    pub fn builder() -> crate::output::enable_application_layer_automatic_response_output::Builder {
        crate::output::enable_application_layer_automatic_response_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociateHealthCheckOutput {}
/// See [`DisassociateHealthCheckOutput`](crate::output::DisassociateHealthCheckOutput).
pub mod disassociate_health_check_output {

    /// A builder for [`DisassociateHealthCheckOutput`](crate::output::DisassociateHealthCheckOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DisassociateHealthCheckOutput`](crate::output::DisassociateHealthCheckOutput).
        pub fn build(self) -> crate::output::DisassociateHealthCheckOutput {
            crate::output::DisassociateHealthCheckOutput {}
        }
    }
}
impl DisassociateHealthCheckOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateHealthCheckOutput`](crate::output::DisassociateHealthCheckOutput).
    pub fn builder() -> crate::output::disassociate_health_check_output::Builder {
        crate::output::disassociate_health_check_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociateDrtRoleOutput {}
/// See [`DisassociateDrtRoleOutput`](crate::output::DisassociateDrtRoleOutput).
pub mod disassociate_drt_role_output {

    /// A builder for [`DisassociateDrtRoleOutput`](crate::output::DisassociateDrtRoleOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DisassociateDrtRoleOutput`](crate::output::DisassociateDrtRoleOutput).
        pub fn build(self) -> crate::output::DisassociateDrtRoleOutput {
            crate::output::DisassociateDrtRoleOutput {}
        }
    }
}
impl DisassociateDrtRoleOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateDrtRoleOutput`](crate::output::DisassociateDrtRoleOutput).
    pub fn builder() -> crate::output::disassociate_drt_role_output::Builder {
        crate::output::disassociate_drt_role_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociateDrtLogBucketOutput {}
/// See [`DisassociateDrtLogBucketOutput`](crate::output::DisassociateDrtLogBucketOutput).
pub mod disassociate_drt_log_bucket_output {

    /// A builder for [`DisassociateDrtLogBucketOutput`](crate::output::DisassociateDrtLogBucketOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DisassociateDrtLogBucketOutput`](crate::output::DisassociateDrtLogBucketOutput).
        pub fn build(self) -> crate::output::DisassociateDrtLogBucketOutput {
            crate::output::DisassociateDrtLogBucketOutput {}
        }
    }
}
impl DisassociateDrtLogBucketOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateDrtLogBucketOutput`](crate::output::DisassociateDrtLogBucketOutput).
    pub fn builder() -> crate::output::disassociate_drt_log_bucket_output::Builder {
        crate::output::disassociate_drt_log_bucket_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisableProactiveEngagementOutput {}
/// See [`DisableProactiveEngagementOutput`](crate::output::DisableProactiveEngagementOutput).
pub mod disable_proactive_engagement_output {

    /// A builder for [`DisableProactiveEngagementOutput`](crate::output::DisableProactiveEngagementOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DisableProactiveEngagementOutput`](crate::output::DisableProactiveEngagementOutput).
        pub fn build(self) -> crate::output::DisableProactiveEngagementOutput {
            crate::output::DisableProactiveEngagementOutput {}
        }
    }
}
impl DisableProactiveEngagementOutput {
    /// Creates a new builder-style object to manufacture [`DisableProactiveEngagementOutput`](crate::output::DisableProactiveEngagementOutput).
    pub fn builder() -> crate::output::disable_proactive_engagement_output::Builder {
        crate::output::disable_proactive_engagement_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisableApplicationLayerAutomaticResponseOutput {}
/// See [`DisableApplicationLayerAutomaticResponseOutput`](crate::output::DisableApplicationLayerAutomaticResponseOutput).
pub mod disable_application_layer_automatic_response_output {

    /// A builder for [`DisableApplicationLayerAutomaticResponseOutput`](crate::output::DisableApplicationLayerAutomaticResponseOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DisableApplicationLayerAutomaticResponseOutput`](crate::output::DisableApplicationLayerAutomaticResponseOutput).
        pub fn build(self) -> crate::output::DisableApplicationLayerAutomaticResponseOutput {
            crate::output::DisableApplicationLayerAutomaticResponseOutput {}
        }
    }
}
impl DisableApplicationLayerAutomaticResponseOutput {
    /// Creates a new builder-style object to manufacture [`DisableApplicationLayerAutomaticResponseOutput`](crate::output::DisableApplicationLayerAutomaticResponseOutput).
    pub fn builder() -> crate::output::disable_application_layer_automatic_response_output::Builder
    {
        crate::output::disable_application_layer_automatic_response_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeSubscriptionOutput {
    /// <p>The Shield Advanced subscription details for an account.</p>
    #[doc(hidden)]
    pub subscription: std::option::Option<crate::model::Subscription>,
}
impl DescribeSubscriptionOutput {
    /// <p>The Shield Advanced subscription details for an account.</p>
    pub fn subscription(&self) -> std::option::Option<&crate::model::Subscription> {
        self.subscription.as_ref()
    }
}
/// See [`DescribeSubscriptionOutput`](crate::output::DescribeSubscriptionOutput).
pub mod describe_subscription_output {

    /// A builder for [`DescribeSubscriptionOutput`](crate::output::DescribeSubscriptionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) subscription: std::option::Option<crate::model::Subscription>,
    }
    impl Builder {
        /// <p>The Shield Advanced subscription details for an account.</p>
        pub fn subscription(mut self, input: crate::model::Subscription) -> Self {
            self.subscription = Some(input);
            self
        }
        /// <p>The Shield Advanced subscription details for an account.</p>
        pub fn set_subscription(
            mut self,
            input: std::option::Option<crate::model::Subscription>,
        ) -> Self {
            self.subscription = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeSubscriptionOutput`](crate::output::DescribeSubscriptionOutput).
        pub fn build(self) -> crate::output::DescribeSubscriptionOutput {
            crate::output::DescribeSubscriptionOutput {
                subscription: self.subscription,
            }
        }
    }
}
impl DescribeSubscriptionOutput {
    /// Creates a new builder-style object to manufacture [`DescribeSubscriptionOutput`](crate::output::DescribeSubscriptionOutput).
    pub fn builder() -> crate::output::describe_subscription_output::Builder {
        crate::output::describe_subscription_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeProtectionGroupOutput {
    /// <p>A grouping of protected resources that you and Shield Advanced can monitor as a collective. This resource grouping improves the accuracy of detection and reduces false positives. </p>
    #[doc(hidden)]
    pub protection_group: std::option::Option<crate::model::ProtectionGroup>,
}
impl DescribeProtectionGroupOutput {
    /// <p>A grouping of protected resources that you and Shield Advanced can monitor as a collective. This resource grouping improves the accuracy of detection and reduces false positives. </p>
    pub fn protection_group(&self) -> std::option::Option<&crate::model::ProtectionGroup> {
        self.protection_group.as_ref()
    }
}
/// See [`DescribeProtectionGroupOutput`](crate::output::DescribeProtectionGroupOutput).
pub mod describe_protection_group_output {

    /// A builder for [`DescribeProtectionGroupOutput`](crate::output::DescribeProtectionGroupOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) protection_group: std::option::Option<crate::model::ProtectionGroup>,
    }
    impl Builder {
        /// <p>A grouping of protected resources that you and Shield Advanced can monitor as a collective. This resource grouping improves the accuracy of detection and reduces false positives. </p>
        pub fn protection_group(mut self, input: crate::model::ProtectionGroup) -> Self {
            self.protection_group = Some(input);
            self
        }
        /// <p>A grouping of protected resources that you and Shield Advanced can monitor as a collective. This resource grouping improves the accuracy of detection and reduces false positives. </p>
        pub fn set_protection_group(
            mut self,
            input: std::option::Option<crate::model::ProtectionGroup>,
        ) -> Self {
            self.protection_group = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeProtectionGroupOutput`](crate::output::DescribeProtectionGroupOutput).
        pub fn build(self) -> crate::output::DescribeProtectionGroupOutput {
            crate::output::DescribeProtectionGroupOutput {
                protection_group: self.protection_group,
            }
        }
    }
}
impl DescribeProtectionGroupOutput {
    /// Creates a new builder-style object to manufacture [`DescribeProtectionGroupOutput`](crate::output::DescribeProtectionGroupOutput).
    pub fn builder() -> crate::output::describe_protection_group_output::Builder {
        crate::output::describe_protection_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeProtectionOutput {
    /// <p>The <code>Protection</code> that you requested. </p>
    #[doc(hidden)]
    pub protection: std::option::Option<crate::model::Protection>,
}
impl DescribeProtectionOutput {
    /// <p>The <code>Protection</code> that you requested. </p>
    pub fn protection(&self) -> std::option::Option<&crate::model::Protection> {
        self.protection.as_ref()
    }
}
/// See [`DescribeProtectionOutput`](crate::output::DescribeProtectionOutput).
pub mod describe_protection_output {

    /// A builder for [`DescribeProtectionOutput`](crate::output::DescribeProtectionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) protection: std::option::Option<crate::model::Protection>,
    }
    impl Builder {
        /// <p>The <code>Protection</code> that you requested. </p>
        pub fn protection(mut self, input: crate::model::Protection) -> Self {
            self.protection = Some(input);
            self
        }
        /// <p>The <code>Protection</code> that you requested. </p>
        pub fn set_protection(
            mut self,
            input: std::option::Option<crate::model::Protection>,
        ) -> Self {
            self.protection = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeProtectionOutput`](crate::output::DescribeProtectionOutput).
        pub fn build(self) -> crate::output::DescribeProtectionOutput {
            crate::output::DescribeProtectionOutput {
                protection: self.protection,
            }
        }
    }
}
impl DescribeProtectionOutput {
    /// Creates a new builder-style object to manufacture [`DescribeProtectionOutput`](crate::output::DescribeProtectionOutput).
    pub fn builder() -> crate::output::describe_protection_output::Builder {
        crate::output::describe_protection_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeEmergencyContactSettingsOutput {
    /// <p>A list of email addresses and phone numbers that the Shield Response Team (SRT) can use to contact you if you have proactive engagement enabled, for escalations to the SRT and to initiate proactive customer support.</p>
    #[doc(hidden)]
    pub emergency_contact_list: std::option::Option<std::vec::Vec<crate::model::EmergencyContact>>,
}
impl DescribeEmergencyContactSettingsOutput {
    /// <p>A list of email addresses and phone numbers that the Shield Response Team (SRT) can use to contact you if you have proactive engagement enabled, for escalations to the SRT and to initiate proactive customer support.</p>
    pub fn emergency_contact_list(&self) -> std::option::Option<&[crate::model::EmergencyContact]> {
        self.emergency_contact_list.as_deref()
    }
}
/// See [`DescribeEmergencyContactSettingsOutput`](crate::output::DescribeEmergencyContactSettingsOutput).
pub mod describe_emergency_contact_settings_output {

    /// A builder for [`DescribeEmergencyContactSettingsOutput`](crate::output::DescribeEmergencyContactSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) emergency_contact_list:
            std::option::Option<std::vec::Vec<crate::model::EmergencyContact>>,
    }
    impl Builder {
        /// Appends an item to `emergency_contact_list`.
        ///
        /// To override the contents of this collection use [`set_emergency_contact_list`](Self::set_emergency_contact_list).
        ///
        /// <p>A list of email addresses and phone numbers that the Shield Response Team (SRT) can use to contact you if you have proactive engagement enabled, for escalations to the SRT and to initiate proactive customer support.</p>
        pub fn emergency_contact_list(mut self, input: crate::model::EmergencyContact) -> Self {
            let mut v = self.emergency_contact_list.unwrap_or_default();
            v.push(input);
            self.emergency_contact_list = Some(v);
            self
        }
        /// <p>A list of email addresses and phone numbers that the Shield Response Team (SRT) can use to contact you if you have proactive engagement enabled, for escalations to the SRT and to initiate proactive customer support.</p>
        pub fn set_emergency_contact_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EmergencyContact>>,
        ) -> Self {
            self.emergency_contact_list = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeEmergencyContactSettingsOutput`](crate::output::DescribeEmergencyContactSettingsOutput).
        pub fn build(self) -> crate::output::DescribeEmergencyContactSettingsOutput {
            crate::output::DescribeEmergencyContactSettingsOutput {
                emergency_contact_list: self.emergency_contact_list,
            }
        }
    }
}
impl DescribeEmergencyContactSettingsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeEmergencyContactSettingsOutput`](crate::output::DescribeEmergencyContactSettingsOutput).
    pub fn builder() -> crate::output::describe_emergency_contact_settings_output::Builder {
        crate::output::describe_emergency_contact_settings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeDrtAccessOutput {
    /// <p>The Amazon Resource Name (ARN) of the role the SRT used to access your Amazon Web Services account.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The list of Amazon S3 buckets accessed by the SRT.</p>
    #[doc(hidden)]
    pub log_bucket_list: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl DescribeDrtAccessOutput {
    /// <p>The Amazon Resource Name (ARN) of the role the SRT used to access your Amazon Web Services account.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The list of Amazon S3 buckets accessed by the SRT.</p>
    pub fn log_bucket_list(&self) -> std::option::Option<&[std::string::String]> {
        self.log_bucket_list.as_deref()
    }
}
/// See [`DescribeDrtAccessOutput`](crate::output::DescribeDrtAccessOutput).
pub mod describe_drt_access_output {

    /// A builder for [`DescribeDrtAccessOutput`](crate::output::DescribeDrtAccessOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) role_arn: std::option::Option<std::string::String>,
        pub(crate) log_bucket_list: std::option::Option<std::vec::Vec<std::string::String>>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the role the SRT used to access your Amazon Web Services account.</p>
        pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.role_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the role the SRT used to access your Amazon Web Services account.</p>
        pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.role_arn = input;
            self
        }
        /// Appends an item to `log_bucket_list`.
        ///
        /// To override the contents of this collection use [`set_log_bucket_list`](Self::set_log_bucket_list).
        ///
        /// <p>The list of Amazon S3 buckets accessed by the SRT.</p>
        pub fn log_bucket_list(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.log_bucket_list.unwrap_or_default();
            v.push(input.into());
            self.log_bucket_list = Some(v);
            self
        }
        /// <p>The list of Amazon S3 buckets accessed by the SRT.</p>
        pub fn set_log_bucket_list(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.log_bucket_list = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDrtAccessOutput`](crate::output::DescribeDrtAccessOutput).
        pub fn build(self) -> crate::output::DescribeDrtAccessOutput {
            crate::output::DescribeDrtAccessOutput {
                role_arn: self.role_arn,
                log_bucket_list: self.log_bucket_list,
            }
        }
    }
}
impl DescribeDrtAccessOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDrtAccessOutput`](crate::output::DescribeDrtAccessOutput).
    pub fn builder() -> crate::output::describe_drt_access_output::Builder {
        crate::output::describe_drt_access_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeAttackStatisticsOutput {
    /// <p>The time range of the attack.</p>
    #[doc(hidden)]
    pub time_range: std::option::Option<crate::model::TimeRange>,
    /// <p>The data that describes the attacks detected during the time period.</p>
    #[doc(hidden)]
    pub data_items: std::option::Option<std::vec::Vec<crate::model::AttackStatisticsDataItem>>,
}
impl DescribeAttackStatisticsOutput {
    /// <p>The time range of the attack.</p>
    pub fn time_range(&self) -> std::option::Option<&crate::model::TimeRange> {
        self.time_range.as_ref()
    }
    /// <p>The data that describes the attacks detected during the time period.</p>
    pub fn data_items(&self) -> std::option::Option<&[crate::model::AttackStatisticsDataItem]> {
        self.data_items.as_deref()
    }
}
/// See [`DescribeAttackStatisticsOutput`](crate::output::DescribeAttackStatisticsOutput).
pub mod describe_attack_statistics_output {

    /// A builder for [`DescribeAttackStatisticsOutput`](crate::output::DescribeAttackStatisticsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) time_range: std::option::Option<crate::model::TimeRange>,
        pub(crate) data_items:
            std::option::Option<std::vec::Vec<crate::model::AttackStatisticsDataItem>>,
    }
    impl Builder {
        /// <p>The time range of the attack.</p>
        pub fn time_range(mut self, input: crate::model::TimeRange) -> Self {
            self.time_range = Some(input);
            self
        }
        /// <p>The time range of the attack.</p>
        pub fn set_time_range(
            mut self,
            input: std::option::Option<crate::model::TimeRange>,
        ) -> Self {
            self.time_range = input;
            self
        }
        /// Appends an item to `data_items`.
        ///
        /// To override the contents of this collection use [`set_data_items`](Self::set_data_items).
        ///
        /// <p>The data that describes the attacks detected during the time period.</p>
        pub fn data_items(mut self, input: crate::model::AttackStatisticsDataItem) -> Self {
            let mut v = self.data_items.unwrap_or_default();
            v.push(input);
            self.data_items = Some(v);
            self
        }
        /// <p>The data that describes the attacks detected during the time period.</p>
        pub fn set_data_items(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AttackStatisticsDataItem>>,
        ) -> Self {
            self.data_items = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAttackStatisticsOutput`](crate::output::DescribeAttackStatisticsOutput).
        pub fn build(self) -> crate::output::DescribeAttackStatisticsOutput {
            crate::output::DescribeAttackStatisticsOutput {
                time_range: self.time_range,
                data_items: self.data_items,
            }
        }
    }
}
impl DescribeAttackStatisticsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAttackStatisticsOutput`](crate::output::DescribeAttackStatisticsOutput).
    pub fn builder() -> crate::output::describe_attack_statistics_output::Builder {
        crate::output::describe_attack_statistics_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeAttackOutput {
    /// <p>The attack that you requested. </p>
    #[doc(hidden)]
    pub attack: std::option::Option<crate::model::AttackDetail>,
}
impl DescribeAttackOutput {
    /// <p>The attack that you requested. </p>
    pub fn attack(&self) -> std::option::Option<&crate::model::AttackDetail> {
        self.attack.as_ref()
    }
}
/// See [`DescribeAttackOutput`](crate::output::DescribeAttackOutput).
pub mod describe_attack_output {

    /// A builder for [`DescribeAttackOutput`](crate::output::DescribeAttackOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) attack: std::option::Option<crate::model::AttackDetail>,
    }
    impl Builder {
        /// <p>The attack that you requested. </p>
        pub fn attack(mut self, input: crate::model::AttackDetail) -> Self {
            self.attack = Some(input);
            self
        }
        /// <p>The attack that you requested. </p>
        pub fn set_attack(
            mut self,
            input: std::option::Option<crate::model::AttackDetail>,
        ) -> Self {
            self.attack = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAttackOutput`](crate::output::DescribeAttackOutput).
        pub fn build(self) -> crate::output::DescribeAttackOutput {
            crate::output::DescribeAttackOutput {
                attack: self.attack,
            }
        }
    }
}
impl DescribeAttackOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAttackOutput`](crate::output::DescribeAttackOutput).
    pub fn builder() -> crate::output::describe_attack_output::Builder {
        crate::output::describe_attack_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[deprecated]
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteSubscriptionOutput {}
/// See [`DeleteSubscriptionOutput`](crate::output::DeleteSubscriptionOutput).
pub mod delete_subscription_output {

    /// A builder for [`DeleteSubscriptionOutput`](crate::output::DeleteSubscriptionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteSubscriptionOutput`](crate::output::DeleteSubscriptionOutput).
        pub fn build(self) -> crate::output::DeleteSubscriptionOutput {
            crate::output::DeleteSubscriptionOutput {}
        }
    }
}
impl DeleteSubscriptionOutput {
    /// Creates a new builder-style object to manufacture [`DeleteSubscriptionOutput`](crate::output::DeleteSubscriptionOutput).
    pub fn builder() -> crate::output::delete_subscription_output::Builder {
        crate::output::delete_subscription_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteProtectionGroupOutput {}
/// See [`DeleteProtectionGroupOutput`](crate::output::DeleteProtectionGroupOutput).
pub mod delete_protection_group_output {

    /// A builder for [`DeleteProtectionGroupOutput`](crate::output::DeleteProtectionGroupOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteProtectionGroupOutput`](crate::output::DeleteProtectionGroupOutput).
        pub fn build(self) -> crate::output::DeleteProtectionGroupOutput {
            crate::output::DeleteProtectionGroupOutput {}
        }
    }
}
impl DeleteProtectionGroupOutput {
    /// Creates a new builder-style object to manufacture [`DeleteProtectionGroupOutput`](crate::output::DeleteProtectionGroupOutput).
    pub fn builder() -> crate::output::delete_protection_group_output::Builder {
        crate::output::delete_protection_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteProtectionOutput {}
/// See [`DeleteProtectionOutput`](crate::output::DeleteProtectionOutput).
pub mod delete_protection_output {

    /// A builder for [`DeleteProtectionOutput`](crate::output::DeleteProtectionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteProtectionOutput`](crate::output::DeleteProtectionOutput).
        pub fn build(self) -> crate::output::DeleteProtectionOutput {
            crate::output::DeleteProtectionOutput {}
        }
    }
}
impl DeleteProtectionOutput {
    /// Creates a new builder-style object to manufacture [`DeleteProtectionOutput`](crate::output::DeleteProtectionOutput).
    pub fn builder() -> crate::output::delete_protection_output::Builder {
        crate::output::delete_protection_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateSubscriptionOutput {}
/// See [`CreateSubscriptionOutput`](crate::output::CreateSubscriptionOutput).
pub mod create_subscription_output {

    /// A builder for [`CreateSubscriptionOutput`](crate::output::CreateSubscriptionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`CreateSubscriptionOutput`](crate::output::CreateSubscriptionOutput).
        pub fn build(self) -> crate::output::CreateSubscriptionOutput {
            crate::output::CreateSubscriptionOutput {}
        }
    }
}
impl CreateSubscriptionOutput {
    /// Creates a new builder-style object to manufacture [`CreateSubscriptionOutput`](crate::output::CreateSubscriptionOutput).
    pub fn builder() -> crate::output::create_subscription_output::Builder {
        crate::output::create_subscription_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateProtectionGroupOutput {}
/// See [`CreateProtectionGroupOutput`](crate::output::CreateProtectionGroupOutput).
pub mod create_protection_group_output {

    /// A builder for [`CreateProtectionGroupOutput`](crate::output::CreateProtectionGroupOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`CreateProtectionGroupOutput`](crate::output::CreateProtectionGroupOutput).
        pub fn build(self) -> crate::output::CreateProtectionGroupOutput {
            crate::output::CreateProtectionGroupOutput {}
        }
    }
}
impl CreateProtectionGroupOutput {
    /// Creates a new builder-style object to manufacture [`CreateProtectionGroupOutput`](crate::output::CreateProtectionGroupOutput).
    pub fn builder() -> crate::output::create_protection_group_output::Builder {
        crate::output::create_protection_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateProtectionOutput {
    /// <p>The unique identifier (ID) for the <code>Protection</code> object that is created.</p>
    #[doc(hidden)]
    pub protection_id: std::option::Option<std::string::String>,
}
impl CreateProtectionOutput {
    /// <p>The unique identifier (ID) for the <code>Protection</code> object that is created.</p>
    pub fn protection_id(&self) -> std::option::Option<&str> {
        self.protection_id.as_deref()
    }
}
/// See [`CreateProtectionOutput`](crate::output::CreateProtectionOutput).
pub mod create_protection_output {

    /// A builder for [`CreateProtectionOutput`](crate::output::CreateProtectionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) protection_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The unique identifier (ID) for the <code>Protection</code> object that is created.</p>
        pub fn protection_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.protection_id = Some(input.into());
            self
        }
        /// <p>The unique identifier (ID) for the <code>Protection</code> object that is created.</p>
        pub fn set_protection_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.protection_id = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateProtectionOutput`](crate::output::CreateProtectionOutput).
        pub fn build(self) -> crate::output::CreateProtectionOutput {
            crate::output::CreateProtectionOutput {
                protection_id: self.protection_id,
            }
        }
    }
}
impl CreateProtectionOutput {
    /// Creates a new builder-style object to manufacture [`CreateProtectionOutput`](crate::output::CreateProtectionOutput).
    pub fn builder() -> crate::output::create_protection_output::Builder {
        crate::output::create_protection_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociateProactiveEngagementDetailsOutput {}
/// See [`AssociateProactiveEngagementDetailsOutput`](crate::output::AssociateProactiveEngagementDetailsOutput).
pub mod associate_proactive_engagement_details_output {

    /// A builder for [`AssociateProactiveEngagementDetailsOutput`](crate::output::AssociateProactiveEngagementDetailsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`AssociateProactiveEngagementDetailsOutput`](crate::output::AssociateProactiveEngagementDetailsOutput).
        pub fn build(self) -> crate::output::AssociateProactiveEngagementDetailsOutput {
            crate::output::AssociateProactiveEngagementDetailsOutput {}
        }
    }
}
impl AssociateProactiveEngagementDetailsOutput {
    /// Creates a new builder-style object to manufacture [`AssociateProactiveEngagementDetailsOutput`](crate::output::AssociateProactiveEngagementDetailsOutput).
    pub fn builder() -> crate::output::associate_proactive_engagement_details_output::Builder {
        crate::output::associate_proactive_engagement_details_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociateHealthCheckOutput {}
/// See [`AssociateHealthCheckOutput`](crate::output::AssociateHealthCheckOutput).
pub mod associate_health_check_output {

    /// A builder for [`AssociateHealthCheckOutput`](crate::output::AssociateHealthCheckOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`AssociateHealthCheckOutput`](crate::output::AssociateHealthCheckOutput).
        pub fn build(self) -> crate::output::AssociateHealthCheckOutput {
            crate::output::AssociateHealthCheckOutput {}
        }
    }
}
impl AssociateHealthCheckOutput {
    /// Creates a new builder-style object to manufacture [`AssociateHealthCheckOutput`](crate::output::AssociateHealthCheckOutput).
    pub fn builder() -> crate::output::associate_health_check_output::Builder {
        crate::output::associate_health_check_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociateDrtRoleOutput {}
/// See [`AssociateDrtRoleOutput`](crate::output::AssociateDrtRoleOutput).
pub mod associate_drt_role_output {

    /// A builder for [`AssociateDrtRoleOutput`](crate::output::AssociateDrtRoleOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`AssociateDrtRoleOutput`](crate::output::AssociateDrtRoleOutput).
        pub fn build(self) -> crate::output::AssociateDrtRoleOutput {
            crate::output::AssociateDrtRoleOutput {}
        }
    }
}
impl AssociateDrtRoleOutput {
    /// Creates a new builder-style object to manufacture [`AssociateDrtRoleOutput`](crate::output::AssociateDrtRoleOutput).
    pub fn builder() -> crate::output::associate_drt_role_output::Builder {
        crate::output::associate_drt_role_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociateDrtLogBucketOutput {}
/// See [`AssociateDrtLogBucketOutput`](crate::output::AssociateDrtLogBucketOutput).
pub mod associate_drt_log_bucket_output {

    /// A builder for [`AssociateDrtLogBucketOutput`](crate::output::AssociateDrtLogBucketOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`AssociateDrtLogBucketOutput`](crate::output::AssociateDrtLogBucketOutput).
        pub fn build(self) -> crate::output::AssociateDrtLogBucketOutput {
            crate::output::AssociateDrtLogBucketOutput {}
        }
    }
}
impl AssociateDrtLogBucketOutput {
    /// Creates a new builder-style object to manufacture [`AssociateDrtLogBucketOutput`](crate::output::AssociateDrtLogBucketOutput).
    pub fn builder() -> crate::output::associate_drt_log_bucket_output::Builder {
        crate::output::associate_drt_log_bucket_output::Builder::default()
    }
}
