// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::associate_drt_log_bucket::_associate_drt_log_bucket_output::AssociateDrtLogBucketOutputBuilder;

pub use crate::operation::associate_drt_log_bucket::_associate_drt_log_bucket_input::AssociateDrtLogBucketInputBuilder;

impl crate::operation::associate_drt_log_bucket::builders::AssociateDrtLogBucketInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::associate_drt_log_bucket::AssociateDrtLogBucketOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_drt_log_bucket::AssociateDRTLogBucketError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.associate_drt_log_bucket();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `AssociateDRTLogBucket`.
///
/// <p>Authorizes the Shield Response Team (SRT) to access the specified Amazon S3 bucket containing log data such as Application Load Balancer access logs, CloudFront logs, or logs from third party sources. You can associate up to 10 Amazon S3 buckets with your subscription.</p>
/// <p>To use the services of the SRT and make an <code>AssociateDRTLogBucket</code> request, you must be subscribed to the <a href="http://aws.amazon.com/premiumsupport/business-support/">Business Support plan</a> or the <a href="http://aws.amazon.com/premiumsupport/enterprise-support/">Enterprise Support plan</a>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct AssociateDRTLogBucketFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::associate_drt_log_bucket::builders::AssociateDrtLogBucketInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::associate_drt_log_bucket::AssociateDrtLogBucketOutput,
        crate::operation::associate_drt_log_bucket::AssociateDRTLogBucketError,
    > for AssociateDRTLogBucketFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::associate_drt_log_bucket::AssociateDrtLogBucketOutput,
            crate::operation::associate_drt_log_bucket::AssociateDRTLogBucketError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl AssociateDRTLogBucketFluentBuilder {
    /// Creates a new `AssociateDRTLogBucket`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the AssociateDRTLogBucket as a reference.
    pub fn as_input(&self) -> &crate::operation::associate_drt_log_bucket::builders::AssociateDrtLogBucketInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::associate_drt_log_bucket::AssociateDrtLogBucketOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_drt_log_bucket::AssociateDRTLogBucketError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::associate_drt_log_bucket::AssociateDRTLogBucket::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::associate_drt_log_bucket::AssociateDRTLogBucket::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::associate_drt_log_bucket::AssociateDrtLogBucketOutput,
        crate::operation::associate_drt_log_bucket::AssociateDRTLogBucketError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The Amazon S3 bucket that contains the logs that you want to share.</p>
    pub fn log_bucket(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.log_bucket(input.into());
        self
    }
    /// <p>The Amazon S3 bucket that contains the logs that you want to share.</p>
    pub fn set_log_bucket(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_log_bucket(input);
        self
    }
    /// <p>The Amazon S3 bucket that contains the logs that you want to share.</p>
    pub fn get_log_bucket(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_log_bucket()
    }
}
