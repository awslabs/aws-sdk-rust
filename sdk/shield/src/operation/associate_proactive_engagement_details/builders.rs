// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::associate_proactive_engagement_details::_associate_proactive_engagement_details_output::AssociateProactiveEngagementDetailsOutputBuilder;

pub use crate::operation::associate_proactive_engagement_details::_associate_proactive_engagement_details_input::AssociateProactiveEngagementDetailsInputBuilder;

/// Fluent builder constructing a request to `AssociateProactiveEngagementDetails`.
///
/// <p>Initializes proactive engagement and sets the list of contacts for the Shield Response Team (SRT) to use. You must provide at least one phone number in the emergency contact list. </p>
/// <p>After you have initialized proactive engagement using this call, to disable or enable proactive engagement, use the calls <code>DisableProactiveEngagement</code> and <code>EnableProactiveEngagement</code>. </p> <note>
/// <p>This call defines the list of email addresses and phone numbers that the SRT can use to contact you for escalations to the SRT and to initiate proactive customer support.</p>
/// <p>The contacts that you provide in the request replace any contacts that were already defined. If you already have contacts defined and want to use them, retrieve the list using <code>DescribeEmergencyContactSettings</code> and then provide it to this call. </p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct AssociateProactiveEngagementDetailsFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::associate_proactive_engagement_details::builders::AssociateProactiveEngagementDetailsInputBuilder
            }
impl AssociateProactiveEngagementDetailsFluentBuilder {
    /// Creates a new `AssociateProactiveEngagementDetails`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::associate_proactive_engagement_details::AssociateProactiveEngagementDetails, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::associate_proactive_engagement_details::AssociateProactiveEngagementDetailsError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::associate_proactive_engagement_details::AssociateProactiveEngagementDetailsOutput, aws_smithy_http::result::SdkError<crate::operation::associate_proactive_engagement_details::AssociateProactiveEngagementDetailsError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `EmergencyContactList`.
    ///
    /// To override the contents of this collection use [`set_emergency_contact_list`](Self::set_emergency_contact_list).
    ///
    /// <p>A list of email addresses and phone numbers that the Shield Response Team (SRT) can use to contact you for escalations to the SRT and to initiate proactive customer support. </p>
    /// <p>To enable proactive engagement, the contact list must include at least one phone number.</p> <note>
    /// <p>The contacts that you provide here replace any contacts that were already defined. If you already have contacts defined and want to use them, retrieve the list using <code>DescribeEmergencyContactSettings</code> and then provide it here. </p>
    /// </note>
    pub fn emergency_contact_list(mut self, input: crate::types::EmergencyContact) -> Self {
        self.inner = self.inner.emergency_contact_list(input);
        self
    }
    /// <p>A list of email addresses and phone numbers that the Shield Response Team (SRT) can use to contact you for escalations to the SRT and to initiate proactive customer support. </p>
    /// <p>To enable proactive engagement, the contact list must include at least one phone number.</p> <note>
    /// <p>The contacts that you provide here replace any contacts that were already defined. If you already have contacts defined and want to use them, retrieve the list using <code>DescribeEmergencyContactSettings</code> and then provide it here. </p>
    /// </note>
    pub fn set_emergency_contact_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::EmergencyContact>>,
    ) -> Self {
        self.inner = self.inner.set_emergency_contact_list(input);
        self
    }
}
