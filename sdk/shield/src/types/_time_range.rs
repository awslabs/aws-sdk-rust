// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The time range. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TimeRange {
    /// <p>The start time, in Unix time in seconds. </p>
    #[doc(hidden)]
    pub from_inclusive: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The end time, in Unix time in seconds. </p>
    #[doc(hidden)]
    pub to_exclusive: std::option::Option<aws_smithy_types::DateTime>,
}
impl TimeRange {
    /// <p>The start time, in Unix time in seconds. </p>
    pub fn from_inclusive(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.from_inclusive.as_ref()
    }
    /// <p>The end time, in Unix time in seconds. </p>
    pub fn to_exclusive(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.to_exclusive.as_ref()
    }
}
impl TimeRange {
    /// Creates a new builder-style object to manufacture [`TimeRange`](crate::types::TimeRange).
    pub fn builder() -> crate::types::builders::TimeRangeBuilder {
        crate::types::builders::TimeRangeBuilder::default()
    }
}

/// A builder for [`TimeRange`](crate::types::TimeRange).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TimeRangeBuilder {
    pub(crate) from_inclusive: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) to_exclusive: std::option::Option<aws_smithy_types::DateTime>,
}
impl TimeRangeBuilder {
    /// <p>The start time, in Unix time in seconds. </p>
    pub fn from_inclusive(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.from_inclusive = Some(input);
        self
    }
    /// <p>The start time, in Unix time in seconds. </p>
    pub fn set_from_inclusive(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.from_inclusive = input;
        self
    }
    /// <p>The end time, in Unix time in seconds. </p>
    pub fn to_exclusive(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.to_exclusive = Some(input);
        self
    }
    /// <p>The end time, in Unix time in seconds. </p>
    pub fn set_to_exclusive(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.to_exclusive = input;
        self
    }
    /// Consumes the builder and constructs a [`TimeRange`](crate::types::TimeRange).
    pub fn build(self) -> crate::types::TimeRange {
        crate::types::TimeRange {
            from_inclusive: self.from_inclusive,
            to_exclusive: self.to_exclusive,
        }
    }
}
