// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Limits settings on protection groups with arbitrary pattern type. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProtectionGroupArbitraryPatternLimits {
    /// <p>The maximum number of resources you can specify for a single arbitrary pattern in a protection group.</p>
    pub max_members: i64,
}
impl ProtectionGroupArbitraryPatternLimits {
    /// <p>The maximum number of resources you can specify for a single arbitrary pattern in a protection group.</p>
    pub fn max_members(&self) -> i64 {
        self.max_members
    }
}
impl ProtectionGroupArbitraryPatternLimits {
    /// Creates a new builder-style object to manufacture [`ProtectionGroupArbitraryPatternLimits`](crate::types::ProtectionGroupArbitraryPatternLimits).
    pub fn builder() -> crate::types::builders::ProtectionGroupArbitraryPatternLimitsBuilder {
        crate::types::builders::ProtectionGroupArbitraryPatternLimitsBuilder::default()
    }
}

/// A builder for [`ProtectionGroupArbitraryPatternLimits`](crate::types::ProtectionGroupArbitraryPatternLimits).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ProtectionGroupArbitraryPatternLimitsBuilder {
    pub(crate) max_members: ::std::option::Option<i64>,
}
impl ProtectionGroupArbitraryPatternLimitsBuilder {
    /// <p>The maximum number of resources you can specify for a single arbitrary pattern in a protection group.</p>
    /// This field is required.
    pub fn max_members(mut self, input: i64) -> Self {
        self.max_members = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of resources you can specify for a single arbitrary pattern in a protection group.</p>
    pub fn set_max_members(mut self, input: ::std::option::Option<i64>) -> Self {
        self.max_members = input;
        self
    }
    /// <p>The maximum number of resources you can specify for a single arbitrary pattern in a protection group.</p>
    pub fn get_max_members(&self) -> &::std::option::Option<i64> {
        &self.max_members
    }
    /// Consumes the builder and constructs a [`ProtectionGroupArbitraryPatternLimits`](crate::types::ProtectionGroupArbitraryPatternLimits).
    pub fn build(self) -> crate::types::ProtectionGroupArbitraryPatternLimits {
        crate::types::ProtectionGroupArbitraryPatternLimits {
            max_members: self.max_members.unwrap_or_default(),
        }
    }
}
