// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Statistics objects for the various data types in <code>AttackVolume</code>. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AttackVolumeStatistics {
    /// <p>The maximum attack volume observed for the given unit.</p>
    pub max: f64,
}
impl AttackVolumeStatistics {
    /// <p>The maximum attack volume observed for the given unit.</p>
    pub fn max(&self) -> f64 {
        self.max
    }
}
impl AttackVolumeStatistics {
    /// Creates a new builder-style object to manufacture [`AttackVolumeStatistics`](crate::types::AttackVolumeStatistics).
    pub fn builder() -> crate::types::builders::AttackVolumeStatisticsBuilder {
        crate::types::builders::AttackVolumeStatisticsBuilder::default()
    }
}

/// A builder for [`AttackVolumeStatistics`](crate::types::AttackVolumeStatistics).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AttackVolumeStatisticsBuilder {
    pub(crate) max: ::std::option::Option<f64>,
}
impl AttackVolumeStatisticsBuilder {
    /// <p>The maximum attack volume observed for the given unit.</p>
    /// This field is required.
    pub fn max(mut self, input: f64) -> Self {
        self.max = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum attack volume observed for the given unit.</p>
    pub fn set_max(mut self, input: ::std::option::Option<f64>) -> Self {
        self.max = input;
        self
    }
    /// <p>The maximum attack volume observed for the given unit.</p>
    pub fn get_max(&self) -> &::std::option::Option<f64> {
        &self.max
    }
    /// Consumes the builder and constructs a [`AttackVolumeStatistics`](crate::types::AttackVolumeStatistics).
    pub fn build(self) -> crate::types::AttackVolumeStatistics {
        crate::types::AttackVolumeStatistics {
            max: self.max.unwrap_or_default(),
        }
    }
}
