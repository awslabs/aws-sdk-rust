// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the attack.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AttackVectorDescription {
    /// <p>The attack type. Valid values:</p>
    /// <ul>
    /// <li> <p>UDP_TRAFFIC</p> </li>
    /// <li> <p>UDP_FRAGMENT</p> </li>
    /// <li> <p>GENERIC_UDP_REFLECTION</p> </li>
    /// <li> <p>DNS_REFLECTION</p> </li>
    /// <li> <p>NTP_REFLECTION</p> </li>
    /// <li> <p>CHARGEN_REFLECTION</p> </li>
    /// <li> <p>SSDP_REFLECTION</p> </li>
    /// <li> <p>PORT_MAPPER</p> </li>
    /// <li> <p>RIP_REFLECTION</p> </li>
    /// <li> <p>SNMP_REFLECTION</p> </li>
    /// <li> <p>MSSQL_REFLECTION</p> </li>
    /// <li> <p>NET_BIOS_REFLECTION</p> </li>
    /// <li> <p>SYN_FLOOD</p> </li>
    /// <li> <p>ACK_FLOOD</p> </li>
    /// <li> <p>REQUEST_FLOOD</p> </li>
    /// <li> <p>HTTP_REFLECTION</p> </li>
    /// <li> <p>UDS_REFLECTION</p> </li>
    /// <li> <p>MEMCACHED_REFLECTION</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub vector_type: std::option::Option<std::string::String>,
}
impl AttackVectorDescription {
    /// <p>The attack type. Valid values:</p>
    /// <ul>
    /// <li> <p>UDP_TRAFFIC</p> </li>
    /// <li> <p>UDP_FRAGMENT</p> </li>
    /// <li> <p>GENERIC_UDP_REFLECTION</p> </li>
    /// <li> <p>DNS_REFLECTION</p> </li>
    /// <li> <p>NTP_REFLECTION</p> </li>
    /// <li> <p>CHARGEN_REFLECTION</p> </li>
    /// <li> <p>SSDP_REFLECTION</p> </li>
    /// <li> <p>PORT_MAPPER</p> </li>
    /// <li> <p>RIP_REFLECTION</p> </li>
    /// <li> <p>SNMP_REFLECTION</p> </li>
    /// <li> <p>MSSQL_REFLECTION</p> </li>
    /// <li> <p>NET_BIOS_REFLECTION</p> </li>
    /// <li> <p>SYN_FLOOD</p> </li>
    /// <li> <p>ACK_FLOOD</p> </li>
    /// <li> <p>REQUEST_FLOOD</p> </li>
    /// <li> <p>HTTP_REFLECTION</p> </li>
    /// <li> <p>UDS_REFLECTION</p> </li>
    /// <li> <p>MEMCACHED_REFLECTION</p> </li>
    /// </ul>
    pub fn vector_type(&self) -> std::option::Option<&str> {
        self.vector_type.as_deref()
    }
}
impl AttackVectorDescription {
    /// Creates a new builder-style object to manufacture [`AttackVectorDescription`](crate::types::AttackVectorDescription).
    pub fn builder() -> crate::types::builders::AttackVectorDescriptionBuilder {
        crate::types::builders::AttackVectorDescriptionBuilder::default()
    }
}

/// A builder for [`AttackVectorDescription`](crate::types::AttackVectorDescription).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AttackVectorDescriptionBuilder {
    pub(crate) vector_type: std::option::Option<std::string::String>,
}
impl AttackVectorDescriptionBuilder {
    /// <p>The attack type. Valid values:</p>
    /// <ul>
    /// <li> <p>UDP_TRAFFIC</p> </li>
    /// <li> <p>UDP_FRAGMENT</p> </li>
    /// <li> <p>GENERIC_UDP_REFLECTION</p> </li>
    /// <li> <p>DNS_REFLECTION</p> </li>
    /// <li> <p>NTP_REFLECTION</p> </li>
    /// <li> <p>CHARGEN_REFLECTION</p> </li>
    /// <li> <p>SSDP_REFLECTION</p> </li>
    /// <li> <p>PORT_MAPPER</p> </li>
    /// <li> <p>RIP_REFLECTION</p> </li>
    /// <li> <p>SNMP_REFLECTION</p> </li>
    /// <li> <p>MSSQL_REFLECTION</p> </li>
    /// <li> <p>NET_BIOS_REFLECTION</p> </li>
    /// <li> <p>SYN_FLOOD</p> </li>
    /// <li> <p>ACK_FLOOD</p> </li>
    /// <li> <p>REQUEST_FLOOD</p> </li>
    /// <li> <p>HTTP_REFLECTION</p> </li>
    /// <li> <p>UDS_REFLECTION</p> </li>
    /// <li> <p>MEMCACHED_REFLECTION</p> </li>
    /// </ul>
    pub fn vector_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.vector_type = Some(input.into());
        self
    }
    /// <p>The attack type. Valid values:</p>
    /// <ul>
    /// <li> <p>UDP_TRAFFIC</p> </li>
    /// <li> <p>UDP_FRAGMENT</p> </li>
    /// <li> <p>GENERIC_UDP_REFLECTION</p> </li>
    /// <li> <p>DNS_REFLECTION</p> </li>
    /// <li> <p>NTP_REFLECTION</p> </li>
    /// <li> <p>CHARGEN_REFLECTION</p> </li>
    /// <li> <p>SSDP_REFLECTION</p> </li>
    /// <li> <p>PORT_MAPPER</p> </li>
    /// <li> <p>RIP_REFLECTION</p> </li>
    /// <li> <p>SNMP_REFLECTION</p> </li>
    /// <li> <p>MSSQL_REFLECTION</p> </li>
    /// <li> <p>NET_BIOS_REFLECTION</p> </li>
    /// <li> <p>SYN_FLOOD</p> </li>
    /// <li> <p>ACK_FLOOD</p> </li>
    /// <li> <p>REQUEST_FLOOD</p> </li>
    /// <li> <p>HTTP_REFLECTION</p> </li>
    /// <li> <p>UDS_REFLECTION</p> </li>
    /// <li> <p>MEMCACHED_REFLECTION</p> </li>
    /// </ul>
    pub fn set_vector_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vector_type = input;
        self
    }
    /// Consumes the builder and constructs a [`AttackVectorDescription`](crate::types::AttackVectorDescription).
    pub fn build(self) -> crate::types::AttackVectorDescription {
        crate::types::AttackVectorDescription {
            vector_type: self.vector_type,
        }
    }
}
