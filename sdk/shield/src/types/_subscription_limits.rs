// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Limits settings for your subscription. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SubscriptionLimits {
    /// <p>Limits settings on protections for your subscription. </p>
    #[doc(hidden)]
    pub protection_limits: std::option::Option<crate::types::ProtectionLimits>,
    /// <p>Limits settings on protection groups for your subscription. </p>
    #[doc(hidden)]
    pub protection_group_limits: std::option::Option<crate::types::ProtectionGroupLimits>,
}
impl SubscriptionLimits {
    /// <p>Limits settings on protections for your subscription. </p>
    pub fn protection_limits(&self) -> std::option::Option<&crate::types::ProtectionLimits> {
        self.protection_limits.as_ref()
    }
    /// <p>Limits settings on protection groups for your subscription. </p>
    pub fn protection_group_limits(
        &self,
    ) -> std::option::Option<&crate::types::ProtectionGroupLimits> {
        self.protection_group_limits.as_ref()
    }
}
impl SubscriptionLimits {
    /// Creates a new builder-style object to manufacture [`SubscriptionLimits`](crate::types::SubscriptionLimits).
    pub fn builder() -> crate::types::builders::SubscriptionLimitsBuilder {
        crate::types::builders::SubscriptionLimitsBuilder::default()
    }
}

/// A builder for [`SubscriptionLimits`](crate::types::SubscriptionLimits).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SubscriptionLimitsBuilder {
    pub(crate) protection_limits: std::option::Option<crate::types::ProtectionLimits>,
    pub(crate) protection_group_limits: std::option::Option<crate::types::ProtectionGroupLimits>,
}
impl SubscriptionLimitsBuilder {
    /// <p>Limits settings on protections for your subscription. </p>
    pub fn protection_limits(mut self, input: crate::types::ProtectionLimits) -> Self {
        self.protection_limits = Some(input);
        self
    }
    /// <p>Limits settings on protections for your subscription. </p>
    pub fn set_protection_limits(
        mut self,
        input: std::option::Option<crate::types::ProtectionLimits>,
    ) -> Self {
        self.protection_limits = input;
        self
    }
    /// <p>Limits settings on protection groups for your subscription. </p>
    pub fn protection_group_limits(mut self, input: crate::types::ProtectionGroupLimits) -> Self {
        self.protection_group_limits = Some(input);
        self
    }
    /// <p>Limits settings on protection groups for your subscription. </p>
    pub fn set_protection_group_limits(
        mut self,
        input: std::option::Option<crate::types::ProtectionGroupLimits>,
    ) -> Self {
        self.protection_group_limits = input;
        self
    }
    /// Consumes the builder and constructs a [`SubscriptionLimits`](crate::types::SubscriptionLimits).
    pub fn build(self) -> crate::types::SubscriptionLimits {
        crate::types::SubscriptionLimits {
            protection_limits: self.protection_limits,
            protection_group_limits: self.protection_group_limits,
        }
    }
}
