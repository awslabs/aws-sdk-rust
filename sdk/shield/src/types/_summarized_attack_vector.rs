// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of information about the attack.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SummarizedAttackVector {
    /// <p>The attack type, for example, SNMP reflection or SYN flood.</p>
    #[doc(hidden)]
    pub vector_type: std::option::Option<std::string::String>,
    /// <p>The list of counters that describe the details of the attack.</p>
    #[doc(hidden)]
    pub vector_counters: std::option::Option<std::vec::Vec<crate::types::SummarizedCounter>>,
}
impl SummarizedAttackVector {
    /// <p>The attack type, for example, SNMP reflection or SYN flood.</p>
    pub fn vector_type(&self) -> std::option::Option<&str> {
        self.vector_type.as_deref()
    }
    /// <p>The list of counters that describe the details of the attack.</p>
    pub fn vector_counters(&self) -> std::option::Option<&[crate::types::SummarizedCounter]> {
        self.vector_counters.as_deref()
    }
}
impl SummarizedAttackVector {
    /// Creates a new builder-style object to manufacture [`SummarizedAttackVector`](crate::types::SummarizedAttackVector).
    pub fn builder() -> crate::types::builders::SummarizedAttackVectorBuilder {
        crate::types::builders::SummarizedAttackVectorBuilder::default()
    }
}

/// A builder for [`SummarizedAttackVector`](crate::types::SummarizedAttackVector).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SummarizedAttackVectorBuilder {
    pub(crate) vector_type: std::option::Option<std::string::String>,
    pub(crate) vector_counters: std::option::Option<std::vec::Vec<crate::types::SummarizedCounter>>,
}
impl SummarizedAttackVectorBuilder {
    /// <p>The attack type, for example, SNMP reflection or SYN flood.</p>
    pub fn vector_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.vector_type = Some(input.into());
        self
    }
    /// <p>The attack type, for example, SNMP reflection or SYN flood.</p>
    pub fn set_vector_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vector_type = input;
        self
    }
    /// Appends an item to `vector_counters`.
    ///
    /// To override the contents of this collection use [`set_vector_counters`](Self::set_vector_counters).
    ///
    /// <p>The list of counters that describe the details of the attack.</p>
    pub fn vector_counters(mut self, input: crate::types::SummarizedCounter) -> Self {
        let mut v = self.vector_counters.unwrap_or_default();
        v.push(input);
        self.vector_counters = Some(v);
        self
    }
    /// <p>The list of counters that describe the details of the attack.</p>
    pub fn set_vector_counters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SummarizedCounter>>,
    ) -> Self {
        self.vector_counters = input;
        self
    }
    /// Consumes the builder and constructs a [`SummarizedAttackVector`](crate::types::SummarizedAttackVector).
    pub fn build(self) -> crate::types::SummarizedAttackVector {
        crate::types::SummarizedAttackVector {
            vector_type: self.vector_type,
            vector_counters: self.vector_counters,
        }
    }
}
