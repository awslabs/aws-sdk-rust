// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The counter that describes a DDoS attack.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SummarizedCounter {
    /// <p>The counter name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The maximum value of the counter for a specified time period.</p>
    #[doc(hidden)]
    pub max: f64,
    /// <p>The average value of the counter for a specified time period.</p>
    #[doc(hidden)]
    pub average: f64,
    /// <p>The total of counter values for a specified time period.</p>
    #[doc(hidden)]
    pub sum: f64,
    /// <p>The number of counters for a specified time period.</p>
    #[doc(hidden)]
    pub n: i32,
    /// <p>The unit of the counters.</p>
    #[doc(hidden)]
    pub unit: std::option::Option<std::string::String>,
}
impl SummarizedCounter {
    /// <p>The counter name.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The maximum value of the counter for a specified time period.</p>
    pub fn max(&self) -> f64 {
        self.max
    }
    /// <p>The average value of the counter for a specified time period.</p>
    pub fn average(&self) -> f64 {
        self.average
    }
    /// <p>The total of counter values for a specified time period.</p>
    pub fn sum(&self) -> f64 {
        self.sum
    }
    /// <p>The number of counters for a specified time period.</p>
    pub fn n(&self) -> i32 {
        self.n
    }
    /// <p>The unit of the counters.</p>
    pub fn unit(&self) -> std::option::Option<&str> {
        self.unit.as_deref()
    }
}
impl SummarizedCounter {
    /// Creates a new builder-style object to manufacture [`SummarizedCounter`](crate::types::SummarizedCounter).
    pub fn builder() -> crate::types::builders::SummarizedCounterBuilder {
        crate::types::builders::SummarizedCounterBuilder::default()
    }
}

/// A builder for [`SummarizedCounter`](crate::types::SummarizedCounter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SummarizedCounterBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) max: std::option::Option<f64>,
    pub(crate) average: std::option::Option<f64>,
    pub(crate) sum: std::option::Option<f64>,
    pub(crate) n: std::option::Option<i32>,
    pub(crate) unit: std::option::Option<std::string::String>,
}
impl SummarizedCounterBuilder {
    /// <p>The counter name.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The counter name.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The maximum value of the counter for a specified time period.</p>
    pub fn max(mut self, input: f64) -> Self {
        self.max = Some(input);
        self
    }
    /// <p>The maximum value of the counter for a specified time period.</p>
    pub fn set_max(mut self, input: std::option::Option<f64>) -> Self {
        self.max = input;
        self
    }
    /// <p>The average value of the counter for a specified time period.</p>
    pub fn average(mut self, input: f64) -> Self {
        self.average = Some(input);
        self
    }
    /// <p>The average value of the counter for a specified time period.</p>
    pub fn set_average(mut self, input: std::option::Option<f64>) -> Self {
        self.average = input;
        self
    }
    /// <p>The total of counter values for a specified time period.</p>
    pub fn sum(mut self, input: f64) -> Self {
        self.sum = Some(input);
        self
    }
    /// <p>The total of counter values for a specified time period.</p>
    pub fn set_sum(mut self, input: std::option::Option<f64>) -> Self {
        self.sum = input;
        self
    }
    /// <p>The number of counters for a specified time period.</p>
    pub fn n(mut self, input: i32) -> Self {
        self.n = Some(input);
        self
    }
    /// <p>The number of counters for a specified time period.</p>
    pub fn set_n(mut self, input: std::option::Option<i32>) -> Self {
        self.n = input;
        self
    }
    /// <p>The unit of the counters.</p>
    pub fn unit(mut self, input: impl Into<std::string::String>) -> Self {
        self.unit = Some(input.into());
        self
    }
    /// <p>The unit of the counters.</p>
    pub fn set_unit(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.unit = input;
        self
    }
    /// Consumes the builder and constructs a [`SummarizedCounter`](crate::types::SummarizedCounter).
    pub fn build(self) -> crate::types::SummarizedCounter {
        crate::types::SummarizedCounter {
            name: self.name,
            max: self.max.unwrap_or_default(),
            average: self.average.unwrap_or_default(),
            sum: self.sum.unwrap_or_default(),
            n: self.n.unwrap_or_default(),
            unit: self.unit,
        }
    }
}
