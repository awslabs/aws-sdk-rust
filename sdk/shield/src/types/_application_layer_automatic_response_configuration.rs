// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The automatic application layer DDoS mitigation settings for a <code>Protection</code>. This configuration determines whether Shield Advanced automatically manages rules in the web ACL in order to respond to application layer events that Shield Advanced determines to be DDoS attacks. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ApplicationLayerAutomaticResponseConfiguration {
    /// <p>Indicates whether automatic application layer DDoS mitigation is enabled for the protection. </p>
    pub status: crate::types::ApplicationLayerAutomaticResponseStatus,
    /// <p>Specifies the action setting that Shield Advanced should use in the WAF rules that it creates on behalf of the protected resource in response to DDoS attacks. You specify this as part of the configuration for the automatic application layer DDoS mitigation feature, when you enable or update automatic mitigation. Shield Advanced creates the WAF rules in a Shield Advanced-managed rule group, inside the web ACL that you have associated with the resource. </p>
    pub action: ::std::option::Option<crate::types::ResponseAction>,
}
impl ApplicationLayerAutomaticResponseConfiguration {
    /// <p>Indicates whether automatic application layer DDoS mitigation is enabled for the protection. </p>
    pub fn status(&self) -> &crate::types::ApplicationLayerAutomaticResponseStatus {
        &self.status
    }
    /// <p>Specifies the action setting that Shield Advanced should use in the WAF rules that it creates on behalf of the protected resource in response to DDoS attacks. You specify this as part of the configuration for the automatic application layer DDoS mitigation feature, when you enable or update automatic mitigation. Shield Advanced creates the WAF rules in a Shield Advanced-managed rule group, inside the web ACL that you have associated with the resource. </p>
    pub fn action(&self) -> ::std::option::Option<&crate::types::ResponseAction> {
        self.action.as_ref()
    }
}
impl ApplicationLayerAutomaticResponseConfiguration {
    /// Creates a new builder-style object to manufacture [`ApplicationLayerAutomaticResponseConfiguration`](crate::types::ApplicationLayerAutomaticResponseConfiguration).
    pub fn builder() -> crate::types::builders::ApplicationLayerAutomaticResponseConfigurationBuilder {
        crate::types::builders::ApplicationLayerAutomaticResponseConfigurationBuilder::default()
    }
}

/// A builder for [`ApplicationLayerAutomaticResponseConfiguration`](crate::types::ApplicationLayerAutomaticResponseConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ApplicationLayerAutomaticResponseConfigurationBuilder {
    pub(crate) status: ::std::option::Option<crate::types::ApplicationLayerAutomaticResponseStatus>,
    pub(crate) action: ::std::option::Option<crate::types::ResponseAction>,
}
impl ApplicationLayerAutomaticResponseConfigurationBuilder {
    /// <p>Indicates whether automatic application layer DDoS mitigation is enabled for the protection. </p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::ApplicationLayerAutomaticResponseStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether automatic application layer DDoS mitigation is enabled for the protection. </p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ApplicationLayerAutomaticResponseStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Indicates whether automatic application layer DDoS mitigation is enabled for the protection. </p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ApplicationLayerAutomaticResponseStatus> {
        &self.status
    }
    /// <p>Specifies the action setting that Shield Advanced should use in the WAF rules that it creates on behalf of the protected resource in response to DDoS attacks. You specify this as part of the configuration for the automatic application layer DDoS mitigation feature, when you enable or update automatic mitigation. Shield Advanced creates the WAF rules in a Shield Advanced-managed rule group, inside the web ACL that you have associated with the resource. </p>
    /// This field is required.
    pub fn action(mut self, input: crate::types::ResponseAction) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the action setting that Shield Advanced should use in the WAF rules that it creates on behalf of the protected resource in response to DDoS attacks. You specify this as part of the configuration for the automatic application layer DDoS mitigation feature, when you enable or update automatic mitigation. Shield Advanced creates the WAF rules in a Shield Advanced-managed rule group, inside the web ACL that you have associated with the resource. </p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::ResponseAction>) -> Self {
        self.action = input;
        self
    }
    /// <p>Specifies the action setting that Shield Advanced should use in the WAF rules that it creates on behalf of the protected resource in response to DDoS attacks. You specify this as part of the configuration for the automatic application layer DDoS mitigation feature, when you enable or update automatic mitigation. Shield Advanced creates the WAF rules in a Shield Advanced-managed rule group, inside the web ACL that you have associated with the resource. </p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::ResponseAction> {
        &self.action
    }
    /// Consumes the builder and constructs a [`ApplicationLayerAutomaticResponseConfiguration`](crate::types::ApplicationLayerAutomaticResponseConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`status`](crate::types::builders::ApplicationLayerAutomaticResponseConfigurationBuilder::status)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::ApplicationLayerAutomaticResponseConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ApplicationLayerAutomaticResponseConfiguration {
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building ApplicationLayerAutomaticResponseConfiguration",
                )
            })?,
            action: self.action,
        })
    }
}
