// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The attack information for the specified SubResource.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SubResourceSummary {
    /// <p>The <code>SubResource</code> type.</p>
    pub r#type: ::std::option::Option<crate::types::SubResourceType>,
    /// <p>The unique identifier (ID) of the <code>SubResource</code>.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The list of attack types and associated counters.</p>
    pub attack_vectors: ::std::option::Option<::std::vec::Vec<crate::types::SummarizedAttackVector>>,
    /// <p>The counters that describe the details of the attack.</p>
    pub counters: ::std::option::Option<::std::vec::Vec<crate::types::SummarizedCounter>>,
}
impl SubResourceSummary {
    /// <p>The <code>SubResource</code> type.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::SubResourceType> {
        self.r#type.as_ref()
    }
    /// <p>The unique identifier (ID) of the <code>SubResource</code>.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The list of attack types and associated counters.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.attack_vectors.is_none()`.
    pub fn attack_vectors(&self) -> &[crate::types::SummarizedAttackVector] {
        self.attack_vectors.as_deref().unwrap_or_default()
    }
    /// <p>The counters that describe the details of the attack.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.counters.is_none()`.
    pub fn counters(&self) -> &[crate::types::SummarizedCounter] {
        self.counters.as_deref().unwrap_or_default()
    }
}
impl SubResourceSummary {
    /// Creates a new builder-style object to manufacture [`SubResourceSummary`](crate::types::SubResourceSummary).
    pub fn builder() -> crate::types::builders::SubResourceSummaryBuilder {
        crate::types::builders::SubResourceSummaryBuilder::default()
    }
}

/// A builder for [`SubResourceSummary`](crate::types::SubResourceSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SubResourceSummaryBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::SubResourceType>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) attack_vectors: ::std::option::Option<::std::vec::Vec<crate::types::SummarizedAttackVector>>,
    pub(crate) counters: ::std::option::Option<::std::vec::Vec<crate::types::SummarizedCounter>>,
}
impl SubResourceSummaryBuilder {
    /// <p>The <code>SubResource</code> type.</p>
    pub fn r#type(mut self, input: crate::types::SubResourceType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <code>SubResource</code> type.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::SubResourceType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The <code>SubResource</code> type.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::SubResourceType> {
        &self.r#type
    }
    /// <p>The unique identifier (ID) of the <code>SubResource</code>.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier (ID) of the <code>SubResource</code>.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier (ID) of the <code>SubResource</code>.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// Appends an item to `attack_vectors`.
    ///
    /// To override the contents of this collection use [`set_attack_vectors`](Self::set_attack_vectors).
    ///
    /// <p>The list of attack types and associated counters.</p>
    pub fn attack_vectors(mut self, input: crate::types::SummarizedAttackVector) -> Self {
        let mut v = self.attack_vectors.unwrap_or_default();
        v.push(input);
        self.attack_vectors = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of attack types and associated counters.</p>
    pub fn set_attack_vectors(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SummarizedAttackVector>>) -> Self {
        self.attack_vectors = input;
        self
    }
    /// <p>The list of attack types and associated counters.</p>
    pub fn get_attack_vectors(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SummarizedAttackVector>> {
        &self.attack_vectors
    }
    /// Appends an item to `counters`.
    ///
    /// To override the contents of this collection use [`set_counters`](Self::set_counters).
    ///
    /// <p>The counters that describe the details of the attack.</p>
    pub fn counters(mut self, input: crate::types::SummarizedCounter) -> Self {
        let mut v = self.counters.unwrap_or_default();
        v.push(input);
        self.counters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The counters that describe the details of the attack.</p>
    pub fn set_counters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SummarizedCounter>>) -> Self {
        self.counters = input;
        self
    }
    /// <p>The counters that describe the details of the attack.</p>
    pub fn get_counters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SummarizedCounter>> {
        &self.counters
    }
    /// Consumes the builder and constructs a [`SubResourceSummary`](crate::types::SubResourceSummary).
    pub fn build(self) -> crate::types::SubResourceSummary {
        crate::types::SubResourceSummary {
            r#type: self.r#type,
            id: self.id,
            attack_vectors: self.attack_vectors,
            counters: self.counters,
        }
    }
}
