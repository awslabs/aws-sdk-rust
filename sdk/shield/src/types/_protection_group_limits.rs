// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Limits settings on protection groups for your subscription. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProtectionGroupLimits {
    /// <p>The maximum number of protection groups that you can have at one time. </p>
    pub max_protection_groups: i64,
    /// <p>Limits settings by pattern type in the protection groups for your subscription. </p>
    pub pattern_type_limits: ::std::option::Option<crate::types::ProtectionGroupPatternTypeLimits>,
}
impl ProtectionGroupLimits {
    /// <p>The maximum number of protection groups that you can have at one time. </p>
    pub fn max_protection_groups(&self) -> i64 {
        self.max_protection_groups
    }
    /// <p>Limits settings by pattern type in the protection groups for your subscription. </p>
    pub fn pattern_type_limits(&self) -> ::std::option::Option<&crate::types::ProtectionGroupPatternTypeLimits> {
        self.pattern_type_limits.as_ref()
    }
}
impl ProtectionGroupLimits {
    /// Creates a new builder-style object to manufacture [`ProtectionGroupLimits`](crate::types::ProtectionGroupLimits).
    pub fn builder() -> crate::types::builders::ProtectionGroupLimitsBuilder {
        crate::types::builders::ProtectionGroupLimitsBuilder::default()
    }
}

/// A builder for [`ProtectionGroupLimits`](crate::types::ProtectionGroupLimits).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ProtectionGroupLimitsBuilder {
    pub(crate) max_protection_groups: ::std::option::Option<i64>,
    pub(crate) pattern_type_limits: ::std::option::Option<crate::types::ProtectionGroupPatternTypeLimits>,
}
impl ProtectionGroupLimitsBuilder {
    /// <p>The maximum number of protection groups that you can have at one time. </p>
    /// This field is required.
    pub fn max_protection_groups(mut self, input: i64) -> Self {
        self.max_protection_groups = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of protection groups that you can have at one time. </p>
    pub fn set_max_protection_groups(mut self, input: ::std::option::Option<i64>) -> Self {
        self.max_protection_groups = input;
        self
    }
    /// <p>The maximum number of protection groups that you can have at one time. </p>
    pub fn get_max_protection_groups(&self) -> &::std::option::Option<i64> {
        &self.max_protection_groups
    }
    /// <p>Limits settings by pattern type in the protection groups for your subscription. </p>
    /// This field is required.
    pub fn pattern_type_limits(mut self, input: crate::types::ProtectionGroupPatternTypeLimits) -> Self {
        self.pattern_type_limits = ::std::option::Option::Some(input);
        self
    }
    /// <p>Limits settings by pattern type in the protection groups for your subscription. </p>
    pub fn set_pattern_type_limits(mut self, input: ::std::option::Option<crate::types::ProtectionGroupPatternTypeLimits>) -> Self {
        self.pattern_type_limits = input;
        self
    }
    /// <p>Limits settings by pattern type in the protection groups for your subscription. </p>
    pub fn get_pattern_type_limits(&self) -> &::std::option::Option<crate::types::ProtectionGroupPatternTypeLimits> {
        &self.pattern_type_limits
    }
    /// Consumes the builder and constructs a [`ProtectionGroupLimits`](crate::types::ProtectionGroupLimits).
    pub fn build(self) -> crate::types::ProtectionGroupLimits {
        crate::types::ProtectionGroupLimits {
            max_protection_groups: self.max_protection_groups.unwrap_or_default(),
            pattern_type_limits: self.pattern_type_limits,
        }
    }
}
