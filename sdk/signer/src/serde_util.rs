// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn signing_configuration_correct_errors(
    mut builder: crate::types::builders::SigningConfigurationBuilder,
) -> crate::types::builders::SigningConfigurationBuilder {
    if builder.encryption_algorithm_options.is_none() {
        builder.encryption_algorithm_options = {
            let builder = crate::types::builders::EncryptionAlgorithmOptionsBuilder::default();
            crate::serde_util::encryption_algorithm_options_correct_errors(builder).build().ok()
        }
    }
    if builder.hash_algorithm_options.is_none() {
        builder.hash_algorithm_options = {
            let builder = crate::types::builders::HashAlgorithmOptionsBuilder::default();
            crate::serde_util::hash_algorithm_options_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn signing_image_format_correct_errors(
    mut builder: crate::types::builders::SigningImageFormatBuilder,
) -> crate::types::builders::SigningImageFormatBuilder {
    if builder.supported_formats.is_none() {
        builder.supported_formats = Some(Default::default())
    }
    if builder.default_format.is_none() {
        builder.default_format = "no value was set".parse::<crate::types::ImageFormat>().ok()
    }
    builder
}

pub(crate) fn signing_material_correct_errors(
    mut builder: crate::types::builders::SigningMaterialBuilder,
) -> crate::types::builders::SigningMaterialBuilder {
    if builder.certificate_arn.is_none() {
        builder.certificate_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn encryption_algorithm_options_correct_errors(
    mut builder: crate::types::builders::EncryptionAlgorithmOptionsBuilder,
) -> crate::types::builders::EncryptionAlgorithmOptionsBuilder {
    if builder.allowed_values.is_none() {
        builder.allowed_values = Some(Default::default())
    }
    if builder.default_value.is_none() {
        builder.default_value = "no value was set".parse::<crate::types::EncryptionAlgorithm>().ok()
    }
    builder
}

pub(crate) fn hash_algorithm_options_correct_errors(
    mut builder: crate::types::builders::HashAlgorithmOptionsBuilder,
) -> crate::types::builders::HashAlgorithmOptionsBuilder {
    if builder.allowed_values.is_none() {
        builder.allowed_values = Some(Default::default())
    }
    if builder.default_value.is_none() {
        builder.default_value = "no value was set".parse::<crate::types::HashAlgorithm>().ok()
    }
    builder
}

pub(crate) fn s3_source_correct_errors(mut builder: crate::types::builders::S3SourceBuilder) -> crate::types::builders::S3SourceBuilder {
    if builder.bucket_name.is_none() {
        builder.bucket_name = Some(Default::default())
    }
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    builder
}
