// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Fluent builder constructing a request to `AddProfilePermission`.
///
/// <p>Adds cross-account permissions to a signing profile.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct AddProfilePermission {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::add_profile_permission_input::Builder,
}
impl AddProfilePermission {
    /// Creates a new `AddProfilePermission`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::AddProfilePermission,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::AddProfilePermissionError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::AddProfilePermissionOutput,
        aws_smithy_http::result::SdkError<crate::error::AddProfilePermissionError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The human-readable name of the signing profile.</p>
    pub fn profile_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.profile_name(input.into());
        self
    }
    /// <p>The human-readable name of the signing profile.</p>
    pub fn set_profile_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_profile_name(input);
        self
    }
    /// <p>The version of the signing profile.</p>
    pub fn profile_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.profile_version(input.into());
        self
    }
    /// <p>The version of the signing profile.</p>
    pub fn set_profile_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_profile_version(input);
        self
    }
    /// <p>The AWS Signer action permitted as part of cross-account permissions.</p>
    pub fn action(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.action(input.into());
        self
    }
    /// <p>The AWS Signer action permitted as part of cross-account permissions.</p>
    pub fn set_action(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_action(input);
        self
    }
    /// <p>The AWS principal receiving cross-account permissions. This may be an IAM role or another AWS account ID.</p>
    pub fn principal(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.principal(input.into());
        self
    }
    /// <p>The AWS principal receiving cross-account permissions. This may be an IAM role or another AWS account ID.</p>
    pub fn set_principal(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_principal(input);
        self
    }
    /// <p>A unique identifier for the current profile revision.</p>
    pub fn revision_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.revision_id(input.into());
        self
    }
    /// <p>A unique identifier for the current profile revision.</p>
    pub fn set_revision_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_revision_id(input);
        self
    }
    /// <p>A unique identifier for the cross-account permission statement.</p>
    pub fn statement_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.statement_id(input.into());
        self
    }
    /// <p>A unique identifier for the cross-account permission statement.</p>
    pub fn set_statement_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_statement_id(input);
        self
    }
}

/// Fluent builder constructing a request to `CancelSigningProfile`.
///
/// <p>Changes the state of an <code>ACTIVE</code> signing profile to <code>CANCELED</code>. A canceled profile is still viewable with the <code>ListSigningProfiles</code> operation, but it cannot perform new signing jobs, and is deleted two years after cancelation.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CancelSigningProfile {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::cancel_signing_profile_input::Builder,
}
impl CancelSigningProfile {
    /// Creates a new `CancelSigningProfile`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CancelSigningProfile,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CancelSigningProfileError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CancelSigningProfileOutput,
        aws_smithy_http::result::SdkError<crate::error::CancelSigningProfileError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the signing profile to be canceled.</p>
    pub fn profile_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.profile_name(input.into());
        self
    }
    /// <p>The name of the signing profile to be canceled.</p>
    pub fn set_profile_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_profile_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeSigningJob`.
///
/// <p>Returns information about a specific code signing job. You specify the job by using the <code>jobId</code> value that is returned by the <code>StartSigningJob</code> operation. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeSigningJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_signing_job_input::Builder,
}
impl DescribeSigningJob {
    /// Creates a new `DescribeSigningJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeSigningJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeSigningJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeSigningJobOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeSigningJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the signing job on input.</p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_id(input.into());
        self
    }
    /// <p>The ID of the signing job on input.</p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_job_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetSigningPlatform`.
///
/// <p>Returns information on a specific signing platform.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetSigningPlatform {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_signing_platform_input::Builder,
}
impl GetSigningPlatform {
    /// Creates a new `GetSigningPlatform`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetSigningPlatform,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetSigningPlatformError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetSigningPlatformOutput,
        aws_smithy_http::result::SdkError<crate::error::GetSigningPlatformError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the target signing platform.</p>
    pub fn platform_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.platform_id(input.into());
        self
    }
    /// <p>The ID of the target signing platform.</p>
    pub fn set_platform_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_platform_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetSigningProfile`.
///
/// <p>Returns information on a specific signing profile.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetSigningProfile {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_signing_profile_input::Builder,
}
impl GetSigningProfile {
    /// Creates a new `GetSigningProfile`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetSigningProfile,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetSigningProfileError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetSigningProfileOutput,
        aws_smithy_http::result::SdkError<crate::error::GetSigningProfileError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the target signing profile.</p>
    pub fn profile_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.profile_name(input.into());
        self
    }
    /// <p>The name of the target signing profile.</p>
    pub fn set_profile_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_profile_name(input);
        self
    }
    /// <p>The AWS account ID of the profile owner.</p>
    pub fn profile_owner(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.profile_owner(input.into());
        self
    }
    /// <p>The AWS account ID of the profile owner.</p>
    pub fn set_profile_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_profile_owner(input);
        self
    }
}

/// Fluent builder constructing a request to `ListProfilePermissions`.
///
/// <p>Lists the cross-account permissions associated with a signing profile.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListProfilePermissions {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_profile_permissions_input::Builder,
}
impl ListProfilePermissions {
    /// Creates a new `ListProfilePermissions`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListProfilePermissions,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListProfilePermissionsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListProfilePermissionsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListProfilePermissionsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Name of the signing profile containing the cross-account permissions.</p>
    pub fn profile_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.profile_name(input.into());
        self
    }
    /// <p>Name of the signing profile containing the cross-account permissions.</p>
    pub fn set_profile_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_profile_name(input);
        self
    }
    /// <p>String for specifying the next set of paginated results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>String for specifying the next set of paginated results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListSigningJobs`.
///
/// <p>Lists all your signing jobs. You can use the <code>maxResults</code> parameter to limit the number of signing jobs that are returned in the response. If additional jobs remain to be listed, code signing returns a <code>nextToken</code> value. Use this value in subsequent calls to <code>ListSigningJobs</code> to fetch the remaining values. You can continue calling <code>ListSigningJobs</code> with your <code>maxResults</code> parameter and with new values that code signing returns in the <code>nextToken</code> parameter until all of your signing jobs have been returned. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListSigningJobs {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_signing_jobs_input::Builder,
}
impl ListSigningJobs {
    /// Creates a new `ListSigningJobs`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListSigningJobs,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListSigningJobsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListSigningJobsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListSigningJobsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListSigningJobsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListSigningJobsPaginator {
        crate::paginator::ListSigningJobsPaginator::new(self.handle, self.inner)
    }
    /// <p>A status value with which to filter your results.</p>
    pub fn status(mut self, input: crate::model::SigningStatus) -> Self {
        self.inner = self.inner.status(input);
        self
    }
    /// <p>A status value with which to filter your results.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::model::SigningStatus>) -> Self {
        self.inner = self.inner.set_status(input);
        self
    }
    /// <p>The ID of microcontroller platform that you specified for the distribution of your code image.</p>
    pub fn platform_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.platform_id(input.into());
        self
    }
    /// <p>The ID of microcontroller platform that you specified for the distribution of your code image.</p>
    pub fn set_platform_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_platform_id(input);
        self
    }
    /// <p>The IAM principal that requested the signing job.</p>
    pub fn requested_by(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.requested_by(input.into());
        self
    }
    /// <p>The IAM principal that requested the signing job.</p>
    pub fn set_requested_by(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_requested_by(input);
        self
    }
    /// <p>Specifies the maximum number of items to return in the response. Use this parameter when paginating results. If additional items exist beyond the number you specify, the <code>nextToken</code> element is set in the response. Use the <code>nextToken</code> value in a subsequent request to retrieve additional items. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>Specifies the maximum number of items to return in the response. Use this parameter when paginating results. If additional items exist beyond the number you specify, the <code>nextToken</code> element is set in the response. Use the <code>nextToken</code> value in a subsequent request to retrieve additional items. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>String for specifying the next set of paginated results to return. After you receive a response with truncated results, use this parameter in a subsequent request. Set it to the value of <code>nextToken</code> from the response that you just received.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>String for specifying the next set of paginated results to return. After you receive a response with truncated results, use this parameter in a subsequent request. Set it to the value of <code>nextToken</code> from the response that you just received.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>Filters results to return only signing jobs with revoked signatures.</p>
    pub fn is_revoked(mut self, input: bool) -> Self {
        self.inner = self.inner.is_revoked(input);
        self
    }
    /// <p>Filters results to return only signing jobs with revoked signatures.</p>
    pub fn set_is_revoked(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_is_revoked(input);
        self
    }
    /// <p>Filters results to return only signing jobs with signatures expiring before a specified timestamp.</p>
    pub fn signature_expires_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.signature_expires_before(input);
        self
    }
    /// <p>Filters results to return only signing jobs with signatures expiring before a specified timestamp.</p>
    pub fn set_signature_expires_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_signature_expires_before(input);
        self
    }
    /// <p>Filters results to return only signing jobs with signatures expiring after a specified timestamp.</p>
    pub fn signature_expires_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.signature_expires_after(input);
        self
    }
    /// <p>Filters results to return only signing jobs with signatures expiring after a specified timestamp.</p>
    pub fn set_signature_expires_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_signature_expires_after(input);
        self
    }
    /// <p>Filters results to return only signing jobs initiated by a specified IAM entity.</p>
    pub fn job_invoker(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_invoker(input.into());
        self
    }
    /// <p>Filters results to return only signing jobs initiated by a specified IAM entity.</p>
    pub fn set_job_invoker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_job_invoker(input);
        self
    }
}

/// Fluent builder constructing a request to `ListSigningPlatforms`.
///
/// <p>Lists all signing platforms available in code signing that match the request parameters. If additional jobs remain to be listed, code signing returns a <code>nextToken</code> value. Use this value in subsequent calls to <code>ListSigningJobs</code> to fetch the remaining values. You can continue calling <code>ListSigningJobs</code> with your <code>maxResults</code> parameter and with new values that code signing returns in the <code>nextToken</code> parameter until all of your signing jobs have been returned.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListSigningPlatforms {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_signing_platforms_input::Builder,
}
impl ListSigningPlatforms {
    /// Creates a new `ListSigningPlatforms`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListSigningPlatforms,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListSigningPlatformsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListSigningPlatformsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListSigningPlatformsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListSigningPlatformsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListSigningPlatformsPaginator {
        crate::paginator::ListSigningPlatformsPaginator::new(self.handle, self.inner)
    }
    /// <p>The category type of a signing platform.</p>
    pub fn category(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.category(input.into());
        self
    }
    /// <p>The category type of a signing platform.</p>
    pub fn set_category(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_category(input);
        self
    }
    /// <p>Any partner entities connected to a signing platform.</p>
    pub fn partner(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.partner(input.into());
        self
    }
    /// <p>Any partner entities connected to a signing platform.</p>
    pub fn set_partner(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_partner(input);
        self
    }
    /// <p>The validation template that is used by the target signing platform.</p>
    pub fn target(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.target(input.into());
        self
    }
    /// <p>The validation template that is used by the target signing platform.</p>
    pub fn set_target(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_target(input);
        self
    }
    /// <p>The maximum number of results to be returned by this operation.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to be returned by this operation.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>Value for specifying the next set of paginated results to return. After you receive a response with truncated results, use this parameter in a subsequent request. Set it to the value of <code>nextToken</code> from the response that you just received.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>Value for specifying the next set of paginated results to return. After you receive a response with truncated results, use this parameter in a subsequent request. Set it to the value of <code>nextToken</code> from the response that you just received.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListSigningProfiles`.
///
/// <p>Lists all available signing profiles in your AWS account. Returns only profiles with an <code>ACTIVE</code> status unless the <code>includeCanceled</code> request field is set to <code>true</code>. If additional jobs remain to be listed, code signing returns a <code>nextToken</code> value. Use this value in subsequent calls to <code>ListSigningJobs</code> to fetch the remaining values. You can continue calling <code>ListSigningJobs</code> with your <code>maxResults</code> parameter and with new values that code signing returns in the <code>nextToken</code> parameter until all of your signing jobs have been returned.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListSigningProfiles {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_signing_profiles_input::Builder,
}
impl ListSigningProfiles {
    /// Creates a new `ListSigningProfiles`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListSigningProfiles,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListSigningProfilesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListSigningProfilesOutput,
        aws_smithy_http::result::SdkError<crate::error::ListSigningProfilesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListSigningProfilesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListSigningProfilesPaginator {
        crate::paginator::ListSigningProfilesPaginator::new(self.handle, self.inner)
    }
    /// <p>Designates whether to include profiles with the status of <code>CANCELED</code>.</p>
    pub fn include_canceled(mut self, input: bool) -> Self {
        self.inner = self.inner.include_canceled(input);
        self
    }
    /// <p>Designates whether to include profiles with the status of <code>CANCELED</code>.</p>
    pub fn set_include_canceled(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_include_canceled(input);
        self
    }
    /// <p>The maximum number of profiles to be returned.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of profiles to be returned.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>Value for specifying the next set of paginated results to return. After you receive a response with truncated results, use this parameter in a subsequent request. Set it to the value of <code>nextToken</code> from the response that you just received.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>Value for specifying the next set of paginated results to return. After you receive a response with truncated results, use this parameter in a subsequent request. Set it to the value of <code>nextToken</code> from the response that you just received.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>Filters results to return only signing jobs initiated for a specified signing platform.</p>
    pub fn platform_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.platform_id(input.into());
        self
    }
    /// <p>Filters results to return only signing jobs initiated for a specified signing platform.</p>
    pub fn set_platform_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_platform_id(input);
        self
    }
    /// Appends an item to `statuses`.
    ///
    /// To override the contents of this collection use [`set_statuses`](Self::set_statuses).
    ///
    /// <p>Filters results to return only signing jobs with statuses in the specified list.</p>
    pub fn statuses(mut self, input: crate::model::SigningProfileStatus) -> Self {
        self.inner = self.inner.statuses(input);
        self
    }
    /// <p>Filters results to return only signing jobs with statuses in the specified list.</p>
    pub fn set_statuses(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::SigningProfileStatus>>,
    ) -> Self {
        self.inner = self.inner.set_statuses(input);
        self
    }
}

/// Fluent builder constructing a request to `ListTagsForResource`.
///
/// <p>Returns a list of the tags associated with a signing profile resource.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_tags_for_resource_input::Builder,
}
impl ListTagsForResource {
    /// Creates a new `ListTagsForResource`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListTagsForResource,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListTagsForResourceOutput,
        aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) for the signing profile.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the signing profile.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `PutSigningProfile`.
///
/// <p>Creates a signing profile. A signing profile is a code signing template that can be used to carry out a pre-defined signing job. For more information, see <a href="http://docs.aws.amazon.com/signer/latest/developerguide/gs-profile.html">http://docs.aws.amazon.com/signer/latest/developerguide/gs-profile.html</a> </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct PutSigningProfile {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::put_signing_profile_input::Builder,
}
impl PutSigningProfile {
    /// Creates a new `PutSigningProfile`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::PutSigningProfile,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::PutSigningProfileError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::PutSigningProfileOutput,
        aws_smithy_http::result::SdkError<crate::error::PutSigningProfileError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the signing profile to be created.</p>
    pub fn profile_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.profile_name(input.into());
        self
    }
    /// <p>The name of the signing profile to be created.</p>
    pub fn set_profile_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_profile_name(input);
        self
    }
    /// <p>The AWS Certificate Manager certificate that will be used to sign code with the new signing profile.</p>
    pub fn signing_material(mut self, input: crate::model::SigningMaterial) -> Self {
        self.inner = self.inner.signing_material(input);
        self
    }
    /// <p>The AWS Certificate Manager certificate that will be used to sign code with the new signing profile.</p>
    pub fn set_signing_material(
        mut self,
        input: std::option::Option<crate::model::SigningMaterial>,
    ) -> Self {
        self.inner = self.inner.set_signing_material(input);
        self
    }
    /// <p>The default validity period override for any signature generated using this signing profile. If unspecified, the default is 135 months.</p>
    pub fn signature_validity_period(
        mut self,
        input: crate::model::SignatureValidityPeriod,
    ) -> Self {
        self.inner = self.inner.signature_validity_period(input);
        self
    }
    /// <p>The default validity period override for any signature generated using this signing profile. If unspecified, the default is 135 months.</p>
    pub fn set_signature_validity_period(
        mut self,
        input: std::option::Option<crate::model::SignatureValidityPeriod>,
    ) -> Self {
        self.inner = self.inner.set_signature_validity_period(input);
        self
    }
    /// <p>The ID of the signing platform to be created.</p>
    pub fn platform_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.platform_id(input.into());
        self
    }
    /// <p>The ID of the signing platform to be created.</p>
    pub fn set_platform_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_platform_id(input);
        self
    }
    /// <p>A subfield of <code>platform</code>. This specifies any different configuration options that you want to apply to the chosen platform (such as a different <code>hash-algorithm</code> or <code>signing-algorithm</code>).</p>
    pub fn overrides(mut self, input: crate::model::SigningPlatformOverrides) -> Self {
        self.inner = self.inner.overrides(input);
        self
    }
    /// <p>A subfield of <code>platform</code>. This specifies any different configuration options that you want to apply to the chosen platform (such as a different <code>hash-algorithm</code> or <code>signing-algorithm</code>).</p>
    pub fn set_overrides(
        mut self,
        input: std::option::Option<crate::model::SigningPlatformOverrides>,
    ) -> Self {
        self.inner = self.inner.set_overrides(input);
        self
    }
    /// Adds a key-value pair to `signingParameters`.
    ///
    /// To override the contents of this collection use [`set_signing_parameters`](Self::set_signing_parameters).
    ///
    /// <p>Map of key-value pairs for signing. These can include any information that you want to use during signing.</p>
    pub fn signing_parameters(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.signing_parameters(k.into(), v.into());
        self
    }
    /// <p>Map of key-value pairs for signing. These can include any information that you want to use during signing.</p>
    pub fn set_signing_parameters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_signing_parameters(input);
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags to be associated with the signing profile that is being created.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>Tags to be associated with the signing profile that is being created.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `RemoveProfilePermission`.
///
/// <p>Removes cross-account permissions from a signing profile.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct RemoveProfilePermission {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::remove_profile_permission_input::Builder,
}
impl RemoveProfilePermission {
    /// Creates a new `RemoveProfilePermission`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::RemoveProfilePermission,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::RemoveProfilePermissionError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::RemoveProfilePermissionOutput,
        aws_smithy_http::result::SdkError<crate::error::RemoveProfilePermissionError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A human-readable name for the signing profile with permissions to be removed.</p>
    pub fn profile_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.profile_name(input.into());
        self
    }
    /// <p>A human-readable name for the signing profile with permissions to be removed.</p>
    pub fn set_profile_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_profile_name(input);
        self
    }
    /// <p>An identifier for the current revision of the signing profile permissions.</p>
    pub fn revision_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.revision_id(input.into());
        self
    }
    /// <p>An identifier for the current revision of the signing profile permissions.</p>
    pub fn set_revision_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_revision_id(input);
        self
    }
    /// <p>A unique identifier for the cross-account permissions statement.</p>
    pub fn statement_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.statement_id(input.into());
        self
    }
    /// <p>A unique identifier for the cross-account permissions statement.</p>
    pub fn set_statement_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_statement_id(input);
        self
    }
}

/// Fluent builder constructing a request to `RevokeSignature`.
///
/// <p>Changes the state of a signing job to REVOKED. This indicates that the signature is no longer valid.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct RevokeSignature {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::revoke_signature_input::Builder,
}
impl RevokeSignature {
    /// Creates a new `RevokeSignature`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::RevokeSignature,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::RevokeSignatureError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::RevokeSignatureOutput,
        aws_smithy_http::result::SdkError<crate::error::RevokeSignatureError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>ID of the signing job to be revoked.</p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_id(input.into());
        self
    }
    /// <p>ID of the signing job to be revoked.</p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_job_id(input);
        self
    }
    /// <p>AWS account ID of the job owner.</p>
    pub fn job_owner(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_owner(input.into());
        self
    }
    /// <p>AWS account ID of the job owner.</p>
    pub fn set_job_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_job_owner(input);
        self
    }
    /// <p>The reason for revoking the signing job.</p>
    pub fn reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.reason(input.into());
        self
    }
    /// <p>The reason for revoking the signing job.</p>
    pub fn set_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_reason(input);
        self
    }
}

/// Fluent builder constructing a request to `RevokeSigningProfile`.
///
/// <p>Changes the state of a signing profile to REVOKED. This indicates that signatures generated using the signing profile after an effective start date are no longer valid.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct RevokeSigningProfile {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::revoke_signing_profile_input::Builder,
}
impl RevokeSigningProfile {
    /// Creates a new `RevokeSigningProfile`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::RevokeSigningProfile,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::RevokeSigningProfileError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::RevokeSigningProfileOutput,
        aws_smithy_http::result::SdkError<crate::error::RevokeSigningProfileError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the signing profile to be revoked.</p>
    pub fn profile_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.profile_name(input.into());
        self
    }
    /// <p>The name of the signing profile to be revoked.</p>
    pub fn set_profile_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_profile_name(input);
        self
    }
    /// <p>The version of the signing profile to be revoked.</p>
    pub fn profile_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.profile_version(input.into());
        self
    }
    /// <p>The version of the signing profile to be revoked.</p>
    pub fn set_profile_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_profile_version(input);
        self
    }
    /// <p>The reason for revoking a signing profile.</p>
    pub fn reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.reason(input.into());
        self
    }
    /// <p>The reason for revoking a signing profile.</p>
    pub fn set_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_reason(input);
        self
    }
    /// <p>A timestamp for when revocation of a Signing Profile should become effective. Signatures generated using the signing profile after this timestamp are not trusted.</p>
    pub fn effective_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.effective_time(input);
        self
    }
    /// <p>A timestamp for when revocation of a Signing Profile should become effective. Signatures generated using the signing profile after this timestamp are not trusted.</p>
    pub fn set_effective_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_effective_time(input);
        self
    }
}

/// Fluent builder constructing a request to `StartSigningJob`.
///
/// <p>Initiates a signing job to be performed on the code provided. Signing jobs are viewable by the <code>ListSigningJobs</code> operation for two years after they are performed. Note the following requirements: </p>
/// <ul>
/// <li> <p> You must create an Amazon S3 source bucket. For more information, see <a href="http://docs.aws.amazon.com/AmazonS3/latest/gsg/CreatingABucket.html">Create a Bucket</a> in the <i>Amazon S3 Getting Started Guide</i>. </p> </li>
/// <li> <p>Your S3 source bucket must be version enabled.</p> </li>
/// <li> <p>You must create an S3 destination bucket. Code signing uses your S3 destination bucket to write your signed code.</p> </li>
/// <li> <p>You specify the name of the source and destination buckets when calling the <code>StartSigningJob</code> operation.</p> </li>
/// <li> <p>You must also specify a request token that identifies your request to code signing.</p> </li>
/// </ul>
/// <p>You can call the <code>DescribeSigningJob</code> and the <code>ListSigningJobs</code> actions after you call <code>StartSigningJob</code>.</p>
/// <p>For a Java example that shows how to use this action, see <a href="http://docs.aws.amazon.com/acm/latest/userguide/">http://docs.aws.amazon.com/acm/latest/userguide/</a> </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StartSigningJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::start_signing_job_input::Builder,
}
impl StartSigningJob {
    /// Creates a new `StartSigningJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StartSigningJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StartSigningJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StartSigningJobOutput,
        aws_smithy_http::result::SdkError<crate::error::StartSigningJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The S3 bucket that contains the object to sign or a BLOB that contains your raw code.</p>
    pub fn source(mut self, input: crate::model::Source) -> Self {
        self.inner = self.inner.source(input);
        self
    }
    /// <p>The S3 bucket that contains the object to sign or a BLOB that contains your raw code.</p>
    pub fn set_source(mut self, input: std::option::Option<crate::model::Source>) -> Self {
        self.inner = self.inner.set_source(input);
        self
    }
    /// <p>The S3 bucket in which to save your signed object. The destination contains the name of your bucket and an optional prefix.</p>
    pub fn destination(mut self, input: crate::model::Destination) -> Self {
        self.inner = self.inner.destination(input);
        self
    }
    /// <p>The S3 bucket in which to save your signed object. The destination contains the name of your bucket and an optional prefix.</p>
    pub fn set_destination(
        mut self,
        input: std::option::Option<crate::model::Destination>,
    ) -> Self {
        self.inner = self.inner.set_destination(input);
        self
    }
    /// <p>The name of the signing profile.</p>
    pub fn profile_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.profile_name(input.into());
        self
    }
    /// <p>The name of the signing profile.</p>
    pub fn set_profile_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_profile_name(input);
        self
    }
    /// <p>String that identifies the signing request. All calls after the first that use this token return the same response as the first call.</p>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>String that identifies the signing request. All calls after the first that use this token return the same response as the first call.</p>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
    /// <p>The AWS account ID of the signing profile owner.</p>
    pub fn profile_owner(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.profile_owner(input.into());
        self
    }
    /// <p>The AWS account ID of the signing profile owner.</p>
    pub fn set_profile_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_profile_owner(input);
        self
    }
}

/// Fluent builder constructing a request to `TagResource`.
///
/// <p>Adds one or more tags to a signing profile. Tags are labels that you can use to identify and organize your AWS resources. Each tag consists of a key and an optional value. To specify the signing profile, use its Amazon Resource Name (ARN). To specify the tag, use a key-value pair.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::tag_resource_input::Builder,
}
impl TagResource {
    /// Creates a new `TagResource`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::TagResource,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::TagResourceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::TagResourceOutput,
        aws_smithy_http::result::SdkError<crate::error::TagResourceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) for the signing profile.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the signing profile.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>One or more tags to be associated with the signing profile.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>One or more tags to be associated with the signing profile.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `UntagResource`.
///
/// <p>Removes one or more tags from a signing profile. To remove the tags, specify a list of tag keys.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::untag_resource_input::Builder,
}
impl UntagResource {
    /// Creates a new `UntagResource`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UntagResource,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UntagResourceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UntagResourceOutput,
        aws_smithy_http::result::SdkError<crate::error::UntagResourceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) for the signing profile.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the signing profile.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
    /// Appends an item to `tagKeys`.
    ///
    /// To override the contents of this collection use [`set_tag_keys`](Self::set_tag_keys).
    ///
    /// <p>A list of tag keys to be removed from the signing profile.</p>
    pub fn tag_keys(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.tag_keys(input.into());
        self
    }
    /// <p>A list of tag keys to be removed from the signing profile.</p>
    pub fn set_tag_keys(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_tag_keys(input);
        self
    }
}
