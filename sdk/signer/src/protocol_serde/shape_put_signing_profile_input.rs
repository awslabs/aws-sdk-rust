// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_put_signing_profile_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::put_signing_profile::PutSigningProfileInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.overrides {
        #[allow(unused_mut)]
        let mut object_2 = object.key("overrides").start_object();
        crate::protocol_serde::shape_signing_platform_overrides::ser_signing_platform_overrides(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.platform_id {
        object.key("platformId").string(var_3.as_str());
    }
    if let Some(var_4) = &input.signature_validity_period {
        #[allow(unused_mut)]
        let mut object_5 = object.key("signatureValidityPeriod").start_object();
        crate::protocol_serde::shape_signature_validity_period::ser_signature_validity_period(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.signing_material {
        #[allow(unused_mut)]
        let mut object_7 = object.key("signingMaterial").start_object();
        crate::protocol_serde::shape_signing_material::ser_signing_material(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.signing_parameters {
        #[allow(unused_mut)]
        let mut object_9 = object.key("signingParameters").start_object();
        for (key_10, value_11) in var_8 {
            {
                object_9.key(key_10.as_str()).string(value_11.as_str());
            }
        }
        object_9.finish();
    }
    if let Some(var_12) = &input.tags {
        #[allow(unused_mut)]
        let mut object_13 = object.key("tags").start_object();
        for (key_14, value_15) in var_12 {
            {
                object_13.key(key_14.as_str()).string(value_15.as_str());
            }
        }
        object_13.finish();
    }
    Ok(())
}
