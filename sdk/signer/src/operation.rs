// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Adds cross-account permissions to a signing profile.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AddProfilePermission {
    _private: (),
}
impl AddProfilePermission {
    /// Creates a new builder-style object to manufacture [`AddProfilePermissionInput`](crate::input::AddProfilePermissionInput)
    pub fn builder() -> crate::input::add_profile_permission_input::Builder {
        crate::input::add_profile_permission_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AddProfilePermission {
    type Output = std::result::Result<
        crate::output::AddProfilePermissionOutput,
        crate::error::AddProfilePermissionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_add_profile_permission_error(response)
        } else {
            crate::operation_deser::parse_add_profile_permission_response(response)
        }
    }
}

/// <p>Changes the state of an <code>ACTIVE</code> signing profile to <code>CANCELED</code>.
/// A canceled profile is still viewable with the <code>ListSigningProfiles</code>
/// operation, but it cannot perform new signing jobs, and is deleted two years after
/// cancelation.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CancelSigningProfile {
    _private: (),
}
impl CancelSigningProfile {
    /// Creates a new builder-style object to manufacture [`CancelSigningProfileInput`](crate::input::CancelSigningProfileInput)
    pub fn builder() -> crate::input::cancel_signing_profile_input::Builder {
        crate::input::cancel_signing_profile_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CancelSigningProfile {
    type Output = std::result::Result<
        crate::output::CancelSigningProfileOutput,
        crate::error::CancelSigningProfileError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_cancel_signing_profile_error(response)
        } else {
            crate::operation_deser::parse_cancel_signing_profile_response(response)
        }
    }
}

/// <p>Returns information about a specific code signing job. You specify the job by using
/// the <code>jobId</code> value that is returned by the <a>StartSigningJob</a>
/// operation. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeSigningJob {
    _private: (),
}
impl DescribeSigningJob {
    /// Creates a new builder-style object to manufacture [`DescribeSigningJobInput`](crate::input::DescribeSigningJobInput)
    pub fn builder() -> crate::input::describe_signing_job_input::Builder {
        crate::input::describe_signing_job_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeSigningJob {
    type Output = std::result::Result<
        crate::output::DescribeSigningJobOutput,
        crate::error::DescribeSigningJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_signing_job_error(response)
        } else {
            crate::operation_deser::parse_describe_signing_job_response(response)
        }
    }
}

/// <p>Returns information on a specific signing platform.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetSigningPlatform {
    _private: (),
}
impl GetSigningPlatform {
    /// Creates a new builder-style object to manufacture [`GetSigningPlatformInput`](crate::input::GetSigningPlatformInput)
    pub fn builder() -> crate::input::get_signing_platform_input::Builder {
        crate::input::get_signing_platform_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetSigningPlatform {
    type Output = std::result::Result<
        crate::output::GetSigningPlatformOutput,
        crate::error::GetSigningPlatformError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_signing_platform_error(response)
        } else {
            crate::operation_deser::parse_get_signing_platform_response(response)
        }
    }
}

/// <p>Returns information on a specific signing profile.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetSigningProfile {
    _private: (),
}
impl GetSigningProfile {
    /// Creates a new builder-style object to manufacture [`GetSigningProfileInput`](crate::input::GetSigningProfileInput)
    pub fn builder() -> crate::input::get_signing_profile_input::Builder {
        crate::input::get_signing_profile_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetSigningProfile {
    type Output = std::result::Result<
        crate::output::GetSigningProfileOutput,
        crate::error::GetSigningProfileError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_signing_profile_error(response)
        } else {
            crate::operation_deser::parse_get_signing_profile_response(response)
        }
    }
}

/// <p>Lists the cross-account permissions associated with a signing profile.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListProfilePermissions {
    _private: (),
}
impl ListProfilePermissions {
    /// Creates a new builder-style object to manufacture [`ListProfilePermissionsInput`](crate::input::ListProfilePermissionsInput)
    pub fn builder() -> crate::input::list_profile_permissions_input::Builder {
        crate::input::list_profile_permissions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListProfilePermissions {
    type Output = std::result::Result<
        crate::output::ListProfilePermissionsOutput,
        crate::error::ListProfilePermissionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_profile_permissions_error(response)
        } else {
            crate::operation_deser::parse_list_profile_permissions_response(response)
        }
    }
}

/// <p>Lists all your signing jobs. You can use the <code>maxResults</code> parameter to
/// limit the number of signing jobs that are returned in the response. If additional jobs
/// remain to be listed, code signing returns a <code>nextToken</code> value. Use this value in
/// subsequent calls to <code>ListSigningJobs</code> to fetch the remaining values. You can
/// continue calling <code>ListSigningJobs</code> with your <code>maxResults</code>
/// parameter and with new values that code signing returns in the <code>nextToken</code>
/// parameter until all of your signing jobs have been returned. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListSigningJobs {
    _private: (),
}
impl ListSigningJobs {
    /// Creates a new builder-style object to manufacture [`ListSigningJobsInput`](crate::input::ListSigningJobsInput)
    pub fn builder() -> crate::input::list_signing_jobs_input::Builder {
        crate::input::list_signing_jobs_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListSigningJobs {
    type Output = std::result::Result<
        crate::output::ListSigningJobsOutput,
        crate::error::ListSigningJobsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_signing_jobs_error(response)
        } else {
            crate::operation_deser::parse_list_signing_jobs_response(response)
        }
    }
}

/// <p>Lists all signing platforms available in code signing that match the request parameters. If
/// additional jobs remain to be listed, code signing returns a <code>nextToken</code> value. Use
/// this value in subsequent calls to <code>ListSigningJobs</code> to fetch the remaining
/// values. You can continue calling <code>ListSigningJobs</code> with your
/// <code>maxResults</code> parameter and with new values that code signing returns in the
/// <code>nextToken</code> parameter until all of your signing jobs have been
/// returned.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListSigningPlatforms {
    _private: (),
}
impl ListSigningPlatforms {
    /// Creates a new builder-style object to manufacture [`ListSigningPlatformsInput`](crate::input::ListSigningPlatformsInput)
    pub fn builder() -> crate::input::list_signing_platforms_input::Builder {
        crate::input::list_signing_platforms_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListSigningPlatforms {
    type Output = std::result::Result<
        crate::output::ListSigningPlatformsOutput,
        crate::error::ListSigningPlatformsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_signing_platforms_error(response)
        } else {
            crate::operation_deser::parse_list_signing_platforms_response(response)
        }
    }
}

/// <p>Lists all available signing profiles in your AWS account. Returns only profiles with
/// an <code>ACTIVE</code> status unless the <code>includeCanceled</code> request field is
/// set to <code>true</code>. If additional jobs remain to be listed, code signing returns a
/// <code>nextToken</code> value. Use this value in subsequent calls to
/// <code>ListSigningJobs</code> to fetch the remaining values. You can continue calling
/// <code>ListSigningJobs</code> with your <code>maxResults</code> parameter and with
/// new values that code signing returns in the <code>nextToken</code> parameter until all of your
/// signing jobs have been returned.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListSigningProfiles {
    _private: (),
}
impl ListSigningProfiles {
    /// Creates a new builder-style object to manufacture [`ListSigningProfilesInput`](crate::input::ListSigningProfilesInput)
    pub fn builder() -> crate::input::list_signing_profiles_input::Builder {
        crate::input::list_signing_profiles_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListSigningProfiles {
    type Output = std::result::Result<
        crate::output::ListSigningProfilesOutput,
        crate::error::ListSigningProfilesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_signing_profiles_error(response)
        } else {
            crate::operation_deser::parse_list_signing_profiles_response(response)
        }
    }
}

/// <p>Returns a list of the tags associated with a signing profile resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput)
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// <p>Creates a signing profile. A signing profile is a code signing template that can be used to
/// carry out a pre-defined signing job. For more information, see <a href="http://docs.aws.amazon.com/signer/latest/developerguide/gs-profile.html">http://docs.aws.amazon.com/signer/latest/developerguide/gs-profile.html</a>
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutSigningProfile {
    _private: (),
}
impl PutSigningProfile {
    /// Creates a new builder-style object to manufacture [`PutSigningProfileInput`](crate::input::PutSigningProfileInput)
    pub fn builder() -> crate::input::put_signing_profile_input::Builder {
        crate::input::put_signing_profile_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutSigningProfile {
    type Output = std::result::Result<
        crate::output::PutSigningProfileOutput,
        crate::error::PutSigningProfileError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_signing_profile_error(response)
        } else {
            crate::operation_deser::parse_put_signing_profile_response(response)
        }
    }
}

/// <p>Removes cross-account permissions from a signing profile.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RemoveProfilePermission {
    _private: (),
}
impl RemoveProfilePermission {
    /// Creates a new builder-style object to manufacture [`RemoveProfilePermissionInput`](crate::input::RemoveProfilePermissionInput)
    pub fn builder() -> crate::input::remove_profile_permission_input::Builder {
        crate::input::remove_profile_permission_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RemoveProfilePermission {
    type Output = std::result::Result<
        crate::output::RemoveProfilePermissionOutput,
        crate::error::RemoveProfilePermissionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_remove_profile_permission_error(response)
        } else {
            crate::operation_deser::parse_remove_profile_permission_response(response)
        }
    }
}

/// <p>Changes the state of a signing job to REVOKED. This indicates that the signature is no
/// longer valid.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RevokeSignature {
    _private: (),
}
impl RevokeSignature {
    /// Creates a new builder-style object to manufacture [`RevokeSignatureInput`](crate::input::RevokeSignatureInput)
    pub fn builder() -> crate::input::revoke_signature_input::Builder {
        crate::input::revoke_signature_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RevokeSignature {
    type Output = std::result::Result<
        crate::output::RevokeSignatureOutput,
        crate::error::RevokeSignatureError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_revoke_signature_error(response)
        } else {
            crate::operation_deser::parse_revoke_signature_response(response)
        }
    }
}

/// <p>Changes the state of a signing profile to REVOKED. This indicates that signatures
/// generated using the signing profile after an effective start date are no longer
/// valid.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RevokeSigningProfile {
    _private: (),
}
impl RevokeSigningProfile {
    /// Creates a new builder-style object to manufacture [`RevokeSigningProfileInput`](crate::input::RevokeSigningProfileInput)
    pub fn builder() -> crate::input::revoke_signing_profile_input::Builder {
        crate::input::revoke_signing_profile_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RevokeSigningProfile {
    type Output = std::result::Result<
        crate::output::RevokeSigningProfileOutput,
        crate::error::RevokeSigningProfileError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_revoke_signing_profile_error(response)
        } else {
            crate::operation_deser::parse_revoke_signing_profile_response(response)
        }
    }
}

/// <p>Initiates a signing job to be performed on the code provided. Signing jobs are
/// viewable by the <code>ListSigningJobs</code> operation for two years after they are
/// performed. Note the following requirements: </p>
/// <ul>
/// <li>
/// <p> You must create an Amazon S3 source bucket. For more information, see <a href="http://docs.aws.amazon.com/AmazonS3/latest/gsg/CreatingABucket.html">Create a Bucket</a> in the
/// <i>Amazon S3 Getting Started Guide</i>. </p>
/// </li>
/// <li>
/// <p>Your S3 source bucket must be version enabled.</p>
/// </li>
/// <li>
/// <p>You must create an S3 destination bucket. Code signing uses your S3 destination
/// bucket to write your signed code.</p>
/// </li>
/// <li>
/// <p>You specify the name of the source and destination buckets when calling the
/// <code>StartSigningJob</code> operation.</p>
/// </li>
/// <li>
/// <p>You must also specify a request token that identifies your request to
/// code signing.</p>
/// </li>
/// </ul>
/// <p>You can call the <a>DescribeSigningJob</a> and the <a>ListSigningJobs</a> actions after you call
/// <code>StartSigningJob</code>.</p>
/// <p>For a Java example that shows how to use this action, see <a href="http://docs.aws.amazon.com/acm/latest/userguide/">http://docs.aws.amazon.com/acm/latest/userguide/</a>
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartSigningJob {
    _private: (),
}
impl StartSigningJob {
    /// Creates a new builder-style object to manufacture [`StartSigningJobInput`](crate::input::StartSigningJobInput)
    pub fn builder() -> crate::input::start_signing_job_input::Builder {
        crate::input::start_signing_job_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartSigningJob {
    type Output = std::result::Result<
        crate::output::StartSigningJobOutput,
        crate::error::StartSigningJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_signing_job_error(response)
        } else {
            crate::operation_deser::parse_start_signing_job_response(response)
        }
    }
}

/// <p>Adds one or more tags to a signing profile. Tags are labels that you can use to
/// identify and organize your AWS resources. Each tag consists of a key and an optional
/// value. To specify the signing profile, use its Amazon Resource Name (ARN). To specify
/// the tag, use a key-value pair.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput)
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_tag_resource_error(response)
        } else {
            crate::operation_deser::parse_tag_resource_response(response)
        }
    }
}

/// <p>Removes one or more tags from a signing profile. To remove the tags, specify a list of
/// tag keys.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput)
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_untag_resource_error(response)
        } else {
            crate::operation_deser::parse_untag_resource_response(response)
        }
    }
}
