// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the S3 bucket where you saved your unsigned code.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct S3Source {
    /// <p>Name of the S3 bucket.</p>
    #[doc(hidden)]
    pub bucket_name: std::option::Option<std::string::String>,
    /// <p>Key name of the bucket object that contains your unsigned code.</p>
    #[doc(hidden)]
    pub key: std::option::Option<std::string::String>,
    /// <p>Version of your source image in your version enabled S3 bucket.</p>
    #[doc(hidden)]
    pub version: std::option::Option<std::string::String>,
}
impl S3Source {
    /// <p>Name of the S3 bucket.</p>
    pub fn bucket_name(&self) -> std::option::Option<&str> {
        self.bucket_name.as_deref()
    }
    /// <p>Key name of the bucket object that contains your unsigned code.</p>
    pub fn key(&self) -> std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>Version of your source image in your version enabled S3 bucket.</p>
    pub fn version(&self) -> std::option::Option<&str> {
        self.version.as_deref()
    }
}
impl S3Source {
    /// Creates a new builder-style object to manufacture [`S3Source`](crate::types::S3Source).
    pub fn builder() -> crate::types::builders::S3SourceBuilder {
        crate::types::builders::S3SourceBuilder::default()
    }
}

/// A builder for [`S3Source`](crate::types::S3Source).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct S3SourceBuilder {
    pub(crate) bucket_name: std::option::Option<std::string::String>,
    pub(crate) key: std::option::Option<std::string::String>,
    pub(crate) version: std::option::Option<std::string::String>,
}
impl S3SourceBuilder {
    /// <p>Name of the S3 bucket.</p>
    pub fn bucket_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.bucket_name = Some(input.into());
        self
    }
    /// <p>Name of the S3 bucket.</p>
    pub fn set_bucket_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bucket_name = input;
        self
    }
    /// <p>Key name of the bucket object that contains your unsigned code.</p>
    pub fn key(mut self, input: impl Into<std::string::String>) -> Self {
        self.key = Some(input.into());
        self
    }
    /// <p>Key name of the bucket object that contains your unsigned code.</p>
    pub fn set_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>Version of your source image in your version enabled S3 bucket.</p>
    pub fn version(mut self, input: impl Into<std::string::String>) -> Self {
        self.version = Some(input.into());
        self
    }
    /// <p>Version of your source image in your version enabled S3 bucket.</p>
    pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// Consumes the builder and constructs a [`S3Source`](crate::types::S3Source).
    pub fn build(self) -> crate::types::S3Source {
        crate::types::S3Source {
            bucket_name: self.bucket_name,
            key: self.key,
            version: self.version,
        }
    }
}
