// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The S3 bucket name and key where code signing saved your signed code image.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct S3SignedObject {
    /// <p>Name of the S3 bucket.</p>
    #[doc(hidden)]
    pub bucket_name: std::option::Option<std::string::String>,
    /// <p>Key name that uniquely identifies a signed code image in your bucket.</p>
    #[doc(hidden)]
    pub key: std::option::Option<std::string::String>,
}
impl S3SignedObject {
    /// <p>Name of the S3 bucket.</p>
    pub fn bucket_name(&self) -> std::option::Option<&str> {
        self.bucket_name.as_deref()
    }
    /// <p>Key name that uniquely identifies a signed code image in your bucket.</p>
    pub fn key(&self) -> std::option::Option<&str> {
        self.key.as_deref()
    }
}
impl S3SignedObject {
    /// Creates a new builder-style object to manufacture [`S3SignedObject`](crate::types::S3SignedObject).
    pub fn builder() -> crate::types::builders::S3SignedObjectBuilder {
        crate::types::builders::S3SignedObjectBuilder::default()
    }
}

/// A builder for [`S3SignedObject`](crate::types::S3SignedObject).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct S3SignedObjectBuilder {
    pub(crate) bucket_name: std::option::Option<std::string::String>,
    pub(crate) key: std::option::Option<std::string::String>,
}
impl S3SignedObjectBuilder {
    /// <p>Name of the S3 bucket.</p>
    pub fn bucket_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.bucket_name = Some(input.into());
        self
    }
    /// <p>Name of the S3 bucket.</p>
    pub fn set_bucket_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bucket_name = input;
        self
    }
    /// <p>Key name that uniquely identifies a signed code image in your bucket.</p>
    pub fn key(mut self, input: impl Into<std::string::String>) -> Self {
        self.key = Some(input.into());
        self
    }
    /// <p>Key name that uniquely identifies a signed code image in your bucket.</p>
    pub fn set_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// Consumes the builder and constructs a [`S3SignedObject`](crate::types::S3SignedObject).
    pub fn build(self) -> crate::types::S3SignedObject {
        crate::types::S3SignedObject {
            bucket_name: self.bucket_name,
            key: self.key,
        }
    }
}
