// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The validity period for a signing job.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SignatureValidityPeriod {
    /// <p>The numerical value of the time unit for signature validity.</p>
    #[doc(hidden)]
    pub value: i32,
    /// <p>The time unit for signature validity.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::ValidityType>,
}
impl SignatureValidityPeriod {
    /// <p>The numerical value of the time unit for signature validity.</p>
    pub fn value(&self) -> i32 {
        self.value
    }
    /// <p>The time unit for signature validity.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::ValidityType> {
        self.r#type.as_ref()
    }
}
impl SignatureValidityPeriod {
    /// Creates a new builder-style object to manufacture [`SignatureValidityPeriod`](crate::types::SignatureValidityPeriod).
    pub fn builder() -> crate::types::builders::SignatureValidityPeriodBuilder {
        crate::types::builders::SignatureValidityPeriodBuilder::default()
    }
}

/// A builder for [`SignatureValidityPeriod`](crate::types::SignatureValidityPeriod).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SignatureValidityPeriodBuilder {
    pub(crate) value: std::option::Option<i32>,
    pub(crate) r#type: std::option::Option<crate::types::ValidityType>,
}
impl SignatureValidityPeriodBuilder {
    /// <p>The numerical value of the time unit for signature validity.</p>
    pub fn value(mut self, input: i32) -> Self {
        self.value = Some(input);
        self
    }
    /// <p>The numerical value of the time unit for signature validity.</p>
    pub fn set_value(mut self, input: std::option::Option<i32>) -> Self {
        self.value = input;
        self
    }
    /// <p>The time unit for signature validity.</p>
    pub fn r#type(mut self, input: crate::types::ValidityType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The time unit for signature validity.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::ValidityType>) -> Self {
        self.r#type = input;
        self
    }
    /// Consumes the builder and constructs a [`SignatureValidityPeriod`](crate::types::SignatureValidityPeriod).
    pub fn build(self) -> crate::types::SignatureValidityPeriod {
        crate::types::SignatureValidityPeriod {
            value: self.value.unwrap_or_default(),
            r#type: self.r#type,
        }
    }
}
