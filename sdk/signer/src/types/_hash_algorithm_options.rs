// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The hash algorithms that are available to a code signing job.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct HashAlgorithmOptions {
    /// <p>The set of accepted hash algorithms allowed in a code signing job.</p>
    #[doc(hidden)]
    pub allowed_values: std::option::Option<std::vec::Vec<crate::types::HashAlgorithm>>,
    /// <p>The default hash algorithm that is used in a code signing job.</p>
    #[doc(hidden)]
    pub default_value: std::option::Option<crate::types::HashAlgorithm>,
}
impl HashAlgorithmOptions {
    /// <p>The set of accepted hash algorithms allowed in a code signing job.</p>
    pub fn allowed_values(&self) -> std::option::Option<&[crate::types::HashAlgorithm]> {
        self.allowed_values.as_deref()
    }
    /// <p>The default hash algorithm that is used in a code signing job.</p>
    pub fn default_value(&self) -> std::option::Option<&crate::types::HashAlgorithm> {
        self.default_value.as_ref()
    }
}
impl HashAlgorithmOptions {
    /// Creates a new builder-style object to manufacture [`HashAlgorithmOptions`](crate::types::HashAlgorithmOptions).
    pub fn builder() -> crate::types::builders::HashAlgorithmOptionsBuilder {
        crate::types::builders::HashAlgorithmOptionsBuilder::default()
    }
}

/// A builder for [`HashAlgorithmOptions`](crate::types::HashAlgorithmOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct HashAlgorithmOptionsBuilder {
    pub(crate) allowed_values: std::option::Option<std::vec::Vec<crate::types::HashAlgorithm>>,
    pub(crate) default_value: std::option::Option<crate::types::HashAlgorithm>,
}
impl HashAlgorithmOptionsBuilder {
    /// Appends an item to `allowed_values`.
    ///
    /// To override the contents of this collection use [`set_allowed_values`](Self::set_allowed_values).
    ///
    /// <p>The set of accepted hash algorithms allowed in a code signing job.</p>
    pub fn allowed_values(mut self, input: crate::types::HashAlgorithm) -> Self {
        let mut v = self.allowed_values.unwrap_or_default();
        v.push(input);
        self.allowed_values = Some(v);
        self
    }
    /// <p>The set of accepted hash algorithms allowed in a code signing job.</p>
    pub fn set_allowed_values(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::HashAlgorithm>>,
    ) -> Self {
        self.allowed_values = input;
        self
    }
    /// <p>The default hash algorithm that is used in a code signing job.</p>
    pub fn default_value(mut self, input: crate::types::HashAlgorithm) -> Self {
        self.default_value = Some(input);
        self
    }
    /// <p>The default hash algorithm that is used in a code signing job.</p>
    pub fn set_default_value(
        mut self,
        input: std::option::Option<crate::types::HashAlgorithm>,
    ) -> Self {
        self.default_value = input;
        self
    }
    /// Consumes the builder and constructs a [`HashAlgorithmOptions`](crate::types::HashAlgorithmOptions).
    pub fn build(self) -> crate::types::HashAlgorithmOptions {
        crate::types::HashAlgorithmOptions {
            allowed_values: self.allowed_values,
            default_value: self.default_value,
        }
    }
}
