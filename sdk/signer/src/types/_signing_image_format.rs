// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The image format of a code signing platform or profile.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SigningImageFormat {
    /// <p>The supported formats of a code signing image.</p>
    #[doc(hidden)]
    pub supported_formats: std::option::Option<std::vec::Vec<crate::types::ImageFormat>>,
    /// <p>The default format of a code signing image.</p>
    #[doc(hidden)]
    pub default_format: std::option::Option<crate::types::ImageFormat>,
}
impl SigningImageFormat {
    /// <p>The supported formats of a code signing image.</p>
    pub fn supported_formats(&self) -> std::option::Option<&[crate::types::ImageFormat]> {
        self.supported_formats.as_deref()
    }
    /// <p>The default format of a code signing image.</p>
    pub fn default_format(&self) -> std::option::Option<&crate::types::ImageFormat> {
        self.default_format.as_ref()
    }
}
impl SigningImageFormat {
    /// Creates a new builder-style object to manufacture [`SigningImageFormat`](crate::types::SigningImageFormat).
    pub fn builder() -> crate::types::builders::SigningImageFormatBuilder {
        crate::types::builders::SigningImageFormatBuilder::default()
    }
}

/// A builder for [`SigningImageFormat`](crate::types::SigningImageFormat).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SigningImageFormatBuilder {
    pub(crate) supported_formats: std::option::Option<std::vec::Vec<crate::types::ImageFormat>>,
    pub(crate) default_format: std::option::Option<crate::types::ImageFormat>,
}
impl SigningImageFormatBuilder {
    /// Appends an item to `supported_formats`.
    ///
    /// To override the contents of this collection use [`set_supported_formats`](Self::set_supported_formats).
    ///
    /// <p>The supported formats of a code signing image.</p>
    pub fn supported_formats(mut self, input: crate::types::ImageFormat) -> Self {
        let mut v = self.supported_formats.unwrap_or_default();
        v.push(input);
        self.supported_formats = Some(v);
        self
    }
    /// <p>The supported formats of a code signing image.</p>
    pub fn set_supported_formats(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ImageFormat>>,
    ) -> Self {
        self.supported_formats = input;
        self
    }
    /// <p>The default format of a code signing image.</p>
    pub fn default_format(mut self, input: crate::types::ImageFormat) -> Self {
        self.default_format = Some(input);
        self
    }
    /// <p>The default format of a code signing image.</p>
    pub fn set_default_format(
        mut self,
        input: std::option::Option<crate::types::ImageFormat>,
    ) -> Self {
        self.default_format = input;
        self
    }
    /// Consumes the builder and constructs a [`SigningImageFormat`](crate::types::SigningImageFormat).
    pub fn build(self) -> crate::types::SigningImageFormat {
        crate::types::SigningImageFormat {
            supported_formats: self.supported_formats,
            default_format: self.default_format,
        }
    }
}
