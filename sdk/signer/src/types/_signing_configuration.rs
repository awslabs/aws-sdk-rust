// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration of a code signing operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SigningConfiguration {
    /// <p>The encryption algorithm options that are available for a code signing job.</p>
    pub encryption_algorithm_options: ::std::option::Option<crate::types::EncryptionAlgorithmOptions>,
    /// <p>The hash algorithm options that are available for a code signing job.</p>
    pub hash_algorithm_options: ::std::option::Option<crate::types::HashAlgorithmOptions>,
}
impl SigningConfiguration {
    /// <p>The encryption algorithm options that are available for a code signing job.</p>
    pub fn encryption_algorithm_options(&self) -> ::std::option::Option<&crate::types::EncryptionAlgorithmOptions> {
        self.encryption_algorithm_options.as_ref()
    }
    /// <p>The hash algorithm options that are available for a code signing job.</p>
    pub fn hash_algorithm_options(&self) -> ::std::option::Option<&crate::types::HashAlgorithmOptions> {
        self.hash_algorithm_options.as_ref()
    }
}
impl SigningConfiguration {
    /// Creates a new builder-style object to manufacture [`SigningConfiguration`](crate::types::SigningConfiguration).
    pub fn builder() -> crate::types::builders::SigningConfigurationBuilder {
        crate::types::builders::SigningConfigurationBuilder::default()
    }
}

/// A builder for [`SigningConfiguration`](crate::types::SigningConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SigningConfigurationBuilder {
    pub(crate) encryption_algorithm_options: ::std::option::Option<crate::types::EncryptionAlgorithmOptions>,
    pub(crate) hash_algorithm_options: ::std::option::Option<crate::types::HashAlgorithmOptions>,
}
impl SigningConfigurationBuilder {
    /// <p>The encryption algorithm options that are available for a code signing job.</p>
    /// This field is required.
    pub fn encryption_algorithm_options(mut self, input: crate::types::EncryptionAlgorithmOptions) -> Self {
        self.encryption_algorithm_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The encryption algorithm options that are available for a code signing job.</p>
    pub fn set_encryption_algorithm_options(mut self, input: ::std::option::Option<crate::types::EncryptionAlgorithmOptions>) -> Self {
        self.encryption_algorithm_options = input;
        self
    }
    /// <p>The encryption algorithm options that are available for a code signing job.</p>
    pub fn get_encryption_algorithm_options(&self) -> &::std::option::Option<crate::types::EncryptionAlgorithmOptions> {
        &self.encryption_algorithm_options
    }
    /// <p>The hash algorithm options that are available for a code signing job.</p>
    /// This field is required.
    pub fn hash_algorithm_options(mut self, input: crate::types::HashAlgorithmOptions) -> Self {
        self.hash_algorithm_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The hash algorithm options that are available for a code signing job.</p>
    pub fn set_hash_algorithm_options(mut self, input: ::std::option::Option<crate::types::HashAlgorithmOptions>) -> Self {
        self.hash_algorithm_options = input;
        self
    }
    /// <p>The hash algorithm options that are available for a code signing job.</p>
    pub fn get_hash_algorithm_options(&self) -> &::std::option::Option<crate::types::HashAlgorithmOptions> {
        &self.hash_algorithm_options
    }
    /// Consumes the builder and constructs a [`SigningConfiguration`](crate::types::SigningConfiguration).
    pub fn build(self) -> crate::types::SigningConfiguration {
        crate::types::SigningConfiguration {
            encryption_algorithm_options: self.encryption_algorithm_options,
            hash_algorithm_options: self.hash_algorithm_options,
        }
    }
}
