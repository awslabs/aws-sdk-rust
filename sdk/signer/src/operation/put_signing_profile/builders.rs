// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::put_signing_profile::_put_signing_profile_output::PutSigningProfileOutputBuilder;

pub use crate::operation::put_signing_profile::_put_signing_profile_input::PutSigningProfileInputBuilder;

/// Fluent builder constructing a request to `PutSigningProfile`.
///
/// <p>Creates a signing profile. A signing profile is a code signing template that can be used to carry out a pre-defined signing job. For more information, see <a href="http://docs.aws.amazon.com/signer/latest/developerguide/gs-profile.html">http://docs.aws.amazon.com/signer/latest/developerguide/gs-profile.html</a> </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct PutSigningProfileFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::put_signing_profile::builders::PutSigningProfileInputBuilder,
}
impl PutSigningProfileFluentBuilder {
    /// Creates a new `PutSigningProfile`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::put_signing_profile::PutSigningProfile,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::put_signing_profile::PutSigningProfileError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::put_signing_profile::PutSigningProfileOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::put_signing_profile::PutSigningProfileError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the signing profile to be created.</p>
    pub fn profile_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.profile_name(input.into());
        self
    }
    /// <p>The name of the signing profile to be created.</p>
    pub fn set_profile_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_profile_name(input);
        self
    }
    /// <p>The AWS Certificate Manager certificate that will be used to sign code with the new signing profile.</p>
    pub fn signing_material(mut self, input: crate::types::SigningMaterial) -> Self {
        self.inner = self.inner.signing_material(input);
        self
    }
    /// <p>The AWS Certificate Manager certificate that will be used to sign code with the new signing profile.</p>
    pub fn set_signing_material(
        mut self,
        input: std::option::Option<crate::types::SigningMaterial>,
    ) -> Self {
        self.inner = self.inner.set_signing_material(input);
        self
    }
    /// <p>The default validity period override for any signature generated using this signing profile. If unspecified, the default is 135 months.</p>
    pub fn signature_validity_period(
        mut self,
        input: crate::types::SignatureValidityPeriod,
    ) -> Self {
        self.inner = self.inner.signature_validity_period(input);
        self
    }
    /// <p>The default validity period override for any signature generated using this signing profile. If unspecified, the default is 135 months.</p>
    pub fn set_signature_validity_period(
        mut self,
        input: std::option::Option<crate::types::SignatureValidityPeriod>,
    ) -> Self {
        self.inner = self.inner.set_signature_validity_period(input);
        self
    }
    /// <p>The ID of the signing platform to be created.</p>
    pub fn platform_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.platform_id(input.into());
        self
    }
    /// <p>The ID of the signing platform to be created.</p>
    pub fn set_platform_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_platform_id(input);
        self
    }
    /// <p>A subfield of <code>platform</code>. This specifies any different configuration options that you want to apply to the chosen platform (such as a different <code>hash-algorithm</code> or <code>signing-algorithm</code>).</p>
    pub fn overrides(mut self, input: crate::types::SigningPlatformOverrides) -> Self {
        self.inner = self.inner.overrides(input);
        self
    }
    /// <p>A subfield of <code>platform</code>. This specifies any different configuration options that you want to apply to the chosen platform (such as a different <code>hash-algorithm</code> or <code>signing-algorithm</code>).</p>
    pub fn set_overrides(
        mut self,
        input: std::option::Option<crate::types::SigningPlatformOverrides>,
    ) -> Self {
        self.inner = self.inner.set_overrides(input);
        self
    }
    /// Adds a key-value pair to `signingParameters`.
    ///
    /// To override the contents of this collection use [`set_signing_parameters`](Self::set_signing_parameters).
    ///
    /// <p>Map of key-value pairs for signing. These can include any information that you want to use during signing.</p>
    pub fn signing_parameters(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.signing_parameters(k.into(), v.into());
        self
    }
    /// <p>Map of key-value pairs for signing. These can include any information that you want to use during signing.</p>
    pub fn set_signing_parameters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_signing_parameters(input);
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags to be associated with the signing profile that is being created.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>Tags to be associated with the signing profile that is being created.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}
