// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSigningPlatformOutput {
    /// <p>The ID of the target signing platform.</p>
    #[doc(hidden)]
    pub platform_id: std::option::Option<std::string::String>,
    /// <p>The display name of the target signing platform.</p>
    #[doc(hidden)]
    pub display_name: std::option::Option<std::string::String>,
    /// <p>A list of partner entities that use the target signing platform.</p>
    #[doc(hidden)]
    pub partner: std::option::Option<std::string::String>,
    /// <p>The validation template that is used by the target signing platform.</p>
    #[doc(hidden)]
    pub target: std::option::Option<std::string::String>,
    /// <p>The category type of the target signing platform.</p>
    #[doc(hidden)]
    pub category: std::option::Option<crate::types::Category>,
    /// <p>A list of configurations applied to the target platform at signing.</p>
    #[doc(hidden)]
    pub signing_configuration: std::option::Option<crate::types::SigningConfiguration>,
    /// <p>The format of the target platform's signing image.</p>
    #[doc(hidden)]
    pub signing_image_format: std::option::Option<crate::types::SigningImageFormat>,
    /// <p>The maximum size (in MB) of the payload that can be signed by the target platform.</p>
    #[doc(hidden)]
    pub max_size_in_mb: i32,
    /// <p>A flag indicating whether signatures generated for the signing platform can be revoked.</p>
    #[doc(hidden)]
    pub revocation_supported: bool,
    _request_id: Option<String>,
}
impl GetSigningPlatformOutput {
    /// <p>The ID of the target signing platform.</p>
    pub fn platform_id(&self) -> std::option::Option<&str> {
        self.platform_id.as_deref()
    }
    /// <p>The display name of the target signing platform.</p>
    pub fn display_name(&self) -> std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>A list of partner entities that use the target signing platform.</p>
    pub fn partner(&self) -> std::option::Option<&str> {
        self.partner.as_deref()
    }
    /// <p>The validation template that is used by the target signing platform.</p>
    pub fn target(&self) -> std::option::Option<&str> {
        self.target.as_deref()
    }
    /// <p>The category type of the target signing platform.</p>
    pub fn category(&self) -> std::option::Option<&crate::types::Category> {
        self.category.as_ref()
    }
    /// <p>A list of configurations applied to the target platform at signing.</p>
    pub fn signing_configuration(
        &self,
    ) -> std::option::Option<&crate::types::SigningConfiguration> {
        self.signing_configuration.as_ref()
    }
    /// <p>The format of the target platform's signing image.</p>
    pub fn signing_image_format(&self) -> std::option::Option<&crate::types::SigningImageFormat> {
        self.signing_image_format.as_ref()
    }
    /// <p>The maximum size (in MB) of the payload that can be signed by the target platform.</p>
    pub fn max_size_in_mb(&self) -> i32 {
        self.max_size_in_mb
    }
    /// <p>A flag indicating whether signatures generated for the signing platform can be revoked.</p>
    pub fn revocation_supported(&self) -> bool {
        self.revocation_supported
    }
}
impl aws_http::request_id::RequestId for GetSigningPlatformOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetSigningPlatformOutput {
    /// Creates a new builder-style object to manufacture [`GetSigningPlatformOutput`](crate::operation::get_signing_platform::GetSigningPlatformOutput).
    pub fn builder(
    ) -> crate::operation::get_signing_platform::builders::GetSigningPlatformOutputBuilder {
        crate::operation::get_signing_platform::builders::GetSigningPlatformOutputBuilder::default()
    }
}

/// A builder for [`GetSigningPlatformOutput`](crate::operation::get_signing_platform::GetSigningPlatformOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetSigningPlatformOutputBuilder {
    pub(crate) platform_id: std::option::Option<std::string::String>,
    pub(crate) display_name: std::option::Option<std::string::String>,
    pub(crate) partner: std::option::Option<std::string::String>,
    pub(crate) target: std::option::Option<std::string::String>,
    pub(crate) category: std::option::Option<crate::types::Category>,
    pub(crate) signing_configuration: std::option::Option<crate::types::SigningConfiguration>,
    pub(crate) signing_image_format: std::option::Option<crate::types::SigningImageFormat>,
    pub(crate) max_size_in_mb: std::option::Option<i32>,
    pub(crate) revocation_supported: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl GetSigningPlatformOutputBuilder {
    /// <p>The ID of the target signing platform.</p>
    pub fn platform_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.platform_id = Some(input.into());
        self
    }
    /// <p>The ID of the target signing platform.</p>
    pub fn set_platform_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.platform_id = input;
        self
    }
    /// <p>The display name of the target signing platform.</p>
    pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.display_name = Some(input.into());
        self
    }
    /// <p>The display name of the target signing platform.</p>
    pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>A list of partner entities that use the target signing platform.</p>
    pub fn partner(mut self, input: impl Into<std::string::String>) -> Self {
        self.partner = Some(input.into());
        self
    }
    /// <p>A list of partner entities that use the target signing platform.</p>
    pub fn set_partner(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.partner = input;
        self
    }
    /// <p>The validation template that is used by the target signing platform.</p>
    pub fn target(mut self, input: impl Into<std::string::String>) -> Self {
        self.target = Some(input.into());
        self
    }
    /// <p>The validation template that is used by the target signing platform.</p>
    pub fn set_target(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.target = input;
        self
    }
    /// <p>The category type of the target signing platform.</p>
    pub fn category(mut self, input: crate::types::Category) -> Self {
        self.category = Some(input);
        self
    }
    /// <p>The category type of the target signing platform.</p>
    pub fn set_category(mut self, input: std::option::Option<crate::types::Category>) -> Self {
        self.category = input;
        self
    }
    /// <p>A list of configurations applied to the target platform at signing.</p>
    pub fn signing_configuration(mut self, input: crate::types::SigningConfiguration) -> Self {
        self.signing_configuration = Some(input);
        self
    }
    /// <p>A list of configurations applied to the target platform at signing.</p>
    pub fn set_signing_configuration(
        mut self,
        input: std::option::Option<crate::types::SigningConfiguration>,
    ) -> Self {
        self.signing_configuration = input;
        self
    }
    /// <p>The format of the target platform's signing image.</p>
    pub fn signing_image_format(mut self, input: crate::types::SigningImageFormat) -> Self {
        self.signing_image_format = Some(input);
        self
    }
    /// <p>The format of the target platform's signing image.</p>
    pub fn set_signing_image_format(
        mut self,
        input: std::option::Option<crate::types::SigningImageFormat>,
    ) -> Self {
        self.signing_image_format = input;
        self
    }
    /// <p>The maximum size (in MB) of the payload that can be signed by the target platform.</p>
    pub fn max_size_in_mb(mut self, input: i32) -> Self {
        self.max_size_in_mb = Some(input);
        self
    }
    /// <p>The maximum size (in MB) of the payload that can be signed by the target platform.</p>
    pub fn set_max_size_in_mb(mut self, input: std::option::Option<i32>) -> Self {
        self.max_size_in_mb = input;
        self
    }
    /// <p>A flag indicating whether signatures generated for the signing platform can be revoked.</p>
    pub fn revocation_supported(mut self, input: bool) -> Self {
        self.revocation_supported = Some(input);
        self
    }
    /// <p>A flag indicating whether signatures generated for the signing platform can be revoked.</p>
    pub fn set_revocation_supported(mut self, input: std::option::Option<bool>) -> Self {
        self.revocation_supported = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetSigningPlatformOutput`](crate::operation::get_signing_platform::GetSigningPlatformOutput).
    pub fn build(self) -> crate::operation::get_signing_platform::GetSigningPlatformOutput {
        crate::operation::get_signing_platform::GetSigningPlatformOutput {
            platform_id: self.platform_id,
            display_name: self.display_name,
            partner: self.partner,
            target: self.target,
            category: self.category,
            signing_configuration: self.signing_configuration,
            signing_image_format: self.signing_image_format,
            max_size_in_mb: self.max_size_in_mb.unwrap_or_default(),
            revocation_supported: self.revocation_supported.unwrap_or_default(),
            _request_id: self._request_id,
        }
    }
}
