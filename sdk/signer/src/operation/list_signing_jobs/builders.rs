// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_signing_jobs::_list_signing_jobs_output::ListSigningJobsOutputBuilder;

pub use crate::operation::list_signing_jobs::_list_signing_jobs_input::ListSigningJobsInputBuilder;

/// Fluent builder constructing a request to `ListSigningJobs`.
///
/// <p>Lists all your signing jobs. You can use the <code>maxResults</code> parameter to limit the number of signing jobs that are returned in the response. If additional jobs remain to be listed, code signing returns a <code>nextToken</code> value. Use this value in subsequent calls to <code>ListSigningJobs</code> to fetch the remaining values. You can continue calling <code>ListSigningJobs</code> with your <code>maxResults</code> parameter and with new values that code signing returns in the <code>nextToken</code> parameter until all of your signing jobs have been returned. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListSigningJobsFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_signing_jobs::builders::ListSigningJobsInputBuilder,
}
impl ListSigningJobsFluentBuilder {
    /// Creates a new `ListSigningJobs`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::list_signing_jobs::ListSigningJobs,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::list_signing_jobs::ListSigningJobsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::list_signing_jobs::ListSigningJobsOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::list_signing_jobs::ListSigningJobsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_signing_jobs::paginator::ListSigningJobsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::operation::list_signing_jobs::paginator::ListSigningJobsPaginator {
        crate::operation::list_signing_jobs::paginator::ListSigningJobsPaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// <p>A status value with which to filter your results.</p>
    pub fn status(mut self, input: crate::types::SigningStatus) -> Self {
        self.inner = self.inner.status(input);
        self
    }
    /// <p>A status value with which to filter your results.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::SigningStatus>) -> Self {
        self.inner = self.inner.set_status(input);
        self
    }
    /// <p>The ID of microcontroller platform that you specified for the distribution of your code image.</p>
    pub fn platform_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.platform_id(input.into());
        self
    }
    /// <p>The ID of microcontroller platform that you specified for the distribution of your code image.</p>
    pub fn set_platform_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_platform_id(input);
        self
    }
    /// <p>The IAM principal that requested the signing job.</p>
    pub fn requested_by(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.requested_by(input.into());
        self
    }
    /// <p>The IAM principal that requested the signing job.</p>
    pub fn set_requested_by(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_requested_by(input);
        self
    }
    /// <p>Specifies the maximum number of items to return in the response. Use this parameter when paginating results. If additional items exist beyond the number you specify, the <code>nextToken</code> element is set in the response. Use the <code>nextToken</code> value in a subsequent request to retrieve additional items. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>Specifies the maximum number of items to return in the response. Use this parameter when paginating results. If additional items exist beyond the number you specify, the <code>nextToken</code> element is set in the response. Use the <code>nextToken</code> value in a subsequent request to retrieve additional items. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>String for specifying the next set of paginated results to return. After you receive a response with truncated results, use this parameter in a subsequent request. Set it to the value of <code>nextToken</code> from the response that you just received.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>String for specifying the next set of paginated results to return. After you receive a response with truncated results, use this parameter in a subsequent request. Set it to the value of <code>nextToken</code> from the response that you just received.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>Filters results to return only signing jobs with revoked signatures.</p>
    pub fn is_revoked(mut self, input: bool) -> Self {
        self.inner = self.inner.is_revoked(input);
        self
    }
    /// <p>Filters results to return only signing jobs with revoked signatures.</p>
    pub fn set_is_revoked(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_is_revoked(input);
        self
    }
    /// <p>Filters results to return only signing jobs with signatures expiring before a specified timestamp.</p>
    pub fn signature_expires_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.signature_expires_before(input);
        self
    }
    /// <p>Filters results to return only signing jobs with signatures expiring before a specified timestamp.</p>
    pub fn set_signature_expires_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_signature_expires_before(input);
        self
    }
    /// <p>Filters results to return only signing jobs with signatures expiring after a specified timestamp.</p>
    pub fn signature_expires_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.signature_expires_after(input);
        self
    }
    /// <p>Filters results to return only signing jobs with signatures expiring after a specified timestamp.</p>
    pub fn set_signature_expires_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_signature_expires_after(input);
        self
    }
    /// <p>Filters results to return only signing jobs initiated by a specified IAM entity.</p>
    pub fn job_invoker(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_invoker(input.into());
        self
    }
    /// <p>Filters results to return only signing jobs initiated by a specified IAM entity.</p>
    pub fn set_job_invoker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_job_invoker(input);
        self
    }
}
