// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListSigningJobsInput {
    /// <p>A status value with which to filter your results.</p>
    pub status: ::std::option::Option<crate::types::SigningStatus>,
    /// <p>The ID of microcontroller platform that you specified for the distribution of your code image.</p>
    pub platform_id: ::std::option::Option<::std::string::String>,
    /// <p>The IAM principal that requested the signing job.</p>
    pub requested_by: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the maximum number of items to return in the response. Use this parameter when paginating results. If additional items exist beyond the number you specify, the <code>nextToken</code> element is set in the response. Use the <code>nextToken</code> value in a subsequent request to retrieve additional items. </p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>String for specifying the next set of paginated results to return. After you receive a response with truncated results, use this parameter in a subsequent request. Set it to the value of <code>nextToken</code> from the response that you just received.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>Filters results to return only signing jobs with revoked signatures.</p>
    pub is_revoked: ::std::option::Option<bool>,
    /// <p>Filters results to return only signing jobs with signatures expiring before a specified timestamp.</p>
    pub signature_expires_before: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Filters results to return only signing jobs with signatures expiring after a specified timestamp.</p>
    pub signature_expires_after: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Filters results to return only signing jobs initiated by a specified IAM entity.</p>
    pub job_invoker: ::std::option::Option<::std::string::String>,
}
impl ListSigningJobsInput {
    /// <p>A status value with which to filter your results.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::SigningStatus> {
        self.status.as_ref()
    }
    /// <p>The ID of microcontroller platform that you specified for the distribution of your code image.</p>
    pub fn platform_id(&self) -> ::std::option::Option<&str> {
        self.platform_id.as_deref()
    }
    /// <p>The IAM principal that requested the signing job.</p>
    pub fn requested_by(&self) -> ::std::option::Option<&str> {
        self.requested_by.as_deref()
    }
    /// <p>Specifies the maximum number of items to return in the response. Use this parameter when paginating results. If additional items exist beyond the number you specify, the <code>nextToken</code> element is set in the response. Use the <code>nextToken</code> value in a subsequent request to retrieve additional items. </p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>String for specifying the next set of paginated results to return. After you receive a response with truncated results, use this parameter in a subsequent request. Set it to the value of <code>nextToken</code> from the response that you just received.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Filters results to return only signing jobs with revoked signatures.</p>
    pub fn is_revoked(&self) -> ::std::option::Option<bool> {
        self.is_revoked
    }
    /// <p>Filters results to return only signing jobs with signatures expiring before a specified timestamp.</p>
    pub fn signature_expires_before(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.signature_expires_before.as_ref()
    }
    /// <p>Filters results to return only signing jobs with signatures expiring after a specified timestamp.</p>
    pub fn signature_expires_after(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.signature_expires_after.as_ref()
    }
    /// <p>Filters results to return only signing jobs initiated by a specified IAM entity.</p>
    pub fn job_invoker(&self) -> ::std::option::Option<&str> {
        self.job_invoker.as_deref()
    }
}
impl ListSigningJobsInput {
    /// Creates a new builder-style object to manufacture [`ListSigningJobsInput`](crate::operation::list_signing_jobs::ListSigningJobsInput).
    pub fn builder() -> crate::operation::list_signing_jobs::builders::ListSigningJobsInputBuilder {
        crate::operation::list_signing_jobs::builders::ListSigningJobsInputBuilder::default()
    }
}

/// A builder for [`ListSigningJobsInput`](crate::operation::list_signing_jobs::ListSigningJobsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListSigningJobsInputBuilder {
    pub(crate) status: ::std::option::Option<crate::types::SigningStatus>,
    pub(crate) platform_id: ::std::option::Option<::std::string::String>,
    pub(crate) requested_by: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) is_revoked: ::std::option::Option<bool>,
    pub(crate) signature_expires_before: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) signature_expires_after: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) job_invoker: ::std::option::Option<::std::string::String>,
}
impl ListSigningJobsInputBuilder {
    /// <p>A status value with which to filter your results.</p>
    pub fn status(mut self, input: crate::types::SigningStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>A status value with which to filter your results.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::SigningStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>A status value with which to filter your results.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::SigningStatus> {
        &self.status
    }
    /// <p>The ID of microcontroller platform that you specified for the distribution of your code image.</p>
    pub fn platform_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.platform_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of microcontroller platform that you specified for the distribution of your code image.</p>
    pub fn set_platform_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.platform_id = input;
        self
    }
    /// <p>The ID of microcontroller platform that you specified for the distribution of your code image.</p>
    pub fn get_platform_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.platform_id
    }
    /// <p>The IAM principal that requested the signing job.</p>
    pub fn requested_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.requested_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IAM principal that requested the signing job.</p>
    pub fn set_requested_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.requested_by = input;
        self
    }
    /// <p>The IAM principal that requested the signing job.</p>
    pub fn get_requested_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.requested_by
    }
    /// <p>Specifies the maximum number of items to return in the response. Use this parameter when paginating results. If additional items exist beyond the number you specify, the <code>nextToken</code> element is set in the response. Use the <code>nextToken</code> value in a subsequent request to retrieve additional items. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the maximum number of items to return in the response. Use this parameter when paginating results. If additional items exist beyond the number you specify, the <code>nextToken</code> element is set in the response. Use the <code>nextToken</code> value in a subsequent request to retrieve additional items. </p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>Specifies the maximum number of items to return in the response. Use this parameter when paginating results. If additional items exist beyond the number you specify, the <code>nextToken</code> element is set in the response. Use the <code>nextToken</code> value in a subsequent request to retrieve additional items. </p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>String for specifying the next set of paginated results to return. After you receive a response with truncated results, use this parameter in a subsequent request. Set it to the value of <code>nextToken</code> from the response that you just received.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>String for specifying the next set of paginated results to return. After you receive a response with truncated results, use this parameter in a subsequent request. Set it to the value of <code>nextToken</code> from the response that you just received.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>String for specifying the next set of paginated results to return. After you receive a response with truncated results, use this parameter in a subsequent request. Set it to the value of <code>nextToken</code> from the response that you just received.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>Filters results to return only signing jobs with revoked signatures.</p>
    pub fn is_revoked(mut self, input: bool) -> Self {
        self.is_revoked = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filters results to return only signing jobs with revoked signatures.</p>
    pub fn set_is_revoked(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_revoked = input;
        self
    }
    /// <p>Filters results to return only signing jobs with revoked signatures.</p>
    pub fn get_is_revoked(&self) -> &::std::option::Option<bool> {
        &self.is_revoked
    }
    /// <p>Filters results to return only signing jobs with signatures expiring before a specified timestamp.</p>
    pub fn signature_expires_before(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.signature_expires_before = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filters results to return only signing jobs with signatures expiring before a specified timestamp.</p>
    pub fn set_signature_expires_before(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.signature_expires_before = input;
        self
    }
    /// <p>Filters results to return only signing jobs with signatures expiring before a specified timestamp.</p>
    pub fn get_signature_expires_before(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.signature_expires_before
    }
    /// <p>Filters results to return only signing jobs with signatures expiring after a specified timestamp.</p>
    pub fn signature_expires_after(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.signature_expires_after = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filters results to return only signing jobs with signatures expiring after a specified timestamp.</p>
    pub fn set_signature_expires_after(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.signature_expires_after = input;
        self
    }
    /// <p>Filters results to return only signing jobs with signatures expiring after a specified timestamp.</p>
    pub fn get_signature_expires_after(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.signature_expires_after
    }
    /// <p>Filters results to return only signing jobs initiated by a specified IAM entity.</p>
    pub fn job_invoker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_invoker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Filters results to return only signing jobs initiated by a specified IAM entity.</p>
    pub fn set_job_invoker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_invoker = input;
        self
    }
    /// <p>Filters results to return only signing jobs initiated by a specified IAM entity.</p>
    pub fn get_job_invoker(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_invoker
    }
    /// Consumes the builder and constructs a [`ListSigningJobsInput`](crate::operation::list_signing_jobs::ListSigningJobsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_signing_jobs::ListSigningJobsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_signing_jobs::ListSigningJobsInput {
            status: self.status,
            platform_id: self.platform_id,
            requested_by: self.requested_by,
            max_results: self.max_results,
            next_token: self.next_token,
            is_revoked: self.is_revoked,
            signature_expires_before: self.signature_expires_before,
            signature_expires_after: self.signature_expires_after,
            job_invoker: self.job_invoker,
        })
    }
}
