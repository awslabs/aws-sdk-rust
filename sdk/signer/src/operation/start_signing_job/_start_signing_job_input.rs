// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartSigningJobInput {
    /// <p>The S3 bucket that contains the object to sign or a BLOB that contains your raw code.</p>
    #[doc(hidden)]
    pub source: std::option::Option<crate::types::Source>,
    /// <p>The S3 bucket in which to save your signed object. The destination contains the name of your bucket and an optional prefix.</p>
    #[doc(hidden)]
    pub destination: std::option::Option<crate::types::Destination>,
    /// <p>The name of the signing profile.</p>
    #[doc(hidden)]
    pub profile_name: std::option::Option<std::string::String>,
    /// <p>String that identifies the signing request. All calls after the first that use this token return the same response as the first call.</p>
    #[doc(hidden)]
    pub client_request_token: std::option::Option<std::string::String>,
    /// <p>The AWS account ID of the signing profile owner.</p>
    #[doc(hidden)]
    pub profile_owner: std::option::Option<std::string::String>,
}
impl StartSigningJobInput {
    /// <p>The S3 bucket that contains the object to sign or a BLOB that contains your raw code.</p>
    pub fn source(&self) -> std::option::Option<&crate::types::Source> {
        self.source.as_ref()
    }
    /// <p>The S3 bucket in which to save your signed object. The destination contains the name of your bucket and an optional prefix.</p>
    pub fn destination(&self) -> std::option::Option<&crate::types::Destination> {
        self.destination.as_ref()
    }
    /// <p>The name of the signing profile.</p>
    pub fn profile_name(&self) -> std::option::Option<&str> {
        self.profile_name.as_deref()
    }
    /// <p>String that identifies the signing request. All calls after the first that use this token return the same response as the first call.</p>
    pub fn client_request_token(&self) -> std::option::Option<&str> {
        self.client_request_token.as_deref()
    }
    /// <p>The AWS account ID of the signing profile owner.</p>
    pub fn profile_owner(&self) -> std::option::Option<&str> {
        self.profile_owner.as_deref()
    }
}
impl StartSigningJobInput {
    /// Creates a new builder-style object to manufacture [`StartSigningJobInput`](crate::operation::start_signing_job::StartSigningJobInput).
    pub fn builder() -> crate::operation::start_signing_job::builders::StartSigningJobInputBuilder {
        crate::operation::start_signing_job::builders::StartSigningJobInputBuilder::default()
    }
}

/// A builder for [`StartSigningJobInput`](crate::operation::start_signing_job::StartSigningJobInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StartSigningJobInputBuilder {
    pub(crate) source: std::option::Option<crate::types::Source>,
    pub(crate) destination: std::option::Option<crate::types::Destination>,
    pub(crate) profile_name: std::option::Option<std::string::String>,
    pub(crate) client_request_token: std::option::Option<std::string::String>,
    pub(crate) profile_owner: std::option::Option<std::string::String>,
}
impl StartSigningJobInputBuilder {
    /// <p>The S3 bucket that contains the object to sign or a BLOB that contains your raw code.</p>
    pub fn source(mut self, input: crate::types::Source) -> Self {
        self.source = Some(input);
        self
    }
    /// <p>The S3 bucket that contains the object to sign or a BLOB that contains your raw code.</p>
    pub fn set_source(mut self, input: std::option::Option<crate::types::Source>) -> Self {
        self.source = input;
        self
    }
    /// <p>The S3 bucket in which to save your signed object. The destination contains the name of your bucket and an optional prefix.</p>
    pub fn destination(mut self, input: crate::types::Destination) -> Self {
        self.destination = Some(input);
        self
    }
    /// <p>The S3 bucket in which to save your signed object. The destination contains the name of your bucket and an optional prefix.</p>
    pub fn set_destination(
        mut self,
        input: std::option::Option<crate::types::Destination>,
    ) -> Self {
        self.destination = input;
        self
    }
    /// <p>The name of the signing profile.</p>
    pub fn profile_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.profile_name = Some(input.into());
        self
    }
    /// <p>The name of the signing profile.</p>
    pub fn set_profile_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.profile_name = input;
        self
    }
    /// <p>String that identifies the signing request. All calls after the first that use this token return the same response as the first call.</p>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_request_token = Some(input.into());
        self
    }
    /// <p>String that identifies the signing request. All calls after the first that use this token return the same response as the first call.</p>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.client_request_token = input;
        self
    }
    /// <p>The AWS account ID of the signing profile owner.</p>
    pub fn profile_owner(mut self, input: impl Into<std::string::String>) -> Self {
        self.profile_owner = Some(input.into());
        self
    }
    /// <p>The AWS account ID of the signing profile owner.</p>
    pub fn set_profile_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.profile_owner = input;
        self
    }
    /// Consumes the builder and constructs a [`StartSigningJobInput`](crate::operation::start_signing_job::StartSigningJobInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::start_signing_job::StartSigningJobInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::start_signing_job::StartSigningJobInput {
            source: self.source,
            destination: self.destination,
            profile_name: self.profile_name,
            client_request_token: self.client_request_token,
            profile_owner: self.profile_owner,
        })
    }
}
