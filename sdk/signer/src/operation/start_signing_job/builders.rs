// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::start_signing_job::_start_signing_job_output::StartSigningJobOutputBuilder;

pub use crate::operation::start_signing_job::_start_signing_job_input::StartSigningJobInputBuilder;

impl crate::operation::start_signing_job::builders::StartSigningJobInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::start_signing_job::StartSigningJobOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_signing_job::StartSigningJobError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.start_signing_job();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `StartSigningJob`.
///
/// <p>Initiates a signing job to be performed on the code provided. Signing jobs are viewable by the <code>ListSigningJobs</code> operation for two years after they are performed. Note the following requirements:</p>
/// <ul>
/// <li>
/// <p>You must create an Amazon S3 source bucket. For more information, see <a href="http://docs.aws.amazon.com/AmazonS3/latest/gsg/CreatingABucket.html">Creating a Bucket</a> in the <i>Amazon S3 Getting Started Guide</i>.</p></li>
/// <li>
/// <p>Your S3 source bucket must be version enabled.</p></li>
/// <li>
/// <p>You must create an S3 destination bucket. AWS Signer uses your S3 destination bucket to write your signed code.</p></li>
/// <li>
/// <p>You specify the name of the source and destination buckets when calling the <code>StartSigningJob</code> operation.</p></li>
/// <li>
/// <p>You must also specify a request token that identifies your request to Signer.</p></li>
/// </ul>
/// <p>You can call the <code>DescribeSigningJob</code> and the <code>ListSigningJobs</code> actions after you call <code>StartSigningJob</code>.</p>
/// <p>For a Java example that shows how to use this action, see <a href="https://docs.aws.amazon.com/signer/latest/developerguide/api-startsigningjob.html">StartSigningJob</a>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct StartSigningJobFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::start_signing_job::builders::StartSigningJobInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::start_signing_job::StartSigningJobOutput,
        crate::operation::start_signing_job::StartSigningJobError,
    > for StartSigningJobFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::start_signing_job::StartSigningJobOutput,
            crate::operation::start_signing_job::StartSigningJobError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl StartSigningJobFluentBuilder {
    /// Creates a new `StartSigningJob`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the StartSigningJob as a reference.
    pub fn as_input(&self) -> &crate::operation::start_signing_job::builders::StartSigningJobInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_signing_job::StartSigningJobOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_signing_job::StartSigningJobError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::start_signing_job::StartSigningJob::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::start_signing_job::StartSigningJob::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::start_signing_job::StartSigningJobOutput,
        crate::operation::start_signing_job::StartSigningJobError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The S3 bucket that contains the object to sign or a BLOB that contains your raw code.</p>
    pub fn source(mut self, input: crate::types::Source) -> Self {
        self.inner = self.inner.source(input);
        self
    }
    /// <p>The S3 bucket that contains the object to sign or a BLOB that contains your raw code.</p>
    pub fn set_source(mut self, input: ::std::option::Option<crate::types::Source>) -> Self {
        self.inner = self.inner.set_source(input);
        self
    }
    /// <p>The S3 bucket that contains the object to sign or a BLOB that contains your raw code.</p>
    pub fn get_source(&self) -> &::std::option::Option<crate::types::Source> {
        self.inner.get_source()
    }
    /// <p>The S3 bucket in which to save your signed object. The destination contains the name of your bucket and an optional prefix.</p>
    pub fn destination(mut self, input: crate::types::Destination) -> Self {
        self.inner = self.inner.destination(input);
        self
    }
    /// <p>The S3 bucket in which to save your signed object. The destination contains the name of your bucket and an optional prefix.</p>
    pub fn set_destination(mut self, input: ::std::option::Option<crate::types::Destination>) -> Self {
        self.inner = self.inner.set_destination(input);
        self
    }
    /// <p>The S3 bucket in which to save your signed object. The destination contains the name of your bucket and an optional prefix.</p>
    pub fn get_destination(&self) -> &::std::option::Option<crate::types::Destination> {
        self.inner.get_destination()
    }
    /// <p>The name of the signing profile.</p>
    pub fn profile_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.profile_name(input.into());
        self
    }
    /// <p>The name of the signing profile.</p>
    pub fn set_profile_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_profile_name(input);
        self
    }
    /// <p>The name of the signing profile.</p>
    pub fn get_profile_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_profile_name()
    }
    /// <p>String that identifies the signing request. All calls after the first that use this token return the same response as the first call.</p>
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>String that identifies the signing request. All calls after the first that use this token return the same response as the first call.</p>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
    /// <p>String that identifies the signing request. All calls after the first that use this token return the same response as the first call.</p>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_request_token()
    }
    /// <p>The AWS account ID of the signing profile owner.</p>
    pub fn profile_owner(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.profile_owner(input.into());
        self
    }
    /// <p>The AWS account ID of the signing profile owner.</p>
    pub fn set_profile_owner(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_profile_owner(input);
        self
    }
    /// <p>The AWS account ID of the signing profile owner.</p>
    pub fn get_profile_owner(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_profile_owner()
    }
}
