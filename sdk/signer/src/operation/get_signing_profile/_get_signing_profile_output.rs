// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSigningProfileOutput {
    /// <p>The name of the target signing profile.</p>
    #[doc(hidden)]
    pub profile_name: std::option::Option<std::string::String>,
    /// <p>The current version of the signing profile.</p>
    #[doc(hidden)]
    pub profile_version: std::option::Option<std::string::String>,
    /// <p>The signing profile ARN, including the profile version.</p>
    #[doc(hidden)]
    pub profile_version_arn: std::option::Option<std::string::String>,
    /// <p>Revocation information for a signing profile.</p>
    #[doc(hidden)]
    pub revocation_record: std::option::Option<crate::types::SigningProfileRevocationRecord>,
    /// <p>The ARN of the certificate that the target profile uses for signing operations.</p>
    #[doc(hidden)]
    pub signing_material: std::option::Option<crate::types::SigningMaterial>,
    /// <p>The ID of the platform that is used by the target signing profile.</p>
    #[doc(hidden)]
    pub platform_id: std::option::Option<std::string::String>,
    /// <p>A human-readable name for the signing platform associated with the signing profile.</p>
    #[doc(hidden)]
    pub platform_display_name: std::option::Option<std::string::String>,
    /// <p>The validity period for a signing job.</p>
    #[doc(hidden)]
    pub signature_validity_period: std::option::Option<crate::types::SignatureValidityPeriod>,
    /// <p>A list of overrides applied by the target signing profile for signing operations.</p>
    #[doc(hidden)]
    pub overrides: std::option::Option<crate::types::SigningPlatformOverrides>,
    /// <p>A map of key-value pairs for signing operations that is attached to the target signing profile.</p>
    #[doc(hidden)]
    pub signing_parameters:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The status of the target signing profile.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::SigningProfileStatus>,
    /// <p>Reason for the status of the target signing profile.</p>
    #[doc(hidden)]
    pub status_reason: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) for the signing profile.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>A list of tags associated with the signing profile.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl GetSigningProfileOutput {
    /// <p>The name of the target signing profile.</p>
    pub fn profile_name(&self) -> std::option::Option<&str> {
        self.profile_name.as_deref()
    }
    /// <p>The current version of the signing profile.</p>
    pub fn profile_version(&self) -> std::option::Option<&str> {
        self.profile_version.as_deref()
    }
    /// <p>The signing profile ARN, including the profile version.</p>
    pub fn profile_version_arn(&self) -> std::option::Option<&str> {
        self.profile_version_arn.as_deref()
    }
    /// <p>Revocation information for a signing profile.</p>
    pub fn revocation_record(
        &self,
    ) -> std::option::Option<&crate::types::SigningProfileRevocationRecord> {
        self.revocation_record.as_ref()
    }
    /// <p>The ARN of the certificate that the target profile uses for signing operations.</p>
    pub fn signing_material(&self) -> std::option::Option<&crate::types::SigningMaterial> {
        self.signing_material.as_ref()
    }
    /// <p>The ID of the platform that is used by the target signing profile.</p>
    pub fn platform_id(&self) -> std::option::Option<&str> {
        self.platform_id.as_deref()
    }
    /// <p>A human-readable name for the signing platform associated with the signing profile.</p>
    pub fn platform_display_name(&self) -> std::option::Option<&str> {
        self.platform_display_name.as_deref()
    }
    /// <p>The validity period for a signing job.</p>
    pub fn signature_validity_period(
        &self,
    ) -> std::option::Option<&crate::types::SignatureValidityPeriod> {
        self.signature_validity_period.as_ref()
    }
    /// <p>A list of overrides applied by the target signing profile for signing operations.</p>
    pub fn overrides(&self) -> std::option::Option<&crate::types::SigningPlatformOverrides> {
        self.overrides.as_ref()
    }
    /// <p>A map of key-value pairs for signing operations that is attached to the target signing profile.</p>
    pub fn signing_parameters(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.signing_parameters.as_ref()
    }
    /// <p>The status of the target signing profile.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::SigningProfileStatus> {
        self.status.as_ref()
    }
    /// <p>Reason for the status of the target signing profile.</p>
    pub fn status_reason(&self) -> std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) for the signing profile.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>A list of tags associated with the signing profile.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetSigningProfileOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetSigningProfileOutput {
    /// Creates a new builder-style object to manufacture [`GetSigningProfileOutput`](crate::operation::get_signing_profile::GetSigningProfileOutput).
    pub fn builder(
    ) -> crate::operation::get_signing_profile::builders::GetSigningProfileOutputBuilder {
        crate::operation::get_signing_profile::builders::GetSigningProfileOutputBuilder::default()
    }
}

/// A builder for [`GetSigningProfileOutput`](crate::operation::get_signing_profile::GetSigningProfileOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetSigningProfileOutputBuilder {
    pub(crate) profile_name: std::option::Option<std::string::String>,
    pub(crate) profile_version: std::option::Option<std::string::String>,
    pub(crate) profile_version_arn: std::option::Option<std::string::String>,
    pub(crate) revocation_record: std::option::Option<crate::types::SigningProfileRevocationRecord>,
    pub(crate) signing_material: std::option::Option<crate::types::SigningMaterial>,
    pub(crate) platform_id: std::option::Option<std::string::String>,
    pub(crate) platform_display_name: std::option::Option<std::string::String>,
    pub(crate) signature_validity_period:
        std::option::Option<crate::types::SignatureValidityPeriod>,
    pub(crate) overrides: std::option::Option<crate::types::SigningPlatformOverrides>,
    pub(crate) signing_parameters:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) status: std::option::Option<crate::types::SigningProfileStatus>,
    pub(crate) status_reason: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl GetSigningProfileOutputBuilder {
    /// <p>The name of the target signing profile.</p>
    pub fn profile_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.profile_name = Some(input.into());
        self
    }
    /// <p>The name of the target signing profile.</p>
    pub fn set_profile_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.profile_name = input;
        self
    }
    /// <p>The current version of the signing profile.</p>
    pub fn profile_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.profile_version = Some(input.into());
        self
    }
    /// <p>The current version of the signing profile.</p>
    pub fn set_profile_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.profile_version = input;
        self
    }
    /// <p>The signing profile ARN, including the profile version.</p>
    pub fn profile_version_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.profile_version_arn = Some(input.into());
        self
    }
    /// <p>The signing profile ARN, including the profile version.</p>
    pub fn set_profile_version_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.profile_version_arn = input;
        self
    }
    /// <p>Revocation information for a signing profile.</p>
    pub fn revocation_record(
        mut self,
        input: crate::types::SigningProfileRevocationRecord,
    ) -> Self {
        self.revocation_record = Some(input);
        self
    }
    /// <p>Revocation information for a signing profile.</p>
    pub fn set_revocation_record(
        mut self,
        input: std::option::Option<crate::types::SigningProfileRevocationRecord>,
    ) -> Self {
        self.revocation_record = input;
        self
    }
    /// <p>The ARN of the certificate that the target profile uses for signing operations.</p>
    pub fn signing_material(mut self, input: crate::types::SigningMaterial) -> Self {
        self.signing_material = Some(input);
        self
    }
    /// <p>The ARN of the certificate that the target profile uses for signing operations.</p>
    pub fn set_signing_material(
        mut self,
        input: std::option::Option<crate::types::SigningMaterial>,
    ) -> Self {
        self.signing_material = input;
        self
    }
    /// <p>The ID of the platform that is used by the target signing profile.</p>
    pub fn platform_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.platform_id = Some(input.into());
        self
    }
    /// <p>The ID of the platform that is used by the target signing profile.</p>
    pub fn set_platform_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.platform_id = input;
        self
    }
    /// <p>A human-readable name for the signing platform associated with the signing profile.</p>
    pub fn platform_display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.platform_display_name = Some(input.into());
        self
    }
    /// <p>A human-readable name for the signing platform associated with the signing profile.</p>
    pub fn set_platform_display_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.platform_display_name = input;
        self
    }
    /// <p>The validity period for a signing job.</p>
    pub fn signature_validity_period(
        mut self,
        input: crate::types::SignatureValidityPeriod,
    ) -> Self {
        self.signature_validity_period = Some(input);
        self
    }
    /// <p>The validity period for a signing job.</p>
    pub fn set_signature_validity_period(
        mut self,
        input: std::option::Option<crate::types::SignatureValidityPeriod>,
    ) -> Self {
        self.signature_validity_period = input;
        self
    }
    /// <p>A list of overrides applied by the target signing profile for signing operations.</p>
    pub fn overrides(mut self, input: crate::types::SigningPlatformOverrides) -> Self {
        self.overrides = Some(input);
        self
    }
    /// <p>A list of overrides applied by the target signing profile for signing operations.</p>
    pub fn set_overrides(
        mut self,
        input: std::option::Option<crate::types::SigningPlatformOverrides>,
    ) -> Self {
        self.overrides = input;
        self
    }
    /// Adds a key-value pair to `signing_parameters`.
    ///
    /// To override the contents of this collection use [`set_signing_parameters`](Self::set_signing_parameters).
    ///
    /// <p>A map of key-value pairs for signing operations that is attached to the target signing profile.</p>
    pub fn signing_parameters(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.signing_parameters.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.signing_parameters = Some(hash_map);
        self
    }
    /// <p>A map of key-value pairs for signing operations that is attached to the target signing profile.</p>
    pub fn set_signing_parameters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.signing_parameters = input;
        self
    }
    /// <p>The status of the target signing profile.</p>
    pub fn status(mut self, input: crate::types::SigningProfileStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the target signing profile.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::SigningProfileStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>Reason for the status of the target signing profile.</p>
    pub fn status_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_reason = Some(input.into());
        self
    }
    /// <p>Reason for the status of the target signing profile.</p>
    pub fn set_status_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the signing profile.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the signing profile.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags associated with the signing profile.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>A list of tags associated with the signing profile.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetSigningProfileOutput`](crate::operation::get_signing_profile::GetSigningProfileOutput).
    pub fn build(self) -> crate::operation::get_signing_profile::GetSigningProfileOutput {
        crate::operation::get_signing_profile::GetSigningProfileOutput {
            profile_name: self.profile_name,
            profile_version: self.profile_version,
            profile_version_arn: self.profile_version_arn,
            revocation_record: self.revocation_record,
            signing_material: self.signing_material,
            platform_id: self.platform_id,
            platform_display_name: self.platform_display_name,
            signature_validity_period: self.signature_validity_period,
            overrides: self.overrides,
            signing_parameters: self.signing_parameters,
            status: self.status,
            status_reason: self.status_reason,
            arn: self.arn,
            tags: self.tags,
            _request_id: self._request_id,
        }
    }
}
