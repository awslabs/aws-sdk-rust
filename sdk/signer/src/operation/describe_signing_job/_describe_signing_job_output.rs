// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeSigningJobOutput {
    /// <p>The ID of the signing job on output.</p>
    #[doc(hidden)]
    pub job_id: std::option::Option<std::string::String>,
    /// <p>The object that contains the name of your S3 bucket or your raw code.</p>
    #[doc(hidden)]
    pub source: std::option::Option<crate::types::Source>,
    /// <p>The Amazon Resource Name (ARN) of your code signing certificate.</p>
    #[doc(hidden)]
    pub signing_material: std::option::Option<crate::types::SigningMaterial>,
    /// <p>The microcontroller platform to which your signed code image will be distributed.</p>
    #[doc(hidden)]
    pub platform_id: std::option::Option<std::string::String>,
    /// <p>A human-readable name for the signing platform associated with the signing job.</p>
    #[doc(hidden)]
    pub platform_display_name: std::option::Option<std::string::String>,
    /// <p>The name of the profile that initiated the signing operation.</p>
    #[doc(hidden)]
    pub profile_name: std::option::Option<std::string::String>,
    /// <p>The version of the signing profile used to initiate the signing job.</p>
    #[doc(hidden)]
    pub profile_version: std::option::Option<std::string::String>,
    /// <p>A list of any overrides that were applied to the signing operation.</p>
    #[doc(hidden)]
    pub overrides: std::option::Option<crate::types::SigningPlatformOverrides>,
    /// <p>Map of user-assigned key-value pairs used during signing. These values contain any information that you specified for use in your signing job. </p>
    #[doc(hidden)]
    pub signing_parameters:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>Date and time that the signing job was created.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Date and time that the signing job was completed.</p>
    #[doc(hidden)]
    pub completed_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Thr expiration timestamp for the signature generated by the signing job.</p>
    #[doc(hidden)]
    pub signature_expires_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The IAM principal that requested the signing job.</p>
    #[doc(hidden)]
    pub requested_by: std::option::Option<std::string::String>,
    /// <p>Status of the signing job.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::SigningStatus>,
    /// <p>String value that contains the status reason.</p>
    #[doc(hidden)]
    pub status_reason: std::option::Option<std::string::String>,
    /// <p>A revocation record if the signature generated by the signing job has been revoked. Contains a timestamp and the ID of the IAM entity that revoked the signature.</p>
    #[doc(hidden)]
    pub revocation_record: std::option::Option<crate::types::SigningJobRevocationRecord>,
    /// <p>Name of the S3 bucket where the signed code image is saved by code signing.</p>
    #[doc(hidden)]
    pub signed_object: std::option::Option<crate::types::SignedObject>,
    /// <p>The AWS account ID of the job owner.</p>
    #[doc(hidden)]
    pub job_owner: std::option::Option<std::string::String>,
    /// <p>The IAM entity that initiated the signing job.</p>
    #[doc(hidden)]
    pub job_invoker: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeSigningJobOutput {
    /// <p>The ID of the signing job on output.</p>
    pub fn job_id(&self) -> std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>The object that contains the name of your S3 bucket or your raw code.</p>
    pub fn source(&self) -> std::option::Option<&crate::types::Source> {
        self.source.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of your code signing certificate.</p>
    pub fn signing_material(&self) -> std::option::Option<&crate::types::SigningMaterial> {
        self.signing_material.as_ref()
    }
    /// <p>The microcontroller platform to which your signed code image will be distributed.</p>
    pub fn platform_id(&self) -> std::option::Option<&str> {
        self.platform_id.as_deref()
    }
    /// <p>A human-readable name for the signing platform associated with the signing job.</p>
    pub fn platform_display_name(&self) -> std::option::Option<&str> {
        self.platform_display_name.as_deref()
    }
    /// <p>The name of the profile that initiated the signing operation.</p>
    pub fn profile_name(&self) -> std::option::Option<&str> {
        self.profile_name.as_deref()
    }
    /// <p>The version of the signing profile used to initiate the signing job.</p>
    pub fn profile_version(&self) -> std::option::Option<&str> {
        self.profile_version.as_deref()
    }
    /// <p>A list of any overrides that were applied to the signing operation.</p>
    pub fn overrides(&self) -> std::option::Option<&crate::types::SigningPlatformOverrides> {
        self.overrides.as_ref()
    }
    /// <p>Map of user-assigned key-value pairs used during signing. These values contain any information that you specified for use in your signing job. </p>
    pub fn signing_parameters(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.signing_parameters.as_ref()
    }
    /// <p>Date and time that the signing job was created.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>Date and time that the signing job was completed.</p>
    pub fn completed_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.completed_at.as_ref()
    }
    /// <p>Thr expiration timestamp for the signature generated by the signing job.</p>
    pub fn signature_expires_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.signature_expires_at.as_ref()
    }
    /// <p>The IAM principal that requested the signing job.</p>
    pub fn requested_by(&self) -> std::option::Option<&str> {
        self.requested_by.as_deref()
    }
    /// <p>Status of the signing job.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::SigningStatus> {
        self.status.as_ref()
    }
    /// <p>String value that contains the status reason.</p>
    pub fn status_reason(&self) -> std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p>A revocation record if the signature generated by the signing job has been revoked. Contains a timestamp and the ID of the IAM entity that revoked the signature.</p>
    pub fn revocation_record(
        &self,
    ) -> std::option::Option<&crate::types::SigningJobRevocationRecord> {
        self.revocation_record.as_ref()
    }
    /// <p>Name of the S3 bucket where the signed code image is saved by code signing.</p>
    pub fn signed_object(&self) -> std::option::Option<&crate::types::SignedObject> {
        self.signed_object.as_ref()
    }
    /// <p>The AWS account ID of the job owner.</p>
    pub fn job_owner(&self) -> std::option::Option<&str> {
        self.job_owner.as_deref()
    }
    /// <p>The IAM entity that initiated the signing job.</p>
    pub fn job_invoker(&self) -> std::option::Option<&str> {
        self.job_invoker.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeSigningJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeSigningJobOutput {
    /// Creates a new builder-style object to manufacture [`DescribeSigningJobOutput`](crate::operation::describe_signing_job::DescribeSigningJobOutput).
    pub fn builder(
    ) -> crate::operation::describe_signing_job::builders::DescribeSigningJobOutputBuilder {
        crate::operation::describe_signing_job::builders::DescribeSigningJobOutputBuilder::default()
    }
}

/// A builder for [`DescribeSigningJobOutput`](crate::operation::describe_signing_job::DescribeSigningJobOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeSigningJobOutputBuilder {
    pub(crate) job_id: std::option::Option<std::string::String>,
    pub(crate) source: std::option::Option<crate::types::Source>,
    pub(crate) signing_material: std::option::Option<crate::types::SigningMaterial>,
    pub(crate) platform_id: std::option::Option<std::string::String>,
    pub(crate) platform_display_name: std::option::Option<std::string::String>,
    pub(crate) profile_name: std::option::Option<std::string::String>,
    pub(crate) profile_version: std::option::Option<std::string::String>,
    pub(crate) overrides: std::option::Option<crate::types::SigningPlatformOverrides>,
    pub(crate) signing_parameters:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) completed_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) signature_expires_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) requested_by: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::SigningStatus>,
    pub(crate) status_reason: std::option::Option<std::string::String>,
    pub(crate) revocation_record: std::option::Option<crate::types::SigningJobRevocationRecord>,
    pub(crate) signed_object: std::option::Option<crate::types::SignedObject>,
    pub(crate) job_owner: std::option::Option<std::string::String>,
    pub(crate) job_invoker: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeSigningJobOutputBuilder {
    /// <p>The ID of the signing job on output.</p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_id = Some(input.into());
        self
    }
    /// <p>The ID of the signing job on output.</p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The object that contains the name of your S3 bucket or your raw code.</p>
    pub fn source(mut self, input: crate::types::Source) -> Self {
        self.source = Some(input);
        self
    }
    /// <p>The object that contains the name of your S3 bucket or your raw code.</p>
    pub fn set_source(mut self, input: std::option::Option<crate::types::Source>) -> Self {
        self.source = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of your code signing certificate.</p>
    pub fn signing_material(mut self, input: crate::types::SigningMaterial) -> Self {
        self.signing_material = Some(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of your code signing certificate.</p>
    pub fn set_signing_material(
        mut self,
        input: std::option::Option<crate::types::SigningMaterial>,
    ) -> Self {
        self.signing_material = input;
        self
    }
    /// <p>The microcontroller platform to which your signed code image will be distributed.</p>
    pub fn platform_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.platform_id = Some(input.into());
        self
    }
    /// <p>The microcontroller platform to which your signed code image will be distributed.</p>
    pub fn set_platform_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.platform_id = input;
        self
    }
    /// <p>A human-readable name for the signing platform associated with the signing job.</p>
    pub fn platform_display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.platform_display_name = Some(input.into());
        self
    }
    /// <p>A human-readable name for the signing platform associated with the signing job.</p>
    pub fn set_platform_display_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.platform_display_name = input;
        self
    }
    /// <p>The name of the profile that initiated the signing operation.</p>
    pub fn profile_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.profile_name = Some(input.into());
        self
    }
    /// <p>The name of the profile that initiated the signing operation.</p>
    pub fn set_profile_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.profile_name = input;
        self
    }
    /// <p>The version of the signing profile used to initiate the signing job.</p>
    pub fn profile_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.profile_version = Some(input.into());
        self
    }
    /// <p>The version of the signing profile used to initiate the signing job.</p>
    pub fn set_profile_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.profile_version = input;
        self
    }
    /// <p>A list of any overrides that were applied to the signing operation.</p>
    pub fn overrides(mut self, input: crate::types::SigningPlatformOverrides) -> Self {
        self.overrides = Some(input);
        self
    }
    /// <p>A list of any overrides that were applied to the signing operation.</p>
    pub fn set_overrides(
        mut self,
        input: std::option::Option<crate::types::SigningPlatformOverrides>,
    ) -> Self {
        self.overrides = input;
        self
    }
    /// Adds a key-value pair to `signing_parameters`.
    ///
    /// To override the contents of this collection use [`set_signing_parameters`](Self::set_signing_parameters).
    ///
    /// <p>Map of user-assigned key-value pairs used during signing. These values contain any information that you specified for use in your signing job. </p>
    pub fn signing_parameters(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.signing_parameters.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.signing_parameters = Some(hash_map);
        self
    }
    /// <p>Map of user-assigned key-value pairs used during signing. These values contain any information that you specified for use in your signing job. </p>
    pub fn set_signing_parameters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.signing_parameters = input;
        self
    }
    /// <p>Date and time that the signing job was created.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>Date and time that the signing job was created.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>Date and time that the signing job was completed.</p>
    pub fn completed_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.completed_at = Some(input);
        self
    }
    /// <p>Date and time that the signing job was completed.</p>
    pub fn set_completed_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.completed_at = input;
        self
    }
    /// <p>Thr expiration timestamp for the signature generated by the signing job.</p>
    pub fn signature_expires_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.signature_expires_at = Some(input);
        self
    }
    /// <p>Thr expiration timestamp for the signature generated by the signing job.</p>
    pub fn set_signature_expires_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.signature_expires_at = input;
        self
    }
    /// <p>The IAM principal that requested the signing job.</p>
    pub fn requested_by(mut self, input: impl Into<std::string::String>) -> Self {
        self.requested_by = Some(input.into());
        self
    }
    /// <p>The IAM principal that requested the signing job.</p>
    pub fn set_requested_by(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.requested_by = input;
        self
    }
    /// <p>Status of the signing job.</p>
    pub fn status(mut self, input: crate::types::SigningStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>Status of the signing job.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::SigningStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>String value that contains the status reason.</p>
    pub fn status_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_reason = Some(input.into());
        self
    }
    /// <p>String value that contains the status reason.</p>
    pub fn set_status_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>A revocation record if the signature generated by the signing job has been revoked. Contains a timestamp and the ID of the IAM entity that revoked the signature.</p>
    pub fn revocation_record(mut self, input: crate::types::SigningJobRevocationRecord) -> Self {
        self.revocation_record = Some(input);
        self
    }
    /// <p>A revocation record if the signature generated by the signing job has been revoked. Contains a timestamp and the ID of the IAM entity that revoked the signature.</p>
    pub fn set_revocation_record(
        mut self,
        input: std::option::Option<crate::types::SigningJobRevocationRecord>,
    ) -> Self {
        self.revocation_record = input;
        self
    }
    /// <p>Name of the S3 bucket where the signed code image is saved by code signing.</p>
    pub fn signed_object(mut self, input: crate::types::SignedObject) -> Self {
        self.signed_object = Some(input);
        self
    }
    /// <p>Name of the S3 bucket where the signed code image is saved by code signing.</p>
    pub fn set_signed_object(
        mut self,
        input: std::option::Option<crate::types::SignedObject>,
    ) -> Self {
        self.signed_object = input;
        self
    }
    /// <p>The AWS account ID of the job owner.</p>
    pub fn job_owner(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_owner = Some(input.into());
        self
    }
    /// <p>The AWS account ID of the job owner.</p>
    pub fn set_job_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_owner = input;
        self
    }
    /// <p>The IAM entity that initiated the signing job.</p>
    pub fn job_invoker(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_invoker = Some(input.into());
        self
    }
    /// <p>The IAM entity that initiated the signing job.</p>
    pub fn set_job_invoker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_invoker = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeSigningJobOutput`](crate::operation::describe_signing_job::DescribeSigningJobOutput).
    pub fn build(self) -> crate::operation::describe_signing_job::DescribeSigningJobOutput {
        crate::operation::describe_signing_job::DescribeSigningJobOutput {
            job_id: self.job_id,
            source: self.source,
            signing_material: self.signing_material,
            platform_id: self.platform_id,
            platform_display_name: self.platform_display_name,
            profile_name: self.profile_name,
            profile_version: self.profile_version,
            overrides: self.overrides,
            signing_parameters: self.signing_parameters,
            created_at: self.created_at,
            completed_at: self.completed_at,
            signature_expires_at: self.signature_expires_at,
            requested_by: self.requested_by,
            status: self.status,
            status_reason: self.status_reason,
            revocation_record: self.revocation_record,
            signed_object: self.signed_object,
            job_owner: self.job_owner,
            job_invoker: self.job_invoker,
            _request_id: self._request_id,
        }
    }
}
