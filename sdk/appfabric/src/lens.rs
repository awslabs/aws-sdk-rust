// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_app_authorizations_output_next_token(
    input: &crate::operation::list_app_authorizations::ListAppAuthorizationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_app_bundles_output_next_token(
    input: &crate::operation::list_app_bundles::ListAppBundlesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_ingestion_destinations_output_next_token(
    input: &crate::operation::list_ingestion_destinations::ListIngestionDestinationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_ingestions_output_next_token(
    input: &crate::operation::list_ingestions::ListIngestionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_app_authorizations_output_app_authorization_summary_list(
    input: crate::operation::list_app_authorizations::ListAppAuthorizationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AppAuthorizationSummary>> {
    let input = input.app_authorization_summary_list;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_app_bundles_output_app_bundle_summary_list(
    input: crate::operation::list_app_bundles::ListAppBundlesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AppBundleSummary>> {
    let input = input.app_bundle_summary_list;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_ingestion_destinations_output_ingestion_destinations(
    input: crate::operation::list_ingestion_destinations::ListIngestionDestinationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::IngestionDestinationSummary>> {
    let input = input.ingestion_destinations;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_ingestions_output_ingestions(
    input: crate::operation::list_ingestions::ListIngestionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::IngestionSummary>> {
    let input = input.ingestions;
    ::std::option::Option::Some(input)
}
