// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateIngestionDestination`](crate::operation::create_ingestion_destination::builders::CreateIngestionDestinationFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_bundle_identifier(impl Into<String>)`](crate::operation::create_ingestion_destination::builders::CreateIngestionDestinationFluentBuilder::app_bundle_identifier) / [`set_app_bundle_identifier(Option<String>)`](crate::operation::create_ingestion_destination::builders::CreateIngestionDestinationFluentBuilder::set_app_bundle_identifier):<br>required: **true**<br><p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the app bundle to use for the request.</p><br>
    ///   - [`ingestion_identifier(impl Into<String>)`](crate::operation::create_ingestion_destination::builders::CreateIngestionDestinationFluentBuilder::ingestion_identifier) / [`set_ingestion_identifier(Option<String>)`](crate::operation::create_ingestion_destination::builders::CreateIngestionDestinationFluentBuilder::set_ingestion_identifier):<br>required: **true**<br><p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the ingestion to use for the request.</p><br>
    ///   - [`processing_configuration(ProcessingConfiguration)`](crate::operation::create_ingestion_destination::builders::CreateIngestionDestinationFluentBuilder::processing_configuration) / [`set_processing_configuration(Option<ProcessingConfiguration>)`](crate::operation::create_ingestion_destination::builders::CreateIngestionDestinationFluentBuilder::set_processing_configuration):<br>required: **true**<br><p>Contains information about how ingested data is processed.</p><br>
    ///   - [`destination_configuration(DestinationConfiguration)`](crate::operation::create_ingestion_destination::builders::CreateIngestionDestinationFluentBuilder::destination_configuration) / [`set_destination_configuration(Option<DestinationConfiguration>)`](crate::operation::create_ingestion_destination::builders::CreateIngestionDestinationFluentBuilder::set_destination_configuration):<br>required: **true**<br><p>Contains information about the destination of ingested data.</p><br>
    ///   - [`client_token(impl Into<String>)`](crate::operation::create_ingestion_destination::builders::CreateIngestionDestinationFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::create_ingestion_destination::builders::CreateIngestionDestinationFluentBuilder::set_client_token):<br>required: **false**<br><p>Specifies a unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID type of value</a>.</p>  <p>If you don't provide this value, then Amazon Web Services generates a random one for you.</p>  <p>If you retry the operation with the same <code>ClientToken</code>, but with different parameters, the retry fails with an <code>IdempotentParameterMismatch</code> error.</p><br>
    ///   - [`tags(Tag)`](crate::operation::create_ingestion_destination::builders::CreateIngestionDestinationFluentBuilder::tags) / [`set_tags(Option<Vec::<Tag>>)`](crate::operation::create_ingestion_destination::builders::CreateIngestionDestinationFluentBuilder::set_tags):<br>required: **false**<br><p>A map of the key-value pairs of the tag or tags to assign to the resource.</p><br>
    /// - On success, responds with [`CreateIngestionDestinationOutput`](crate::operation::create_ingestion_destination::CreateIngestionDestinationOutput) with field(s):
    ///   - [`ingestion_destination(Option<IngestionDestination>)`](crate::operation::create_ingestion_destination::CreateIngestionDestinationOutput::ingestion_destination): <p>Contains information about an ingestion destination.</p>
    /// - On failure, responds with [`SdkError<CreateIngestionDestinationError>`](crate::operation::create_ingestion_destination::CreateIngestionDestinationError)
    pub fn create_ingestion_destination(&self) -> crate::operation::create_ingestion_destination::builders::CreateIngestionDestinationFluentBuilder {
        crate::operation::create_ingestion_destination::builders::CreateIngestionDestinationFluentBuilder::new(self.handle.clone())
    }
}
