// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateAppAuthorization`](crate::operation::create_app_authorization::builders::CreateAppAuthorizationFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_bundle_identifier(impl Into<String>)`](crate::operation::create_app_authorization::builders::CreateAppAuthorizationFluentBuilder::app_bundle_identifier) / [`set_app_bundle_identifier(Option<String>)`](crate::operation::create_app_authorization::builders::CreateAppAuthorizationFluentBuilder::set_app_bundle_identifier):<br>required: **true**<br><p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the app bundle to use for the request.</p><br>
    ///   - [`app(impl Into<String>)`](crate::operation::create_app_authorization::builders::CreateAppAuthorizationFluentBuilder::app) / [`set_app(Option<String>)`](crate::operation::create_app_authorization::builders::CreateAppAuthorizationFluentBuilder::set_app):<br>required: **true**<br><p>The name of the application.</p>  <p>Valid values are:</p>  <ul>   <li> <p> <code>SLACK</code> </p> </li>   <li> <p> <code>ASANA</code> </p> </li>   <li> <p> <code>JIRA</code> </p> </li>   <li> <p> <code>M365</code> </p> </li>   <li> <p> <code>M365AUDITLOGS</code> </p> </li>   <li> <p> <code>ZOOM</code> </p> </li>   <li> <p> <code>ZENDESK</code> </p> </li>   <li> <p> <code>OKTA</code> </p> </li>   <li> <p> <code>GOOGLE</code> </p> </li>   <li> <p> <code>DROPBOX</code> </p> </li>   <li> <p> <code>SMARTSHEET</code> </p> </li>   <li> <p> <code>CISCO</code> </p> </li>  </ul><br>
    ///   - [`credential(Credential)`](crate::operation::create_app_authorization::builders::CreateAppAuthorizationFluentBuilder::credential) / [`set_credential(Option<Credential>)`](crate::operation::create_app_authorization::builders::CreateAppAuthorizationFluentBuilder::set_credential):<br>required: **true**<br><p>Contains credentials for the application, such as an API key or OAuth2 client ID and secret.</p>  <p>Specify credentials that match the authorization type for your request. For example, if the authorization type for your request is OAuth2 (<code>oauth2</code>), then you should provide only the OAuth2 credentials.</p><br>
    ///   - [`tenant(Tenant)`](crate::operation::create_app_authorization::builders::CreateAppAuthorizationFluentBuilder::tenant) / [`set_tenant(Option<Tenant>)`](crate::operation::create_app_authorization::builders::CreateAppAuthorizationFluentBuilder::set_tenant):<br>required: **true**<br><p>Contains information about an application tenant, such as the application display name and identifier.</p><br>
    ///   - [`auth_type(AuthType)`](crate::operation::create_app_authorization::builders::CreateAppAuthorizationFluentBuilder::auth_type) / [`set_auth_type(Option<AuthType>)`](crate::operation::create_app_authorization::builders::CreateAppAuthorizationFluentBuilder::set_auth_type):<br>required: **true**<br><p>The authorization type for the app authorization.</p><br>
    ///   - [`client_token(impl Into<String>)`](crate::operation::create_app_authorization::builders::CreateAppAuthorizationFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::create_app_authorization::builders::CreateAppAuthorizationFluentBuilder::set_client_token):<br>required: **false**<br><p>Specifies a unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID type of value</a>.</p>  <p>If you don't provide this value, then Amazon Web Services generates a random one for you.</p>  <p>If you retry the operation with the same <code>ClientToken</code>, but with different parameters, the retry fails with an <code>IdempotentParameterMismatch</code> error.</p><br>
    ///   - [`tags(Tag)`](crate::operation::create_app_authorization::builders::CreateAppAuthorizationFluentBuilder::tags) / [`set_tags(Option<Vec::<Tag>>)`](crate::operation::create_app_authorization::builders::CreateAppAuthorizationFluentBuilder::set_tags):<br>required: **false**<br><p>A map of the key-value pairs of the tag or tags to assign to the resource.</p><br>
    /// - On success, responds with [`CreateAppAuthorizationOutput`](crate::operation::create_app_authorization::CreateAppAuthorizationOutput) with field(s):
    ///   - [`app_authorization(Option<AppAuthorization>)`](crate::operation::create_app_authorization::CreateAppAuthorizationOutput::app_authorization): <p>Contains information about an app authorization.</p>
    /// - On failure, responds with [`SdkError<CreateAppAuthorizationError>`](crate::operation::create_app_authorization::CreateAppAuthorizationError)
    pub fn create_app_authorization(&self) -> crate::operation::create_app_authorization::builders::CreateAppAuthorizationFluentBuilder {
        crate::operation::create_app_authorization::builders::CreateAppAuthorizationFluentBuilder::new(self.handle.clone())
    }
}
