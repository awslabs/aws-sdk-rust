// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateIngestion`](crate::operation::create_ingestion::builders::CreateIngestionFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_bundle_identifier(impl Into<String>)`](crate::operation::create_ingestion::builders::CreateIngestionFluentBuilder::app_bundle_identifier) / [`set_app_bundle_identifier(Option<String>)`](crate::operation::create_ingestion::builders::CreateIngestionFluentBuilder::set_app_bundle_identifier):<br>required: **true**<br><p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the app bundle to use for the request.</p><br>
    ///   - [`app(impl Into<String>)`](crate::operation::create_ingestion::builders::CreateIngestionFluentBuilder::app) / [`set_app(Option<String>)`](crate::operation::create_ingestion::builders::CreateIngestionFluentBuilder::set_app):<br>required: **true**<br><p>The name of the application.</p>  <p>Valid values are:</p>  <ul>   <li> <p> <code>SLACK</code> </p> </li>   <li> <p> <code>ASANA</code> </p> </li>   <li> <p> <code>JIRA</code> </p> </li>   <li> <p> <code>M365</code> </p> </li>   <li> <p> <code>M365AUDITLOGS</code> </p> </li>   <li> <p> <code>ZOOM</code> </p> </li>   <li> <p> <code>ZENDESK</code> </p> </li>   <li> <p> <code>OKTA</code> </p> </li>   <li> <p> <code>GOOGLE</code> </p> </li>   <li> <p> <code>DROPBOX</code> </p> </li>   <li> <p> <code>SMARTSHEET</code> </p> </li>   <li> <p> <code>CISCO</code> </p> </li>  </ul><br>
    ///   - [`tenant_id(impl Into<String>)`](crate::operation::create_ingestion::builders::CreateIngestionFluentBuilder::tenant_id) / [`set_tenant_id(Option<String>)`](crate::operation::create_ingestion::builders::CreateIngestionFluentBuilder::set_tenant_id):<br>required: **true**<br><p>The ID of the application tenant.</p><br>
    ///   - [`ingestion_type(IngestionType)`](crate::operation::create_ingestion::builders::CreateIngestionFluentBuilder::ingestion_type) / [`set_ingestion_type(Option<IngestionType>)`](crate::operation::create_ingestion::builders::CreateIngestionFluentBuilder::set_ingestion_type):<br>required: **true**<br><p>The ingestion type.</p><br>
    ///   - [`client_token(impl Into<String>)`](crate::operation::create_ingestion::builders::CreateIngestionFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::create_ingestion::builders::CreateIngestionFluentBuilder::set_client_token):<br>required: **false**<br><p>Specifies a unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID type of value</a>.</p>  <p>If you don't provide this value, then Amazon Web Services generates a random one for you.</p>  <p>If you retry the operation with the same <code>ClientToken</code>, but with different parameters, the retry fails with an <code>IdempotentParameterMismatch</code> error.</p><br>
    ///   - [`tags(Tag)`](crate::operation::create_ingestion::builders::CreateIngestionFluentBuilder::tags) / [`set_tags(Option<Vec::<Tag>>)`](crate::operation::create_ingestion::builders::CreateIngestionFluentBuilder::set_tags):<br>required: **false**<br><p>A map of the key-value pairs of the tag or tags to assign to the resource.</p><br>
    /// - On success, responds with [`CreateIngestionOutput`](crate::operation::create_ingestion::CreateIngestionOutput) with field(s):
    ///   - [`ingestion(Option<Ingestion>)`](crate::operation::create_ingestion::CreateIngestionOutput::ingestion): <p>Contains information about an ingestion.</p>
    /// - On failure, responds with [`SdkError<CreateIngestionError>`](crate::operation::create_ingestion::CreateIngestionError)
    pub fn create_ingestion(&self) -> crate::operation::create_ingestion::builders::CreateIngestionFluentBuilder {
        crate::operation::create_ingestion::builders::CreateIngestionFluentBuilder::new(self.handle.clone())
    }
}
