// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.reason.is_none() {
        builder.reason = "no value was set".parse::<crate::types::ValidationExceptionReason>().ok()
    }
    builder
}

pub(crate) fn connect_app_authorization_output_correct_errors(
    mut builder: crate::operation::connect_app_authorization::builders::ConnectAppAuthorizationOutputBuilder,
) -> crate::operation::connect_app_authorization::builders::ConnectAppAuthorizationOutputBuilder {
    if builder.app_authorization_summary.is_none() {
        builder.app_authorization_summary = {
            let builder = crate::types::builders::AppAuthorizationSummaryBuilder::default();
            crate::serde_util::app_authorization_summary_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    if builder.service_code.is_none() {
        builder.service_code = Some(Default::default())
    }
    if builder.quota_code.is_none() {
        builder.quota_code = Some(Default::default())
    }
    builder
}

pub(crate) fn create_app_authorization_output_correct_errors(
    mut builder: crate::operation::create_app_authorization::builders::CreateAppAuthorizationOutputBuilder,
) -> crate::operation::create_app_authorization::builders::CreateAppAuthorizationOutputBuilder {
    if builder.app_authorization.is_none() {
        builder.app_authorization = {
            let builder = crate::types::builders::AppAuthorizationBuilder::default();
            crate::serde_util::app_authorization_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_app_bundle_output_correct_errors(
    mut builder: crate::operation::create_app_bundle::builders::CreateAppBundleOutputBuilder,
) -> crate::operation::create_app_bundle::builders::CreateAppBundleOutputBuilder {
    if builder.app_bundle.is_none() {
        builder.app_bundle = {
            let builder = crate::types::builders::AppBundleBuilder::default();
            crate::serde_util::app_bundle_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_ingestion_output_correct_errors(
    mut builder: crate::operation::create_ingestion::builders::CreateIngestionOutputBuilder,
) -> crate::operation::create_ingestion::builders::CreateIngestionOutputBuilder {
    if builder.ingestion.is_none() {
        builder.ingestion = {
            let builder = crate::types::builders::IngestionBuilder::default();
            crate::serde_util::ingestion_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_ingestion_destination_output_correct_errors(
    mut builder: crate::operation::create_ingestion_destination::builders::CreateIngestionDestinationOutputBuilder,
) -> crate::operation::create_ingestion_destination::builders::CreateIngestionDestinationOutputBuilder {
    if builder.ingestion_destination.is_none() {
        builder.ingestion_destination = {
            let builder = crate::types::builders::IngestionDestinationBuilder::default();
            crate::serde_util::ingestion_destination_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_app_authorization_output_correct_errors(
    mut builder: crate::operation::get_app_authorization::builders::GetAppAuthorizationOutputBuilder,
) -> crate::operation::get_app_authorization::builders::GetAppAuthorizationOutputBuilder {
    if builder.app_authorization.is_none() {
        builder.app_authorization = {
            let builder = crate::types::builders::AppAuthorizationBuilder::default();
            crate::serde_util::app_authorization_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_app_bundle_output_correct_errors(
    mut builder: crate::operation::get_app_bundle::builders::GetAppBundleOutputBuilder,
) -> crate::operation::get_app_bundle::builders::GetAppBundleOutputBuilder {
    if builder.app_bundle.is_none() {
        builder.app_bundle = {
            let builder = crate::types::builders::AppBundleBuilder::default();
            crate::serde_util::app_bundle_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_ingestion_output_correct_errors(
    mut builder: crate::operation::get_ingestion::builders::GetIngestionOutputBuilder,
) -> crate::operation::get_ingestion::builders::GetIngestionOutputBuilder {
    if builder.ingestion.is_none() {
        builder.ingestion = {
            let builder = crate::types::builders::IngestionBuilder::default();
            crate::serde_util::ingestion_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_ingestion_destination_output_correct_errors(
    mut builder: crate::operation::get_ingestion_destination::builders::GetIngestionDestinationOutputBuilder,
) -> crate::operation::get_ingestion_destination::builders::GetIngestionDestinationOutputBuilder {
    if builder.ingestion_destination.is_none() {
        builder.ingestion_destination = {
            let builder = crate::types::builders::IngestionDestinationBuilder::default();
            crate::serde_util::ingestion_destination_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn list_app_authorizations_output_correct_errors(
    mut builder: crate::operation::list_app_authorizations::builders::ListAppAuthorizationsOutputBuilder,
) -> crate::operation::list_app_authorizations::builders::ListAppAuthorizationsOutputBuilder {
    if builder.app_authorization_summary_list.is_none() {
        builder.app_authorization_summary_list = Some(Default::default())
    }
    builder
}

pub(crate) fn list_app_bundles_output_correct_errors(
    mut builder: crate::operation::list_app_bundles::builders::ListAppBundlesOutputBuilder,
) -> crate::operation::list_app_bundles::builders::ListAppBundlesOutputBuilder {
    if builder.app_bundle_summary_list.is_none() {
        builder.app_bundle_summary_list = Some(Default::default())
    }
    builder
}

pub(crate) fn list_ingestion_destinations_output_correct_errors(
    mut builder: crate::operation::list_ingestion_destinations::builders::ListIngestionDestinationsOutputBuilder,
) -> crate::operation::list_ingestion_destinations::builders::ListIngestionDestinationsOutputBuilder {
    if builder.ingestion_destinations.is_none() {
        builder.ingestion_destinations = Some(Default::default())
    }
    builder
}

pub(crate) fn list_ingestions_output_correct_errors(
    mut builder: crate::operation::list_ingestions::builders::ListIngestionsOutputBuilder,
) -> crate::operation::list_ingestions::builders::ListIngestionsOutputBuilder {
    if builder.ingestions.is_none() {
        builder.ingestions = Some(Default::default())
    }
    builder
}

pub(crate) fn update_app_authorization_output_correct_errors(
    mut builder: crate::operation::update_app_authorization::builders::UpdateAppAuthorizationOutputBuilder,
) -> crate::operation::update_app_authorization::builders::UpdateAppAuthorizationOutputBuilder {
    if builder.app_authorization.is_none() {
        builder.app_authorization = {
            let builder = crate::types::builders::AppAuthorizationBuilder::default();
            crate::serde_util::app_authorization_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_ingestion_destination_output_correct_errors(
    mut builder: crate::operation::update_ingestion_destination::builders::UpdateIngestionDestinationOutputBuilder,
) -> crate::operation::update_ingestion_destination::builders::UpdateIngestionDestinationOutputBuilder {
    if builder.ingestion_destination.is_none() {
        builder.ingestion_destination = {
            let builder = crate::types::builders::IngestionDestinationBuilder::default();
            crate::serde_util::ingestion_destination_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn app_authorization_summary_correct_errors(
    mut builder: crate::types::builders::AppAuthorizationSummaryBuilder,
) -> crate::types::builders::AppAuthorizationSummaryBuilder {
    if builder.app_authorization_arn.is_none() {
        builder.app_authorization_arn = Some(Default::default())
    }
    if builder.app_bundle_arn.is_none() {
        builder.app_bundle_arn = Some(Default::default())
    }
    if builder.app.is_none() {
        builder.app = Some(Default::default())
    }
    if builder.tenant.is_none() {
        builder.tenant = {
            let builder = crate::types::builders::TenantBuilder::default();
            crate::serde_util::tenant_correct_errors(builder).build().ok()
        }
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::AppAuthorizationStatus>().ok()
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn app_authorization_correct_errors(
    mut builder: crate::types::builders::AppAuthorizationBuilder,
) -> crate::types::builders::AppAuthorizationBuilder {
    if builder.app_authorization_arn.is_none() {
        builder.app_authorization_arn = Some(Default::default())
    }
    if builder.app_bundle_arn.is_none() {
        builder.app_bundle_arn = Some(Default::default())
    }
    if builder.app.is_none() {
        builder.app = Some(Default::default())
    }
    if builder.tenant.is_none() {
        builder.tenant = {
            let builder = crate::types::builders::TenantBuilder::default();
            crate::serde_util::tenant_correct_errors(builder).build().ok()
        }
    }
    if builder.auth_type.is_none() {
        builder.auth_type = "no value was set".parse::<crate::types::AuthType>().ok()
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::AppAuthorizationStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn app_bundle_correct_errors(mut builder: crate::types::builders::AppBundleBuilder) -> crate::types::builders::AppBundleBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn ingestion_correct_errors(mut builder: crate::types::builders::IngestionBuilder) -> crate::types::builders::IngestionBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.app_bundle_arn.is_none() {
        builder.app_bundle_arn = Some(Default::default())
    }
    if builder.app.is_none() {
        builder.app = Some(Default::default())
    }
    if builder.tenant_id.is_none() {
        builder.tenant_id = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::IngestionState>().ok()
    }
    if builder.ingestion_type.is_none() {
        builder.ingestion_type = "no value was set".parse::<crate::types::IngestionType>().ok()
    }
    builder
}

pub(crate) fn ingestion_destination_correct_errors(
    mut builder: crate::types::builders::IngestionDestinationBuilder,
) -> crate::types::builders::IngestionDestinationBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.ingestion_arn.is_none() {
        builder.ingestion_arn = Some(Default::default())
    }
    if builder.processing_configuration.is_none() {
        builder.processing_configuration = Some(crate::types::ProcessingConfiguration::Unknown)
    }
    if builder.destination_configuration.is_none() {
        builder.destination_configuration = Some(crate::types::DestinationConfiguration::Unknown)
    }
    builder
}

pub(crate) fn tenant_correct_errors(mut builder: crate::types::builders::TenantBuilder) -> crate::types::builders::TenantBuilder {
    if builder.tenant_identifier.is_none() {
        builder.tenant_identifier = Some(Default::default())
    }
    if builder.tenant_display_name.is_none() {
        builder.tenant_display_name = Some(Default::default())
    }
    builder
}

pub(crate) fn app_bundle_summary_correct_errors(
    mut builder: crate::types::builders::AppBundleSummaryBuilder,
) -> crate::types::builders::AppBundleSummaryBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn ingestion_destination_summary_correct_errors(
    mut builder: crate::types::builders::IngestionDestinationSummaryBuilder,
) -> crate::types::builders::IngestionDestinationSummaryBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn ingestion_summary_correct_errors(
    mut builder: crate::types::builders::IngestionSummaryBuilder,
) -> crate::types::builders::IngestionSummaryBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.app.is_none() {
        builder.app = Some(Default::default())
    }
    if builder.tenant_id.is_none() {
        builder.tenant_id = Some(Default::default())
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::IngestionState>().ok()
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn user_access_task_item_correct_errors(
    mut builder: crate::types::builders::UserAccessTaskItemBuilder,
) -> crate::types::builders::UserAccessTaskItemBuilder {
    if builder.app.is_none() {
        builder.app = Some(Default::default())
    }
    if builder.tenant_id.is_none() {
        builder.tenant_id = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn audit_log_destination_configuration_correct_errors(
    mut builder: crate::types::builders::AuditLogDestinationConfigurationBuilder,
) -> crate::types::builders::AuditLogDestinationConfigurationBuilder {
    if builder.destination.is_none() {
        builder.destination = Some(crate::types::Destination::Unknown)
    }
    builder
}

pub(crate) fn audit_log_processing_configuration_correct_errors(
    mut builder: crate::types::builders::AuditLogProcessingConfigurationBuilder,
) -> crate::types::builders::AuditLogProcessingConfigurationBuilder {
    if builder.schema.is_none() {
        builder.schema = "no value was set".parse::<crate::types::Schema>().ok()
    }
    if builder.format.is_none() {
        builder.format = "no value was set".parse::<crate::types::Format>().ok()
    }
    builder
}

pub(crate) fn firehose_stream_correct_errors(
    mut builder: crate::types::builders::FirehoseStreamBuilder,
) -> crate::types::builders::FirehoseStreamBuilder {
    if builder.stream_name.is_none() {
        builder.stream_name = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_bucket_correct_errors(mut builder: crate::types::builders::S3BucketBuilder) -> crate::types::builders::S3BucketBuilder {
    if builder.bucket_name.is_none() {
        builder.bucket_name = Some(Default::default())
    }
    builder
}
