// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct StartUserAccessTasksInput {
    /// <p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the app bundle to use for the request.</p>
    pub app_bundle_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The email address of the target user.</p>
    pub email: ::std::option::Option<::std::string::String>,
}
impl StartUserAccessTasksInput {
    /// <p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the app bundle to use for the request.</p>
    pub fn app_bundle_identifier(&self) -> ::std::option::Option<&str> {
        self.app_bundle_identifier.as_deref()
    }
    /// <p>The email address of the target user.</p>
    pub fn email(&self) -> ::std::option::Option<&str> {
        self.email.as_deref()
    }
}
impl ::std::fmt::Debug for StartUserAccessTasksInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("StartUserAccessTasksInput");
        formatter.field("app_bundle_identifier", &self.app_bundle_identifier);
        formatter.field("email", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl StartUserAccessTasksInput {
    /// Creates a new builder-style object to manufacture [`StartUserAccessTasksInput`](crate::operation::start_user_access_tasks::StartUserAccessTasksInput).
    pub fn builder() -> crate::operation::start_user_access_tasks::builders::StartUserAccessTasksInputBuilder {
        crate::operation::start_user_access_tasks::builders::StartUserAccessTasksInputBuilder::default()
    }
}

/// A builder for [`StartUserAccessTasksInput`](crate::operation::start_user_access_tasks::StartUserAccessTasksInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct StartUserAccessTasksInputBuilder {
    pub(crate) app_bundle_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) email: ::std::option::Option<::std::string::String>,
}
impl StartUserAccessTasksInputBuilder {
    /// <p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the app bundle to use for the request.</p>
    /// This field is required.
    pub fn app_bundle_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_bundle_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the app bundle to use for the request.</p>
    pub fn set_app_bundle_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_bundle_identifier = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the app bundle to use for the request.</p>
    pub fn get_app_bundle_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_bundle_identifier
    }
    /// <p>The email address of the target user.</p>
    /// This field is required.
    pub fn email(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.email = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The email address of the target user.</p>
    pub fn set_email(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.email = input;
        self
    }
    /// <p>The email address of the target user.</p>
    pub fn get_email(&self) -> &::std::option::Option<::std::string::String> {
        &self.email
    }
    /// Consumes the builder and constructs a [`StartUserAccessTasksInput`](crate::operation::start_user_access_tasks::StartUserAccessTasksInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::start_user_access_tasks::StartUserAccessTasksInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::start_user_access_tasks::StartUserAccessTasksInput {
            app_bundle_identifier: self.app_bundle_identifier,
            email: self.email,
        })
    }
}
impl ::std::fmt::Debug for StartUserAccessTasksInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("StartUserAccessTasksInputBuilder");
        formatter.field("app_bundle_identifier", &self.app_bundle_identifier);
        formatter.field("email", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
