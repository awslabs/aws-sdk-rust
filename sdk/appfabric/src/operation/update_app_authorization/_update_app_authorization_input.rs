// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateAppAuthorizationInput {
    /// <p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the app bundle to use for the request.</p>
    pub app_bundle_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the app authorization to use for the request.</p>
    pub app_authorization_identifier: ::std::option::Option<::std::string::String>,
    /// <p>Contains credentials for the application, such as an API key or OAuth2 client ID and secret.</p>
    /// <p>Specify credentials that match the authorization type of the app authorization to update. For example, if the authorization type of the app authorization is OAuth2 (<code>oauth2</code>), then you should provide only the OAuth2 credentials.</p>
    pub credential: ::std::option::Option<crate::types::Credential>,
    /// <p>Contains information about an application tenant, such as the application display name and identifier.</p>
    pub tenant: ::std::option::Option<crate::types::Tenant>,
}
impl UpdateAppAuthorizationInput {
    /// <p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the app bundle to use for the request.</p>
    pub fn app_bundle_identifier(&self) -> ::std::option::Option<&str> {
        self.app_bundle_identifier.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the app authorization to use for the request.</p>
    pub fn app_authorization_identifier(&self) -> ::std::option::Option<&str> {
        self.app_authorization_identifier.as_deref()
    }
    /// <p>Contains credentials for the application, such as an API key or OAuth2 client ID and secret.</p>
    /// <p>Specify credentials that match the authorization type of the app authorization to update. For example, if the authorization type of the app authorization is OAuth2 (<code>oauth2</code>), then you should provide only the OAuth2 credentials.</p>
    pub fn credential(&self) -> ::std::option::Option<&crate::types::Credential> {
        self.credential.as_ref()
    }
    /// <p>Contains information about an application tenant, such as the application display name and identifier.</p>
    pub fn tenant(&self) -> ::std::option::Option<&crate::types::Tenant> {
        self.tenant.as_ref()
    }
}
impl UpdateAppAuthorizationInput {
    /// Creates a new builder-style object to manufacture [`UpdateAppAuthorizationInput`](crate::operation::update_app_authorization::UpdateAppAuthorizationInput).
    pub fn builder() -> crate::operation::update_app_authorization::builders::UpdateAppAuthorizationInputBuilder {
        crate::operation::update_app_authorization::builders::UpdateAppAuthorizationInputBuilder::default()
    }
}

/// A builder for [`UpdateAppAuthorizationInput`](crate::operation::update_app_authorization::UpdateAppAuthorizationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateAppAuthorizationInputBuilder {
    pub(crate) app_bundle_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) app_authorization_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) credential: ::std::option::Option<crate::types::Credential>,
    pub(crate) tenant: ::std::option::Option<crate::types::Tenant>,
}
impl UpdateAppAuthorizationInputBuilder {
    /// <p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the app bundle to use for the request.</p>
    /// This field is required.
    pub fn app_bundle_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_bundle_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the app bundle to use for the request.</p>
    pub fn set_app_bundle_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_bundle_identifier = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the app bundle to use for the request.</p>
    pub fn get_app_bundle_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_bundle_identifier
    }
    /// <p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the app authorization to use for the request.</p>
    /// This field is required.
    pub fn app_authorization_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_authorization_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the app authorization to use for the request.</p>
    pub fn set_app_authorization_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_authorization_identifier = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the app authorization to use for the request.</p>
    pub fn get_app_authorization_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_authorization_identifier
    }
    /// <p>Contains credentials for the application, such as an API key or OAuth2 client ID and secret.</p>
    /// <p>Specify credentials that match the authorization type of the app authorization to update. For example, if the authorization type of the app authorization is OAuth2 (<code>oauth2</code>), then you should provide only the OAuth2 credentials.</p>
    pub fn credential(mut self, input: crate::types::Credential) -> Self {
        self.credential = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains credentials for the application, such as an API key or OAuth2 client ID and secret.</p>
    /// <p>Specify credentials that match the authorization type of the app authorization to update. For example, if the authorization type of the app authorization is OAuth2 (<code>oauth2</code>), then you should provide only the OAuth2 credentials.</p>
    pub fn set_credential(mut self, input: ::std::option::Option<crate::types::Credential>) -> Self {
        self.credential = input;
        self
    }
    /// <p>Contains credentials for the application, such as an API key or OAuth2 client ID and secret.</p>
    /// <p>Specify credentials that match the authorization type of the app authorization to update. For example, if the authorization type of the app authorization is OAuth2 (<code>oauth2</code>), then you should provide only the OAuth2 credentials.</p>
    pub fn get_credential(&self) -> &::std::option::Option<crate::types::Credential> {
        &self.credential
    }
    /// <p>Contains information about an application tenant, such as the application display name and identifier.</p>
    pub fn tenant(mut self, input: crate::types::Tenant) -> Self {
        self.tenant = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about an application tenant, such as the application display name and identifier.</p>
    pub fn set_tenant(mut self, input: ::std::option::Option<crate::types::Tenant>) -> Self {
        self.tenant = input;
        self
    }
    /// <p>Contains information about an application tenant, such as the application display name and identifier.</p>
    pub fn get_tenant(&self) -> &::std::option::Option<crate::types::Tenant> {
        &self.tenant
    }
    /// Consumes the builder and constructs a [`UpdateAppAuthorizationInput`](crate::operation::update_app_authorization::UpdateAppAuthorizationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_app_authorization::UpdateAppAuthorizationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_app_authorization::UpdateAppAuthorizationInput {
            app_bundle_identifier: self.app_bundle_identifier,
            app_authorization_identifier: self.app_authorization_identifier,
            credential: self.credential,
            tenant: self.tenant,
        })
    }
}
