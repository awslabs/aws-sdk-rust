// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteIngestionDestinationInput {
    /// <p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the app bundle to use for the request.</p>
    pub app_bundle_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the ingestion to use for the request.</p>
    pub ingestion_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the ingestion destination to use for the request.</p>
    pub ingestion_destination_identifier: ::std::option::Option<::std::string::String>,
}
impl DeleteIngestionDestinationInput {
    /// <p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the app bundle to use for the request.</p>
    pub fn app_bundle_identifier(&self) -> ::std::option::Option<&str> {
        self.app_bundle_identifier.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the ingestion to use for the request.</p>
    pub fn ingestion_identifier(&self) -> ::std::option::Option<&str> {
        self.ingestion_identifier.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the ingestion destination to use for the request.</p>
    pub fn ingestion_destination_identifier(&self) -> ::std::option::Option<&str> {
        self.ingestion_destination_identifier.as_deref()
    }
}
impl DeleteIngestionDestinationInput {
    /// Creates a new builder-style object to manufacture [`DeleteIngestionDestinationInput`](crate::operation::delete_ingestion_destination::DeleteIngestionDestinationInput).
    pub fn builder() -> crate::operation::delete_ingestion_destination::builders::DeleteIngestionDestinationInputBuilder {
        crate::operation::delete_ingestion_destination::builders::DeleteIngestionDestinationInputBuilder::default()
    }
}

/// A builder for [`DeleteIngestionDestinationInput`](crate::operation::delete_ingestion_destination::DeleteIngestionDestinationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeleteIngestionDestinationInputBuilder {
    pub(crate) app_bundle_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) ingestion_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) ingestion_destination_identifier: ::std::option::Option<::std::string::String>,
}
impl DeleteIngestionDestinationInputBuilder {
    /// <p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the app bundle to use for the request.</p>
    /// This field is required.
    pub fn app_bundle_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_bundle_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the app bundle to use for the request.</p>
    pub fn set_app_bundle_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_bundle_identifier = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the app bundle to use for the request.</p>
    pub fn get_app_bundle_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_bundle_identifier
    }
    /// <p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the ingestion to use for the request.</p>
    /// This field is required.
    pub fn ingestion_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ingestion_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the ingestion to use for the request.</p>
    pub fn set_ingestion_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ingestion_identifier = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the ingestion to use for the request.</p>
    pub fn get_ingestion_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.ingestion_identifier
    }
    /// <p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the ingestion destination to use for the request.</p>
    /// This field is required.
    pub fn ingestion_destination_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ingestion_destination_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the ingestion destination to use for the request.</p>
    pub fn set_ingestion_destination_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ingestion_destination_identifier = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the ingestion destination to use for the request.</p>
    pub fn get_ingestion_destination_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.ingestion_destination_identifier
    }
    /// Consumes the builder and constructs a [`DeleteIngestionDestinationInput`](crate::operation::delete_ingestion_destination::DeleteIngestionDestinationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_ingestion_destination::DeleteIngestionDestinationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::delete_ingestion_destination::DeleteIngestionDestinationInput {
            app_bundle_identifier: self.app_bundle_identifier,
            ingestion_identifier: self.ingestion_identifier,
            ingestion_destination_identifier: self.ingestion_destination_identifier,
        })
    }
}
