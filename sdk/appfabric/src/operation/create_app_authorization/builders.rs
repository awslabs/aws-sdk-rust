// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_app_authorization::_create_app_authorization_output::CreateAppAuthorizationOutputBuilder;

pub use crate::operation::create_app_authorization::_create_app_authorization_input::CreateAppAuthorizationInputBuilder;

impl CreateAppAuthorizationInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_app_authorization::CreateAppAuthorizationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_app_authorization::CreateAppAuthorizationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_app_authorization();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateAppAuthorization`.
///
/// <p>Creates an app authorization within an app bundle, which allows AppFabric to connect to an application.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateAppAuthorizationFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_app_authorization::builders::CreateAppAuthorizationInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_app_authorization::CreateAppAuthorizationOutput,
        crate::operation::create_app_authorization::CreateAppAuthorizationError,
    > for CreateAppAuthorizationFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_app_authorization::CreateAppAuthorizationOutput,
            crate::operation::create_app_authorization::CreateAppAuthorizationError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateAppAuthorizationFluentBuilder {
    /// Creates a new `CreateAppAuthorization`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateAppAuthorization as a reference.
    pub fn as_input(&self) -> &crate::operation::create_app_authorization::builders::CreateAppAuthorizationInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_app_authorization::CreateAppAuthorizationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_app_authorization::CreateAppAuthorizationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_app_authorization::CreateAppAuthorization::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_app_authorization::CreateAppAuthorization::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_app_authorization::CreateAppAuthorizationOutput,
        crate::operation::create_app_authorization::CreateAppAuthorizationError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the app bundle to use for the request.</p>
    pub fn app_bundle_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.app_bundle_identifier(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the app bundle to use for the request.</p>
    pub fn set_app_bundle_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_app_bundle_identifier(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the app bundle to use for the request.</p>
    pub fn get_app_bundle_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_app_bundle_identifier()
    }
    /// <p>The name of the application.</p>
    /// <p>Valid values are:</p>
    /// <ul>
    /// <li> <p> <code>SLACK</code> </p> </li>
    /// <li> <p> <code>ASANA</code> </p> </li>
    /// <li> <p> <code>JIRA</code> </p> </li>
    /// <li> <p> <code>M365</code> </p> </li>
    /// <li> <p> <code>M365AUDITLOGS</code> </p> </li>
    /// <li> <p> <code>ZOOM</code> </p> </li>
    /// <li> <p> <code>ZENDESK</code> </p> </li>
    /// <li> <p> <code>OKTA</code> </p> </li>
    /// <li> <p> <code>GOOGLE</code> </p> </li>
    /// <li> <p> <code>DROPBOX</code> </p> </li>
    /// <li> <p> <code>SMARTSHEET</code> </p> </li>
    /// <li> <p> <code>CISCO</code> </p> </li>
    /// </ul>
    pub fn app(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.app(input.into());
        self
    }
    /// <p>The name of the application.</p>
    /// <p>Valid values are:</p>
    /// <ul>
    /// <li> <p> <code>SLACK</code> </p> </li>
    /// <li> <p> <code>ASANA</code> </p> </li>
    /// <li> <p> <code>JIRA</code> </p> </li>
    /// <li> <p> <code>M365</code> </p> </li>
    /// <li> <p> <code>M365AUDITLOGS</code> </p> </li>
    /// <li> <p> <code>ZOOM</code> </p> </li>
    /// <li> <p> <code>ZENDESK</code> </p> </li>
    /// <li> <p> <code>OKTA</code> </p> </li>
    /// <li> <p> <code>GOOGLE</code> </p> </li>
    /// <li> <p> <code>DROPBOX</code> </p> </li>
    /// <li> <p> <code>SMARTSHEET</code> </p> </li>
    /// <li> <p> <code>CISCO</code> </p> </li>
    /// </ul>
    pub fn set_app(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_app(input);
        self
    }
    /// <p>The name of the application.</p>
    /// <p>Valid values are:</p>
    /// <ul>
    /// <li> <p> <code>SLACK</code> </p> </li>
    /// <li> <p> <code>ASANA</code> </p> </li>
    /// <li> <p> <code>JIRA</code> </p> </li>
    /// <li> <p> <code>M365</code> </p> </li>
    /// <li> <p> <code>M365AUDITLOGS</code> </p> </li>
    /// <li> <p> <code>ZOOM</code> </p> </li>
    /// <li> <p> <code>ZENDESK</code> </p> </li>
    /// <li> <p> <code>OKTA</code> </p> </li>
    /// <li> <p> <code>GOOGLE</code> </p> </li>
    /// <li> <p> <code>DROPBOX</code> </p> </li>
    /// <li> <p> <code>SMARTSHEET</code> </p> </li>
    /// <li> <p> <code>CISCO</code> </p> </li>
    /// </ul>
    pub fn get_app(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_app()
    }
    /// <p>Contains credentials for the application, such as an API key or OAuth2 client ID and secret.</p>
    /// <p>Specify credentials that match the authorization type for your request. For example, if the authorization type for your request is OAuth2 (<code>oauth2</code>), then you should provide only the OAuth2 credentials.</p>
    pub fn credential(mut self, input: crate::types::Credential) -> Self {
        self.inner = self.inner.credential(input);
        self
    }
    /// <p>Contains credentials for the application, such as an API key or OAuth2 client ID and secret.</p>
    /// <p>Specify credentials that match the authorization type for your request. For example, if the authorization type for your request is OAuth2 (<code>oauth2</code>), then you should provide only the OAuth2 credentials.</p>
    pub fn set_credential(mut self, input: ::std::option::Option<crate::types::Credential>) -> Self {
        self.inner = self.inner.set_credential(input);
        self
    }
    /// <p>Contains credentials for the application, such as an API key or OAuth2 client ID and secret.</p>
    /// <p>Specify credentials that match the authorization type for your request. For example, if the authorization type for your request is OAuth2 (<code>oauth2</code>), then you should provide only the OAuth2 credentials.</p>
    pub fn get_credential(&self) -> &::std::option::Option<crate::types::Credential> {
        self.inner.get_credential()
    }
    /// <p>Contains information about an application tenant, such as the application display name and identifier.</p>
    pub fn tenant(mut self, input: crate::types::Tenant) -> Self {
        self.inner = self.inner.tenant(input);
        self
    }
    /// <p>Contains information about an application tenant, such as the application display name and identifier.</p>
    pub fn set_tenant(mut self, input: ::std::option::Option<crate::types::Tenant>) -> Self {
        self.inner = self.inner.set_tenant(input);
        self
    }
    /// <p>Contains information about an application tenant, such as the application display name and identifier.</p>
    pub fn get_tenant(&self) -> &::std::option::Option<crate::types::Tenant> {
        self.inner.get_tenant()
    }
    /// <p>The authorization type for the app authorization.</p>
    pub fn auth_type(mut self, input: crate::types::AuthType) -> Self {
        self.inner = self.inner.auth_type(input);
        self
    }
    /// <p>The authorization type for the app authorization.</p>
    pub fn set_auth_type(mut self, input: ::std::option::Option<crate::types::AuthType>) -> Self {
        self.inner = self.inner.set_auth_type(input);
        self
    }
    /// <p>The authorization type for the app authorization.</p>
    pub fn get_auth_type(&self) -> &::std::option::Option<crate::types::AuthType> {
        self.inner.get_auth_type()
    }
    /// <p>Specifies a unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID type of value</a>.</p>
    /// <p>If you don't provide this value, then Amazon Web Services generates a random one for you.</p>
    /// <p>If you retry the operation with the same <code>ClientToken</code>, but with different parameters, the retry fails with an <code>IdempotentParameterMismatch</code> error.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>Specifies a unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID type of value</a>.</p>
    /// <p>If you don't provide this value, then Amazon Web Services generates a random one for you.</p>
    /// <p>If you retry the operation with the same <code>ClientToken</code>, but with different parameters, the retry fails with an <code>IdempotentParameterMismatch</code> error.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>Specifies a unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID type of value</a>.</p>
    /// <p>If you don't provide this value, then Amazon Web Services generates a random one for you.</p>
    /// <p>If you retry the operation with the same <code>ClientToken</code>, but with different parameters, the retry fails with an <code>IdempotentParameterMismatch</code> error.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A map of the key-value pairs of the tag or tags to assign to the resource.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>A map of the key-value pairs of the tag or tags to assign to the resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>A map of the key-value pairs of the tag or tags to assign to the resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        self.inner.get_tags()
    }
}
