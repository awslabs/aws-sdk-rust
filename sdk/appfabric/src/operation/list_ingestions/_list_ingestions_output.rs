// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListIngestionsOutput {
    /// <p>Contains a list of ingestion summaries.</p>
    pub ingestions: ::std::vec::Vec<crate::types::IngestionSummary>,
    /// <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an <i>HTTP 400 InvalidToken error</i>.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListIngestionsOutput {
    /// <p>Contains a list of ingestion summaries.</p>
    pub fn ingestions(&self) -> &[crate::types::IngestionSummary] {
        use std::ops::Deref;
        self.ingestions.deref()
    }
    /// <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an <i>HTTP 400 InvalidToken error</i>.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for ListIngestionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListIngestionsOutput {
    /// Creates a new builder-style object to manufacture [`ListIngestionsOutput`](crate::operation::list_ingestions::ListIngestionsOutput).
    pub fn builder() -> crate::operation::list_ingestions::builders::ListIngestionsOutputBuilder {
        crate::operation::list_ingestions::builders::ListIngestionsOutputBuilder::default()
    }
}

/// A builder for [`ListIngestionsOutput`](crate::operation::list_ingestions::ListIngestionsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListIngestionsOutputBuilder {
    pub(crate) ingestions: ::std::option::Option<::std::vec::Vec<crate::types::IngestionSummary>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListIngestionsOutputBuilder {
    /// Appends an item to `ingestions`.
    ///
    /// To override the contents of this collection use [`set_ingestions`](Self::set_ingestions).
    ///
    /// <p>Contains a list of ingestion summaries.</p>
    pub fn ingestions(mut self, input: crate::types::IngestionSummary) -> Self {
        let mut v = self.ingestions.unwrap_or_default();
        v.push(input);
        self.ingestions = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains a list of ingestion summaries.</p>
    pub fn set_ingestions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::IngestionSummary>>) -> Self {
        self.ingestions = input;
        self
    }
    /// <p>Contains a list of ingestion summaries.</p>
    pub fn get_ingestions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IngestionSummary>> {
        &self.ingestions
    }
    /// <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an <i>HTTP 400 InvalidToken error</i>.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an <i>HTTP 400 InvalidToken error</i>.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an <i>HTTP 400 InvalidToken error</i>.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListIngestionsOutput`](crate::operation::list_ingestions::ListIngestionsOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`ingestions`](crate::operation::list_ingestions::builders::ListIngestionsOutputBuilder::ingestions)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_ingestions::ListIngestionsOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_ingestions::ListIngestionsOutput {
            ingestions: self.ingestions.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "ingestions",
                    "ingestions was not specified but it is required when building ListIngestionsOutput",
                )
            })?,
            next_token: self.next_token,
            _request_id: self._request_id,
        })
    }
}
