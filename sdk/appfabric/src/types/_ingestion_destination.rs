// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about an ingestion destination.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IngestionDestination {
    /// <p>The Amazon Resource Name (ARN) of the ingestion destination.</p>
    pub arn: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the ingestion.</p>
    pub ingestion_arn: ::std::string::String,
    /// <p>Contains information about how ingested data is processed.</p>
    pub processing_configuration: ::std::option::Option<crate::types::ProcessingConfiguration>,
    /// <p>Contains information about the destination of ingested data.</p>
    pub destination_configuration: ::std::option::Option<crate::types::DestinationConfiguration>,
    /// <p>The state of the ingestion destination.</p>
    /// <p>The following states are possible:</p>
    /// <ul>
    /// <li> <p> <code>Active</code>: The ingestion destination is active and is ready to be used.</p> </li>
    /// <li> <p> <code>Failed</code>: The ingestion destination has failed. If the ingestion destination is in this state, you should verify the ingestion destination configuration and try again.</p> </li>
    /// </ul>
    pub status: ::std::option::Option<crate::types::IngestionDestinationStatus>,
    /// <p>The reason for the current status of the ingestion destination.</p>
    /// <p>Only present when the <code>status</code> of ingestion destination is <code>Failed</code>.</p>
    pub status_reason: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp of when the ingestion destination was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp of when the ingestion destination was last updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl IngestionDestination {
    /// <p>The Amazon Resource Name (ARN) of the ingestion destination.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the ingestion.</p>
    pub fn ingestion_arn(&self) -> &str {
        use std::ops::Deref;
        self.ingestion_arn.deref()
    }
    /// <p>Contains information about how ingested data is processed.</p>
    pub fn processing_configuration(&self) -> ::std::option::Option<&crate::types::ProcessingConfiguration> {
        self.processing_configuration.as_ref()
    }
    /// <p>Contains information about the destination of ingested data.</p>
    pub fn destination_configuration(&self) -> ::std::option::Option<&crate::types::DestinationConfiguration> {
        self.destination_configuration.as_ref()
    }
    /// <p>The state of the ingestion destination.</p>
    /// <p>The following states are possible:</p>
    /// <ul>
    /// <li> <p> <code>Active</code>: The ingestion destination is active and is ready to be used.</p> </li>
    /// <li> <p> <code>Failed</code>: The ingestion destination has failed. If the ingestion destination is in this state, you should verify the ingestion destination configuration and try again.</p> </li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&crate::types::IngestionDestinationStatus> {
        self.status.as_ref()
    }
    /// <p>The reason for the current status of the ingestion destination.</p>
    /// <p>Only present when the <code>status</code> of ingestion destination is <code>Failed</code>.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p>The timestamp of when the ingestion destination was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The timestamp of when the ingestion destination was last updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
}
impl IngestionDestination {
    /// Creates a new builder-style object to manufacture [`IngestionDestination`](crate::types::IngestionDestination).
    pub fn builder() -> crate::types::builders::IngestionDestinationBuilder {
        crate::types::builders::IngestionDestinationBuilder::default()
    }
}

/// A builder for [`IngestionDestination`](crate::types::IngestionDestination).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct IngestionDestinationBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) ingestion_arn: ::std::option::Option<::std::string::String>,
    pub(crate) processing_configuration: ::std::option::Option<crate::types::ProcessingConfiguration>,
    pub(crate) destination_configuration: ::std::option::Option<crate::types::DestinationConfiguration>,
    pub(crate) status: ::std::option::Option<crate::types::IngestionDestinationStatus>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl IngestionDestinationBuilder {
    /// <p>The Amazon Resource Name (ARN) of the ingestion destination.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the ingestion destination.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the ingestion destination.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The Amazon Resource Name (ARN) of the ingestion.</p>
    /// This field is required.
    pub fn ingestion_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ingestion_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the ingestion.</p>
    pub fn set_ingestion_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ingestion_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the ingestion.</p>
    pub fn get_ingestion_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.ingestion_arn
    }
    /// <p>Contains information about how ingested data is processed.</p>
    /// This field is required.
    pub fn processing_configuration(mut self, input: crate::types::ProcessingConfiguration) -> Self {
        self.processing_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about how ingested data is processed.</p>
    pub fn set_processing_configuration(mut self, input: ::std::option::Option<crate::types::ProcessingConfiguration>) -> Self {
        self.processing_configuration = input;
        self
    }
    /// <p>Contains information about how ingested data is processed.</p>
    pub fn get_processing_configuration(&self) -> &::std::option::Option<crate::types::ProcessingConfiguration> {
        &self.processing_configuration
    }
    /// <p>Contains information about the destination of ingested data.</p>
    /// This field is required.
    pub fn destination_configuration(mut self, input: crate::types::DestinationConfiguration) -> Self {
        self.destination_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the destination of ingested data.</p>
    pub fn set_destination_configuration(mut self, input: ::std::option::Option<crate::types::DestinationConfiguration>) -> Self {
        self.destination_configuration = input;
        self
    }
    /// <p>Contains information about the destination of ingested data.</p>
    pub fn get_destination_configuration(&self) -> &::std::option::Option<crate::types::DestinationConfiguration> {
        &self.destination_configuration
    }
    /// <p>The state of the ingestion destination.</p>
    /// <p>The following states are possible:</p>
    /// <ul>
    /// <li> <p> <code>Active</code>: The ingestion destination is active and is ready to be used.</p> </li>
    /// <li> <p> <code>Failed</code>: The ingestion destination has failed. If the ingestion destination is in this state, you should verify the ingestion destination configuration and try again.</p> </li>
    /// </ul>
    pub fn status(mut self, input: crate::types::IngestionDestinationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the ingestion destination.</p>
    /// <p>The following states are possible:</p>
    /// <ul>
    /// <li> <p> <code>Active</code>: The ingestion destination is active and is ready to be used.</p> </li>
    /// <li> <p> <code>Failed</code>: The ingestion destination has failed. If the ingestion destination is in this state, you should verify the ingestion destination configuration and try again.</p> </li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::IngestionDestinationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The state of the ingestion destination.</p>
    /// <p>The following states are possible:</p>
    /// <ul>
    /// <li> <p> <code>Active</code>: The ingestion destination is active and is ready to be used.</p> </li>
    /// <li> <p> <code>Failed</code>: The ingestion destination has failed. If the ingestion destination is in this state, you should verify the ingestion destination configuration and try again.</p> </li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::IngestionDestinationStatus> {
        &self.status
    }
    /// <p>The reason for the current status of the ingestion destination.</p>
    /// <p>Only present when the <code>status</code> of ingestion destination is <code>Failed</code>.</p>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason for the current status of the ingestion destination.</p>
    /// <p>Only present when the <code>status</code> of ingestion destination is <code>Failed</code>.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>The reason for the current status of the ingestion destination.</p>
    /// <p>Only present when the <code>status</code> of ingestion destination is <code>Failed</code>.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// <p>The timestamp of when the ingestion destination was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the ingestion destination was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp of when the ingestion destination was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp of when the ingestion destination was last updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the ingestion destination was last updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp of when the ingestion destination was last updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// Consumes the builder and constructs a [`IngestionDestination`](crate::types::IngestionDestination).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::IngestionDestinationBuilder::arn)
    /// - [`ingestion_arn`](crate::types::builders::IngestionDestinationBuilder::ingestion_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::IngestionDestination, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::IngestionDestination {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building IngestionDestination",
                )
            })?,
            ingestion_arn: self.ingestion_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "ingestion_arn",
                    "ingestion_arn was not specified but it is required when building IngestionDestination",
                )
            })?,
            processing_configuration: self.processing_configuration,
            destination_configuration: self.destination_configuration,
            status: self.status,
            status_reason: self.status_reason,
            created_at: self.created_at,
            updated_at: self.updated_at,
        })
    }
}
