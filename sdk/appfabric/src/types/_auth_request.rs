// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains authorization request information, which is required for Amazon Web Services AppFabric to get the OAuth2 access token for an application.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AuthRequest {
    /// <p>The redirect URL that is specified in the AuthURL and the application client.</p>
    pub redirect_uri: ::std::string::String,
    /// <p>The authorization code returned by the application after permission is granted in the application OAuth page (after clicking on the AuthURL).</p>
    pub code: ::std::string::String,
}
impl AuthRequest {
    /// <p>The redirect URL that is specified in the AuthURL and the application client.</p>
    pub fn redirect_uri(&self) -> &str {
        use std::ops::Deref;
        self.redirect_uri.deref()
    }
    /// <p>The authorization code returned by the application after permission is granted in the application OAuth page (after clicking on the AuthURL).</p>
    pub fn code(&self) -> &str {
        use std::ops::Deref;
        self.code.deref()
    }
}
impl ::std::fmt::Debug for AuthRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AuthRequest");
        formatter.field("redirect_uri", &self.redirect_uri);
        formatter.field("code", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl AuthRequest {
    /// Creates a new builder-style object to manufacture [`AuthRequest`](crate::types::AuthRequest).
    pub fn builder() -> crate::types::builders::AuthRequestBuilder {
        crate::types::builders::AuthRequestBuilder::default()
    }
}

/// A builder for [`AuthRequest`](crate::types::AuthRequest).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct AuthRequestBuilder {
    pub(crate) redirect_uri: ::std::option::Option<::std::string::String>,
    pub(crate) code: ::std::option::Option<::std::string::String>,
}
impl AuthRequestBuilder {
    /// <p>The redirect URL that is specified in the AuthURL and the application client.</p>
    /// This field is required.
    pub fn redirect_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.redirect_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The redirect URL that is specified in the AuthURL and the application client.</p>
    pub fn set_redirect_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.redirect_uri = input;
        self
    }
    /// <p>The redirect URL that is specified in the AuthURL and the application client.</p>
    pub fn get_redirect_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.redirect_uri
    }
    /// <p>The authorization code returned by the application after permission is granted in the application OAuth page (after clicking on the AuthURL).</p>
    /// This field is required.
    pub fn code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The authorization code returned by the application after permission is granted in the application OAuth page (after clicking on the AuthURL).</p>
    pub fn set_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.code = input;
        self
    }
    /// <p>The authorization code returned by the application after permission is granted in the application OAuth page (after clicking on the AuthURL).</p>
    pub fn get_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.code
    }
    /// Consumes the builder and constructs a [`AuthRequest`](crate::types::AuthRequest).
    /// This method will fail if any of the following fields are not set:
    /// - [`redirect_uri`](crate::types::builders::AuthRequestBuilder::redirect_uri)
    /// - [`code`](crate::types::builders::AuthRequestBuilder::code)
    pub fn build(self) -> ::std::result::Result<crate::types::AuthRequest, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AuthRequest {
            redirect_uri: self.redirect_uri.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "redirect_uri",
                    "redirect_uri was not specified but it is required when building AuthRequest",
                )
            })?,
            code: self.code.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "code",
                    "code was not specified but it is required when building AuthRequest",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for AuthRequestBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AuthRequestBuilder");
        formatter.field("redirect_uri", &self.redirect_uri);
        formatter.field("code", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
