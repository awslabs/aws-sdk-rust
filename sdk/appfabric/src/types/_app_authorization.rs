// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about an app authorization.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AppAuthorization {
    /// <p>The Amazon Resource Name (ARN) of the app authorization.</p>
    pub app_authorization_arn: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the app bundle for the app authorization.</p>
    pub app_bundle_arn: ::std::string::String,
    /// <p>The name of the application.</p>
    pub app: ::std::string::String,
    /// <p>Contains information about an application tenant, such as the application display name and identifier.</p>
    pub tenant: ::std::option::Option<crate::types::Tenant>,
    /// <p>The authorization type.</p>
    pub auth_type: crate::types::AuthType,
    /// <p>The state of the app authorization.</p>
    /// <p>The following states are possible:</p>
    /// <ul>
    /// <li> <p> <code>PendingConnect</code>: The initial state of the app authorization. The app authorization is created but not yet connected.</p> </li>
    /// <li> <p> <code>Connected</code>: The app authorization is connected to the application, and is ready to be used.</p> </li>
    /// <li> <p> <code>ConnectionValidationFailed</code>: The app authorization received a validation exception when trying to connect to the application. If the app authorization is in this state, you should verify the configured credentials and try to connect the app authorization again.</p> </li>
    /// <li> <p> <code>TokenAutoRotationFailed</code>: AppFabric failed to refresh the access token. If the app authorization is in this state, you should try to reconnect the app authorization.</p> </li>
    /// </ul>
    pub status: crate::types::AppAuthorizationStatus,
    /// <p>The timestamp of when the app authorization was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The timestamp of when the app authorization was last updated.</p>
    pub updated_at: ::aws_smithy_types::DateTime,
    /// <p>The user persona of the app authorization.</p>
    /// <p>This field should always be <code>admin</code>.</p>
    pub persona: ::std::option::Option<crate::types::Persona>,
    /// <p>The application URL for the OAuth flow.</p>
    pub auth_url: ::std::option::Option<::std::string::String>,
}
impl AppAuthorization {
    /// <p>The Amazon Resource Name (ARN) of the app authorization.</p>
    pub fn app_authorization_arn(&self) -> &str {
        use std::ops::Deref;
        self.app_authorization_arn.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the app bundle for the app authorization.</p>
    pub fn app_bundle_arn(&self) -> &str {
        use std::ops::Deref;
        self.app_bundle_arn.deref()
    }
    /// <p>The name of the application.</p>
    pub fn app(&self) -> &str {
        use std::ops::Deref;
        self.app.deref()
    }
    /// <p>Contains information about an application tenant, such as the application display name and identifier.</p>
    pub fn tenant(&self) -> ::std::option::Option<&crate::types::Tenant> {
        self.tenant.as_ref()
    }
    /// <p>The authorization type.</p>
    pub fn auth_type(&self) -> &crate::types::AuthType {
        &self.auth_type
    }
    /// <p>The state of the app authorization.</p>
    /// <p>The following states are possible:</p>
    /// <ul>
    /// <li> <p> <code>PendingConnect</code>: The initial state of the app authorization. The app authorization is created but not yet connected.</p> </li>
    /// <li> <p> <code>Connected</code>: The app authorization is connected to the application, and is ready to be used.</p> </li>
    /// <li> <p> <code>ConnectionValidationFailed</code>: The app authorization received a validation exception when trying to connect to the application. If the app authorization is in this state, you should verify the configured credentials and try to connect the app authorization again.</p> </li>
    /// <li> <p> <code>TokenAutoRotationFailed</code>: AppFabric failed to refresh the access token. If the app authorization is in this state, you should try to reconnect the app authorization.</p> </li>
    /// </ul>
    pub fn status(&self) -> &crate::types::AppAuthorizationStatus {
        &self.status
    }
    /// <p>The timestamp of when the app authorization was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The timestamp of when the app authorization was last updated.</p>
    pub fn updated_at(&self) -> &::aws_smithy_types::DateTime {
        &self.updated_at
    }
    /// <p>The user persona of the app authorization.</p>
    /// <p>This field should always be <code>admin</code>.</p>
    pub fn persona(&self) -> ::std::option::Option<&crate::types::Persona> {
        self.persona.as_ref()
    }
    /// <p>The application URL for the OAuth flow.</p>
    pub fn auth_url(&self) -> ::std::option::Option<&str> {
        self.auth_url.as_deref()
    }
}
impl AppAuthorization {
    /// Creates a new builder-style object to manufacture [`AppAuthorization`](crate::types::AppAuthorization).
    pub fn builder() -> crate::types::builders::AppAuthorizationBuilder {
        crate::types::builders::AppAuthorizationBuilder::default()
    }
}

/// A builder for [`AppAuthorization`](crate::types::AppAuthorization).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AppAuthorizationBuilder {
    pub(crate) app_authorization_arn: ::std::option::Option<::std::string::String>,
    pub(crate) app_bundle_arn: ::std::option::Option<::std::string::String>,
    pub(crate) app: ::std::option::Option<::std::string::String>,
    pub(crate) tenant: ::std::option::Option<crate::types::Tenant>,
    pub(crate) auth_type: ::std::option::Option<crate::types::AuthType>,
    pub(crate) status: ::std::option::Option<crate::types::AppAuthorizationStatus>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) persona: ::std::option::Option<crate::types::Persona>,
    pub(crate) auth_url: ::std::option::Option<::std::string::String>,
}
impl AppAuthorizationBuilder {
    /// <p>The Amazon Resource Name (ARN) of the app authorization.</p>
    /// This field is required.
    pub fn app_authorization_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_authorization_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the app authorization.</p>
    pub fn set_app_authorization_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_authorization_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the app authorization.</p>
    pub fn get_app_authorization_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_authorization_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the app bundle for the app authorization.</p>
    /// This field is required.
    pub fn app_bundle_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_bundle_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the app bundle for the app authorization.</p>
    pub fn set_app_bundle_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_bundle_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the app bundle for the app authorization.</p>
    pub fn get_app_bundle_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_bundle_arn
    }
    /// <p>The name of the application.</p>
    /// This field is required.
    pub fn app(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the application.</p>
    pub fn set_app(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app = input;
        self
    }
    /// <p>The name of the application.</p>
    pub fn get_app(&self) -> &::std::option::Option<::std::string::String> {
        &self.app
    }
    /// <p>Contains information about an application tenant, such as the application display name and identifier.</p>
    /// This field is required.
    pub fn tenant(mut self, input: crate::types::Tenant) -> Self {
        self.tenant = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about an application tenant, such as the application display name and identifier.</p>
    pub fn set_tenant(mut self, input: ::std::option::Option<crate::types::Tenant>) -> Self {
        self.tenant = input;
        self
    }
    /// <p>Contains information about an application tenant, such as the application display name and identifier.</p>
    pub fn get_tenant(&self) -> &::std::option::Option<crate::types::Tenant> {
        &self.tenant
    }
    /// <p>The authorization type.</p>
    /// This field is required.
    pub fn auth_type(mut self, input: crate::types::AuthType) -> Self {
        self.auth_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The authorization type.</p>
    pub fn set_auth_type(mut self, input: ::std::option::Option<crate::types::AuthType>) -> Self {
        self.auth_type = input;
        self
    }
    /// <p>The authorization type.</p>
    pub fn get_auth_type(&self) -> &::std::option::Option<crate::types::AuthType> {
        &self.auth_type
    }
    /// <p>The state of the app authorization.</p>
    /// <p>The following states are possible:</p>
    /// <ul>
    /// <li> <p> <code>PendingConnect</code>: The initial state of the app authorization. The app authorization is created but not yet connected.</p> </li>
    /// <li> <p> <code>Connected</code>: The app authorization is connected to the application, and is ready to be used.</p> </li>
    /// <li> <p> <code>ConnectionValidationFailed</code>: The app authorization received a validation exception when trying to connect to the application. If the app authorization is in this state, you should verify the configured credentials and try to connect the app authorization again.</p> </li>
    /// <li> <p> <code>TokenAutoRotationFailed</code>: AppFabric failed to refresh the access token. If the app authorization is in this state, you should try to reconnect the app authorization.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn status(mut self, input: crate::types::AppAuthorizationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the app authorization.</p>
    /// <p>The following states are possible:</p>
    /// <ul>
    /// <li> <p> <code>PendingConnect</code>: The initial state of the app authorization. The app authorization is created but not yet connected.</p> </li>
    /// <li> <p> <code>Connected</code>: The app authorization is connected to the application, and is ready to be used.</p> </li>
    /// <li> <p> <code>ConnectionValidationFailed</code>: The app authorization received a validation exception when trying to connect to the application. If the app authorization is in this state, you should verify the configured credentials and try to connect the app authorization again.</p> </li>
    /// <li> <p> <code>TokenAutoRotationFailed</code>: AppFabric failed to refresh the access token. If the app authorization is in this state, you should try to reconnect the app authorization.</p> </li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::AppAuthorizationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The state of the app authorization.</p>
    /// <p>The following states are possible:</p>
    /// <ul>
    /// <li> <p> <code>PendingConnect</code>: The initial state of the app authorization. The app authorization is created but not yet connected.</p> </li>
    /// <li> <p> <code>Connected</code>: The app authorization is connected to the application, and is ready to be used.</p> </li>
    /// <li> <p> <code>ConnectionValidationFailed</code>: The app authorization received a validation exception when trying to connect to the application. If the app authorization is in this state, you should verify the configured credentials and try to connect the app authorization again.</p> </li>
    /// <li> <p> <code>TokenAutoRotationFailed</code>: AppFabric failed to refresh the access token. If the app authorization is in this state, you should try to reconnect the app authorization.</p> </li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::AppAuthorizationStatus> {
        &self.status
    }
    /// <p>The timestamp of when the app authorization was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the app authorization was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp of when the app authorization was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp of when the app authorization was last updated.</p>
    /// This field is required.
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the app authorization was last updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp of when the app authorization was last updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p>The user persona of the app authorization.</p>
    /// <p>This field should always be <code>admin</code>.</p>
    pub fn persona(mut self, input: crate::types::Persona) -> Self {
        self.persona = ::std::option::Option::Some(input);
        self
    }
    /// <p>The user persona of the app authorization.</p>
    /// <p>This field should always be <code>admin</code>.</p>
    pub fn set_persona(mut self, input: ::std::option::Option<crate::types::Persona>) -> Self {
        self.persona = input;
        self
    }
    /// <p>The user persona of the app authorization.</p>
    /// <p>This field should always be <code>admin</code>.</p>
    pub fn get_persona(&self) -> &::std::option::Option<crate::types::Persona> {
        &self.persona
    }
    /// <p>The application URL for the OAuth flow.</p>
    pub fn auth_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.auth_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The application URL for the OAuth flow.</p>
    pub fn set_auth_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.auth_url = input;
        self
    }
    /// <p>The application URL for the OAuth flow.</p>
    pub fn get_auth_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.auth_url
    }
    /// Consumes the builder and constructs a [`AppAuthorization`](crate::types::AppAuthorization).
    /// This method will fail if any of the following fields are not set:
    /// - [`app_authorization_arn`](crate::types::builders::AppAuthorizationBuilder::app_authorization_arn)
    /// - [`app_bundle_arn`](crate::types::builders::AppAuthorizationBuilder::app_bundle_arn)
    /// - [`app`](crate::types::builders::AppAuthorizationBuilder::app)
    /// - [`auth_type`](crate::types::builders::AppAuthorizationBuilder::auth_type)
    /// - [`status`](crate::types::builders::AppAuthorizationBuilder::status)
    /// - [`created_at`](crate::types::builders::AppAuthorizationBuilder::created_at)
    /// - [`updated_at`](crate::types::builders::AppAuthorizationBuilder::updated_at)
    pub fn build(self) -> ::std::result::Result<crate::types::AppAuthorization, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AppAuthorization {
            app_authorization_arn: self.app_authorization_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "app_authorization_arn",
                    "app_authorization_arn was not specified but it is required when building AppAuthorization",
                )
            })?,
            app_bundle_arn: self.app_bundle_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "app_bundle_arn",
                    "app_bundle_arn was not specified but it is required when building AppAuthorization",
                )
            })?,
            app: self.app.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "app",
                    "app was not specified but it is required when building AppAuthorization",
                )
            })?,
            tenant: self.tenant,
            auth_type: self.auth_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "auth_type",
                    "auth_type was not specified but it is required when building AppAuthorization",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building AppAuthorization",
                )
            })?,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building AppAuthorization",
                )
            })?,
            updated_at: self.updated_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "updated_at",
                    "updated_at was not specified but it is required when building AppAuthorization",
                )
            })?,
            persona: self.persona,
            auth_url: self.auth_url,
        })
    }
}
