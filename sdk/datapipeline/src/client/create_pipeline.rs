// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreatePipeline`](crate::operation::create_pipeline::builders::CreatePipelineFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::operation::create_pipeline::builders::CreatePipelineFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::create_pipeline::builders::CreatePipelineFluentBuilder::set_name): <p>The name for the pipeline. You can use the same name for multiple pipelines associated with your AWS account, because AWS Data Pipeline assigns each pipeline a unique pipeline identifier.</p>
    ///   - [`unique_id(impl Into<String>)`](crate::operation::create_pipeline::builders::CreatePipelineFluentBuilder::unique_id) / [`set_unique_id(Option<String>)`](crate::operation::create_pipeline::builders::CreatePipelineFluentBuilder::set_unique_id): <p>A unique identifier. This identifier is not the same as the pipeline identifier assigned by AWS Data Pipeline. You are responsible for defining the format and ensuring the uniqueness of this identifier. You use this parameter to ensure idempotency during repeated calls to <code>CreatePipeline</code>. For example, if the first call to <code>CreatePipeline</code> does not succeed, you can pass in the same unique identifier and pipeline name combination on a subsequent call to <code>CreatePipeline</code>. <code>CreatePipeline</code> ensures that if a pipeline already exists with the same name and unique identifier, a new pipeline is not created. Instead, you'll receive the pipeline identifier from the previous attempt. The uniqueness of the name and unique identifier combination is scoped to the AWS account or IAM user credentials.</p>
    ///   - [`description(impl Into<String>)`](crate::operation::create_pipeline::builders::CreatePipelineFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::create_pipeline::builders::CreatePipelineFluentBuilder::set_description): <p>The description for the pipeline.</p>
    ///   - [`tags(Vec<Tag>)`](crate::operation::create_pipeline::builders::CreatePipelineFluentBuilder::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::operation::create_pipeline::builders::CreatePipelineFluentBuilder::set_tags): <p>A list of tags to associate with the pipeline at creation. Tags let you control access to pipelines. For more information, see <a href="http://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-control-access.html">Controlling User Access to Pipelines</a> in the <i>AWS Data Pipeline Developer Guide</i>.</p>
    /// - On success, responds with [`CreatePipelineOutput`](crate::operation::create_pipeline::CreatePipelineOutput) with field(s):
    ///   - [`pipeline_id(Option<String>)`](crate::operation::create_pipeline::CreatePipelineOutput::pipeline_id): <p>The ID that AWS Data Pipeline assigns the newly created pipeline. For example, <code>df-06372391ZG65EXAMPLE</code>.</p>
    /// - On failure, responds with [`SdkError<CreatePipelineError>`](crate::operation::create_pipeline::CreatePipelineError)
    pub fn create_pipeline(
        &self,
    ) -> crate::operation::create_pipeline::builders::CreatePipelineFluentBuilder {
        crate::operation::create_pipeline::builders::CreatePipelineFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
