// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>An internal service error occurred.</p>
    InternalServiceError(crate::error::InternalServiceError),
    /// <p>The request was not valid. Verify that your request was properly formatted, that the signature was generated with the correct credentials, and that you haven't exceeded any of the service limits for your account.</p>
    InvalidRequestException(crate::error::InvalidRequestException),
    /// <p>The specified pipeline has been deleted.</p>
    PipelineDeletedException(crate::error::PipelineDeletedException),
    /// <p>The specified pipeline was not found. Verify that you used the correct user and account identifiers.</p>
    PipelineNotFoundException(crate::error::PipelineNotFoundException),
    /// <p>The specified task was not found. </p>
    TaskNotFoundException(crate::error::TaskNotFoundException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::InternalServiceError(inner) => inner.fmt(f),
            Error::InvalidRequestException(inner) => inner.fmt(f),
            Error::PipelineDeletedException(inner) => inner.fmt(f),
            Error::PipelineNotFoundException(inner) => inner.fmt(f),
            Error::TaskNotFoundException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ActivatePipelineError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ActivatePipelineError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ActivatePipelineError> for Error {
    fn from(err: crate::error::ActivatePipelineError) -> Self {
        match err {
            crate::error::ActivatePipelineError::InternalServiceError(inner) => {
                Error::InternalServiceError(inner)
            }
            crate::error::ActivatePipelineError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ActivatePipelineError::PipelineDeletedException(inner) => {
                Error::PipelineDeletedException(inner)
            }
            crate::error::ActivatePipelineError::PipelineNotFoundException(inner) => {
                Error::PipelineNotFoundException(inner)
            }
            crate::error::ActivatePipelineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AddTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AddTagsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AddTagsError> for Error {
    fn from(err: crate::error::AddTagsError) -> Self {
        match err {
            crate::error::AddTagsError::InternalServiceError(inner) => {
                Error::InternalServiceError(inner)
            }
            crate::error::AddTagsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::AddTagsError::PipelineDeletedException(inner) => {
                Error::PipelineDeletedException(inner)
            }
            crate::error::AddTagsError::PipelineNotFoundException(inner) => {
                Error::PipelineNotFoundException(inner)
            }
            crate::error::AddTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreatePipelineError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreatePipelineError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreatePipelineError> for Error {
    fn from(err: crate::error::CreatePipelineError) -> Self {
        match err {
            crate::error::CreatePipelineError::InternalServiceError(inner) => {
                Error::InternalServiceError(inner)
            }
            crate::error::CreatePipelineError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreatePipelineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeactivatePipelineError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeactivatePipelineError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeactivatePipelineError> for Error {
    fn from(err: crate::error::DeactivatePipelineError) -> Self {
        match err {
            crate::error::DeactivatePipelineError::InternalServiceError(inner) => {
                Error::InternalServiceError(inner)
            }
            crate::error::DeactivatePipelineError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeactivatePipelineError::PipelineDeletedException(inner) => {
                Error::PipelineDeletedException(inner)
            }
            crate::error::DeactivatePipelineError::PipelineNotFoundException(inner) => {
                Error::PipelineNotFoundException(inner)
            }
            crate::error::DeactivatePipelineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeletePipelineError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeletePipelineError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeletePipelineError> for Error {
    fn from(err: crate::error::DeletePipelineError) -> Self {
        match err {
            crate::error::DeletePipelineError::InternalServiceError(inner) => {
                Error::InternalServiceError(inner)
            }
            crate::error::DeletePipelineError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeletePipelineError::PipelineNotFoundException(inner) => {
                Error::PipelineNotFoundException(inner)
            }
            crate::error::DeletePipelineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeObjectsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeObjectsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeObjectsError> for Error {
    fn from(err: crate::error::DescribeObjectsError) -> Self {
        match err {
            crate::error::DescribeObjectsError::InternalServiceError(inner) => {
                Error::InternalServiceError(inner)
            }
            crate::error::DescribeObjectsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeObjectsError::PipelineDeletedException(inner) => {
                Error::PipelineDeletedException(inner)
            }
            crate::error::DescribeObjectsError::PipelineNotFoundException(inner) => {
                Error::PipelineNotFoundException(inner)
            }
            crate::error::DescribeObjectsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribePipelinesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribePipelinesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribePipelinesError> for Error {
    fn from(err: crate::error::DescribePipelinesError) -> Self {
        match err {
            crate::error::DescribePipelinesError::InternalServiceError(inner) => {
                Error::InternalServiceError(inner)
            }
            crate::error::DescribePipelinesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribePipelinesError::PipelineDeletedException(inner) => {
                Error::PipelineDeletedException(inner)
            }
            crate::error::DescribePipelinesError::PipelineNotFoundException(inner) => {
                Error::PipelineNotFoundException(inner)
            }
            crate::error::DescribePipelinesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::EvaluateExpressionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::EvaluateExpressionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::EvaluateExpressionError> for Error {
    fn from(err: crate::error::EvaluateExpressionError) -> Self {
        match err {
            crate::error::EvaluateExpressionError::InternalServiceError(inner) => {
                Error::InternalServiceError(inner)
            }
            crate::error::EvaluateExpressionError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::EvaluateExpressionError::PipelineDeletedException(inner) => {
                Error::PipelineDeletedException(inner)
            }
            crate::error::EvaluateExpressionError::PipelineNotFoundException(inner) => {
                Error::PipelineNotFoundException(inner)
            }
            crate::error::EvaluateExpressionError::TaskNotFoundException(inner) => {
                Error::TaskNotFoundException(inner)
            }
            crate::error::EvaluateExpressionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetPipelineDefinitionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetPipelineDefinitionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetPipelineDefinitionError> for Error {
    fn from(err: crate::error::GetPipelineDefinitionError) -> Self {
        match err {
            crate::error::GetPipelineDefinitionError::InternalServiceError(inner) => {
                Error::InternalServiceError(inner)
            }
            crate::error::GetPipelineDefinitionError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::GetPipelineDefinitionError::PipelineDeletedException(inner) => {
                Error::PipelineDeletedException(inner)
            }
            crate::error::GetPipelineDefinitionError::PipelineNotFoundException(inner) => {
                Error::PipelineNotFoundException(inner)
            }
            crate::error::GetPipelineDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListPipelinesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListPipelinesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListPipelinesError> for Error {
    fn from(err: crate::error::ListPipelinesError) -> Self {
        match err {
            crate::error::ListPipelinesError::InternalServiceError(inner) => {
                Error::InternalServiceError(inner)
            }
            crate::error::ListPipelinesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListPipelinesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PollForTaskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PollForTaskError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PollForTaskError> for Error {
    fn from(err: crate::error::PollForTaskError) -> Self {
        match err {
            crate::error::PollForTaskError::InternalServiceError(inner) => {
                Error::InternalServiceError(inner)
            }
            crate::error::PollForTaskError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::PollForTaskError::TaskNotFoundException(inner) => {
                Error::TaskNotFoundException(inner)
            }
            crate::error::PollForTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutPipelineDefinitionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutPipelineDefinitionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutPipelineDefinitionError> for Error {
    fn from(err: crate::error::PutPipelineDefinitionError) -> Self {
        match err {
            crate::error::PutPipelineDefinitionError::InternalServiceError(inner) => {
                Error::InternalServiceError(inner)
            }
            crate::error::PutPipelineDefinitionError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::PutPipelineDefinitionError::PipelineDeletedException(inner) => {
                Error::PipelineDeletedException(inner)
            }
            crate::error::PutPipelineDefinitionError::PipelineNotFoundException(inner) => {
                Error::PipelineNotFoundException(inner)
            }
            crate::error::PutPipelineDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::QueryObjectsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::QueryObjectsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::QueryObjectsError> for Error {
    fn from(err: crate::error::QueryObjectsError) -> Self {
        match err {
            crate::error::QueryObjectsError::InternalServiceError(inner) => {
                Error::InternalServiceError(inner)
            }
            crate::error::QueryObjectsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::QueryObjectsError::PipelineDeletedException(inner) => {
                Error::PipelineDeletedException(inner)
            }
            crate::error::QueryObjectsError::PipelineNotFoundException(inner) => {
                Error::PipelineNotFoundException(inner)
            }
            crate::error::QueryObjectsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RemoveTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::RemoveTagsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RemoveTagsError> for Error {
    fn from(err: crate::error::RemoveTagsError) -> Self {
        match err {
            crate::error::RemoveTagsError::InternalServiceError(inner) => {
                Error::InternalServiceError(inner)
            }
            crate::error::RemoveTagsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::RemoveTagsError::PipelineDeletedException(inner) => {
                Error::PipelineDeletedException(inner)
            }
            crate::error::RemoveTagsError::PipelineNotFoundException(inner) => {
                Error::PipelineNotFoundException(inner)
            }
            crate::error::RemoveTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ReportTaskProgressError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ReportTaskProgressError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ReportTaskProgressError> for Error {
    fn from(err: crate::error::ReportTaskProgressError) -> Self {
        match err {
            crate::error::ReportTaskProgressError::InternalServiceError(inner) => {
                Error::InternalServiceError(inner)
            }
            crate::error::ReportTaskProgressError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ReportTaskProgressError::PipelineDeletedException(inner) => {
                Error::PipelineDeletedException(inner)
            }
            crate::error::ReportTaskProgressError::PipelineNotFoundException(inner) => {
                Error::PipelineNotFoundException(inner)
            }
            crate::error::ReportTaskProgressError::TaskNotFoundException(inner) => {
                Error::TaskNotFoundException(inner)
            }
            crate::error::ReportTaskProgressError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ReportTaskRunnerHeartbeatError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ReportTaskRunnerHeartbeatError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ReportTaskRunnerHeartbeatError> for Error {
    fn from(err: crate::error::ReportTaskRunnerHeartbeatError) -> Self {
        match err {
            crate::error::ReportTaskRunnerHeartbeatError::InternalServiceError(inner) => {
                Error::InternalServiceError(inner)
            }
            crate::error::ReportTaskRunnerHeartbeatError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ReportTaskRunnerHeartbeatError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SetStatusError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::SetStatusError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SetStatusError> for Error {
    fn from(err: crate::error::SetStatusError) -> Self {
        match err {
            crate::error::SetStatusError::InternalServiceError(inner) => {
                Error::InternalServiceError(inner)
            }
            crate::error::SetStatusError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::SetStatusError::PipelineDeletedException(inner) => {
                Error::PipelineDeletedException(inner)
            }
            crate::error::SetStatusError::PipelineNotFoundException(inner) => {
                Error::PipelineNotFoundException(inner)
            }
            crate::error::SetStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SetTaskStatusError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::SetTaskStatusError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SetTaskStatusError> for Error {
    fn from(err: crate::error::SetTaskStatusError) -> Self {
        match err {
            crate::error::SetTaskStatusError::InternalServiceError(inner) => {
                Error::InternalServiceError(inner)
            }
            crate::error::SetTaskStatusError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::SetTaskStatusError::PipelineDeletedException(inner) => {
                Error::PipelineDeletedException(inner)
            }
            crate::error::SetTaskStatusError::PipelineNotFoundException(inner) => {
                Error::PipelineNotFoundException(inner)
            }
            crate::error::SetTaskStatusError::TaskNotFoundException(inner) => {
                Error::TaskNotFoundException(inner)
            }
            crate::error::SetTaskStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ValidatePipelineDefinitionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ValidatePipelineDefinitionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ValidatePipelineDefinitionError> for Error {
    fn from(err: crate::error::ValidatePipelineDefinitionError) -> Self {
        match err {
            crate::error::ValidatePipelineDefinitionError::InternalServiceError(inner) => {
                Error::InternalServiceError(inner)
            }
            crate::error::ValidatePipelineDefinitionError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ValidatePipelineDefinitionError::PipelineDeletedException(inner) => {
                Error::PipelineDeletedException(inner)
            }
            crate::error::ValidatePipelineDefinitionError::PipelineNotFoundException(inner) => {
                Error::PipelineNotFoundException(inner)
            }
            crate::error::ValidatePipelineDefinitionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::InternalServiceError(e) => e.request_id(),
            Self::InvalidRequestException(e) => e.request_id(),
            Self::PipelineDeletedException(e) => e.request_id(),
            Self::PipelineNotFoundException(e) => e.request_id(),
            Self::TaskNotFoundException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
