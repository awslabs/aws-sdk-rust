// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the output of EvaluateExpression.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EvaluateExpressionOutput {
    /// <p>The evaluated expression.</p>
    #[doc(hidden)]
    pub evaluated_expression: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl EvaluateExpressionOutput {
    /// <p>The evaluated expression.</p>
    pub fn evaluated_expression(&self) -> std::option::Option<&str> {
        self.evaluated_expression.as_deref()
    }
}
impl aws_http::request_id::RequestId for EvaluateExpressionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl EvaluateExpressionOutput {
    /// Creates a new builder-style object to manufacture [`EvaluateExpressionOutput`](crate::operation::evaluate_expression::EvaluateExpressionOutput).
    pub fn builder(
    ) -> crate::operation::evaluate_expression::builders::EvaluateExpressionOutputBuilder {
        crate::operation::evaluate_expression::builders::EvaluateExpressionOutputBuilder::default()
    }
}

/// A builder for [`EvaluateExpressionOutput`](crate::operation::evaluate_expression::EvaluateExpressionOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EvaluateExpressionOutputBuilder {
    pub(crate) evaluated_expression: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl EvaluateExpressionOutputBuilder {
    /// <p>The evaluated expression.</p>
    pub fn evaluated_expression(mut self, input: impl Into<std::string::String>) -> Self {
        self.evaluated_expression = Some(input.into());
        self
    }
    /// <p>The evaluated expression.</p>
    pub fn set_evaluated_expression(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.evaluated_expression = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`EvaluateExpressionOutput`](crate::operation::evaluate_expression::EvaluateExpressionOutput).
    pub fn build(self) -> crate::operation::evaluate_expression::EvaluateExpressionOutput {
        crate::operation::evaluate_expression::EvaluateExpressionOutput {
            evaluated_expression: self.evaluated_expression,
            _request_id: self._request_id,
        }
    }
}
