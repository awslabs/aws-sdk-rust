// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the parameters for EvaluateExpression.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EvaluateExpressionInput {
    /// <p>The ID of the pipeline.</p>
    pub pipeline_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the object.</p>
    pub object_id: ::std::option::Option<::std::string::String>,
    /// <p>The expression to evaluate.</p>
    pub expression: ::std::option::Option<::std::string::String>,
}
impl EvaluateExpressionInput {
    /// <p>The ID of the pipeline.</p>
    pub fn pipeline_id(&self) -> ::std::option::Option<&str> {
        self.pipeline_id.as_deref()
    }
    /// <p>The ID of the object.</p>
    pub fn object_id(&self) -> ::std::option::Option<&str> {
        self.object_id.as_deref()
    }
    /// <p>The expression to evaluate.</p>
    pub fn expression(&self) -> ::std::option::Option<&str> {
        self.expression.as_deref()
    }
}
impl EvaluateExpressionInput {
    /// Creates a new builder-style object to manufacture [`EvaluateExpressionInput`](crate::operation::evaluate_expression::EvaluateExpressionInput).
    pub fn builder() -> crate::operation::evaluate_expression::builders::EvaluateExpressionInputBuilder {
        crate::operation::evaluate_expression::builders::EvaluateExpressionInputBuilder::default()
    }
}

/// A builder for [`EvaluateExpressionInput`](crate::operation::evaluate_expression::EvaluateExpressionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EvaluateExpressionInputBuilder {
    pub(crate) pipeline_id: ::std::option::Option<::std::string::String>,
    pub(crate) object_id: ::std::option::Option<::std::string::String>,
    pub(crate) expression: ::std::option::Option<::std::string::String>,
}
impl EvaluateExpressionInputBuilder {
    /// <p>The ID of the pipeline.</p>
    /// This field is required.
    pub fn pipeline_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pipeline_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the pipeline.</p>
    pub fn set_pipeline_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pipeline_id = input;
        self
    }
    /// <p>The ID of the pipeline.</p>
    pub fn get_pipeline_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.pipeline_id
    }
    /// <p>The ID of the object.</p>
    /// This field is required.
    pub fn object_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.object_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the object.</p>
    pub fn set_object_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.object_id = input;
        self
    }
    /// <p>The ID of the object.</p>
    pub fn get_object_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.object_id
    }
    /// <p>The expression to evaluate.</p>
    /// This field is required.
    pub fn expression(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.expression = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The expression to evaluate.</p>
    pub fn set_expression(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.expression = input;
        self
    }
    /// <p>The expression to evaluate.</p>
    pub fn get_expression(&self) -> &::std::option::Option<::std::string::String> {
        &self.expression
    }
    /// Consumes the builder and constructs a [`EvaluateExpressionInput`](crate::operation::evaluate_expression::EvaluateExpressionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::evaluate_expression::EvaluateExpressionInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::evaluate_expression::EvaluateExpressionInput {
            pipeline_id: self.pipeline_id,
            object_id: self.object_id,
            expression: self.expression,
        })
    }
}
