// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::activate_pipeline::_activate_pipeline_output::ActivatePipelineOutputBuilder;

pub use crate::operation::activate_pipeline::_activate_pipeline_input::ActivatePipelineInputBuilder;

/// Fluent builder constructing a request to `ActivatePipeline`.
///
/// <p>Validates the specified pipeline and starts processing pipeline tasks. If the pipeline does not pass validation, activation fails.</p>
/// <p>If you need to pause the pipeline to investigate an issue with a component, such as a data source or script, call <code>DeactivatePipeline</code>.</p>
/// <p>To activate a finished pipeline, modify the end date for the pipeline and then activate it.</p> <examples>
/// <request>
/// POST / HTTP/1.1 Content-Type: application/x-amz-json-1.1 X-Amz-Target: DataPipeline.ActivatePipeline Content-Length: 39 Host: datapipeline.us-east-1.amazonaws.com X-Amz-Date: Mon, 12 Nov 2012 17:49:52 GMT Authorization: AuthParams {"pipelineId": "df-06372391ZG65EXAMPLE"}
/// </request>
/// <response>
/// HTTP/1.1 200 x-amzn-RequestId: ee19d5bf-074e-11e2-af6f-6bc7a6be60d9 Content-Type: application/x-amz-json-1.1 Content-Length: 2 Date: Mon, 12 Nov 2012 17:50:53 GMT {}
/// </response>
/// </examples>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ActivatePipelineFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::activate_pipeline::builders::ActivatePipelineInputBuilder,
}
impl ActivatePipelineFluentBuilder {
    /// Creates a new `ActivatePipeline`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::activate_pipeline::ActivatePipeline,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::activate_pipeline::ActivatePipelineError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::activate_pipeline::ActivatePipelineOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::activate_pipeline::ActivatePipelineError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the pipeline.</p>
    pub fn pipeline_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pipeline_id(input.into());
        self
    }
    /// <p>The ID of the pipeline.</p>
    pub fn set_pipeline_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_pipeline_id(input);
        self
    }
    /// Appends an item to `parameterValues`.
    ///
    /// To override the contents of this collection use [`set_parameter_values`](Self::set_parameter_values).
    ///
    /// <p>A list of parameter values to pass to the pipeline at activation.</p>
    pub fn parameter_values(mut self, input: crate::types::ParameterValue) -> Self {
        self.inner = self.inner.parameter_values(input);
        self
    }
    /// <p>A list of parameter values to pass to the pipeline at activation.</p>
    pub fn set_parameter_values(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ParameterValue>>,
    ) -> Self {
        self.inner = self.inner.set_parameter_values(input);
        self
    }
    /// <p>The date and time to resume the pipeline. By default, the pipeline resumes from the last completed execution.</p>
    pub fn start_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.start_timestamp(input);
        self
    }
    /// <p>The date and time to resume the pipeline. By default, the pipeline resumes from the last completed execution.</p>
    pub fn set_start_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_start_timestamp(input);
        self
    }
}
