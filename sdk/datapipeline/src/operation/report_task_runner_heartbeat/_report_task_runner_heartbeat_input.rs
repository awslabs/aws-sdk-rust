// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the parameters for ReportTaskRunnerHeartbeat.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ReportTaskRunnerHeartbeatInput {
    /// <p>The ID of the task runner. This value should be unique across your AWS account. In the case of AWS Data Pipeline Task Runner launched on a resource managed by AWS Data Pipeline, the web service provides a unique identifier when it launches the application. If you have written a custom task runner, you should assign a unique identifier for the task runner.</p>
    pub taskrunner_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of task the task runner is configured to accept and process. The worker group is set as a field on objects in the pipeline when they are created. You can only specify a single value for <code>workerGroup</code>. There are no wildcard values permitted in <code>workerGroup</code>; the string must be an exact, case-sensitive, match.</p>
    pub worker_group: ::std::option::Option<::std::string::String>,
    /// <p>The public DNS name of the task runner.</p>
    pub hostname: ::std::option::Option<::std::string::String>,
}
impl ReportTaskRunnerHeartbeatInput {
    /// <p>The ID of the task runner. This value should be unique across your AWS account. In the case of AWS Data Pipeline Task Runner launched on a resource managed by AWS Data Pipeline, the web service provides a unique identifier when it launches the application. If you have written a custom task runner, you should assign a unique identifier for the task runner.</p>
    pub fn taskrunner_id(&self) -> ::std::option::Option<&str> {
        self.taskrunner_id.as_deref()
    }
    /// <p>The type of task the task runner is configured to accept and process. The worker group is set as a field on objects in the pipeline when they are created. You can only specify a single value for <code>workerGroup</code>. There are no wildcard values permitted in <code>workerGroup</code>; the string must be an exact, case-sensitive, match.</p>
    pub fn worker_group(&self) -> ::std::option::Option<&str> {
        self.worker_group.as_deref()
    }
    /// <p>The public DNS name of the task runner.</p>
    pub fn hostname(&self) -> ::std::option::Option<&str> {
        self.hostname.as_deref()
    }
}
impl ReportTaskRunnerHeartbeatInput {
    /// Creates a new builder-style object to manufacture [`ReportTaskRunnerHeartbeatInput`](crate::operation::report_task_runner_heartbeat::ReportTaskRunnerHeartbeatInput).
    pub fn builder() -> crate::operation::report_task_runner_heartbeat::builders::ReportTaskRunnerHeartbeatInputBuilder {
        crate::operation::report_task_runner_heartbeat::builders::ReportTaskRunnerHeartbeatInputBuilder::default()
    }
}

/// A builder for [`ReportTaskRunnerHeartbeatInput`](crate::operation::report_task_runner_heartbeat::ReportTaskRunnerHeartbeatInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ReportTaskRunnerHeartbeatInputBuilder {
    pub(crate) taskrunner_id: ::std::option::Option<::std::string::String>,
    pub(crate) worker_group: ::std::option::Option<::std::string::String>,
    pub(crate) hostname: ::std::option::Option<::std::string::String>,
}
impl ReportTaskRunnerHeartbeatInputBuilder {
    /// <p>The ID of the task runner. This value should be unique across your AWS account. In the case of AWS Data Pipeline Task Runner launched on a resource managed by AWS Data Pipeline, the web service provides a unique identifier when it launches the application. If you have written a custom task runner, you should assign a unique identifier for the task runner.</p>
    /// This field is required.
    pub fn taskrunner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.taskrunner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the task runner. This value should be unique across your AWS account. In the case of AWS Data Pipeline Task Runner launched on a resource managed by AWS Data Pipeline, the web service provides a unique identifier when it launches the application. If you have written a custom task runner, you should assign a unique identifier for the task runner.</p>
    pub fn set_taskrunner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.taskrunner_id = input;
        self
    }
    /// <p>The ID of the task runner. This value should be unique across your AWS account. In the case of AWS Data Pipeline Task Runner launched on a resource managed by AWS Data Pipeline, the web service provides a unique identifier when it launches the application. If you have written a custom task runner, you should assign a unique identifier for the task runner.</p>
    pub fn get_taskrunner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.taskrunner_id
    }
    /// <p>The type of task the task runner is configured to accept and process. The worker group is set as a field on objects in the pipeline when they are created. You can only specify a single value for <code>workerGroup</code>. There are no wildcard values permitted in <code>workerGroup</code>; the string must be an exact, case-sensitive, match.</p>
    pub fn worker_group(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.worker_group = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of task the task runner is configured to accept and process. The worker group is set as a field on objects in the pipeline when they are created. You can only specify a single value for <code>workerGroup</code>. There are no wildcard values permitted in <code>workerGroup</code>; the string must be an exact, case-sensitive, match.</p>
    pub fn set_worker_group(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.worker_group = input;
        self
    }
    /// <p>The type of task the task runner is configured to accept and process. The worker group is set as a field on objects in the pipeline when they are created. You can only specify a single value for <code>workerGroup</code>. There are no wildcard values permitted in <code>workerGroup</code>; the string must be an exact, case-sensitive, match.</p>
    pub fn get_worker_group(&self) -> &::std::option::Option<::std::string::String> {
        &self.worker_group
    }
    /// <p>The public DNS name of the task runner.</p>
    pub fn hostname(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hostname = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The public DNS name of the task runner.</p>
    pub fn set_hostname(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hostname = input;
        self
    }
    /// <p>The public DNS name of the task runner.</p>
    pub fn get_hostname(&self) -> &::std::option::Option<::std::string::String> {
        &self.hostname
    }
    /// Consumes the builder and constructs a [`ReportTaskRunnerHeartbeatInput`](crate::operation::report_task_runner_heartbeat::ReportTaskRunnerHeartbeatInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::report_task_runner_heartbeat::ReportTaskRunnerHeartbeatInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::report_task_runner_heartbeat::ReportTaskRunnerHeartbeatInput {
            taskrunner_id: self.taskrunner_id,
            worker_group: self.worker_group,
            hostname: self.hostname,
        })
    }
}
