// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the output of ReportTaskProgress.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ReportTaskProgressOutput {
    /// <p>If true, the calling task runner should cancel processing of the task. The task runner does not need to call <code>SetTaskStatus</code> for canceled tasks.</p>
    #[doc(hidden)]
    pub canceled: bool,
    _request_id: Option<String>,
}
impl ReportTaskProgressOutput {
    /// <p>If true, the calling task runner should cancel processing of the task. The task runner does not need to call <code>SetTaskStatus</code> for canceled tasks.</p>
    pub fn canceled(&self) -> bool {
        self.canceled
    }
}
impl aws_http::request_id::RequestId for ReportTaskProgressOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ReportTaskProgressOutput {
    /// Creates a new builder-style object to manufacture [`ReportTaskProgressOutput`](crate::operation::report_task_progress::ReportTaskProgressOutput).
    pub fn builder(
    ) -> crate::operation::report_task_progress::builders::ReportTaskProgressOutputBuilder {
        crate::operation::report_task_progress::builders::ReportTaskProgressOutputBuilder::default()
    }
}

/// A builder for [`ReportTaskProgressOutput`](crate::operation::report_task_progress::ReportTaskProgressOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ReportTaskProgressOutputBuilder {
    pub(crate) canceled: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl ReportTaskProgressOutputBuilder {
    /// <p>If true, the calling task runner should cancel processing of the task. The task runner does not need to call <code>SetTaskStatus</code> for canceled tasks.</p>
    pub fn canceled(mut self, input: bool) -> Self {
        self.canceled = Some(input);
        self
    }
    /// <p>If true, the calling task runner should cancel processing of the task. The task runner does not need to call <code>SetTaskStatus</code> for canceled tasks.</p>
    pub fn set_canceled(mut self, input: std::option::Option<bool>) -> Self {
        self.canceled = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ReportTaskProgressOutput`](crate::operation::report_task_progress::ReportTaskProgressOutput).
    pub fn build(self) -> crate::operation::report_task_progress::ReportTaskProgressOutput {
        crate::operation::report_task_progress::ReportTaskProgressOutput {
            canceled: self.canceled.unwrap_or_default(),
            _request_id: self._request_id,
        }
    }
}
