// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the output of ListPipelines.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListPipelinesOutput {
    /// <p>The pipeline identifiers. If you require additional information about the pipelines, you can use these identifiers to call <code>DescribePipelines</code> and <code>GetPipelineDefinition</code>.</p>
    pub pipeline_id_list: ::std::vec::Vec<crate::types::PipelineIdName>,
    /// <p>The starting point for the next page of results. To view the next page of results, call <code>ListPipelinesOutput</code> again with this marker value. If the value is null, there are no more results.</p>
    pub marker: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether there are more results that can be obtained by a subsequent call.</p>
    pub has_more_results: bool,
    _request_id: Option<String>,
}
impl ListPipelinesOutput {
    /// <p>The pipeline identifiers. If you require additional information about the pipelines, you can use these identifiers to call <code>DescribePipelines</code> and <code>GetPipelineDefinition</code>.</p>
    pub fn pipeline_id_list(&self) -> &[crate::types::PipelineIdName] {
        use std::ops::Deref;
        self.pipeline_id_list.deref()
    }
    /// <p>The starting point for the next page of results. To view the next page of results, call <code>ListPipelinesOutput</code> again with this marker value. If the value is null, there are no more results.</p>
    pub fn marker(&self) -> ::std::option::Option<&str> {
        self.marker.as_deref()
    }
    /// <p>Indicates whether there are more results that can be obtained by a subsequent call.</p>
    pub fn has_more_results(&self) -> bool {
        self.has_more_results
    }
}
impl ::aws_http::request_id::RequestId for ListPipelinesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListPipelinesOutput {
    /// Creates a new builder-style object to manufacture [`ListPipelinesOutput`](crate::operation::list_pipelines::ListPipelinesOutput).
    pub fn builder() -> crate::operation::list_pipelines::builders::ListPipelinesOutputBuilder {
        crate::operation::list_pipelines::builders::ListPipelinesOutputBuilder::default()
    }
}

/// A builder for [`ListPipelinesOutput`](crate::operation::list_pipelines::ListPipelinesOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListPipelinesOutputBuilder {
    pub(crate) pipeline_id_list: ::std::option::Option<::std::vec::Vec<crate::types::PipelineIdName>>,
    pub(crate) marker: ::std::option::Option<::std::string::String>,
    pub(crate) has_more_results: ::std::option::Option<bool>,
    _request_id: Option<String>,
}
impl ListPipelinesOutputBuilder {
    /// Appends an item to `pipeline_id_list`.
    ///
    /// To override the contents of this collection use [`set_pipeline_id_list`](Self::set_pipeline_id_list).
    ///
    /// <p>The pipeline identifiers. If you require additional information about the pipelines, you can use these identifiers to call <code>DescribePipelines</code> and <code>GetPipelineDefinition</code>.</p>
    pub fn pipeline_id_list(mut self, input: crate::types::PipelineIdName) -> Self {
        let mut v = self.pipeline_id_list.unwrap_or_default();
        v.push(input);
        self.pipeline_id_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>The pipeline identifiers. If you require additional information about the pipelines, you can use these identifiers to call <code>DescribePipelines</code> and <code>GetPipelineDefinition</code>.</p>
    pub fn set_pipeline_id_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PipelineIdName>>) -> Self {
        self.pipeline_id_list = input;
        self
    }
    /// <p>The pipeline identifiers. If you require additional information about the pipelines, you can use these identifiers to call <code>DescribePipelines</code> and <code>GetPipelineDefinition</code>.</p>
    pub fn get_pipeline_id_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PipelineIdName>> {
        &self.pipeline_id_list
    }
    /// <p>The starting point for the next page of results. To view the next page of results, call <code>ListPipelinesOutput</code> again with this marker value. If the value is null, there are no more results.</p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The starting point for the next page of results. To view the next page of results, call <code>ListPipelinesOutput</code> again with this marker value. If the value is null, there are no more results.</p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>The starting point for the next page of results. To view the next page of results, call <code>ListPipelinesOutput</code> again with this marker value. If the value is null, there are no more results.</p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.marker
    }
    /// <p>Indicates whether there are more results that can be obtained by a subsequent call.</p>
    pub fn has_more_results(mut self, input: bool) -> Self {
        self.has_more_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether there are more results that can be obtained by a subsequent call.</p>
    pub fn set_has_more_results(mut self, input: ::std::option::Option<bool>) -> Self {
        self.has_more_results = input;
        self
    }
    /// <p>Indicates whether there are more results that can be obtained by a subsequent call.</p>
    pub fn get_has_more_results(&self) -> &::std::option::Option<bool> {
        &self.has_more_results
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListPipelinesOutput`](crate::operation::list_pipelines::ListPipelinesOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`pipeline_id_list`](crate::operation::list_pipelines::builders::ListPipelinesOutputBuilder::pipeline_id_list)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_pipelines::ListPipelinesOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_pipelines::ListPipelinesOutput {
            pipeline_id_list: self.pipeline_id_list.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "pipeline_id_list",
                    "pipeline_id_list was not specified but it is required when building ListPipelinesOutput",
                )
            })?,
            marker: self.marker,
            has_more_results: self.has_more_results.unwrap_or_default(),
            _request_id: self._request_id,
        })
    }
}
