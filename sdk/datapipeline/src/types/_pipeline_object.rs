// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a pipeline object. This can be a logical, physical, or physical attempt pipeline object. The complete set of components of a pipeline defines the pipeline.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PipelineObject {
    /// <p>The ID of the object.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The name of the object.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>Key-value pairs that define the properties of the object.</p>
    #[doc(hidden)]
    pub fields: std::option::Option<std::vec::Vec<crate::types::Field>>,
}
impl PipelineObject {
    /// <p>The ID of the object.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the object.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Key-value pairs that define the properties of the object.</p>
    pub fn fields(&self) -> std::option::Option<&[crate::types::Field]> {
        self.fields.as_deref()
    }
}
impl PipelineObject {
    /// Creates a new builder-style object to manufacture [`PipelineObject`](crate::types::PipelineObject).
    pub fn builder() -> crate::types::builders::PipelineObjectBuilder {
        crate::types::builders::PipelineObjectBuilder::default()
    }
}

/// A builder for [`PipelineObject`](crate::types::PipelineObject).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PipelineObjectBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) fields: std::option::Option<std::vec::Vec<crate::types::Field>>,
}
impl PipelineObjectBuilder {
    /// <p>The ID of the object.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The ID of the object.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The name of the object.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the object.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Appends an item to `fields`.
    ///
    /// To override the contents of this collection use [`set_fields`](Self::set_fields).
    ///
    /// <p>Key-value pairs that define the properties of the object.</p>
    pub fn fields(mut self, input: crate::types::Field) -> Self {
        let mut v = self.fields.unwrap_or_default();
        v.push(input);
        self.fields = Some(v);
        self
    }
    /// <p>Key-value pairs that define the properties of the object.</p>
    pub fn set_fields(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Field>>,
    ) -> Self {
        self.fields = input;
        self
    }
    /// Consumes the builder and constructs a [`PipelineObject`](crate::types::PipelineObject).
    pub fn build(self) -> crate::types::PipelineObject {
        crate::types::PipelineObject {
            id: self.id,
            name: self.name,
            fields: self.fields,
        }
    }
}
