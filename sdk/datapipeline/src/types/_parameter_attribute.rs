// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The attributes allowed or specified with a parameter object.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ParameterAttribute {
    /// <p>The field identifier.</p>
    #[doc(hidden)]
    pub key: std::option::Option<std::string::String>,
    /// <p>The field value, expressed as a String.</p>
    #[doc(hidden)]
    pub string_value: std::option::Option<std::string::String>,
}
impl ParameterAttribute {
    /// <p>The field identifier.</p>
    pub fn key(&self) -> std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>The field value, expressed as a String.</p>
    pub fn string_value(&self) -> std::option::Option<&str> {
        self.string_value.as_deref()
    }
}
impl ParameterAttribute {
    /// Creates a new builder-style object to manufacture [`ParameterAttribute`](crate::types::ParameterAttribute).
    pub fn builder() -> crate::types::builders::ParameterAttributeBuilder {
        crate::types::builders::ParameterAttributeBuilder::default()
    }
}

/// A builder for [`ParameterAttribute`](crate::types::ParameterAttribute).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ParameterAttributeBuilder {
    pub(crate) key: std::option::Option<std::string::String>,
    pub(crate) string_value: std::option::Option<std::string::String>,
}
impl ParameterAttributeBuilder {
    /// <p>The field identifier.</p>
    pub fn key(mut self, input: impl Into<std::string::String>) -> Self {
        self.key = Some(input.into());
        self
    }
    /// <p>The field identifier.</p>
    pub fn set_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>The field value, expressed as a String.</p>
    pub fn string_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.string_value = Some(input.into());
        self
    }
    /// <p>The field value, expressed as a String.</p>
    pub fn set_string_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.string_value = input;
        self
    }
    /// Consumes the builder and constructs a [`ParameterAttribute`](crate::types::ParameterAttribute).
    pub fn build(self) -> crate::types::ParameterAttribute {
        crate::types::ParameterAttribute {
            key: self.key,
            string_value: self.string_value,
        }
    }
}
