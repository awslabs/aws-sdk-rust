// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A comparision that is used to determine whether a query should return this object.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Selector {
    /// <p>The name of the field that the operator will be applied to. The field name is the "key" portion of the field definition in the pipeline definition syntax that is used by the AWS Data Pipeline API. If the field is not set on the object, the condition fails.</p>
    #[doc(hidden)]
    pub field_name: std::option::Option<std::string::String>,
    /// <p>Contains a logical operation for comparing the value of a field with a specified value.</p>
    #[doc(hidden)]
    pub operator: std::option::Option<crate::types::Operator>,
}
impl Selector {
    /// <p>The name of the field that the operator will be applied to. The field name is the "key" portion of the field definition in the pipeline definition syntax that is used by the AWS Data Pipeline API. If the field is not set on the object, the condition fails.</p>
    pub fn field_name(&self) -> std::option::Option<&str> {
        self.field_name.as_deref()
    }
    /// <p>Contains a logical operation for comparing the value of a field with a specified value.</p>
    pub fn operator(&self) -> std::option::Option<&crate::types::Operator> {
        self.operator.as_ref()
    }
}
impl Selector {
    /// Creates a new builder-style object to manufacture [`Selector`](crate::types::Selector).
    pub fn builder() -> crate::types::builders::SelectorBuilder {
        crate::types::builders::SelectorBuilder::default()
    }
}

/// A builder for [`Selector`](crate::types::Selector).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SelectorBuilder {
    pub(crate) field_name: std::option::Option<std::string::String>,
    pub(crate) operator: std::option::Option<crate::types::Operator>,
}
impl SelectorBuilder {
    /// <p>The name of the field that the operator will be applied to. The field name is the "key" portion of the field definition in the pipeline definition syntax that is used by the AWS Data Pipeline API. If the field is not set on the object, the condition fails.</p>
    pub fn field_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.field_name = Some(input.into());
        self
    }
    /// <p>The name of the field that the operator will be applied to. The field name is the "key" portion of the field definition in the pipeline definition syntax that is used by the AWS Data Pipeline API. If the field is not set on the object, the condition fails.</p>
    pub fn set_field_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.field_name = input;
        self
    }
    /// <p>Contains a logical operation for comparing the value of a field with a specified value.</p>
    pub fn operator(mut self, input: crate::types::Operator) -> Self {
        self.operator = Some(input);
        self
    }
    /// <p>Contains a logical operation for comparing the value of a field with a specified value.</p>
    pub fn set_operator(mut self, input: std::option::Option<crate::types::Operator>) -> Self {
        self.operator = input;
        self
    }
    /// Consumes the builder and constructs a [`Selector`](crate::types::Selector).
    pub fn build(self) -> crate::types::Selector {
        crate::types::Selector {
            field_name: self.field_name,
            operator: self.operator,
        }
    }
}
