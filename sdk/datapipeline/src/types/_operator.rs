// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains a logical operation for comparing the value of a field with a specified value.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Operator {
    /// <p> The logical operation to be performed: equal (<code>EQ</code>), equal reference (<code>REF_EQ</code>), less than or equal (<code>LE</code>), greater than or equal (<code>GE</code>), or between (<code>BETWEEN</code>). Equal reference (<code>REF_EQ</code>) can be used only with reference fields. The other comparison types can be used only with String fields. The comparison types you can use apply only to certain object fields, as detailed below. </p>
    /// <p> The comparison operators EQ and REF_EQ act on the following fields: </p>
    /// <ul>
    /// <li>name</li>
    /// <li>@sphere</li>
    /// <li>parent</li>
    /// <li>@componentParent</li>
    /// <li>@instanceParent</li>
    /// <li>@status</li>
    /// <li>@scheduledStartTime</li>
    /// <li>@scheduledEndTime</li>
    /// <li>@actualStartTime</li>
    /// <li>@actualEndTime</li>
    /// </ul>
    /// <p> The comparison operators <code>GE</code>, <code>LE</code>, and <code>BETWEEN</code> act on the following fields: </p>
    /// <ul>
    /// <li>@scheduledStartTime</li>
    /// <li>@scheduledEndTime</li>
    /// <li>@actualStartTime</li>
    /// <li>@actualEndTime</li>
    /// </ul>
    /// <p>Note that fields beginning with the at sign (@) are read-only and set by the web service. When you name fields, you should choose names containing only alpha-numeric values, as symbols may be reserved by AWS Data Pipeline. User-defined fields that you add to a pipeline should prefix their name with the string "my".</p>
    pub r#type: ::std::option::Option<crate::types::OperatorType>,
    /// <p>The value that the actual field value will be compared with.</p>
    pub values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl Operator {
    /// <p> The logical operation to be performed: equal (<code>EQ</code>), equal reference (<code>REF_EQ</code>), less than or equal (<code>LE</code>), greater than or equal (<code>GE</code>), or between (<code>BETWEEN</code>). Equal reference (<code>REF_EQ</code>) can be used only with reference fields. The other comparison types can be used only with String fields. The comparison types you can use apply only to certain object fields, as detailed below. </p>
    /// <p> The comparison operators EQ and REF_EQ act on the following fields: </p>
    /// <ul>
    /// <li>name</li>
    /// <li>@sphere</li>
    /// <li>parent</li>
    /// <li>@componentParent</li>
    /// <li>@instanceParent</li>
    /// <li>@status</li>
    /// <li>@scheduledStartTime</li>
    /// <li>@scheduledEndTime</li>
    /// <li>@actualStartTime</li>
    /// <li>@actualEndTime</li>
    /// </ul>
    /// <p> The comparison operators <code>GE</code>, <code>LE</code>, and <code>BETWEEN</code> act on the following fields: </p>
    /// <ul>
    /// <li>@scheduledStartTime</li>
    /// <li>@scheduledEndTime</li>
    /// <li>@actualStartTime</li>
    /// <li>@actualEndTime</li>
    /// </ul>
    /// <p>Note that fields beginning with the at sign (@) are read-only and set by the web service. When you name fields, you should choose names containing only alpha-numeric values, as symbols may be reserved by AWS Data Pipeline. User-defined fields that you add to a pipeline should prefix their name with the string "my".</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::OperatorType> {
        self.r#type.as_ref()
    }
    /// <p>The value that the actual field value will be compared with.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.values.is_none()`.
    pub fn values(&self) -> &[::std::string::String] {
        self.values.as_deref().unwrap_or_default()
    }
}
impl Operator {
    /// Creates a new builder-style object to manufacture [`Operator`](crate::types::Operator).
    pub fn builder() -> crate::types::builders::OperatorBuilder {
        crate::types::builders::OperatorBuilder::default()
    }
}

/// A builder for [`Operator`](crate::types::Operator).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OperatorBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::OperatorType>,
    pub(crate) values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl OperatorBuilder {
    /// <p> The logical operation to be performed: equal (<code>EQ</code>), equal reference (<code>REF_EQ</code>), less than or equal (<code>LE</code>), greater than or equal (<code>GE</code>), or between (<code>BETWEEN</code>). Equal reference (<code>REF_EQ</code>) can be used only with reference fields. The other comparison types can be used only with String fields. The comparison types you can use apply only to certain object fields, as detailed below. </p>
    /// <p> The comparison operators EQ and REF_EQ act on the following fields: </p>
    /// <ul>
    /// <li>name</li>
    /// <li>@sphere</li>
    /// <li>parent</li>
    /// <li>@componentParent</li>
    /// <li>@instanceParent</li>
    /// <li>@status</li>
    /// <li>@scheduledStartTime</li>
    /// <li>@scheduledEndTime</li>
    /// <li>@actualStartTime</li>
    /// <li>@actualEndTime</li>
    /// </ul>
    /// <p> The comparison operators <code>GE</code>, <code>LE</code>, and <code>BETWEEN</code> act on the following fields: </p>
    /// <ul>
    /// <li>@scheduledStartTime</li>
    /// <li>@scheduledEndTime</li>
    /// <li>@actualStartTime</li>
    /// <li>@actualEndTime</li>
    /// </ul>
    /// <p>Note that fields beginning with the at sign (@) are read-only and set by the web service. When you name fields, you should choose names containing only alpha-numeric values, as symbols may be reserved by AWS Data Pipeline. User-defined fields that you add to a pipeline should prefix their name with the string "my".</p>
    pub fn r#type(mut self, input: crate::types::OperatorType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p> The logical operation to be performed: equal (<code>EQ</code>), equal reference (<code>REF_EQ</code>), less than or equal (<code>LE</code>), greater than or equal (<code>GE</code>), or between (<code>BETWEEN</code>). Equal reference (<code>REF_EQ</code>) can be used only with reference fields. The other comparison types can be used only with String fields. The comparison types you can use apply only to certain object fields, as detailed below. </p>
    /// <p> The comparison operators EQ and REF_EQ act on the following fields: </p>
    /// <ul>
    /// <li>name</li>
    /// <li>@sphere</li>
    /// <li>parent</li>
    /// <li>@componentParent</li>
    /// <li>@instanceParent</li>
    /// <li>@status</li>
    /// <li>@scheduledStartTime</li>
    /// <li>@scheduledEndTime</li>
    /// <li>@actualStartTime</li>
    /// <li>@actualEndTime</li>
    /// </ul>
    /// <p> The comparison operators <code>GE</code>, <code>LE</code>, and <code>BETWEEN</code> act on the following fields: </p>
    /// <ul>
    /// <li>@scheduledStartTime</li>
    /// <li>@scheduledEndTime</li>
    /// <li>@actualStartTime</li>
    /// <li>@actualEndTime</li>
    /// </ul>
    /// <p>Note that fields beginning with the at sign (@) are read-only and set by the web service. When you name fields, you should choose names containing only alpha-numeric values, as symbols may be reserved by AWS Data Pipeline. User-defined fields that you add to a pipeline should prefix their name with the string "my".</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::OperatorType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p> The logical operation to be performed: equal (<code>EQ</code>), equal reference (<code>REF_EQ</code>), less than or equal (<code>LE</code>), greater than or equal (<code>GE</code>), or between (<code>BETWEEN</code>). Equal reference (<code>REF_EQ</code>) can be used only with reference fields. The other comparison types can be used only with String fields. The comparison types you can use apply only to certain object fields, as detailed below. </p>
    /// <p> The comparison operators EQ and REF_EQ act on the following fields: </p>
    /// <ul>
    /// <li>name</li>
    /// <li>@sphere</li>
    /// <li>parent</li>
    /// <li>@componentParent</li>
    /// <li>@instanceParent</li>
    /// <li>@status</li>
    /// <li>@scheduledStartTime</li>
    /// <li>@scheduledEndTime</li>
    /// <li>@actualStartTime</li>
    /// <li>@actualEndTime</li>
    /// </ul>
    /// <p> The comparison operators <code>GE</code>, <code>LE</code>, and <code>BETWEEN</code> act on the following fields: </p>
    /// <ul>
    /// <li>@scheduledStartTime</li>
    /// <li>@scheduledEndTime</li>
    /// <li>@actualStartTime</li>
    /// <li>@actualEndTime</li>
    /// </ul>
    /// <p>Note that fields beginning with the at sign (@) are read-only and set by the web service. When you name fields, you should choose names containing only alpha-numeric values, as symbols may be reserved by AWS Data Pipeline. User-defined fields that you add to a pipeline should prefix their name with the string "my".</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::OperatorType> {
        &self.r#type
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>The value that the actual field value will be compared with.</p>
    pub fn values(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input.into());
        self.values = ::std::option::Option::Some(v);
        self
    }
    /// <p>The value that the actual field value will be compared with.</p>
    pub fn set_values(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.values = input;
        self
    }
    /// <p>The value that the actual field value will be compared with.</p>
    pub fn get_values(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.values
    }
    /// Consumes the builder and constructs a [`Operator`](crate::types::Operator).
    pub fn build(self) -> crate::types::Operator {
        crate::types::Operator {
            r#type: self.r#type,
            values: self.values,
        }
    }
}
