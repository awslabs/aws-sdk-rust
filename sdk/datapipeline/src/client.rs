// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for AWS Data Pipeline
///
/// Client for invoking operations on AWS Data Pipeline. Each operation on AWS Data Pipeline is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_datapipeline::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_datapipeline::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_datapipeline::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`ActivatePipeline`](crate::client::fluent_builders::ActivatePipeline) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`pipeline_id(impl Into<String>)`](crate::client::fluent_builders::ActivatePipeline::pipeline_id) / [`set_pipeline_id(Option<String>)`](crate::client::fluent_builders::ActivatePipeline::set_pipeline_id): <p>The ID of the pipeline.</p>
    ///   - [`parameter_values(Vec<ParameterValue>)`](crate::client::fluent_builders::ActivatePipeline::parameter_values) / [`set_parameter_values(Option<Vec<ParameterValue>>)`](crate::client::fluent_builders::ActivatePipeline::set_parameter_values): <p>A list of parameter values to pass to the pipeline at activation.</p>
    ///   - [`start_timestamp(DateTime)`](crate::client::fluent_builders::ActivatePipeline::start_timestamp) / [`set_start_timestamp(Option<DateTime>)`](crate::client::fluent_builders::ActivatePipeline::set_start_timestamp): <p>The date and time to resume the pipeline. By default, the pipeline resumes from the last completed execution.</p>
    /// - On success, responds with [`ActivatePipelineOutput`](crate::output::ActivatePipelineOutput)

    /// - On failure, responds with [`SdkError<ActivatePipelineError>`](crate::error::ActivatePipelineError)
    pub fn activate_pipeline(&self) -> crate::client::fluent_builders::ActivatePipeline {
        crate::client::fluent_builders::ActivatePipeline::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`AddTags`](crate::client::fluent_builders::AddTags) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`pipeline_id(impl Into<String>)`](crate::client::fluent_builders::AddTags::pipeline_id) / [`set_pipeline_id(Option<String>)`](crate::client::fluent_builders::AddTags::set_pipeline_id): <p>The ID of the pipeline.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::AddTags::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::AddTags::set_tags): <p>The tags to add, as key/value pairs.</p>
    /// - On success, responds with [`AddTagsOutput`](crate::output::AddTagsOutput)

    /// - On failure, responds with [`SdkError<AddTagsError>`](crate::error::AddTagsError)
    pub fn add_tags(&self) -> crate::client::fluent_builders::AddTags {
        crate::client::fluent_builders::AddTags::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreatePipeline`](crate::client::fluent_builders::CreatePipeline) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreatePipeline::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreatePipeline::set_name): <p>The name for the pipeline. You can use the same name for multiple pipelines associated with your AWS account, because AWS Data Pipeline assigns each pipeline a unique pipeline identifier.</p>
    ///   - [`unique_id(impl Into<String>)`](crate::client::fluent_builders::CreatePipeline::unique_id) / [`set_unique_id(Option<String>)`](crate::client::fluent_builders::CreatePipeline::set_unique_id): <p>A unique identifier. This identifier is not the same as the pipeline identifier assigned by AWS Data Pipeline. You are responsible for defining the format and ensuring the uniqueness of this identifier. You use this parameter to ensure idempotency during repeated calls to <code>CreatePipeline</code>. For example, if the first call to <code>CreatePipeline</code> does not succeed, you can pass in the same unique identifier and pipeline name combination on a subsequent call to <code>CreatePipeline</code>. <code>CreatePipeline</code> ensures that if a pipeline already exists with the same name and unique identifier, a new pipeline is not created. Instead, you'll receive the pipeline identifier from the previous attempt. The uniqueness of the name and unique identifier combination is scoped to the AWS account or IAM user credentials.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreatePipeline::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreatePipeline::set_description): <p>The description for the pipeline.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreatePipeline::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreatePipeline::set_tags): <p>A list of tags to associate with the pipeline at creation. Tags let you control access to pipelines. For more information, see <a href="http://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-control-access.html">Controlling User Access to Pipelines</a> in the <i>AWS Data Pipeline Developer Guide</i>.</p>
    /// - On success, responds with [`CreatePipelineOutput`](crate::output::CreatePipelineOutput) with field(s):
    ///   - [`pipeline_id(Option<String>)`](crate::output::CreatePipelineOutput::pipeline_id): <p>The ID that AWS Data Pipeline assigns the newly created pipeline. For example, <code>df-06372391ZG65EXAMPLE</code>.</p>
    /// - On failure, responds with [`SdkError<CreatePipelineError>`](crate::error::CreatePipelineError)
    pub fn create_pipeline(&self) -> crate::client::fluent_builders::CreatePipeline {
        crate::client::fluent_builders::CreatePipeline::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeactivatePipeline`](crate::client::fluent_builders::DeactivatePipeline) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`pipeline_id(impl Into<String>)`](crate::client::fluent_builders::DeactivatePipeline::pipeline_id) / [`set_pipeline_id(Option<String>)`](crate::client::fluent_builders::DeactivatePipeline::set_pipeline_id): <p>The ID of the pipeline.</p>
    ///   - [`cancel_active(bool)`](crate::client::fluent_builders::DeactivatePipeline::cancel_active) / [`set_cancel_active(Option<bool>)`](crate::client::fluent_builders::DeactivatePipeline::set_cancel_active): <p>Indicates whether to cancel any running objects. The default is true, which sets the state of any running objects to <code>CANCELED</code>. If this value is false, the pipeline is deactivated after all running objects finish.</p>
    /// - On success, responds with [`DeactivatePipelineOutput`](crate::output::DeactivatePipelineOutput)

    /// - On failure, responds with [`SdkError<DeactivatePipelineError>`](crate::error::DeactivatePipelineError)
    pub fn deactivate_pipeline(&self) -> crate::client::fluent_builders::DeactivatePipeline {
        crate::client::fluent_builders::DeactivatePipeline::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeletePipeline`](crate::client::fluent_builders::DeletePipeline) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`pipeline_id(impl Into<String>)`](crate::client::fluent_builders::DeletePipeline::pipeline_id) / [`set_pipeline_id(Option<String>)`](crate::client::fluent_builders::DeletePipeline::set_pipeline_id): <p>The ID of the pipeline.</p>
    /// - On success, responds with [`DeletePipelineOutput`](crate::output::DeletePipelineOutput)

    /// - On failure, responds with [`SdkError<DeletePipelineError>`](crate::error::DeletePipelineError)
    pub fn delete_pipeline(&self) -> crate::client::fluent_builders::DeletePipeline {
        crate::client::fluent_builders::DeletePipeline::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeObjects`](crate::client::fluent_builders::DescribeObjects) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeObjects::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`pipeline_id(impl Into<String>)`](crate::client::fluent_builders::DescribeObjects::pipeline_id) / [`set_pipeline_id(Option<String>)`](crate::client::fluent_builders::DescribeObjects::set_pipeline_id): <p>The ID of the pipeline that contains the object definitions.</p>
    ///   - [`object_ids(Vec<String>)`](crate::client::fluent_builders::DescribeObjects::object_ids) / [`set_object_ids(Option<Vec<String>>)`](crate::client::fluent_builders::DescribeObjects::set_object_ids): <p>The IDs of the pipeline objects that contain the definitions to be described. You can pass as many as 25 identifiers in a single call to <code>DescribeObjects</code>.</p>
    ///   - [`evaluate_expressions(bool)`](crate::client::fluent_builders::DescribeObjects::evaluate_expressions) / [`set_evaluate_expressions(bool)`](crate::client::fluent_builders::DescribeObjects::set_evaluate_expressions): <p>Indicates whether any expressions in the object should be evaluated when the object descriptions are returned.</p>
    ///   - [`marker(impl Into<String>)`](crate::client::fluent_builders::DescribeObjects::marker) / [`set_marker(Option<String>)`](crate::client::fluent_builders::DescribeObjects::set_marker): <p>The starting point for the results to be returned. For the first call, this value should be empty. As long as there are more results, continue to call <code>DescribeObjects</code> with the marker value from the previous call to retrieve the next set of results.</p>
    /// - On success, responds with [`DescribeObjectsOutput`](crate::output::DescribeObjectsOutput) with field(s):
    ///   - [`pipeline_objects(Option<Vec<PipelineObject>>)`](crate::output::DescribeObjectsOutput::pipeline_objects): <p>An array of object definitions.</p>
    ///   - [`marker(Option<String>)`](crate::output::DescribeObjectsOutput::marker): <p>The starting point for the next page of results. To view the next page of results, call <code>DescribeObjects</code> again with this marker value. If the value is null, there are no more results.</p>
    ///   - [`has_more_results(bool)`](crate::output::DescribeObjectsOutput::has_more_results): <p>Indicates whether there are more results to return.</p>
    /// - On failure, responds with [`SdkError<DescribeObjectsError>`](crate::error::DescribeObjectsError)
    pub fn describe_objects(&self) -> crate::client::fluent_builders::DescribeObjects {
        crate::client::fluent_builders::DescribeObjects::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribePipelines`](crate::client::fluent_builders::DescribePipelines) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`pipeline_ids(Vec<String>)`](crate::client::fluent_builders::DescribePipelines::pipeline_ids) / [`set_pipeline_ids(Option<Vec<String>>)`](crate::client::fluent_builders::DescribePipelines::set_pipeline_ids): <p>The IDs of the pipelines to describe. You can pass as many as 25 identifiers in a single call. To obtain pipeline IDs, call <code>ListPipelines</code>.</p>
    /// - On success, responds with [`DescribePipelinesOutput`](crate::output::DescribePipelinesOutput) with field(s):
    ///   - [`pipeline_description_list(Option<Vec<PipelineDescription>>)`](crate::output::DescribePipelinesOutput::pipeline_description_list): <p>An array of descriptions for the specified pipelines.</p>
    /// - On failure, responds with [`SdkError<DescribePipelinesError>`](crate::error::DescribePipelinesError)
    pub fn describe_pipelines(&self) -> crate::client::fluent_builders::DescribePipelines {
        crate::client::fluent_builders::DescribePipelines::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`EvaluateExpression`](crate::client::fluent_builders::EvaluateExpression) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`pipeline_id(impl Into<String>)`](crate::client::fluent_builders::EvaluateExpression::pipeline_id) / [`set_pipeline_id(Option<String>)`](crate::client::fluent_builders::EvaluateExpression::set_pipeline_id): <p>The ID of the pipeline.</p>
    ///   - [`object_id(impl Into<String>)`](crate::client::fluent_builders::EvaluateExpression::object_id) / [`set_object_id(Option<String>)`](crate::client::fluent_builders::EvaluateExpression::set_object_id): <p>The ID of the object.</p>
    ///   - [`expression(impl Into<String>)`](crate::client::fluent_builders::EvaluateExpression::expression) / [`set_expression(Option<String>)`](crate::client::fluent_builders::EvaluateExpression::set_expression): <p>The expression to evaluate.</p>
    /// - On success, responds with [`EvaluateExpressionOutput`](crate::output::EvaluateExpressionOutput) with field(s):
    ///   - [`evaluated_expression(Option<String>)`](crate::output::EvaluateExpressionOutput::evaluated_expression): <p>The evaluated expression.</p>
    /// - On failure, responds with [`SdkError<EvaluateExpressionError>`](crate::error::EvaluateExpressionError)
    pub fn evaluate_expression(&self) -> crate::client::fluent_builders::EvaluateExpression {
        crate::client::fluent_builders::EvaluateExpression::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetPipelineDefinition`](crate::client::fluent_builders::GetPipelineDefinition) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`pipeline_id(impl Into<String>)`](crate::client::fluent_builders::GetPipelineDefinition::pipeline_id) / [`set_pipeline_id(Option<String>)`](crate::client::fluent_builders::GetPipelineDefinition::set_pipeline_id): <p>The ID of the pipeline.</p>
    ///   - [`version(impl Into<String>)`](crate::client::fluent_builders::GetPipelineDefinition::version) / [`set_version(Option<String>)`](crate::client::fluent_builders::GetPipelineDefinition::set_version): <p>The version of the pipeline definition to retrieve. Set this parameter to <code>latest</code> (default) to use the last definition saved to the pipeline or <code>active</code> to use the last definition that was activated.</p>
    /// - On success, responds with [`GetPipelineDefinitionOutput`](crate::output::GetPipelineDefinitionOutput) with field(s):
    ///   - [`pipeline_objects(Option<Vec<PipelineObject>>)`](crate::output::GetPipelineDefinitionOutput::pipeline_objects): <p>The objects defined in the pipeline.</p>
    ///   - [`parameter_objects(Option<Vec<ParameterObject>>)`](crate::output::GetPipelineDefinitionOutput::parameter_objects): <p>The parameter objects used in the pipeline definition.</p>
    ///   - [`parameter_values(Option<Vec<ParameterValue>>)`](crate::output::GetPipelineDefinitionOutput::parameter_values): <p>The parameter values used in the pipeline definition.</p>
    /// - On failure, responds with [`SdkError<GetPipelineDefinitionError>`](crate::error::GetPipelineDefinitionError)
    pub fn get_pipeline_definition(&self) -> crate::client::fluent_builders::GetPipelineDefinition {
        crate::client::fluent_builders::GetPipelineDefinition::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListPipelines`](crate::client::fluent_builders::ListPipelines) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListPipelines::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`marker(impl Into<String>)`](crate::client::fluent_builders::ListPipelines::marker) / [`set_marker(Option<String>)`](crate::client::fluent_builders::ListPipelines::set_marker): <p>The starting point for the results to be returned. For the first call, this value should be empty. As long as there are more results, continue to call <code>ListPipelines</code> with the marker value from the previous call to retrieve the next set of results.</p>
    /// - On success, responds with [`ListPipelinesOutput`](crate::output::ListPipelinesOutput) with field(s):
    ///   - [`pipeline_id_list(Option<Vec<PipelineIdName>>)`](crate::output::ListPipelinesOutput::pipeline_id_list): <p>The pipeline identifiers. If you require additional information about the pipelines, you can use these identifiers to call <code>DescribePipelines</code> and <code>GetPipelineDefinition</code>.</p>
    ///   - [`marker(Option<String>)`](crate::output::ListPipelinesOutput::marker): <p>The starting point for the next page of results. To view the next page of results, call <code>ListPipelinesOutput</code> again with this marker value. If the value is null, there are no more results.</p>
    ///   - [`has_more_results(bool)`](crate::output::ListPipelinesOutput::has_more_results): <p>Indicates whether there are more results that can be obtained by a subsequent call.</p>
    /// - On failure, responds with [`SdkError<ListPipelinesError>`](crate::error::ListPipelinesError)
    pub fn list_pipelines(&self) -> crate::client::fluent_builders::ListPipelines {
        crate::client::fluent_builders::ListPipelines::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PollForTask`](crate::client::fluent_builders::PollForTask) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`worker_group(impl Into<String>)`](crate::client::fluent_builders::PollForTask::worker_group) / [`set_worker_group(Option<String>)`](crate::client::fluent_builders::PollForTask::set_worker_group): <p>The type of task the task runner is configured to accept and process. The worker group is set as a field on objects in the pipeline when they are created. You can only specify a single value for <code>workerGroup</code> in the call to <code>PollForTask</code>. There are no wildcard values permitted in <code>workerGroup</code>; the string must be an exact, case-sensitive, match.</p>
    ///   - [`hostname(impl Into<String>)`](crate::client::fluent_builders::PollForTask::hostname) / [`set_hostname(Option<String>)`](crate::client::fluent_builders::PollForTask::set_hostname): <p>The public DNS name of the calling task runner.</p>
    ///   - [`instance_identity(InstanceIdentity)`](crate::client::fluent_builders::PollForTask::instance_identity) / [`set_instance_identity(Option<InstanceIdentity>)`](crate::client::fluent_builders::PollForTask::set_instance_identity): <p>Identity information for the EC2 instance that is hosting the task runner. You can get this value from the instance using <code>http://169.254.169.254/latest/meta-data/instance-id</code>. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AESDG-chapter-instancedata.html">Instance Metadata</a> in the <i>Amazon Elastic Compute Cloud User Guide.</i> Passing in this value proves that your task runner is running on an EC2 instance, and ensures the proper AWS Data Pipeline service charges are applied to your pipeline.</p>
    /// - On success, responds with [`PollForTaskOutput`](crate::output::PollForTaskOutput) with field(s):
    ///   - [`task_object(Option<TaskObject>)`](crate::output::PollForTaskOutput::task_object): <p>The information needed to complete the task that is being assigned to the task runner. One of the fields returned in this object is <code>taskId</code>, which contains an identifier for the task being assigned. The calling task runner uses <code>taskId</code> in subsequent calls to <code>ReportTaskProgress</code> and <code>SetTaskStatus</code>.</p>
    /// - On failure, responds with [`SdkError<PollForTaskError>`](crate::error::PollForTaskError)
    pub fn poll_for_task(&self) -> crate::client::fluent_builders::PollForTask {
        crate::client::fluent_builders::PollForTask::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutPipelineDefinition`](crate::client::fluent_builders::PutPipelineDefinition) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`pipeline_id(impl Into<String>)`](crate::client::fluent_builders::PutPipelineDefinition::pipeline_id) / [`set_pipeline_id(Option<String>)`](crate::client::fluent_builders::PutPipelineDefinition::set_pipeline_id): <p>The ID of the pipeline.</p>
    ///   - [`pipeline_objects(Vec<PipelineObject>)`](crate::client::fluent_builders::PutPipelineDefinition::pipeline_objects) / [`set_pipeline_objects(Option<Vec<PipelineObject>>)`](crate::client::fluent_builders::PutPipelineDefinition::set_pipeline_objects): <p>The objects that define the pipeline. These objects overwrite the existing pipeline definition.</p>
    ///   - [`parameter_objects(Vec<ParameterObject>)`](crate::client::fluent_builders::PutPipelineDefinition::parameter_objects) / [`set_parameter_objects(Option<Vec<ParameterObject>>)`](crate::client::fluent_builders::PutPipelineDefinition::set_parameter_objects): <p>The parameter objects used with the pipeline.</p>
    ///   - [`parameter_values(Vec<ParameterValue>)`](crate::client::fluent_builders::PutPipelineDefinition::parameter_values) / [`set_parameter_values(Option<Vec<ParameterValue>>)`](crate::client::fluent_builders::PutPipelineDefinition::set_parameter_values): <p>The parameter values used with the pipeline.</p>
    /// - On success, responds with [`PutPipelineDefinitionOutput`](crate::output::PutPipelineDefinitionOutput) with field(s):
    ///   - [`validation_errors(Option<Vec<ValidationError>>)`](crate::output::PutPipelineDefinitionOutput::validation_errors): <p>The validation errors that are associated with the objects defined in <code>pipelineObjects</code>.</p>
    ///   - [`validation_warnings(Option<Vec<ValidationWarning>>)`](crate::output::PutPipelineDefinitionOutput::validation_warnings): <p>The validation warnings that are associated with the objects defined in <code>pipelineObjects</code>.</p>
    ///   - [`errored(bool)`](crate::output::PutPipelineDefinitionOutput::errored): <p>Indicates whether there were validation errors, and the pipeline definition is stored but cannot be activated until you correct the pipeline and call <code>PutPipelineDefinition</code> to commit the corrected pipeline.</p>
    /// - On failure, responds with [`SdkError<PutPipelineDefinitionError>`](crate::error::PutPipelineDefinitionError)
    pub fn put_pipeline_definition(&self) -> crate::client::fluent_builders::PutPipelineDefinition {
        crate::client::fluent_builders::PutPipelineDefinition::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`QueryObjects`](crate::client::fluent_builders::QueryObjects) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::QueryObjects::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`pipeline_id(impl Into<String>)`](crate::client::fluent_builders::QueryObjects::pipeline_id) / [`set_pipeline_id(Option<String>)`](crate::client::fluent_builders::QueryObjects::set_pipeline_id): <p>The ID of the pipeline.</p>
    ///   - [`query(Query)`](crate::client::fluent_builders::QueryObjects::query) / [`set_query(Option<Query>)`](crate::client::fluent_builders::QueryObjects::set_query): <p>The query that defines the objects to be returned. The <code>Query</code> object can contain a maximum of ten selectors. The conditions in the query are limited to top-level String fields in the object. These filters can be applied to components, instances, and attempts.</p>
    ///   - [`sphere(impl Into<String>)`](crate::client::fluent_builders::QueryObjects::sphere) / [`set_sphere(Option<String>)`](crate::client::fluent_builders::QueryObjects::set_sphere): <p>Indicates whether the query applies to components or instances. The possible values are: <code>COMPONENT</code>, <code>INSTANCE</code>, and <code>ATTEMPT</code>.</p>
    ///   - [`marker(impl Into<String>)`](crate::client::fluent_builders::QueryObjects::marker) / [`set_marker(Option<String>)`](crate::client::fluent_builders::QueryObjects::set_marker): <p>The starting point for the results to be returned. For the first call, this value should be empty. As long as there are more results, continue to call <code>QueryObjects</code> with the marker value from the previous call to retrieve the next set of results.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::QueryObjects::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::QueryObjects::set_limit): <p>The maximum number of object names that <code>QueryObjects</code> will return in a single call. The default value is 100. </p>
    /// - On success, responds with [`QueryObjectsOutput`](crate::output::QueryObjectsOutput) with field(s):
    ///   - [`ids(Option<Vec<String>>)`](crate::output::QueryObjectsOutput::ids): <p>The identifiers that match the query selectors.</p>
    ///   - [`marker(Option<String>)`](crate::output::QueryObjectsOutput::marker): <p>The starting point for the next page of results. To view the next page of results, call <code>QueryObjects</code> again with this marker value. If the value is null, there are no more results.</p>
    ///   - [`has_more_results(bool)`](crate::output::QueryObjectsOutput::has_more_results): <p>Indicates whether there are more results that can be obtained by a subsequent call.</p>
    /// - On failure, responds with [`SdkError<QueryObjectsError>`](crate::error::QueryObjectsError)
    pub fn query_objects(&self) -> crate::client::fluent_builders::QueryObjects {
        crate::client::fluent_builders::QueryObjects::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RemoveTags`](crate::client::fluent_builders::RemoveTags) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`pipeline_id(impl Into<String>)`](crate::client::fluent_builders::RemoveTags::pipeline_id) / [`set_pipeline_id(Option<String>)`](crate::client::fluent_builders::RemoveTags::set_pipeline_id): <p>The ID of the pipeline.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::RemoveTags::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::RemoveTags::set_tag_keys): <p>The keys of the tags to remove.</p>
    /// - On success, responds with [`RemoveTagsOutput`](crate::output::RemoveTagsOutput)

    /// - On failure, responds with [`SdkError<RemoveTagsError>`](crate::error::RemoveTagsError)
    pub fn remove_tags(&self) -> crate::client::fluent_builders::RemoveTags {
        crate::client::fluent_builders::RemoveTags::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ReportTaskProgress`](crate::client::fluent_builders::ReportTaskProgress) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`task_id(impl Into<String>)`](crate::client::fluent_builders::ReportTaskProgress::task_id) / [`set_task_id(Option<String>)`](crate::client::fluent_builders::ReportTaskProgress::set_task_id): <p>The ID of the task assigned to the task runner. This value is provided in the response for <code>PollForTask</code>.</p>
    ///   - [`fields(Vec<Field>)`](crate::client::fluent_builders::ReportTaskProgress::fields) / [`set_fields(Option<Vec<Field>>)`](crate::client::fluent_builders::ReportTaskProgress::set_fields): <p>Key-value pairs that define the properties of the ReportTaskProgressInput object.</p>
    /// - On success, responds with [`ReportTaskProgressOutput`](crate::output::ReportTaskProgressOutput) with field(s):
    ///   - [`canceled(bool)`](crate::output::ReportTaskProgressOutput::canceled): <p>If true, the calling task runner should cancel processing of the task. The task runner does not need to call <code>SetTaskStatus</code> for canceled tasks.</p>
    /// - On failure, responds with [`SdkError<ReportTaskProgressError>`](crate::error::ReportTaskProgressError)
    pub fn report_task_progress(&self) -> crate::client::fluent_builders::ReportTaskProgress {
        crate::client::fluent_builders::ReportTaskProgress::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ReportTaskRunnerHeartbeat`](crate::client::fluent_builders::ReportTaskRunnerHeartbeat) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`taskrunner_id(impl Into<String>)`](crate::client::fluent_builders::ReportTaskRunnerHeartbeat::taskrunner_id) / [`set_taskrunner_id(Option<String>)`](crate::client::fluent_builders::ReportTaskRunnerHeartbeat::set_taskrunner_id): <p>The ID of the task runner. This value should be unique across your AWS account. In the case of AWS Data Pipeline Task Runner launched on a resource managed by AWS Data Pipeline, the web service provides a unique identifier when it launches the application. If you have written a custom task runner, you should assign a unique identifier for the task runner.</p>
    ///   - [`worker_group(impl Into<String>)`](crate::client::fluent_builders::ReportTaskRunnerHeartbeat::worker_group) / [`set_worker_group(Option<String>)`](crate::client::fluent_builders::ReportTaskRunnerHeartbeat::set_worker_group): <p>The type of task the task runner is configured to accept and process. The worker group is set as a field on objects in the pipeline when they are created. You can only specify a single value for <code>workerGroup</code>. There are no wildcard values permitted in <code>workerGroup</code>; the string must be an exact, case-sensitive, match.</p>
    ///   - [`hostname(impl Into<String>)`](crate::client::fluent_builders::ReportTaskRunnerHeartbeat::hostname) / [`set_hostname(Option<String>)`](crate::client::fluent_builders::ReportTaskRunnerHeartbeat::set_hostname): <p>The public DNS name of the task runner.</p>
    /// - On success, responds with [`ReportTaskRunnerHeartbeatOutput`](crate::output::ReportTaskRunnerHeartbeatOutput) with field(s):
    ///   - [`terminate(bool)`](crate::output::ReportTaskRunnerHeartbeatOutput::terminate): <p>Indicates whether the calling task runner should terminate.</p>
    /// - On failure, responds with [`SdkError<ReportTaskRunnerHeartbeatError>`](crate::error::ReportTaskRunnerHeartbeatError)
    pub fn report_task_runner_heartbeat(
        &self,
    ) -> crate::client::fluent_builders::ReportTaskRunnerHeartbeat {
        crate::client::fluent_builders::ReportTaskRunnerHeartbeat::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`SetStatus`](crate::client::fluent_builders::SetStatus) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`pipeline_id(impl Into<String>)`](crate::client::fluent_builders::SetStatus::pipeline_id) / [`set_pipeline_id(Option<String>)`](crate::client::fluent_builders::SetStatus::set_pipeline_id): <p>The ID of the pipeline that contains the objects.</p>
    ///   - [`object_ids(Vec<String>)`](crate::client::fluent_builders::SetStatus::object_ids) / [`set_object_ids(Option<Vec<String>>)`](crate::client::fluent_builders::SetStatus::set_object_ids): <p>The IDs of the objects. The corresponding objects can be either physical or components, but not a mix of both types.</p>
    ///   - [`status(impl Into<String>)`](crate::client::fluent_builders::SetStatus::status) / [`set_status(Option<String>)`](crate::client::fluent_builders::SetStatus::set_status): <p>The status to be set on all the objects specified in <code>objectIds</code>. For components, use <code>PAUSE</code> or <code>RESUME</code>. For instances, use <code>TRY_CANCEL</code>, <code>RERUN</code>, or <code>MARK_FINISHED</code>.</p>
    /// - On success, responds with [`SetStatusOutput`](crate::output::SetStatusOutput)

    /// - On failure, responds with [`SdkError<SetStatusError>`](crate::error::SetStatusError)
    pub fn set_status(&self) -> crate::client::fluent_builders::SetStatus {
        crate::client::fluent_builders::SetStatus::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`SetTaskStatus`](crate::client::fluent_builders::SetTaskStatus) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`task_id(impl Into<String>)`](crate::client::fluent_builders::SetTaskStatus::task_id) / [`set_task_id(Option<String>)`](crate::client::fluent_builders::SetTaskStatus::set_task_id): <p>The ID of the task assigned to the task runner. This value is provided in the response for <code>PollForTask</code>.</p>
    ///   - [`task_status(TaskStatus)`](crate::client::fluent_builders::SetTaskStatus::task_status) / [`set_task_status(Option<TaskStatus>)`](crate::client::fluent_builders::SetTaskStatus::set_task_status): <p>If <code>FINISHED</code>, the task successfully completed. If <code>FAILED</code>, the task ended unsuccessfully. Preconditions use false.</p>
    ///   - [`error_id(impl Into<String>)`](crate::client::fluent_builders::SetTaskStatus::error_id) / [`set_error_id(Option<String>)`](crate::client::fluent_builders::SetTaskStatus::set_error_id): <p>If an error occurred during the task, this value specifies the error code. This value is set on the physical attempt object. It is used to display error information to the user. It should not start with string "Service_" which is reserved by the system.</p>
    ///   - [`error_message(impl Into<String>)`](crate::client::fluent_builders::SetTaskStatus::error_message) / [`set_error_message(Option<String>)`](crate::client::fluent_builders::SetTaskStatus::set_error_message): <p>If an error occurred during the task, this value specifies a text description of the error. This value is set on the physical attempt object. It is used to display error information to the user. The web service does not parse this value.</p>
    ///   - [`error_stack_trace(impl Into<String>)`](crate::client::fluent_builders::SetTaskStatus::error_stack_trace) / [`set_error_stack_trace(Option<String>)`](crate::client::fluent_builders::SetTaskStatus::set_error_stack_trace): <p>If an error occurred during the task, this value specifies the stack trace associated with the error. This value is set on the physical attempt object. It is used to display error information to the user. The web service does not parse this value.</p>
    /// - On success, responds with [`SetTaskStatusOutput`](crate::output::SetTaskStatusOutput)

    /// - On failure, responds with [`SdkError<SetTaskStatusError>`](crate::error::SetTaskStatusError)
    pub fn set_task_status(&self) -> crate::client::fluent_builders::SetTaskStatus {
        crate::client::fluent_builders::SetTaskStatus::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ValidatePipelineDefinition`](crate::client::fluent_builders::ValidatePipelineDefinition) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`pipeline_id(impl Into<String>)`](crate::client::fluent_builders::ValidatePipelineDefinition::pipeline_id) / [`set_pipeline_id(Option<String>)`](crate::client::fluent_builders::ValidatePipelineDefinition::set_pipeline_id): <p>The ID of the pipeline.</p>
    ///   - [`pipeline_objects(Vec<PipelineObject>)`](crate::client::fluent_builders::ValidatePipelineDefinition::pipeline_objects) / [`set_pipeline_objects(Option<Vec<PipelineObject>>)`](crate::client::fluent_builders::ValidatePipelineDefinition::set_pipeline_objects): <p>The objects that define the pipeline changes to validate against the pipeline.</p>
    ///   - [`parameter_objects(Vec<ParameterObject>)`](crate::client::fluent_builders::ValidatePipelineDefinition::parameter_objects) / [`set_parameter_objects(Option<Vec<ParameterObject>>)`](crate::client::fluent_builders::ValidatePipelineDefinition::set_parameter_objects): <p>The parameter objects used with the pipeline.</p>
    ///   - [`parameter_values(Vec<ParameterValue>)`](crate::client::fluent_builders::ValidatePipelineDefinition::parameter_values) / [`set_parameter_values(Option<Vec<ParameterValue>>)`](crate::client::fluent_builders::ValidatePipelineDefinition::set_parameter_values): <p>The parameter values used with the pipeline.</p>
    /// - On success, responds with [`ValidatePipelineDefinitionOutput`](crate::output::ValidatePipelineDefinitionOutput) with field(s):
    ///   - [`validation_errors(Option<Vec<ValidationError>>)`](crate::output::ValidatePipelineDefinitionOutput::validation_errors): <p>Any validation errors that were found.</p>
    ///   - [`validation_warnings(Option<Vec<ValidationWarning>>)`](crate::output::ValidatePipelineDefinitionOutput::validation_warnings): <p>Any validation warnings that were found.</p>
    ///   - [`errored(bool)`](crate::output::ValidatePipelineDefinitionOutput::errored): <p>Indicates whether there were validation errors.</p>
    /// - On failure, responds with [`SdkError<ValidatePipelineDefinitionError>`](crate::error::ValidatePipelineDefinitionError)
    pub fn validate_pipeline_definition(
        &self,
    ) -> crate::client::fluent_builders::ValidatePipelineDefinition {
        crate::client::fluent_builders::ValidatePipelineDefinition::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
