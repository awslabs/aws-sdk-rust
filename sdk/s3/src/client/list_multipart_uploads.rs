// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListMultipartUploads`](crate::operation::list_multipart_uploads::builders::ListMultipartUploadsFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`bucket(impl Into<String>)`](crate::operation::list_multipart_uploads::builders::ListMultipartUploadsFluentBuilder::bucket) / [`set_bucket(Option<String>)`](crate::operation::list_multipart_uploads::builders::ListMultipartUploadsFluentBuilder::set_bucket): <p>The name of the bucket to which the multipart upload was initiated. </p>  <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p>  <p>When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <code> <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com</code>. When using this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using Amazon S3 on Outposts</a> in the <i>Amazon S3 User Guide</i>.</p>
    ///   - [`delimiter(impl Into<String>)`](crate::operation::list_multipart_uploads::builders::ListMultipartUploadsFluentBuilder::delimiter) / [`set_delimiter(Option<String>)`](crate::operation::list_multipart_uploads::builders::ListMultipartUploadsFluentBuilder::set_delimiter): <p>Character you use to group keys.</p>  <p>All keys that contain the same string between the prefix, if specified, and the first occurrence of the delimiter after the prefix are grouped under a single result element, <code>CommonPrefixes</code>. If you don't specify the prefix parameter, then the substring starts at the beginning of the key. The keys that are grouped under <code>CommonPrefixes</code> result element are not returned elsewhere in the response.</p>
    ///   - [`encoding_type(EncodingType)`](crate::operation::list_multipart_uploads::builders::ListMultipartUploadsFluentBuilder::encoding_type) / [`set_encoding_type(Option<EncodingType>)`](crate::operation::list_multipart_uploads::builders::ListMultipartUploadsFluentBuilder::set_encoding_type): <p>Requests Amazon S3 to encode the object keys in the response and specifies the encoding method to use. An object key may contain any Unicode character; however, XML 1.0 parser cannot parse some characters, such as characters with an ASCII value from 0 to 10. For characters that are not supported in XML 1.0, you can add this parameter to request that Amazon S3 encode the keys in the response.</p>
    ///   - [`key_marker(impl Into<String>)`](crate::operation::list_multipart_uploads::builders::ListMultipartUploadsFluentBuilder::key_marker) / [`set_key_marker(Option<String>)`](crate::operation::list_multipart_uploads::builders::ListMultipartUploadsFluentBuilder::set_key_marker): <p>Together with upload-id-marker, this parameter specifies the multipart upload after which listing should begin.</p>  <p>If <code>upload-id-marker</code> is not specified, only the keys lexicographically greater than the specified <code>key-marker</code> will be included in the list.</p>  <p>If <code>upload-id-marker</code> is specified, any multipart uploads for a key equal to the <code>key-marker</code> might also be included, provided those multipart uploads have upload IDs lexicographically greater than the specified <code>upload-id-marker</code>.</p>
    ///   - [`max_uploads(i32)`](crate::operation::list_multipart_uploads::builders::ListMultipartUploadsFluentBuilder::max_uploads) / [`set_max_uploads(i32)`](crate::operation::list_multipart_uploads::builders::ListMultipartUploadsFluentBuilder::set_max_uploads): <p>Sets the maximum number of multipart uploads, from 1 to 1,000, to return in the response body. 1,000 is the maximum number of uploads that can be returned in a response.</p>
    ///   - [`prefix(impl Into<String>)`](crate::operation::list_multipart_uploads::builders::ListMultipartUploadsFluentBuilder::prefix) / [`set_prefix(Option<String>)`](crate::operation::list_multipart_uploads::builders::ListMultipartUploadsFluentBuilder::set_prefix): <p>Lists in-progress uploads only for those keys that begin with the specified prefix. You can use prefixes to separate a bucket into different grouping of keys. (You can think of using prefix to make groups in the same way you'd use a folder in a file system.)</p>
    ///   - [`upload_id_marker(impl Into<String>)`](crate::operation::list_multipart_uploads::builders::ListMultipartUploadsFluentBuilder::upload_id_marker) / [`set_upload_id_marker(Option<String>)`](crate::operation::list_multipart_uploads::builders::ListMultipartUploadsFluentBuilder::set_upload_id_marker): <p>Together with key-marker, specifies the multipart upload after which listing should begin. If key-marker is not specified, the upload-id-marker parameter is ignored. Otherwise, any multipart uploads for a key equal to the key-marker might be included in the list only if they have an upload ID lexicographically greater than the specified <code>upload-id-marker</code>.</p>
    ///   - [`expected_bucket_owner(impl Into<String>)`](crate::operation::list_multipart_uploads::builders::ListMultipartUploadsFluentBuilder::expected_bucket_owner) / [`set_expected_bucket_owner(Option<String>)`](crate::operation::list_multipart_uploads::builders::ListMultipartUploadsFluentBuilder::set_expected_bucket_owner): <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request fails with the HTTP status code <code>403 Forbidden</code> (access denied).</p>
    /// - On success, responds with [`ListMultipartUploadsOutput`](crate::operation::list_multipart_uploads::ListMultipartUploadsOutput) with field(s):
    ///   - [`bucket(Option<String>)`](crate::operation::list_multipart_uploads::ListMultipartUploadsOutput::bucket): <p>The name of the bucket to which the multipart upload was initiated. Does not return the access point ARN or access point alias if used.</p>
    ///   - [`key_marker(Option<String>)`](crate::operation::list_multipart_uploads::ListMultipartUploadsOutput::key_marker): <p>The key at or after which the listing began.</p>
    ///   - [`upload_id_marker(Option<String>)`](crate::operation::list_multipart_uploads::ListMultipartUploadsOutput::upload_id_marker): <p>Upload ID after which listing began.</p>
    ///   - [`next_key_marker(Option<String>)`](crate::operation::list_multipart_uploads::ListMultipartUploadsOutput::next_key_marker): <p>When a list is truncated, this element specifies the value that should be used for the key-marker request parameter in a subsequent request.</p>
    ///   - [`prefix(Option<String>)`](crate::operation::list_multipart_uploads::ListMultipartUploadsOutput::prefix): <p>When a prefix is provided in the request, this field contains the specified prefix. The result contains only keys starting with the specified prefix.</p>
    ///   - [`delimiter(Option<String>)`](crate::operation::list_multipart_uploads::ListMultipartUploadsOutput::delimiter): <p>Contains the delimiter you specified in the request. If you don't specify a delimiter in your request, this element is absent from the response.</p>
    ///   - [`next_upload_id_marker(Option<String>)`](crate::operation::list_multipart_uploads::ListMultipartUploadsOutput::next_upload_id_marker): <p>When a list is truncated, this element specifies the value that should be used for the <code>upload-id-marker</code> request parameter in a subsequent request.</p>
    ///   - [`max_uploads(i32)`](crate::operation::list_multipart_uploads::ListMultipartUploadsOutput::max_uploads): <p>Maximum number of multipart uploads that could have been included in the response.</p>
    ///   - [`is_truncated(bool)`](crate::operation::list_multipart_uploads::ListMultipartUploadsOutput::is_truncated): <p>Indicates whether the returned list of multipart uploads is truncated. A value of true indicates that the list was truncated. The list can be truncated if the number of multipart uploads exceeds the limit allowed or specified by max uploads.</p>
    ///   - [`uploads(Option<Vec<MultipartUpload>>)`](crate::operation::list_multipart_uploads::ListMultipartUploadsOutput::uploads): <p>Container for elements related to a particular multipart upload. A response can contain zero or more <code>Upload</code> elements.</p>
    ///   - [`common_prefixes(Option<Vec<CommonPrefix>>)`](crate::operation::list_multipart_uploads::ListMultipartUploadsOutput::common_prefixes): <p>If you specify a delimiter in the request, then the result returns each distinct key prefix containing the delimiter in a <code>CommonPrefixes</code> element. The distinct key prefixes are returned in the <code>Prefix</code> child element.</p>
    ///   - [`encoding_type(Option<EncodingType>)`](crate::operation::list_multipart_uploads::ListMultipartUploadsOutput::encoding_type): <p>Encoding type used by Amazon S3 to encode object keys in the response.</p>  <p>If you specify <code>encoding-type</code> request parameter, Amazon S3 includes this element in the response, and returns encoded key name values in the following response elements:</p>  <p> <code>Delimiter</code>, <code>KeyMarker</code>, <code>Prefix</code>, <code>NextKeyMarker</code>, <code>Key</code>.</p>
    /// - On failure, responds with [`SdkError<ListMultipartUploadsError>`](crate::operation::list_multipart_uploads::ListMultipartUploadsError)
    pub fn list_multipart_uploads(
        &self,
    ) -> crate::operation::list_multipart_uploads::builders::ListMultipartUploadsFluentBuilder {
        crate::operation::list_multipart_uploads::builders::ListMultipartUploadsFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
