// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetBucketAnalyticsConfiguration`](crate::client::fluent_builders::GetBucketAnalyticsConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`bucket(impl Into<String>)`](crate::client::fluent_builders::GetBucketAnalyticsConfiguration::bucket) / [`set_bucket(Option<String>)`](crate::client::fluent_builders::GetBucketAnalyticsConfiguration::set_bucket): <p>The name of the bucket from which an analytics configuration is retrieved.</p>
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::GetBucketAnalyticsConfiguration::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::GetBucketAnalyticsConfiguration::set_id): <p>The ID that identifies the analytics configuration.</p>
    ///   - [`expected_bucket_owner(impl Into<String>)`](crate::client::fluent_builders::GetBucketAnalyticsConfiguration::expected_bucket_owner) / [`set_expected_bucket_owner(Option<String>)`](crate::client::fluent_builders::GetBucketAnalyticsConfiguration::set_expected_bucket_owner): <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request fails with the HTTP status code <code>403 Forbidden</code> (access denied).</p>
    /// - On success, responds with [`GetBucketAnalyticsConfigurationOutput`](crate::output::GetBucketAnalyticsConfigurationOutput) with field(s):
    ///   - [`analytics_configuration(Option<AnalyticsConfiguration>)`](crate::output::GetBucketAnalyticsConfigurationOutput::analytics_configuration): <p>The configuration and any analyses for the analytics filter.</p>
    /// - On failure, responds with [`SdkError<GetBucketAnalyticsConfigurationError>`](crate::error::GetBucketAnalyticsConfigurationError)
    pub fn get_bucket_analytics_configuration(
        &self,
    ) -> crate::client::fluent_builders::GetBucketAnalyticsConfiguration {
        crate::client::fluent_builders::GetBucketAnalyticsConfiguration::new(self.handle.clone())
    }
}
