// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListObjects`](crate::operation::list_objects::builders::ListObjectsFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`bucket(impl Into<String>)`](crate::operation::list_objects::builders::ListObjectsFluentBuilder::bucket) / [`set_bucket(Option<String>)`](crate::operation::list_objects::builders::ListObjectsFluentBuilder::set_bucket): <p>The name of the bucket containing the objects.</p>  <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p>  <p>When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <code> <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com</code>. When using this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using Amazon S3 on Outposts</a> in the <i>Amazon S3 User Guide</i>.</p>
    ///   - [`delimiter(impl Into<String>)`](crate::operation::list_objects::builders::ListObjectsFluentBuilder::delimiter) / [`set_delimiter(Option<String>)`](crate::operation::list_objects::builders::ListObjectsFluentBuilder::set_delimiter): <p>A delimiter is a character you use to group keys.</p>
    ///   - [`encoding_type(EncodingType)`](crate::operation::list_objects::builders::ListObjectsFluentBuilder::encoding_type) / [`set_encoding_type(Option<EncodingType>)`](crate::operation::list_objects::builders::ListObjectsFluentBuilder::set_encoding_type): <p>Requests Amazon S3 to encode the object keys in the response and specifies the encoding method to use. An object key may contain any Unicode character; however, XML 1.0 parser cannot parse some characters, such as characters with an ASCII value from 0 to 10. For characters that are not supported in XML 1.0, you can add this parameter to request that Amazon S3 encode the keys in the response.</p>
    ///   - [`marker(impl Into<String>)`](crate::operation::list_objects::builders::ListObjectsFluentBuilder::marker) / [`set_marker(Option<String>)`](crate::operation::list_objects::builders::ListObjectsFluentBuilder::set_marker): <p>Marker is where you want Amazon S3 to start listing from. Amazon S3 starts listing after this specified key. Marker can be any key in the bucket.</p>
    ///   - [`max_keys(i32)`](crate::operation::list_objects::builders::ListObjectsFluentBuilder::max_keys) / [`set_max_keys(i32)`](crate::operation::list_objects::builders::ListObjectsFluentBuilder::set_max_keys): <p>Sets the maximum number of keys returned in the response. By default the action returns up to 1,000 key names. The response might contain fewer keys but will never contain more. </p>
    ///   - [`prefix(impl Into<String>)`](crate::operation::list_objects::builders::ListObjectsFluentBuilder::prefix) / [`set_prefix(Option<String>)`](crate::operation::list_objects::builders::ListObjectsFluentBuilder::set_prefix): <p>Limits the response to keys that begin with the specified prefix.</p>
    ///   - [`request_payer(RequestPayer)`](crate::operation::list_objects::builders::ListObjectsFluentBuilder::request_payer) / [`set_request_payer(Option<RequestPayer>)`](crate::operation::list_objects::builders::ListObjectsFluentBuilder::set_request_payer): <p>Confirms that the requester knows that she or he will be charged for the list objects request. Bucket owners need not specify this parameter in their requests.</p>
    ///   - [`expected_bucket_owner(impl Into<String>)`](crate::operation::list_objects::builders::ListObjectsFluentBuilder::expected_bucket_owner) / [`set_expected_bucket_owner(Option<String>)`](crate::operation::list_objects::builders::ListObjectsFluentBuilder::set_expected_bucket_owner): <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request fails with the HTTP status code <code>403 Forbidden</code> (access denied).</p>
    /// - On success, responds with [`ListObjectsOutput`](crate::operation::list_objects::ListObjectsOutput) with field(s):
    ///   - [`is_truncated(bool)`](crate::operation::list_objects::ListObjectsOutput::is_truncated): <p>A flag that indicates whether Amazon S3 returned all of the results that satisfied the search criteria.</p>
    ///   - [`marker(Option<String>)`](crate::operation::list_objects::ListObjectsOutput::marker): <p>Indicates where in the bucket listing begins. Marker is included in the response if it was sent with the request.</p>
    ///   - [`next_marker(Option<String>)`](crate::operation::list_objects::ListObjectsOutput::next_marker): <p>When response is truncated (the IsTruncated element value in the response is true), you can use the key name in this field as marker in the subsequent request to get next set of objects. Amazon S3 lists objects in alphabetical order Note: This element is returned only if you have delimiter request parameter specified. If response does not include the NextMarker and it is truncated, you can use the value of the last Key in the response as the marker in the subsequent request to get the next set of object keys.</p>
    ///   - [`contents(Option<Vec<Object>>)`](crate::operation::list_objects::ListObjectsOutput::contents): <p>Metadata about each object returned.</p>
    ///   - [`name(Option<String>)`](crate::operation::list_objects::ListObjectsOutput::name): <p>The bucket name.</p>
    ///   - [`prefix(Option<String>)`](crate::operation::list_objects::ListObjectsOutput::prefix): <p>Keys that begin with the indicated prefix.</p>
    ///   - [`delimiter(Option<String>)`](crate::operation::list_objects::ListObjectsOutput::delimiter): <p>Causes keys that contain the same string between the prefix and the first occurrence of the delimiter to be rolled up into a single result element in the <code>CommonPrefixes</code> collection. These rolled-up keys are not returned elsewhere in the response. Each rolled-up result counts as only one return against the <code>MaxKeys</code> value.</p>
    ///   - [`max_keys(i32)`](crate::operation::list_objects::ListObjectsOutput::max_keys): <p>The maximum number of keys returned in the response body.</p>
    ///   - [`common_prefixes(Option<Vec<CommonPrefix>>)`](crate::operation::list_objects::ListObjectsOutput::common_prefixes): <p>All of the keys (up to 1,000) rolled up in a common prefix count as a single return when calculating the number of returns. </p>  <p>A response can contain CommonPrefixes only if you specify a delimiter.</p>  <p>CommonPrefixes contains all (if there are any) keys between Prefix and the next occurrence of the string specified by the delimiter.</p>  <p> CommonPrefixes lists keys that act like subdirectories in the directory specified by Prefix.</p>  <p>For example, if the prefix is notes/ and the delimiter is a slash (/) as in notes/summer/july, the common prefix is notes/summer/. All of the keys that roll up into a common prefix count as a single return when calculating the number of returns.</p>
    ///   - [`encoding_type(Option<EncodingType>)`](crate::operation::list_objects::ListObjectsOutput::encoding_type): <p>Encoding type used by Amazon S3 to encode object keys in the response.</p>
    /// - On failure, responds with [`SdkError<ListObjectsError>`](crate::operation::list_objects::ListObjectsError)
    pub fn list_objects(
        &self,
    ) -> crate::operation::list_objects::builders::ListObjectsFluentBuilder {
        crate::operation::list_objects::builders::ListObjectsFluentBuilder::new(self.handle.clone())
    }
}
