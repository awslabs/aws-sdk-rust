// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListObjectVersions`](crate::client::fluent_builders::ListObjectVersions) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`bucket(impl Into<String>)`](crate::client::fluent_builders::ListObjectVersions::bucket) / [`set_bucket(Option<String>)`](crate::client::fluent_builders::ListObjectVersions::set_bucket): <p>The bucket name that contains the objects. </p>
    ///   - [`delimiter(impl Into<String>)`](crate::client::fluent_builders::ListObjectVersions::delimiter) / [`set_delimiter(Option<String>)`](crate::client::fluent_builders::ListObjectVersions::set_delimiter): <p>A delimiter is a character that you specify to group keys. All keys that contain the same string between the <code>prefix</code> and the first occurrence of the delimiter are grouped under a single result element in CommonPrefixes. These groups are counted as one result against the max-keys limitation. These keys are not returned elsewhere in the response.</p>
    ///   - [`encoding_type(EncodingType)`](crate::client::fluent_builders::ListObjectVersions::encoding_type) / [`set_encoding_type(Option<EncodingType>)`](crate::client::fluent_builders::ListObjectVersions::set_encoding_type): <p>Requests Amazon S3 to encode the object keys in the response and specifies the encoding method to use. An object key may contain any Unicode character; however, XML 1.0 parser cannot parse some characters, such as characters with an ASCII value from 0 to 10. For characters that are not supported in XML 1.0, you can add this parameter to request that Amazon S3 encode the keys in the response.</p>
    ///   - [`key_marker(impl Into<String>)`](crate::client::fluent_builders::ListObjectVersions::key_marker) / [`set_key_marker(Option<String>)`](crate::client::fluent_builders::ListObjectVersions::set_key_marker): <p>Specifies the key to start with when listing objects in a bucket.</p>
    ///   - [`max_keys(i32)`](crate::client::fluent_builders::ListObjectVersions::max_keys) / [`set_max_keys(i32)`](crate::client::fluent_builders::ListObjectVersions::set_max_keys): <p>Sets the maximum number of keys returned in the response. By default the action returns up to 1,000 key names. The response might contain fewer keys but will never contain more. If additional keys satisfy the search criteria, but were not returned because max-keys was exceeded, the response contains <istruncated>   true  </istruncated>. To return the additional keys, see key-marker and version-id-marker.</p>
    ///   - [`prefix(impl Into<String>)`](crate::client::fluent_builders::ListObjectVersions::prefix) / [`set_prefix(Option<String>)`](crate::client::fluent_builders::ListObjectVersions::set_prefix): <p>Use this parameter to select only those keys that begin with the specified prefix. You can use prefixes to separate a bucket into different groupings of keys. (You can think of using prefix to make groups in the same way you'd use a folder in a file system.) You can use prefix with delimiter to roll up numerous objects into a single result under CommonPrefixes. </p>
    ///   - [`version_id_marker(impl Into<String>)`](crate::client::fluent_builders::ListObjectVersions::version_id_marker) / [`set_version_id_marker(Option<String>)`](crate::client::fluent_builders::ListObjectVersions::set_version_id_marker): <p>Specifies the object version you want to start listing from.</p>
    ///   - [`expected_bucket_owner(impl Into<String>)`](crate::client::fluent_builders::ListObjectVersions::expected_bucket_owner) / [`set_expected_bucket_owner(Option<String>)`](crate::client::fluent_builders::ListObjectVersions::set_expected_bucket_owner): <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request fails with the HTTP status code <code>403 Forbidden</code> (access denied).</p>
    /// - On success, responds with [`ListObjectVersionsOutput`](crate::output::ListObjectVersionsOutput) with field(s):
    ///   - [`is_truncated(bool)`](crate::output::ListObjectVersionsOutput::is_truncated): <p>A flag that indicates whether Amazon S3 returned all of the results that satisfied the search criteria. If your results were truncated, you can make a follow-up paginated request using the NextKeyMarker and NextVersionIdMarker response parameters as a starting place in another request to return the rest of the results.</p>
    ///   - [`key_marker(Option<String>)`](crate::output::ListObjectVersionsOutput::key_marker): <p>Marks the last key returned in a truncated response.</p>
    ///   - [`version_id_marker(Option<String>)`](crate::output::ListObjectVersionsOutput::version_id_marker): <p>Marks the last version of the key returned in a truncated response.</p>
    ///   - [`next_key_marker(Option<String>)`](crate::output::ListObjectVersionsOutput::next_key_marker): <p>When the number of responses exceeds the value of <code>MaxKeys</code>, <code>NextKeyMarker</code> specifies the first key not returned that satisfies the search criteria. Use this value for the key-marker request parameter in a subsequent request.</p>
    ///   - [`next_version_id_marker(Option<String>)`](crate::output::ListObjectVersionsOutput::next_version_id_marker): <p>When the number of responses exceeds the value of <code>MaxKeys</code>, <code>NextVersionIdMarker</code> specifies the first object version not returned that satisfies the search criteria. Use this value for the version-id-marker request parameter in a subsequent request.</p>
    ///   - [`versions(Option<Vec<ObjectVersion>>)`](crate::output::ListObjectVersionsOutput::versions): <p>Container for version information.</p>
    ///   - [`delete_markers(Option<Vec<DeleteMarkerEntry>>)`](crate::output::ListObjectVersionsOutput::delete_markers): <p>Container for an object that is a delete marker.</p>
    ///   - [`name(Option<String>)`](crate::output::ListObjectVersionsOutput::name): <p>The bucket name.</p>
    ///   - [`prefix(Option<String>)`](crate::output::ListObjectVersionsOutput::prefix): <p>Selects objects that start with the value supplied by this parameter.</p>
    ///   - [`delimiter(Option<String>)`](crate::output::ListObjectVersionsOutput::delimiter): <p>The delimiter grouping the included keys. A delimiter is a character that you specify to group keys. All keys that contain the same string between the prefix and the first occurrence of the delimiter are grouped under a single result element in <code>CommonPrefixes</code>. These groups are counted as one result against the max-keys limitation. These keys are not returned elsewhere in the response.</p>
    ///   - [`max_keys(i32)`](crate::output::ListObjectVersionsOutput::max_keys): <p>Specifies the maximum number of objects to return.</p>
    ///   - [`common_prefixes(Option<Vec<CommonPrefix>>)`](crate::output::ListObjectVersionsOutput::common_prefixes): <p>All of the keys rolled up into a common prefix count as a single return when calculating the number of returns.</p>
    ///   - [`encoding_type(Option<EncodingType>)`](crate::output::ListObjectVersionsOutput::encoding_type): <p> Encoding type used by Amazon S3 to encode object key names in the XML response.</p>  <p>If you specify encoding-type request parameter, Amazon S3 includes this element in the response, and returns encoded key name values in the following response elements:</p>  <p> <code>KeyMarker, NextKeyMarker, Prefix, Key</code>, and <code>Delimiter</code>.</p>
    /// - On failure, responds with [`SdkError<ListObjectVersionsError>`](crate::error::ListObjectVersionsError)
    pub fn list_object_versions(&self) -> crate::client::fluent_builders::ListObjectVersions {
        crate::client::fluent_builders::ListObjectVersions::new(self.handle.clone())
    }
}
