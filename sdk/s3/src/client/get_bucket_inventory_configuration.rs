// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetBucketInventoryConfiguration`](crate::client::fluent_builders::GetBucketInventoryConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`bucket(impl Into<String>)`](crate::client::fluent_builders::GetBucketInventoryConfiguration::bucket) / [`set_bucket(Option<String>)`](crate::client::fluent_builders::GetBucketInventoryConfiguration::set_bucket): <p>The name of the bucket containing the inventory configuration to retrieve.</p>
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::GetBucketInventoryConfiguration::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::GetBucketInventoryConfiguration::set_id): <p>The ID used to identify the inventory configuration.</p>
    ///   - [`expected_bucket_owner(impl Into<String>)`](crate::client::fluent_builders::GetBucketInventoryConfiguration::expected_bucket_owner) / [`set_expected_bucket_owner(Option<String>)`](crate::client::fluent_builders::GetBucketInventoryConfiguration::set_expected_bucket_owner): <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request fails with the HTTP status code <code>403 Forbidden</code> (access denied).</p>
    /// - On success, responds with [`GetBucketInventoryConfigurationOutput`](crate::output::GetBucketInventoryConfigurationOutput) with field(s):
    ///   - [`inventory_configuration(Option<InventoryConfiguration>)`](crate::output::GetBucketInventoryConfigurationOutput::inventory_configuration): <p>Specifies the inventory configuration.</p>
    /// - On failure, responds with [`SdkError<GetBucketInventoryConfigurationError>`](crate::error::GetBucketInventoryConfigurationError)
    pub fn get_bucket_inventory_configuration(
        &self,
    ) -> crate::client::fluent_builders::GetBucketInventoryConfiguration {
        crate::client::fluent_builders::GetBucketInventoryConfiguration::new(self.handle.clone())
    }
}
