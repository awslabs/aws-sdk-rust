// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn deser_header_abort_multipart_upload_request_charged(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestCharged>,
    smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-charged").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_complete_multipart_upload_bucket_key_enabled(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<bool>, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-bucket-key-enabled")
        .iter();
    let var_1: Vec<bool> = smithy_http::header::read_many(headers)?;
    if var_1.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_1 = var_1;
        Ok(var_1.pop())
    }
}

pub fn deser_header_complete_multipart_upload_expiration(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("x-amz-expiration").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_complete_multipart_upload_request_charged(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestCharged>,
    smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-charged").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_complete_multipart_upload_ssekms_key_id(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map
        .get_all("x-amz-server-side-encryption-aws-kms-key-id")
        .iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_complete_multipart_upload_server_side_encryption(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::ServerSideEncryption>,
    smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-server-side-encryption").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_complete_multipart_upload_version_id(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("x-amz-version-id").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_copy_object_bucket_key_enabled(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<bool>, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-bucket-key-enabled")
        .iter();
    let var_2: Vec<bool> = smithy_http::header::read_many(headers)?;
    if var_2.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_2 = var_2;
        Ok(var_2.pop())
    }
}

pub fn deser_payload_copy_object_copy_object_result(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::CopyObjectResult>,
    crate::error::CopyObjectError,
> {
    (!body.is_empty())
        .then(|| {
            crate::xml_deser::deser_member_copy_object_output_copy_object_result(body)
                .map_err(crate::error::CopyObjectError::unhandled)
        })
        .transpose()
}

pub fn deser_header_copy_object_copy_source_version_id(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("x-amz-copy-source-version-id").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_copy_object_expiration(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("x-amz-expiration").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_copy_object_request_charged(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestCharged>,
    smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-charged").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_copy_object_sse_customer_algorithm(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-algorithm")
        .iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_copy_object_sse_customer_key_md5(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-key-MD5")
        .iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_copy_object_ssekms_encryption_context(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map
        .get_all("x-amz-server-side-encryption-context")
        .iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_copy_object_ssekms_key_id(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map
        .get_all("x-amz-server-side-encryption-aws-kms-key-id")
        .iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_copy_object_server_side_encryption(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::ServerSideEncryption>,
    smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-server-side-encryption").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_copy_object_version_id(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("x-amz-version-id").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_bucket_location(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Location").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_multipart_upload_abort_date(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<smithy_types::Instant>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("x-amz-abort-date").iter();
    let var_3: Vec<smithy_types::Instant> =
        smithy_http::header::many_dates(headers, smithy_types::instant::Format::HttpDate)?;
    if var_3.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_3 = var_3;
        Ok(var_3.pop())
    }
}

pub fn deser_header_create_multipart_upload_abort_rule_id(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("x-amz-abort-rule-id").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_multipart_upload_bucket_key_enabled(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<bool>, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-bucket-key-enabled")
        .iter();
    let var_4: Vec<bool> = smithy_http::header::read_many(headers)?;
    if var_4.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_4 = var_4;
        Ok(var_4.pop())
    }
}

pub fn deser_header_create_multipart_upload_request_charged(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestCharged>,
    smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-charged").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_multipart_upload_sse_customer_algorithm(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-algorithm")
        .iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_multipart_upload_sse_customer_key_md5(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-key-MD5")
        .iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_multipart_upload_ssekms_encryption_context(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map
        .get_all("x-amz-server-side-encryption-context")
        .iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_multipart_upload_ssekms_key_id(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map
        .get_all("x-amz-server-side-encryption-aws-kms-key-id")
        .iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_multipart_upload_server_side_encryption(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::ServerSideEncryption>,
    smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-server-side-encryption").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_object_delete_marker(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<bool>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-delete-marker").iter();
    let var_5: Vec<bool> = smithy_http::header::read_many(headers)?;
    if var_5.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_5 = var_5;
        Ok(var_5.pop())
    }
}

pub fn deser_header_delete_object_request_charged(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestCharged>,
    smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-charged").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_object_version_id(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("x-amz-version-id").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_objects_request_charged(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestCharged>,
    smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-charged").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_object_tagging_version_id(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("x-amz-version-id").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_get_bucket_analytics_configuration_analytics_configuration(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::AnalyticsConfiguration>,
    crate::error::GetBucketAnalyticsConfigurationError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_get_bucket_analytics_configuration_output_analytics_configuration(body).map_err(crate::error::GetBucketAnalyticsConfigurationError::unhandled)
    }).transpose()
}

pub fn deser_payload_get_bucket_encryption_server_side_encryption_configuration(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::ServerSideEncryptionConfiguration>,
    crate::error::GetBucketEncryptionError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_get_bucket_encryption_output_server_side_encryption_configuration(body).map_err(crate::error::GetBucketEncryptionError::unhandled)
    }).transpose()
}

pub fn deser_payload_get_bucket_intelligent_tiering_configuration_intelligent_tiering_configuration(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::IntelligentTieringConfiguration>,
    crate::error::GetBucketIntelligentTieringConfigurationError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_get_bucket_intelligent_tiering_configuration_output_intelligent_tiering_configuration(body).map_err(crate::error::GetBucketIntelligentTieringConfigurationError::unhandled)
    }).transpose()
}

pub fn deser_payload_get_bucket_inventory_configuration_inventory_configuration(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::InventoryConfiguration>,
    crate::error::GetBucketInventoryConfigurationError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_get_bucket_inventory_configuration_output_inventory_configuration(body).map_err(crate::error::GetBucketInventoryConfigurationError::unhandled)
    }).transpose()
}

pub fn deser_payload_get_bucket_metrics_configuration_metrics_configuration(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::MetricsConfiguration>,
    crate::error::GetBucketMetricsConfigurationError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_get_bucket_metrics_configuration_output_metrics_configuration(body).map_err(crate::error::GetBucketMetricsConfigurationError::unhandled)
    }).transpose()
}

pub fn deser_payload_get_bucket_ownership_controls_ownership_controls(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::OwnershipControls>,
    crate::error::GetBucketOwnershipControlsError,
> {
    (!body.is_empty())
        .then(|| {
            crate::xml_deser::deser_member_get_bucket_ownership_controls_output_ownership_controls(
                body,
            )
            .map_err(crate::error::GetBucketOwnershipControlsError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_bucket_policy_policy(
    body: &[u8],
) -> std::result::Result<std::option::Option<std::string::String>, crate::error::GetBucketPolicyError>
{
    (!body.is_empty())
        .then(|| {
            let body_str = std::str::from_utf8(&body)
                .map_err(crate::error::GetBucketPolicyError::unhandled)?;
            Ok(body_str.to_string())
        })
        .transpose()
}

pub fn deser_payload_get_bucket_policy_status_policy_status(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::PolicyStatus>,
    crate::error::GetBucketPolicyStatusError,
> {
    (!body.is_empty())
        .then(|| {
            crate::xml_deser::deser_member_get_bucket_policy_status_output_policy_status(body)
                .map_err(crate::error::GetBucketPolicyStatusError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_bucket_replication_replication_configuration(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::ReplicationConfiguration>,
    crate::error::GetBucketReplicationError,
> {
    (!body.is_empty())
        .then(|| {
            crate::xml_deser::deser_member_get_bucket_replication_output_replication_configuration(
                body,
            )
            .map_err(crate::error::GetBucketReplicationError::unhandled)
        })
        .transpose()
}

pub fn deser_header_get_object_accept_ranges(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("accept-ranges").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_get_object_body(
    body: &mut smithy_http::body::SdkBody,
) -> std::result::Result<smithy_http::byte_stream::ByteStream, crate::error::GetObjectError> {
    // replace the body with an empty body
    let body = std::mem::replace(body, smithy_http::body::SdkBody::taken());
    Ok(smithy_http::byte_stream::ByteStream::new(body))
}

pub fn deser_header_get_object_bucket_key_enabled(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<bool>, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-bucket-key-enabled")
        .iter();
    let var_6: Vec<bool> = smithy_http::header::read_many(headers)?;
    if var_6.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_6 = var_6;
        Ok(var_6.pop())
    }
}

pub fn deser_header_get_object_cache_control(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Cache-Control").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_object_content_disposition(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Content-Disposition").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_object_content_encoding(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Content-Encoding").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_object_content_language(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Content-Language").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_object_content_length(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i64>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Content-Length").iter();
    let var_7: Vec<i64> = smithy_http::header::read_many(headers)?;
    if var_7.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_7 = var_7;
        Ok(var_7.pop())
    }
}

pub fn deser_header_get_object_content_range(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Content-Range").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_object_content_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Content-Type").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_object_delete_marker(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<bool>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-delete-marker").iter();
    let var_8: Vec<bool> = smithy_http::header::read_many(headers)?;
    if var_8.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_8 = var_8;
        Ok(var_8.pop())
    }
}

pub fn deser_header_get_object_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_object_expiration(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("x-amz-expiration").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_object_expires(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<smithy_types::Instant>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Expires").iter();
    let var_9: Vec<smithy_types::Instant> =
        smithy_http::header::many_dates(headers, smithy_types::instant::Format::HttpDate)?;
    if var_9.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_9 = var_9;
        Ok(var_9.pop())
    }
}

pub fn deser_header_get_object_last_modified(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<smithy_types::Instant>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Last-Modified").iter();
    let var_10: Vec<smithy_types::Instant> =
        smithy_http::header::many_dates(headers, smithy_types::instant::Format::HttpDate)?;
    if var_10.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_10 = var_10;
        Ok(var_10.pop())
    }
}

pub fn deser_prefix_header_get_object_metadata(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    smithy_http::header::ParseError,
> {
    let headers = smithy_http::header::headers_for_prefix(&header_map, "x-amz-meta-");
    let out: std::result::Result<_, _> = headers
        .map(|(key, header_name)| {
            let values = header_map.get_all(header_name);
            crate::http_serde::deser_prefix_header_get_object_metadata_inner(values.iter())
                .map(|v| (key.to_string(), v.unwrap()))
        })
        .collect();
    out.map(Some)
}

pub fn deser_header_get_object_missing_meta(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-missing-meta").iter();
    let var_11: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_11.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_11 = var_11;
        Ok(var_11.pop())
    }
}

pub fn deser_header_get_object_object_lock_legal_hold_status(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::ObjectLockLegalHoldStatus>,
    smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-object-lock-legal-hold").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_object_object_lock_mode(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::ObjectLockMode>,
    smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-object-lock-mode").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_object_object_lock_retain_until_date(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<smithy_types::Instant>, smithy_http::header::ParseError>
{
    let headers = header_map
        .get_all("x-amz-object-lock-retain-until-date")
        .iter();
    let var_12: Vec<smithy_types::Instant> =
        smithy_http::header::many_dates(headers, smithy_types::instant::Format::DateTime)?;
    if var_12.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_12 = var_12;
        Ok(var_12.pop())
    }
}

pub fn deser_header_get_object_parts_count(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-mp-parts-count").iter();
    let var_13: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_13.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_13 = var_13;
        Ok(var_13.pop())
    }
}

pub fn deser_header_get_object_replication_status(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::ReplicationStatus>,
    smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-replication-status").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_object_request_charged(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestCharged>,
    smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-charged").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_object_restore(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("x-amz-restore").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_object_sse_customer_algorithm(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-algorithm")
        .iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_object_sse_customer_key_md5(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-key-MD5")
        .iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_object_ssekms_key_id(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map
        .get_all("x-amz-server-side-encryption-aws-kms-key-id")
        .iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_object_server_side_encryption(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::ServerSideEncryption>,
    smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-server-side-encryption").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_object_storage_class(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::StorageClass>,
    smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-storage-class").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_object_tag_count(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-tagging-count").iter();
    let var_14: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_14.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_14 = var_14;
        Ok(var_14.pop())
    }
}

pub fn deser_header_get_object_version_id(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("x-amz-version-id").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_object_website_redirect_location(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("x-amz-website-redirect-location").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_object_acl_request_charged(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestCharged>,
    smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-charged").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_get_object_legal_hold_legal_hold(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::ObjectLockLegalHold>,
    crate::error::GetObjectLegalHoldError,
> {
    (!body.is_empty())
        .then(|| {
            crate::xml_deser::deser_member_get_object_legal_hold_output_legal_hold(body)
                .map_err(crate::error::GetObjectLegalHoldError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_object_lock_configuration_object_lock_configuration(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::ObjectLockConfiguration>,
    crate::error::GetObjectLockConfigurationError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_get_object_lock_configuration_output_object_lock_configuration(body).map_err(crate::error::GetObjectLockConfigurationError::unhandled)
    }).transpose()
}

pub fn deser_payload_get_object_retention_retention(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::ObjectLockRetention>,
    crate::error::GetObjectRetentionError,
> {
    (!body.is_empty())
        .then(|| {
            crate::xml_deser::deser_member_get_object_retention_output_retention(body)
                .map_err(crate::error::GetObjectRetentionError::unhandled)
        })
        .transpose()
}

pub fn deser_header_get_object_tagging_version_id(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("x-amz-version-id").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_get_object_torrent_body(
    body: &mut smithy_http::body::SdkBody,
) -> std::result::Result<smithy_http::byte_stream::ByteStream, crate::error::GetObjectTorrentError>
{
    // replace the body with an empty body
    let body = std::mem::replace(body, smithy_http::body::SdkBody::taken());
    Ok(smithy_http::byte_stream::ByteStream::new(body))
}

pub fn deser_header_get_object_torrent_request_charged(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestCharged>,
    smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-charged").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_get_public_access_block_public_access_block_configuration(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::PublicAccessBlockConfiguration>,
    crate::error::GetPublicAccessBlockError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_get_public_access_block_output_public_access_block_configuration(body).map_err(crate::error::GetPublicAccessBlockError::unhandled)
    }).transpose()
}

pub fn deser_header_head_object_accept_ranges(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("accept-ranges").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_head_object_archive_status(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::ArchiveStatus>,
    smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-archive-status").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_head_object_bucket_key_enabled(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<bool>, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-bucket-key-enabled")
        .iter();
    let var_15: Vec<bool> = smithy_http::header::read_many(headers)?;
    if var_15.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_15 = var_15;
        Ok(var_15.pop())
    }
}

pub fn deser_header_head_object_cache_control(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Cache-Control").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_head_object_content_disposition(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Content-Disposition").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_head_object_content_encoding(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Content-Encoding").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_head_object_content_language(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Content-Language").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_head_object_content_length(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i64>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Content-Length").iter();
    let var_16: Vec<i64> = smithy_http::header::read_many(headers)?;
    if var_16.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_16 = var_16;
        Ok(var_16.pop())
    }
}

pub fn deser_header_head_object_content_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Content-Type").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_head_object_delete_marker(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<bool>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-delete-marker").iter();
    let var_17: Vec<bool> = smithy_http::header::read_many(headers)?;
    if var_17.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_17 = var_17;
        Ok(var_17.pop())
    }
}

pub fn deser_header_head_object_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_head_object_expiration(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("x-amz-expiration").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_head_object_expires(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<smithy_types::Instant>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Expires").iter();
    let var_18: Vec<smithy_types::Instant> =
        smithy_http::header::many_dates(headers, smithy_types::instant::Format::HttpDate)?;
    if var_18.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_18 = var_18;
        Ok(var_18.pop())
    }
}

pub fn deser_header_head_object_last_modified(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<smithy_types::Instant>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Last-Modified").iter();
    let var_19: Vec<smithy_types::Instant> =
        smithy_http::header::many_dates(headers, smithy_types::instant::Format::HttpDate)?;
    if var_19.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_19 = var_19;
        Ok(var_19.pop())
    }
}

pub fn deser_prefix_header_head_object_metadata(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    smithy_http::header::ParseError,
> {
    let headers = smithy_http::header::headers_for_prefix(&header_map, "x-amz-meta-");
    let out: std::result::Result<_, _> = headers
        .map(|(key, header_name)| {
            let values = header_map.get_all(header_name);
            crate::http_serde::deser_prefix_header_head_object_metadata_inner(values.iter())
                .map(|v| (key.to_string(), v.unwrap()))
        })
        .collect();
    out.map(Some)
}

pub fn deser_header_head_object_missing_meta(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-missing-meta").iter();
    let var_20: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_20.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_20 = var_20;
        Ok(var_20.pop())
    }
}

pub fn deser_header_head_object_object_lock_legal_hold_status(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::ObjectLockLegalHoldStatus>,
    smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-object-lock-legal-hold").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_head_object_object_lock_mode(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::ObjectLockMode>,
    smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-object-lock-mode").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_head_object_object_lock_retain_until_date(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<smithy_types::Instant>, smithy_http::header::ParseError>
{
    let headers = header_map
        .get_all("x-amz-object-lock-retain-until-date")
        .iter();
    let var_21: Vec<smithy_types::Instant> =
        smithy_http::header::many_dates(headers, smithy_types::instant::Format::DateTime)?;
    if var_21.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_21 = var_21;
        Ok(var_21.pop())
    }
}

pub fn deser_header_head_object_parts_count(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-mp-parts-count").iter();
    let var_22: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_22.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_22 = var_22;
        Ok(var_22.pop())
    }
}

pub fn deser_header_head_object_replication_status(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::ReplicationStatus>,
    smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-replication-status").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_head_object_request_charged(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestCharged>,
    smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-charged").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_head_object_restore(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("x-amz-restore").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_head_object_sse_customer_algorithm(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-algorithm")
        .iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_head_object_sse_customer_key_md5(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-key-MD5")
        .iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_head_object_ssekms_key_id(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map
        .get_all("x-amz-server-side-encryption-aws-kms-key-id")
        .iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_head_object_server_side_encryption(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::ServerSideEncryption>,
    smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-server-side-encryption").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_head_object_storage_class(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::StorageClass>,
    smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-storage-class").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_head_object_version_id(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("x-amz-version-id").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_head_object_website_redirect_location(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("x-amz-website-redirect-location").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_list_parts_abort_date(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<smithy_types::Instant>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("x-amz-abort-date").iter();
    let var_23: Vec<smithy_types::Instant> =
        smithy_http::header::many_dates(headers, smithy_types::instant::Format::HttpDate)?;
    if var_23.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_23 = var_23;
        Ok(var_23.pop())
    }
}

pub fn deser_header_list_parts_abort_rule_id(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("x-amz-abort-rule-id").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_list_parts_request_charged(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestCharged>,
    smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-charged").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_bucket_key_enabled(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<bool>, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-bucket-key-enabled")
        .iter();
    let var_24: Vec<bool> = smithy_http::header::read_many(headers)?;
    if var_24.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_24 = var_24;
        Ok(var_24.pop())
    }
}

pub fn deser_header_put_object_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_expiration(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("x-amz-expiration").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_request_charged(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestCharged>,
    smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-charged").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_sse_customer_algorithm(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-algorithm")
        .iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_sse_customer_key_md5(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-key-MD5")
        .iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_ssekms_encryption_context(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map
        .get_all("x-amz-server-side-encryption-context")
        .iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_ssekms_key_id(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map
        .get_all("x-amz-server-side-encryption-aws-kms-key-id")
        .iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_server_side_encryption(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::ServerSideEncryption>,
    smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-server-side-encryption").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_version_id(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("x-amz-version-id").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_acl_request_charged(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestCharged>,
    smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-charged").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_legal_hold_request_charged(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestCharged>,
    smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-charged").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_lock_configuration_request_charged(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestCharged>,
    smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-charged").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_retention_request_charged(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestCharged>,
    smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-charged").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_tagging_version_id(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("x-amz-version-id").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_restore_object_request_charged(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestCharged>,
    smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-charged").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_restore_object_restore_output_path(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("x-amz-restore-output-path").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_upload_part_bucket_key_enabled(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<bool>, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-bucket-key-enabled")
        .iter();
    let var_25: Vec<bool> = smithy_http::header::read_many(headers)?;
    if var_25.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_25 = var_25;
        Ok(var_25.pop())
    }
}

pub fn deser_header_upload_part_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_upload_part_request_charged(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestCharged>,
    smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-charged").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_upload_part_sse_customer_algorithm(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-algorithm")
        .iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_upload_part_sse_customer_key_md5(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-key-MD5")
        .iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_upload_part_ssekms_key_id(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map
        .get_all("x-amz-server-side-encryption-aws-kms-key-id")
        .iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_upload_part_server_side_encryption(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::ServerSideEncryption>,
    smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-server-side-encryption").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_upload_part_copy_bucket_key_enabled(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<bool>, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-bucket-key-enabled")
        .iter();
    let var_26: Vec<bool> = smithy_http::header::read_many(headers)?;
    if var_26.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_26 = var_26;
        Ok(var_26.pop())
    }
}

pub fn deser_payload_upload_part_copy_copy_part_result(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::CopyPartResult>,
    crate::error::UploadPartCopyError,
> {
    (!body.is_empty())
        .then(|| {
            crate::xml_deser::deser_member_upload_part_copy_output_copy_part_result(body)
                .map_err(crate::error::UploadPartCopyError::unhandled)
        })
        .transpose()
}

pub fn deser_header_upload_part_copy_copy_source_version_id(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("x-amz-copy-source-version-id").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_upload_part_copy_request_charged(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestCharged>,
    smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-charged").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_upload_part_copy_sse_customer_algorithm(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-algorithm")
        .iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_upload_part_copy_sse_customer_key_md5(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-key-MD5")
        .iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_upload_part_copy_ssekms_key_id(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map
        .get_all("x-amz-server-side-encryption-aws-kms-key-id")
        .iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_upload_part_copy_server_side_encryption(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::ServerSideEncryption>,
    smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-server-side-encryption").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_prefix_header_get_object_metadata_inner(
    headers: http::header::ValueIter<http::HeaderValue>,
) -> std::result::Result<Option<std::string::String>, smithy_http::header::ParseError> {
    smithy_http::header::one_or_none(headers)
}

pub fn deser_prefix_header_head_object_metadata_inner(
    headers: http::header::ValueIter<http::HeaderValue>,
) -> std::result::Result<Option<std::string::String>, smithy_http::header::ParseError> {
    smithy_http::header::one_or_none(headers)
}
