// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn deser_header_abort_multipart_upload_request_charged(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<crate::model::RequestCharged>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-request-charged").iter();
    let var_1: Vec<crate::model::RequestCharged> = smithy_http::header::read_many(headers)?;
    if var_1.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_1 = var_1;
        Ok(var_1.pop())
    }
}

pub fn deser_header_complete_multipart_upload_bucket_key_enabled(
    header_map: &http::HeaderMap,
) -> Result<bool, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-bucket-key-enabled")
        .iter();
    let var_2: Vec<bool> = smithy_http::header::read_many(headers)?;
    if var_2.len() > 1 {
        return Err(smithy_http::header::ParseError);
    }
    let mut var_2 = var_2;
    match var_2.pop() {
        None => Ok(Default::default()),
        Some(item) => Ok(item),
    }
}

pub fn deser_header_complete_multipart_upload_expiration(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-expiration").iter();
    let var_3: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_3.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_3 = var_3;
        Ok(var_3.pop())
    }
}

pub fn deser_header_complete_multipart_upload_request_charged(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<crate::model::RequestCharged>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-request-charged").iter();
    let var_4: Vec<crate::model::RequestCharged> = smithy_http::header::read_many(headers)?;
    if var_4.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_4 = var_4;
        Ok(var_4.pop())
    }
}

pub fn deser_header_complete_multipart_upload_ssekms_key_id(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-aws-kms-key-id")
        .iter();
    let var_5: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_5.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_5 = var_5;
        Ok(var_5.pop())
    }
}

pub fn deser_header_complete_multipart_upload_server_side_encryption(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<crate::model::ServerSideEncryption>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("x-amz-server-side-encryption").iter();
    let var_6: Vec<crate::model::ServerSideEncryption> = smithy_http::header::read_many(headers)?;
    if var_6.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_6 = var_6;
        Ok(var_6.pop())
    }
}

pub fn deser_header_complete_multipart_upload_version_id(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-version-id").iter();
    let var_7: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_7.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_7 = var_7;
        Ok(var_7.pop())
    }
}

pub fn deser_header_copy_object_bucket_key_enabled(
    header_map: &http::HeaderMap,
) -> Result<bool, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-bucket-key-enabled")
        .iter();
    let var_8: Vec<bool> = smithy_http::header::read_many(headers)?;
    if var_8.len() > 1 {
        return Err(smithy_http::header::ParseError);
    }
    let mut var_8 = var_8;
    match var_8.pop() {
        None => Ok(Default::default()),
        Some(item) => Ok(item),
    }
}

pub fn deser_payload_copy_object_copy_object_result(
    body: &[u8],
) -> Result<std::option::Option<crate::model::CopyObjectResult>, crate::error::CopyObjectError> {
    (!body.is_empty())
        .then(|| {
            crate::xml_deser::deser_member_copy_object_output_copy_object_result(body)
                .map_err(crate::error::CopyObjectError::unhandled)
        })
        .transpose()
}

pub fn deser_header_copy_object_copy_source_version_id(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-copy-source-version-id").iter();
    let var_9: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_9.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_9 = var_9;
        Ok(var_9.pop())
    }
}

pub fn deser_header_copy_object_expiration(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-expiration").iter();
    let var_10: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_10.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_10 = var_10;
        Ok(var_10.pop())
    }
}

pub fn deser_header_copy_object_request_charged(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<crate::model::RequestCharged>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-request-charged").iter();
    let var_11: Vec<crate::model::RequestCharged> = smithy_http::header::read_many(headers)?;
    if var_11.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_11 = var_11;
        Ok(var_11.pop())
    }
}

pub fn deser_header_copy_object_sse_customer_algorithm(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-algorithm")
        .iter();
    let var_12: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_12.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_12 = var_12;
        Ok(var_12.pop())
    }
}

pub fn deser_header_copy_object_sse_customer_key_md5(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-key-MD5")
        .iter();
    let var_13: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_13.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_13 = var_13;
        Ok(var_13.pop())
    }
}

pub fn deser_header_copy_object_ssekms_encryption_context(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-context")
        .iter();
    let var_14: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_14.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_14 = var_14;
        Ok(var_14.pop())
    }
}

pub fn deser_header_copy_object_ssekms_key_id(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-aws-kms-key-id")
        .iter();
    let var_15: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_15.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_15 = var_15;
        Ok(var_15.pop())
    }
}

pub fn deser_header_copy_object_server_side_encryption(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<crate::model::ServerSideEncryption>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("x-amz-server-side-encryption").iter();
    let var_16: Vec<crate::model::ServerSideEncryption> = smithy_http::header::read_many(headers)?;
    if var_16.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_16 = var_16;
        Ok(var_16.pop())
    }
}

pub fn deser_header_copy_object_version_id(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-version-id").iter();
    let var_17: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_17.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_17 = var_17;
        Ok(var_17.pop())
    }
}

pub fn deser_header_create_bucket_location(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Location").iter();
    let var_18: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_18.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_18 = var_18;
        Ok(var_18.pop())
    }
}

pub fn deser_header_create_multipart_upload_abort_date(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<smithy_types::Instant>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-abort-date").iter();
    let var_19: Vec<smithy_types::Instant> =
        smithy_http::header::many_dates(headers, smithy_types::instant::Format::HttpDate)?;
    if var_19.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_19 = var_19;
        Ok(var_19.pop())
    }
}

pub fn deser_header_create_multipart_upload_abort_rule_id(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-abort-rule-id").iter();
    let var_20: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_20.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_20 = var_20;
        Ok(var_20.pop())
    }
}

pub fn deser_header_create_multipart_upload_bucket_key_enabled(
    header_map: &http::HeaderMap,
) -> Result<bool, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-bucket-key-enabled")
        .iter();
    let var_21: Vec<bool> = smithy_http::header::read_many(headers)?;
    if var_21.len() > 1 {
        return Err(smithy_http::header::ParseError);
    }
    let mut var_21 = var_21;
    match var_21.pop() {
        None => Ok(Default::default()),
        Some(item) => Ok(item),
    }
}

pub fn deser_header_create_multipart_upload_request_charged(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<crate::model::RequestCharged>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-request-charged").iter();
    let var_22: Vec<crate::model::RequestCharged> = smithy_http::header::read_many(headers)?;
    if var_22.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_22 = var_22;
        Ok(var_22.pop())
    }
}

pub fn deser_header_create_multipart_upload_sse_customer_algorithm(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-algorithm")
        .iter();
    let var_23: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_23.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_23 = var_23;
        Ok(var_23.pop())
    }
}

pub fn deser_header_create_multipart_upload_sse_customer_key_md5(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-key-MD5")
        .iter();
    let var_24: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_24.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_24 = var_24;
        Ok(var_24.pop())
    }
}

pub fn deser_header_create_multipart_upload_ssekms_encryption_context(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-context")
        .iter();
    let var_25: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_25.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_25 = var_25;
        Ok(var_25.pop())
    }
}

pub fn deser_header_create_multipart_upload_ssekms_key_id(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-aws-kms-key-id")
        .iter();
    let var_26: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_26.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_26 = var_26;
        Ok(var_26.pop())
    }
}

pub fn deser_header_create_multipart_upload_server_side_encryption(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<crate::model::ServerSideEncryption>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("x-amz-server-side-encryption").iter();
    let var_27: Vec<crate::model::ServerSideEncryption> = smithy_http::header::read_many(headers)?;
    if var_27.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_27 = var_27;
        Ok(var_27.pop())
    }
}

pub fn deser_header_delete_object_delete_marker(
    header_map: &http::HeaderMap,
) -> Result<bool, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-delete-marker").iter();
    let var_28: Vec<bool> = smithy_http::header::read_many(headers)?;
    if var_28.len() > 1 {
        return Err(smithy_http::header::ParseError);
    }
    let mut var_28 = var_28;
    match var_28.pop() {
        None => Ok(Default::default()),
        Some(item) => Ok(item),
    }
}

pub fn deser_header_delete_object_request_charged(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<crate::model::RequestCharged>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-request-charged").iter();
    let var_29: Vec<crate::model::RequestCharged> = smithy_http::header::read_many(headers)?;
    if var_29.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_29 = var_29;
        Ok(var_29.pop())
    }
}

pub fn deser_header_delete_object_version_id(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-version-id").iter();
    let var_30: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_30.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_30 = var_30;
        Ok(var_30.pop())
    }
}

pub fn deser_header_delete_objects_request_charged(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<crate::model::RequestCharged>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-request-charged").iter();
    let var_31: Vec<crate::model::RequestCharged> = smithy_http::header::read_many(headers)?;
    if var_31.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_31 = var_31;
        Ok(var_31.pop())
    }
}

pub fn deser_header_delete_object_tagging_version_id(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-version-id").iter();
    let var_32: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_32.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_32 = var_32;
        Ok(var_32.pop())
    }
}

pub fn deser_payload_get_bucket_analytics_configuration_analytics_configuration(
    body: &[u8],
) -> Result<
    std::option::Option<crate::model::AnalyticsConfiguration>,
    crate::error::GetBucketAnalyticsConfigurationError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_get_bucket_analytics_configuration_output_analytics_configuration(body).map_err(crate::error::GetBucketAnalyticsConfigurationError::unhandled)
    }).transpose()
}

pub fn deser_payload_get_bucket_encryption_server_side_encryption_configuration(
    body: &[u8],
) -> Result<
    std::option::Option<crate::model::ServerSideEncryptionConfiguration>,
    crate::error::GetBucketEncryptionError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_get_bucket_encryption_output_server_side_encryption_configuration(body).map_err(crate::error::GetBucketEncryptionError::unhandled)
    }).transpose()
}

pub fn deser_payload_get_bucket_intelligent_tiering_configuration_intelligent_tiering_configuration(
    body: &[u8],
) -> Result<
    std::option::Option<crate::model::IntelligentTieringConfiguration>,
    crate::error::GetBucketIntelligentTieringConfigurationError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_get_bucket_intelligent_tiering_configuration_output_intelligent_tiering_configuration(body).map_err(crate::error::GetBucketIntelligentTieringConfigurationError::unhandled)
    }).transpose()
}

pub fn deser_payload_get_bucket_inventory_configuration_inventory_configuration(
    body: &[u8],
) -> Result<
    std::option::Option<crate::model::InventoryConfiguration>,
    crate::error::GetBucketInventoryConfigurationError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_get_bucket_inventory_configuration_output_inventory_configuration(body).map_err(crate::error::GetBucketInventoryConfigurationError::unhandled)
    }).transpose()
}

pub fn deser_payload_get_bucket_metrics_configuration_metrics_configuration(
    body: &[u8],
) -> Result<
    std::option::Option<crate::model::MetricsConfiguration>,
    crate::error::GetBucketMetricsConfigurationError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_get_bucket_metrics_configuration_output_metrics_configuration(body).map_err(crate::error::GetBucketMetricsConfigurationError::unhandled)
    }).transpose()
}

pub fn deser_payload_get_bucket_ownership_controls_ownership_controls(
    body: &[u8],
) -> Result<
    std::option::Option<crate::model::OwnershipControls>,
    crate::error::GetBucketOwnershipControlsError,
> {
    (!body.is_empty())
        .then(|| {
            crate::xml_deser::deser_member_get_bucket_ownership_controls_output_ownership_controls(
                body,
            )
            .map_err(crate::error::GetBucketOwnershipControlsError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_bucket_policy_policy(
    body: &[u8],
) -> Result<std::option::Option<std::string::String>, crate::error::GetBucketPolicyError> {
    (!body.is_empty())
        .then(|| {
            let body_str = std::str::from_utf8(&body)
                .map_err(crate::error::GetBucketPolicyError::unhandled)?;
            Ok(body_str.to_string())
        })
        .transpose()
}

pub fn deser_payload_get_bucket_policy_status_policy_status(
    body: &[u8],
) -> Result<std::option::Option<crate::model::PolicyStatus>, crate::error::GetBucketPolicyStatusError>
{
    (!body.is_empty())
        .then(|| {
            crate::xml_deser::deser_member_get_bucket_policy_status_output_policy_status(body)
                .map_err(crate::error::GetBucketPolicyStatusError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_bucket_replication_replication_configuration(
    body: &[u8],
) -> Result<
    std::option::Option<crate::model::ReplicationConfiguration>,
    crate::error::GetBucketReplicationError,
> {
    (!body.is_empty())
        .then(|| {
            crate::xml_deser::deser_member_get_bucket_replication_output_replication_configuration(
                body,
            )
            .map_err(crate::error::GetBucketReplicationError::unhandled)
        })
        .transpose()
}

pub fn deser_header_get_object_accept_ranges(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("accept-ranges").iter();
    let var_33: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_33.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_33 = var_33;
        Ok(var_33.pop())
    }
}

pub fn deser_payload_get_object_body(
    body: &mut smithy_http::body::SdkBody,
) -> Result<smithy_http::byte_stream::ByteStream, crate::error::GetObjectError> {
    // replace the body with an empty body
    let body = std::mem::replace(body, smithy_http::body::SdkBody::taken());
    Ok(smithy_http::byte_stream::ByteStream::new(body))
}

pub fn deser_header_get_object_bucket_key_enabled(
    header_map: &http::HeaderMap,
) -> Result<bool, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-bucket-key-enabled")
        .iter();
    let var_34: Vec<bool> = smithy_http::header::read_many(headers)?;
    if var_34.len() > 1 {
        return Err(smithy_http::header::ParseError);
    }
    let mut var_34 = var_34;
    match var_34.pop() {
        None => Ok(Default::default()),
        Some(item) => Ok(item),
    }
}

pub fn deser_header_get_object_cache_control(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Cache-Control").iter();
    let var_35: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_35.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_35 = var_35;
        Ok(var_35.pop())
    }
}

pub fn deser_header_get_object_content_disposition(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Content-Disposition").iter();
    let var_36: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_36.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_36 = var_36;
        Ok(var_36.pop())
    }
}

pub fn deser_header_get_object_content_encoding(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Content-Encoding").iter();
    let var_37: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_37.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_37 = var_37;
        Ok(var_37.pop())
    }
}

pub fn deser_header_get_object_content_language(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Content-Language").iter();
    let var_38: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_38.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_38 = var_38;
        Ok(var_38.pop())
    }
}

pub fn deser_header_get_object_content_length(
    header_map: &http::HeaderMap,
) -> Result<i64, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Content-Length").iter();
    let var_39: Vec<i64> = smithy_http::header::read_many(headers)?;
    if var_39.len() > 1 {
        return Err(smithy_http::header::ParseError);
    }
    let mut var_39 = var_39;
    match var_39.pop() {
        None => Ok(Default::default()),
        Some(item) => Ok(item),
    }
}

pub fn deser_header_get_object_content_range(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Content-Range").iter();
    let var_40: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_40.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_40 = var_40;
        Ok(var_40.pop())
    }
}

pub fn deser_header_get_object_content_type(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Content-Type").iter();
    let var_41: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_41.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_41 = var_41;
        Ok(var_41.pop())
    }
}

pub fn deser_header_get_object_delete_marker(
    header_map: &http::HeaderMap,
) -> Result<bool, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-delete-marker").iter();
    let var_42: Vec<bool> = smithy_http::header::read_many(headers)?;
    if var_42.len() > 1 {
        return Err(smithy_http::header::ParseError);
    }
    let mut var_42 = var_42;
    match var_42.pop() {
        None => Ok(Default::default()),
        Some(item) => Ok(item),
    }
}

pub fn deser_header_get_object_e_tag(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("ETag").iter();
    let var_43: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_43.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_43 = var_43;
        Ok(var_43.pop())
    }
}

pub fn deser_header_get_object_expiration(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-expiration").iter();
    let var_44: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_44.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_44 = var_44;
        Ok(var_44.pop())
    }
}

pub fn deser_header_get_object_expires(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<smithy_types::Instant>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Expires").iter();
    let var_45: Vec<smithy_types::Instant> =
        smithy_http::header::many_dates(headers, smithy_types::instant::Format::HttpDate)?;
    if var_45.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_45 = var_45;
        Ok(var_45.pop())
    }
}

pub fn deser_header_get_object_last_modified(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<smithy_types::Instant>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Last-Modified").iter();
    let var_46: Vec<smithy_types::Instant> =
        smithy_http::header::many_dates(headers, smithy_types::instant::Format::HttpDate)?;
    if var_46.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_46 = var_46;
        Ok(var_46.pop())
    }
}

pub fn deser_prefix_header_get_object_metadata(
    header_map: &http::HeaderMap,
) -> Result<
    std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    smithy_http::header::ParseError,
> {
    let headers = smithy_http::header::headers_for_prefix(&header_map, "x-amz-meta-");
    let out: Result<_, _> = headers
        .map(|(key, header_name)| {
            let values = header_map.get_all(header_name);
            crate::http_serde::deser_prefix_header_get_object_metadata_inner(values.iter())
                .map(|v| (key.to_string(), v.unwrap()))
        })
        .collect();
    out.map(Some)
}

pub fn deser_header_get_object_missing_meta(
    header_map: &http::HeaderMap,
) -> Result<i32, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-missing-meta").iter();
    let var_47: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_47.len() > 1 {
        return Err(smithy_http::header::ParseError);
    }
    let mut var_47 = var_47;
    match var_47.pop() {
        None => Ok(Default::default()),
        Some(item) => Ok(item),
    }
}

pub fn deser_header_get_object_object_lock_legal_hold_status(
    header_map: &http::HeaderMap,
) -> Result<
    std::option::Option<crate::model::ObjectLockLegalHoldStatus>,
    smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-object-lock-legal-hold").iter();
    let var_48: Vec<crate::model::ObjectLockLegalHoldStatus> =
        smithy_http::header::read_many(headers)?;
    if var_48.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_48 = var_48;
        Ok(var_48.pop())
    }
}

pub fn deser_header_get_object_object_lock_mode(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<crate::model::ObjectLockMode>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-object-lock-mode").iter();
    let var_49: Vec<crate::model::ObjectLockMode> = smithy_http::header::read_many(headers)?;
    if var_49.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_49 = var_49;
        Ok(var_49.pop())
    }
}

pub fn deser_header_get_object_object_lock_retain_until_date(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<smithy_types::Instant>, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-object-lock-retain-until-date")
        .iter();
    let var_50: Vec<smithy_types::Instant> =
        smithy_http::header::many_dates(headers, smithy_types::instant::Format::DateTime)?;
    if var_50.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_50 = var_50;
        Ok(var_50.pop())
    }
}

pub fn deser_header_get_object_parts_count(
    header_map: &http::HeaderMap,
) -> Result<i32, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-mp-parts-count").iter();
    let var_51: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_51.len() > 1 {
        return Err(smithy_http::header::ParseError);
    }
    let mut var_51 = var_51;
    match var_51.pop() {
        None => Ok(Default::default()),
        Some(item) => Ok(item),
    }
}

pub fn deser_header_get_object_replication_status(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<crate::model::ReplicationStatus>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-replication-status").iter();
    let var_52: Vec<crate::model::ReplicationStatus> = smithy_http::header::read_many(headers)?;
    if var_52.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_52 = var_52;
        Ok(var_52.pop())
    }
}

pub fn deser_header_get_object_request_charged(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<crate::model::RequestCharged>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-request-charged").iter();
    let var_53: Vec<crate::model::RequestCharged> = smithy_http::header::read_many(headers)?;
    if var_53.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_53 = var_53;
        Ok(var_53.pop())
    }
}

pub fn deser_header_get_object_restore(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-restore").iter();
    let var_54: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_54.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_54 = var_54;
        Ok(var_54.pop())
    }
}

pub fn deser_header_get_object_sse_customer_algorithm(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-algorithm")
        .iter();
    let var_55: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_55.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_55 = var_55;
        Ok(var_55.pop())
    }
}

pub fn deser_header_get_object_sse_customer_key_md5(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-key-MD5")
        .iter();
    let var_56: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_56.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_56 = var_56;
        Ok(var_56.pop())
    }
}

pub fn deser_header_get_object_ssekms_key_id(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-aws-kms-key-id")
        .iter();
    let var_57: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_57.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_57 = var_57;
        Ok(var_57.pop())
    }
}

pub fn deser_header_get_object_server_side_encryption(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<crate::model::ServerSideEncryption>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("x-amz-server-side-encryption").iter();
    let var_58: Vec<crate::model::ServerSideEncryption> = smithy_http::header::read_many(headers)?;
    if var_58.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_58 = var_58;
        Ok(var_58.pop())
    }
}

pub fn deser_header_get_object_storage_class(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<crate::model::StorageClass>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-storage-class").iter();
    let var_59: Vec<crate::model::StorageClass> = smithy_http::header::read_many(headers)?;
    if var_59.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_59 = var_59;
        Ok(var_59.pop())
    }
}

pub fn deser_header_get_object_tag_count(
    header_map: &http::HeaderMap,
) -> Result<i32, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-tagging-count").iter();
    let var_60: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_60.len() > 1 {
        return Err(smithy_http::header::ParseError);
    }
    let mut var_60 = var_60;
    match var_60.pop() {
        None => Ok(Default::default()),
        Some(item) => Ok(item),
    }
}

pub fn deser_header_get_object_version_id(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-version-id").iter();
    let var_61: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_61.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_61 = var_61;
        Ok(var_61.pop())
    }
}

pub fn deser_header_get_object_website_redirect_location(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-website-redirect-location").iter();
    let var_62: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_62.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_62 = var_62;
        Ok(var_62.pop())
    }
}

pub fn deser_header_get_object_acl_request_charged(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<crate::model::RequestCharged>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-request-charged").iter();
    let var_63: Vec<crate::model::RequestCharged> = smithy_http::header::read_many(headers)?;
    if var_63.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_63 = var_63;
        Ok(var_63.pop())
    }
}

pub fn deser_payload_get_object_legal_hold_legal_hold(
    body: &[u8],
) -> Result<
    std::option::Option<crate::model::ObjectLockLegalHold>,
    crate::error::GetObjectLegalHoldError,
> {
    (!body.is_empty())
        .then(|| {
            crate::xml_deser::deser_member_get_object_legal_hold_output_legal_hold(body)
                .map_err(crate::error::GetObjectLegalHoldError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_object_lock_configuration_object_lock_configuration(
    body: &[u8],
) -> Result<
    std::option::Option<crate::model::ObjectLockConfiguration>,
    crate::error::GetObjectLockConfigurationError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_get_object_lock_configuration_output_object_lock_configuration(body).map_err(crate::error::GetObjectLockConfigurationError::unhandled)
    }).transpose()
}

pub fn deser_payload_get_object_retention_retention(
    body: &[u8],
) -> Result<
    std::option::Option<crate::model::ObjectLockRetention>,
    crate::error::GetObjectRetentionError,
> {
    (!body.is_empty())
        .then(|| {
            crate::xml_deser::deser_member_get_object_retention_output_retention(body)
                .map_err(crate::error::GetObjectRetentionError::unhandled)
        })
        .transpose()
}

pub fn deser_header_get_object_tagging_version_id(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-version-id").iter();
    let var_64: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_64.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_64 = var_64;
        Ok(var_64.pop())
    }
}

pub fn deser_payload_get_object_torrent_body(
    body: &mut smithy_http::body::SdkBody,
) -> Result<smithy_http::byte_stream::ByteStream, crate::error::GetObjectTorrentError> {
    // replace the body with an empty body
    let body = std::mem::replace(body, smithy_http::body::SdkBody::taken());
    Ok(smithy_http::byte_stream::ByteStream::new(body))
}

pub fn deser_header_get_object_torrent_request_charged(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<crate::model::RequestCharged>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-request-charged").iter();
    let var_65: Vec<crate::model::RequestCharged> = smithy_http::header::read_many(headers)?;
    if var_65.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_65 = var_65;
        Ok(var_65.pop())
    }
}

pub fn deser_payload_get_public_access_block_public_access_block_configuration(
    body: &[u8],
) -> Result<
    std::option::Option<crate::model::PublicAccessBlockConfiguration>,
    crate::error::GetPublicAccessBlockError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_get_public_access_block_output_public_access_block_configuration(body).map_err(crate::error::GetPublicAccessBlockError::unhandled)
    }).transpose()
}

pub fn deser_header_head_object_accept_ranges(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("accept-ranges").iter();
    let var_66: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_66.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_66 = var_66;
        Ok(var_66.pop())
    }
}

pub fn deser_header_head_object_archive_status(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<crate::model::ArchiveStatus>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-archive-status").iter();
    let var_67: Vec<crate::model::ArchiveStatus> = smithy_http::header::read_many(headers)?;
    if var_67.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_67 = var_67;
        Ok(var_67.pop())
    }
}

pub fn deser_header_head_object_bucket_key_enabled(
    header_map: &http::HeaderMap,
) -> Result<bool, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-bucket-key-enabled")
        .iter();
    let var_68: Vec<bool> = smithy_http::header::read_many(headers)?;
    if var_68.len() > 1 {
        return Err(smithy_http::header::ParseError);
    }
    let mut var_68 = var_68;
    match var_68.pop() {
        None => Ok(Default::default()),
        Some(item) => Ok(item),
    }
}

pub fn deser_header_head_object_cache_control(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Cache-Control").iter();
    let var_69: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_69.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_69 = var_69;
        Ok(var_69.pop())
    }
}

pub fn deser_header_head_object_content_disposition(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Content-Disposition").iter();
    let var_70: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_70.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_70 = var_70;
        Ok(var_70.pop())
    }
}

pub fn deser_header_head_object_content_encoding(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Content-Encoding").iter();
    let var_71: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_71.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_71 = var_71;
        Ok(var_71.pop())
    }
}

pub fn deser_header_head_object_content_language(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Content-Language").iter();
    let var_72: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_72.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_72 = var_72;
        Ok(var_72.pop())
    }
}

pub fn deser_header_head_object_content_length(
    header_map: &http::HeaderMap,
) -> Result<i64, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Content-Length").iter();
    let var_73: Vec<i64> = smithy_http::header::read_many(headers)?;
    if var_73.len() > 1 {
        return Err(smithy_http::header::ParseError);
    }
    let mut var_73 = var_73;
    match var_73.pop() {
        None => Ok(Default::default()),
        Some(item) => Ok(item),
    }
}

pub fn deser_header_head_object_content_type(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Content-Type").iter();
    let var_74: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_74.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_74 = var_74;
        Ok(var_74.pop())
    }
}

pub fn deser_header_head_object_delete_marker(
    header_map: &http::HeaderMap,
) -> Result<bool, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-delete-marker").iter();
    let var_75: Vec<bool> = smithy_http::header::read_many(headers)?;
    if var_75.len() > 1 {
        return Err(smithy_http::header::ParseError);
    }
    let mut var_75 = var_75;
    match var_75.pop() {
        None => Ok(Default::default()),
        Some(item) => Ok(item),
    }
}

pub fn deser_header_head_object_e_tag(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("ETag").iter();
    let var_76: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_76.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_76 = var_76;
        Ok(var_76.pop())
    }
}

pub fn deser_header_head_object_expiration(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-expiration").iter();
    let var_77: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_77.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_77 = var_77;
        Ok(var_77.pop())
    }
}

pub fn deser_header_head_object_expires(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<smithy_types::Instant>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Expires").iter();
    let var_78: Vec<smithy_types::Instant> =
        smithy_http::header::many_dates(headers, smithy_types::instant::Format::HttpDate)?;
    if var_78.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_78 = var_78;
        Ok(var_78.pop())
    }
}

pub fn deser_header_head_object_last_modified(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<smithy_types::Instant>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Last-Modified").iter();
    let var_79: Vec<smithy_types::Instant> =
        smithy_http::header::many_dates(headers, smithy_types::instant::Format::HttpDate)?;
    if var_79.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_79 = var_79;
        Ok(var_79.pop())
    }
}

pub fn deser_prefix_header_head_object_metadata(
    header_map: &http::HeaderMap,
) -> Result<
    std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    smithy_http::header::ParseError,
> {
    let headers = smithy_http::header::headers_for_prefix(&header_map, "x-amz-meta-");
    let out: Result<_, _> = headers
        .map(|(key, header_name)| {
            let values = header_map.get_all(header_name);
            crate::http_serde::deser_prefix_header_head_object_metadata_inner(values.iter())
                .map(|v| (key.to_string(), v.unwrap()))
        })
        .collect();
    out.map(Some)
}

pub fn deser_header_head_object_missing_meta(
    header_map: &http::HeaderMap,
) -> Result<i32, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-missing-meta").iter();
    let var_80: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_80.len() > 1 {
        return Err(smithy_http::header::ParseError);
    }
    let mut var_80 = var_80;
    match var_80.pop() {
        None => Ok(Default::default()),
        Some(item) => Ok(item),
    }
}

pub fn deser_header_head_object_object_lock_legal_hold_status(
    header_map: &http::HeaderMap,
) -> Result<
    std::option::Option<crate::model::ObjectLockLegalHoldStatus>,
    smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-object-lock-legal-hold").iter();
    let var_81: Vec<crate::model::ObjectLockLegalHoldStatus> =
        smithy_http::header::read_many(headers)?;
    if var_81.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_81 = var_81;
        Ok(var_81.pop())
    }
}

pub fn deser_header_head_object_object_lock_mode(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<crate::model::ObjectLockMode>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-object-lock-mode").iter();
    let var_82: Vec<crate::model::ObjectLockMode> = smithy_http::header::read_many(headers)?;
    if var_82.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_82 = var_82;
        Ok(var_82.pop())
    }
}

pub fn deser_header_head_object_object_lock_retain_until_date(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<smithy_types::Instant>, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-object-lock-retain-until-date")
        .iter();
    let var_83: Vec<smithy_types::Instant> =
        smithy_http::header::many_dates(headers, smithy_types::instant::Format::DateTime)?;
    if var_83.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_83 = var_83;
        Ok(var_83.pop())
    }
}

pub fn deser_header_head_object_parts_count(
    header_map: &http::HeaderMap,
) -> Result<i32, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-mp-parts-count").iter();
    let var_84: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_84.len() > 1 {
        return Err(smithy_http::header::ParseError);
    }
    let mut var_84 = var_84;
    match var_84.pop() {
        None => Ok(Default::default()),
        Some(item) => Ok(item),
    }
}

pub fn deser_header_head_object_replication_status(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<crate::model::ReplicationStatus>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-replication-status").iter();
    let var_85: Vec<crate::model::ReplicationStatus> = smithy_http::header::read_many(headers)?;
    if var_85.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_85 = var_85;
        Ok(var_85.pop())
    }
}

pub fn deser_header_head_object_request_charged(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<crate::model::RequestCharged>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-request-charged").iter();
    let var_86: Vec<crate::model::RequestCharged> = smithy_http::header::read_many(headers)?;
    if var_86.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_86 = var_86;
        Ok(var_86.pop())
    }
}

pub fn deser_header_head_object_restore(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-restore").iter();
    let var_87: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_87.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_87 = var_87;
        Ok(var_87.pop())
    }
}

pub fn deser_header_head_object_sse_customer_algorithm(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-algorithm")
        .iter();
    let var_88: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_88.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_88 = var_88;
        Ok(var_88.pop())
    }
}

pub fn deser_header_head_object_sse_customer_key_md5(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-key-MD5")
        .iter();
    let var_89: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_89.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_89 = var_89;
        Ok(var_89.pop())
    }
}

pub fn deser_header_head_object_ssekms_key_id(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-aws-kms-key-id")
        .iter();
    let var_90: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_90.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_90 = var_90;
        Ok(var_90.pop())
    }
}

pub fn deser_header_head_object_server_side_encryption(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<crate::model::ServerSideEncryption>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("x-amz-server-side-encryption").iter();
    let var_91: Vec<crate::model::ServerSideEncryption> = smithy_http::header::read_many(headers)?;
    if var_91.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_91 = var_91;
        Ok(var_91.pop())
    }
}

pub fn deser_header_head_object_storage_class(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<crate::model::StorageClass>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-storage-class").iter();
    let var_92: Vec<crate::model::StorageClass> = smithy_http::header::read_many(headers)?;
    if var_92.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_92 = var_92;
        Ok(var_92.pop())
    }
}

pub fn deser_header_head_object_version_id(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-version-id").iter();
    let var_93: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_93.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_93 = var_93;
        Ok(var_93.pop())
    }
}

pub fn deser_header_head_object_website_redirect_location(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-website-redirect-location").iter();
    let var_94: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_94.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_94 = var_94;
        Ok(var_94.pop())
    }
}

pub fn deser_header_list_parts_abort_date(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<smithy_types::Instant>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-abort-date").iter();
    let var_95: Vec<smithy_types::Instant> =
        smithy_http::header::many_dates(headers, smithy_types::instant::Format::HttpDate)?;
    if var_95.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_95 = var_95;
        Ok(var_95.pop())
    }
}

pub fn deser_header_list_parts_abort_rule_id(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-abort-rule-id").iter();
    let var_96: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_96.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_96 = var_96;
        Ok(var_96.pop())
    }
}

pub fn deser_header_list_parts_request_charged(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<crate::model::RequestCharged>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-request-charged").iter();
    let var_97: Vec<crate::model::RequestCharged> = smithy_http::header::read_many(headers)?;
    if var_97.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_97 = var_97;
        Ok(var_97.pop())
    }
}

pub fn deser_header_put_object_bucket_key_enabled(
    header_map: &http::HeaderMap,
) -> Result<bool, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-bucket-key-enabled")
        .iter();
    let var_98: Vec<bool> = smithy_http::header::read_many(headers)?;
    if var_98.len() > 1 {
        return Err(smithy_http::header::ParseError);
    }
    let mut var_98 = var_98;
    match var_98.pop() {
        None => Ok(Default::default()),
        Some(item) => Ok(item),
    }
}

pub fn deser_header_put_object_e_tag(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("ETag").iter();
    let var_99: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_99.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_99 = var_99;
        Ok(var_99.pop())
    }
}

pub fn deser_header_put_object_expiration(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-expiration").iter();
    let var_100: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_100.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_100 = var_100;
        Ok(var_100.pop())
    }
}

pub fn deser_header_put_object_request_charged(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<crate::model::RequestCharged>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-request-charged").iter();
    let var_101: Vec<crate::model::RequestCharged> = smithy_http::header::read_many(headers)?;
    if var_101.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_101 = var_101;
        Ok(var_101.pop())
    }
}

pub fn deser_header_put_object_sse_customer_algorithm(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-algorithm")
        .iter();
    let var_102: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_102.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_102 = var_102;
        Ok(var_102.pop())
    }
}

pub fn deser_header_put_object_sse_customer_key_md5(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-key-MD5")
        .iter();
    let var_103: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_103.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_103 = var_103;
        Ok(var_103.pop())
    }
}

pub fn deser_header_put_object_ssekms_encryption_context(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-context")
        .iter();
    let var_104: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_104.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_104 = var_104;
        Ok(var_104.pop())
    }
}

pub fn deser_header_put_object_ssekms_key_id(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-aws-kms-key-id")
        .iter();
    let var_105: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_105.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_105 = var_105;
        Ok(var_105.pop())
    }
}

pub fn deser_header_put_object_server_side_encryption(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<crate::model::ServerSideEncryption>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("x-amz-server-side-encryption").iter();
    let var_106: Vec<crate::model::ServerSideEncryption> = smithy_http::header::read_many(headers)?;
    if var_106.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_106 = var_106;
        Ok(var_106.pop())
    }
}

pub fn deser_header_put_object_version_id(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-version-id").iter();
    let var_107: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_107.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_107 = var_107;
        Ok(var_107.pop())
    }
}

pub fn deser_header_put_object_acl_request_charged(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<crate::model::RequestCharged>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-request-charged").iter();
    let var_108: Vec<crate::model::RequestCharged> = smithy_http::header::read_many(headers)?;
    if var_108.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_108 = var_108;
        Ok(var_108.pop())
    }
}

pub fn deser_header_put_object_legal_hold_request_charged(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<crate::model::RequestCharged>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-request-charged").iter();
    let var_109: Vec<crate::model::RequestCharged> = smithy_http::header::read_many(headers)?;
    if var_109.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_109 = var_109;
        Ok(var_109.pop())
    }
}

pub fn deser_header_put_object_lock_configuration_request_charged(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<crate::model::RequestCharged>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-request-charged").iter();
    let var_110: Vec<crate::model::RequestCharged> = smithy_http::header::read_many(headers)?;
    if var_110.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_110 = var_110;
        Ok(var_110.pop())
    }
}

pub fn deser_header_put_object_retention_request_charged(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<crate::model::RequestCharged>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-request-charged").iter();
    let var_111: Vec<crate::model::RequestCharged> = smithy_http::header::read_many(headers)?;
    if var_111.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_111 = var_111;
        Ok(var_111.pop())
    }
}

pub fn deser_header_put_object_tagging_version_id(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-version-id").iter();
    let var_112: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_112.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_112 = var_112;
        Ok(var_112.pop())
    }
}

pub fn deser_header_restore_object_request_charged(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<crate::model::RequestCharged>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-request-charged").iter();
    let var_113: Vec<crate::model::RequestCharged> = smithy_http::header::read_many(headers)?;
    if var_113.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_113 = var_113;
        Ok(var_113.pop())
    }
}

pub fn deser_header_restore_object_restore_output_path(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-restore-output-path").iter();
    let var_114: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_114.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_114 = var_114;
        Ok(var_114.pop())
    }
}

pub fn deser_header_upload_part_bucket_key_enabled(
    header_map: &http::HeaderMap,
) -> Result<bool, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-bucket-key-enabled")
        .iter();
    let var_115: Vec<bool> = smithy_http::header::read_many(headers)?;
    if var_115.len() > 1 {
        return Err(smithy_http::header::ParseError);
    }
    let mut var_115 = var_115;
    match var_115.pop() {
        None => Ok(Default::default()),
        Some(item) => Ok(item),
    }
}

pub fn deser_header_upload_part_e_tag(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("ETag").iter();
    let var_116: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_116.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_116 = var_116;
        Ok(var_116.pop())
    }
}

pub fn deser_header_upload_part_request_charged(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<crate::model::RequestCharged>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-request-charged").iter();
    let var_117: Vec<crate::model::RequestCharged> = smithy_http::header::read_many(headers)?;
    if var_117.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_117 = var_117;
        Ok(var_117.pop())
    }
}

pub fn deser_header_upload_part_sse_customer_algorithm(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-algorithm")
        .iter();
    let var_118: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_118.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_118 = var_118;
        Ok(var_118.pop())
    }
}

pub fn deser_header_upload_part_sse_customer_key_md5(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-key-MD5")
        .iter();
    let var_119: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_119.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_119 = var_119;
        Ok(var_119.pop())
    }
}

pub fn deser_header_upload_part_ssekms_key_id(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-aws-kms-key-id")
        .iter();
    let var_120: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_120.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_120 = var_120;
        Ok(var_120.pop())
    }
}

pub fn deser_header_upload_part_server_side_encryption(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<crate::model::ServerSideEncryption>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("x-amz-server-side-encryption").iter();
    let var_121: Vec<crate::model::ServerSideEncryption> = smithy_http::header::read_many(headers)?;
    if var_121.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_121 = var_121;
        Ok(var_121.pop())
    }
}

pub fn deser_header_upload_part_copy_bucket_key_enabled(
    header_map: &http::HeaderMap,
) -> Result<bool, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-bucket-key-enabled")
        .iter();
    let var_122: Vec<bool> = smithy_http::header::read_many(headers)?;
    if var_122.len() > 1 {
        return Err(smithy_http::header::ParseError);
    }
    let mut var_122 = var_122;
    match var_122.pop() {
        None => Ok(Default::default()),
        Some(item) => Ok(item),
    }
}

pub fn deser_payload_upload_part_copy_copy_part_result(
    body: &[u8],
) -> Result<std::option::Option<crate::model::CopyPartResult>, crate::error::UploadPartCopyError> {
    (!body.is_empty())
        .then(|| {
            crate::xml_deser::deser_member_upload_part_copy_output_copy_part_result(body)
                .map_err(crate::error::UploadPartCopyError::unhandled)
        })
        .transpose()
}

pub fn deser_header_upload_part_copy_copy_source_version_id(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-copy-source-version-id").iter();
    let var_123: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_123.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_123 = var_123;
        Ok(var_123.pop())
    }
}

pub fn deser_header_upload_part_copy_request_charged(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<crate::model::RequestCharged>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-request-charged").iter();
    let var_124: Vec<crate::model::RequestCharged> = smithy_http::header::read_many(headers)?;
    if var_124.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_124 = var_124;
        Ok(var_124.pop())
    }
}

pub fn deser_header_upload_part_copy_sse_customer_algorithm(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-algorithm")
        .iter();
    let var_125: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_125.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_125 = var_125;
        Ok(var_125.pop())
    }
}

pub fn deser_header_upload_part_copy_sse_customer_key_md5(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-key-MD5")
        .iter();
    let var_126: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_126.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_126 = var_126;
        Ok(var_126.pop())
    }
}

pub fn deser_header_upload_part_copy_ssekms_key_id(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-aws-kms-key-id")
        .iter();
    let var_127: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_127.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_127 = var_127;
        Ok(var_127.pop())
    }
}

pub fn deser_header_upload_part_copy_server_side_encryption(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<crate::model::ServerSideEncryption>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("x-amz-server-side-encryption").iter();
    let var_128: Vec<crate::model::ServerSideEncryption> = smithy_http::header::read_many(headers)?;
    if var_128.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_128 = var_128;
        Ok(var_128.pop())
    }
}

pub fn deser_prefix_header_get_object_metadata_inner(
    headers: http::header::ValueIter<http::HeaderValue>,
) -> Result<Option<std::string::String>, smithy_http::header::ParseError> {
    let var_129: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_129.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_129 = var_129;
        Ok(var_129.pop())
    }
}

pub fn deser_prefix_header_head_object_metadata_inner(
    headers: http::header::ValueIter<http::HeaderValue>,
) -> Result<Option<std::string::String>, smithy_http::header::ParseError> {
    let var_130: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_130.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_130 = var_130;
        Ok(var_130.pop())
    }
}
