// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a metrics configuration for the CloudWatch request metrics (specified by the metrics configuration ID) from an Amazon S3 bucket. If you're updating an existing metrics configuration, note that this is a full replacement of the existing metrics configuration. If you don't include the elements you want to keep, they are erased. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTMetricConfiguration.html">PutBucketMetricsConfiguration</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MetricsConfiguration {
    /// <p>The ID used to identify the metrics configuration.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>Specifies a metrics configuration filter. The metrics configuration will only include objects that meet the filter's criteria. A filter must be a prefix, an object tag, an access point ARN, or a conjunction (MetricsAndOperator).</p>
    #[doc(hidden)]
    pub filter: std::option::Option<crate::types::MetricsFilter>,
}
impl MetricsConfiguration {
    /// <p>The ID used to identify the metrics configuration.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>Specifies a metrics configuration filter. The metrics configuration will only include objects that meet the filter's criteria. A filter must be a prefix, an object tag, an access point ARN, or a conjunction (MetricsAndOperator).</p>
    pub fn filter(&self) -> std::option::Option<&crate::types::MetricsFilter> {
        self.filter.as_ref()
    }
}
impl MetricsConfiguration {
    /// Creates a new builder-style object to manufacture [`MetricsConfiguration`](crate::types::MetricsConfiguration).
    pub fn builder() -> crate::types::builders::MetricsConfigurationBuilder {
        crate::types::builders::MetricsConfigurationBuilder::default()
    }
}

/// A builder for [`MetricsConfiguration`](crate::types::MetricsConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MetricsConfigurationBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) filter: std::option::Option<crate::types::MetricsFilter>,
}
impl MetricsConfigurationBuilder {
    /// <p>The ID used to identify the metrics configuration.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The ID used to identify the metrics configuration.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>Specifies a metrics configuration filter. The metrics configuration will only include objects that meet the filter's criteria. A filter must be a prefix, an object tag, an access point ARN, or a conjunction (MetricsAndOperator).</p>
    pub fn filter(mut self, input: crate::types::MetricsFilter) -> Self {
        self.filter = Some(input);
        self
    }
    /// <p>Specifies a metrics configuration filter. The metrics configuration will only include objects that meet the filter's criteria. A filter must be a prefix, an object tag, an access point ARN, or a conjunction (MetricsAndOperator).</p>
    pub fn set_filter(mut self, input: std::option::Option<crate::types::MetricsFilter>) -> Self {
        self.filter = input;
        self
    }
    /// Consumes the builder and constructs a [`MetricsConfiguration`](crate::types::MetricsConfiguration).
    pub fn build(self) -> crate::types::MetricsConfiguration {
        crate::types::MetricsConfiguration {
            id: self.id,
            filter: self.filter,
        }
    }
}
