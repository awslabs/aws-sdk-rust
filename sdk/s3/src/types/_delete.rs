// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Container for the objects to delete.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Delete {
    /// <p>The objects to delete.</p>
    #[doc(hidden)]
    pub objects: std::option::Option<std::vec::Vec<crate::types::ObjectIdentifier>>,
    /// <p>Element to enable quiet mode for the request. When you add this element, you must set its value to true.</p>
    #[doc(hidden)]
    pub quiet: bool,
}
impl Delete {
    /// <p>The objects to delete.</p>
    pub fn objects(&self) -> std::option::Option<&[crate::types::ObjectIdentifier]> {
        self.objects.as_deref()
    }
    /// <p>Element to enable quiet mode for the request. When you add this element, you must set its value to true.</p>
    pub fn quiet(&self) -> bool {
        self.quiet
    }
}
impl Delete {
    /// Creates a new builder-style object to manufacture [`Delete`](crate::types::Delete).
    pub fn builder() -> crate::types::builders::DeleteBuilder {
        crate::types::builders::DeleteBuilder::default()
    }
}

/// A builder for [`Delete`](crate::types::Delete).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteBuilder {
    pub(crate) objects: std::option::Option<std::vec::Vec<crate::types::ObjectIdentifier>>,
    pub(crate) quiet: std::option::Option<bool>,
}
impl DeleteBuilder {
    /// Appends an item to `objects`.
    ///
    /// To override the contents of this collection use [`set_objects`](Self::set_objects).
    ///
    /// <p>The objects to delete.</p>
    pub fn objects(mut self, input: crate::types::ObjectIdentifier) -> Self {
        let mut v = self.objects.unwrap_or_default();
        v.push(input);
        self.objects = Some(v);
        self
    }
    /// <p>The objects to delete.</p>
    pub fn set_objects(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ObjectIdentifier>>,
    ) -> Self {
        self.objects = input;
        self
    }
    /// <p>Element to enable quiet mode for the request. When you add this element, you must set its value to true.</p>
    pub fn quiet(mut self, input: bool) -> Self {
        self.quiet = Some(input);
        self
    }
    /// <p>Element to enable quiet mode for the request. When you add this element, you must set its value to true.</p>
    pub fn set_quiet(mut self, input: std::option::Option<bool>) -> Self {
        self.quiet = input;
        self
    }
    /// Consumes the builder and constructs a [`Delete`](crate::types::Delete).
    pub fn build(self) -> crate::types::Delete {
        crate::types::Delete {
            objects: self.objects,
            quiet: self.quiet.unwrap_or_default(),
        }
    }
}
