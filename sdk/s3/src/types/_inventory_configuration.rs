// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the inventory configuration for an Amazon S3 bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketGETInventoryConfig.html">GET Bucket inventory</a> in the <i>Amazon S3 API Reference</i>. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InventoryConfiguration {
    /// <p>Contains information about where to publish the inventory results.</p>
    #[doc(hidden)]
    pub destination: std::option::Option<crate::types::InventoryDestination>,
    /// <p>Specifies whether the inventory is enabled or disabled. If set to <code>True</code>, an inventory list is generated. If set to <code>False</code>, no inventory list is generated.</p>
    #[doc(hidden)]
    pub is_enabled: bool,
    /// <p>Specifies an inventory filter. The inventory only includes objects that meet the filter's criteria.</p>
    #[doc(hidden)]
    pub filter: std::option::Option<crate::types::InventoryFilter>,
    /// <p>The ID used to identify the inventory configuration.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>Object versions to include in the inventory list. If set to <code>All</code>, the list includes all the object versions, which adds the version-related fields <code>VersionId</code>, <code>IsLatest</code>, and <code>DeleteMarker</code> to the list. If set to <code>Current</code>, the list does not contain these version-related fields.</p>
    #[doc(hidden)]
    pub included_object_versions:
        std::option::Option<crate::types::InventoryIncludedObjectVersions>,
    /// <p>Contains the optional fields that are included in the inventory results.</p>
    #[doc(hidden)]
    pub optional_fields: std::option::Option<std::vec::Vec<crate::types::InventoryOptionalField>>,
    /// <p>Specifies the schedule for generating inventory results.</p>
    #[doc(hidden)]
    pub schedule: std::option::Option<crate::types::InventorySchedule>,
}
impl InventoryConfiguration {
    /// <p>Contains information about where to publish the inventory results.</p>
    pub fn destination(&self) -> std::option::Option<&crate::types::InventoryDestination> {
        self.destination.as_ref()
    }
    /// <p>Specifies whether the inventory is enabled or disabled. If set to <code>True</code>, an inventory list is generated. If set to <code>False</code>, no inventory list is generated.</p>
    pub fn is_enabled(&self) -> bool {
        self.is_enabled
    }
    /// <p>Specifies an inventory filter. The inventory only includes objects that meet the filter's criteria.</p>
    pub fn filter(&self) -> std::option::Option<&crate::types::InventoryFilter> {
        self.filter.as_ref()
    }
    /// <p>The ID used to identify the inventory configuration.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>Object versions to include in the inventory list. If set to <code>All</code>, the list includes all the object versions, which adds the version-related fields <code>VersionId</code>, <code>IsLatest</code>, and <code>DeleteMarker</code> to the list. If set to <code>Current</code>, the list does not contain these version-related fields.</p>
    pub fn included_object_versions(
        &self,
    ) -> std::option::Option<&crate::types::InventoryIncludedObjectVersions> {
        self.included_object_versions.as_ref()
    }
    /// <p>Contains the optional fields that are included in the inventory results.</p>
    pub fn optional_fields(&self) -> std::option::Option<&[crate::types::InventoryOptionalField]> {
        self.optional_fields.as_deref()
    }
    /// <p>Specifies the schedule for generating inventory results.</p>
    pub fn schedule(&self) -> std::option::Option<&crate::types::InventorySchedule> {
        self.schedule.as_ref()
    }
}
impl InventoryConfiguration {
    /// Creates a new builder-style object to manufacture [`InventoryConfiguration`](crate::types::InventoryConfiguration).
    pub fn builder() -> crate::types::builders::InventoryConfigurationBuilder {
        crate::types::builders::InventoryConfigurationBuilder::default()
    }
}

/// A builder for [`InventoryConfiguration`](crate::types::InventoryConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InventoryConfigurationBuilder {
    pub(crate) destination: std::option::Option<crate::types::InventoryDestination>,
    pub(crate) is_enabled: std::option::Option<bool>,
    pub(crate) filter: std::option::Option<crate::types::InventoryFilter>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) included_object_versions:
        std::option::Option<crate::types::InventoryIncludedObjectVersions>,
    pub(crate) optional_fields:
        std::option::Option<std::vec::Vec<crate::types::InventoryOptionalField>>,
    pub(crate) schedule: std::option::Option<crate::types::InventorySchedule>,
}
impl InventoryConfigurationBuilder {
    /// <p>Contains information about where to publish the inventory results.</p>
    pub fn destination(mut self, input: crate::types::InventoryDestination) -> Self {
        self.destination = Some(input);
        self
    }
    /// <p>Contains information about where to publish the inventory results.</p>
    pub fn set_destination(
        mut self,
        input: std::option::Option<crate::types::InventoryDestination>,
    ) -> Self {
        self.destination = input;
        self
    }
    /// <p>Specifies whether the inventory is enabled or disabled. If set to <code>True</code>, an inventory list is generated. If set to <code>False</code>, no inventory list is generated.</p>
    pub fn is_enabled(mut self, input: bool) -> Self {
        self.is_enabled = Some(input);
        self
    }
    /// <p>Specifies whether the inventory is enabled or disabled. If set to <code>True</code>, an inventory list is generated. If set to <code>False</code>, no inventory list is generated.</p>
    pub fn set_is_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.is_enabled = input;
        self
    }
    /// <p>Specifies an inventory filter. The inventory only includes objects that meet the filter's criteria.</p>
    pub fn filter(mut self, input: crate::types::InventoryFilter) -> Self {
        self.filter = Some(input);
        self
    }
    /// <p>Specifies an inventory filter. The inventory only includes objects that meet the filter's criteria.</p>
    pub fn set_filter(mut self, input: std::option::Option<crate::types::InventoryFilter>) -> Self {
        self.filter = input;
        self
    }
    /// <p>The ID used to identify the inventory configuration.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The ID used to identify the inventory configuration.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>Object versions to include in the inventory list. If set to <code>All</code>, the list includes all the object versions, which adds the version-related fields <code>VersionId</code>, <code>IsLatest</code>, and <code>DeleteMarker</code> to the list. If set to <code>Current</code>, the list does not contain these version-related fields.</p>
    pub fn included_object_versions(
        mut self,
        input: crate::types::InventoryIncludedObjectVersions,
    ) -> Self {
        self.included_object_versions = Some(input);
        self
    }
    /// <p>Object versions to include in the inventory list. If set to <code>All</code>, the list includes all the object versions, which adds the version-related fields <code>VersionId</code>, <code>IsLatest</code>, and <code>DeleteMarker</code> to the list. If set to <code>Current</code>, the list does not contain these version-related fields.</p>
    pub fn set_included_object_versions(
        mut self,
        input: std::option::Option<crate::types::InventoryIncludedObjectVersions>,
    ) -> Self {
        self.included_object_versions = input;
        self
    }
    /// Appends an item to `optional_fields`.
    ///
    /// To override the contents of this collection use [`set_optional_fields`](Self::set_optional_fields).
    ///
    /// <p>Contains the optional fields that are included in the inventory results.</p>
    pub fn optional_fields(mut self, input: crate::types::InventoryOptionalField) -> Self {
        let mut v = self.optional_fields.unwrap_or_default();
        v.push(input);
        self.optional_fields = Some(v);
        self
    }
    /// <p>Contains the optional fields that are included in the inventory results.</p>
    pub fn set_optional_fields(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::InventoryOptionalField>>,
    ) -> Self {
        self.optional_fields = input;
        self
    }
    /// <p>Specifies the schedule for generating inventory results.</p>
    pub fn schedule(mut self, input: crate::types::InventorySchedule) -> Self {
        self.schedule = Some(input);
        self
    }
    /// <p>Specifies the schedule for generating inventory results.</p>
    pub fn set_schedule(
        mut self,
        input: std::option::Option<crate::types::InventorySchedule>,
    ) -> Self {
        self.schedule = input;
        self
    }
    /// Consumes the builder and constructs a [`InventoryConfiguration`](crate::types::InventoryConfiguration).
    pub fn build(self) -> crate::types::InventoryConfiguration {
        crate::types::InventoryConfiguration {
            destination: self.destination,
            is_enabled: self.is_enabled.unwrap_or_default(),
            filter: self.filter,
            id: self.id,
            included_object_versions: self.included_object_versions,
            optional_fields: self.optional_fields,
            schedule: self.schedule,
        }
    }
}
