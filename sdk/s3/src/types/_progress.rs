// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This data type contains information about progress of an operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Progress {
    /// <p>The current number of object bytes scanned.</p>
    #[doc(hidden)]
    pub bytes_scanned: i64,
    /// <p>The current number of uncompressed object bytes processed.</p>
    #[doc(hidden)]
    pub bytes_processed: i64,
    /// <p>The current number of bytes of records payload data returned.</p>
    #[doc(hidden)]
    pub bytes_returned: i64,
}
impl Progress {
    /// <p>The current number of object bytes scanned.</p>
    pub fn bytes_scanned(&self) -> i64 {
        self.bytes_scanned
    }
    /// <p>The current number of uncompressed object bytes processed.</p>
    pub fn bytes_processed(&self) -> i64 {
        self.bytes_processed
    }
    /// <p>The current number of bytes of records payload data returned.</p>
    pub fn bytes_returned(&self) -> i64 {
        self.bytes_returned
    }
}
impl Progress {
    /// Creates a new builder-style object to manufacture [`Progress`](crate::types::Progress).
    pub fn builder() -> crate::types::builders::ProgressBuilder {
        crate::types::builders::ProgressBuilder::default()
    }
}

/// A builder for [`Progress`](crate::types::Progress).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ProgressBuilder {
    pub(crate) bytes_scanned: std::option::Option<i64>,
    pub(crate) bytes_processed: std::option::Option<i64>,
    pub(crate) bytes_returned: std::option::Option<i64>,
}
impl ProgressBuilder {
    /// <p>The current number of object bytes scanned.</p>
    pub fn bytes_scanned(mut self, input: i64) -> Self {
        self.bytes_scanned = Some(input);
        self
    }
    /// <p>The current number of object bytes scanned.</p>
    pub fn set_bytes_scanned(mut self, input: std::option::Option<i64>) -> Self {
        self.bytes_scanned = input;
        self
    }
    /// <p>The current number of uncompressed object bytes processed.</p>
    pub fn bytes_processed(mut self, input: i64) -> Self {
        self.bytes_processed = Some(input);
        self
    }
    /// <p>The current number of uncompressed object bytes processed.</p>
    pub fn set_bytes_processed(mut self, input: std::option::Option<i64>) -> Self {
        self.bytes_processed = input;
        self
    }
    /// <p>The current number of bytes of records payload data returned.</p>
    pub fn bytes_returned(mut self, input: i64) -> Self {
        self.bytes_returned = Some(input);
        self
    }
    /// <p>The current number of bytes of records payload data returned.</p>
    pub fn set_bytes_returned(mut self, input: std::option::Option<i64>) -> Self {
        self.bytes_returned = input;
        self
    }
    /// Consumes the builder and constructs a [`Progress`](crate::types::Progress).
    pub fn build(self) -> crate::types::Progress {
        crate::types::Progress {
            bytes_scanned: self.bytes_scanned.unwrap_or_default(),
            bytes_processed: self.bytes_processed.unwrap_or_default(),
            bytes_returned: self.bytes_returned.unwrap_or_default(),
        }
    }
}
