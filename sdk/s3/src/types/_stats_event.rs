// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Container for the Stats Event.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StatsEvent {
    /// <p>The Stats event details.</p>
    #[doc(hidden)]
    pub details: std::option::Option<crate::types::Stats>,
}
impl StatsEvent {
    /// <p>The Stats event details.</p>
    pub fn details(&self) -> std::option::Option<&crate::types::Stats> {
        self.details.as_ref()
    }
}
impl StatsEvent {
    /// Creates a new builder-style object to manufacture [`StatsEvent`](crate::types::StatsEvent).
    pub fn builder() -> crate::types::builders::StatsEventBuilder {
        crate::types::builders::StatsEventBuilder::default()
    }
}

/// A builder for [`StatsEvent`](crate::types::StatsEvent).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StatsEventBuilder {
    pub(crate) details: std::option::Option<crate::types::Stats>,
}
impl StatsEventBuilder {
    /// <p>The Stats event details.</p>
    pub fn details(mut self, input: crate::types::Stats) -> Self {
        self.details = Some(input);
        self
    }
    /// <p>The Stats event details.</p>
    pub fn set_details(mut self, input: std::option::Option<crate::types::Stats>) -> Self {
        self.details = input;
        self
    }
    /// Consumes the builder and constructs a [`StatsEvent`](crate::types::StatsEvent).
    pub fn build(self) -> crate::types::StatsEvent {
        crate::types::StatsEvent {
            details: self.details,
        }
    }
}
