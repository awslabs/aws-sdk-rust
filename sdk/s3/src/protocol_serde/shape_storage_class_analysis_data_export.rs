// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_storage_class_analysis_data_export(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::StorageClassAnalysisDataExport, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::StorageClassAnalysisDataExport::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("OutputSchemaVersion") /* OutputSchemaVersion com.amazonaws.s3#StorageClassAnalysisDataExport$OutputSchemaVersion */ =>  {
                let var_1 =
                    Some(
                        Result::<crate::types::StorageClassAnalysisSchemaVersion, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::StorageClassAnalysisSchemaVersion::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_output_schema_version(var_1);
            }
            ,
            s if s.matches("Destination") /* Destination com.amazonaws.s3#StorageClassAnalysisDataExport$Destination */ =>  {
                let var_2 =
                    Some(
                        crate::protocol_serde::shape_analytics_export_destination::de_analytics_export_destination(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_destination(var_2);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn ser_storage_class_analysis_data_export(
    input: &crate::types::StorageClassAnalysisDataExport,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_3) = &input.output_schema_version {
        let mut inner_writer = scope.start_el("OutputSchemaVersion").finish();
        inner_writer.data(var_3.as_str());
    }
    if let Some(var_4) = &input.destination {
        let inner_writer = scope.start_el("Destination");
        crate::protocol_serde::shape_analytics_export_destination::ser_analytics_export_destination(
            var_4,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}
