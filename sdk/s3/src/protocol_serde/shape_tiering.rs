// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_tiering(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::Tiering, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::Tiering::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Days") /* Days com.amazonaws.s3#Tiering$Days */ =>  {
                let var_1 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.s3#IntelligentTieringDays`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_days(var_1);
            }
            ,
            s if s.matches("AccessTier") /* AccessTier com.amazonaws.s3#Tiering$AccessTier */ =>  {
                let var_2 =
                    Some(
                        Result::<crate::types::IntelligentTieringAccessTier, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::IntelligentTieringAccessTier::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_access_tier(var_2);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn ser_tiering(
    input: &crate::types::Tiering,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    {
        let mut inner_writer = scope.start_el("Days").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.days).encode());
    }
    if let Some(var_3) = &input.access_tier {
        let mut inner_writer = scope.start_el("AccessTier").finish();
        inner_writer.data(var_3.as_str());
    }
    scope.finish();
    Ok(())
}
