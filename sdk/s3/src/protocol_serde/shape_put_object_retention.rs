// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_put_object_retention_headers(
    input: &crate::operation::put_object_retention::PutObjectRetentionInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::error::BuildError> {
    if let Some(inner_1) = &input.request_payer {
        let formatted_2 = inner_1.as_str();
        if !formatted_2.is_empty() {
            let header_value = formatted_2;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "request_payer",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-request-payer", header_value);
        }
    }
    if input.bypass_governance_retention {
        let mut encoder =
            aws_smithy_types::primitive::Encoder::from(input.bypass_governance_retention);
        let formatted_3 = encoder.encode();
        if !formatted_3.is_empty() {
            let header_value = formatted_3;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "bypass_governance_retention",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-bypass-governance-retention", header_value);
        }
    }
    if let Some(inner_4) = &input.content_md5 {
        let formatted_5 = inner_4.as_str();
        if !formatted_5.is_empty() {
            let header_value = formatted_5;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "content_md5",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("Content-MD5", header_value);
        }
    }
    if let Some(inner_6) = &input.checksum_algorithm {
        let formatted_7 = inner_6.as_str();
        if !formatted_7.is_empty() {
            let header_value = formatted_7;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "checksum_algorithm",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-sdk-checksum-algorithm", header_value);
        }
    }
    if let Some(inner_8) = &input.expected_bucket_owner {
        let formatted_9 = inner_8.as_str();
        if !formatted_9.is_empty() {
            let header_value = formatted_9;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "expected_bucket_owner",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-expected-bucket-owner", header_value);
        }
    }
    Ok(builder)
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_put_object_retention_http_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::put_object_retention::PutObjectRetentionOutput,
    crate::operation::put_object_retention::PutObjectRetentionError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response)
        .map_err(crate::operation::put_object_retention::PutObjectRetentionError::unhandled)?;
    generic_builder =
        crate::s3_request_id::apply_extended_request_id(generic_builder, response.headers());
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    Err(crate::operation::put_object_retention::PutObjectRetentionError::generic(generic))
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_put_object_retention_http_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::put_object_retention::PutObjectRetentionOutput,
    crate::operation::put_object_retention::PutObjectRetentionError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::put_object_retention::builders::PutObjectRetentionOutputBuilder::default();
        let _ = response;
        output = output.set_request_charged(
            crate::protocol_serde::shape_put_object_retention_output::de_request_charged_header(
                response.headers(),
            )
            .map_err(|_| {
                crate::operation::put_object_retention::PutObjectRetentionError::unhandled(
                    "Failed to parse RequestCharged from header `x-amz-request-charged",
                )
            })?,
        );
        output._set_extended_request_id(
            crate::s3_request_id::RequestIdExt::extended_request_id(response).map(str::to_string),
        );
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}
