// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_upload_part_headers(
    input: &crate::operation::upload_part::UploadPartInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::error::BuildError> {
    if input.content_length != 0 {
        let mut encoder = aws_smithy_types::primitive::Encoder::from(input.content_length);
        let formatted_1 = encoder.encode();
        if !formatted_1.is_empty() {
            let header_value = formatted_1;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "content_length",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("Content-Length", header_value);
        }
    }
    if let Some(inner_2) = &input.content_md5 {
        let formatted_3 = inner_2.as_str();
        if !formatted_3.is_empty() {
            let header_value = formatted_3;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "content_md5",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("Content-MD5", header_value);
        }
    }
    if let Some(inner_4) = &input.checksum_algorithm {
        let formatted_5 = inner_4.as_str();
        if !formatted_5.is_empty() {
            let header_value = formatted_5;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "checksum_algorithm",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-sdk-checksum-algorithm", header_value);
        }
    }
    if let Some(inner_6) = &input.checksum_crc32 {
        let formatted_7 = inner_6.as_str();
        if !formatted_7.is_empty() {
            let header_value = formatted_7;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "checksum_crc32",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-checksum-crc32", header_value);
        }
    }
    if let Some(inner_8) = &input.checksum_crc32_c {
        let formatted_9 = inner_8.as_str();
        if !formatted_9.is_empty() {
            let header_value = formatted_9;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "checksum_crc32_c",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-checksum-crc32c", header_value);
        }
    }
    if let Some(inner_10) = &input.checksum_sha1 {
        let formatted_11 = inner_10.as_str();
        if !formatted_11.is_empty() {
            let header_value = formatted_11;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "checksum_sha1",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-checksum-sha1", header_value);
        }
    }
    if let Some(inner_12) = &input.checksum_sha256 {
        let formatted_13 = inner_12.as_str();
        if !formatted_13.is_empty() {
            let header_value = formatted_13;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "checksum_sha256",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-checksum-sha256", header_value);
        }
    }
    if let Some(inner_14) = &input.sse_customer_algorithm {
        let formatted_15 = inner_14.as_str();
        if !formatted_15.is_empty() {
            let header_value = formatted_15;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "sse_customer_algorithm",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header(
                "x-amz-server-side-encryption-customer-algorithm",
                header_value,
            );
        }
    }
    if let Some(inner_16) = &input.sse_customer_key {
        let formatted_17 = inner_16.as_str();
        if !formatted_17.is_empty() {
            let header_value = formatted_17;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "sse_customer_key",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &"*** Sensitive Data Redacted ***", err
                    ),
                )
            })?;
            builder = builder.header("x-amz-server-side-encryption-customer-key", header_value);
        }
    }
    if let Some(inner_18) = &input.sse_customer_key_md5 {
        let formatted_19 = inner_18.as_str();
        if !formatted_19.is_empty() {
            let header_value = formatted_19;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "sse_customer_key_md5",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header(
                "x-amz-server-side-encryption-customer-key-MD5",
                header_value,
            );
        }
    }
    if let Some(inner_20) = &input.request_payer {
        let formatted_21 = inner_20.as_str();
        if !formatted_21.is_empty() {
            let header_value = formatted_21;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "request_payer",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-request-payer", header_value);
        }
    }
    if let Some(inner_22) = &input.expected_bucket_owner {
        let formatted_23 = inner_22.as_str();
        if !formatted_23.is_empty() {
            let header_value = formatted_23;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "expected_bucket_owner",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-expected-bucket-owner", header_value);
        }
    }
    Ok(builder)
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_upload_part_http_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::upload_part::UploadPartOutput,
    crate::operation::upload_part::UploadPartError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response)
        .map_err(crate::operation::upload_part::UploadPartError::unhandled)?;
    generic_builder =
        crate::s3_request_id::apply_extended_request_id(generic_builder, response.headers());
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    Err(crate::operation::upload_part::UploadPartError::generic(
        generic,
    ))
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_upload_part_http_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::upload_part::UploadPartOutput,
    crate::operation::upload_part::UploadPartError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::operation::upload_part::builders::UploadPartOutputBuilder::default();
        let _ = response;
        output = output.set_bucket_key_enabled(
            crate::protocol_serde::shape_upload_part_output::de_bucket_key_enabled_header(response.headers())
                                    .map_err(|_|crate::operation::upload_part::UploadPartError::unhandled("Failed to parse BucketKeyEnabled from header `x-amz-server-side-encryption-bucket-key-enabled"))?
        );
        output = output.set_checksum_crc32(
            crate::protocol_serde::shape_upload_part_output::de_checksum_crc32_header(
                response.headers(),
            )
            .map_err(|_| {
                crate::operation::upload_part::UploadPartError::unhandled(
                    "Failed to parse ChecksumCRC32 from header `x-amz-checksum-crc32",
                )
            })?,
        );
        output = output.set_checksum_crc32_c(
            crate::protocol_serde::shape_upload_part_output::de_checksum_crc32_c_header(
                response.headers(),
            )
            .map_err(|_| {
                crate::operation::upload_part::UploadPartError::unhandled(
                    "Failed to parse ChecksumCRC32C from header `x-amz-checksum-crc32c",
                )
            })?,
        );
        output = output.set_checksum_sha1(
            crate::protocol_serde::shape_upload_part_output::de_checksum_sha1_header(
                response.headers(),
            )
            .map_err(|_| {
                crate::operation::upload_part::UploadPartError::unhandled(
                    "Failed to parse ChecksumSHA1 from header `x-amz-checksum-sha1",
                )
            })?,
        );
        output = output.set_checksum_sha256(
            crate::protocol_serde::shape_upload_part_output::de_checksum_sha256_header(
                response.headers(),
            )
            .map_err(|_| {
                crate::operation::upload_part::UploadPartError::unhandled(
                    "Failed to parse ChecksumSHA256 from header `x-amz-checksum-sha256",
                )
            })?,
        );
        output = output.set_e_tag(
            crate::protocol_serde::shape_upload_part_output::de_e_tag_header(response.headers())
                .map_err(|_| {
                    crate::operation::upload_part::UploadPartError::unhandled(
                        "Failed to parse ETag from header `ETag",
                    )
                })?,
        );
        output = output.set_request_charged(
            crate::protocol_serde::shape_upload_part_output::de_request_charged_header(
                response.headers(),
            )
            .map_err(|_| {
                crate::operation::upload_part::UploadPartError::unhandled(
                    "Failed to parse RequestCharged from header `x-amz-request-charged",
                )
            })?,
        );
        output = output.set_sse_customer_algorithm(
            crate::protocol_serde::shape_upload_part_output::de_sse_customer_algorithm_header(response.headers())
                                    .map_err(|_|crate::operation::upload_part::UploadPartError::unhandled("Failed to parse SSECustomerAlgorithm from header `x-amz-server-side-encryption-customer-algorithm"))?
        );
        output = output.set_sse_customer_key_md5(
            crate::protocol_serde::shape_upload_part_output::de_sse_customer_key_md5_header(response.headers())
                                    .map_err(|_|crate::operation::upload_part::UploadPartError::unhandled("Failed to parse SSECustomerKeyMD5 from header `x-amz-server-side-encryption-customer-key-MD5"))?
        );
        output = output.set_ssekms_key_id(
            crate::protocol_serde::shape_upload_part_output::de_ssekms_key_id_header(response.headers())
                                    .map_err(|_|crate::operation::upload_part::UploadPartError::unhandled("Failed to parse SSEKMSKeyId from header `x-amz-server-side-encryption-aws-kms-key-id"))?
        );
        output = output.set_server_side_encryption(
            crate::protocol_serde::shape_upload_part_output::de_server_side_encryption_header(response.headers())
                                    .map_err(|_|crate::operation::upload_part::UploadPartError::unhandled("Failed to parse ServerSideEncryption from header `x-amz-server-side-encryption"))?
        );
        output._set_extended_request_id(
            crate::s3_request_id::RequestIdExt::extended_request_id(response).map(str::to_string),
        );
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}
