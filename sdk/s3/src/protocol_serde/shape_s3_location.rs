// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_s3_location(
    input: &crate::types::S3Location,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_1) = &input.bucket_name {
        let mut inner_writer = scope.start_el("BucketName").finish();
        inner_writer.data(var_1.as_str());
    }
    if let Some(var_2) = &input.prefix {
        let mut inner_writer = scope.start_el("Prefix").finish();
        inner_writer.data(var_2.as_str());
    }
    if let Some(var_3) = &input.encryption {
        let inner_writer = scope.start_el("Encryption");
        crate::protocol_serde::shape_encryption::ser_encryption(var_3, inner_writer)?
    }
    if let Some(var_4) = &input.canned_acl {
        let mut inner_writer = scope.start_el("CannedACL").finish();
        inner_writer.data(var_4.as_str());
    }
    if let Some(var_5) = &input.access_control_list {
        let mut inner_writer = scope.start_el("AccessControlList").finish();
        for list_item_6 in var_5 {
            {
                let inner_writer = inner_writer.start_el("Grant");
                crate::protocol_serde::shape_grant::ser_grant(list_item_6, inner_writer)?
            }
        }
    }
    if let Some(var_7) = &input.tagging {
        let inner_writer = scope.start_el("Tagging");
        crate::protocol_serde::shape_tagging::ser_tagging(var_7, inner_writer)?
    }
    if let Some(var_8) = &input.user_metadata {
        let mut inner_writer = scope.start_el("UserMetadata").finish();
        for list_item_9 in var_8 {
            {
                let inner_writer = inner_writer.start_el("MetadataEntry");
                crate::protocol_serde::shape_metadata_entry::ser_metadata_entry(
                    list_item_9,
                    inner_writer,
                )?
            }
        }
    }
    if let Some(var_10) = &input.storage_class {
        let mut inner_writer = scope.start_el("StorageClass").finish();
        inner_writer.data(var_10.as_str());
    }
    scope.finish();
    Ok(())
}
