// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_write_get_object_response_headers(
    input: &crate::operation::write_get_object_response::WriteGetObjectResponseInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::error::BuildError> {
    if let Some(inner_1) = &input.request_route {
        let formatted_2 = inner_1.as_str();
        if !formatted_2.is_empty() {
            let header_value = formatted_2;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "request_route",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-request-route", header_value);
        }
    }
    if let Some(inner_3) = &input.request_token {
        let formatted_4 = inner_3.as_str();
        if !formatted_4.is_empty() {
            let header_value = formatted_4;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "request_token",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-request-token", header_value);
        }
    }
    if input.status_code != 0 {
        let mut encoder = aws_smithy_types::primitive::Encoder::from(input.status_code);
        let formatted_5 = encoder.encode();
        if !formatted_5.is_empty() {
            let header_value = formatted_5;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "status_code",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-fwd-status", header_value);
        }
    }
    if let Some(inner_6) = &input.error_code {
        let formatted_7 = inner_6.as_str();
        if !formatted_7.is_empty() {
            let header_value = formatted_7;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "error_code",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-fwd-error-code", header_value);
        }
    }
    if let Some(inner_8) = &input.error_message {
        let formatted_9 = inner_8.as_str();
        if !formatted_9.is_empty() {
            let header_value = formatted_9;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "error_message",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-fwd-error-message", header_value);
        }
    }
    if let Some(inner_10) = &input.accept_ranges {
        let formatted_11 = inner_10.as_str();
        if !formatted_11.is_empty() {
            let header_value = formatted_11;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "accept_ranges",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-fwd-header-accept-ranges", header_value);
        }
    }
    if let Some(inner_12) = &input.cache_control {
        let formatted_13 = inner_12.as_str();
        if !formatted_13.is_empty() {
            let header_value = formatted_13;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "cache_control",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-fwd-header-Cache-Control", header_value);
        }
    }
    if let Some(inner_14) = &input.content_disposition {
        let formatted_15 = inner_14.as_str();
        if !formatted_15.is_empty() {
            let header_value = formatted_15;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "content_disposition",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-fwd-header-Content-Disposition", header_value);
        }
    }
    if let Some(inner_16) = &input.content_encoding {
        let formatted_17 = inner_16.as_str();
        if !formatted_17.is_empty() {
            let header_value = formatted_17;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "content_encoding",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-fwd-header-Content-Encoding", header_value);
        }
    }
    if let Some(inner_18) = &input.content_language {
        let formatted_19 = inner_18.as_str();
        if !formatted_19.is_empty() {
            let header_value = formatted_19;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "content_language",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-fwd-header-Content-Language", header_value);
        }
    }
    if input.content_length != 0 {
        let mut encoder = aws_smithy_types::primitive::Encoder::from(input.content_length);
        let formatted_20 = encoder.encode();
        if !formatted_20.is_empty() {
            let header_value = formatted_20;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "content_length",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("Content-Length", header_value);
        }
    }
    if let Some(inner_21) = &input.content_range {
        let formatted_22 = inner_21.as_str();
        if !formatted_22.is_empty() {
            let header_value = formatted_22;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "content_range",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-fwd-header-Content-Range", header_value);
        }
    }
    if let Some(inner_23) = &input.content_type {
        let formatted_24 = inner_23.as_str();
        if !formatted_24.is_empty() {
            let header_value = formatted_24;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "content_type",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-fwd-header-Content-Type", header_value);
        }
    }
    if let Some(inner_25) = &input.checksum_crc32 {
        let formatted_26 = inner_25.as_str();
        if !formatted_26.is_empty() {
            let header_value = formatted_26;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "checksum_crc32",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-fwd-header-x-amz-checksum-crc32", header_value);
        }
    }
    if let Some(inner_27) = &input.checksum_crc32_c {
        let formatted_28 = inner_27.as_str();
        if !formatted_28.is_empty() {
            let header_value = formatted_28;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "checksum_crc32_c",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-fwd-header-x-amz-checksum-crc32c", header_value);
        }
    }
    if let Some(inner_29) = &input.checksum_sha1 {
        let formatted_30 = inner_29.as_str();
        if !formatted_30.is_empty() {
            let header_value = formatted_30;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "checksum_sha1",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-fwd-header-x-amz-checksum-sha1", header_value);
        }
    }
    if let Some(inner_31) = &input.checksum_sha256 {
        let formatted_32 = inner_31.as_str();
        if !formatted_32.is_empty() {
            let header_value = formatted_32;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "checksum_sha256",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-fwd-header-x-amz-checksum-sha256", header_value);
        }
    }
    if input.delete_marker {
        let mut encoder = aws_smithy_types::primitive::Encoder::from(input.delete_marker);
        let formatted_33 = encoder.encode();
        if !formatted_33.is_empty() {
            let header_value = formatted_33;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "delete_marker",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-fwd-header-x-amz-delete-marker", header_value);
        }
    }
    if let Some(inner_34) = &input.e_tag {
        let formatted_35 = inner_34.as_str();
        if !formatted_35.is_empty() {
            let header_value = formatted_35;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "e_tag",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-fwd-header-ETag", header_value);
        }
    }
    if let Some(inner_36) = &input.expires {
        let formatted_37 = inner_36.fmt(aws_smithy_types::date_time::Format::HttpDate)?;
        if !formatted_37.is_empty() {
            let header_value = formatted_37;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "expires",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-fwd-header-Expires", header_value);
        }
    }
    if let Some(inner_38) = &input.expiration {
        let formatted_39 = inner_38.as_str();
        if !formatted_39.is_empty() {
            let header_value = formatted_39;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "expiration",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-fwd-header-x-amz-expiration", header_value);
        }
    }
    if let Some(inner_40) = &input.last_modified {
        let formatted_41 = inner_40.fmt(aws_smithy_types::date_time::Format::HttpDate)?;
        if !formatted_41.is_empty() {
            let header_value = formatted_41;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "last_modified",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-fwd-header-Last-Modified", header_value);
        }
    }
    if input.missing_meta != 0 {
        let mut encoder = aws_smithy_types::primitive::Encoder::from(input.missing_meta);
        let formatted_42 = encoder.encode();
        if !formatted_42.is_empty() {
            let header_value = formatted_42;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "missing_meta",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-fwd-header-x-amz-missing-meta", header_value);
        }
    }
    if let Some(inner_43) = &input.object_lock_mode {
        let formatted_44 = inner_43.as_str();
        if !formatted_44.is_empty() {
            let header_value = formatted_44;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "object_lock_mode",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-fwd-header-x-amz-object-lock-mode", header_value);
        }
    }
    if let Some(inner_45) = &input.object_lock_legal_hold_status {
        let formatted_46 = inner_45.as_str();
        if !formatted_46.is_empty() {
            let header_value = formatted_46;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "object_lock_legal_hold_status",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header(
                "x-amz-fwd-header-x-amz-object-lock-legal-hold",
                header_value,
            );
        }
    }
    if let Some(inner_47) = &input.object_lock_retain_until_date {
        let formatted_48 = inner_47.fmt(aws_smithy_types::date_time::Format::DateTime)?;
        if !formatted_48.is_empty() {
            let header_value = formatted_48;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "object_lock_retain_until_date",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header(
                "x-amz-fwd-header-x-amz-object-lock-retain-until-date",
                header_value,
            );
        }
    }
    if input.parts_count != 0 {
        let mut encoder = aws_smithy_types::primitive::Encoder::from(input.parts_count);
        let formatted_49 = encoder.encode();
        if !formatted_49.is_empty() {
            let header_value = formatted_49;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "parts_count",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-fwd-header-x-amz-mp-parts-count", header_value);
        }
    }
    if let Some(inner_50) = &input.replication_status {
        let formatted_51 = inner_50.as_str();
        if !formatted_51.is_empty() {
            let header_value = formatted_51;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "replication_status",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-fwd-header-x-amz-replication-status", header_value);
        }
    }
    if let Some(inner_52) = &input.request_charged {
        let formatted_53 = inner_52.as_str();
        if !formatted_53.is_empty() {
            let header_value = formatted_53;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "request_charged",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-fwd-header-x-amz-request-charged", header_value);
        }
    }
    if let Some(inner_54) = &input.restore {
        let formatted_55 = inner_54.as_str();
        if !formatted_55.is_empty() {
            let header_value = formatted_55;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "restore",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-fwd-header-x-amz-restore", header_value);
        }
    }
    if let Some(inner_56) = &input.server_side_encryption {
        let formatted_57 = inner_56.as_str();
        if !formatted_57.is_empty() {
            let header_value = formatted_57;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "server_side_encryption",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header(
                "x-amz-fwd-header-x-amz-server-side-encryption",
                header_value,
            );
        }
    }
    if let Some(inner_58) = &input.sse_customer_algorithm {
        let formatted_59 = inner_58.as_str();
        if !formatted_59.is_empty() {
            let header_value = formatted_59;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "sse_customer_algorithm",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header(
                "x-amz-fwd-header-x-amz-server-side-encryption-customer-algorithm",
                header_value,
            );
        }
    }
    if let Some(inner_60) = &input.ssekms_key_id {
        let formatted_61 = inner_60.as_str();
        if !formatted_61.is_empty() {
            let header_value = formatted_61;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "ssekms_key_id",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &"*** Sensitive Data Redacted ***", err
                    ),
                )
            })?;
            builder = builder.header(
                "x-amz-fwd-header-x-amz-server-side-encryption-aws-kms-key-id",
                header_value,
            );
        }
    }
    if let Some(inner_62) = &input.sse_customer_key_md5 {
        let formatted_63 = inner_62.as_str();
        if !formatted_63.is_empty() {
            let header_value = formatted_63;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "sse_customer_key_md5",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header(
                "x-amz-fwd-header-x-amz-server-side-encryption-customer-key-MD5",
                header_value,
            );
        }
    }
    if let Some(inner_64) = &input.storage_class {
        let formatted_65 = inner_64.as_str();
        if !formatted_65.is_empty() {
            let header_value = formatted_65;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "storage_class",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-fwd-header-x-amz-storage-class", header_value);
        }
    }
    if input.tag_count != 0 {
        let mut encoder = aws_smithy_types::primitive::Encoder::from(input.tag_count);
        let formatted_66 = encoder.encode();
        if !formatted_66.is_empty() {
            let header_value = formatted_66;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "tag_count",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-fwd-header-x-amz-tagging-count", header_value);
        }
    }
    if let Some(inner_67) = &input.version_id {
        let formatted_68 = inner_67.as_str();
        if !formatted_68.is_empty() {
            let header_value = formatted_68;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "version_id",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-fwd-header-x-amz-version-id", header_value);
        }
    }
    if input.bucket_key_enabled {
        let mut encoder = aws_smithy_types::primitive::Encoder::from(input.bucket_key_enabled);
        let formatted_69 = encoder.encode();
        if !formatted_69.is_empty() {
            let header_value = formatted_69;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "bucket_key_enabled",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header(
                "x-amz-fwd-header-x-amz-server-side-encryption-bucket-key-enabled",
                header_value,
            );
        }
    }
    if let Some(inner_70) = &input.metadata {
        {
            for (k, v) in inner_70 {
                use std::str::FromStr;
                let header_name =
                    http::header::HeaderName::from_str(&format!("{}{}", "x-amz-meta-", &k))
                        .map_err(|err| {
                            aws_smithy_http::operation::error::BuildError::invalid_field(
                                "metadata",
                                format!("`{k}` cannot be used as a header name: {err}"),
                            )
                        })?;
                let header_value = v.as_str();
                let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                    aws_smithy_http::operation::error::BuildError::invalid_field(
                        "metadata",
                        format!("`{}` cannot be used as a header value: {}", v, err),
                    )
                })?;
                builder = builder.header(header_name, header_value);
            }
        }
    }
    Ok(builder)
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_write_get_object_response_http_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::write_get_object_response::WriteGetObjectResponseOutput,
    crate::operation::write_get_object_response::WriteGetObjectResponseError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response).map_err(
        crate::operation::write_get_object_response::WriteGetObjectResponseError::unhandled,
    )?;
    generic_builder =
        crate::s3_request_id::apply_extended_request_id(generic_builder, response.headers());
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    Err(crate::operation::write_get_object_response::WriteGetObjectResponseError::generic(generic))
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_write_get_object_response_http_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::write_get_object_response::WriteGetObjectResponseOutput,
    crate::operation::write_get_object_response::WriteGetObjectResponseError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::write_get_object_response::builders::WriteGetObjectResponseOutputBuilder::default();
        let _ = response;
        output._set_extended_request_id(
            crate::s3_request_id::RequestIdExt::extended_request_id(response).map(str::to_string),
        );
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}
