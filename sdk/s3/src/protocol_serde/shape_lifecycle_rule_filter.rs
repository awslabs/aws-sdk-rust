// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_lifecycle_rule_filter(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::LifecycleRuleFilter, aws_smithy_xml::decode::XmlDecodeError> {
    let mut base: Option<crate::types::LifecycleRuleFilter> = None;
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Prefix") /* Prefix com.amazonaws.s3#LifecycleRuleFilter$Prefix */ =>  {
                let tmp =
                    Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                        aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                ;
                base = Some(crate::types::LifecycleRuleFilter::Prefix(tmp));
            }
            ,
            s if s.matches("Tag") /* Tag com.amazonaws.s3#LifecycleRuleFilter$Tag */ =>  {
                let tmp =
                    crate::protocol_serde::shape_tag::de_tag(&mut tag)
                    ?
                ;
                base = Some(crate::types::LifecycleRuleFilter::Tag(tmp));
            }
            ,
            s if s.matches("ObjectSizeGreaterThan") /* ObjectSizeGreaterThan com.amazonaws.s3#LifecycleRuleFilter$ObjectSizeGreaterThan */ =>  {
                let tmp =
                     {
                        <i64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (long: `com.amazonaws.s3#ObjectSizeGreaterThanBytes`)"))
                    }
                    ?
                ;
                base = Some(crate::types::LifecycleRuleFilter::ObjectSizeGreaterThan(tmp));
            }
            ,
            s if s.matches("ObjectSizeLessThan") /* ObjectSizeLessThan com.amazonaws.s3#LifecycleRuleFilter$ObjectSizeLessThan */ =>  {
                let tmp =
                     {
                        <i64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (long: `com.amazonaws.s3#ObjectSizeLessThanBytes`)"))
                    }
                    ?
                ;
                base = Some(crate::types::LifecycleRuleFilter::ObjectSizeLessThan(tmp));
            }
            ,
            s if s.matches("And") /* And com.amazonaws.s3#LifecycleRuleFilter$And */ =>  {
                let tmp =
                    crate::protocol_serde::shape_lifecycle_rule_and_operator::de_lifecycle_rule_and_operator(&mut tag)
                    ?
                ;
                base = Some(crate::types::LifecycleRuleFilter::And(tmp));
            }
            ,
            _unknown => base = Some(crate::types::LifecycleRuleFilter::Unknown),
        }
    }
    base.ok_or_else(|| {
        aws_smithy_xml::decode::XmlDecodeError::custom("expected union, got nothing")
    })
}

pub fn ser_lifecycle_rule_filter(
    input: &crate::types::LifecycleRuleFilter,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    let mut scope_writer = writer.finish();
    match input {
        crate::types::LifecycleRuleFilter::Prefix(inner) => {
            let mut inner_writer = scope_writer.start_el("Prefix").finish();
            inner_writer.data(inner.as_str());
        }
        crate::types::LifecycleRuleFilter::Tag(inner) => {
            let inner_writer = scope_writer.start_el("Tag");
            crate::protocol_serde::shape_tag::ser_tag(inner, inner_writer)?
        }
        crate::types::LifecycleRuleFilter::ObjectSizeGreaterThan(inner) => {
            let mut inner_writer = scope_writer.start_el("ObjectSizeGreaterThan").finish();
            inner_writer.data(aws_smithy_types::primitive::Encoder::from(*inner).encode());
        }
        crate::types::LifecycleRuleFilter::ObjectSizeLessThan(inner) => {
            let mut inner_writer = scope_writer.start_el("ObjectSizeLessThan").finish();
            inner_writer.data(aws_smithy_types::primitive::Encoder::from(*inner).encode());
        }
        crate::types::LifecycleRuleFilter::And(inner) => {
            let inner_writer = scope_writer.start_el("And");
            crate::protocol_serde::shape_lifecycle_rule_and_operator::ser_lifecycle_rule_and_operator(inner, inner_writer)?
        }
        crate::types::LifecycleRuleFilter::Unknown => {
            return Err(
                aws_smithy_http::operation::error::SerializationError::unknown_variant(
                    "LifecycleRuleFilter",
                ),
            )
        }
    }
    Ok(())
}
