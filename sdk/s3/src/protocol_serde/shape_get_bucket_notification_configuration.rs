// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_get_bucket_notification_configuration_headers(
    input: &crate::operation::get_bucket_notification_configuration::GetBucketNotificationConfigurationInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::error::BuildError> {
    if let Some(inner_1) = &input.expected_bucket_owner {
        let formatted_2 = inner_1.as_str();
        if !formatted_2.is_empty() {
            let header_value = formatted_2;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "expected_bucket_owner",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-expected-bucket-owner", header_value);
        }
    }
    Ok(builder)
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_get_bucket_notification_configuration_http_error(response: &http::Response<bytes::Bytes>) -> std::result::Result<crate::operation::get_bucket_notification_configuration::GetBucketNotificationConfigurationOutput, crate::operation::get_bucket_notification_configuration::GetBucketNotificationConfigurationError>{
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response).map_err(crate::operation::get_bucket_notification_configuration::GetBucketNotificationConfigurationError::unhandled)?;
    generic_builder =
        crate::s3_request_id::apply_extended_request_id(generic_builder, response.headers());
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    Err(crate::operation::get_bucket_notification_configuration::GetBucketNotificationConfigurationError::generic(generic))
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_get_bucket_notification_configuration_http_response(response: &http::Response<bytes::Bytes>) -> std::result::Result<crate::operation::get_bucket_notification_configuration::GetBucketNotificationConfigurationOutput, crate::operation::get_bucket_notification_configuration::GetBucketNotificationConfigurationError>{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::get_bucket_notification_configuration::builders::GetBucketNotificationConfigurationOutputBuilder::default();
        let _ = response;
        output = crate::protocol_serde::shape_get_bucket_notification_configuration::de_get_bucket_notification_configuration(response.body().as_ref(), output).map_err(crate::operation::get_bucket_notification_configuration::GetBucketNotificationConfigurationError::unhandled)?;
        output._set_extended_request_id(
            crate::s3_request_id::RequestIdExt::extended_request_id(response).map(str::to_string),
        );
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(unused_mut)]
pub fn de_get_bucket_notification_configuration(inp: &[u8], mut builder: crate::operation::get_bucket_notification_configuration::builders::GetBucketNotificationConfigurationOutputBuilder) -> Result<crate::operation::get_bucket_notification_configuration::builders::GetBucketNotificationConfigurationOutputBuilder, aws_smithy_xml::decode::XmlDecodeError>{
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    #[allow(unused_variables)]
    let start_el = decoder.start_el();
    if !start_el.matches("NotificationConfiguration") {
        return Err(
                                aws_smithy_xml::decode::XmlDecodeError::custom(
                                    format!("encountered invalid XML root: expected NotificationConfiguration but got {:?}. This is likely a bug in the SDK.", start_el)
                                )
                            );
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("CloudFunctionConfiguration") /* LambdaFunctionConfigurations com.amazonaws.s3.synthetic#GetBucketNotificationConfigurationOutput$LambdaFunctionConfigurations */ =>  {
                let var_3 =
                    Some(
                        Result::<std::vec::Vec<crate::types::LambdaFunctionConfiguration>, aws_smithy_xml::decode::XmlDecodeError>::Ok({
                            let mut list_4 = builder.lambda_function_configurations.take().unwrap_or_default();
                            list_4.push(
                                crate::protocol_serde::shape_lambda_function_configuration::de_lambda_function_configuration(&mut tag)
                                ?
                            );
                            list_4
                        })
                        ?
                    )
                ;
                builder = builder.set_lambda_function_configurations(var_3);
            }
            ,
            s if s.matches("TopicConfiguration") /* TopicConfigurations com.amazonaws.s3.synthetic#GetBucketNotificationConfigurationOutput$TopicConfigurations */ =>  {
                let var_5 =
                    Some(
                        Result::<std::vec::Vec<crate::types::TopicConfiguration>, aws_smithy_xml::decode::XmlDecodeError>::Ok({
                            let mut list_6 = builder.topic_configurations.take().unwrap_or_default();
                            list_6.push(
                                crate::protocol_serde::shape_topic_configuration::de_topic_configuration(&mut tag)
                                ?
                            );
                            list_6
                        })
                        ?
                    )
                ;
                builder = builder.set_topic_configurations(var_5);
            }
            ,
            s if s.matches("QueueConfiguration") /* QueueConfigurations com.amazonaws.s3.synthetic#GetBucketNotificationConfigurationOutput$QueueConfigurations */ =>  {
                let var_7 =
                    Some(
                        Result::<std::vec::Vec<crate::types::QueueConfiguration>, aws_smithy_xml::decode::XmlDecodeError>::Ok({
                            let mut list_8 = builder.queue_configurations.take().unwrap_or_default();
                            list_8.push(
                                crate::protocol_serde::shape_queue_configuration::de_queue_configuration(&mut tag)
                                ?
                            );
                            list_8
                        })
                        ?
                    )
                ;
                builder = builder.set_queue_configurations(var_7);
            }
            ,
            s if s.matches("EventBridgeConfiguration") /* EventBridgeConfiguration com.amazonaws.s3.synthetic#GetBucketNotificationConfigurationOutput$EventBridgeConfiguration */ =>  {
                let var_9 =
                    Some(
                        crate::protocol_serde::shape_event_bridge_configuration::de_event_bridge_configuration(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_event_bridge_configuration(var_9);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}
