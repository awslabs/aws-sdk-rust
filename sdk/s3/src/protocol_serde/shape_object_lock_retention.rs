// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_object_lock_retention(
    input: &crate::types::ObjectLockRetention,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_1) = &input.mode {
        let mut inner_writer = scope.start_el("Mode").finish();
        inner_writer.data(var_1.as_str());
    }
    if let Some(var_2) = &input.retain_until_date {
        let mut inner_writer = scope.start_el("RetainUntilDate").finish();
        inner_writer.data(
            var_2
                .fmt(aws_smithy_types::date_time::Format::DateTimeWithOffset)?
                .as_ref(),
        );
    }
    scope.finish();
    Ok(())
}

pub fn de_object_lock_retention(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::ObjectLockRetention, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::ObjectLockRetention::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Mode") /* Mode com.amazonaws.s3#ObjectLockRetention$Mode */ =>  {
                let var_3 =
                    Some(
                        Result::<crate::types::ObjectLockRetentionMode, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::ObjectLockRetentionMode::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_mode(var_3);
            }
            ,
            s if s.matches("RetainUntilDate") /* RetainUntilDate com.amazonaws.s3#ObjectLockRetention$RetainUntilDate */ =>  {
                let var_4 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.s3#Date`)"))
                        ?
                    )
                ;
                builder = builder.set_retain_until_date(var_4);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
