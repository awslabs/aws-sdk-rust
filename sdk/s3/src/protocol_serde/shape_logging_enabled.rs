// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_logging_enabled(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::LoggingEnabled, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::LoggingEnabled::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("TargetBucket") /* TargetBucket com.amazonaws.s3#LoggingEnabled$TargetBucket */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_target_bucket(var_1);
            }
            ,
            s if s.matches("TargetGrants") /* TargetGrants com.amazonaws.s3#LoggingEnabled$TargetGrants */ =>  {
                let var_2 =
                    Some(
                        crate::protocol_serde::shape_target_grants::de_target_grants(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_target_grants(var_2);
            }
            ,
            s if s.matches("TargetPrefix") /* TargetPrefix com.amazonaws.s3#LoggingEnabled$TargetPrefix */ =>  {
                let var_3 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_target_prefix(var_3);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn ser_logging_enabled(
    input: &crate::types::LoggingEnabled,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_4) = &input.target_bucket {
        let mut inner_writer = scope.start_el("TargetBucket").finish();
        inner_writer.data(var_4.as_str());
    }
    if let Some(var_5) = &input.target_grants {
        let mut inner_writer = scope.start_el("TargetGrants").finish();
        for list_item_6 in var_5 {
            {
                let inner_writer = inner_writer.start_el("Grant");
                crate::protocol_serde::shape_target_grant::ser_target_grant(
                    list_item_6,
                    inner_writer,
                )?
            }
        }
    }
    if let Some(var_7) = &input.target_prefix {
        let mut inner_writer = scope.start_el("TargetPrefix").finish();
        inner_writer.data(var_7.as_str());
    }
    scope.finish();
    Ok(())
}
