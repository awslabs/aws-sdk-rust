// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_get_object_attributes_headers(
    input: &crate::operation::get_object_attributes::GetObjectAttributesInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::error::BuildError> {
    if input.max_parts != 0 {
        let mut encoder = aws_smithy_types::primitive::Encoder::from(input.max_parts);
        let formatted_1 = encoder.encode();
        if !formatted_1.is_empty() {
            let header_value = formatted_1;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "max_parts",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-max-parts", header_value);
        }
    }
    if let Some(inner_2) = &input.part_number_marker {
        let formatted_3 = inner_2.as_str();
        if !formatted_3.is_empty() {
            let header_value = formatted_3;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "part_number_marker",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-part-number-marker", header_value);
        }
    }
    if let Some(inner_4) = &input.sse_customer_algorithm {
        let formatted_5 = inner_4.as_str();
        if !formatted_5.is_empty() {
            let header_value = formatted_5;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "sse_customer_algorithm",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header(
                "x-amz-server-side-encryption-customer-algorithm",
                header_value,
            );
        }
    }
    if let Some(inner_6) = &input.sse_customer_key {
        let formatted_7 = inner_6.as_str();
        if !formatted_7.is_empty() {
            let header_value = formatted_7;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "sse_customer_key",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &"*** Sensitive Data Redacted ***", err
                    ),
                )
            })?;
            builder = builder.header("x-amz-server-side-encryption-customer-key", header_value);
        }
    }
    if let Some(inner_8) = &input.sse_customer_key_md5 {
        let formatted_9 = inner_8.as_str();
        if !formatted_9.is_empty() {
            let header_value = formatted_9;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "sse_customer_key_md5",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header(
                "x-amz-server-side-encryption-customer-key-MD5",
                header_value,
            );
        }
    }
    if let Some(inner_10) = &input.request_payer {
        let formatted_11 = inner_10.as_str();
        if !formatted_11.is_empty() {
            let header_value = formatted_11;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "request_payer",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-request-payer", header_value);
        }
    }
    if let Some(inner_12) = &input.expected_bucket_owner {
        let formatted_13 = inner_12.as_str();
        if !formatted_13.is_empty() {
            let header_value = formatted_13;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "expected_bucket_owner",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-expected-bucket-owner", header_value);
        }
    }
    if let Some(inner_14) = &input.object_attributes {
        for inner_15 in inner_14 {
            let formatted_16 = aws_smithy_http::header::quote_header_value(inner_15.as_str());
            if !formatted_16.is_empty() {
                let header_value = formatted_16;
                let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                    aws_smithy_http::operation::error::BuildError::invalid_field(
                        "object_attributes",
                        format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    )
                })?;
                builder = builder.header("x-amz-object-attributes", header_value);
            }
        }
    }
    Ok(builder)
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_get_object_attributes_http_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::get_object_attributes::GetObjectAttributesOutput,
    crate::operation::get_object_attributes::GetObjectAttributesError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response)
        .map_err(crate::operation::get_object_attributes::GetObjectAttributesError::unhandled)?;
    generic_builder =
        crate::s3_request_id::apply_extended_request_id(generic_builder, response.headers());
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(
                crate::operation::get_object_attributes::GetObjectAttributesError::unhandled(
                    generic,
                ),
            )
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "NoSuchKey" => {
            crate::operation::get_object_attributes::GetObjectAttributesError::NoSuchKey({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::NoSuchKeyBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_no_such_key::de_no_such_key_xml_err(response.body().as_ref(), output).map_err(crate::operation::get_object_attributes::GetObjectAttributesError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::operation::get_object_attributes::GetObjectAttributesError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_get_object_attributes_http_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::get_object_attributes::GetObjectAttributesOutput,
    crate::operation::get_object_attributes::GetObjectAttributesError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::get_object_attributes::builders::GetObjectAttributesOutputBuilder::default();
        let _ = response;
        output = crate::protocol_serde::shape_get_object_attributes::de_get_object_attributes(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::operation::get_object_attributes::GetObjectAttributesError::unhandled)?;
        output = output.set_delete_marker(
            crate::protocol_serde::shape_get_object_attributes_output::de_delete_marker_header(
                response.headers(),
            )
            .map_err(|_| {
                crate::operation::get_object_attributes::GetObjectAttributesError::unhandled(
                    "Failed to parse DeleteMarker from header `x-amz-delete-marker",
                )
            })?,
        );
        output = output.set_last_modified(
            crate::protocol_serde::shape_get_object_attributes_output::de_last_modified_header(
                response.headers(),
            )
            .map_err(|_| {
                crate::operation::get_object_attributes::GetObjectAttributesError::unhandled(
                    "Failed to parse LastModified from header `Last-Modified",
                )
            })?,
        );
        output = output.set_request_charged(
            crate::protocol_serde::shape_get_object_attributes_output::de_request_charged_header(
                response.headers(),
            )
            .map_err(|_| {
                crate::operation::get_object_attributes::GetObjectAttributesError::unhandled(
                    "Failed to parse RequestCharged from header `x-amz-request-charged",
                )
            })?,
        );
        output = output.set_version_id(
            crate::protocol_serde::shape_get_object_attributes_output::de_version_id_header(
                response.headers(),
            )
            .map_err(|_| {
                crate::operation::get_object_attributes::GetObjectAttributesError::unhandled(
                    "Failed to parse VersionId from header `x-amz-version-id",
                )
            })?,
        );
        output._set_extended_request_id(
            crate::s3_request_id::RequestIdExt::extended_request_id(response).map(str::to_string),
        );
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(unused_mut)]
pub fn de_get_object_attributes(
    inp: &[u8],
    mut builder: crate::operation::get_object_attributes::builders::GetObjectAttributesOutputBuilder,
) -> Result<
    crate::operation::get_object_attributes::builders::GetObjectAttributesOutputBuilder,
    aws_smithy_xml::decode::XmlDecodeError,
> {
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    #[allow(unused_variables)]
    let start_el = decoder.start_el();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ETag") /* ETag com.amazonaws.s3.synthetic#GetObjectAttributesOutput$ETag */ =>  {
                let var_17 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_e_tag(var_17);
            }
            ,
            s if s.matches("Checksum") /* Checksum com.amazonaws.s3.synthetic#GetObjectAttributesOutput$Checksum */ =>  {
                let var_18 =
                    Some(
                        crate::protocol_serde::shape_checksum::de_checksum(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_checksum(var_18);
            }
            ,
            s if s.matches("StorageClass") /* StorageClass com.amazonaws.s3.synthetic#GetObjectAttributesOutput$StorageClass */ =>  {
                let var_19 =
                    Some(
                        Result::<crate::types::StorageClass, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::StorageClass::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_storage_class(var_19);
            }
            ,
            s if s.matches("ObjectSize") /* ObjectSize com.amazonaws.s3.synthetic#GetObjectAttributesOutput$ObjectSize */ =>  {
                let var_20 =
                    Some(
                         {
                            <i64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (long: `com.amazonaws.s3#ObjectSize`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_object_size(var_20);
            }
            ,
            s if s.matches("ObjectParts") /* ObjectParts com.amazonaws.s3.synthetic#GetObjectAttributesOutput$ObjectParts */ =>  {
                let var_21 =
                    Some(
                        crate::protocol_serde::shape_get_object_attributes_parts::de_get_object_attributes_parts(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_object_parts(var_21);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}
