// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_payload_complete_multipart_upload_input(
    payload: &std::option::Option<crate::model::CompletedMultipartUpload>,
) -> Result<smithy_http::body::SdkBody, smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => return Ok(smithy_http::body::SdkBody::from("")),
    };
    #[allow(clippy::useless_conversion)]
    Ok(smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_complete_multipart_upload_input_multipart_upload(&payload)
            .map_err(|err| smithy_http::operation::BuildError::SerializationError(err.into()))?,
    ))
}

pub fn ser_payload_create_bucket_input(
    payload: &std::option::Option<crate::model::CreateBucketConfiguration>,
) -> Result<smithy_http::body::SdkBody, smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => return Ok(smithy_http::body::SdkBody::from("")),
    };
    #[allow(clippy::useless_conversion)]
    Ok(smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_create_bucket_input_create_bucket_configuration(&payload)
            .map_err(|err| smithy_http::operation::BuildError::SerializationError(err.into()))?,
    ))
}

pub fn ser_payload_delete_objects_input(
    payload: &std::option::Option<crate::model::Delete>,
) -> Result<smithy_http::body::SdkBody, smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => return Ok(smithy_http::body::SdkBody::from("")),
    };
    #[allow(clippy::useless_conversion)]
    Ok(smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_delete_objects_input_delete(&payload)
            .map_err(|err| smithy_http::operation::BuildError::SerializationError(err.into()))?,
    ))
}

pub fn ser_payload_put_bucket_accelerate_configuration_input(
    payload: &std::option::Option<crate::model::AccelerateConfiguration>,
) -> Result<smithy_http::body::SdkBody, smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => return Ok(smithy_http::body::SdkBody::from("")),
    };
    #[allow(clippy::useless_conversion)]Ok(smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_put_bucket_accelerate_configuration_input_accelerate_configuration(&payload).map_err(|err|smithy_http::operation::BuildError::SerializationError(err.into()))?
    ))
}

pub fn ser_payload_put_bucket_acl_input(
    payload: &std::option::Option<crate::model::AccessControlPolicy>,
) -> Result<smithy_http::body::SdkBody, smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => return Ok(smithy_http::body::SdkBody::from("")),
    };
    #[allow(clippy::useless_conversion)]
    Ok(smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_put_bucket_acl_input_access_control_policy(&payload)
            .map_err(|err| smithy_http::operation::BuildError::SerializationError(err.into()))?,
    ))
}

pub fn ser_payload_put_bucket_analytics_configuration_input(
    payload: &std::option::Option<crate::model::AnalyticsConfiguration>,
) -> Result<smithy_http::body::SdkBody, smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => return Ok(smithy_http::body::SdkBody::from("")),
    };
    #[allow(clippy::useless_conversion)]Ok(smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_put_bucket_analytics_configuration_input_analytics_configuration(&payload).map_err(|err|smithy_http::operation::BuildError::SerializationError(err.into()))?
    ))
}

pub fn ser_payload_put_bucket_cors_input(
    payload: &std::option::Option<crate::model::CORSConfiguration>,
) -> Result<smithy_http::body::SdkBody, smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => return Ok(smithy_http::body::SdkBody::from("")),
    };
    #[allow(clippy::useless_conversion)]
    Ok(smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_put_bucket_cors_input_cors_configuration(&payload)
            .map_err(|err| smithy_http::operation::BuildError::SerializationError(err.into()))?,
    ))
}

pub fn ser_payload_put_bucket_encryption_input(
    payload: &std::option::Option<crate::model::ServerSideEncryptionConfiguration>,
) -> Result<smithy_http::body::SdkBody, smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => return Ok(smithy_http::body::SdkBody::from("")),
    };
    #[allow(clippy::useless_conversion)]Ok(smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_put_bucket_encryption_input_server_side_encryption_configuration(&payload).map_err(|err|smithy_http::operation::BuildError::SerializationError(err.into()))?
    ))
}

pub fn ser_payload_put_bucket_intelligent_tiering_configuration_input(
    payload: &std::option::Option<crate::model::IntelligentTieringConfiguration>,
) -> Result<smithy_http::body::SdkBody, smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => return Ok(smithy_http::body::SdkBody::from("")),
    };
    #[allow(clippy::useless_conversion)]Ok(smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_put_bucket_intelligent_tiering_configuration_input_intelligent_tiering_configuration(&payload).map_err(|err|smithy_http::operation::BuildError::SerializationError(err.into()))?
    ))
}

pub fn ser_payload_put_bucket_inventory_configuration_input(
    payload: &std::option::Option<crate::model::InventoryConfiguration>,
) -> Result<smithy_http::body::SdkBody, smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => return Ok(smithy_http::body::SdkBody::from("")),
    };
    #[allow(clippy::useless_conversion)]Ok(smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_put_bucket_inventory_configuration_input_inventory_configuration(&payload).map_err(|err|smithy_http::operation::BuildError::SerializationError(err.into()))?
    ))
}

pub fn ser_payload_put_bucket_lifecycle_configuration_input(
    payload: &std::option::Option<crate::model::BucketLifecycleConfiguration>,
) -> Result<smithy_http::body::SdkBody, smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => return Ok(smithy_http::body::SdkBody::from("")),
    };
    #[allow(clippy::useless_conversion)]Ok(smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_put_bucket_lifecycle_configuration_input_lifecycle_configuration(&payload).map_err(|err|smithy_http::operation::BuildError::SerializationError(err.into()))?
    ))
}

pub fn ser_payload_put_bucket_logging_input(
    payload: &std::option::Option<crate::model::BucketLoggingStatus>,
) -> Result<smithy_http::body::SdkBody, smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => return Ok(smithy_http::body::SdkBody::from("")),
    };
    #[allow(clippy::useless_conversion)]
    Ok(smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_put_bucket_logging_input_bucket_logging_status(&payload)
            .map_err(|err| smithy_http::operation::BuildError::SerializationError(err.into()))?,
    ))
}

pub fn ser_payload_put_bucket_metrics_configuration_input(
    payload: &std::option::Option<crate::model::MetricsConfiguration>,
) -> Result<smithy_http::body::SdkBody, smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => return Ok(smithy_http::body::SdkBody::from("")),
    };
    #[allow(clippy::useless_conversion)]Ok(smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_put_bucket_metrics_configuration_input_metrics_configuration(&payload).map_err(|err|smithy_http::operation::BuildError::SerializationError(err.into()))?
    ))
}

pub fn ser_payload_put_bucket_notification_configuration_input(
    payload: &std::option::Option<crate::model::NotificationConfiguration>,
) -> Result<smithy_http::body::SdkBody, smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => return Ok(smithy_http::body::SdkBody::from("")),
    };
    #[allow(clippy::useless_conversion)]Ok(smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_put_bucket_notification_configuration_input_notification_configuration(&payload).map_err(|err|smithy_http::operation::BuildError::SerializationError(err.into()))?
    ))
}

pub fn ser_payload_put_bucket_ownership_controls_input(
    payload: &std::option::Option<crate::model::OwnershipControls>,
) -> Result<smithy_http::body::SdkBody, smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => return Ok(smithy_http::body::SdkBody::from("")),
    };
    #[allow(clippy::useless_conversion)]
    Ok(smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_put_bucket_ownership_controls_input_ownership_controls(
            &payload,
        )
        .map_err(|err| smithy_http::operation::BuildError::SerializationError(err.into()))?,
    ))
}

pub fn ser_payload_put_bucket_policy_input(
    payload: &std::option::Option<std::string::String>,
) -> Result<smithy_http::body::SdkBody, smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => return Ok(smithy_http::body::SdkBody::from("")),
    };
    #[allow(clippy::useless_conversion)]
    Ok(smithy_http::body::SdkBody::from(payload.to_string()))
}

pub fn ser_payload_put_bucket_replication_input(
    payload: &std::option::Option<crate::model::ReplicationConfiguration>,
) -> Result<smithy_http::body::SdkBody, smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => return Ok(smithy_http::body::SdkBody::from("")),
    };
    #[allow(clippy::useless_conversion)]
    Ok(smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_put_bucket_replication_input_replication_configuration(
            &payload,
        )
        .map_err(|err| smithy_http::operation::BuildError::SerializationError(err.into()))?,
    ))
}

pub fn ser_payload_put_bucket_request_payment_input(
    payload: &std::option::Option<crate::model::RequestPaymentConfiguration>,
) -> Result<smithy_http::body::SdkBody, smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => return Ok(smithy_http::body::SdkBody::from("")),
    };
    #[allow(clippy::useless_conversion)]Ok(smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_put_bucket_request_payment_input_request_payment_configuration(&payload).map_err(|err|smithy_http::operation::BuildError::SerializationError(err.into()))?
    ))
}

pub fn ser_payload_put_bucket_tagging_input(
    payload: &std::option::Option<crate::model::Tagging>,
) -> Result<smithy_http::body::SdkBody, smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => return Ok(smithy_http::body::SdkBody::from("")),
    };
    #[allow(clippy::useless_conversion)]
    Ok(smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_put_bucket_tagging_input_tagging(&payload)
            .map_err(|err| smithy_http::operation::BuildError::SerializationError(err.into()))?,
    ))
}

pub fn ser_payload_put_bucket_versioning_input(
    payload: &std::option::Option<crate::model::VersioningConfiguration>,
) -> Result<smithy_http::body::SdkBody, smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => return Ok(smithy_http::body::SdkBody::from("")),
    };
    #[allow(clippy::useless_conversion)]
    Ok(smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_put_bucket_versioning_input_versioning_configuration(
            &payload,
        )
        .map_err(|err| smithy_http::operation::BuildError::SerializationError(err.into()))?,
    ))
}

pub fn ser_payload_put_bucket_website_input(
    payload: &std::option::Option<crate::model::WebsiteConfiguration>,
) -> Result<smithy_http::body::SdkBody, smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => return Ok(smithy_http::body::SdkBody::from("")),
    };
    #[allow(clippy::useless_conversion)]
    Ok(smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_put_bucket_website_input_website_configuration(&payload)
            .map_err(|err| smithy_http::operation::BuildError::SerializationError(err.into()))?,
    ))
}

pub fn ser_payload_put_object_input(
    payload: smithy_http::byte_stream::ByteStream,
) -> Result<smithy_http::body::SdkBody, smithy_http::operation::BuildError> {
    #[allow(clippy::useless_conversion)]
    Ok(smithy_http::body::SdkBody::from(payload.into_inner()))
}

pub fn ser_payload_put_object_acl_input(
    payload: &std::option::Option<crate::model::AccessControlPolicy>,
) -> Result<smithy_http::body::SdkBody, smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => return Ok(smithy_http::body::SdkBody::from("")),
    };
    #[allow(clippy::useless_conversion)]
    Ok(smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_put_object_acl_input_access_control_policy(&payload)
            .map_err(|err| smithy_http::operation::BuildError::SerializationError(err.into()))?,
    ))
}

pub fn ser_payload_put_object_legal_hold_input(
    payload: &std::option::Option<crate::model::ObjectLockLegalHold>,
) -> Result<smithy_http::body::SdkBody, smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => return Ok(smithy_http::body::SdkBody::from("")),
    };
    #[allow(clippy::useless_conversion)]
    Ok(smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_put_object_legal_hold_input_legal_hold(&payload)
            .map_err(|err| smithy_http::operation::BuildError::SerializationError(err.into()))?,
    ))
}

pub fn ser_payload_put_object_lock_configuration_input(
    payload: &std::option::Option<crate::model::ObjectLockConfiguration>,
) -> Result<smithy_http::body::SdkBody, smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => return Ok(smithy_http::body::SdkBody::from("")),
    };
    #[allow(clippy::useless_conversion)]Ok(smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_put_object_lock_configuration_input_object_lock_configuration(&payload).map_err(|err|smithy_http::operation::BuildError::SerializationError(err.into()))?
    ))
}

pub fn ser_payload_put_object_retention_input(
    payload: &std::option::Option<crate::model::ObjectLockRetention>,
) -> Result<smithy_http::body::SdkBody, smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => return Ok(smithy_http::body::SdkBody::from("")),
    };
    #[allow(clippy::useless_conversion)]
    Ok(smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_put_object_retention_input_retention(&payload)
            .map_err(|err| smithy_http::operation::BuildError::SerializationError(err.into()))?,
    ))
}

pub fn ser_payload_put_object_tagging_input(
    payload: &std::option::Option<crate::model::Tagging>,
) -> Result<smithy_http::body::SdkBody, smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => return Ok(smithy_http::body::SdkBody::from("")),
    };
    #[allow(clippy::useless_conversion)]
    Ok(smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_put_object_tagging_input_tagging(&payload)
            .map_err(|err| smithy_http::operation::BuildError::SerializationError(err.into()))?,
    ))
}

pub fn ser_payload_put_public_access_block_input(
    payload: &std::option::Option<crate::model::PublicAccessBlockConfiguration>,
) -> Result<smithy_http::body::SdkBody, smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => return Ok(smithy_http::body::SdkBody::from("")),
    };
    #[allow(clippy::useless_conversion)]Ok(smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_put_public_access_block_input_public_access_block_configuration(&payload).map_err(|err|smithy_http::operation::BuildError::SerializationError(err.into()))?
    ))
}

pub fn ser_payload_restore_object_input(
    payload: &std::option::Option<crate::model::RestoreRequest>,
) -> Result<smithy_http::body::SdkBody, smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => return Ok(smithy_http::body::SdkBody::from("")),
    };
    #[allow(clippy::useless_conversion)]
    Ok(smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_restore_object_input_restore_request(&payload)
            .map_err(|err| smithy_http::operation::BuildError::SerializationError(err.into()))?,
    ))
}

pub fn ser_payload_upload_part_input(
    payload: smithy_http::byte_stream::ByteStream,
) -> Result<smithy_http::body::SdkBody, smithy_http::operation::BuildError> {
    #[allow(clippy::useless_conversion)]
    Ok(smithy_http::body::SdkBody::from(payload.into_inner()))
}

pub fn ser_payload_write_get_object_response_input(
    payload: smithy_http::byte_stream::ByteStream,
) -> Result<smithy_http::body::SdkBody, smithy_http::operation::BuildError> {
    #[allow(clippy::useless_conversion)]
    Ok(smithy_http::body::SdkBody::from(payload.into_inner()))
}
