// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `CreateGroup`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_group`](crate::client::fluent_builders::CreateGroup).
///
/// `ParseStrictResponse` impl for `CreateGroup`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateGroup {
    _private: (),
}
impl CreateGroup {
    /// Creates a new builder-style object to manufacture [`CreateGroupInput`](crate::input::CreateGroupInput).
    pub fn builder() -> crate::input::create_group_input::Builder {
        crate::input::create_group_input::Builder::default()
    }
    /// Creates a new `CreateGroup` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateGroup {
    type Output =
        std::result::Result<crate::output::CreateGroupOutput, crate::error::CreateGroupError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_group::de_create_group_http_error(response)
        } else {
            crate::protocol_serde::shape_create_group::de_create_group_http_response(response)
        }
    }
}

/// Operation shape for `CreateGroupMembership`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_group_membership`](crate::client::fluent_builders::CreateGroupMembership).
///
/// `ParseStrictResponse` impl for `CreateGroupMembership`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateGroupMembership {
    _private: (),
}
impl CreateGroupMembership {
    /// Creates a new builder-style object to manufacture [`CreateGroupMembershipInput`](crate::input::CreateGroupMembershipInput).
    pub fn builder() -> crate::input::create_group_membership_input::Builder {
        crate::input::create_group_membership_input::Builder::default()
    }
    /// Creates a new `CreateGroupMembership` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateGroupMembership {
    type Output = std::result::Result<
        crate::output::CreateGroupMembershipOutput,
        crate::error::CreateGroupMembershipError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_group_membership::de_create_group_membership_http_error(response)
        } else {
            crate::protocol_serde::shape_create_group_membership::de_create_group_membership_http_response(response)
        }
    }
}

/// Operation shape for `CreateUser`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_user`](crate::client::fluent_builders::CreateUser).
///
/// `ParseStrictResponse` impl for `CreateUser`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateUser {
    _private: (),
}
impl CreateUser {
    /// Creates a new builder-style object to manufacture [`CreateUserInput`](crate::input::CreateUserInput).
    pub fn builder() -> crate::input::create_user_input::Builder {
        crate::input::create_user_input::Builder::default()
    }
    /// Creates a new `CreateUser` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateUser {
    type Output =
        std::result::Result<crate::output::CreateUserOutput, crate::error::CreateUserError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_user::de_create_user_http_error(response)
        } else {
            crate::protocol_serde::shape_create_user::de_create_user_http_response(response)
        }
    }
}

/// Operation shape for `DeleteGroup`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_group`](crate::client::fluent_builders::DeleteGroup).
///
/// `ParseStrictResponse` impl for `DeleteGroup`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteGroup {
    _private: (),
}
impl DeleteGroup {
    /// Creates a new builder-style object to manufacture [`DeleteGroupInput`](crate::input::DeleteGroupInput).
    pub fn builder() -> crate::input::delete_group_input::Builder {
        crate::input::delete_group_input::Builder::default()
    }
    /// Creates a new `DeleteGroup` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteGroup {
    type Output =
        std::result::Result<crate::output::DeleteGroupOutput, crate::error::DeleteGroupError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_group::de_delete_group_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_group::de_delete_group_http_response(response)
        }
    }
}

/// Operation shape for `DeleteGroupMembership`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_group_membership`](crate::client::fluent_builders::DeleteGroupMembership).
///
/// `ParseStrictResponse` impl for `DeleteGroupMembership`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteGroupMembership {
    _private: (),
}
impl DeleteGroupMembership {
    /// Creates a new builder-style object to manufacture [`DeleteGroupMembershipInput`](crate::input::DeleteGroupMembershipInput).
    pub fn builder() -> crate::input::delete_group_membership_input::Builder {
        crate::input::delete_group_membership_input::Builder::default()
    }
    /// Creates a new `DeleteGroupMembership` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteGroupMembership {
    type Output = std::result::Result<
        crate::output::DeleteGroupMembershipOutput,
        crate::error::DeleteGroupMembershipError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_group_membership::de_delete_group_membership_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_group_membership::de_delete_group_membership_http_response(response)
        }
    }
}

/// Operation shape for `DeleteUser`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_user`](crate::client::fluent_builders::DeleteUser).
///
/// `ParseStrictResponse` impl for `DeleteUser`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteUser {
    _private: (),
}
impl DeleteUser {
    /// Creates a new builder-style object to manufacture [`DeleteUserInput`](crate::input::DeleteUserInput).
    pub fn builder() -> crate::input::delete_user_input::Builder {
        crate::input::delete_user_input::Builder::default()
    }
    /// Creates a new `DeleteUser` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteUser {
    type Output =
        std::result::Result<crate::output::DeleteUserOutput, crate::error::DeleteUserError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_user::de_delete_user_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_user::de_delete_user_http_response(response)
        }
    }
}

/// Operation shape for `DescribeGroup`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_group`](crate::client::fluent_builders::DescribeGroup).
///
/// `ParseStrictResponse` impl for `DescribeGroup`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeGroup {
    _private: (),
}
impl DescribeGroup {
    /// Creates a new builder-style object to manufacture [`DescribeGroupInput`](crate::input::DescribeGroupInput).
    pub fn builder() -> crate::input::describe_group_input::Builder {
        crate::input::describe_group_input::Builder::default()
    }
    /// Creates a new `DescribeGroup` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeGroup {
    type Output =
        std::result::Result<crate::output::DescribeGroupOutput, crate::error::DescribeGroupError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_group::de_describe_group_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_group::de_describe_group_http_response(response)
        }
    }
}

/// Operation shape for `DescribeGroupMembership`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_group_membership`](crate::client::fluent_builders::DescribeGroupMembership).
///
/// `ParseStrictResponse` impl for `DescribeGroupMembership`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeGroupMembership {
    _private: (),
}
impl DescribeGroupMembership {
    /// Creates a new builder-style object to manufacture [`DescribeGroupMembershipInput`](crate::input::DescribeGroupMembershipInput).
    pub fn builder() -> crate::input::describe_group_membership_input::Builder {
        crate::input::describe_group_membership_input::Builder::default()
    }
    /// Creates a new `DescribeGroupMembership` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeGroupMembership {
    type Output = std::result::Result<
        crate::output::DescribeGroupMembershipOutput,
        crate::error::DescribeGroupMembershipError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_group_membership::de_describe_group_membership_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_group_membership::de_describe_group_membership_http_response(response)
        }
    }
}

/// Operation shape for `DescribeUser`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_user`](crate::client::fluent_builders::DescribeUser).
///
/// `ParseStrictResponse` impl for `DescribeUser`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeUser {
    _private: (),
}
impl DescribeUser {
    /// Creates a new builder-style object to manufacture [`DescribeUserInput`](crate::input::DescribeUserInput).
    pub fn builder() -> crate::input::describe_user_input::Builder {
        crate::input::describe_user_input::Builder::default()
    }
    /// Creates a new `DescribeUser` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeUser {
    type Output =
        std::result::Result<crate::output::DescribeUserOutput, crate::error::DescribeUserError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_user::de_describe_user_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_user::de_describe_user_http_response(response)
        }
    }
}

/// Operation shape for `GetGroupId`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_group_id`](crate::client::fluent_builders::GetGroupId).
///
/// `ParseStrictResponse` impl for `GetGroupId`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetGroupId {
    _private: (),
}
impl GetGroupId {
    /// Creates a new builder-style object to manufacture [`GetGroupIdInput`](crate::input::GetGroupIdInput).
    pub fn builder() -> crate::input::get_group_id_input::Builder {
        crate::input::get_group_id_input::Builder::default()
    }
    /// Creates a new `GetGroupId` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetGroupId {
    type Output =
        std::result::Result<crate::output::GetGroupIdOutput, crate::error::GetGroupIdError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_group_id::de_get_group_id_http_error(response)
        } else {
            crate::protocol_serde::shape_get_group_id::de_get_group_id_http_response(response)
        }
    }
}

/// Operation shape for `GetGroupMembershipId`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_group_membership_id`](crate::client::fluent_builders::GetGroupMembershipId).
///
/// `ParseStrictResponse` impl for `GetGroupMembershipId`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetGroupMembershipId {
    _private: (),
}
impl GetGroupMembershipId {
    /// Creates a new builder-style object to manufacture [`GetGroupMembershipIdInput`](crate::input::GetGroupMembershipIdInput).
    pub fn builder() -> crate::input::get_group_membership_id_input::Builder {
        crate::input::get_group_membership_id_input::Builder::default()
    }
    /// Creates a new `GetGroupMembershipId` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetGroupMembershipId {
    type Output = std::result::Result<
        crate::output::GetGroupMembershipIdOutput,
        crate::error::GetGroupMembershipIdError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_group_membership_id::de_get_group_membership_id_http_error(response)
        } else {
            crate::protocol_serde::shape_get_group_membership_id::de_get_group_membership_id_http_response(response)
        }
    }
}

/// Operation shape for `GetUserId`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_user_id`](crate::client::fluent_builders::GetUserId).
///
/// `ParseStrictResponse` impl for `GetUserId`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetUserId {
    _private: (),
}
impl GetUserId {
    /// Creates a new builder-style object to manufacture [`GetUserIdInput`](crate::input::GetUserIdInput).
    pub fn builder() -> crate::input::get_user_id_input::Builder {
        crate::input::get_user_id_input::Builder::default()
    }
    /// Creates a new `GetUserId` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetUserId {
    type Output = std::result::Result<crate::output::GetUserIdOutput, crate::error::GetUserIdError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_user_id::de_get_user_id_http_error(response)
        } else {
            crate::protocol_serde::shape_get_user_id::de_get_user_id_http_response(response)
        }
    }
}

/// Operation shape for `IsMemberInGroups`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`is_member_in_groups`](crate::client::fluent_builders::IsMemberInGroups).
///
/// `ParseStrictResponse` impl for `IsMemberInGroups`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct IsMemberInGroups {
    _private: (),
}
impl IsMemberInGroups {
    /// Creates a new builder-style object to manufacture [`IsMemberInGroupsInput`](crate::input::IsMemberInGroupsInput).
    pub fn builder() -> crate::input::is_member_in_groups_input::Builder {
        crate::input::is_member_in_groups_input::Builder::default()
    }
    /// Creates a new `IsMemberInGroups` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for IsMemberInGroups {
    type Output = std::result::Result<
        crate::output::IsMemberInGroupsOutput,
        crate::error::IsMemberInGroupsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_is_member_in_groups::de_is_member_in_groups_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_is_member_in_groups::de_is_member_in_groups_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListGroupMemberships`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_group_memberships`](crate::client::fluent_builders::ListGroupMemberships).
///
/// `ParseStrictResponse` impl for `ListGroupMemberships`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListGroupMemberships {
    _private: (),
}
impl ListGroupMemberships {
    /// Creates a new builder-style object to manufacture [`ListGroupMembershipsInput`](crate::input::ListGroupMembershipsInput).
    pub fn builder() -> crate::input::list_group_memberships_input::Builder {
        crate::input::list_group_memberships_input::Builder::default()
    }
    /// Creates a new `ListGroupMemberships` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListGroupMemberships {
    type Output = std::result::Result<
        crate::output::ListGroupMembershipsOutput,
        crate::error::ListGroupMembershipsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_group_memberships::de_list_group_memberships_http_error(response)
        } else {
            crate::protocol_serde::shape_list_group_memberships::de_list_group_memberships_http_response(response)
        }
    }
}

/// Operation shape for `ListGroupMembershipsForMember`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_group_memberships_for_member`](crate::client::fluent_builders::ListGroupMembershipsForMember).
///
/// `ParseStrictResponse` impl for `ListGroupMembershipsForMember`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListGroupMembershipsForMember {
    _private: (),
}
impl ListGroupMembershipsForMember {
    /// Creates a new builder-style object to manufacture [`ListGroupMembershipsForMemberInput`](crate::input::ListGroupMembershipsForMemberInput).
    pub fn builder() -> crate::input::list_group_memberships_for_member_input::Builder {
        crate::input::list_group_memberships_for_member_input::Builder::default()
    }
    /// Creates a new `ListGroupMembershipsForMember` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListGroupMembershipsForMember {
    type Output = std::result::Result<
        crate::output::ListGroupMembershipsForMemberOutput,
        crate::error::ListGroupMembershipsForMemberError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_group_memberships_for_member::de_list_group_memberships_for_member_http_error(response)
        } else {
            crate::protocol_serde::shape_list_group_memberships_for_member::de_list_group_memberships_for_member_http_response(response)
        }
    }
}

/// Operation shape for `ListGroups`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_groups`](crate::client::fluent_builders::ListGroups).
///
/// `ParseStrictResponse` impl for `ListGroups`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListGroups {
    _private: (),
}
impl ListGroups {
    /// Creates a new builder-style object to manufacture [`ListGroupsInput`](crate::input::ListGroupsInput).
    pub fn builder() -> crate::input::list_groups_input::Builder {
        crate::input::list_groups_input::Builder::default()
    }
    /// Creates a new `ListGroups` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListGroups {
    type Output =
        std::result::Result<crate::output::ListGroupsOutput, crate::error::ListGroupsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_groups::de_list_groups_http_error(response)
        } else {
            crate::protocol_serde::shape_list_groups::de_list_groups_http_response(response)
        }
    }
}

/// Operation shape for `ListUsers`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_users`](crate::client::fluent_builders::ListUsers).
///
/// `ParseStrictResponse` impl for `ListUsers`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListUsers {
    _private: (),
}
impl ListUsers {
    /// Creates a new builder-style object to manufacture [`ListUsersInput`](crate::input::ListUsersInput).
    pub fn builder() -> crate::input::list_users_input::Builder {
        crate::input::list_users_input::Builder::default()
    }
    /// Creates a new `ListUsers` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListUsers {
    type Output = std::result::Result<crate::output::ListUsersOutput, crate::error::ListUsersError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_users::de_list_users_http_error(response)
        } else {
            crate::protocol_serde::shape_list_users::de_list_users_http_response(response)
        }
    }
}

/// Operation shape for `UpdateGroup`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_group`](crate::client::fluent_builders::UpdateGroup).
///
/// `ParseStrictResponse` impl for `UpdateGroup`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateGroup {
    _private: (),
}
impl UpdateGroup {
    /// Creates a new builder-style object to manufacture [`UpdateGroupInput`](crate::input::UpdateGroupInput).
    pub fn builder() -> crate::input::update_group_input::Builder {
        crate::input::update_group_input::Builder::default()
    }
    /// Creates a new `UpdateGroup` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateGroup {
    type Output =
        std::result::Result<crate::output::UpdateGroupOutput, crate::error::UpdateGroupError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_group::de_update_group_http_error(response)
        } else {
            crate::protocol_serde::shape_update_group::de_update_group_http_response(response)
        }
    }
}

/// Operation shape for `UpdateUser`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_user`](crate::client::fluent_builders::UpdateUser).
///
/// `ParseStrictResponse` impl for `UpdateUser`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateUser {
    _private: (),
}
impl UpdateUser {
    /// Creates a new builder-style object to manufacture [`UpdateUserInput`](crate::input::UpdateUserInput).
    pub fn builder() -> crate::input::update_user_input::Builder {
        crate::input::update_user_input::Builder::default()
    }
    /// Creates a new `UpdateUser` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateUser {
    type Output =
        std::result::Result<crate::output::UpdateUserOutput, crate::error::UpdateUserError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_user::de_update_user_http_error(response)
        } else {
            crate::protocol_serde::shape_update_user::de_update_user_http_response(response)
        }
    }
}

/// Operation customization and supporting types
pub mod customize;
