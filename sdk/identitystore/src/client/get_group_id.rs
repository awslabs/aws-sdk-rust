// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetGroupId`](crate::operation::get_group_id::builders::GetGroupIdFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`identity_store_id(impl Into<String>)`](crate::operation::get_group_id::builders::GetGroupIdFluentBuilder::identity_store_id) / [`set_identity_store_id(Option<String>)`](crate::operation::get_group_id::builders::GetGroupIdFluentBuilder::set_identity_store_id):<br>required: **true**<br><p>The globally unique identifier for the identity store.</p><br>
    ///   - [`alternate_identifier(AlternateIdentifier)`](crate::operation::get_group_id::builders::GetGroupIdFluentBuilder::alternate_identifier) / [`set_alternate_identifier(Option<AlternateIdentifier>)`](crate::operation::get_group_id::builders::GetGroupIdFluentBuilder::set_alternate_identifier):<br>required: **true**<br><p>A unique identifier for a user or group that is not the primary identifier. This value can be an identifier from an external identity provider (IdP) that is associated with the user, the group, or a unique attribute. For the unique attribute, the only valid path is <code>displayName</code>.</p><br>
    /// - On success, responds with [`GetGroupIdOutput`](crate::operation::get_group_id::GetGroupIdOutput) with field(s):
    ///   - [`group_id(String)`](crate::operation::get_group_id::GetGroupIdOutput::group_id): <p>The identifier for a group in the identity store.</p>
    ///   - [`identity_store_id(String)`](crate::operation::get_group_id::GetGroupIdOutput::identity_store_id): <p>The globally unique identifier for the identity store.</p>
    /// - On failure, responds with [`SdkError<GetGroupIdError>`](crate::operation::get_group_id::GetGroupIdError)
    pub fn get_group_id(&self) -> crate::operation::get_group_id::builders::GetGroupIdFluentBuilder {
        crate::operation::get_group_id::builders::GetGroupIdFluentBuilder::new(self.handle.clone())
    }
}
