// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_group_memberships_output_next_token(
    input: &crate::operation::list_group_memberships::ListGroupMembershipsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_group_memberships_for_member_output_next_token(
    input: &crate::operation::list_group_memberships_for_member::ListGroupMembershipsForMemberOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_groups_output_next_token(
    input: &crate::operation::list_groups::ListGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_users_output_next_token(
    input: &crate::operation::list_users::ListUsersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_group_memberships_output_group_memberships(
    input: crate::operation::list_group_memberships::ListGroupMembershipsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::GroupMembership>> {
    let input = match input.group_memberships {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_group_memberships_for_member_output_group_memberships(
    input: crate::operation::list_group_memberships_for_member::ListGroupMembershipsForMemberOutput,
) -> std::option::Option<std::vec::Vec<crate::types::GroupMembership>> {
    let input = match input.group_memberships {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_groups_output_groups(
    input: crate::operation::list_groups::ListGroupsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Group>> {
    let input = match input.groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_users_output_users(
    input: crate::operation::list_users::ListUsersOutput,
) -> std::option::Option<std::vec::Vec<crate::types::User>> {
    let input = match input.users {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
