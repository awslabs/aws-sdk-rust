// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeGroupMembershipOutput {
    /// <p>The globally unique identifier for the identity store.</p>
    #[doc(hidden)]
    pub identity_store_id: std::option::Option<std::string::String>,
    /// <p>The identifier for a <code>GroupMembership</code> in an identity store.</p>
    #[doc(hidden)]
    pub membership_id: std::option::Option<std::string::String>,
    /// <p>The identifier for a group in the identity store.</p>
    #[doc(hidden)]
    pub group_id: std::option::Option<std::string::String>,
    /// <p>An object containing the identifier of a group member.</p>
    #[doc(hidden)]
    pub member_id: std::option::Option<crate::types::MemberId>,
    _request_id: Option<String>,
}
impl DescribeGroupMembershipOutput {
    /// <p>The globally unique identifier for the identity store.</p>
    pub fn identity_store_id(&self) -> std::option::Option<&str> {
        self.identity_store_id.as_deref()
    }
    /// <p>The identifier for a <code>GroupMembership</code> in an identity store.</p>
    pub fn membership_id(&self) -> std::option::Option<&str> {
        self.membership_id.as_deref()
    }
    /// <p>The identifier for a group in the identity store.</p>
    pub fn group_id(&self) -> std::option::Option<&str> {
        self.group_id.as_deref()
    }
    /// <p>An object containing the identifier of a group member.</p>
    pub fn member_id(&self) -> std::option::Option<&crate::types::MemberId> {
        self.member_id.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeGroupMembershipOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeGroupMembershipOutput {
    /// Creates a new builder-style object to manufacture [`DescribeGroupMembershipOutput`](crate::operation::describe_group_membership::DescribeGroupMembershipOutput).
    pub fn builder(
    ) -> crate::operation::describe_group_membership::builders::DescribeGroupMembershipOutputBuilder
    {
        crate::operation::describe_group_membership::builders::DescribeGroupMembershipOutputBuilder::default()
    }
}

/// A builder for [`DescribeGroupMembershipOutput`](crate::operation::describe_group_membership::DescribeGroupMembershipOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeGroupMembershipOutputBuilder {
    pub(crate) identity_store_id: std::option::Option<std::string::String>,
    pub(crate) membership_id: std::option::Option<std::string::String>,
    pub(crate) group_id: std::option::Option<std::string::String>,
    pub(crate) member_id: std::option::Option<crate::types::MemberId>,
    _request_id: Option<String>,
}
impl DescribeGroupMembershipOutputBuilder {
    /// <p>The globally unique identifier for the identity store.</p>
    pub fn identity_store_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.identity_store_id = Some(input.into());
        self
    }
    /// <p>The globally unique identifier for the identity store.</p>
    pub fn set_identity_store_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.identity_store_id = input;
        self
    }
    /// <p>The identifier for a <code>GroupMembership</code> in an identity store.</p>
    pub fn membership_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.membership_id = Some(input.into());
        self
    }
    /// <p>The identifier for a <code>GroupMembership</code> in an identity store.</p>
    pub fn set_membership_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.membership_id = input;
        self
    }
    /// <p>The identifier for a group in the identity store.</p>
    pub fn group_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.group_id = Some(input.into());
        self
    }
    /// <p>The identifier for a group in the identity store.</p>
    pub fn set_group_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.group_id = input;
        self
    }
    /// <p>An object containing the identifier of a group member.</p>
    pub fn member_id(mut self, input: crate::types::MemberId) -> Self {
        self.member_id = Some(input);
        self
    }
    /// <p>An object containing the identifier of a group member.</p>
    pub fn set_member_id(mut self, input: std::option::Option<crate::types::MemberId>) -> Self {
        self.member_id = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeGroupMembershipOutput`](crate::operation::describe_group_membership::DescribeGroupMembershipOutput).
    pub fn build(
        self,
    ) -> crate::operation::describe_group_membership::DescribeGroupMembershipOutput {
        crate::operation::describe_group_membership::DescribeGroupMembershipOutput {
            identity_store_id: self.identity_store_id,
            membership_id: self.membership_id,
            group_id: self.group_id,
            member_id: self.member_id,
            _request_id: self._request_id,
        }
    }
}
