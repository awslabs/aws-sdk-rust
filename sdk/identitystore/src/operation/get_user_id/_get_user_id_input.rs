// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetUserIdInput {
    /// <p>The globally unique identifier for the identity store.</p>
    pub identity_store_id: ::std::option::Option<::std::string::String>,
    /// <p>A unique identifier for a user or group that is not the primary identifier. This value can be an identifier from an external identity provider (IdP) that is associated with the user, the group, or a unique attribute. For the unique attribute, the only valid paths are <code>userName</code> and <code>emails.value</code>.</p>
    pub alternate_identifier: ::std::option::Option<crate::types::AlternateIdentifier>,
}
impl GetUserIdInput {
    /// <p>The globally unique identifier for the identity store.</p>
    pub fn identity_store_id(&self) -> ::std::option::Option<&str> {
        self.identity_store_id.as_deref()
    }
    /// <p>A unique identifier for a user or group that is not the primary identifier. This value can be an identifier from an external identity provider (IdP) that is associated with the user, the group, or a unique attribute. For the unique attribute, the only valid paths are <code>userName</code> and <code>emails.value</code>.</p>
    pub fn alternate_identifier(&self) -> ::std::option::Option<&crate::types::AlternateIdentifier> {
        self.alternate_identifier.as_ref()
    }
}
impl GetUserIdInput {
    /// Creates a new builder-style object to manufacture [`GetUserIdInput`](crate::operation::get_user_id::GetUserIdInput).
    pub fn builder() -> crate::operation::get_user_id::builders::GetUserIdInputBuilder {
        crate::operation::get_user_id::builders::GetUserIdInputBuilder::default()
    }
}

/// A builder for [`GetUserIdInput`](crate::operation::get_user_id::GetUserIdInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetUserIdInputBuilder {
    pub(crate) identity_store_id: ::std::option::Option<::std::string::String>,
    pub(crate) alternate_identifier: ::std::option::Option<crate::types::AlternateIdentifier>,
}
impl GetUserIdInputBuilder {
    /// <p>The globally unique identifier for the identity store.</p>
    /// This field is required.
    pub fn identity_store_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identity_store_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The globally unique identifier for the identity store.</p>
    pub fn set_identity_store_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identity_store_id = input;
        self
    }
    /// <p>The globally unique identifier for the identity store.</p>
    pub fn get_identity_store_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.identity_store_id
    }
    /// <p>A unique identifier for a user or group that is not the primary identifier. This value can be an identifier from an external identity provider (IdP) that is associated with the user, the group, or a unique attribute. For the unique attribute, the only valid paths are <code>userName</code> and <code>emails.value</code>.</p>
    /// This field is required.
    pub fn alternate_identifier(mut self, input: crate::types::AlternateIdentifier) -> Self {
        self.alternate_identifier = ::std::option::Option::Some(input);
        self
    }
    /// <p>A unique identifier for a user or group that is not the primary identifier. This value can be an identifier from an external identity provider (IdP) that is associated with the user, the group, or a unique attribute. For the unique attribute, the only valid paths are <code>userName</code> and <code>emails.value</code>.</p>
    pub fn set_alternate_identifier(mut self, input: ::std::option::Option<crate::types::AlternateIdentifier>) -> Self {
        self.alternate_identifier = input;
        self
    }
    /// <p>A unique identifier for a user or group that is not the primary identifier. This value can be an identifier from an external identity provider (IdP) that is associated with the user, the group, or a unique attribute. For the unique attribute, the only valid paths are <code>userName</code> and <code>emails.value</code>.</p>
    pub fn get_alternate_identifier(&self) -> &::std::option::Option<crate::types::AlternateIdentifier> {
        &self.alternate_identifier
    }
    /// Consumes the builder and constructs a [`GetUserIdInput`](crate::operation::get_user_id::GetUserIdInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::get_user_id::GetUserIdInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_user_id::GetUserIdInput {
            identity_store_id: self.identity_store_id,
            alternate_identifier: self.alternate_identifier,
        })
    }
}
