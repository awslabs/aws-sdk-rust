// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateUserInput {
    /// <p>The globally unique identifier for the identity store.</p>
    #[doc(hidden)]
    pub identity_store_id: std::option::Option<std::string::String>,
    /// <p>The identifier for a user in the identity store.</p>
    #[doc(hidden)]
    pub user_id: std::option::Option<std::string::String>,
    /// <p>A list of <code>AttributeOperation</code> objects to apply to the requested user. These operations might add, replace, or remove an attribute.</p>
    #[doc(hidden)]
    pub operations: std::option::Option<std::vec::Vec<crate::types::AttributeOperation>>,
}
impl UpdateUserInput {
    /// <p>The globally unique identifier for the identity store.</p>
    pub fn identity_store_id(&self) -> std::option::Option<&str> {
        self.identity_store_id.as_deref()
    }
    /// <p>The identifier for a user in the identity store.</p>
    pub fn user_id(&self) -> std::option::Option<&str> {
        self.user_id.as_deref()
    }
    /// <p>A list of <code>AttributeOperation</code> objects to apply to the requested user. These operations might add, replace, or remove an attribute.</p>
    pub fn operations(&self) -> std::option::Option<&[crate::types::AttributeOperation]> {
        self.operations.as_deref()
    }
}
impl UpdateUserInput {
    /// Creates a new builder-style object to manufacture [`UpdateUserInput`](crate::operation::update_user::UpdateUserInput).
    pub fn builder() -> crate::operation::update_user::builders::UpdateUserInputBuilder {
        crate::operation::update_user::builders::UpdateUserInputBuilder::default()
    }
}

/// A builder for [`UpdateUserInput`](crate::operation::update_user::UpdateUserInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateUserInputBuilder {
    pub(crate) identity_store_id: std::option::Option<std::string::String>,
    pub(crate) user_id: std::option::Option<std::string::String>,
    pub(crate) operations: std::option::Option<std::vec::Vec<crate::types::AttributeOperation>>,
}
impl UpdateUserInputBuilder {
    /// <p>The globally unique identifier for the identity store.</p>
    pub fn identity_store_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.identity_store_id = Some(input.into());
        self
    }
    /// <p>The globally unique identifier for the identity store.</p>
    pub fn set_identity_store_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.identity_store_id = input;
        self
    }
    /// <p>The identifier for a user in the identity store.</p>
    pub fn user_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_id = Some(input.into());
        self
    }
    /// <p>The identifier for a user in the identity store.</p>
    pub fn set_user_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// Appends an item to `operations`.
    ///
    /// To override the contents of this collection use [`set_operations`](Self::set_operations).
    ///
    /// <p>A list of <code>AttributeOperation</code> objects to apply to the requested user. These operations might add, replace, or remove an attribute.</p>
    pub fn operations(mut self, input: crate::types::AttributeOperation) -> Self {
        let mut v = self.operations.unwrap_or_default();
        v.push(input);
        self.operations = Some(v);
        self
    }
    /// <p>A list of <code>AttributeOperation</code> objects to apply to the requested user. These operations might add, replace, or remove an attribute.</p>
    pub fn set_operations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AttributeOperation>>,
    ) -> Self {
        self.operations = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateUserInput`](crate::operation::update_user::UpdateUserInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_user::UpdateUserInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::update_user::UpdateUserInput {
            identity_store_id: self.identity_store_id,
            user_id: self.user_id,
            operations: self.operations,
        })
    }
}
