// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetGroupIdInput {
    /// <p>The globally unique identifier for the identity store.</p>
    #[doc(hidden)]
    pub identity_store_id: std::option::Option<std::string::String>,
    /// <p>A unique identifier for a user or group that is not the primary identifier. This value can be an identifier from an external identity provider (IdP) that is associated with the user, the group, or a unique attribute. For example, a unique <code>GroupDisplayName</code>.</p>
    #[doc(hidden)]
    pub alternate_identifier: std::option::Option<crate::types::AlternateIdentifier>,
}
impl GetGroupIdInput {
    /// <p>The globally unique identifier for the identity store.</p>
    pub fn identity_store_id(&self) -> std::option::Option<&str> {
        self.identity_store_id.as_deref()
    }
    /// <p>A unique identifier for a user or group that is not the primary identifier. This value can be an identifier from an external identity provider (IdP) that is associated with the user, the group, or a unique attribute. For example, a unique <code>GroupDisplayName</code>.</p>
    pub fn alternate_identifier(&self) -> std::option::Option<&crate::types::AlternateIdentifier> {
        self.alternate_identifier.as_ref()
    }
}
impl GetGroupIdInput {
    /// Creates a new builder-style object to manufacture [`GetGroupIdInput`](crate::operation::get_group_id::GetGroupIdInput).
    pub fn builder() -> crate::operation::get_group_id::builders::GetGroupIdInputBuilder {
        crate::operation::get_group_id::builders::GetGroupIdInputBuilder::default()
    }
}

/// A builder for [`GetGroupIdInput`](crate::operation::get_group_id::GetGroupIdInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetGroupIdInputBuilder {
    pub(crate) identity_store_id: std::option::Option<std::string::String>,
    pub(crate) alternate_identifier: std::option::Option<crate::types::AlternateIdentifier>,
}
impl GetGroupIdInputBuilder {
    /// <p>The globally unique identifier for the identity store.</p>
    pub fn identity_store_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.identity_store_id = Some(input.into());
        self
    }
    /// <p>The globally unique identifier for the identity store.</p>
    pub fn set_identity_store_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.identity_store_id = input;
        self
    }
    /// <p>A unique identifier for a user or group that is not the primary identifier. This value can be an identifier from an external identity provider (IdP) that is associated with the user, the group, or a unique attribute. For example, a unique <code>GroupDisplayName</code>.</p>
    pub fn alternate_identifier(mut self, input: crate::types::AlternateIdentifier) -> Self {
        self.alternate_identifier = Some(input);
        self
    }
    /// <p>A unique identifier for a user or group that is not the primary identifier. This value can be an identifier from an external identity provider (IdP) that is associated with the user, the group, or a unique attribute. For example, a unique <code>GroupDisplayName</code>.</p>
    pub fn set_alternate_identifier(
        mut self,
        input: std::option::Option<crate::types::AlternateIdentifier>,
    ) -> Self {
        self.alternate_identifier = input;
        self
    }
    /// Consumes the builder and constructs a [`GetGroupIdInput`](crate::operation::get_group_id::GetGroupIdInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_group_id::GetGroupIdInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::get_group_id::GetGroupIdInput {
            identity_store_id: self.identity_store_id,
            alternate_identifier: self.alternate_identifier,
        })
    }
}
