// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DescribeUserOutput {
    /// <p>A unique string used to identify the user. The length limit is 128 characters. This value can consist of letters, accented characters, symbols, numbers, and punctuation. This value is specified at the time the user is created and stored as an attribute of the user object in the identity store.</p>
    pub user_name: ::std::option::Option<::std::string::String>,
    /// <p>The identifier for a user in the identity store.</p>
    pub user_id: ::std::string::String,
    /// <p>A list of <code>ExternalId</code> objects that contains the identifiers issued to this resource by an external identity provider.</p>
    pub external_ids: ::std::option::Option<::std::vec::Vec<crate::types::ExternalId>>,
    /// <p>The name of the user.</p>
    pub name: ::std::option::Option<crate::types::Name>,
    /// <p>The display name of the user.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>An alternative descriptive name for the user.</p>
    pub nick_name: ::std::option::Option<::std::string::String>,
    /// <p>A URL link for the user's profile.</p>
    pub profile_url: ::std::option::Option<::std::string::String>,
    /// <p>The email address of the user.</p>
    pub emails: ::std::option::Option<::std::vec::Vec<crate::types::Email>>,
    /// <p>The physical address of the user.</p>
    pub addresses: ::std::option::Option<::std::vec::Vec<crate::types::Address>>,
    /// <p>A list of <code>PhoneNumber</code> objects associated with a user.</p>
    pub phone_numbers: ::std::option::Option<::std::vec::Vec<crate::types::PhoneNumber>>,
    /// <p>A string indicating the type of user.</p>
    pub user_type: ::std::option::Option<::std::string::String>,
    /// <p>A string containing the title of the user.</p>
    pub title: ::std::option::Option<::std::string::String>,
    /// <p>The preferred language of the user.</p>
    pub preferred_language: ::std::option::Option<::std::string::String>,
    /// <p>A string containing the geographical region or location of the user.</p>
    pub locale: ::std::option::Option<::std::string::String>,
    /// <p>The time zone for a user.</p>
    pub timezone: ::std::option::Option<::std::string::String>,
    /// <p>The globally unique identifier for the identity store.</p>
    pub identity_store_id: ::std::string::String,
    _request_id: Option<String>,
}
impl DescribeUserOutput {
    /// <p>A unique string used to identify the user. The length limit is 128 characters. This value can consist of letters, accented characters, symbols, numbers, and punctuation. This value is specified at the time the user is created and stored as an attribute of the user object in the identity store.</p>
    pub fn user_name(&self) -> ::std::option::Option<&str> {
        self.user_name.as_deref()
    }
    /// <p>The identifier for a user in the identity store.</p>
    pub fn user_id(&self) -> &str {
        use std::ops::Deref;
        self.user_id.deref()
    }
    /// <p>A list of <code>ExternalId</code> objects that contains the identifiers issued to this resource by an external identity provider.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.external_ids.is_none()`.
    pub fn external_ids(&self) -> &[crate::types::ExternalId] {
        self.external_ids.as_deref().unwrap_or_default()
    }
    /// <p>The name of the user.</p>
    pub fn name(&self) -> ::std::option::Option<&crate::types::Name> {
        self.name.as_ref()
    }
    /// <p>The display name of the user.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>An alternative descriptive name for the user.</p>
    pub fn nick_name(&self) -> ::std::option::Option<&str> {
        self.nick_name.as_deref()
    }
    /// <p>A URL link for the user's profile.</p>
    pub fn profile_url(&self) -> ::std::option::Option<&str> {
        self.profile_url.as_deref()
    }
    /// <p>The email address of the user.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.emails.is_none()`.
    pub fn emails(&self) -> &[crate::types::Email] {
        self.emails.as_deref().unwrap_or_default()
    }
    /// <p>The physical address of the user.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.addresses.is_none()`.
    pub fn addresses(&self) -> &[crate::types::Address] {
        self.addresses.as_deref().unwrap_or_default()
    }
    /// <p>A list of <code>PhoneNumber</code> objects associated with a user.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.phone_numbers.is_none()`.
    pub fn phone_numbers(&self) -> &[crate::types::PhoneNumber] {
        self.phone_numbers.as_deref().unwrap_or_default()
    }
    /// <p>A string indicating the type of user.</p>
    pub fn user_type(&self) -> ::std::option::Option<&str> {
        self.user_type.as_deref()
    }
    /// <p>A string containing the title of the user.</p>
    pub fn title(&self) -> ::std::option::Option<&str> {
        self.title.as_deref()
    }
    /// <p>The preferred language of the user.</p>
    pub fn preferred_language(&self) -> ::std::option::Option<&str> {
        self.preferred_language.as_deref()
    }
    /// <p>A string containing the geographical region or location of the user.</p>
    pub fn locale(&self) -> ::std::option::Option<&str> {
        self.locale.as_deref()
    }
    /// <p>The time zone for a user.</p>
    pub fn timezone(&self) -> ::std::option::Option<&str> {
        self.timezone.as_deref()
    }
    /// <p>The globally unique identifier for the identity store.</p>
    pub fn identity_store_id(&self) -> &str {
        use std::ops::Deref;
        self.identity_store_id.deref()
    }
}
impl ::std::fmt::Debug for DescribeUserOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeUserOutput");
        formatter.field("user_name", &"*** Sensitive Data Redacted ***");
        formatter.field("user_id", &self.user_id);
        formatter.field("external_ids", &self.external_ids);
        formatter.field("name", &self.name);
        formatter.field("display_name", &"*** Sensitive Data Redacted ***");
        formatter.field("nick_name", &"*** Sensitive Data Redacted ***");
        formatter.field("profile_url", &"*** Sensitive Data Redacted ***");
        formatter.field("emails", &self.emails);
        formatter.field("addresses", &self.addresses);
        formatter.field("phone_numbers", &self.phone_numbers);
        formatter.field("user_type", &"*** Sensitive Data Redacted ***");
        formatter.field("title", &"*** Sensitive Data Redacted ***");
        formatter.field("preferred_language", &"*** Sensitive Data Redacted ***");
        formatter.field("locale", &"*** Sensitive Data Redacted ***");
        formatter.field("timezone", &"*** Sensitive Data Redacted ***");
        formatter.field("identity_store_id", &self.identity_store_id);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_http::request_id::RequestId for DescribeUserOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeUserOutput {
    /// Creates a new builder-style object to manufacture [`DescribeUserOutput`](crate::operation::describe_user::DescribeUserOutput).
    pub fn builder() -> crate::operation::describe_user::builders::DescribeUserOutputBuilder {
        crate::operation::describe_user::builders::DescribeUserOutputBuilder::default()
    }
}

/// A builder for [`DescribeUserOutput`](crate::operation::describe_user::DescribeUserOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct DescribeUserOutputBuilder {
    pub(crate) user_name: ::std::option::Option<::std::string::String>,
    pub(crate) user_id: ::std::option::Option<::std::string::String>,
    pub(crate) external_ids: ::std::option::Option<::std::vec::Vec<crate::types::ExternalId>>,
    pub(crate) name: ::std::option::Option<crate::types::Name>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) nick_name: ::std::option::Option<::std::string::String>,
    pub(crate) profile_url: ::std::option::Option<::std::string::String>,
    pub(crate) emails: ::std::option::Option<::std::vec::Vec<crate::types::Email>>,
    pub(crate) addresses: ::std::option::Option<::std::vec::Vec<crate::types::Address>>,
    pub(crate) phone_numbers: ::std::option::Option<::std::vec::Vec<crate::types::PhoneNumber>>,
    pub(crate) user_type: ::std::option::Option<::std::string::String>,
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) preferred_language: ::std::option::Option<::std::string::String>,
    pub(crate) locale: ::std::option::Option<::std::string::String>,
    pub(crate) timezone: ::std::option::Option<::std::string::String>,
    pub(crate) identity_store_id: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeUserOutputBuilder {
    /// <p>A unique string used to identify the user. The length limit is 128 characters. This value can consist of letters, accented characters, symbols, numbers, and punctuation. This value is specified at the time the user is created and stored as an attribute of the user object in the identity store.</p>
    pub fn user_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique string used to identify the user. The length limit is 128 characters. This value can consist of letters, accented characters, symbols, numbers, and punctuation. This value is specified at the time the user is created and stored as an attribute of the user object in the identity store.</p>
    pub fn set_user_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_name = input;
        self
    }
    /// <p>A unique string used to identify the user. The length limit is 128 characters. This value can consist of letters, accented characters, symbols, numbers, and punctuation. This value is specified at the time the user is created and stored as an attribute of the user object in the identity store.</p>
    pub fn get_user_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_name
    }
    /// <p>The identifier for a user in the identity store.</p>
    /// This field is required.
    pub fn user_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for a user in the identity store.</p>
    pub fn set_user_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p>The identifier for a user in the identity store.</p>
    pub fn get_user_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_id
    }
    /// Appends an item to `external_ids`.
    ///
    /// To override the contents of this collection use [`set_external_ids`](Self::set_external_ids).
    ///
    /// <p>A list of <code>ExternalId</code> objects that contains the identifiers issued to this resource by an external identity provider.</p>
    pub fn external_ids(mut self, input: crate::types::ExternalId) -> Self {
        let mut v = self.external_ids.unwrap_or_default();
        v.push(input);
        self.external_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of <code>ExternalId</code> objects that contains the identifiers issued to this resource by an external identity provider.</p>
    pub fn set_external_ids(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ExternalId>>) -> Self {
        self.external_ids = input;
        self
    }
    /// <p>A list of <code>ExternalId</code> objects that contains the identifiers issued to this resource by an external identity provider.</p>
    pub fn get_external_ids(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ExternalId>> {
        &self.external_ids
    }
    /// <p>The name of the user.</p>
    pub fn name(mut self, input: crate::types::Name) -> Self {
        self.name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the user.</p>
    pub fn set_name(mut self, input: ::std::option::Option<crate::types::Name>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the user.</p>
    pub fn get_name(&self) -> &::std::option::Option<crate::types::Name> {
        &self.name
    }
    /// <p>The display name of the user.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name of the user.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The display name of the user.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>An alternative descriptive name for the user.</p>
    pub fn nick_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.nick_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An alternative descriptive name for the user.</p>
    pub fn set_nick_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.nick_name = input;
        self
    }
    /// <p>An alternative descriptive name for the user.</p>
    pub fn get_nick_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.nick_name
    }
    /// <p>A URL link for the user's profile.</p>
    pub fn profile_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.profile_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A URL link for the user's profile.</p>
    pub fn set_profile_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.profile_url = input;
        self
    }
    /// <p>A URL link for the user's profile.</p>
    pub fn get_profile_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.profile_url
    }
    /// Appends an item to `emails`.
    ///
    /// To override the contents of this collection use [`set_emails`](Self::set_emails).
    ///
    /// <p>The email address of the user.</p>
    pub fn emails(mut self, input: crate::types::Email) -> Self {
        let mut v = self.emails.unwrap_or_default();
        v.push(input);
        self.emails = ::std::option::Option::Some(v);
        self
    }
    /// <p>The email address of the user.</p>
    pub fn set_emails(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Email>>) -> Self {
        self.emails = input;
        self
    }
    /// <p>The email address of the user.</p>
    pub fn get_emails(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Email>> {
        &self.emails
    }
    /// Appends an item to `addresses`.
    ///
    /// To override the contents of this collection use [`set_addresses`](Self::set_addresses).
    ///
    /// <p>The physical address of the user.</p>
    pub fn addresses(mut self, input: crate::types::Address) -> Self {
        let mut v = self.addresses.unwrap_or_default();
        v.push(input);
        self.addresses = ::std::option::Option::Some(v);
        self
    }
    /// <p>The physical address of the user.</p>
    pub fn set_addresses(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Address>>) -> Self {
        self.addresses = input;
        self
    }
    /// <p>The physical address of the user.</p>
    pub fn get_addresses(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Address>> {
        &self.addresses
    }
    /// Appends an item to `phone_numbers`.
    ///
    /// To override the contents of this collection use [`set_phone_numbers`](Self::set_phone_numbers).
    ///
    /// <p>A list of <code>PhoneNumber</code> objects associated with a user.</p>
    pub fn phone_numbers(mut self, input: crate::types::PhoneNumber) -> Self {
        let mut v = self.phone_numbers.unwrap_or_default();
        v.push(input);
        self.phone_numbers = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of <code>PhoneNumber</code> objects associated with a user.</p>
    pub fn set_phone_numbers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PhoneNumber>>) -> Self {
        self.phone_numbers = input;
        self
    }
    /// <p>A list of <code>PhoneNumber</code> objects associated with a user.</p>
    pub fn get_phone_numbers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PhoneNumber>> {
        &self.phone_numbers
    }
    /// <p>A string indicating the type of user.</p>
    pub fn user_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A string indicating the type of user.</p>
    pub fn set_user_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_type = input;
        self
    }
    /// <p>A string indicating the type of user.</p>
    pub fn get_user_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_type
    }
    /// <p>A string containing the title of the user.</p>
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A string containing the title of the user.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>A string containing the title of the user.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// <p>The preferred language of the user.</p>
    pub fn preferred_language(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.preferred_language = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The preferred language of the user.</p>
    pub fn set_preferred_language(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.preferred_language = input;
        self
    }
    /// <p>The preferred language of the user.</p>
    pub fn get_preferred_language(&self) -> &::std::option::Option<::std::string::String> {
        &self.preferred_language
    }
    /// <p>A string containing the geographical region or location of the user.</p>
    pub fn locale(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.locale = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A string containing the geographical region or location of the user.</p>
    pub fn set_locale(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.locale = input;
        self
    }
    /// <p>A string containing the geographical region or location of the user.</p>
    pub fn get_locale(&self) -> &::std::option::Option<::std::string::String> {
        &self.locale
    }
    /// <p>The time zone for a user.</p>
    pub fn timezone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.timezone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The time zone for a user.</p>
    pub fn set_timezone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.timezone = input;
        self
    }
    /// <p>The time zone for a user.</p>
    pub fn get_timezone(&self) -> &::std::option::Option<::std::string::String> {
        &self.timezone
    }
    /// <p>The globally unique identifier for the identity store.</p>
    /// This field is required.
    pub fn identity_store_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identity_store_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The globally unique identifier for the identity store.</p>
    pub fn set_identity_store_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identity_store_id = input;
        self
    }
    /// <p>The globally unique identifier for the identity store.</p>
    pub fn get_identity_store_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.identity_store_id
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeUserOutput`](crate::operation::describe_user::DescribeUserOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`user_id`](crate::operation::describe_user::builders::DescribeUserOutputBuilder::user_id)
    /// - [`identity_store_id`](crate::operation::describe_user::builders::DescribeUserOutputBuilder::identity_store_id)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::describe_user::DescribeUserOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::describe_user::DescribeUserOutput {
            user_name: self.user_name,
            user_id: self.user_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "user_id",
                    "user_id was not specified but it is required when building DescribeUserOutput",
                )
            })?,
            external_ids: self.external_ids,
            name: self.name,
            display_name: self.display_name,
            nick_name: self.nick_name,
            profile_url: self.profile_url,
            emails: self.emails,
            addresses: self.addresses,
            phone_numbers: self.phone_numbers,
            user_type: self.user_type,
            title: self.title,
            preferred_language: self.preferred_language,
            locale: self.locale,
            timezone: self.timezone,
            identity_store_id: self.identity_store_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "identity_store_id",
                    "identity_store_id was not specified but it is required when building DescribeUserOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for DescribeUserOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeUserOutputBuilder");
        formatter.field("user_name", &"*** Sensitive Data Redacted ***");
        formatter.field("user_id", &self.user_id);
        formatter.field("external_ids", &self.external_ids);
        formatter.field("name", &self.name);
        formatter.field("display_name", &"*** Sensitive Data Redacted ***");
        formatter.field("nick_name", &"*** Sensitive Data Redacted ***");
        formatter.field("profile_url", &"*** Sensitive Data Redacted ***");
        formatter.field("emails", &self.emails);
        formatter.field("addresses", &self.addresses);
        formatter.field("phone_numbers", &self.phone_numbers);
        formatter.field("user_type", &"*** Sensitive Data Redacted ***");
        formatter.field("title", &"*** Sensitive Data Redacted ***");
        formatter.field("preferred_language", &"*** Sensitive Data Redacted ***");
        formatter.field("locale", &"*** Sensitive Data Redacted ***");
        formatter.field("timezone", &"*** Sensitive Data Redacted ***");
        formatter.field("identity_store_id", &self.identity_store_id);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
