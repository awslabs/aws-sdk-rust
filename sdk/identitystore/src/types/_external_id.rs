// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The identifier issued to this resource by an external identity provider.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ExternalId {
    /// <p>The issuer for an external identifier.</p>
    pub issuer: ::std::string::String,
    /// <p>The identifier issued to this resource by an external identity provider.</p>
    pub id: ::std::string::String,
}
impl ExternalId {
    /// <p>The issuer for an external identifier.</p>
    pub fn issuer(&self) -> &str {
        use std::ops::Deref;
        self.issuer.deref()
    }
    /// <p>The identifier issued to this resource by an external identity provider.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
}
impl ::std::fmt::Debug for ExternalId {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ExternalId");
        formatter.field("issuer", &"*** Sensitive Data Redacted ***");
        formatter.field("id", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl ExternalId {
    /// Creates a new builder-style object to manufacture [`ExternalId`](crate::types::ExternalId).
    pub fn builder() -> crate::types::builders::ExternalIdBuilder {
        crate::types::builders::ExternalIdBuilder::default()
    }
}

/// A builder for [`ExternalId`](crate::types::ExternalId).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct ExternalIdBuilder {
    pub(crate) issuer: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
}
impl ExternalIdBuilder {
    /// <p>The issuer for an external identifier.</p>
    /// This field is required.
    pub fn issuer(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.issuer = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The issuer for an external identifier.</p>
    pub fn set_issuer(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.issuer = input;
        self
    }
    /// <p>The issuer for an external identifier.</p>
    pub fn get_issuer(&self) -> &::std::option::Option<::std::string::String> {
        &self.issuer
    }
    /// <p>The identifier issued to this resource by an external identity provider.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier issued to this resource by an external identity provider.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier issued to this resource by an external identity provider.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// Consumes the builder and constructs a [`ExternalId`](crate::types::ExternalId).
    /// This method will fail if any of the following fields are not set:
    /// - [`issuer`](crate::types::builders::ExternalIdBuilder::issuer)
    /// - [`id`](crate::types::builders::ExternalIdBuilder::id)
    pub fn build(self) -> ::std::result::Result<crate::types::ExternalId, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ExternalId {
            issuer: self.issuer.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "issuer",
                    "issuer was not specified but it is required when building ExternalId",
                )
            })?,
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building ExternalId",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for ExternalIdBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ExternalIdBuilder");
        formatter.field("issuer", &"*** Sensitive Data Redacted ***");
        formatter.field("id", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
