// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A unique identifier for a user or group that is not the primary identifier. This value can be an identifier from an external identity provider (IdP) that is associated with the user, the group, or a unique attribute. For example, a unique <code>GroupDisplayName</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum AlternateIdentifier {
    /// <p>The identifier issued to this resource by an external identity provider.</p>
    ExternalId(crate::types::ExternalId),
    /// <p>An entity attribute that's unique to a specific entity.</p>
    UniqueAttribute(crate::types::UniqueAttribute),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl AlternateIdentifier {
    /// Tries to convert the enum instance into [`ExternalId`](crate::types::AlternateIdentifier::ExternalId), extracting the inner [`ExternalId`](crate::types::ExternalId).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_external_id(&self) -> std::result::Result<&crate::types::ExternalId, &Self> {
        if let AlternateIdentifier::ExternalId(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`ExternalId`](crate::types::AlternateIdentifier::ExternalId).
    pub fn is_external_id(&self) -> bool {
        self.as_external_id().is_ok()
    }
    /// Tries to convert the enum instance into [`UniqueAttribute`](crate::types::AlternateIdentifier::UniqueAttribute), extracting the inner [`UniqueAttribute`](crate::types::UniqueAttribute).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_unique_attribute(
        &self,
    ) -> std::result::Result<&crate::types::UniqueAttribute, &Self> {
        if let AlternateIdentifier::UniqueAttribute(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`UniqueAttribute`](crate::types::AlternateIdentifier::UniqueAttribute).
    pub fn is_unique_attribute(&self) -> bool {
        self.as_unique_attribute().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
