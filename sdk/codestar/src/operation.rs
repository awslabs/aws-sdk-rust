// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `AssociateTeamMember`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`associate_team_member`](crate::client::fluent_builders::AssociateTeamMember).
///
/// `ParseStrictResponse` impl for `AssociateTeamMember`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct AssociateTeamMember {
    _private: (),
}
impl AssociateTeamMember {
    /// Creates a new builder-style object to manufacture [`AssociateTeamMemberInput`](crate::input::AssociateTeamMemberInput).
    pub fn builder() -> crate::input::associate_team_member_input::Builder {
        crate::input::associate_team_member_input::Builder::default()
    }
    /// Creates a new `AssociateTeamMember` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for AssociateTeamMember {
    type Output = std::result::Result<
        crate::output::AssociateTeamMemberOutput,
        crate::error::AssociateTeamMemberError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_associate_team_member::de_associate_team_member_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_associate_team_member::de_associate_team_member_http_response(response)
        }
    }
}

/// Operation shape for `CreateProject`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_project`](crate::client::fluent_builders::CreateProject).
///
/// `ParseStrictResponse` impl for `CreateProject`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateProject {
    _private: (),
}
impl CreateProject {
    /// Creates a new builder-style object to manufacture [`CreateProjectInput`](crate::input::CreateProjectInput).
    pub fn builder() -> crate::input::create_project_input::Builder {
        crate::input::create_project_input::Builder::default()
    }
    /// Creates a new `CreateProject` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateProject {
    type Output =
        std::result::Result<crate::output::CreateProjectOutput, crate::error::CreateProjectError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_project::de_create_project_http_error(response)
        } else {
            crate::protocol_serde::shape_create_project::de_create_project_http_response(response)
        }
    }
}

/// Operation shape for `CreateUserProfile`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_user_profile`](crate::client::fluent_builders::CreateUserProfile).
///
/// `ParseStrictResponse` impl for `CreateUserProfile`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateUserProfile {
    _private: (),
}
impl CreateUserProfile {
    /// Creates a new builder-style object to manufacture [`CreateUserProfileInput`](crate::input::CreateUserProfileInput).
    pub fn builder() -> crate::input::create_user_profile_input::Builder {
        crate::input::create_user_profile_input::Builder::default()
    }
    /// Creates a new `CreateUserProfile` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateUserProfile {
    type Output = std::result::Result<
        crate::output::CreateUserProfileOutput,
        crate::error::CreateUserProfileError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_user_profile::de_create_user_profile_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_create_user_profile::de_create_user_profile_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DeleteProject`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_project`](crate::client::fluent_builders::DeleteProject).
///
/// `ParseStrictResponse` impl for `DeleteProject`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteProject {
    _private: (),
}
impl DeleteProject {
    /// Creates a new builder-style object to manufacture [`DeleteProjectInput`](crate::input::DeleteProjectInput).
    pub fn builder() -> crate::input::delete_project_input::Builder {
        crate::input::delete_project_input::Builder::default()
    }
    /// Creates a new `DeleteProject` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteProject {
    type Output =
        std::result::Result<crate::output::DeleteProjectOutput, crate::error::DeleteProjectError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_project::de_delete_project_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_project::de_delete_project_http_response(response)
        }
    }
}

/// Operation shape for `DeleteUserProfile`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_user_profile`](crate::client::fluent_builders::DeleteUserProfile).
///
/// `ParseStrictResponse` impl for `DeleteUserProfile`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteUserProfile {
    _private: (),
}
impl DeleteUserProfile {
    /// Creates a new builder-style object to manufacture [`DeleteUserProfileInput`](crate::input::DeleteUserProfileInput).
    pub fn builder() -> crate::input::delete_user_profile_input::Builder {
        crate::input::delete_user_profile_input::Builder::default()
    }
    /// Creates a new `DeleteUserProfile` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteUserProfile {
    type Output = std::result::Result<
        crate::output::DeleteUserProfileOutput,
        crate::error::DeleteUserProfileError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_user_profile::de_delete_user_profile_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_delete_user_profile::de_delete_user_profile_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DescribeProject`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_project`](crate::client::fluent_builders::DescribeProject).
///
/// `ParseStrictResponse` impl for `DescribeProject`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeProject {
    _private: (),
}
impl DescribeProject {
    /// Creates a new builder-style object to manufacture [`DescribeProjectInput`](crate::input::DescribeProjectInput).
    pub fn builder() -> crate::input::describe_project_input::Builder {
        crate::input::describe_project_input::Builder::default()
    }
    /// Creates a new `DescribeProject` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeProject {
    type Output = std::result::Result<
        crate::output::DescribeProjectOutput,
        crate::error::DescribeProjectError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_project::de_describe_project_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_project::de_describe_project_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DescribeUserProfile`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_user_profile`](crate::client::fluent_builders::DescribeUserProfile).
///
/// `ParseStrictResponse` impl for `DescribeUserProfile`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeUserProfile {
    _private: (),
}
impl DescribeUserProfile {
    /// Creates a new builder-style object to manufacture [`DescribeUserProfileInput`](crate::input::DescribeUserProfileInput).
    pub fn builder() -> crate::input::describe_user_profile_input::Builder {
        crate::input::describe_user_profile_input::Builder::default()
    }
    /// Creates a new `DescribeUserProfile` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeUserProfile {
    type Output = std::result::Result<
        crate::output::DescribeUserProfileOutput,
        crate::error::DescribeUserProfileError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_user_profile::de_describe_user_profile_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_describe_user_profile::de_describe_user_profile_http_response(response)
        }
    }
}

/// Operation shape for `DisassociateTeamMember`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`disassociate_team_member`](crate::client::fluent_builders::DisassociateTeamMember).
///
/// `ParseStrictResponse` impl for `DisassociateTeamMember`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DisassociateTeamMember {
    _private: (),
}
impl DisassociateTeamMember {
    /// Creates a new builder-style object to manufacture [`DisassociateTeamMemberInput`](crate::input::DisassociateTeamMemberInput).
    pub fn builder() -> crate::input::disassociate_team_member_input::Builder {
        crate::input::disassociate_team_member_input::Builder::default()
    }
    /// Creates a new `DisassociateTeamMember` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DisassociateTeamMember {
    type Output = std::result::Result<
        crate::output::DisassociateTeamMemberOutput,
        crate::error::DisassociateTeamMemberError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_disassociate_team_member::de_disassociate_team_member_http_error(response)
        } else {
            crate::protocol_serde::shape_disassociate_team_member::de_disassociate_team_member_http_response(response)
        }
    }
}

/// Operation shape for `ListProjects`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_projects`](crate::client::fluent_builders::ListProjects).
///
/// `ParseStrictResponse` impl for `ListProjects`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListProjects {
    _private: (),
}
impl ListProjects {
    /// Creates a new builder-style object to manufacture [`ListProjectsInput`](crate::input::ListProjectsInput).
    pub fn builder() -> crate::input::list_projects_input::Builder {
        crate::input::list_projects_input::Builder::default()
    }
    /// Creates a new `ListProjects` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListProjects {
    type Output =
        std::result::Result<crate::output::ListProjectsOutput, crate::error::ListProjectsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_projects::de_list_projects_http_error(response)
        } else {
            crate::protocol_serde::shape_list_projects::de_list_projects_http_response(response)
        }
    }
}

/// Operation shape for `ListResources`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_resources`](crate::client::fluent_builders::ListResources).
///
/// `ParseStrictResponse` impl for `ListResources`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListResources {
    _private: (),
}
impl ListResources {
    /// Creates a new builder-style object to manufacture [`ListResourcesInput`](crate::input::ListResourcesInput).
    pub fn builder() -> crate::input::list_resources_input::Builder {
        crate::input::list_resources_input::Builder::default()
    }
    /// Creates a new `ListResources` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListResources {
    type Output =
        std::result::Result<crate::output::ListResourcesOutput, crate::error::ListResourcesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_resources::de_list_resources_http_error(response)
        } else {
            crate::protocol_serde::shape_list_resources::de_list_resources_http_response(response)
        }
    }
}

/// Operation shape for `ListTagsForProject`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_tags_for_project`](crate::client::fluent_builders::ListTagsForProject).
///
/// `ParseStrictResponse` impl for `ListTagsForProject`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListTagsForProject {
    _private: (),
}
impl ListTagsForProject {
    /// Creates a new builder-style object to manufacture [`ListTagsForProjectInput`](crate::input::ListTagsForProjectInput).
    pub fn builder() -> crate::input::list_tags_for_project_input::Builder {
        crate::input::list_tags_for_project_input::Builder::default()
    }
    /// Creates a new `ListTagsForProject` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListTagsForProject {
    type Output = std::result::Result<
        crate::output::ListTagsForProjectOutput,
        crate::error::ListTagsForProjectError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_tags_for_project::de_list_tags_for_project_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_tags_for_project::de_list_tags_for_project_http_response(response)
        }
    }
}

/// Operation shape for `ListTeamMembers`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_team_members`](crate::client::fluent_builders::ListTeamMembers).
///
/// `ParseStrictResponse` impl for `ListTeamMembers`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListTeamMembers {
    _private: (),
}
impl ListTeamMembers {
    /// Creates a new builder-style object to manufacture [`ListTeamMembersInput`](crate::input::ListTeamMembersInput).
    pub fn builder() -> crate::input::list_team_members_input::Builder {
        crate::input::list_team_members_input::Builder::default()
    }
    /// Creates a new `ListTeamMembers` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListTeamMembers {
    type Output = std::result::Result<
        crate::output::ListTeamMembersOutput,
        crate::error::ListTeamMembersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_team_members::de_list_team_members_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_team_members::de_list_team_members_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListUserProfiles`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_user_profiles`](crate::client::fluent_builders::ListUserProfiles).
///
/// `ParseStrictResponse` impl for `ListUserProfiles`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListUserProfiles {
    _private: (),
}
impl ListUserProfiles {
    /// Creates a new builder-style object to manufacture [`ListUserProfilesInput`](crate::input::ListUserProfilesInput).
    pub fn builder() -> crate::input::list_user_profiles_input::Builder {
        crate::input::list_user_profiles_input::Builder::default()
    }
    /// Creates a new `ListUserProfiles` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListUserProfiles {
    type Output = std::result::Result<
        crate::output::ListUserProfilesOutput,
        crate::error::ListUserProfilesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_user_profiles::de_list_user_profiles_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_user_profiles::de_list_user_profiles_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `TagProject`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`tag_project`](crate::client::fluent_builders::TagProject).
///
/// `ParseStrictResponse` impl for `TagProject`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct TagProject {
    _private: (),
}
impl TagProject {
    /// Creates a new builder-style object to manufacture [`TagProjectInput`](crate::input::TagProjectInput).
    pub fn builder() -> crate::input::tag_project_input::Builder {
        crate::input::tag_project_input::Builder::default()
    }
    /// Creates a new `TagProject` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for TagProject {
    type Output =
        std::result::Result<crate::output::TagProjectOutput, crate::error::TagProjectError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_tag_project::de_tag_project_http_error(response)
        } else {
            crate::protocol_serde::shape_tag_project::de_tag_project_http_response(response)
        }
    }
}

/// Operation shape for `UntagProject`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`untag_project`](crate::client::fluent_builders::UntagProject).
///
/// `ParseStrictResponse` impl for `UntagProject`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UntagProject {
    _private: (),
}
impl UntagProject {
    /// Creates a new builder-style object to manufacture [`UntagProjectInput`](crate::input::UntagProjectInput).
    pub fn builder() -> crate::input::untag_project_input::Builder {
        crate::input::untag_project_input::Builder::default()
    }
    /// Creates a new `UntagProject` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UntagProject {
    type Output =
        std::result::Result<crate::output::UntagProjectOutput, crate::error::UntagProjectError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_untag_project::de_untag_project_http_error(response)
        } else {
            crate::protocol_serde::shape_untag_project::de_untag_project_http_response(response)
        }
    }
}

/// Operation shape for `UpdateProject`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_project`](crate::client::fluent_builders::UpdateProject).
///
/// `ParseStrictResponse` impl for `UpdateProject`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateProject {
    _private: (),
}
impl UpdateProject {
    /// Creates a new builder-style object to manufacture [`UpdateProjectInput`](crate::input::UpdateProjectInput).
    pub fn builder() -> crate::input::update_project_input::Builder {
        crate::input::update_project_input::Builder::default()
    }
    /// Creates a new `UpdateProject` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateProject {
    type Output =
        std::result::Result<crate::output::UpdateProjectOutput, crate::error::UpdateProjectError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_project::de_update_project_http_error(response)
        } else {
            crate::protocol_serde::shape_update_project::de_update_project_http_response(response)
        }
    }
}

/// Operation shape for `UpdateTeamMember`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_team_member`](crate::client::fluent_builders::UpdateTeamMember).
///
/// `ParseStrictResponse` impl for `UpdateTeamMember`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateTeamMember {
    _private: (),
}
impl UpdateTeamMember {
    /// Creates a new builder-style object to manufacture [`UpdateTeamMemberInput`](crate::input::UpdateTeamMemberInput).
    pub fn builder() -> crate::input::update_team_member_input::Builder {
        crate::input::update_team_member_input::Builder::default()
    }
    /// Creates a new `UpdateTeamMember` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateTeamMember {
    type Output = std::result::Result<
        crate::output::UpdateTeamMemberOutput,
        crate::error::UpdateTeamMemberError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_team_member::de_update_team_member_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_update_team_member::de_update_team_member_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `UpdateUserProfile`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_user_profile`](crate::client::fluent_builders::UpdateUserProfile).
///
/// `ParseStrictResponse` impl for `UpdateUserProfile`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateUserProfile {
    _private: (),
}
impl UpdateUserProfile {
    /// Creates a new builder-style object to manufacture [`UpdateUserProfileInput`](crate::input::UpdateUserProfileInput).
    pub fn builder() -> crate::input::update_user_profile_input::Builder {
        crate::input::update_user_profile_input::Builder::default()
    }
    /// Creates a new `UpdateUserProfile` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateUserProfile {
    type Output = std::result::Result<
        crate::output::UpdateUserProfileOutput,
        crate::error::UpdateUserProfileError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_user_profile::de_update_user_profile_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_update_user_profile::de_update_user_profile_http_response(
                response,
            )
        }
    }
}

/// Operation customization and supporting types
pub mod customize;
