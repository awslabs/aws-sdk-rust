// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>Another modification is being made. That modification must complete before you can make your change.</p>
    ConcurrentModificationException(crate::error::ConcurrentModificationException),
    /// <p>The next token is not valid.</p>
    InvalidNextTokenException(crate::error::InvalidNextTokenException),
    /// <p>The service role is not valid.</p>
    InvalidServiceRoleException(crate::error::InvalidServiceRoleException),
    /// <p>A resource limit has been exceeded.</p>
    LimitExceededException(crate::error::LimitExceededException),
    /// <p>An AWS CodeStar project with the same ID already exists in this region for the AWS account. AWS CodeStar project IDs must be unique within a region for the AWS account.</p>
    ProjectAlreadyExistsException(crate::error::ProjectAlreadyExistsException),
    /// <p>Project configuration information is required but not specified.</p>
    ProjectConfigurationException(crate::error::ProjectConfigurationException),
    /// <p>The project creation request was valid, but a nonspecific exception or error occurred during project creation. The project could not be created in AWS CodeStar.</p>
    ProjectCreationFailedException(crate::error::ProjectCreationFailedException),
    /// <p>The specified AWS CodeStar project was not found.</p>
    ProjectNotFoundException(crate::error::ProjectNotFoundException),
    /// <p>The team member is already associated with a role in this project.</p>
    TeamMemberAlreadyAssociatedException(crate::error::TeamMemberAlreadyAssociatedException),
    /// <p>The specified team member was not found.</p>
    TeamMemberNotFoundException(crate::error::TeamMemberNotFoundException),
    /// <p>A user profile with that name already exists in this region for the AWS account. AWS CodeStar user profile names must be unique within a region for the AWS account. </p>
    UserProfileAlreadyExistsException(crate::error::UserProfileAlreadyExistsException),
    /// <p>The user profile was not found.</p>
    UserProfileNotFoundException(crate::error::UserProfileNotFoundException),
    /// <p>The specified input is either not valid, or it could not be validated.</p>
    ValidationException(crate::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ConcurrentModificationException(inner) => inner.fmt(f),
            Error::InvalidNextTokenException(inner) => inner.fmt(f),
            Error::InvalidServiceRoleException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::ProjectAlreadyExistsException(inner) => inner.fmt(f),
            Error::ProjectConfigurationException(inner) => inner.fmt(f),
            Error::ProjectCreationFailedException(inner) => inner.fmt(f),
            Error::ProjectNotFoundException(inner) => inner.fmt(f),
            Error::TeamMemberAlreadyAssociatedException(inner) => inner.fmt(f),
            Error::TeamMemberNotFoundException(inner) => inner.fmt(f),
            Error::UserProfileAlreadyExistsException(inner) => inner.fmt(f),
            Error::UserProfileNotFoundException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociateTeamMemberError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AssociateTeamMemberError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateTeamMemberError> for Error {
    fn from(err: crate::error::AssociateTeamMemberError) -> Self {
        match err {
            crate::error::AssociateTeamMemberError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::AssociateTeamMemberError::InvalidServiceRoleException(inner) => {
                Error::InvalidServiceRoleException(inner)
            }
            crate::error::AssociateTeamMemberError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::AssociateTeamMemberError::ProjectConfigurationException(inner) => {
                Error::ProjectConfigurationException(inner)
            }
            crate::error::AssociateTeamMemberError::ProjectNotFoundException(inner) => {
                Error::ProjectNotFoundException(inner)
            }
            crate::error::AssociateTeamMemberError::TeamMemberAlreadyAssociatedException(inner) => {
                Error::TeamMemberAlreadyAssociatedException(inner)
            }
            crate::error::AssociateTeamMemberError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::AssociateTeamMemberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateProjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateProjectError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateProjectError> for Error {
    fn from(err: crate::error::CreateProjectError) -> Self {
        match err {
            crate::error::CreateProjectError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::CreateProjectError::InvalidServiceRoleException(inner) => {
                Error::InvalidServiceRoleException(inner)
            }
            crate::error::CreateProjectError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateProjectError::ProjectAlreadyExistsException(inner) => {
                Error::ProjectAlreadyExistsException(inner)
            }
            crate::error::CreateProjectError::ProjectConfigurationException(inner) => {
                Error::ProjectConfigurationException(inner)
            }
            crate::error::CreateProjectError::ProjectCreationFailedException(inner) => {
                Error::ProjectCreationFailedException(inner)
            }
            crate::error::CreateProjectError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateUserProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateUserProfileError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateUserProfileError> for Error {
    fn from(err: crate::error::CreateUserProfileError) -> Self {
        match err {
            crate::error::CreateUserProfileError::UserProfileAlreadyExistsException(inner) => {
                Error::UserProfileAlreadyExistsException(inner)
            }
            crate::error::CreateUserProfileError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateUserProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteProjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteProjectError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteProjectError> for Error {
    fn from(err: crate::error::DeleteProjectError) -> Self {
        match err {
            crate::error::DeleteProjectError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::DeleteProjectError::InvalidServiceRoleException(inner) => {
                Error::InvalidServiceRoleException(inner)
            }
            crate::error::DeleteProjectError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteUserProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteUserProfileError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteUserProfileError> for Error {
    fn from(err: crate::error::DeleteUserProfileError) -> Self {
        match err {
            crate::error::DeleteUserProfileError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteUserProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeProjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeProjectError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeProjectError> for Error {
    fn from(err: crate::error::DescribeProjectError) -> Self {
        match err {
            crate::error::DescribeProjectError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::DescribeProjectError::InvalidServiceRoleException(inner) => {
                Error::InvalidServiceRoleException(inner)
            }
            crate::error::DescribeProjectError::ProjectConfigurationException(inner) => {
                Error::ProjectConfigurationException(inner)
            }
            crate::error::DescribeProjectError::ProjectNotFoundException(inner) => {
                Error::ProjectNotFoundException(inner)
            }
            crate::error::DescribeProjectError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeUserProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeUserProfileError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeUserProfileError> for Error {
    fn from(err: crate::error::DescribeUserProfileError) -> Self {
        match err {
            crate::error::DescribeUserProfileError::UserProfileNotFoundException(inner) => {
                Error::UserProfileNotFoundException(inner)
            }
            crate::error::DescribeUserProfileError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeUserProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisassociateTeamMemberError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DisassociateTeamMemberError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateTeamMemberError> for Error {
    fn from(err: crate::error::DisassociateTeamMemberError) -> Self {
        match err {
            crate::error::DisassociateTeamMemberError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::DisassociateTeamMemberError::InvalidServiceRoleException(inner) => {
                Error::InvalidServiceRoleException(inner)
            }
            crate::error::DisassociateTeamMemberError::ProjectNotFoundException(inner) => {
                Error::ProjectNotFoundException(inner)
            }
            crate::error::DisassociateTeamMemberError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DisassociateTeamMemberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListProjectsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListProjectsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListProjectsError> for Error {
    fn from(err: crate::error::ListProjectsError) -> Self {
        match err {
            crate::error::ListProjectsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListProjectsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListProjectsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListResourcesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListResourcesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListResourcesError> for Error {
    fn from(err: crate::error::ListResourcesError) -> Self {
        match err {
            crate::error::ListResourcesError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListResourcesError::ProjectNotFoundException(inner) => {
                Error::ProjectNotFoundException(inner)
            }
            crate::error::ListResourcesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListResourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForProjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForProjectError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForProjectError> for Error {
    fn from(err: crate::error::ListTagsForProjectError) -> Self {
        match err {
            crate::error::ListTagsForProjectError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListTagsForProjectError::ProjectNotFoundException(inner) => {
                Error::ProjectNotFoundException(inner)
            }
            crate::error::ListTagsForProjectError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListTagsForProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTeamMembersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListTeamMembersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTeamMembersError> for Error {
    fn from(err: crate::error::ListTeamMembersError) -> Self {
        match err {
            crate::error::ListTeamMembersError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListTeamMembersError::ProjectNotFoundException(inner) => {
                Error::ProjectNotFoundException(inner)
            }
            crate::error::ListTeamMembersError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListTeamMembersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListUserProfilesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListUserProfilesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListUserProfilesError> for Error {
    fn from(err: crate::error::ListUserProfilesError) -> Self {
        match err {
            crate::error::ListUserProfilesError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListUserProfilesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListUserProfilesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagProjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagProjectError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagProjectError> for Error {
    fn from(err: crate::error::TagProjectError) -> Self {
        match err {
            crate::error::TagProjectError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::TagProjectError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::TagProjectError::ProjectNotFoundException(inner) => {
                Error::ProjectNotFoundException(inner)
            }
            crate::error::TagProjectError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::TagProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagProjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagProjectError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagProjectError> for Error {
    fn from(err: crate::error::UntagProjectError) -> Self {
        match err {
            crate::error::UntagProjectError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::UntagProjectError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UntagProjectError::ProjectNotFoundException(inner) => {
                Error::ProjectNotFoundException(inner)
            }
            crate::error::UntagProjectError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UntagProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateProjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateProjectError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateProjectError> for Error {
    fn from(err: crate::error::UpdateProjectError) -> Self {
        match err {
            crate::error::UpdateProjectError::ProjectNotFoundException(inner) => {
                Error::ProjectNotFoundException(inner)
            }
            crate::error::UpdateProjectError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateTeamMemberError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateTeamMemberError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateTeamMemberError> for Error {
    fn from(err: crate::error::UpdateTeamMemberError) -> Self {
        match err {
            crate::error::UpdateTeamMemberError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::UpdateTeamMemberError::InvalidServiceRoleException(inner) => {
                Error::InvalidServiceRoleException(inner)
            }
            crate::error::UpdateTeamMemberError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateTeamMemberError::ProjectConfigurationException(inner) => {
                Error::ProjectConfigurationException(inner)
            }
            crate::error::UpdateTeamMemberError::ProjectNotFoundException(inner) => {
                Error::ProjectNotFoundException(inner)
            }
            crate::error::UpdateTeamMemberError::TeamMemberNotFoundException(inner) => {
                Error::TeamMemberNotFoundException(inner)
            }
            crate::error::UpdateTeamMemberError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateTeamMemberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateUserProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateUserProfileError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateUserProfileError> for Error {
    fn from(err: crate::error::UpdateUserProfileError) -> Self {
        match err {
            crate::error::UpdateUserProfileError::UserProfileNotFoundException(inner) => {
                Error::UserProfileNotFoundException(inner)
            }
            crate::error::UpdateUserProfileError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateUserProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::ConcurrentModificationException(e) => e.request_id(),
            Self::InvalidNextTokenException(e) => e.request_id(),
            Self::InvalidServiceRoleException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::ProjectAlreadyExistsException(e) => e.request_id(),
            Self::ProjectConfigurationException(e) => e.request_id(),
            Self::ProjectCreationFailedException(e) => e.request_id(),
            Self::ProjectNotFoundException(e) => e.request_id(),
            Self::TeamMemberAlreadyAssociatedException(e) => e.request_id(),
            Self::TeamMemberNotFoundException(e) => e.request_id(),
            Self::UserProfileAlreadyExistsException(e) => e.request_id(),
            Self::UserProfileNotFoundException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
