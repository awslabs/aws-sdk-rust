// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the GitHub repository to be created in AWS CodeStar. This is where the source code files provided with the project request will be uploaded after project creation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GitHubCodeDestination {
    /// <p>Name of the GitHub repository to be created in AWS CodeStar.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>Description for the GitHub repository to be created in AWS CodeStar. This description displays in GitHub after the repository is created.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The type of GitHub repository to be created in AWS CodeStar. Valid values are User or Organization.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
    /// <p>The GitHub username for the owner of the GitHub repository to be created in AWS CodeStar. If this repository should be owned by a GitHub organization, provide its name.</p>
    #[doc(hidden)]
    pub owner: std::option::Option<std::string::String>,
    /// <p>Whether the GitHub repository is to be a private repository.</p>
    #[doc(hidden)]
    pub private_repository: bool,
    /// <p>Whether to enable issues for the GitHub repository.</p>
    #[doc(hidden)]
    pub issues_enabled: bool,
    /// <p>The GitHub user's personal access token for the GitHub repository.</p>
    #[doc(hidden)]
    pub token: std::option::Option<std::string::String>,
}
impl GitHubCodeDestination {
    /// <p>Name of the GitHub repository to be created in AWS CodeStar.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Description for the GitHub repository to be created in AWS CodeStar. This description displays in GitHub after the repository is created.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The type of GitHub repository to be created in AWS CodeStar. Valid values are User or Organization.</p>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The GitHub username for the owner of the GitHub repository to be created in AWS CodeStar. If this repository should be owned by a GitHub organization, provide its name.</p>
    pub fn owner(&self) -> std::option::Option<&str> {
        self.owner.as_deref()
    }
    /// <p>Whether the GitHub repository is to be a private repository.</p>
    pub fn private_repository(&self) -> bool {
        self.private_repository
    }
    /// <p>Whether to enable issues for the GitHub repository.</p>
    pub fn issues_enabled(&self) -> bool {
        self.issues_enabled
    }
    /// <p>The GitHub user's personal access token for the GitHub repository.</p>
    pub fn token(&self) -> std::option::Option<&str> {
        self.token.as_deref()
    }
}
impl std::fmt::Debug for GitHubCodeDestination {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GitHubCodeDestination");
        formatter.field("name", &self.name);
        formatter.field("description", &self.description);
        formatter.field("r#type", &self.r#type);
        formatter.field("owner", &self.owner);
        formatter.field("private_repository", &self.private_repository);
        formatter.field("issues_enabled", &self.issues_enabled);
        formatter.field("token", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl GitHubCodeDestination {
    /// Creates a new builder-style object to manufacture [`GitHubCodeDestination`](crate::types::GitHubCodeDestination).
    pub fn builder() -> crate::types::builders::GitHubCodeDestinationBuilder {
        crate::types::builders::GitHubCodeDestinationBuilder::default()
    }
}

/// A builder for [`GitHubCodeDestination`](crate::types::GitHubCodeDestination).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct GitHubCodeDestinationBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<std::string::String>,
    pub(crate) owner: std::option::Option<std::string::String>,
    pub(crate) private_repository: std::option::Option<bool>,
    pub(crate) issues_enabled: std::option::Option<bool>,
    pub(crate) token: std::option::Option<std::string::String>,
}
impl GitHubCodeDestinationBuilder {
    /// <p>Name of the GitHub repository to be created in AWS CodeStar.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>Name of the GitHub repository to be created in AWS CodeStar.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Description for the GitHub repository to be created in AWS CodeStar. This description displays in GitHub after the repository is created.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>Description for the GitHub repository to be created in AWS CodeStar. This description displays in GitHub after the repository is created.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The type of GitHub repository to be created in AWS CodeStar. Valid values are User or Organization.</p>
    pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
        self.r#type = Some(input.into());
        self
    }
    /// <p>The type of GitHub repository to be created in AWS CodeStar. Valid values are User or Organization.</p>
    pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The GitHub username for the owner of the GitHub repository to be created in AWS CodeStar. If this repository should be owned by a GitHub organization, provide its name.</p>
    pub fn owner(mut self, input: impl Into<std::string::String>) -> Self {
        self.owner = Some(input.into());
        self
    }
    /// <p>The GitHub username for the owner of the GitHub repository to be created in AWS CodeStar. If this repository should be owned by a GitHub organization, provide its name.</p>
    pub fn set_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.owner = input;
        self
    }
    /// <p>Whether the GitHub repository is to be a private repository.</p>
    pub fn private_repository(mut self, input: bool) -> Self {
        self.private_repository = Some(input);
        self
    }
    /// <p>Whether the GitHub repository is to be a private repository.</p>
    pub fn set_private_repository(mut self, input: std::option::Option<bool>) -> Self {
        self.private_repository = input;
        self
    }
    /// <p>Whether to enable issues for the GitHub repository.</p>
    pub fn issues_enabled(mut self, input: bool) -> Self {
        self.issues_enabled = Some(input);
        self
    }
    /// <p>Whether to enable issues for the GitHub repository.</p>
    pub fn set_issues_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.issues_enabled = input;
        self
    }
    /// <p>The GitHub user's personal access token for the GitHub repository.</p>
    pub fn token(mut self, input: impl Into<std::string::String>) -> Self {
        self.token = Some(input.into());
        self
    }
    /// <p>The GitHub user's personal access token for the GitHub repository.</p>
    pub fn set_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.token = input;
        self
    }
    /// Consumes the builder and constructs a [`GitHubCodeDestination`](crate::types::GitHubCodeDestination).
    pub fn build(self) -> crate::types::GitHubCodeDestination {
        crate::types::GitHubCodeDestination {
            name: self.name,
            description: self.description,
            r#type: self.r#type,
            owner: self.owner,
            private_repository: self.private_repository.unwrap_or_default(),
            issues_enabled: self.issues_enabled.unwrap_or_default(),
            token: self.token,
        }
    }
}
impl std::fmt::Debug for GitHubCodeDestinationBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GitHubCodeDestinationBuilder");
        formatter.field("name", &self.name);
        formatter.field("description", &self.description);
        formatter.field("r#type", &self.r#type);
        formatter.field("owner", &self.owner);
        formatter.field("private_repository", &self.private_repository);
        formatter.field("issues_enabled", &self.issues_enabled);
        formatter.field("token", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
