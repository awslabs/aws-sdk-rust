// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a team member in a project.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TeamMember {
    /// <p>The Amazon Resource Name (ARN) of the user in IAM.</p>
    #[doc(hidden)]
    pub user_arn: std::option::Option<std::string::String>,
    /// <p>The role assigned to the user in the project. Project roles have different levels of access. For more information, see <a href="http://docs.aws.amazon.com/codestar/latest/userguide/working-with-teams.html">Working with Teams</a> in the <i>AWS CodeStar User Guide</i>. </p>
    #[doc(hidden)]
    pub project_role: std::option::Option<std::string::String>,
    /// <p>Whether the user is allowed to remotely access project resources using an SSH public/private key pair.</p>
    #[doc(hidden)]
    pub remote_access_allowed: std::option::Option<bool>,
}
impl TeamMember {
    /// <p>The Amazon Resource Name (ARN) of the user in IAM.</p>
    pub fn user_arn(&self) -> std::option::Option<&str> {
        self.user_arn.as_deref()
    }
    /// <p>The role assigned to the user in the project. Project roles have different levels of access. For more information, see <a href="http://docs.aws.amazon.com/codestar/latest/userguide/working-with-teams.html">Working with Teams</a> in the <i>AWS CodeStar User Guide</i>. </p>
    pub fn project_role(&self) -> std::option::Option<&str> {
        self.project_role.as_deref()
    }
    /// <p>Whether the user is allowed to remotely access project resources using an SSH public/private key pair.</p>
    pub fn remote_access_allowed(&self) -> std::option::Option<bool> {
        self.remote_access_allowed
    }
}
impl TeamMember {
    /// Creates a new builder-style object to manufacture [`TeamMember`](crate::types::TeamMember).
    pub fn builder() -> crate::types::builders::TeamMemberBuilder {
        crate::types::builders::TeamMemberBuilder::default()
    }
}

/// A builder for [`TeamMember`](crate::types::TeamMember).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TeamMemberBuilder {
    pub(crate) user_arn: std::option::Option<std::string::String>,
    pub(crate) project_role: std::option::Option<std::string::String>,
    pub(crate) remote_access_allowed: std::option::Option<bool>,
}
impl TeamMemberBuilder {
    /// <p>The Amazon Resource Name (ARN) of the user in IAM.</p>
    pub fn user_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the user in IAM.</p>
    pub fn set_user_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_arn = input;
        self
    }
    /// <p>The role assigned to the user in the project. Project roles have different levels of access. For more information, see <a href="http://docs.aws.amazon.com/codestar/latest/userguide/working-with-teams.html">Working with Teams</a> in the <i>AWS CodeStar User Guide</i>. </p>
    pub fn project_role(mut self, input: impl Into<std::string::String>) -> Self {
        self.project_role = Some(input.into());
        self
    }
    /// <p>The role assigned to the user in the project. Project roles have different levels of access. For more information, see <a href="http://docs.aws.amazon.com/codestar/latest/userguide/working-with-teams.html">Working with Teams</a> in the <i>AWS CodeStar User Guide</i>. </p>
    pub fn set_project_role(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.project_role = input;
        self
    }
    /// <p>Whether the user is allowed to remotely access project resources using an SSH public/private key pair.</p>
    pub fn remote_access_allowed(mut self, input: bool) -> Self {
        self.remote_access_allowed = Some(input);
        self
    }
    /// <p>Whether the user is allowed to remotely access project resources using an SSH public/private key pair.</p>
    pub fn set_remote_access_allowed(mut self, input: std::option::Option<bool>) -> Self {
        self.remote_access_allowed = input;
        self
    }
    /// Consumes the builder and constructs a [`TeamMember`](crate::types::TeamMember).
    pub fn build(self) -> crate::types::TeamMember {
        crate::types::TeamMember {
            user_arn: self.user_arn,
            project_role: self.project_role,
            remote_access_allowed: self.remote_access_allowed,
        }
    }
}
