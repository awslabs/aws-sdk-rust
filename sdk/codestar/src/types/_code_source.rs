// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The location where the source code files provided with the project request are stored. AWS CodeStar retrieves the files during project creation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CodeSource {
    /// <p>Information about the Amazon S3 location where the source code files provided with the project request are stored. </p>
    pub s3: ::std::option::Option<crate::types::S3Location>,
}
impl CodeSource {
    /// <p>Information about the Amazon S3 location where the source code files provided with the project request are stored. </p>
    pub fn s3(&self) -> ::std::option::Option<&crate::types::S3Location> {
        self.s3.as_ref()
    }
}
impl CodeSource {
    /// Creates a new builder-style object to manufacture [`CodeSource`](crate::types::CodeSource).
    pub fn builder() -> crate::types::builders::CodeSourceBuilder {
        crate::types::builders::CodeSourceBuilder::default()
    }
}

/// A builder for [`CodeSource`](crate::types::CodeSource).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CodeSourceBuilder {
    pub(crate) s3: ::std::option::Option<crate::types::S3Location>,
}
impl CodeSourceBuilder {
    /// <p>Information about the Amazon S3 location where the source code files provided with the project request are stored. </p>
    /// This field is required.
    pub fn s3(mut self, input: crate::types::S3Location) -> Self {
        self.s3 = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the Amazon S3 location where the source code files provided with the project request are stored. </p>
    pub fn set_s3(mut self, input: ::std::option::Option<crate::types::S3Location>) -> Self {
        self.s3 = input;
        self
    }
    /// <p>Information about the Amazon S3 location where the source code files provided with the project request are stored. </p>
    pub fn get_s3(&self) -> &::std::option::Option<crate::types::S3Location> {
        &self.s3
    }
    /// Consumes the builder and constructs a [`CodeSource`](crate::types::CodeSource).
    pub fn build(self) -> crate::types::CodeSource {
        crate::types::CodeSource { s3: self.s3 }
    }
}
