// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UntagProjectInput {
    /// <p>The ID of the project to remove tags from.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The tags to remove from the project.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl UntagProjectInput {
    /// <p>The ID of the project to remove tags from.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The tags to remove from the project.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[::std::string::String] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl UntagProjectInput {
    /// Creates a new builder-style object to manufacture [`UntagProjectInput`](crate::operation::untag_project::UntagProjectInput).
    pub fn builder() -> crate::operation::untag_project::builders::UntagProjectInputBuilder {
        crate::operation::untag_project::builders::UntagProjectInputBuilder::default()
    }
}

/// A builder for [`UntagProjectInput`](crate::operation::untag_project::UntagProjectInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UntagProjectInputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl UntagProjectInputBuilder {
    /// <p>The ID of the project to remove tags from.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the project to remove tags from.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the project to remove tags from.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to remove from the project.</p>
    pub fn tags(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input.into());
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags to remove from the project.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags to remove from the project.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`UntagProjectInput`](crate::operation::untag_project::UntagProjectInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::untag_project::UntagProjectInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::untag_project::UntagProjectInput {
            id: self.id,
            tags: self.tags,
        })
    }
}
