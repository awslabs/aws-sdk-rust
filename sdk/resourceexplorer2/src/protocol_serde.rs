// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn type_erase_result<O, E>(
    result: ::std::result::Result<O, E>,
) -> ::std::result::Result<
    ::aws_smithy_runtime_api::client::interceptors::context::Output,
    ::aws_smithy_runtime_api::client::orchestrator::OrchestratorError<::aws_smithy_runtime_api::client::interceptors::context::Error>,
>
where
    O: ::std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
    E: ::std::error::Error + std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
{
    result
        .map(|output| ::aws_smithy_runtime_api::client::interceptors::context::Output::erase(output))
        .map_err(|error| ::aws_smithy_runtime_api::client::interceptors::context::Error::erase(error))
        .map_err(::std::convert::Into::into)
}

pub fn parse_http_error_metadata(
    _response_status: u16,
    response_headers: &::aws_smithy_runtime_api::http::Headers,
    response_body: &[u8],
) -> Result<::aws_smithy_types::error::metadata::Builder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    crate::json_errors::parse_error_metadata(response_body, response_headers)
}

pub(crate) mod shape_associate_default_view;

pub(crate) mod shape_batch_get_view;

pub(crate) mod shape_create_index;

pub(crate) mod shape_create_view;

pub(crate) mod shape_delete_index;

pub(crate) mod shape_delete_view;

pub(crate) mod shape_disassociate_default_view;

pub(crate) mod shape_get_account_level_service_configuration;

pub(crate) mod shape_get_default_view;

pub(crate) mod shape_get_index;

pub(crate) mod shape_get_view;

pub(crate) mod shape_list_indexes;

pub(crate) mod shape_list_indexes_for_members;

pub(crate) mod shape_list_resources;

pub(crate) mod shape_list_supported_resource_types;

pub(crate) mod shape_list_tags_for_resource;

pub(crate) mod shape_list_views;

pub(crate) mod shape_search;

pub(crate) mod shape_tag_resource;

pub(crate) mod shape_untag_resource;

pub(crate) mod shape_update_index_type;

pub(crate) mod shape_update_view;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_access_denied_exception;

pub(crate) mod shape_associate_default_view_input;

pub(crate) mod shape_batch_get_view_input;

pub(crate) mod shape_conflict_exception;

pub(crate) mod shape_create_index_input;

pub(crate) mod shape_create_view_input;

pub(crate) mod shape_delete_index_input;

pub(crate) mod shape_delete_view_input;

pub(crate) mod shape_get_view_input;

pub(crate) mod shape_internal_server_exception;

pub(crate) mod shape_list_indexes_for_members_input;

pub(crate) mod shape_list_indexes_input;

pub(crate) mod shape_list_resources_input;

pub(crate) mod shape_list_supported_resource_types_input;

pub(crate) mod shape_list_views_input;

pub(crate) mod shape_resource_not_found_exception;

pub(crate) mod shape_search_input;

pub(crate) mod shape_service_quota_exceeded_exception;

pub(crate) mod shape_tag_resource_input;

pub(crate) mod shape_throttling_exception;

pub(crate) mod shape_unauthorized_exception;

pub(crate) mod shape_update_index_type_input;

pub(crate) mod shape_update_view_input;

pub(crate) mod shape_validation_exception;

pub(crate) mod shape_batch_get_view_errors;

pub(crate) mod shape_included_property;

pub(crate) mod shape_index_list;

pub(crate) mod shape_member_index_list;

pub(crate) mod shape_org_configuration;

pub(crate) mod shape_region_list;

pub(crate) mod shape_resource_count;

pub(crate) mod shape_resource_list;

pub(crate) mod shape_resource_type_list;

pub(crate) mod shape_search_filter;

pub(crate) mod shape_tag_map;

pub(crate) mod shape_validation_exception_field_list;

pub(crate) mod shape_view;

pub(crate) mod shape_view_arn_list;

pub(crate) mod shape_view_list;

pub(crate) mod shape_batch_get_view_error;

pub(crate) mod shape_included_property_list;

pub(crate) mod shape_index;

pub(crate) mod shape_member_index;

pub(crate) mod shape_resource;

pub(crate) mod shape_supported_resource_type;

pub(crate) mod shape_validation_exception_field;

pub(crate) mod shape_resource_property_list;

pub(crate) mod shape_resource_property;
