// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_indexes_output_next_token(
    input: &crate::operation::list_indexes::ListIndexesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_supported_resource_types_output_next_token(
    input: &crate::operation::list_supported_resource_types::ListSupportedResourceTypesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_views_output_next_token(
    input: &crate::operation::list_views::ListViewsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_search_output_next_token(
    input: &crate::operation::search::SearchOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_indexes_output_indexes(
    input: crate::operation::list_indexes::ListIndexesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Index>> {
    let input = match input.indexes {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_supported_resource_types_output_resource_types(
    input: crate::operation::list_supported_resource_types::ListSupportedResourceTypesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::SupportedResourceType>> {
    let input = match input.resource_types {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_views_output_views(
    input: crate::operation::list_views::ListViewsOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.views {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_search_output_resources(
    input: crate::operation::search::SearchOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Resource>> {
    let input = match input.resources {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
