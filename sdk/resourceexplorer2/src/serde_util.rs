// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_get_view_error_correct_errors(
    mut builder: crate::types::builders::BatchGetViewErrorBuilder,
) -> crate::types::builders::BatchGetViewErrorBuilder {
    if builder.view_arn.is_none() {
        builder.view_arn = Some(Default::default())
    }
    if builder.error_message.is_none() {
        builder.error_message = Some(Default::default())
    }
    builder
}

pub(crate) fn search_filter_correct_errors(mut builder: crate::types::builders::SearchFilterBuilder) -> crate::types::builders::SearchFilterBuilder {
    if builder.filter_string.is_none() {
        builder.filter_string = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.validation_issue.is_none() {
        builder.validation_issue = Some(Default::default())
    }
    builder
}

pub(crate) fn included_property_correct_errors(
    mut builder: crate::types::builders::IncludedPropertyBuilder,
) -> crate::types::builders::IncludedPropertyBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}
