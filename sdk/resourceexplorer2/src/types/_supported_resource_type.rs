// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that describes a resource type supported by Amazon Web Services Resource Explorer.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SupportedResourceType {
    /// <p>The Amazon Web Service that is associated with the resource type. This is the primary service that lets you create and interact with resources of this type.</p>
    #[doc(hidden)]
    pub service: std::option::Option<std::string::String>,
    /// <p>The unique identifier of the resource type.</p>
    #[doc(hidden)]
    pub resource_type: std::option::Option<std::string::String>,
}
impl SupportedResourceType {
    /// <p>The Amazon Web Service that is associated with the resource type. This is the primary service that lets you create and interact with resources of this type.</p>
    pub fn service(&self) -> std::option::Option<&str> {
        self.service.as_deref()
    }
    /// <p>The unique identifier of the resource type.</p>
    pub fn resource_type(&self) -> std::option::Option<&str> {
        self.resource_type.as_deref()
    }
}
impl SupportedResourceType {
    /// Creates a new builder-style object to manufacture [`SupportedResourceType`](crate::types::SupportedResourceType).
    pub fn builder() -> crate::types::builders::SupportedResourceTypeBuilder {
        crate::types::builders::SupportedResourceTypeBuilder::default()
    }
}

/// A builder for [`SupportedResourceType`](crate::types::SupportedResourceType).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SupportedResourceTypeBuilder {
    pub(crate) service: std::option::Option<std::string::String>,
    pub(crate) resource_type: std::option::Option<std::string::String>,
}
impl SupportedResourceTypeBuilder {
    /// <p>The Amazon Web Service that is associated with the resource type. This is the primary service that lets you create and interact with resources of this type.</p>
    pub fn service(mut self, input: impl Into<std::string::String>) -> Self {
        self.service = Some(input.into());
        self
    }
    /// <p>The Amazon Web Service that is associated with the resource type. This is the primary service that lets you create and interact with resources of this type.</p>
    pub fn set_service(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.service = input;
        self
    }
    /// <p>The unique identifier of the resource type.</p>
    pub fn resource_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_type = Some(input.into());
        self
    }
    /// <p>The unique identifier of the resource type.</p>
    pub fn set_resource_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_type = input;
        self
    }
    /// Consumes the builder and constructs a [`SupportedResourceType`](crate::types::SupportedResourceType).
    pub fn build(self) -> crate::types::SupportedResourceType {
        crate::types::SupportedResourceType {
            service: self.service,
            resource_type: self.resource_type,
        }
    }
}
