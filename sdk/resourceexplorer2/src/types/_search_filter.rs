// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A search filter defines which resources can be part of a search query result set.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct SearchFilter {
    /// <p>The string that contains the search keywords, prefixes, and operators to control the results that can be returned by a <code>Search</code> operation. For more details, see <a href="https://docs.aws.amazon.com/resource-explorer/latest/APIReference/about-query-syntax.html">Search query syntax</a>.</p>
    pub filter_string: ::std::string::String,
}
impl SearchFilter {
    /// <p>The string that contains the search keywords, prefixes, and operators to control the results that can be returned by a <code>Search</code> operation. For more details, see <a href="https://docs.aws.amazon.com/resource-explorer/latest/APIReference/about-query-syntax.html">Search query syntax</a>.</p>
    pub fn filter_string(&self) -> &str {
        use std::ops::Deref;
        self.filter_string.deref()
    }
}
impl ::std::fmt::Debug for SearchFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SearchFilter");
        formatter.field("filter_string", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl SearchFilter {
    /// Creates a new builder-style object to manufacture [`SearchFilter`](crate::types::SearchFilter).
    pub fn builder() -> crate::types::builders::SearchFilterBuilder {
        crate::types::builders::SearchFilterBuilder::default()
    }
}

/// A builder for [`SearchFilter`](crate::types::SearchFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct SearchFilterBuilder {
    pub(crate) filter_string: ::std::option::Option<::std::string::String>,
}
impl SearchFilterBuilder {
    /// <p>The string that contains the search keywords, prefixes, and operators to control the results that can be returned by a <code>Search</code> operation. For more details, see <a href="https://docs.aws.amazon.com/resource-explorer/latest/APIReference/about-query-syntax.html">Search query syntax</a>.</p>
    /// This field is required.
    pub fn filter_string(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.filter_string = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The string that contains the search keywords, prefixes, and operators to control the results that can be returned by a <code>Search</code> operation. For more details, see <a href="https://docs.aws.amazon.com/resource-explorer/latest/APIReference/about-query-syntax.html">Search query syntax</a>.</p>
    pub fn set_filter_string(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.filter_string = input;
        self
    }
    /// <p>The string that contains the search keywords, prefixes, and operators to control the results that can be returned by a <code>Search</code> operation. For more details, see <a href="https://docs.aws.amazon.com/resource-explorer/latest/APIReference/about-query-syntax.html">Search query syntax</a>.</p>
    pub fn get_filter_string(&self) -> &::std::option::Option<::std::string::String> {
        &self.filter_string
    }
    /// Consumes the builder and constructs a [`SearchFilter`](crate::types::SearchFilter).
    /// This method will fail if any of the following fields are not set:
    /// - [`filter_string`](crate::types::builders::SearchFilterBuilder::filter_string)
    pub fn build(self) -> ::std::result::Result<crate::types::SearchFilter, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SearchFilter {
            filter_string: self.filter_string.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "filter_string",
                    "filter_string was not specified but it is required when building SearchFilter",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for SearchFilterBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SearchFilterBuilder");
        formatter.field("filter_string", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
