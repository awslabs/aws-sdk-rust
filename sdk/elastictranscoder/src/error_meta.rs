// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>General authentication failure. The request was not signed correctly.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    #[allow(missing_docs)] // documentation missing in model
    IncompatibleVersionException(crate::error::IncompatibleVersionException),
    /// <p>Elastic Transcoder encountered an unexpected exception while trying to fulfill the request.</p>
    InternalServiceException(crate::error::InternalServiceException),
    /// <p>Too many operations for a given AWS account. For example, the number of pipelines exceeds the maximum allowed.</p>
    LimitExceededException(crate::error::LimitExceededException),
    /// <p>The resource you are attempting to change is in use. For example, you are attempting to delete a pipeline that is currently in use.</p>
    ResourceInUseException(crate::error::ResourceInUseException),
    /// <p>The requested resource does not exist or is not available. For example, the pipeline to which you're trying to add a job doesn't exist or is still being created.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>One or more required parameter values were not provided in the request.</p>
    ValidationException(crate::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::IncompatibleVersionException(inner) => inner.fmt(f),
            Error::InternalServiceException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::ResourceInUseException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CancelJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CancelJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CancelJobError> for Error {
    fn from(err: crate::error::CancelJobError) -> Self {
        match err {
            crate::error::CancelJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CancelJobError::IncompatibleVersionException(inner) => {
                Error::IncompatibleVersionException(inner)
            }
            crate::error::CancelJobError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CancelJobError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::CancelJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CancelJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CancelJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateJobError> for Error {
    fn from(err: crate::error::CreateJobError) -> Self {
        match err {
            crate::error::CreateJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateJobError::IncompatibleVersionException(inner) => {
                Error::IncompatibleVersionException(inner)
            }
            crate::error::CreateJobError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CreateJobError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreatePipelineError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreatePipelineError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreatePipelineError> for Error {
    fn from(err: crate::error::CreatePipelineError) -> Self {
        match err {
            crate::error::CreatePipelineError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreatePipelineError::IncompatibleVersionException(inner) => {
                Error::IncompatibleVersionException(inner)
            }
            crate::error::CreatePipelineError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CreatePipelineError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreatePipelineError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreatePipelineError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreatePipelineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreatePresetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreatePresetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreatePresetError> for Error {
    fn from(err: crate::error::CreatePresetError) -> Self {
        match err {
            crate::error::CreatePresetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreatePresetError::IncompatibleVersionException(inner) => {
                Error::IncompatibleVersionException(inner)
            }
            crate::error::CreatePresetError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CreatePresetError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreatePresetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreatePresetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeletePipelineError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeletePipelineError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeletePipelineError> for Error {
    fn from(err: crate::error::DeletePipelineError) -> Self {
        match err {
            crate::error::DeletePipelineError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeletePipelineError::IncompatibleVersionException(inner) => {
                Error::IncompatibleVersionException(inner)
            }
            crate::error::DeletePipelineError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DeletePipelineError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::DeletePipelineError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeletePipelineError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeletePipelineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeletePresetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeletePresetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeletePresetError> for Error {
    fn from(err: crate::error::DeletePresetError) -> Self {
        match err {
            crate::error::DeletePresetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeletePresetError::IncompatibleVersionException(inner) => {
                Error::IncompatibleVersionException(inner)
            }
            crate::error::DeletePresetError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DeletePresetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeletePresetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeletePresetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListJobsByPipelineError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListJobsByPipelineError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListJobsByPipelineError> for Error {
    fn from(err: crate::error::ListJobsByPipelineError) -> Self {
        match err {
            crate::error::ListJobsByPipelineError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListJobsByPipelineError::IncompatibleVersionException(inner) => {
                Error::IncompatibleVersionException(inner)
            }
            crate::error::ListJobsByPipelineError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListJobsByPipelineError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListJobsByPipelineError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListJobsByPipelineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListJobsByStatusError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListJobsByStatusError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListJobsByStatusError> for Error {
    fn from(err: crate::error::ListJobsByStatusError) -> Self {
        match err {
            crate::error::ListJobsByStatusError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListJobsByStatusError::IncompatibleVersionException(inner) => {
                Error::IncompatibleVersionException(inner)
            }
            crate::error::ListJobsByStatusError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListJobsByStatusError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListJobsByStatusError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListJobsByStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListPipelinesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListPipelinesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListPipelinesError> for Error {
    fn from(err: crate::error::ListPipelinesError) -> Self {
        match err {
            crate::error::ListPipelinesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListPipelinesError::IncompatibleVersionException(inner) => {
                Error::IncompatibleVersionException(inner)
            }
            crate::error::ListPipelinesError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListPipelinesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListPipelinesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListPresetsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListPresetsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListPresetsError> for Error {
    fn from(err: crate::error::ListPresetsError) -> Self {
        match err {
            crate::error::ListPresetsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListPresetsError::IncompatibleVersionException(inner) => {
                Error::IncompatibleVersionException(inner)
            }
            crate::error::ListPresetsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListPresetsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListPresetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ReadJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ReadJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ReadJobError> for Error {
    fn from(err: crate::error::ReadJobError) -> Self {
        match err {
            crate::error::ReadJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ReadJobError::IncompatibleVersionException(inner) => {
                Error::IncompatibleVersionException(inner)
            }
            crate::error::ReadJobError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ReadJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ReadJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ReadJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ReadPipelineError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ReadPipelineError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ReadPipelineError> for Error {
    fn from(err: crate::error::ReadPipelineError) -> Self {
        match err {
            crate::error::ReadPipelineError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ReadPipelineError::IncompatibleVersionException(inner) => {
                Error::IncompatibleVersionException(inner)
            }
            crate::error::ReadPipelineError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ReadPipelineError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ReadPipelineError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ReadPipelineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ReadPresetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ReadPresetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ReadPresetError> for Error {
    fn from(err: crate::error::ReadPresetError) -> Self {
        match err {
            crate::error::ReadPresetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ReadPresetError::IncompatibleVersionException(inner) => {
                Error::IncompatibleVersionException(inner)
            }
            crate::error::ReadPresetError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ReadPresetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ReadPresetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ReadPresetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TestRoleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TestRoleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TestRoleError> for Error {
    fn from(err: crate::error::TestRoleError) -> Self {
        match err {
            crate::error::TestRoleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::TestRoleError::IncompatibleVersionException(inner) => {
                Error::IncompatibleVersionException(inner)
            }
            crate::error::TestRoleError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::TestRoleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::TestRoleError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::TestRoleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdatePipelineError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdatePipelineError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdatePipelineError> for Error {
    fn from(err: crate::error::UpdatePipelineError) -> Self {
        match err {
            crate::error::UpdatePipelineError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdatePipelineError::IncompatibleVersionException(inner) => {
                Error::IncompatibleVersionException(inner)
            }
            crate::error::UpdatePipelineError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdatePipelineError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::UpdatePipelineError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdatePipelineError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdatePipelineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdatePipelineNotificationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdatePipelineNotificationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdatePipelineNotificationsError> for Error {
    fn from(err: crate::error::UpdatePipelineNotificationsError) -> Self {
        match err {
            crate::error::UpdatePipelineNotificationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdatePipelineNotificationsError::IncompatibleVersionException(inner) => {
                Error::IncompatibleVersionException(inner)
            }
            crate::error::UpdatePipelineNotificationsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdatePipelineNotificationsError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::UpdatePipelineNotificationsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdatePipelineNotificationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdatePipelineNotificationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdatePipelineStatusError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdatePipelineStatusError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdatePipelineStatusError> for Error {
    fn from(err: crate::error::UpdatePipelineStatusError) -> Self {
        match err {
            crate::error::UpdatePipelineStatusError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdatePipelineStatusError::IncompatibleVersionException(inner) => {
                Error::IncompatibleVersionException(inner)
            }
            crate::error::UpdatePipelineStatusError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdatePipelineStatusError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::UpdatePipelineStatusError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdatePipelineStatusError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdatePipelineStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::IncompatibleVersionException(e) => e.request_id(),
            Self::InternalServiceException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::ResourceInUseException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
