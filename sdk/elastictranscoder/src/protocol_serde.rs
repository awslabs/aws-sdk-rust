// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn parse_http_error_metadata(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    aws_smithy_types::error::metadata::Builder,
    aws_smithy_json::deserialize::error::DeserializeError,
> {
    crate::json_errors::parse_error_metadata(response.body(), response.headers())
}

pub(crate) mod shape_cancel_job;

pub(crate) mod shape_create_job;

pub(crate) mod shape_create_pipeline;

pub(crate) mod shape_create_preset;

pub(crate) mod shape_delete_pipeline;

pub(crate) mod shape_delete_preset;

pub(crate) mod shape_list_jobs_by_pipeline;

pub(crate) mod shape_list_jobs_by_status;

pub(crate) mod shape_list_pipelines;

pub(crate) mod shape_list_presets;

pub(crate) mod shape_read_job;

pub(crate) mod shape_read_pipeline;

pub(crate) mod shape_read_preset;

pub(crate) mod shape_test_role;

pub(crate) mod shape_update_pipeline;

pub(crate) mod shape_update_pipeline_notifications;

pub(crate) mod shape_update_pipeline_status;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_access_denied_exception;

pub(crate) mod shape_create_job_input;

pub(crate) mod shape_create_pipeline_input;

pub(crate) mod shape_create_preset_input;

pub(crate) mod shape_incompatible_version_exception;

pub(crate) mod shape_internal_service_exception;

pub(crate) mod shape_limit_exceeded_exception;

pub(crate) mod shape_resource_in_use_exception;

pub(crate) mod shape_resource_not_found_exception;

pub(crate) mod shape_test_role_input;

pub(crate) mod shape_update_pipeline_input;

pub(crate) mod shape_update_pipeline_notifications_input;

pub(crate) mod shape_update_pipeline_status_input;

pub(crate) mod shape_validation_exception;

pub(crate) mod shape_audio_parameters;

pub(crate) mod shape_create_job_output;

pub(crate) mod shape_create_job_playlist;

pub(crate) mod shape_exception_messages;

pub(crate) mod shape_job;

pub(crate) mod shape_job_input;

pub(crate) mod shape_jobs;

pub(crate) mod shape_notifications;

pub(crate) mod shape_pipeline;

pub(crate) mod shape_pipeline_output_config;

pub(crate) mod shape_pipelines;

pub(crate) mod shape_preset;

pub(crate) mod shape_presets;

pub(crate) mod shape_thumbnails;

pub(crate) mod shape_video_parameters;

pub(crate) mod shape_warnings;

pub(crate) mod shape_audio_codec_options;

pub(crate) mod shape_captions;

pub(crate) mod shape_clip;

pub(crate) mod shape_detected_properties;

pub(crate) mod shape_encryption;

pub(crate) mod shape_hls_content_protection;

pub(crate) mod shape_input_captions;

pub(crate) mod shape_job_album_art;

pub(crate) mod shape_job_inputs;

pub(crate) mod shape_job_output;

pub(crate) mod shape_job_outputs;

pub(crate) mod shape_job_watermark;

pub(crate) mod shape_permission;

pub(crate) mod shape_play_ready_drm;

pub(crate) mod shape_playlists;

pub(crate) mod shape_preset_watermark;

pub(crate) mod shape_time_span;

pub(crate) mod shape_timing;

pub(crate) mod shape_user_metadata;

pub(crate) mod shape_warning;

pub(crate) mod shape_artwork;

pub(crate) mod shape_caption_format;

pub(crate) mod shape_caption_source;

pub(crate) mod shape_codec_options;

pub(crate) mod shape_composition;

pub(crate) mod shape_job_watermarks;

pub(crate) mod shape_permissions;

pub(crate) mod shape_playlist;

pub(crate) mod shape_preset_watermarks;

pub(crate) mod shape_artworks;

pub(crate) mod shape_caption_formats;

pub(crate) mod shape_caption_sources;

pub(crate) mod shape_output_keys;

pub(crate) mod shape_access_controls;
