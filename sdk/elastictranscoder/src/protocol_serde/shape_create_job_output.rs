// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_job_output(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::CreateJobOutput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.key {
        object.key("Key").string(var_1.as_str());
    }
    if let Some(var_2) = &input.thumbnail_pattern {
        object.key("ThumbnailPattern").string(var_2.as_str());
    }
    if let Some(var_3) = &input.thumbnail_encryption {
        #[allow(unused_mut)]
        let mut object_4 = object.key("ThumbnailEncryption").start_object();
        crate::protocol_serde::shape_encryption::ser_encryption(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.rotate {
        object.key("Rotate").string(var_5.as_str());
    }
    if let Some(var_6) = &input.preset_id {
        object.key("PresetId").string(var_6.as_str());
    }
    if let Some(var_7) = &input.segment_duration {
        object.key("SegmentDuration").string(var_7.as_str());
    }
    if let Some(var_8) = &input.watermarks {
        let mut array_9 = object.key("Watermarks").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_job_watermark::ser_job_watermark(
                    &mut object_11,
                    item_10,
                )?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.album_art {
        #[allow(unused_mut)]
        let mut object_13 = object.key("AlbumArt").start_object();
        crate::protocol_serde::shape_job_album_art::ser_job_album_art(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.composition {
        let mut array_15 = object.key("Composition").start_array();
        for item_16 in var_14 {
            {
                #[allow(unused_mut)]
                let mut object_17 = array_15.value().start_object();
                crate::protocol_serde::shape_clip::ser_clip(&mut object_17, item_16)?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    if let Some(var_18) = &input.captions {
        #[allow(unused_mut)]
        let mut object_19 = object.key("Captions").start_object();
        crate::protocol_serde::shape_captions::ser_captions(&mut object_19, var_18)?;
        object_19.finish();
    }
    if let Some(var_20) = &input.encryption {
        #[allow(unused_mut)]
        let mut object_21 = object.key("Encryption").start_object();
        crate::protocol_serde::shape_encryption::ser_encryption(&mut object_21, var_20)?;
        object_21.finish();
    }
    Ok(())
}
