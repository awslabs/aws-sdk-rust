// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::JobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.key {
        object.key("Key").string(var_1.as_str());
    }
    if let Some(var_2) = &input.frame_rate {
        object.key("FrameRate").string(var_2.as_str());
    }
    if let Some(var_3) = &input.resolution {
        object.key("Resolution").string(var_3.as_str());
    }
    if let Some(var_4) = &input.aspect_ratio {
        object.key("AspectRatio").string(var_4.as_str());
    }
    if let Some(var_5) = &input.interlaced {
        object.key("Interlaced").string(var_5.as_str());
    }
    if let Some(var_6) = &input.container {
        object.key("Container").string(var_6.as_str());
    }
    if let Some(var_7) = &input.encryption {
        #[allow(unused_mut)]
        let mut object_8 = object.key("Encryption").start_object();
        crate::protocol_serde::shape_encryption::ser_encryption(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.time_span {
        #[allow(unused_mut)]
        let mut object_10 = object.key("TimeSpan").start_object();
        crate::protocol_serde::shape_time_span::ser_time_span(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.input_captions {
        #[allow(unused_mut)]
        let mut object_12 = object.key("InputCaptions").start_object();
        crate::protocol_serde::shape_input_captions::ser_input_captions(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.detected_properties {
        #[allow(unused_mut)]
        let mut object_14 = object.key("DetectedProperties").start_object();
        crate::protocol_serde::shape_detected_properties::ser_detected_properties(
            &mut object_14,
            var_13,
        )?;
        object_14.finish();
    }
    Ok(())
}

pub(crate) fn de_job_input<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<Option<crate::types::JobInput>, aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::JobInputBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "Key" => {
                                builder = builder.set_key(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "FrameRate" => {
                                builder = builder.set_frame_rate(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Resolution" => {
                                builder = builder.set_resolution(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "AspectRatio" => {
                                builder = builder.set_aspect_ratio(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Interlaced" => {
                                builder = builder.set_interlaced(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Container" => {
                                builder = builder.set_container(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Encryption" => {
                                builder = builder.set_encryption(
                                    crate::protocol_serde::shape_encryption::de_encryption(tokens)?,
                                );
                            }
                            "TimeSpan" => {
                                builder = builder.set_time_span(
                                    crate::protocol_serde::shape_time_span::de_time_span(tokens)?,
                                );
                            }
                            "InputCaptions" => {
                                builder = builder.set_input_captions(
                                    crate::protocol_serde::shape_input_captions::de_input_captions(
                                        tokens,
                                    )?,
                                );
                            }
                            "DetectedProperties" => {
                                builder = builder.set_detected_properties(
                                    crate::protocol_serde::shape_detected_properties::de_detected_properties(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
