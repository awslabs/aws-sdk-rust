// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_video_parameters(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::VideoParameters,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.codec {
        object.key("Codec").string(var_1.as_str());
    }
    if let Some(var_2) = &input.codec_options {
        #[allow(unused_mut)]
        let mut object_3 = object.key("CodecOptions").start_object();
        for (key_4, value_5) in var_2 {
            {
                object_3.key(key_4.as_str()).string(value_5.as_str());
            }
        }
        object_3.finish();
    }
    if let Some(var_6) = &input.keyframes_max_dist {
        object.key("KeyframesMaxDist").string(var_6.as_str());
    }
    if let Some(var_7) = &input.fixed_gop {
        object.key("FixedGOP").string(var_7.as_str());
    }
    if let Some(var_8) = &input.bit_rate {
        object.key("BitRate").string(var_8.as_str());
    }
    if let Some(var_9) = &input.frame_rate {
        object.key("FrameRate").string(var_9.as_str());
    }
    if let Some(var_10) = &input.max_frame_rate {
        object.key("MaxFrameRate").string(var_10.as_str());
    }
    if let Some(var_11) = &input.resolution {
        object.key("Resolution").string(var_11.as_str());
    }
    if let Some(var_12) = &input.aspect_ratio {
        object.key("AspectRatio").string(var_12.as_str());
    }
    if let Some(var_13) = &input.max_width {
        object.key("MaxWidth").string(var_13.as_str());
    }
    if let Some(var_14) = &input.max_height {
        object.key("MaxHeight").string(var_14.as_str());
    }
    if let Some(var_15) = &input.display_aspect_ratio {
        object.key("DisplayAspectRatio").string(var_15.as_str());
    }
    if let Some(var_16) = &input.sizing_policy {
        object.key("SizingPolicy").string(var_16.as_str());
    }
    if let Some(var_17) = &input.padding_policy {
        object.key("PaddingPolicy").string(var_17.as_str());
    }
    if let Some(var_18) = &input.watermarks {
        let mut array_19 = object.key("Watermarks").start_array();
        for item_20 in var_18 {
            {
                #[allow(unused_mut)]
                let mut object_21 = array_19.value().start_object();
                crate::protocol_serde::shape_preset_watermark::ser_preset_watermark(&mut object_21, item_20)?;
                object_21.finish();
            }
        }
        array_19.finish();
    }
    Ok(())
}

pub(crate) fn de_video_parameters<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::VideoParameters>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::VideoParametersBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "Codec" => {
                            builder = builder.set_codec(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "CodecOptions" => {
                            builder = builder.set_codec_options(crate::protocol_serde::shape_codec_options::de_codec_options(tokens)?);
                        }
                        "KeyframesMaxDist" => {
                            builder = builder.set_keyframes_max_dist(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "FixedGOP" => {
                            builder = builder.set_fixed_gop(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "BitRate" => {
                            builder = builder.set_bit_rate(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "FrameRate" => {
                            builder = builder.set_frame_rate(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "MaxFrameRate" => {
                            builder = builder.set_max_frame_rate(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Resolution" => {
                            builder = builder.set_resolution(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "AspectRatio" => {
                            builder = builder.set_aspect_ratio(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "MaxWidth" => {
                            builder = builder.set_max_width(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "MaxHeight" => {
                            builder = builder.set_max_height(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "DisplayAspectRatio" => {
                            builder = builder.set_display_aspect_ratio(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "SizingPolicy" => {
                            builder = builder.set_sizing_policy(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "PaddingPolicy" => {
                            builder = builder.set_padding_policy(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Watermarks" => {
                            builder = builder.set_watermarks(crate::protocol_serde::shape_preset_watermarks::de_preset_watermarks(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
