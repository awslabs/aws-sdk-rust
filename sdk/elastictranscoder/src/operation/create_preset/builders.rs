// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_preset::_create_preset_output::CreatePresetOutputBuilder;

pub use crate::operation::create_preset::_create_preset_input::CreatePresetInputBuilder;

/// Fluent builder constructing a request to `CreatePreset`.
///
/// <p>The CreatePreset operation creates a preset with settings that you specify.</p> <important>
/// <p>Elastic Transcoder checks the CreatePreset settings to ensure that they meet Elastic Transcoder requirements and to determine whether they comply with H.264 standards. If your settings are not valid for Elastic Transcoder, Elastic Transcoder returns an HTTP 400 response (<code>ValidationException</code>) and does not create the preset. If the settings are valid for Elastic Transcoder but aren't strictly compliant with the H.264 standard, Elastic Transcoder creates the preset and returns a warning message in the response. This helps you determine whether your settings comply with the H.264 standard while giving you greater flexibility with respect to the video that Elastic Transcoder produces.</p>
/// </important>
/// <p>Elastic Transcoder uses the H.264 video-compression format. For more information, see the International Telecommunication Union publication <i>Recommendation ITU-T H.264: Advanced video coding for generic audiovisual services</i>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreatePresetFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_preset::builders::CreatePresetInputBuilder,
}
impl CreatePresetFluentBuilder {
    /// Creates a new `CreatePreset`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_preset::CreatePreset,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::create_preset::CreatePresetError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_preset::CreatePresetOutput,
        aws_smithy_http::result::SdkError<crate::operation::create_preset::CreatePresetError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the preset. We recommend that the name be unique within the AWS account, but uniqueness is not enforced.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the preset. We recommend that the name be unique within the AWS account, but uniqueness is not enforced.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>A description of the preset.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A description of the preset.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The container type for the output file. Valid values include <code>flac</code>, <code>flv</code>, <code>fmp4</code>, <code>gif</code>, <code>mp3</code>, <code>mp4</code>, <code>mpg</code>, <code>mxf</code>, <code>oga</code>, <code>ogg</code>, <code>ts</code>, and <code>webm</code>.</p>
    pub fn container(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.container(input.into());
        self
    }
    /// <p>The container type for the output file. Valid values include <code>flac</code>, <code>flv</code>, <code>fmp4</code>, <code>gif</code>, <code>mp3</code>, <code>mp4</code>, <code>mpg</code>, <code>mxf</code>, <code>oga</code>, <code>ogg</code>, <code>ts</code>, and <code>webm</code>.</p>
    pub fn set_container(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_container(input);
        self
    }
    /// <p>A section of the request body that specifies the video parameters.</p>
    pub fn video(mut self, input: crate::types::VideoParameters) -> Self {
        self.inner = self.inner.video(input);
        self
    }
    /// <p>A section of the request body that specifies the video parameters.</p>
    pub fn set_video(mut self, input: std::option::Option<crate::types::VideoParameters>) -> Self {
        self.inner = self.inner.set_video(input);
        self
    }
    /// <p>A section of the request body that specifies the audio parameters.</p>
    pub fn audio(mut self, input: crate::types::AudioParameters) -> Self {
        self.inner = self.inner.audio(input);
        self
    }
    /// <p>A section of the request body that specifies the audio parameters.</p>
    pub fn set_audio(mut self, input: std::option::Option<crate::types::AudioParameters>) -> Self {
        self.inner = self.inner.set_audio(input);
        self
    }
    /// <p>A section of the request body that specifies the thumbnail parameters, if any.</p>
    pub fn thumbnails(mut self, input: crate::types::Thumbnails) -> Self {
        self.inner = self.inner.thumbnails(input);
        self
    }
    /// <p>A section of the request body that specifies the thumbnail parameters, if any.</p>
    pub fn set_thumbnails(mut self, input: std::option::Option<crate::types::Thumbnails>) -> Self {
        self.inner = self.inner.set_thumbnails(input);
        self
    }
}
