// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>When you create a pipeline, Elastic Transcoder returns the values that you specified in the request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreatePipelineOutput {
    /// <p>A section of the response body that provides information about the pipeline that is created.</p>
    #[doc(hidden)]
    pub pipeline: std::option::Option<crate::types::Pipeline>,
    /// <p>Elastic Transcoder returns a warning if the resources used by your pipeline are not in the same region as the pipeline.</p>
    /// <p>Using resources in the same region, such as your Amazon S3 buckets, Amazon SNS notification topics, and AWS KMS key, reduces processing time and prevents cross-regional charges.</p>
    #[doc(hidden)]
    pub warnings: std::option::Option<std::vec::Vec<crate::types::Warning>>,
    _request_id: Option<String>,
}
impl CreatePipelineOutput {
    /// <p>A section of the response body that provides information about the pipeline that is created.</p>
    pub fn pipeline(&self) -> std::option::Option<&crate::types::Pipeline> {
        self.pipeline.as_ref()
    }
    /// <p>Elastic Transcoder returns a warning if the resources used by your pipeline are not in the same region as the pipeline.</p>
    /// <p>Using resources in the same region, such as your Amazon S3 buckets, Amazon SNS notification topics, and AWS KMS key, reduces processing time and prevents cross-regional charges.</p>
    pub fn warnings(&self) -> std::option::Option<&[crate::types::Warning]> {
        self.warnings.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreatePipelineOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreatePipelineOutput {
    /// Creates a new builder-style object to manufacture [`CreatePipelineOutput`](crate::operation::create_pipeline::CreatePipelineOutput).
    pub fn builder() -> crate::operation::create_pipeline::builders::CreatePipelineOutputBuilder {
        crate::operation::create_pipeline::builders::CreatePipelineOutputBuilder::default()
    }
}

/// A builder for [`CreatePipelineOutput`](crate::operation::create_pipeline::CreatePipelineOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreatePipelineOutputBuilder {
    pub(crate) pipeline: std::option::Option<crate::types::Pipeline>,
    pub(crate) warnings: std::option::Option<std::vec::Vec<crate::types::Warning>>,
    _request_id: Option<String>,
}
impl CreatePipelineOutputBuilder {
    /// <p>A section of the response body that provides information about the pipeline that is created.</p>
    pub fn pipeline(mut self, input: crate::types::Pipeline) -> Self {
        self.pipeline = Some(input);
        self
    }
    /// <p>A section of the response body that provides information about the pipeline that is created.</p>
    pub fn set_pipeline(mut self, input: std::option::Option<crate::types::Pipeline>) -> Self {
        self.pipeline = input;
        self
    }
    /// Appends an item to `warnings`.
    ///
    /// To override the contents of this collection use [`set_warnings`](Self::set_warnings).
    ///
    /// <p>Elastic Transcoder returns a warning if the resources used by your pipeline are not in the same region as the pipeline.</p>
    /// <p>Using resources in the same region, such as your Amazon S3 buckets, Amazon SNS notification topics, and AWS KMS key, reduces processing time and prevents cross-regional charges.</p>
    pub fn warnings(mut self, input: crate::types::Warning) -> Self {
        let mut v = self.warnings.unwrap_or_default();
        v.push(input);
        self.warnings = Some(v);
        self
    }
    /// <p>Elastic Transcoder returns a warning if the resources used by your pipeline are not in the same region as the pipeline.</p>
    /// <p>Using resources in the same region, such as your Amazon S3 buckets, Amazon SNS notification topics, and AWS KMS key, reduces processing time and prevents cross-regional charges.</p>
    pub fn set_warnings(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Warning>>,
    ) -> Self {
        self.warnings = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreatePipelineOutput`](crate::operation::create_pipeline::CreatePipelineOutput).
    pub fn build(self) -> crate::operation::create_pipeline::CreatePipelineOutput {
        crate::operation::create_pipeline::CreatePipelineOutput {
            pipeline: self.pipeline,
            warnings: self.warnings,
            _request_id: self._request_id,
        }
    }
}
