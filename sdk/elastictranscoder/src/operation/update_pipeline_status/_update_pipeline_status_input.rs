// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The <code>UpdatePipelineStatusRequest</code> structure.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdatePipelineStatusInput {
    /// <p>The identifier of the pipeline to update.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The desired status of the pipeline:</p>
    /// <ul>
    /// <li> <p> <code>Active</code>: The pipeline is processing jobs.</p> </li>
    /// <li> <p> <code>Paused</code>: The pipeline is not currently processing jobs.</p> </li>
    /// </ul>
    pub status: ::std::option::Option<::std::string::String>,
}
impl UpdatePipelineStatusInput {
    /// <p>The identifier of the pipeline to update.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The desired status of the pipeline:</p>
    /// <ul>
    /// <li> <p> <code>Active</code>: The pipeline is processing jobs.</p> </li>
    /// <li> <p> <code>Paused</code>: The pipeline is not currently processing jobs.</p> </li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
}
impl UpdatePipelineStatusInput {
    /// Creates a new builder-style object to manufacture [`UpdatePipelineStatusInput`](crate::operation::update_pipeline_status::UpdatePipelineStatusInput).
    pub fn builder() -> crate::operation::update_pipeline_status::builders::UpdatePipelineStatusInputBuilder {
        crate::operation::update_pipeline_status::builders::UpdatePipelineStatusInputBuilder::default()
    }
}

/// A builder for [`UpdatePipelineStatusInput`](crate::operation::update_pipeline_status::UpdatePipelineStatusInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdatePipelineStatusInputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
}
impl UpdatePipelineStatusInputBuilder {
    /// <p>The identifier of the pipeline to update.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the pipeline to update.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier of the pipeline to update.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The desired status of the pipeline:</p>
    /// <ul>
    /// <li> <p> <code>Active</code>: The pipeline is processing jobs.</p> </li>
    /// <li> <p> <code>Paused</code>: The pipeline is not currently processing jobs.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The desired status of the pipeline:</p>
    /// <ul>
    /// <li> <p> <code>Active</code>: The pipeline is processing jobs.</p> </li>
    /// <li> <p> <code>Paused</code>: The pipeline is not currently processing jobs.</p> </li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The desired status of the pipeline:</p>
    /// <ul>
    /// <li> <p> <code>Active</code>: The pipeline is processing jobs.</p> </li>
    /// <li> <p> <code>Paused</code>: The pipeline is not currently processing jobs.</p> </li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// Consumes the builder and constructs a [`UpdatePipelineStatusInput`](crate::operation::update_pipeline_status::UpdatePipelineStatusInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_pipeline_status::UpdatePipelineStatusInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_pipeline_status::UpdatePipelineStatusInput {
            id: self.id,
            status: self.status,
        })
    }
}
