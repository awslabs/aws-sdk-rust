// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The <code>ListPresetsResponse</code> structure.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListPresetsOutput {
    /// <p>An array of <code>Preset</code> objects.</p>
    #[doc(hidden)]
    pub presets: std::option::Option<std::vec::Vec<crate::types::Preset>>,
    /// <p>A value that you use to access the second and subsequent pages of results, if any. When the presets fit on one page or when you've reached the last page of results, the value of <code>NextPageToken</code> is <code>null</code>.</p>
    #[doc(hidden)]
    pub next_page_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListPresetsOutput {
    /// <p>An array of <code>Preset</code> objects.</p>
    pub fn presets(&self) -> std::option::Option<&[crate::types::Preset]> {
        self.presets.as_deref()
    }
    /// <p>A value that you use to access the second and subsequent pages of results, if any. When the presets fit on one page or when you've reached the last page of results, the value of <code>NextPageToken</code> is <code>null</code>.</p>
    pub fn next_page_token(&self) -> std::option::Option<&str> {
        self.next_page_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListPresetsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListPresetsOutput {
    /// Creates a new builder-style object to manufacture [`ListPresetsOutput`](crate::operation::list_presets::ListPresetsOutput).
    pub fn builder() -> crate::operation::list_presets::builders::ListPresetsOutputBuilder {
        crate::operation::list_presets::builders::ListPresetsOutputBuilder::default()
    }
}

/// A builder for [`ListPresetsOutput`](crate::operation::list_presets::ListPresetsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListPresetsOutputBuilder {
    pub(crate) presets: std::option::Option<std::vec::Vec<crate::types::Preset>>,
    pub(crate) next_page_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListPresetsOutputBuilder {
    /// Appends an item to `presets`.
    ///
    /// To override the contents of this collection use [`set_presets`](Self::set_presets).
    ///
    /// <p>An array of <code>Preset</code> objects.</p>
    pub fn presets(mut self, input: crate::types::Preset) -> Self {
        let mut v = self.presets.unwrap_or_default();
        v.push(input);
        self.presets = Some(v);
        self
    }
    /// <p>An array of <code>Preset</code> objects.</p>
    pub fn set_presets(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Preset>>,
    ) -> Self {
        self.presets = input;
        self
    }
    /// <p>A value that you use to access the second and subsequent pages of results, if any. When the presets fit on one page or when you've reached the last page of results, the value of <code>NextPageToken</code> is <code>null</code>.</p>
    pub fn next_page_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_page_token = Some(input.into());
        self
    }
    /// <p>A value that you use to access the second and subsequent pages of results, if any. When the presets fit on one page or when you've reached the last page of results, the value of <code>NextPageToken</code> is <code>null</code>.</p>
    pub fn set_next_page_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_page_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListPresetsOutput`](crate::operation::list_presets::ListPresetsOutput).
    pub fn build(self) -> crate::operation::list_presets::ListPresetsOutput {
        crate::operation::list_presets::ListPresetsOutput {
            presets: self.presets,
            next_page_token: self.next_page_token,
            _request_id: self._request_id,
        }
    }
}
