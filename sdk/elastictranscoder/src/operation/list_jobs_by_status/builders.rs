// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_jobs_by_status::_list_jobs_by_status_output::ListJobsByStatusOutputBuilder;

pub use crate::operation::list_jobs_by_status::_list_jobs_by_status_input::ListJobsByStatusInputBuilder;

/// Fluent builder constructing a request to `ListJobsByStatus`.
///
/// <p>The ListJobsByStatus operation gets a list of jobs that have a specified status. The response body contains one element for each job that satisfies the search criteria.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListJobsByStatusFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_jobs_by_status::builders::ListJobsByStatusInputBuilder,
}
impl ListJobsByStatusFluentBuilder {
    /// Creates a new `ListJobsByStatus`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::list_jobs_by_status::ListJobsByStatus,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::list_jobs_by_status::ListJobsByStatusError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::list_jobs_by_status::ListJobsByStatusOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::list_jobs_by_status::ListJobsByStatusError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_jobs_by_status::paginator::ListJobsByStatusPaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::operation::list_jobs_by_status::paginator::ListJobsByStatusPaginator {
        crate::operation::list_jobs_by_status::paginator::ListJobsByStatusPaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// <p>To get information about all of the jobs associated with the current AWS account that have a given status, specify the following status: <code>Submitted</code>, <code>Progressing</code>, <code>Complete</code>, <code>Canceled</code>, or <code>Error</code>.</p>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.status(input.into());
        self
    }
    /// <p>To get information about all of the jobs associated with the current AWS account that have a given status, specify the following status: <code>Submitted</code>, <code>Progressing</code>, <code>Complete</code>, <code>Canceled</code>, or <code>Error</code>.</p>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_status(input);
        self
    }
    /// <p> To list jobs in chronological order by the date and time that they were submitted, enter <code>true</code>. To list jobs in reverse chronological order, enter <code>false</code>. </p>
    pub fn ascending(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.ascending(input.into());
        self
    }
    /// <p> To list jobs in chronological order by the date and time that they were submitted, enter <code>true</code>. To list jobs in reverse chronological order, enter <code>false</code>. </p>
    pub fn set_ascending(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_ascending(input);
        self
    }
    /// <p> When Elastic Transcoder returns more than one page of results, use <code>pageToken</code> in subsequent <code>GET</code> requests to get each successive page of results. </p>
    pub fn page_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.page_token(input.into());
        self
    }
    /// <p> When Elastic Transcoder returns more than one page of results, use <code>pageToken</code> in subsequent <code>GET</code> requests to get each successive page of results. </p>
    pub fn set_page_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_page_token(input);
        self
    }
}
