// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The <code>ListJobsByPipelineResponse</code> structure.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListJobsByPipelineOutput {
    /// <p>An array of <code>Job</code> objects that are in the specified pipeline.</p>
    pub jobs: ::std::option::Option<::std::vec::Vec<crate::types::Job>>,
    /// <p> A value that you use to access the second and subsequent pages of results, if any. When the jobs in the specified pipeline fit on one page or when you've reached the last page of results, the value of <code>NextPageToken</code> is <code>null</code>. </p>
    pub next_page_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListJobsByPipelineOutput {
    /// <p>An array of <code>Job</code> objects that are in the specified pipeline.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.jobs.is_none()`.
    pub fn jobs(&self) -> &[crate::types::Job] {
        self.jobs.as_deref().unwrap_or_default()
    }
    /// <p> A value that you use to access the second and subsequent pages of results, if any. When the jobs in the specified pipeline fit on one page or when you've reached the last page of results, the value of <code>NextPageToken</code> is <code>null</code>. </p>
    pub fn next_page_token(&self) -> ::std::option::Option<&str> {
        self.next_page_token.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for ListJobsByPipelineOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListJobsByPipelineOutput {
    /// Creates a new builder-style object to manufacture [`ListJobsByPipelineOutput`](crate::operation::list_jobs_by_pipeline::ListJobsByPipelineOutput).
    pub fn builder() -> crate::operation::list_jobs_by_pipeline::builders::ListJobsByPipelineOutputBuilder {
        crate::operation::list_jobs_by_pipeline::builders::ListJobsByPipelineOutputBuilder::default()
    }
}

/// A builder for [`ListJobsByPipelineOutput`](crate::operation::list_jobs_by_pipeline::ListJobsByPipelineOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListJobsByPipelineOutputBuilder {
    pub(crate) jobs: ::std::option::Option<::std::vec::Vec<crate::types::Job>>,
    pub(crate) next_page_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListJobsByPipelineOutputBuilder {
    /// Appends an item to `jobs`.
    ///
    /// To override the contents of this collection use [`set_jobs`](Self::set_jobs).
    ///
    /// <p>An array of <code>Job</code> objects that are in the specified pipeline.</p>
    pub fn jobs(mut self, input: crate::types::Job) -> Self {
        let mut v = self.jobs.unwrap_or_default();
        v.push(input);
        self.jobs = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of <code>Job</code> objects that are in the specified pipeline.</p>
    pub fn set_jobs(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Job>>) -> Self {
        self.jobs = input;
        self
    }
    /// <p>An array of <code>Job</code> objects that are in the specified pipeline.</p>
    pub fn get_jobs(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Job>> {
        &self.jobs
    }
    /// <p> A value that you use to access the second and subsequent pages of results, if any. When the jobs in the specified pipeline fit on one page or when you've reached the last page of results, the value of <code>NextPageToken</code> is <code>null</code>. </p>
    pub fn next_page_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_page_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> A value that you use to access the second and subsequent pages of results, if any. When the jobs in the specified pipeline fit on one page or when you've reached the last page of results, the value of <code>NextPageToken</code> is <code>null</code>. </p>
    pub fn set_next_page_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_page_token = input;
        self
    }
    /// <p> A value that you use to access the second and subsequent pages of results, if any. When the jobs in the specified pipeline fit on one page or when you've reached the last page of results, the value of <code>NextPageToken</code> is <code>null</code>. </p>
    pub fn get_next_page_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_page_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListJobsByPipelineOutput`](crate::operation::list_jobs_by_pipeline::ListJobsByPipelineOutput).
    pub fn build(self) -> crate::operation::list_jobs_by_pipeline::ListJobsByPipelineOutput {
        crate::operation::list_jobs_by_pipeline::ListJobsByPipelineOutput {
            jobs: self.jobs,
            next_page_token: self.next_page_token,
            _request_id: self._request_id,
        }
    }
}
