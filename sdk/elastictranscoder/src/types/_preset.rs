// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Presets are templates that contain most of the settings for transcoding media files from one format to another. Elastic Transcoder includes some default presets for common formats, for example, several iPod and iPhone versions. You can also create your own presets for formats that aren't included among the default presets. You specify which preset you want to use when you create a job.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Preset {
    /// <p>Identifier for the new preset. You use this value to get settings for the preset or to delete it.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) for the preset.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The name of the preset.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A description of the preset.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The container type for the output file. Valid values include <code>flac</code>, <code>flv</code>, <code>fmp4</code>, <code>gif</code>, <code>mp3</code>, <code>mp4</code>, <code>mpg</code>, <code>mxf</code>, <code>oga</code>, <code>ogg</code>, <code>ts</code>, and <code>webm</code>.</p>
    #[doc(hidden)]
    pub container: std::option::Option<std::string::String>,
    /// <p>A section of the response body that provides information about the audio preset values.</p>
    #[doc(hidden)]
    pub audio: std::option::Option<crate::types::AudioParameters>,
    /// <p>A section of the response body that provides information about the video preset values.</p>
    #[doc(hidden)]
    pub video: std::option::Option<crate::types::VideoParameters>,
    /// <p>A section of the response body that provides information about the thumbnail preset values, if any.</p>
    #[doc(hidden)]
    pub thumbnails: std::option::Option<crate::types::Thumbnails>,
    /// <p>Whether the preset is a default preset provided by Elastic Transcoder (<code>System</code>) or a preset that you have defined (<code>Custom</code>).</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
}
impl Preset {
    /// <p>Identifier for the new preset. You use this value to get settings for the preset or to delete it.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) for the preset.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the preset.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description of the preset.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The container type for the output file. Valid values include <code>flac</code>, <code>flv</code>, <code>fmp4</code>, <code>gif</code>, <code>mp3</code>, <code>mp4</code>, <code>mpg</code>, <code>mxf</code>, <code>oga</code>, <code>ogg</code>, <code>ts</code>, and <code>webm</code>.</p>
    pub fn container(&self) -> std::option::Option<&str> {
        self.container.as_deref()
    }
    /// <p>A section of the response body that provides information about the audio preset values.</p>
    pub fn audio(&self) -> std::option::Option<&crate::types::AudioParameters> {
        self.audio.as_ref()
    }
    /// <p>A section of the response body that provides information about the video preset values.</p>
    pub fn video(&self) -> std::option::Option<&crate::types::VideoParameters> {
        self.video.as_ref()
    }
    /// <p>A section of the response body that provides information about the thumbnail preset values, if any.</p>
    pub fn thumbnails(&self) -> std::option::Option<&crate::types::Thumbnails> {
        self.thumbnails.as_ref()
    }
    /// <p>Whether the preset is a default preset provided by Elastic Transcoder (<code>System</code>) or a preset that you have defined (<code>Custom</code>).</p>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
}
impl Preset {
    /// Creates a new builder-style object to manufacture [`Preset`](crate::types::Preset).
    pub fn builder() -> crate::types::builders::PresetBuilder {
        crate::types::builders::PresetBuilder::default()
    }
}

/// A builder for [`Preset`](crate::types::Preset).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PresetBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) container: std::option::Option<std::string::String>,
    pub(crate) audio: std::option::Option<crate::types::AudioParameters>,
    pub(crate) video: std::option::Option<crate::types::VideoParameters>,
    pub(crate) thumbnails: std::option::Option<crate::types::Thumbnails>,
    pub(crate) r#type: std::option::Option<std::string::String>,
}
impl PresetBuilder {
    /// <p>Identifier for the new preset. You use this value to get settings for the preset or to delete it.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>Identifier for the new preset. You use this value to get settings for the preset or to delete it.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the preset.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the preset.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The name of the preset.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the preset.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A description of the preset.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the preset.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The container type for the output file. Valid values include <code>flac</code>, <code>flv</code>, <code>fmp4</code>, <code>gif</code>, <code>mp3</code>, <code>mp4</code>, <code>mpg</code>, <code>mxf</code>, <code>oga</code>, <code>ogg</code>, <code>ts</code>, and <code>webm</code>.</p>
    pub fn container(mut self, input: impl Into<std::string::String>) -> Self {
        self.container = Some(input.into());
        self
    }
    /// <p>The container type for the output file. Valid values include <code>flac</code>, <code>flv</code>, <code>fmp4</code>, <code>gif</code>, <code>mp3</code>, <code>mp4</code>, <code>mpg</code>, <code>mxf</code>, <code>oga</code>, <code>ogg</code>, <code>ts</code>, and <code>webm</code>.</p>
    pub fn set_container(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.container = input;
        self
    }
    /// <p>A section of the response body that provides information about the audio preset values.</p>
    pub fn audio(mut self, input: crate::types::AudioParameters) -> Self {
        self.audio = Some(input);
        self
    }
    /// <p>A section of the response body that provides information about the audio preset values.</p>
    pub fn set_audio(mut self, input: std::option::Option<crate::types::AudioParameters>) -> Self {
        self.audio = input;
        self
    }
    /// <p>A section of the response body that provides information about the video preset values.</p>
    pub fn video(mut self, input: crate::types::VideoParameters) -> Self {
        self.video = Some(input);
        self
    }
    /// <p>A section of the response body that provides information about the video preset values.</p>
    pub fn set_video(mut self, input: std::option::Option<crate::types::VideoParameters>) -> Self {
        self.video = input;
        self
    }
    /// <p>A section of the response body that provides information about the thumbnail preset values, if any.</p>
    pub fn thumbnails(mut self, input: crate::types::Thumbnails) -> Self {
        self.thumbnails = Some(input);
        self
    }
    /// <p>A section of the response body that provides information about the thumbnail preset values, if any.</p>
    pub fn set_thumbnails(mut self, input: std::option::Option<crate::types::Thumbnails>) -> Self {
        self.thumbnails = input;
        self
    }
    /// <p>Whether the preset is a default preset provided by Elastic Transcoder (<code>System</code>) or a preset that you have defined (<code>Custom</code>).</p>
    pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
        self.r#type = Some(input.into());
        self
    }
    /// <p>Whether the preset is a default preset provided by Elastic Transcoder (<code>System</code>) or a preset that you have defined (<code>Custom</code>).</p>
    pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// Consumes the builder and constructs a [`Preset`](crate::types::Preset).
    pub fn build(self) -> crate::types::Preset {
        crate::types::Preset {
            id: self.id,
            arn: self.arn,
            name: self.name,
            description: self.description,
            container: self.container,
            audio: self.audio,
            video: self.video,
            thumbnails: self.thumbnails,
            r#type: self.r#type,
        }
    }
}
