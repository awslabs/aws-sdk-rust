// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <important>
/// <p>Outputs recommended instead.</p>
/// </important>
/// <p>If you specified one output for a job, information about that output. If you specified multiple outputs for a job, the <code>Output</code> object lists information about the first output. This duplicates the information that is listed for the first output in the <code>Outputs</code> object.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct JobOutput {
    /// <p>A sequential counter, starting with 1, that identifies an output among the outputs from the current job. In the Output syntax, this value is always 1.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p> The name to assign to the transcoded file. Elastic Transcoder saves the file in the Amazon S3 bucket specified by the <code>OutputBucket</code> object in the pipeline that is specified by the pipeline ID.</p>
    #[doc(hidden)]
    pub key: std::option::Option<std::string::String>,
    /// <p>Whether you want Elastic Transcoder to create thumbnails for your videos and, if so, how you want Elastic Transcoder to name the files.</p>
    /// <p>If you don't want Elastic Transcoder to create thumbnails, specify "".</p>
    /// <p>If you do want Elastic Transcoder to create thumbnails, specify the information that you want to include in the file name for each thumbnail. You can specify the following values in any sequence:</p>
    /// <ul>
    /// <li> <p> <b> <code>{count}</code> (Required)</b>: If you want to create thumbnails, you must include <code>{count}</code> in the <code>ThumbnailPattern</code> object. Wherever you specify <code>{count}</code>, Elastic Transcoder adds a five-digit sequence number (beginning with <b>00001</b>) to thumbnail file names. The number indicates where a given thumbnail appears in the sequence of thumbnails for a transcoded file. </p> <important>
    /// <p>If you specify a literal value and/or <code>{resolution}</code> but you omit <code>{count}</code>, Elastic Transcoder returns a validation error and does not create the job.</p>
    /// </important> </li>
    /// <li> <p> <b>Literal values (Optional)</b>: You can specify literal values anywhere in the <code>ThumbnailPattern</code> object. For example, you can include them as a file name prefix or as a delimiter between <code>{resolution}</code> and <code>{count}</code>. </p> </li>
    /// <li> <p> <b> <code>{resolution}</code> (Optional)</b>: If you want Elastic Transcoder to include the resolution in the file name, include <code>{resolution}</code> in the <code>ThumbnailPattern</code> object. </p> </li>
    /// </ul>
    /// <p>When creating thumbnails, Elastic Transcoder automatically saves the files in the format (.jpg or .png) that appears in the preset that you specified in the <code>PresetID</code> value of <code>CreateJobOutput</code>. Elastic Transcoder also appends the applicable file name extension.</p>
    #[doc(hidden)]
    pub thumbnail_pattern: std::option::Option<std::string::String>,
    /// <p>The encryption settings, if any, that you want Elastic Transcoder to apply to your thumbnail.</p>
    #[doc(hidden)]
    pub thumbnail_encryption: std::option::Option<crate::types::Encryption>,
    /// <p>The number of degrees clockwise by which you want Elastic Transcoder to rotate the output relative to the input. Enter one of the following values:</p>
    /// <p> <code>auto</code>, <code>0</code>, <code>90</code>, <code>180</code>, <code>270</code> </p>
    /// <p> The value <code>auto</code> generally works only if the file that you're transcoding contains rotation metadata.</p>
    #[doc(hidden)]
    pub rotate: std::option::Option<std::string::String>,
    /// <p>The value of the <code>Id</code> object for the preset that you want to use for this job. The preset determines the audio, video, and thumbnail settings that Elastic Transcoder uses for transcoding. To use a preset that you created, specify the preset ID that Elastic Transcoder returned in the response when you created the preset. You can also use the Elastic Transcoder system presets, which you can get with <code>ListPresets</code>.</p>
    #[doc(hidden)]
    pub preset_id: std::option::Option<std::string::String>,
    /// <important>
    /// <p>(Outputs in Fragmented MP4 or MPEG-TS format only.</p>
    /// </important>
    /// <p>If you specify a preset in <code>PresetId</code> for which the value of <code>Container</code> is <code>fmp4</code> (Fragmented MP4) or <code>ts</code> (MPEG-TS), <code>SegmentDuration</code> is the target maximum duration of each segment in seconds. For <code>HLSv3</code> format playlists, each media segment is stored in a separate <code>.ts</code> file. For <code>HLSv4</code>, <code>MPEG-DASH</code>, and <code>Smooth</code> playlists, all media segments for an output are stored in a single file. Each segment is approximately the length of the <code>SegmentDuration</code>, though individual segments might be shorter or longer.</p>
    /// <p>The range of valid values is 1 to 60 seconds. If the duration of the video is not evenly divisible by <code>SegmentDuration</code>, the duration of the last segment is the remainder of total length/SegmentDuration.</p>
    /// <p>Elastic Transcoder creates an output-specific playlist for each output <code>HLS</code> output that you specify in OutputKeys. To add an output to the master playlist for this job, include it in the <code>OutputKeys</code> of the associated playlist.</p>
    #[doc(hidden)]
    pub segment_duration: std::option::Option<std::string::String>,
    /// <p> The status of one output in a job. If you specified only one output for the job, <code>Outputs:Status</code> is always the same as <code>Job:Status</code>. If you specified more than one output: </p>
    /// <ul>
    /// <li> <p> <code>Job:Status</code> and <code>Outputs:Status</code> for all of the outputs is Submitted until Elastic Transcoder starts to process the first output.</p> </li>
    /// <li> <p>When Elastic Transcoder starts to process the first output, <code>Outputs:Status</code> for that output and <code>Job:Status</code> both change to Progressing. For each output, the value of <code>Outputs:Status</code> remains Submitted until Elastic Transcoder starts to process the output.</p> </li>
    /// <li> <p>Job:Status remains Progressing until all of the outputs reach a terminal status, either Complete or Error.</p> </li>
    /// <li> <p>When all of the outputs reach a terminal status, <code>Job:Status</code> changes to Complete only if <code>Outputs:Status</code> for all of the outputs is <code>Complete</code>. If <code>Outputs:Status</code> for one or more outputs is <code>Error</code>, the terminal status for <code>Job:Status</code> is also <code>Error</code>.</p> </li>
    /// </ul>
    /// <p>The value of <code>Status</code> is one of the following: <code>Submitted</code>, <code>Progressing</code>, <code>Complete</code>, <code>Canceled</code>, or <code>Error</code>. </p>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    /// <p>Information that further explains <code>Status</code>.</p>
    #[doc(hidden)]
    pub status_detail: std::option::Option<std::string::String>,
    /// <p>Duration of the output file, in seconds.</p>
    #[doc(hidden)]
    pub duration: std::option::Option<i64>,
    /// <p>Specifies the width of the output file in pixels.</p>
    #[doc(hidden)]
    pub width: std::option::Option<i32>,
    /// <p>Height of the output file, in pixels.</p>
    #[doc(hidden)]
    pub height: std::option::Option<i32>,
    /// <p>Frame rate of the output file, in frames per second.</p>
    #[doc(hidden)]
    pub frame_rate: std::option::Option<std::string::String>,
    /// <p>File size of the output file, in bytes.</p>
    #[doc(hidden)]
    pub file_size: std::option::Option<i64>,
    /// <p>Duration of the output file, in milliseconds.</p>
    #[doc(hidden)]
    pub duration_millis: std::option::Option<i64>,
    /// <p>Information about the watermarks that you want Elastic Transcoder to add to the video during transcoding. You can specify up to four watermarks for each output. Settings for each watermark must be defined in the preset that you specify in <code>Preset</code> for the current output.</p>
    /// <p>Watermarks are added to the output video in the sequence in which you list them in the job outputâ€”the first watermark in the list is added to the output video first, the second watermark in the list is added next, and so on. As a result, if the settings in a preset cause Elastic Transcoder to place all watermarks in the same location, the second watermark that you add covers the first one, the third one covers the second, and the fourth one covers the third.</p>
    #[doc(hidden)]
    pub watermarks: std::option::Option<std::vec::Vec<crate::types::JobWatermark>>,
    /// <p>The album art to be associated with the output file, if any.</p>
    #[doc(hidden)]
    pub album_art: std::option::Option<crate::types::JobAlbumArt>,
    /// <p>You can create an output file that contains an excerpt from the input file. This excerpt, called a clip, can come from the beginning, middle, or end of the file. The Composition object contains settings for the clips that make up an output file. For the current release, you can only specify settings for a single clip per output file. The Composition object cannot be null.</p>
    #[deprecated]
    #[doc(hidden)]
    pub composition: std::option::Option<std::vec::Vec<crate::types::Clip>>,
    /// <p>You can configure Elastic Transcoder to transcode captions, or subtitles, from one format to another. All captions must be in UTF-8. Elastic Transcoder supports two types of captions:</p>
    /// <ul>
    /// <li> <p> <b>Embedded:</b> Embedded captions are included in the same file as the audio and video. Elastic Transcoder supports only one embedded caption per language, to a maximum of 300 embedded captions per file.</p> <p>Valid input values include: <code>CEA-608 (EIA-608</code>, first non-empty channel only), <code>CEA-708 (EIA-708</code>, first non-empty channel only), and <code>mov-text</code> </p> <p>Valid outputs include: <code>mov-text</code> </p> <p>Elastic Transcoder supports a maximum of one embedded format per output.</p> </li>
    /// <li> <p> <b>Sidecar:</b> Sidecar captions are kept in a separate metadata file from the audio and video data. Sidecar captions require a player that is capable of understanding the relationship between the video file and the sidecar file. Elastic Transcoder supports only one sidecar caption per language, to a maximum of 20 sidecar captions per file.</p> <p>Valid input values include: <code>dfxp</code> (first div element only), <code>ebu-tt</code>, <code>scc</code>, <code>smpt</code>, <code>srt</code>, <code>ttml</code> (first div element only), and <code>webvtt</code> </p> <p>Valid outputs include: <code>dfxp</code> (first div element only), <code>scc</code>, <code>srt</code>, and <code>webvtt</code>.</p> </li>
    /// </ul>
    /// <p>If you want ttml or smpte-tt compatible captions, specify dfxp as your output format.</p>
    /// <p>Elastic Transcoder does not support OCR (Optical Character Recognition), does not accept pictures as a valid input for captions, and is not available for audio-only transcoding. Elastic Transcoder does not preserve text formatting (for example, italics) during the transcoding process.</p>
    /// <p>To remove captions or leave the captions empty, set <code>Captions</code> to null. To pass through existing captions unchanged, set the <code>MergePolicy</code> to <code>MergeRetain</code>, and pass in a null <code>CaptionSources</code> array.</p>
    /// <p>For more information on embedded files, see the Subtitles Wikipedia page.</p>
    /// <p>For more information on sidecar files, see the Extensible Metadata Platform and Sidecar file Wikipedia pages.</p>
    #[doc(hidden)]
    pub captions: std::option::Option<crate::types::Captions>,
    /// <p>The encryption settings, if any, that you want Elastic Transcoder to apply to your output files. If you choose to use encryption, you must specify a mode to use. If you choose not to use encryption, Elastic Transcoder writes an unencrypted file to your Amazon S3 bucket.</p>
    #[doc(hidden)]
    pub encryption: std::option::Option<crate::types::Encryption>,
    /// <p>If Elastic Transcoder used a preset with a <code>ColorSpaceConversionMode</code> to transcode the output file, the <code>AppliedColorSpaceConversion</code> parameter shows the conversion used. If no <code>ColorSpaceConversionMode</code> was defined in the preset, this parameter is not be included in the job response.</p>
    #[doc(hidden)]
    pub applied_color_space_conversion: std::option::Option<std::string::String>,
}
impl JobOutput {
    /// <p>A sequential counter, starting with 1, that identifies an output among the outputs from the current job. In the Output syntax, this value is always 1.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p> The name to assign to the transcoded file. Elastic Transcoder saves the file in the Amazon S3 bucket specified by the <code>OutputBucket</code> object in the pipeline that is specified by the pipeline ID.</p>
    pub fn key(&self) -> std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>Whether you want Elastic Transcoder to create thumbnails for your videos and, if so, how you want Elastic Transcoder to name the files.</p>
    /// <p>If you don't want Elastic Transcoder to create thumbnails, specify "".</p>
    /// <p>If you do want Elastic Transcoder to create thumbnails, specify the information that you want to include in the file name for each thumbnail. You can specify the following values in any sequence:</p>
    /// <ul>
    /// <li> <p> <b> <code>{count}</code> (Required)</b>: If you want to create thumbnails, you must include <code>{count}</code> in the <code>ThumbnailPattern</code> object. Wherever you specify <code>{count}</code>, Elastic Transcoder adds a five-digit sequence number (beginning with <b>00001</b>) to thumbnail file names. The number indicates where a given thumbnail appears in the sequence of thumbnails for a transcoded file. </p> <important>
    /// <p>If you specify a literal value and/or <code>{resolution}</code> but you omit <code>{count}</code>, Elastic Transcoder returns a validation error and does not create the job.</p>
    /// </important> </li>
    /// <li> <p> <b>Literal values (Optional)</b>: You can specify literal values anywhere in the <code>ThumbnailPattern</code> object. For example, you can include them as a file name prefix or as a delimiter between <code>{resolution}</code> and <code>{count}</code>. </p> </li>
    /// <li> <p> <b> <code>{resolution}</code> (Optional)</b>: If you want Elastic Transcoder to include the resolution in the file name, include <code>{resolution}</code> in the <code>ThumbnailPattern</code> object. </p> </li>
    /// </ul>
    /// <p>When creating thumbnails, Elastic Transcoder automatically saves the files in the format (.jpg or .png) that appears in the preset that you specified in the <code>PresetID</code> value of <code>CreateJobOutput</code>. Elastic Transcoder also appends the applicable file name extension.</p>
    pub fn thumbnail_pattern(&self) -> std::option::Option<&str> {
        self.thumbnail_pattern.as_deref()
    }
    /// <p>The encryption settings, if any, that you want Elastic Transcoder to apply to your thumbnail.</p>
    pub fn thumbnail_encryption(&self) -> std::option::Option<&crate::types::Encryption> {
        self.thumbnail_encryption.as_ref()
    }
    /// <p>The number of degrees clockwise by which you want Elastic Transcoder to rotate the output relative to the input. Enter one of the following values:</p>
    /// <p> <code>auto</code>, <code>0</code>, <code>90</code>, <code>180</code>, <code>270</code> </p>
    /// <p> The value <code>auto</code> generally works only if the file that you're transcoding contains rotation metadata.</p>
    pub fn rotate(&self) -> std::option::Option<&str> {
        self.rotate.as_deref()
    }
    /// <p>The value of the <code>Id</code> object for the preset that you want to use for this job. The preset determines the audio, video, and thumbnail settings that Elastic Transcoder uses for transcoding. To use a preset that you created, specify the preset ID that Elastic Transcoder returned in the response when you created the preset. You can also use the Elastic Transcoder system presets, which you can get with <code>ListPresets</code>.</p>
    pub fn preset_id(&self) -> std::option::Option<&str> {
        self.preset_id.as_deref()
    }
    /// <important>
    /// <p>(Outputs in Fragmented MP4 or MPEG-TS format only.</p>
    /// </important>
    /// <p>If you specify a preset in <code>PresetId</code> for which the value of <code>Container</code> is <code>fmp4</code> (Fragmented MP4) or <code>ts</code> (MPEG-TS), <code>SegmentDuration</code> is the target maximum duration of each segment in seconds. For <code>HLSv3</code> format playlists, each media segment is stored in a separate <code>.ts</code> file. For <code>HLSv4</code>, <code>MPEG-DASH</code>, and <code>Smooth</code> playlists, all media segments for an output are stored in a single file. Each segment is approximately the length of the <code>SegmentDuration</code>, though individual segments might be shorter or longer.</p>
    /// <p>The range of valid values is 1 to 60 seconds. If the duration of the video is not evenly divisible by <code>SegmentDuration</code>, the duration of the last segment is the remainder of total length/SegmentDuration.</p>
    /// <p>Elastic Transcoder creates an output-specific playlist for each output <code>HLS</code> output that you specify in OutputKeys. To add an output to the master playlist for this job, include it in the <code>OutputKeys</code> of the associated playlist.</p>
    pub fn segment_duration(&self) -> std::option::Option<&str> {
        self.segment_duration.as_deref()
    }
    /// <p> The status of one output in a job. If you specified only one output for the job, <code>Outputs:Status</code> is always the same as <code>Job:Status</code>. If you specified more than one output: </p>
    /// <ul>
    /// <li> <p> <code>Job:Status</code> and <code>Outputs:Status</code> for all of the outputs is Submitted until Elastic Transcoder starts to process the first output.</p> </li>
    /// <li> <p>When Elastic Transcoder starts to process the first output, <code>Outputs:Status</code> for that output and <code>Job:Status</code> both change to Progressing. For each output, the value of <code>Outputs:Status</code> remains Submitted until Elastic Transcoder starts to process the output.</p> </li>
    /// <li> <p>Job:Status remains Progressing until all of the outputs reach a terminal status, either Complete or Error.</p> </li>
    /// <li> <p>When all of the outputs reach a terminal status, <code>Job:Status</code> changes to Complete only if <code>Outputs:Status</code> for all of the outputs is <code>Complete</code>. If <code>Outputs:Status</code> for one or more outputs is <code>Error</code>, the terminal status for <code>Job:Status</code> is also <code>Error</code>.</p> </li>
    /// </ul>
    /// <p>The value of <code>Status</code> is one of the following: <code>Submitted</code>, <code>Progressing</code>, <code>Complete</code>, <code>Canceled</code>, or <code>Error</code>. </p>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>Information that further explains <code>Status</code>.</p>
    pub fn status_detail(&self) -> std::option::Option<&str> {
        self.status_detail.as_deref()
    }
    /// <p>Duration of the output file, in seconds.</p>
    pub fn duration(&self) -> std::option::Option<i64> {
        self.duration
    }
    /// <p>Specifies the width of the output file in pixels.</p>
    pub fn width(&self) -> std::option::Option<i32> {
        self.width
    }
    /// <p>Height of the output file, in pixels.</p>
    pub fn height(&self) -> std::option::Option<i32> {
        self.height
    }
    /// <p>Frame rate of the output file, in frames per second.</p>
    pub fn frame_rate(&self) -> std::option::Option<&str> {
        self.frame_rate.as_deref()
    }
    /// <p>File size of the output file, in bytes.</p>
    pub fn file_size(&self) -> std::option::Option<i64> {
        self.file_size
    }
    /// <p>Duration of the output file, in milliseconds.</p>
    pub fn duration_millis(&self) -> std::option::Option<i64> {
        self.duration_millis
    }
    /// <p>Information about the watermarks that you want Elastic Transcoder to add to the video during transcoding. You can specify up to four watermarks for each output. Settings for each watermark must be defined in the preset that you specify in <code>Preset</code> for the current output.</p>
    /// <p>Watermarks are added to the output video in the sequence in which you list them in the job outputâ€”the first watermark in the list is added to the output video first, the second watermark in the list is added next, and so on. As a result, if the settings in a preset cause Elastic Transcoder to place all watermarks in the same location, the second watermark that you add covers the first one, the third one covers the second, and the fourth one covers the third.</p>
    pub fn watermarks(&self) -> std::option::Option<&[crate::types::JobWatermark]> {
        self.watermarks.as_deref()
    }
    /// <p>The album art to be associated with the output file, if any.</p>
    pub fn album_art(&self) -> std::option::Option<&crate::types::JobAlbumArt> {
        self.album_art.as_ref()
    }
    /// <p>You can create an output file that contains an excerpt from the input file. This excerpt, called a clip, can come from the beginning, middle, or end of the file. The Composition object contains settings for the clips that make up an output file. For the current release, you can only specify settings for a single clip per output file. The Composition object cannot be null.</p>
    #[deprecated]
    pub fn composition(&self) -> std::option::Option<&[crate::types::Clip]> {
        self.composition.as_deref()
    }
    /// <p>You can configure Elastic Transcoder to transcode captions, or subtitles, from one format to another. All captions must be in UTF-8. Elastic Transcoder supports two types of captions:</p>
    /// <ul>
    /// <li> <p> <b>Embedded:</b> Embedded captions are included in the same file as the audio and video. Elastic Transcoder supports only one embedded caption per language, to a maximum of 300 embedded captions per file.</p> <p>Valid input values include: <code>CEA-608 (EIA-608</code>, first non-empty channel only), <code>CEA-708 (EIA-708</code>, first non-empty channel only), and <code>mov-text</code> </p> <p>Valid outputs include: <code>mov-text</code> </p> <p>Elastic Transcoder supports a maximum of one embedded format per output.</p> </li>
    /// <li> <p> <b>Sidecar:</b> Sidecar captions are kept in a separate metadata file from the audio and video data. Sidecar captions require a player that is capable of understanding the relationship between the video file and the sidecar file. Elastic Transcoder supports only one sidecar caption per language, to a maximum of 20 sidecar captions per file.</p> <p>Valid input values include: <code>dfxp</code> (first div element only), <code>ebu-tt</code>, <code>scc</code>, <code>smpt</code>, <code>srt</code>, <code>ttml</code> (first div element only), and <code>webvtt</code> </p> <p>Valid outputs include: <code>dfxp</code> (first div element only), <code>scc</code>, <code>srt</code>, and <code>webvtt</code>.</p> </li>
    /// </ul>
    /// <p>If you want ttml or smpte-tt compatible captions, specify dfxp as your output format.</p>
    /// <p>Elastic Transcoder does not support OCR (Optical Character Recognition), does not accept pictures as a valid input for captions, and is not available for audio-only transcoding. Elastic Transcoder does not preserve text formatting (for example, italics) during the transcoding process.</p>
    /// <p>To remove captions or leave the captions empty, set <code>Captions</code> to null. To pass through existing captions unchanged, set the <code>MergePolicy</code> to <code>MergeRetain</code>, and pass in a null <code>CaptionSources</code> array.</p>
    /// <p>For more information on embedded files, see the Subtitles Wikipedia page.</p>
    /// <p>For more information on sidecar files, see the Extensible Metadata Platform and Sidecar file Wikipedia pages.</p>
    pub fn captions(&self) -> std::option::Option<&crate::types::Captions> {
        self.captions.as_ref()
    }
    /// <p>The encryption settings, if any, that you want Elastic Transcoder to apply to your output files. If you choose to use encryption, you must specify a mode to use. If you choose not to use encryption, Elastic Transcoder writes an unencrypted file to your Amazon S3 bucket.</p>
    pub fn encryption(&self) -> std::option::Option<&crate::types::Encryption> {
        self.encryption.as_ref()
    }
    /// <p>If Elastic Transcoder used a preset with a <code>ColorSpaceConversionMode</code> to transcode the output file, the <code>AppliedColorSpaceConversion</code> parameter shows the conversion used. If no <code>ColorSpaceConversionMode</code> was defined in the preset, this parameter is not be included in the job response.</p>
    pub fn applied_color_space_conversion(&self) -> std::option::Option<&str> {
        self.applied_color_space_conversion.as_deref()
    }
}
impl JobOutput {
    /// Creates a new builder-style object to manufacture [`JobOutput`](crate::types::JobOutput).
    pub fn builder() -> crate::types::builders::JobOutputBuilder {
        crate::types::builders::JobOutputBuilder::default()
    }
}

/// A builder for [`JobOutput`](crate::types::JobOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct JobOutputBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) key: std::option::Option<std::string::String>,
    pub(crate) thumbnail_pattern: std::option::Option<std::string::String>,
    pub(crate) thumbnail_encryption: std::option::Option<crate::types::Encryption>,
    pub(crate) rotate: std::option::Option<std::string::String>,
    pub(crate) preset_id: std::option::Option<std::string::String>,
    pub(crate) segment_duration: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<std::string::String>,
    pub(crate) status_detail: std::option::Option<std::string::String>,
    pub(crate) duration: std::option::Option<i64>,
    pub(crate) width: std::option::Option<i32>,
    pub(crate) height: std::option::Option<i32>,
    pub(crate) frame_rate: std::option::Option<std::string::String>,
    pub(crate) file_size: std::option::Option<i64>,
    pub(crate) duration_millis: std::option::Option<i64>,
    pub(crate) watermarks: std::option::Option<std::vec::Vec<crate::types::JobWatermark>>,
    pub(crate) album_art: std::option::Option<crate::types::JobAlbumArt>,
    pub(crate) composition: std::option::Option<std::vec::Vec<crate::types::Clip>>,
    pub(crate) captions: std::option::Option<crate::types::Captions>,
    pub(crate) encryption: std::option::Option<crate::types::Encryption>,
    pub(crate) applied_color_space_conversion: std::option::Option<std::string::String>,
}
impl JobOutputBuilder {
    /// <p>A sequential counter, starting with 1, that identifies an output among the outputs from the current job. In the Output syntax, this value is always 1.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>A sequential counter, starting with 1, that identifies an output among the outputs from the current job. In the Output syntax, this value is always 1.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p> The name to assign to the transcoded file. Elastic Transcoder saves the file in the Amazon S3 bucket specified by the <code>OutputBucket</code> object in the pipeline that is specified by the pipeline ID.</p>
    pub fn key(mut self, input: impl Into<std::string::String>) -> Self {
        self.key = Some(input.into());
        self
    }
    /// <p> The name to assign to the transcoded file. Elastic Transcoder saves the file in the Amazon S3 bucket specified by the <code>OutputBucket</code> object in the pipeline that is specified by the pipeline ID.</p>
    pub fn set_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>Whether you want Elastic Transcoder to create thumbnails for your videos and, if so, how you want Elastic Transcoder to name the files.</p>
    /// <p>If you don't want Elastic Transcoder to create thumbnails, specify "".</p>
    /// <p>If you do want Elastic Transcoder to create thumbnails, specify the information that you want to include in the file name for each thumbnail. You can specify the following values in any sequence:</p>
    /// <ul>
    /// <li> <p> <b> <code>{count}</code> (Required)</b>: If you want to create thumbnails, you must include <code>{count}</code> in the <code>ThumbnailPattern</code> object. Wherever you specify <code>{count}</code>, Elastic Transcoder adds a five-digit sequence number (beginning with <b>00001</b>) to thumbnail file names. The number indicates where a given thumbnail appears in the sequence of thumbnails for a transcoded file. </p> <important>
    /// <p>If you specify a literal value and/or <code>{resolution}</code> but you omit <code>{count}</code>, Elastic Transcoder returns a validation error and does not create the job.</p>
    /// </important> </li>
    /// <li> <p> <b>Literal values (Optional)</b>: You can specify literal values anywhere in the <code>ThumbnailPattern</code> object. For example, you can include them as a file name prefix or as a delimiter between <code>{resolution}</code> and <code>{count}</code>. </p> </li>
    /// <li> <p> <b> <code>{resolution}</code> (Optional)</b>: If you want Elastic Transcoder to include the resolution in the file name, include <code>{resolution}</code> in the <code>ThumbnailPattern</code> object. </p> </li>
    /// </ul>
    /// <p>When creating thumbnails, Elastic Transcoder automatically saves the files in the format (.jpg or .png) that appears in the preset that you specified in the <code>PresetID</code> value of <code>CreateJobOutput</code>. Elastic Transcoder also appends the applicable file name extension.</p>
    pub fn thumbnail_pattern(mut self, input: impl Into<std::string::String>) -> Self {
        self.thumbnail_pattern = Some(input.into());
        self
    }
    /// <p>Whether you want Elastic Transcoder to create thumbnails for your videos and, if so, how you want Elastic Transcoder to name the files.</p>
    /// <p>If you don't want Elastic Transcoder to create thumbnails, specify "".</p>
    /// <p>If you do want Elastic Transcoder to create thumbnails, specify the information that you want to include in the file name for each thumbnail. You can specify the following values in any sequence:</p>
    /// <ul>
    /// <li> <p> <b> <code>{count}</code> (Required)</b>: If you want to create thumbnails, you must include <code>{count}</code> in the <code>ThumbnailPattern</code> object. Wherever you specify <code>{count}</code>, Elastic Transcoder adds a five-digit sequence number (beginning with <b>00001</b>) to thumbnail file names. The number indicates where a given thumbnail appears in the sequence of thumbnails for a transcoded file. </p> <important>
    /// <p>If you specify a literal value and/or <code>{resolution}</code> but you omit <code>{count}</code>, Elastic Transcoder returns a validation error and does not create the job.</p>
    /// </important> </li>
    /// <li> <p> <b>Literal values (Optional)</b>: You can specify literal values anywhere in the <code>ThumbnailPattern</code> object. For example, you can include them as a file name prefix or as a delimiter between <code>{resolution}</code> and <code>{count}</code>. </p> </li>
    /// <li> <p> <b> <code>{resolution}</code> (Optional)</b>: If you want Elastic Transcoder to include the resolution in the file name, include <code>{resolution}</code> in the <code>ThumbnailPattern</code> object. </p> </li>
    /// </ul>
    /// <p>When creating thumbnails, Elastic Transcoder automatically saves the files in the format (.jpg or .png) that appears in the preset that you specified in the <code>PresetID</code> value of <code>CreateJobOutput</code>. Elastic Transcoder also appends the applicable file name extension.</p>
    pub fn set_thumbnail_pattern(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.thumbnail_pattern = input;
        self
    }
    /// <p>The encryption settings, if any, that you want Elastic Transcoder to apply to your thumbnail.</p>
    pub fn thumbnail_encryption(mut self, input: crate::types::Encryption) -> Self {
        self.thumbnail_encryption = Some(input);
        self
    }
    /// <p>The encryption settings, if any, that you want Elastic Transcoder to apply to your thumbnail.</p>
    pub fn set_thumbnail_encryption(
        mut self,
        input: std::option::Option<crate::types::Encryption>,
    ) -> Self {
        self.thumbnail_encryption = input;
        self
    }
    /// <p>The number of degrees clockwise by which you want Elastic Transcoder to rotate the output relative to the input. Enter one of the following values:</p>
    /// <p> <code>auto</code>, <code>0</code>, <code>90</code>, <code>180</code>, <code>270</code> </p>
    /// <p> The value <code>auto</code> generally works only if the file that you're transcoding contains rotation metadata.</p>
    pub fn rotate(mut self, input: impl Into<std::string::String>) -> Self {
        self.rotate = Some(input.into());
        self
    }
    /// <p>The number of degrees clockwise by which you want Elastic Transcoder to rotate the output relative to the input. Enter one of the following values:</p>
    /// <p> <code>auto</code>, <code>0</code>, <code>90</code>, <code>180</code>, <code>270</code> </p>
    /// <p> The value <code>auto</code> generally works only if the file that you're transcoding contains rotation metadata.</p>
    pub fn set_rotate(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.rotate = input;
        self
    }
    /// <p>The value of the <code>Id</code> object for the preset that you want to use for this job. The preset determines the audio, video, and thumbnail settings that Elastic Transcoder uses for transcoding. To use a preset that you created, specify the preset ID that Elastic Transcoder returned in the response when you created the preset. You can also use the Elastic Transcoder system presets, which you can get with <code>ListPresets</code>.</p>
    pub fn preset_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.preset_id = Some(input.into());
        self
    }
    /// <p>The value of the <code>Id</code> object for the preset that you want to use for this job. The preset determines the audio, video, and thumbnail settings that Elastic Transcoder uses for transcoding. To use a preset that you created, specify the preset ID that Elastic Transcoder returned in the response when you created the preset. You can also use the Elastic Transcoder system presets, which you can get with <code>ListPresets</code>.</p>
    pub fn set_preset_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.preset_id = input;
        self
    }
    /// <important>
    /// <p>(Outputs in Fragmented MP4 or MPEG-TS format only.</p>
    /// </important>
    /// <p>If you specify a preset in <code>PresetId</code> for which the value of <code>Container</code> is <code>fmp4</code> (Fragmented MP4) or <code>ts</code> (MPEG-TS), <code>SegmentDuration</code> is the target maximum duration of each segment in seconds. For <code>HLSv3</code> format playlists, each media segment is stored in a separate <code>.ts</code> file. For <code>HLSv4</code>, <code>MPEG-DASH</code>, and <code>Smooth</code> playlists, all media segments for an output are stored in a single file. Each segment is approximately the length of the <code>SegmentDuration</code>, though individual segments might be shorter or longer.</p>
    /// <p>The range of valid values is 1 to 60 seconds. If the duration of the video is not evenly divisible by <code>SegmentDuration</code>, the duration of the last segment is the remainder of total length/SegmentDuration.</p>
    /// <p>Elastic Transcoder creates an output-specific playlist for each output <code>HLS</code> output that you specify in OutputKeys. To add an output to the master playlist for this job, include it in the <code>OutputKeys</code> of the associated playlist.</p>
    pub fn segment_duration(mut self, input: impl Into<std::string::String>) -> Self {
        self.segment_duration = Some(input.into());
        self
    }
    /// <important>
    /// <p>(Outputs in Fragmented MP4 or MPEG-TS format only.</p>
    /// </important>
    /// <p>If you specify a preset in <code>PresetId</code> for which the value of <code>Container</code> is <code>fmp4</code> (Fragmented MP4) or <code>ts</code> (MPEG-TS), <code>SegmentDuration</code> is the target maximum duration of each segment in seconds. For <code>HLSv3</code> format playlists, each media segment is stored in a separate <code>.ts</code> file. For <code>HLSv4</code>, <code>MPEG-DASH</code>, and <code>Smooth</code> playlists, all media segments for an output are stored in a single file. Each segment is approximately the length of the <code>SegmentDuration</code>, though individual segments might be shorter or longer.</p>
    /// <p>The range of valid values is 1 to 60 seconds. If the duration of the video is not evenly divisible by <code>SegmentDuration</code>, the duration of the last segment is the remainder of total length/SegmentDuration.</p>
    /// <p>Elastic Transcoder creates an output-specific playlist for each output <code>HLS</code> output that you specify in OutputKeys. To add an output to the master playlist for this job, include it in the <code>OutputKeys</code> of the associated playlist.</p>
    pub fn set_segment_duration(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.segment_duration = input;
        self
    }
    /// <p> The status of one output in a job. If you specified only one output for the job, <code>Outputs:Status</code> is always the same as <code>Job:Status</code>. If you specified more than one output: </p>
    /// <ul>
    /// <li> <p> <code>Job:Status</code> and <code>Outputs:Status</code> for all of the outputs is Submitted until Elastic Transcoder starts to process the first output.</p> </li>
    /// <li> <p>When Elastic Transcoder starts to process the first output, <code>Outputs:Status</code> for that output and <code>Job:Status</code> both change to Progressing. For each output, the value of <code>Outputs:Status</code> remains Submitted until Elastic Transcoder starts to process the output.</p> </li>
    /// <li> <p>Job:Status remains Progressing until all of the outputs reach a terminal status, either Complete or Error.</p> </li>
    /// <li> <p>When all of the outputs reach a terminal status, <code>Job:Status</code> changes to Complete only if <code>Outputs:Status</code> for all of the outputs is <code>Complete</code>. If <code>Outputs:Status</code> for one or more outputs is <code>Error</code>, the terminal status for <code>Job:Status</code> is also <code>Error</code>.</p> </li>
    /// </ul>
    /// <p>The value of <code>Status</code> is one of the following: <code>Submitted</code>, <code>Progressing</code>, <code>Complete</code>, <code>Canceled</code>, or <code>Error</code>. </p>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.status = Some(input.into());
        self
    }
    /// <p> The status of one output in a job. If you specified only one output for the job, <code>Outputs:Status</code> is always the same as <code>Job:Status</code>. If you specified more than one output: </p>
    /// <ul>
    /// <li> <p> <code>Job:Status</code> and <code>Outputs:Status</code> for all of the outputs is Submitted until Elastic Transcoder starts to process the first output.</p> </li>
    /// <li> <p>When Elastic Transcoder starts to process the first output, <code>Outputs:Status</code> for that output and <code>Job:Status</code> both change to Progressing. For each output, the value of <code>Outputs:Status</code> remains Submitted until Elastic Transcoder starts to process the output.</p> </li>
    /// <li> <p>Job:Status remains Progressing until all of the outputs reach a terminal status, either Complete or Error.</p> </li>
    /// <li> <p>When all of the outputs reach a terminal status, <code>Job:Status</code> changes to Complete only if <code>Outputs:Status</code> for all of the outputs is <code>Complete</code>. If <code>Outputs:Status</code> for one or more outputs is <code>Error</code>, the terminal status for <code>Job:Status</code> is also <code>Error</code>.</p> </li>
    /// </ul>
    /// <p>The value of <code>Status</code> is one of the following: <code>Submitted</code>, <code>Progressing</code>, <code>Complete</code>, <code>Canceled</code>, or <code>Error</code>. </p>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>Information that further explains <code>Status</code>.</p>
    pub fn status_detail(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_detail = Some(input.into());
        self
    }
    /// <p>Information that further explains <code>Status</code>.</p>
    pub fn set_status_detail(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_detail = input;
        self
    }
    /// <p>Duration of the output file, in seconds.</p>
    pub fn duration(mut self, input: i64) -> Self {
        self.duration = Some(input);
        self
    }
    /// <p>Duration of the output file, in seconds.</p>
    pub fn set_duration(mut self, input: std::option::Option<i64>) -> Self {
        self.duration = input;
        self
    }
    /// <p>Specifies the width of the output file in pixels.</p>
    pub fn width(mut self, input: i32) -> Self {
        self.width = Some(input);
        self
    }
    /// <p>Specifies the width of the output file in pixels.</p>
    pub fn set_width(mut self, input: std::option::Option<i32>) -> Self {
        self.width = input;
        self
    }
    /// <p>Height of the output file, in pixels.</p>
    pub fn height(mut self, input: i32) -> Self {
        self.height = Some(input);
        self
    }
    /// <p>Height of the output file, in pixels.</p>
    pub fn set_height(mut self, input: std::option::Option<i32>) -> Self {
        self.height = input;
        self
    }
    /// <p>Frame rate of the output file, in frames per second.</p>
    pub fn frame_rate(mut self, input: impl Into<std::string::String>) -> Self {
        self.frame_rate = Some(input.into());
        self
    }
    /// <p>Frame rate of the output file, in frames per second.</p>
    pub fn set_frame_rate(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.frame_rate = input;
        self
    }
    /// <p>File size of the output file, in bytes.</p>
    pub fn file_size(mut self, input: i64) -> Self {
        self.file_size = Some(input);
        self
    }
    /// <p>File size of the output file, in bytes.</p>
    pub fn set_file_size(mut self, input: std::option::Option<i64>) -> Self {
        self.file_size = input;
        self
    }
    /// <p>Duration of the output file, in milliseconds.</p>
    pub fn duration_millis(mut self, input: i64) -> Self {
        self.duration_millis = Some(input);
        self
    }
    /// <p>Duration of the output file, in milliseconds.</p>
    pub fn set_duration_millis(mut self, input: std::option::Option<i64>) -> Self {
        self.duration_millis = input;
        self
    }
    /// Appends an item to `watermarks`.
    ///
    /// To override the contents of this collection use [`set_watermarks`](Self::set_watermarks).
    ///
    /// <p>Information about the watermarks that you want Elastic Transcoder to add to the video during transcoding. You can specify up to four watermarks for each output. Settings for each watermark must be defined in the preset that you specify in <code>Preset</code> for the current output.</p>
    /// <p>Watermarks are added to the output video in the sequence in which you list them in the job outputâ€”the first watermark in the list is added to the output video first, the second watermark in the list is added next, and so on. As a result, if the settings in a preset cause Elastic Transcoder to place all watermarks in the same location, the second watermark that you add covers the first one, the third one covers the second, and the fourth one covers the third.</p>
    pub fn watermarks(mut self, input: crate::types::JobWatermark) -> Self {
        let mut v = self.watermarks.unwrap_or_default();
        v.push(input);
        self.watermarks = Some(v);
        self
    }
    /// <p>Information about the watermarks that you want Elastic Transcoder to add to the video during transcoding. You can specify up to four watermarks for each output. Settings for each watermark must be defined in the preset that you specify in <code>Preset</code> for the current output.</p>
    /// <p>Watermarks are added to the output video in the sequence in which you list them in the job outputâ€”the first watermark in the list is added to the output video first, the second watermark in the list is added next, and so on. As a result, if the settings in a preset cause Elastic Transcoder to place all watermarks in the same location, the second watermark that you add covers the first one, the third one covers the second, and the fourth one covers the third.</p>
    pub fn set_watermarks(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::JobWatermark>>,
    ) -> Self {
        self.watermarks = input;
        self
    }
    /// <p>The album art to be associated with the output file, if any.</p>
    pub fn album_art(mut self, input: crate::types::JobAlbumArt) -> Self {
        self.album_art = Some(input);
        self
    }
    /// <p>The album art to be associated with the output file, if any.</p>
    pub fn set_album_art(mut self, input: std::option::Option<crate::types::JobAlbumArt>) -> Self {
        self.album_art = input;
        self
    }
    /// Appends an item to `composition`.
    ///
    /// To override the contents of this collection use [`set_composition`](Self::set_composition).
    ///
    /// <p>You can create an output file that contains an excerpt from the input file. This excerpt, called a clip, can come from the beginning, middle, or end of the file. The Composition object contains settings for the clips that make up an output file. For the current release, you can only specify settings for a single clip per output file. The Composition object cannot be null.</p>
    #[deprecated]
    pub fn composition(mut self, input: crate::types::Clip) -> Self {
        let mut v = self.composition.unwrap_or_default();
        v.push(input);
        self.composition = Some(v);
        self
    }
    /// <p>You can create an output file that contains an excerpt from the input file. This excerpt, called a clip, can come from the beginning, middle, or end of the file. The Composition object contains settings for the clips that make up an output file. For the current release, you can only specify settings for a single clip per output file. The Composition object cannot be null.</p>
    #[deprecated]
    pub fn set_composition(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Clip>>,
    ) -> Self {
        self.composition = input;
        self
    }
    /// <p>You can configure Elastic Transcoder to transcode captions, or subtitles, from one format to another. All captions must be in UTF-8. Elastic Transcoder supports two types of captions:</p>
    /// <ul>
    /// <li> <p> <b>Embedded:</b> Embedded captions are included in the same file as the audio and video. Elastic Transcoder supports only one embedded caption per language, to a maximum of 300 embedded captions per file.</p> <p>Valid input values include: <code>CEA-608 (EIA-608</code>, first non-empty channel only), <code>CEA-708 (EIA-708</code>, first non-empty channel only), and <code>mov-text</code> </p> <p>Valid outputs include: <code>mov-text</code> </p> <p>Elastic Transcoder supports a maximum of one embedded format per output.</p> </li>
    /// <li> <p> <b>Sidecar:</b> Sidecar captions are kept in a separate metadata file from the audio and video data. Sidecar captions require a player that is capable of understanding the relationship between the video file and the sidecar file. Elastic Transcoder supports only one sidecar caption per language, to a maximum of 20 sidecar captions per file.</p> <p>Valid input values include: <code>dfxp</code> (first div element only), <code>ebu-tt</code>, <code>scc</code>, <code>smpt</code>, <code>srt</code>, <code>ttml</code> (first div element only), and <code>webvtt</code> </p> <p>Valid outputs include: <code>dfxp</code> (first div element only), <code>scc</code>, <code>srt</code>, and <code>webvtt</code>.</p> </li>
    /// </ul>
    /// <p>If you want ttml or smpte-tt compatible captions, specify dfxp as your output format.</p>
    /// <p>Elastic Transcoder does not support OCR (Optical Character Recognition), does not accept pictures as a valid input for captions, and is not available for audio-only transcoding. Elastic Transcoder does not preserve text formatting (for example, italics) during the transcoding process.</p>
    /// <p>To remove captions or leave the captions empty, set <code>Captions</code> to null. To pass through existing captions unchanged, set the <code>MergePolicy</code> to <code>MergeRetain</code>, and pass in a null <code>CaptionSources</code> array.</p>
    /// <p>For more information on embedded files, see the Subtitles Wikipedia page.</p>
    /// <p>For more information on sidecar files, see the Extensible Metadata Platform and Sidecar file Wikipedia pages.</p>
    pub fn captions(mut self, input: crate::types::Captions) -> Self {
        self.captions = Some(input);
        self
    }
    /// <p>You can configure Elastic Transcoder to transcode captions, or subtitles, from one format to another. All captions must be in UTF-8. Elastic Transcoder supports two types of captions:</p>
    /// <ul>
    /// <li> <p> <b>Embedded:</b> Embedded captions are included in the same file as the audio and video. Elastic Transcoder supports only one embedded caption per language, to a maximum of 300 embedded captions per file.</p> <p>Valid input values include: <code>CEA-608 (EIA-608</code>, first non-empty channel only), <code>CEA-708 (EIA-708</code>, first non-empty channel only), and <code>mov-text</code> </p> <p>Valid outputs include: <code>mov-text</code> </p> <p>Elastic Transcoder supports a maximum of one embedded format per output.</p> </li>
    /// <li> <p> <b>Sidecar:</b> Sidecar captions are kept in a separate metadata file from the audio and video data. Sidecar captions require a player that is capable of understanding the relationship between the video file and the sidecar file. Elastic Transcoder supports only one sidecar caption per language, to a maximum of 20 sidecar captions per file.</p> <p>Valid input values include: <code>dfxp</code> (first div element only), <code>ebu-tt</code>, <code>scc</code>, <code>smpt</code>, <code>srt</code>, <code>ttml</code> (first div element only), and <code>webvtt</code> </p> <p>Valid outputs include: <code>dfxp</code> (first div element only), <code>scc</code>, <code>srt</code>, and <code>webvtt</code>.</p> </li>
    /// </ul>
    /// <p>If you want ttml or smpte-tt compatible captions, specify dfxp as your output format.</p>
    /// <p>Elastic Transcoder does not support OCR (Optical Character Recognition), does not accept pictures as a valid input for captions, and is not available for audio-only transcoding. Elastic Transcoder does not preserve text formatting (for example, italics) during the transcoding process.</p>
    /// <p>To remove captions or leave the captions empty, set <code>Captions</code> to null. To pass through existing captions unchanged, set the <code>MergePolicy</code> to <code>MergeRetain</code>, and pass in a null <code>CaptionSources</code> array.</p>
    /// <p>For more information on embedded files, see the Subtitles Wikipedia page.</p>
    /// <p>For more information on sidecar files, see the Extensible Metadata Platform and Sidecar file Wikipedia pages.</p>
    pub fn set_captions(mut self, input: std::option::Option<crate::types::Captions>) -> Self {
        self.captions = input;
        self
    }
    /// <p>The encryption settings, if any, that you want Elastic Transcoder to apply to your output files. If you choose to use encryption, you must specify a mode to use. If you choose not to use encryption, Elastic Transcoder writes an unencrypted file to your Amazon S3 bucket.</p>
    pub fn encryption(mut self, input: crate::types::Encryption) -> Self {
        self.encryption = Some(input);
        self
    }
    /// <p>The encryption settings, if any, that you want Elastic Transcoder to apply to your output files. If you choose to use encryption, you must specify a mode to use. If you choose not to use encryption, Elastic Transcoder writes an unencrypted file to your Amazon S3 bucket.</p>
    pub fn set_encryption(mut self, input: std::option::Option<crate::types::Encryption>) -> Self {
        self.encryption = input;
        self
    }
    /// <p>If Elastic Transcoder used a preset with a <code>ColorSpaceConversionMode</code> to transcode the output file, the <code>AppliedColorSpaceConversion</code> parameter shows the conversion used. If no <code>ColorSpaceConversionMode</code> was defined in the preset, this parameter is not be included in the job response.</p>
    pub fn applied_color_space_conversion(mut self, input: impl Into<std::string::String>) -> Self {
        self.applied_color_space_conversion = Some(input.into());
        self
    }
    /// <p>If Elastic Transcoder used a preset with a <code>ColorSpaceConversionMode</code> to transcode the output file, the <code>AppliedColorSpaceConversion</code> parameter shows the conversion used. If no <code>ColorSpaceConversionMode</code> was defined in the preset, this parameter is not be included in the job response.</p>
    pub fn set_applied_color_space_conversion(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.applied_color_space_conversion = input;
        self
    }
    /// Consumes the builder and constructs a [`JobOutput`](crate::types::JobOutput).
    pub fn build(self) -> crate::types::JobOutput {
        crate::types::JobOutput {
            id: self.id,
            key: self.key,
            thumbnail_pattern: self.thumbnail_pattern,
            thumbnail_encryption: self.thumbnail_encryption,
            rotate: self.rotate,
            preset_id: self.preset_id,
            segment_duration: self.segment_duration,
            status: self.status,
            status_detail: self.status_detail,
            duration: self.duration,
            width: self.width,
            height: self.height,
            frame_rate: self.frame_rate,
            file_size: self.file_size,
            duration_millis: self.duration_millis,
            watermarks: self.watermarks,
            album_art: self.album_art,
            composition: self.composition,
            captions: self.captions,
            encryption: self.encryption,
            applied_color_space_conversion: self.applied_color_space_conversion,
        }
    }
}
