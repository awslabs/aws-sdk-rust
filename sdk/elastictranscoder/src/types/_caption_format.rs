// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The file format of the output captions. If you leave this value blank, Elastic Transcoder returns an error.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CaptionFormat {
    /// <p>The format you specify determines whether Elastic Transcoder generates an embedded or sidecar caption for this output.</p>
    /// <ul>
    /// <li> <p> <b>Valid Embedded Caption Formats:</b> </p>
    /// <ul>
    /// <li> <p> <b>for FLAC</b>: None</p> </li>
    /// <li> <p> <b>For MP3</b>: None</p> </li>
    /// <li> <p> <b>For MP4</b>: mov-text</p> </li>
    /// <li> <p> <b>For MPEG-TS</b>: None</p> </li>
    /// <li> <p> <b>For ogg</b>: None</p> </li>
    /// <li> <p> <b>For webm</b>: None</p> </li>
    /// </ul> </li>
    /// <li> <p> <b>Valid Sidecar Caption Formats:</b> Elastic Transcoder supports dfxp (first div element only), scc, srt, and webvtt. If you want ttml or smpte-tt compatible captions, specify dfxp as your output format.</p>
    /// <ul>
    /// <li> <p> <b>For FMP4</b>: dfxp</p> </li>
    /// <li> <p> <b>Non-FMP4 outputs</b>: All sidecar types</p> </li>
    /// </ul> <p> <code>fmp4</code> captions have an extension of <code>.ismt</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub format: std::option::Option<std::string::String>,
    /// <p>The prefix for caption filenames, in the form <i>description</i>-<code>{language}</code>, where:</p>
    /// <ul>
    /// <li> <p> <i>description</i> is a description of the video.</p> </li>
    /// <li> <p> <code>{language}</code> is a literal value that Elastic Transcoder replaces with the two- or three-letter code for the language of the caption in the output file names.</p> </li>
    /// </ul>
    /// <p>If you don't include <code>{language}</code> in the file name pattern, Elastic Transcoder automatically appends "<code>{language}</code>" to the value that you specify for the description. In addition, Elastic Transcoder automatically appends the count to the end of the segment files.</p>
    /// <p>For example, suppose you're transcoding into srt format. When you enter "Sydney-{language}-sunrise", and the language of the captions is English (en), the name of the first caption file is be Sydney-en-sunrise00000.srt.</p>
    #[doc(hidden)]
    pub pattern: std::option::Option<std::string::String>,
    /// <p>The encryption settings, if any, that you want Elastic Transcoder to apply to your caption formats.</p>
    #[doc(hidden)]
    pub encryption: std::option::Option<crate::types::Encryption>,
}
impl CaptionFormat {
    /// <p>The format you specify determines whether Elastic Transcoder generates an embedded or sidecar caption for this output.</p>
    /// <ul>
    /// <li> <p> <b>Valid Embedded Caption Formats:</b> </p>
    /// <ul>
    /// <li> <p> <b>for FLAC</b>: None</p> </li>
    /// <li> <p> <b>For MP3</b>: None</p> </li>
    /// <li> <p> <b>For MP4</b>: mov-text</p> </li>
    /// <li> <p> <b>For MPEG-TS</b>: None</p> </li>
    /// <li> <p> <b>For ogg</b>: None</p> </li>
    /// <li> <p> <b>For webm</b>: None</p> </li>
    /// </ul> </li>
    /// <li> <p> <b>Valid Sidecar Caption Formats:</b> Elastic Transcoder supports dfxp (first div element only), scc, srt, and webvtt. If you want ttml or smpte-tt compatible captions, specify dfxp as your output format.</p>
    /// <ul>
    /// <li> <p> <b>For FMP4</b>: dfxp</p> </li>
    /// <li> <p> <b>Non-FMP4 outputs</b>: All sidecar types</p> </li>
    /// </ul> <p> <code>fmp4</code> captions have an extension of <code>.ismt</code> </p> </li>
    /// </ul>
    pub fn format(&self) -> std::option::Option<&str> {
        self.format.as_deref()
    }
    /// <p>The prefix for caption filenames, in the form <i>description</i>-<code>{language}</code>, where:</p>
    /// <ul>
    /// <li> <p> <i>description</i> is a description of the video.</p> </li>
    /// <li> <p> <code>{language}</code> is a literal value that Elastic Transcoder replaces with the two- or three-letter code for the language of the caption in the output file names.</p> </li>
    /// </ul>
    /// <p>If you don't include <code>{language}</code> in the file name pattern, Elastic Transcoder automatically appends "<code>{language}</code>" to the value that you specify for the description. In addition, Elastic Transcoder automatically appends the count to the end of the segment files.</p>
    /// <p>For example, suppose you're transcoding into srt format. When you enter "Sydney-{language}-sunrise", and the language of the captions is English (en), the name of the first caption file is be Sydney-en-sunrise00000.srt.</p>
    pub fn pattern(&self) -> std::option::Option<&str> {
        self.pattern.as_deref()
    }
    /// <p>The encryption settings, if any, that you want Elastic Transcoder to apply to your caption formats.</p>
    pub fn encryption(&self) -> std::option::Option<&crate::types::Encryption> {
        self.encryption.as_ref()
    }
}
impl CaptionFormat {
    /// Creates a new builder-style object to manufacture [`CaptionFormat`](crate::types::CaptionFormat).
    pub fn builder() -> crate::types::builders::CaptionFormatBuilder {
        crate::types::builders::CaptionFormatBuilder::default()
    }
}

/// A builder for [`CaptionFormat`](crate::types::CaptionFormat).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CaptionFormatBuilder {
    pub(crate) format: std::option::Option<std::string::String>,
    pub(crate) pattern: std::option::Option<std::string::String>,
    pub(crate) encryption: std::option::Option<crate::types::Encryption>,
}
impl CaptionFormatBuilder {
    /// <p>The format you specify determines whether Elastic Transcoder generates an embedded or sidecar caption for this output.</p>
    /// <ul>
    /// <li> <p> <b>Valid Embedded Caption Formats:</b> </p>
    /// <ul>
    /// <li> <p> <b>for FLAC</b>: None</p> </li>
    /// <li> <p> <b>For MP3</b>: None</p> </li>
    /// <li> <p> <b>For MP4</b>: mov-text</p> </li>
    /// <li> <p> <b>For MPEG-TS</b>: None</p> </li>
    /// <li> <p> <b>For ogg</b>: None</p> </li>
    /// <li> <p> <b>For webm</b>: None</p> </li>
    /// </ul> </li>
    /// <li> <p> <b>Valid Sidecar Caption Formats:</b> Elastic Transcoder supports dfxp (first div element only), scc, srt, and webvtt. If you want ttml or smpte-tt compatible captions, specify dfxp as your output format.</p>
    /// <ul>
    /// <li> <p> <b>For FMP4</b>: dfxp</p> </li>
    /// <li> <p> <b>Non-FMP4 outputs</b>: All sidecar types</p> </li>
    /// </ul> <p> <code>fmp4</code> captions have an extension of <code>.ismt</code> </p> </li>
    /// </ul>
    pub fn format(mut self, input: impl Into<std::string::String>) -> Self {
        self.format = Some(input.into());
        self
    }
    /// <p>The format you specify determines whether Elastic Transcoder generates an embedded or sidecar caption for this output.</p>
    /// <ul>
    /// <li> <p> <b>Valid Embedded Caption Formats:</b> </p>
    /// <ul>
    /// <li> <p> <b>for FLAC</b>: None</p> </li>
    /// <li> <p> <b>For MP3</b>: None</p> </li>
    /// <li> <p> <b>For MP4</b>: mov-text</p> </li>
    /// <li> <p> <b>For MPEG-TS</b>: None</p> </li>
    /// <li> <p> <b>For ogg</b>: None</p> </li>
    /// <li> <p> <b>For webm</b>: None</p> </li>
    /// </ul> </li>
    /// <li> <p> <b>Valid Sidecar Caption Formats:</b> Elastic Transcoder supports dfxp (first div element only), scc, srt, and webvtt. If you want ttml or smpte-tt compatible captions, specify dfxp as your output format.</p>
    /// <ul>
    /// <li> <p> <b>For FMP4</b>: dfxp</p> </li>
    /// <li> <p> <b>Non-FMP4 outputs</b>: All sidecar types</p> </li>
    /// </ul> <p> <code>fmp4</code> captions have an extension of <code>.ismt</code> </p> </li>
    /// </ul>
    pub fn set_format(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.format = input;
        self
    }
    /// <p>The prefix for caption filenames, in the form <i>description</i>-<code>{language}</code>, where:</p>
    /// <ul>
    /// <li> <p> <i>description</i> is a description of the video.</p> </li>
    /// <li> <p> <code>{language}</code> is a literal value that Elastic Transcoder replaces with the two- or three-letter code for the language of the caption in the output file names.</p> </li>
    /// </ul>
    /// <p>If you don't include <code>{language}</code> in the file name pattern, Elastic Transcoder automatically appends "<code>{language}</code>" to the value that you specify for the description. In addition, Elastic Transcoder automatically appends the count to the end of the segment files.</p>
    /// <p>For example, suppose you're transcoding into srt format. When you enter "Sydney-{language}-sunrise", and the language of the captions is English (en), the name of the first caption file is be Sydney-en-sunrise00000.srt.</p>
    pub fn pattern(mut self, input: impl Into<std::string::String>) -> Self {
        self.pattern = Some(input.into());
        self
    }
    /// <p>The prefix for caption filenames, in the form <i>description</i>-<code>{language}</code>, where:</p>
    /// <ul>
    /// <li> <p> <i>description</i> is a description of the video.</p> </li>
    /// <li> <p> <code>{language}</code> is a literal value that Elastic Transcoder replaces with the two- or three-letter code for the language of the caption in the output file names.</p> </li>
    /// </ul>
    /// <p>If you don't include <code>{language}</code> in the file name pattern, Elastic Transcoder automatically appends "<code>{language}</code>" to the value that you specify for the description. In addition, Elastic Transcoder automatically appends the count to the end of the segment files.</p>
    /// <p>For example, suppose you're transcoding into srt format. When you enter "Sydney-{language}-sunrise", and the language of the captions is English (en), the name of the first caption file is be Sydney-en-sunrise00000.srt.</p>
    pub fn set_pattern(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.pattern = input;
        self
    }
    /// <p>The encryption settings, if any, that you want Elastic Transcoder to apply to your caption formats.</p>
    pub fn encryption(mut self, input: crate::types::Encryption) -> Self {
        self.encryption = Some(input);
        self
    }
    /// <p>The encryption settings, if any, that you want Elastic Transcoder to apply to your caption formats.</p>
    pub fn set_encryption(mut self, input: std::option::Option<crate::types::Encryption>) -> Self {
        self.encryption = input;
        self
    }
    /// Consumes the builder and constructs a [`CaptionFormat`](crate::types::CaptionFormat).
    pub fn build(self) -> crate::types::CaptionFormat {
        crate::types::CaptionFormat {
            format: self.format,
            pattern: self.pattern,
            encryption: self.encryption,
        }
    }
}
