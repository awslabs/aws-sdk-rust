// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Settings that determine when a clip begins and how long it lasts.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TimeSpan {
    /// <p>The place in the input file where you want a clip to start. The format can be either HH:mm:ss.SSS (maximum value: 23:59:59.999; SSS is thousandths of a second) or sssss.SSS (maximum value: 86399.999). If you don't specify a value, Elastic Transcoder starts at the beginning of the input file.</p>
    #[doc(hidden)]
    pub start_time: std::option::Option<std::string::String>,
    /// <p>The duration of the clip. The format can be either HH:mm:ss.SSS (maximum value: 23:59:59.999; SSS is thousandths of a second) or sssss.SSS (maximum value: 86399.999). If you don't specify a value, Elastic Transcoder creates an output file from StartTime to the end of the file.</p>
    /// <p>If you specify a value longer than the duration of the input file, Elastic Transcoder transcodes the file and returns a warning message.</p>
    #[doc(hidden)]
    pub duration: std::option::Option<std::string::String>,
}
impl TimeSpan {
    /// <p>The place in the input file where you want a clip to start. The format can be either HH:mm:ss.SSS (maximum value: 23:59:59.999; SSS is thousandths of a second) or sssss.SSS (maximum value: 86399.999). If you don't specify a value, Elastic Transcoder starts at the beginning of the input file.</p>
    pub fn start_time(&self) -> std::option::Option<&str> {
        self.start_time.as_deref()
    }
    /// <p>The duration of the clip. The format can be either HH:mm:ss.SSS (maximum value: 23:59:59.999; SSS is thousandths of a second) or sssss.SSS (maximum value: 86399.999). If you don't specify a value, Elastic Transcoder creates an output file from StartTime to the end of the file.</p>
    /// <p>If you specify a value longer than the duration of the input file, Elastic Transcoder transcodes the file and returns a warning message.</p>
    pub fn duration(&self) -> std::option::Option<&str> {
        self.duration.as_deref()
    }
}
impl TimeSpan {
    /// Creates a new builder-style object to manufacture [`TimeSpan`](crate::types::TimeSpan).
    pub fn builder() -> crate::types::builders::TimeSpanBuilder {
        crate::types::builders::TimeSpanBuilder::default()
    }
}

/// A builder for [`TimeSpan`](crate::types::TimeSpan).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TimeSpanBuilder {
    pub(crate) start_time: std::option::Option<std::string::String>,
    pub(crate) duration: std::option::Option<std::string::String>,
}
impl TimeSpanBuilder {
    /// <p>The place in the input file where you want a clip to start. The format can be either HH:mm:ss.SSS (maximum value: 23:59:59.999; SSS is thousandths of a second) or sssss.SSS (maximum value: 86399.999). If you don't specify a value, Elastic Transcoder starts at the beginning of the input file.</p>
    pub fn start_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.start_time = Some(input.into());
        self
    }
    /// <p>The place in the input file where you want a clip to start. The format can be either HH:mm:ss.SSS (maximum value: 23:59:59.999; SSS is thousandths of a second) or sssss.SSS (maximum value: 86399.999). If you don't specify a value, Elastic Transcoder starts at the beginning of the input file.</p>
    pub fn set_start_time(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The duration of the clip. The format can be either HH:mm:ss.SSS (maximum value: 23:59:59.999; SSS is thousandths of a second) or sssss.SSS (maximum value: 86399.999). If you don't specify a value, Elastic Transcoder creates an output file from StartTime to the end of the file.</p>
    /// <p>If you specify a value longer than the duration of the input file, Elastic Transcoder transcodes the file and returns a warning message.</p>
    pub fn duration(mut self, input: impl Into<std::string::String>) -> Self {
        self.duration = Some(input.into());
        self
    }
    /// <p>The duration of the clip. The format can be either HH:mm:ss.SSS (maximum value: 23:59:59.999; SSS is thousandths of a second) or sssss.SSS (maximum value: 86399.999). If you don't specify a value, Elastic Transcoder creates an output file from StartTime to the end of the file.</p>
    /// <p>If you specify a value longer than the duration of the input file, Elastic Transcoder transcodes the file and returns a warning message.</p>
    pub fn set_duration(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.duration = input;
        self
    }
    /// Consumes the builder and constructs a [`TimeSpan`](crate::types::TimeSpan).
    pub fn build(self) -> crate::types::TimeSpan {
        crate::types::TimeSpan {
            start_time: self.start_time,
            duration: self.duration,
        }
    }
}
