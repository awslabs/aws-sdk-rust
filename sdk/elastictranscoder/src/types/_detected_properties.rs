// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The detected properties of the input file. Elastic Transcoder identifies these values from the input file.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DetectedProperties {
    /// <p>The detected width of the input file, in pixels.</p>
    #[doc(hidden)]
    pub width: std::option::Option<i32>,
    /// <p>The detected height of the input file, in pixels.</p>
    #[doc(hidden)]
    pub height: std::option::Option<i32>,
    /// <p>The detected frame rate of the input file, in frames per second.</p>
    #[doc(hidden)]
    pub frame_rate: std::option::Option<std::string::String>,
    /// <p>The detected file size of the input file, in bytes.</p>
    #[doc(hidden)]
    pub file_size: std::option::Option<i64>,
    /// <p>The detected duration of the input file, in milliseconds.</p>
    #[doc(hidden)]
    pub duration_millis: std::option::Option<i64>,
}
impl DetectedProperties {
    /// <p>The detected width of the input file, in pixels.</p>
    pub fn width(&self) -> std::option::Option<i32> {
        self.width
    }
    /// <p>The detected height of the input file, in pixels.</p>
    pub fn height(&self) -> std::option::Option<i32> {
        self.height
    }
    /// <p>The detected frame rate of the input file, in frames per second.</p>
    pub fn frame_rate(&self) -> std::option::Option<&str> {
        self.frame_rate.as_deref()
    }
    /// <p>The detected file size of the input file, in bytes.</p>
    pub fn file_size(&self) -> std::option::Option<i64> {
        self.file_size
    }
    /// <p>The detected duration of the input file, in milliseconds.</p>
    pub fn duration_millis(&self) -> std::option::Option<i64> {
        self.duration_millis
    }
}
impl DetectedProperties {
    /// Creates a new builder-style object to manufacture [`DetectedProperties`](crate::types::DetectedProperties).
    pub fn builder() -> crate::types::builders::DetectedPropertiesBuilder {
        crate::types::builders::DetectedPropertiesBuilder::default()
    }
}

/// A builder for [`DetectedProperties`](crate::types::DetectedProperties).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DetectedPropertiesBuilder {
    pub(crate) width: std::option::Option<i32>,
    pub(crate) height: std::option::Option<i32>,
    pub(crate) frame_rate: std::option::Option<std::string::String>,
    pub(crate) file_size: std::option::Option<i64>,
    pub(crate) duration_millis: std::option::Option<i64>,
}
impl DetectedPropertiesBuilder {
    /// <p>The detected width of the input file, in pixels.</p>
    pub fn width(mut self, input: i32) -> Self {
        self.width = Some(input);
        self
    }
    /// <p>The detected width of the input file, in pixels.</p>
    pub fn set_width(mut self, input: std::option::Option<i32>) -> Self {
        self.width = input;
        self
    }
    /// <p>The detected height of the input file, in pixels.</p>
    pub fn height(mut self, input: i32) -> Self {
        self.height = Some(input);
        self
    }
    /// <p>The detected height of the input file, in pixels.</p>
    pub fn set_height(mut self, input: std::option::Option<i32>) -> Self {
        self.height = input;
        self
    }
    /// <p>The detected frame rate of the input file, in frames per second.</p>
    pub fn frame_rate(mut self, input: impl Into<std::string::String>) -> Self {
        self.frame_rate = Some(input.into());
        self
    }
    /// <p>The detected frame rate of the input file, in frames per second.</p>
    pub fn set_frame_rate(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.frame_rate = input;
        self
    }
    /// <p>The detected file size of the input file, in bytes.</p>
    pub fn file_size(mut self, input: i64) -> Self {
        self.file_size = Some(input);
        self
    }
    /// <p>The detected file size of the input file, in bytes.</p>
    pub fn set_file_size(mut self, input: std::option::Option<i64>) -> Self {
        self.file_size = input;
        self
    }
    /// <p>The detected duration of the input file, in milliseconds.</p>
    pub fn duration_millis(mut self, input: i64) -> Self {
        self.duration_millis = Some(input);
        self
    }
    /// <p>The detected duration of the input file, in milliseconds.</p>
    pub fn set_duration_millis(mut self, input: std::option::Option<i64>) -> Self {
        self.duration_millis = input;
        self
    }
    /// Consumes the builder and constructs a [`DetectedProperties`](crate::types::DetectedProperties).
    pub fn build(self) -> crate::types::DetectedProperties {
        crate::types::DetectedProperties {
            width: self.width,
            height: self.height,
            frame_rate: self.frame_rate,
            file_size: self.file_size,
            duration_millis: self.duration_millis,
        }
    }
}
