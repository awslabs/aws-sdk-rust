// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_file_system_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_file_system::CreateFileSystemInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.availability_zone_name {
        object.key("AvailabilityZoneName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.backup {
        object.key("Backup").boolean(*var_2);
    }
    if let Some(var_3) = &input.creation_token {
        object.key("CreationToken").string(var_3.as_str());
    }
    if let Some(var_4) = &input.encrypted {
        object.key("Encrypted").boolean(*var_4);
    }
    if let Some(var_5) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_5.as_str());
    }
    if let Some(var_6) = &input.performance_mode {
        object.key("PerformanceMode").string(var_6.as_str());
    }
    if let Some(var_7) = &input.provisioned_throughput_in_mibps {
        object.key("ProvisionedThroughputInMibps").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_7).into()),
        );
    }
    if let Some(var_8) = &input.tags {
        let mut array_9 = object.key("Tags").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.throughput_mode {
        object.key("ThroughputMode").string(var_12.as_str());
    }
    Ok(())
}
