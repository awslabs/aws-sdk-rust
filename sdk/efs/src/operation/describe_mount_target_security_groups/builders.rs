// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::describe_mount_target_security_groups::_describe_mount_target_security_groups_output::DescribeMountTargetSecurityGroupsOutputBuilder;

pub use crate::operation::describe_mount_target_security_groups::_describe_mount_target_security_groups_input::DescribeMountTargetSecurityGroupsInputBuilder;

/// Fluent builder constructing a request to `DescribeMountTargetSecurityGroups`.
///
/// <p>Returns the security groups currently in effect for a mount target. This operation requires that the network interface of the mount target has been created and the lifecycle state of the mount target is not <code>deleted</code>.</p>
/// <p>This operation requires permissions for the following actions:</p>
/// <ul>
/// <li> <p> <code>elasticfilesystem:DescribeMountTargetSecurityGroups</code> action on the mount target's file system. </p> </li>
/// <li> <p> <code>ec2:DescribeNetworkInterfaceAttribute</code> action on the mount target's network interface. </p> </li>
/// </ul>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeMountTargetSecurityGroupsFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::describe_mount_target_security_groups::builders::DescribeMountTargetSecurityGroupsInputBuilder
            }
impl DescribeMountTargetSecurityGroupsFluentBuilder {
    /// Creates a new `DescribeMountTargetSecurityGroups`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::describe_mount_target_security_groups::DescribeMountTargetSecurityGroups, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::describe_mount_target_security_groups::DescribeMountTargetSecurityGroupsError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::describe_mount_target_security_groups::DescribeMountTargetSecurityGroupsOutput, aws_smithy_http::result::SdkError<crate::operation::describe_mount_target_security_groups::DescribeMountTargetSecurityGroupsError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the mount target whose security groups you want to retrieve.</p>
    pub fn mount_target_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.mount_target_id(input.into());
        self
    }
    /// <p>The ID of the mount target whose security groups you want to retrieve.</p>
    pub fn set_mount_target_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_mount_target_id(input);
        self
    }
}
