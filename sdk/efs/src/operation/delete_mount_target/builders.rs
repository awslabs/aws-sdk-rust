// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_mount_target::_delete_mount_target_output::DeleteMountTargetOutputBuilder;

pub use crate::operation::delete_mount_target::_delete_mount_target_input::DeleteMountTargetInputBuilder;

impl crate::operation::delete_mount_target::builders::DeleteMountTargetInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::delete_mount_target::DeleteMountTargetOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_mount_target::DeleteMountTargetError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.delete_mount_target();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DeleteMountTarget`.
///
/// <p>Deletes the specified mount target.</p>
/// <p>This operation forcibly breaks any mounts of the file system by using the mount target that is being deleted, which might disrupt instances or applications using those mounts. To avoid applications getting cut off abruptly, you might consider unmounting any mounts of the mount target, if feasible. The operation also deletes the associated network interface. Uncommitted writes might be lost, but breaking a mount target using this operation does not corrupt the file system itself. The file system you created remains. You can mount an EC2 instance in your VPC by using another mount target.</p>
/// <p>This operation requires permissions for the following action on the file system:</p>
/// <ul>
/// <li>
/// <p><code>elasticfilesystem:DeleteMountTarget</code></p></li>
/// </ul><note>
/// <p>The <code>DeleteMountTarget</code> call returns while the mount target state is still <code>deleting</code>. You can check the mount target deletion by calling the <code>DescribeMountTargets</code> operation, which returns a list of mount target descriptions for the given file system.</p>
/// </note>
/// <p>The operation also requires permissions for the following Amazon EC2 action on the mount target's network interface:</p>
/// <ul>
/// <li>
/// <p><code>ec2:DeleteNetworkInterface</code></p></li>
/// </ul>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DeleteMountTargetFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_mount_target::builders::DeleteMountTargetInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::delete_mount_target::DeleteMountTargetOutput,
        crate::operation::delete_mount_target::DeleteMountTargetError,
    > for DeleteMountTargetFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::delete_mount_target::DeleteMountTargetOutput,
            crate::operation::delete_mount_target::DeleteMountTargetError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DeleteMountTargetFluentBuilder {
    /// Creates a new `DeleteMountTarget`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DeleteMountTarget as a reference.
    pub fn as_input(&self) -> &crate::operation::delete_mount_target::builders::DeleteMountTargetInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_mount_target::DeleteMountTargetOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_mount_target::DeleteMountTargetError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::delete_mount_target::DeleteMountTarget::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::delete_mount_target::DeleteMountTarget::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::delete_mount_target::DeleteMountTargetOutput,
        crate::operation::delete_mount_target::DeleteMountTargetError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of the mount target to delete (String).</p>
    pub fn mount_target_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.mount_target_id(input.into());
        self
    }
    /// <p>The ID of the mount target to delete (String).</p>
    pub fn set_mount_target_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_mount_target_id(input);
        self
    }
    /// <p>The ID of the mount target to delete (String).</p>
    pub fn get_mount_target_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_mount_target_id()
    }
}
