// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides a description of a mount target.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateMountTargetOutput {
    /// <p>Amazon Web Services account ID that owns the resource.</p>
    pub owner_id: ::std::option::Option<::std::string::String>,
    /// <p>System-assigned mount target ID.</p>
    pub mount_target_id: ::std::string::String,
    /// <p>The ID of the file system for which the mount target is intended.</p>
    pub file_system_id: ::std::string::String,
    /// <p>The ID of the mount target's subnet.</p>
    pub subnet_id: ::std::string::String,
    /// <p>Lifecycle state of the mount target.</p>
    pub life_cycle_state: crate::types::LifeCycleState,
    /// <p>Address at which the file system can be mounted by using the mount target.</p>
    pub ip_address: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the network interface that Amazon EFS created when it created the mount target.</p>
    pub network_interface_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique and consistent identifier of the Availability Zone that the mount target resides in. For example, <code>use1-az1</code> is an AZ ID for the us-east-1 Region and it has the same location in every Amazon Web Services account.</p>
    pub availability_zone_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the Availability Zone in which the mount target is located. Availability Zones are independently mapped to names for each Amazon Web Services account. For example, the Availability Zone <code>us-east-1a</code> for your Amazon Web Services account might not be the same location as <code>us-east-1a</code> for another Amazon Web Services account.</p>
    pub availability_zone_name: ::std::option::Option<::std::string::String>,
    /// <p>The virtual private cloud (VPC) ID that the mount target is configured in.</p>
    pub vpc_id: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl CreateMountTargetOutput {
    /// <p>Amazon Web Services account ID that owns the resource.</p>
    pub fn owner_id(&self) -> ::std::option::Option<&str> {
        self.owner_id.as_deref()
    }
    /// <p>System-assigned mount target ID.</p>
    pub fn mount_target_id(&self) -> &str {
        use std::ops::Deref;
        self.mount_target_id.deref()
    }
    /// <p>The ID of the file system for which the mount target is intended.</p>
    pub fn file_system_id(&self) -> &str {
        use std::ops::Deref;
        self.file_system_id.deref()
    }
    /// <p>The ID of the mount target's subnet.</p>
    pub fn subnet_id(&self) -> &str {
        use std::ops::Deref;
        self.subnet_id.deref()
    }
    /// <p>Lifecycle state of the mount target.</p>
    pub fn life_cycle_state(&self) -> &crate::types::LifeCycleState {
        &self.life_cycle_state
    }
    /// <p>Address at which the file system can be mounted by using the mount target.</p>
    pub fn ip_address(&self) -> ::std::option::Option<&str> {
        self.ip_address.as_deref()
    }
    /// <p>The ID of the network interface that Amazon EFS created when it created the mount target.</p>
    pub fn network_interface_id(&self) -> ::std::option::Option<&str> {
        self.network_interface_id.as_deref()
    }
    /// <p>The unique and consistent identifier of the Availability Zone that the mount target resides in. For example, <code>use1-az1</code> is an AZ ID for the us-east-1 Region and it has the same location in every Amazon Web Services account.</p>
    pub fn availability_zone_id(&self) -> ::std::option::Option<&str> {
        self.availability_zone_id.as_deref()
    }
    /// <p>The name of the Availability Zone in which the mount target is located. Availability Zones are independently mapped to names for each Amazon Web Services account. For example, the Availability Zone <code>us-east-1a</code> for your Amazon Web Services account might not be the same location as <code>us-east-1a</code> for another Amazon Web Services account.</p>
    pub fn availability_zone_name(&self) -> ::std::option::Option<&str> {
        self.availability_zone_name.as_deref()
    }
    /// <p>The virtual private cloud (VPC) ID that the mount target is configured in.</p>
    pub fn vpc_id(&self) -> ::std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for CreateMountTargetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateMountTargetOutput {
    /// Creates a new builder-style object to manufacture [`CreateMountTargetOutput`](crate::operation::create_mount_target::CreateMountTargetOutput).
    pub fn builder() -> crate::operation::create_mount_target::builders::CreateMountTargetOutputBuilder {
        crate::operation::create_mount_target::builders::CreateMountTargetOutputBuilder::default()
    }
}

/// A builder for [`CreateMountTargetOutput`](crate::operation::create_mount_target::CreateMountTargetOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateMountTargetOutputBuilder {
    pub(crate) owner_id: ::std::option::Option<::std::string::String>,
    pub(crate) mount_target_id: ::std::option::Option<::std::string::String>,
    pub(crate) file_system_id: ::std::option::Option<::std::string::String>,
    pub(crate) subnet_id: ::std::option::Option<::std::string::String>,
    pub(crate) life_cycle_state: ::std::option::Option<crate::types::LifeCycleState>,
    pub(crate) ip_address: ::std::option::Option<::std::string::String>,
    pub(crate) network_interface_id: ::std::option::Option<::std::string::String>,
    pub(crate) availability_zone_id: ::std::option::Option<::std::string::String>,
    pub(crate) availability_zone_name: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_id: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl CreateMountTargetOutputBuilder {
    /// <p>Amazon Web Services account ID that owns the resource.</p>
    pub fn owner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Amazon Web Services account ID that owns the resource.</p>
    pub fn set_owner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_id = input;
        self
    }
    /// <p>Amazon Web Services account ID that owns the resource.</p>
    pub fn get_owner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_id
    }
    /// <p>System-assigned mount target ID.</p>
    /// This field is required.
    pub fn mount_target_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.mount_target_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>System-assigned mount target ID.</p>
    pub fn set_mount_target_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.mount_target_id = input;
        self
    }
    /// <p>System-assigned mount target ID.</p>
    pub fn get_mount_target_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.mount_target_id
    }
    /// <p>The ID of the file system for which the mount target is intended.</p>
    /// This field is required.
    pub fn file_system_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.file_system_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the file system for which the mount target is intended.</p>
    pub fn set_file_system_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.file_system_id = input;
        self
    }
    /// <p>The ID of the file system for which the mount target is intended.</p>
    pub fn get_file_system_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.file_system_id
    }
    /// <p>The ID of the mount target's subnet.</p>
    /// This field is required.
    pub fn subnet_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subnet_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the mount target's subnet.</p>
    pub fn set_subnet_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subnet_id = input;
        self
    }
    /// <p>The ID of the mount target's subnet.</p>
    pub fn get_subnet_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.subnet_id
    }
    /// <p>Lifecycle state of the mount target.</p>
    /// This field is required.
    pub fn life_cycle_state(mut self, input: crate::types::LifeCycleState) -> Self {
        self.life_cycle_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>Lifecycle state of the mount target.</p>
    pub fn set_life_cycle_state(mut self, input: ::std::option::Option<crate::types::LifeCycleState>) -> Self {
        self.life_cycle_state = input;
        self
    }
    /// <p>Lifecycle state of the mount target.</p>
    pub fn get_life_cycle_state(&self) -> &::std::option::Option<crate::types::LifeCycleState> {
        &self.life_cycle_state
    }
    /// <p>Address at which the file system can be mounted by using the mount target.</p>
    pub fn ip_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ip_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Address at which the file system can be mounted by using the mount target.</p>
    pub fn set_ip_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ip_address = input;
        self
    }
    /// <p>Address at which the file system can be mounted by using the mount target.</p>
    pub fn get_ip_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.ip_address
    }
    /// <p>The ID of the network interface that Amazon EFS created when it created the mount target.</p>
    pub fn network_interface_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.network_interface_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the network interface that Amazon EFS created when it created the mount target.</p>
    pub fn set_network_interface_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.network_interface_id = input;
        self
    }
    /// <p>The ID of the network interface that Amazon EFS created when it created the mount target.</p>
    pub fn get_network_interface_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.network_interface_id
    }
    /// <p>The unique and consistent identifier of the Availability Zone that the mount target resides in. For example, <code>use1-az1</code> is an AZ ID for the us-east-1 Region and it has the same location in every Amazon Web Services account.</p>
    pub fn availability_zone_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique and consistent identifier of the Availability Zone that the mount target resides in. For example, <code>use1-az1</code> is an AZ ID for the us-east-1 Region and it has the same location in every Amazon Web Services account.</p>
    pub fn set_availability_zone_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone_id = input;
        self
    }
    /// <p>The unique and consistent identifier of the Availability Zone that the mount target resides in. For example, <code>use1-az1</code> is an AZ ID for the us-east-1 Region and it has the same location in every Amazon Web Services account.</p>
    pub fn get_availability_zone_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone_id
    }
    /// <p>The name of the Availability Zone in which the mount target is located. Availability Zones are independently mapped to names for each Amazon Web Services account. For example, the Availability Zone <code>us-east-1a</code> for your Amazon Web Services account might not be the same location as <code>us-east-1a</code> for another Amazon Web Services account.</p>
    pub fn availability_zone_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Availability Zone in which the mount target is located. Availability Zones are independently mapped to names for each Amazon Web Services account. For example, the Availability Zone <code>us-east-1a</code> for your Amazon Web Services account might not be the same location as <code>us-east-1a</code> for another Amazon Web Services account.</p>
    pub fn set_availability_zone_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone_name = input;
        self
    }
    /// <p>The name of the Availability Zone in which the mount target is located. Availability Zones are independently mapped to names for each Amazon Web Services account. For example, the Availability Zone <code>us-east-1a</code> for your Amazon Web Services account might not be the same location as <code>us-east-1a</code> for another Amazon Web Services account.</p>
    pub fn get_availability_zone_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone_name
    }
    /// <p>The virtual private cloud (VPC) ID that the mount target is configured in.</p>
    pub fn vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The virtual private cloud (VPC) ID that the mount target is configured in.</p>
    pub fn set_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The virtual private cloud (VPC) ID that the mount target is configured in.</p>
    pub fn get_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_id
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateMountTargetOutput`](crate::operation::create_mount_target::CreateMountTargetOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`mount_target_id`](crate::operation::create_mount_target::builders::CreateMountTargetOutputBuilder::mount_target_id)
    /// - [`file_system_id`](crate::operation::create_mount_target::builders::CreateMountTargetOutputBuilder::file_system_id)
    /// - [`subnet_id`](crate::operation::create_mount_target::builders::CreateMountTargetOutputBuilder::subnet_id)
    /// - [`life_cycle_state`](crate::operation::create_mount_target::builders::CreateMountTargetOutputBuilder::life_cycle_state)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_mount_target::CreateMountTargetOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_mount_target::CreateMountTargetOutput {
            owner_id: self.owner_id,
            mount_target_id: self.mount_target_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "mount_target_id",
                    "mount_target_id was not specified but it is required when building CreateMountTargetOutput",
                )
            })?,
            file_system_id: self.file_system_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "file_system_id",
                    "file_system_id was not specified but it is required when building CreateMountTargetOutput",
                )
            })?,
            subnet_id: self.subnet_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "subnet_id",
                    "subnet_id was not specified but it is required when building CreateMountTargetOutput",
                )
            })?,
            life_cycle_state: self.life_cycle_state.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "life_cycle_state",
                    "life_cycle_state was not specified but it is required when building CreateMountTargetOutput",
                )
            })?,
            ip_address: self.ip_address,
            network_interface_id: self.network_interface_id,
            availability_zone_id: self.availability_zone_id,
            availability_zone_name: self.availability_zone_name,
            vpc_id: self.vpc_id,
            _request_id: self._request_id,
        })
    }
}
