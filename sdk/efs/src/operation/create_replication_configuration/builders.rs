// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_replication_configuration::_create_replication_configuration_output::CreateReplicationConfigurationOutputBuilder;

pub use crate::operation::create_replication_configuration::_create_replication_configuration_input::CreateReplicationConfigurationInputBuilder;

impl crate::operation::create_replication_configuration::builders::CreateReplicationConfigurationInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_replication_configuration::CreateReplicationConfigurationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_replication_configuration::CreateReplicationConfigurationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_replication_configuration();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateReplicationConfiguration`.
///
/// <p>Creates a replication configuration that replicates an existing EFS file system to a new, read-only file system. For more information, see <a href="https://docs.aws.amazon.com/efs/latest/ug/efs-replication.html">Amazon EFS replication</a> in the <i>Amazon EFS User Guide</i>. The replication configuration specifies the following:</p>
/// <ul>
/// <li>
/// <p><b>Source file system</b> – The EFS file system that you want replicated. The source file system cannot be a destination file system in an existing replication configuration.</p></li>
/// <li>
/// <p><b>Amazon Web Services Region</b> – The Amazon Web Services Region in which the destination file system is created. Amazon EFS replication is available in all Amazon Web Services Regions in which EFS is available. The Region must be enabled. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande-manage.html#rande-manage-enable">Managing Amazon Web Services Regions</a> in the <i>Amazon Web Services General Reference Reference Guide</i>.</p></li>
/// <li>
/// <p><b>Destination file system configuration</b> – The configuration of the destination file system to which the source file system will be replicated. There can only be one destination file system in a replication configuration.</p>
/// <p>Parameters for the replication configuration include:</p>
/// <ul>
/// <li>
/// <p><b>File system ID</b> – The ID of the destination file system for the replication. If no ID is provided, then EFS creates a new file system with the default settings. For existing file systems, the file system's replication overwrite protection must be disabled. For more information, see <a href="https://docs.aws.amazon.com/efs/latest/ug/efs-replication#replicate-existing-destination"> Replicating to an existing file system</a>.</p></li>
/// <li>
/// <p><b>Availability Zone</b> – If you want the destination file system to use One Zone storage, you must specify the Availability Zone to create the file system in. For more information, see <a href="https://docs.aws.amazon.com/efs/latest/ug/storage-classes.html"> EFS file system types</a> in the <i>Amazon EFS User Guide</i>.</p></li>
/// <li>
/// <p><b>Encryption</b> – All destination file systems are created with encryption at rest enabled. You can specify the Key Management Service (KMS) key that is used to encrypt the destination file system. If you don't specify a KMS key, your service-managed KMS key for Amazon EFS is used.</p><note>
/// <p>After the file system is created, you cannot change the KMS key.</p>
/// </note></li>
/// </ul></li>
/// </ul><note>
/// <p>After the file system is created, you cannot change the KMS key.</p>
/// </note>
/// <p>For new destination file systems, the following properties are set by default:</p>
/// <ul>
/// <li>
/// <p><b>Performance mode</b> - The destination file system's performance mode matches that of the source file system, unless the destination file system uses EFS One Zone storage. In that case, the General Purpose performance mode is used. The performance mode cannot be changed.</p></li>
/// <li>
/// <p><b>Throughput mode</b> - The destination file system's throughput mode matches that of the source file system. After the file system is created, you can modify the throughput mode.</p></li>
/// </ul>
/// <ul>
/// <li>
/// <p><b>Lifecycle management</b> – Lifecycle management is not enabled on the destination file system. After the destination file system is created, you can enable lifecycle management.</p></li>
/// <li>
/// <p><b>Automatic backups</b> – Automatic daily backups are enabled on the destination file system. After the file system is created, you can change this setting.</p></li>
/// </ul>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/efs/latest/ug/efs-replication.html">Amazon EFS replication</a> in the <i>Amazon EFS User Guide</i>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateReplicationConfigurationFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_replication_configuration::builders::CreateReplicationConfigurationInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_replication_configuration::CreateReplicationConfigurationOutput,
        crate::operation::create_replication_configuration::CreateReplicationConfigurationError,
    > for CreateReplicationConfigurationFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_replication_configuration::CreateReplicationConfigurationOutput,
            crate::operation::create_replication_configuration::CreateReplicationConfigurationError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateReplicationConfigurationFluentBuilder {
    /// Creates a new `CreateReplicationConfiguration`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateReplicationConfiguration as a reference.
    pub fn as_input(&self) -> &crate::operation::create_replication_configuration::builders::CreateReplicationConfigurationInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_replication_configuration::CreateReplicationConfigurationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_replication_configuration::CreateReplicationConfigurationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_replication_configuration::CreateReplicationConfiguration::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_replication_configuration::CreateReplicationConfiguration::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_replication_configuration::CreateReplicationConfigurationOutput,
        crate::operation::create_replication_configuration::CreateReplicationConfigurationError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Specifies the Amazon EFS file system that you want to replicate. This file system cannot already be a source or destination file system in another replication configuration.</p>
    pub fn source_file_system_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.source_file_system_id(input.into());
        self
    }
    /// <p>Specifies the Amazon EFS file system that you want to replicate. This file system cannot already be a source or destination file system in another replication configuration.</p>
    pub fn set_source_file_system_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_source_file_system_id(input);
        self
    }
    /// <p>Specifies the Amazon EFS file system that you want to replicate. This file system cannot already be a source or destination file system in another replication configuration.</p>
    pub fn get_source_file_system_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_source_file_system_id()
    }
    ///
    /// Appends an item to `Destinations`.
    ///
    /// To override the contents of this collection use [`set_destinations`](Self::set_destinations).
    ///
    /// <p>An array of destination configuration objects. Only one destination configuration object is supported.</p>
    pub fn destinations(mut self, input: crate::types::DestinationToCreate) -> Self {
        self.inner = self.inner.destinations(input);
        self
    }
    /// <p>An array of destination configuration objects. Only one destination configuration object is supported.</p>
    pub fn set_destinations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DestinationToCreate>>) -> Self {
        self.inner = self.inner.set_destinations(input);
        self
    }
    /// <p>An array of destination configuration objects. Only one destination configuration object is supported.</p>
    pub fn get_destinations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DestinationToCreate>> {
        self.inner.get_destinations()
    }
}
