// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_point_already_exists_correct_errors(
    mut builder: crate::types::error::builders::AccessPointAlreadyExistsBuilder,
) -> crate::types::error::builders::AccessPointAlreadyExistsBuilder {
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    if builder.access_point_id.is_none() {
        builder.access_point_id = Some(Default::default())
    }
    builder
}

pub(crate) fn access_point_limit_exceeded_correct_errors(
    mut builder: crate::types::error::builders::AccessPointLimitExceededBuilder,
) -> crate::types::error::builders::AccessPointLimitExceededBuilder {
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    builder
}

pub(crate) fn bad_request_correct_errors(
    mut builder: crate::types::error::builders::BadRequestBuilder,
) -> crate::types::error::builders::BadRequestBuilder {
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    builder
}

pub(crate) fn file_system_not_found_correct_errors(
    mut builder: crate::types::error::builders::FileSystemNotFoundBuilder,
) -> crate::types::error::builders::FileSystemNotFoundBuilder {
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    builder
}

pub(crate) fn incorrect_file_system_life_cycle_state_correct_errors(
    mut builder: crate::types::error::builders::IncorrectFileSystemLifeCycleStateBuilder,
) -> crate::types::error::builders::IncorrectFileSystemLifeCycleStateBuilder {
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_error_correct_errors(
    mut builder: crate::types::error::builders::InternalServerErrorBuilder,
) -> crate::types::error::builders::InternalServerErrorBuilder {
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    builder
}

pub(crate) fn file_system_already_exists_correct_errors(
    mut builder: crate::types::error::builders::FileSystemAlreadyExistsBuilder,
) -> crate::types::error::builders::FileSystemAlreadyExistsBuilder {
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    if builder.file_system_id.is_none() {
        builder.file_system_id = Some(Default::default())
    }
    builder
}

pub(crate) fn file_system_limit_exceeded_correct_errors(
    mut builder: crate::types::error::builders::FileSystemLimitExceededBuilder,
) -> crate::types::error::builders::FileSystemLimitExceededBuilder {
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    builder
}

pub(crate) fn insufficient_throughput_capacity_correct_errors(
    mut builder: crate::types::error::builders::InsufficientThroughputCapacityBuilder,
) -> crate::types::error::builders::InsufficientThroughputCapacityBuilder {
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    builder
}

pub(crate) fn throughput_limit_exceeded_correct_errors(
    mut builder: crate::types::error::builders::ThroughputLimitExceededBuilder,
) -> crate::types::error::builders::ThroughputLimitExceededBuilder {
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    builder
}

pub(crate) fn unsupported_availability_zone_correct_errors(
    mut builder: crate::types::error::builders::UnsupportedAvailabilityZoneBuilder,
) -> crate::types::error::builders::UnsupportedAvailabilityZoneBuilder {
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    builder
}

pub(crate) fn create_file_system_output_correct_errors(
    mut builder: crate::operation::create_file_system::builders::CreateFileSystemOutputBuilder,
) -> crate::operation::create_file_system::builders::CreateFileSystemOutputBuilder {
    if builder.owner_id.is_none() {
        builder.owner_id = Some(Default::default())
    }
    if builder.creation_token.is_none() {
        builder.creation_token = Some(Default::default())
    }
    if builder.file_system_id.is_none() {
        builder.file_system_id = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.life_cycle_state.is_none() {
        builder.life_cycle_state = "no value was set".parse::<crate::types::LifeCycleState>().ok()
    }
    if builder.number_of_mount_targets.is_none() {
        builder.number_of_mount_targets = Some(Default::default())
    }
    if builder.size_in_bytes.is_none() {
        builder.size_in_bytes = {
            let builder = crate::types::builders::FileSystemSizeBuilder::default();
            Some(crate::serde_util::file_system_size_correct_errors(builder).build())
        }
    }
    if builder.performance_mode.is_none() {
        builder.performance_mode = "no value was set".parse::<crate::types::PerformanceMode>().ok()
    }
    if builder.tags.is_none() {
        builder.tags = Some(Default::default())
    }
    builder
}

pub(crate) fn ip_address_in_use_correct_errors(
    mut builder: crate::types::error::builders::IpAddressInUseBuilder,
) -> crate::types::error::builders::IpAddressInUseBuilder {
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    builder
}

pub(crate) fn mount_target_conflict_correct_errors(
    mut builder: crate::types::error::builders::MountTargetConflictBuilder,
) -> crate::types::error::builders::MountTargetConflictBuilder {
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    builder
}

pub(crate) fn network_interface_limit_exceeded_correct_errors(
    mut builder: crate::types::error::builders::NetworkInterfaceLimitExceededBuilder,
) -> crate::types::error::builders::NetworkInterfaceLimitExceededBuilder {
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    builder
}

pub(crate) fn no_free_addresses_in_subnet_correct_errors(
    mut builder: crate::types::error::builders::NoFreeAddressesInSubnetBuilder,
) -> crate::types::error::builders::NoFreeAddressesInSubnetBuilder {
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    builder
}

pub(crate) fn security_group_limit_exceeded_correct_errors(
    mut builder: crate::types::error::builders::SecurityGroupLimitExceededBuilder,
) -> crate::types::error::builders::SecurityGroupLimitExceededBuilder {
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    builder
}

pub(crate) fn security_group_not_found_correct_errors(
    mut builder: crate::types::error::builders::SecurityGroupNotFoundBuilder,
) -> crate::types::error::builders::SecurityGroupNotFoundBuilder {
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    builder
}

pub(crate) fn subnet_not_found_correct_errors(
    mut builder: crate::types::error::builders::SubnetNotFoundBuilder,
) -> crate::types::error::builders::SubnetNotFoundBuilder {
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    builder
}

pub(crate) fn create_mount_target_output_correct_errors(
    mut builder: crate::operation::create_mount_target::builders::CreateMountTargetOutputBuilder,
) -> crate::operation::create_mount_target::builders::CreateMountTargetOutputBuilder {
    if builder.mount_target_id.is_none() {
        builder.mount_target_id = Some(Default::default())
    }
    if builder.file_system_id.is_none() {
        builder.file_system_id = Some(Default::default())
    }
    if builder.subnet_id.is_none() {
        builder.subnet_id = Some(Default::default())
    }
    if builder.life_cycle_state.is_none() {
        builder.life_cycle_state = "no value was set".parse::<crate::types::LifeCycleState>().ok()
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    builder
}

pub(crate) fn create_replication_configuration_output_correct_errors(
    mut builder: crate::operation::create_replication_configuration::builders::CreateReplicationConfigurationOutputBuilder,
) -> crate::operation::create_replication_configuration::builders::CreateReplicationConfigurationOutputBuilder {
    if builder.source_file_system_id.is_none() {
        builder.source_file_system_id = Some(Default::default())
    }
    if builder.source_file_system_region.is_none() {
        builder.source_file_system_region = Some(Default::default())
    }
    if builder.source_file_system_arn.is_none() {
        builder.source_file_system_arn = Some(Default::default())
    }
    if builder.original_source_file_system_arn.is_none() {
        builder.original_source_file_system_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.destinations.is_none() {
        builder.destinations = Some(Default::default())
    }
    builder
}

pub(crate) fn access_point_not_found_correct_errors(
    mut builder: crate::types::error::builders::AccessPointNotFoundBuilder,
) -> crate::types::error::builders::AccessPointNotFoundBuilder {
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    builder
}

pub(crate) fn file_system_in_use_correct_errors(
    mut builder: crate::types::error::builders::FileSystemInUseBuilder,
) -> crate::types::error::builders::FileSystemInUseBuilder {
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    builder
}

pub(crate) fn dependency_timeout_correct_errors(
    mut builder: crate::types::error::builders::DependencyTimeoutBuilder,
) -> crate::types::error::builders::DependencyTimeoutBuilder {
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    builder
}

pub(crate) fn mount_target_not_found_correct_errors(
    mut builder: crate::types::error::builders::MountTargetNotFoundBuilder,
) -> crate::types::error::builders::MountTargetNotFoundBuilder {
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    builder
}

pub(crate) fn incorrect_mount_target_state_correct_errors(
    mut builder: crate::types::error::builders::IncorrectMountTargetStateBuilder,
) -> crate::types::error::builders::IncorrectMountTargetStateBuilder {
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_mount_target_security_groups_output_correct_errors(
    mut builder: crate::operation::describe_mount_target_security_groups::builders::DescribeMountTargetSecurityGroupsOutputBuilder,
) -> crate::operation::describe_mount_target_security_groups::builders::DescribeMountTargetSecurityGroupsOutputBuilder {
    if builder.security_groups.is_none() {
        builder.security_groups = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_tags_output_correct_errors(
    mut builder: crate::operation::describe_tags::builders::DescribeTagsOutputBuilder,
) -> crate::operation::describe_tags::builders::DescribeTagsOutputBuilder {
    if builder.tags.is_none() {
        builder.tags = Some(Default::default())
    }
    builder
}

pub(crate) fn too_many_requests_correct_errors(
    mut builder: crate::types::error::builders::TooManyRequestsBuilder,
) -> crate::types::error::builders::TooManyRequestsBuilder {
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    builder
}

pub(crate) fn update_file_system_output_correct_errors(
    mut builder: crate::operation::update_file_system::builders::UpdateFileSystemOutputBuilder,
) -> crate::operation::update_file_system::builders::UpdateFileSystemOutputBuilder {
    if builder.owner_id.is_none() {
        builder.owner_id = Some(Default::default())
    }
    if builder.creation_token.is_none() {
        builder.creation_token = Some(Default::default())
    }
    if builder.file_system_id.is_none() {
        builder.file_system_id = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.life_cycle_state.is_none() {
        builder.life_cycle_state = "no value was set".parse::<crate::types::LifeCycleState>().ok()
    }
    if builder.number_of_mount_targets.is_none() {
        builder.number_of_mount_targets = Some(Default::default())
    }
    if builder.size_in_bytes.is_none() {
        builder.size_in_bytes = {
            let builder = crate::types::builders::FileSystemSizeBuilder::default();
            Some(crate::serde_util::file_system_size_correct_errors(builder).build())
        }
    }
    if builder.performance_mode.is_none() {
        builder.performance_mode = "no value was set".parse::<crate::types::PerformanceMode>().ok()
    }
    if builder.tags.is_none() {
        builder.tags = Some(Default::default())
    }
    builder
}

pub(crate) fn file_system_size_correct_errors(
    mut builder: crate::types::builders::FileSystemSizeBuilder,
) -> crate::types::builders::FileSystemSizeBuilder {
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn backup_policy_correct_errors(mut builder: crate::types::builders::BackupPolicyBuilder) -> crate::types::builders::BackupPolicyBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::Status>().ok()
    }
    builder
}

pub(crate) fn posix_user_correct_errors(mut builder: crate::types::builders::PosixUserBuilder) -> crate::types::builders::PosixUserBuilder {
    if builder.uid.is_none() {
        builder.uid = Some(Default::default())
    }
    if builder.gid.is_none() {
        builder.gid = Some(Default::default())
    }
    builder
}

pub(crate) fn creation_info_correct_errors(mut builder: crate::types::builders::CreationInfoBuilder) -> crate::types::builders::CreationInfoBuilder {
    if builder.owner_uid.is_none() {
        builder.owner_uid = Some(Default::default())
    }
    if builder.owner_gid.is_none() {
        builder.owner_gid = Some(Default::default())
    }
    if builder.permissions.is_none() {
        builder.permissions = Some(Default::default())
    }
    builder
}

pub(crate) fn destination_correct_errors(mut builder: crate::types::builders::DestinationBuilder) -> crate::types::builders::DestinationBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ReplicationStatus>().ok()
    }
    if builder.file_system_id.is_none() {
        builder.file_system_id = Some(Default::default())
    }
    if builder.region.is_none() {
        builder.region = Some(Default::default())
    }
    builder
}

pub(crate) fn file_system_description_correct_errors(
    mut builder: crate::types::builders::FileSystemDescriptionBuilder,
) -> crate::types::builders::FileSystemDescriptionBuilder {
    if builder.owner_id.is_none() {
        builder.owner_id = Some(Default::default())
    }
    if builder.creation_token.is_none() {
        builder.creation_token = Some(Default::default())
    }
    if builder.file_system_id.is_none() {
        builder.file_system_id = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.life_cycle_state.is_none() {
        builder.life_cycle_state = "no value was set".parse::<crate::types::LifeCycleState>().ok()
    }
    if builder.number_of_mount_targets.is_none() {
        builder.number_of_mount_targets = Some(Default::default())
    }
    if builder.size_in_bytes.is_none() {
        builder.size_in_bytes = {
            let builder = crate::types::builders::FileSystemSizeBuilder::default();
            Some(crate::serde_util::file_system_size_correct_errors(builder).build())
        }
    }
    if builder.performance_mode.is_none() {
        builder.performance_mode = "no value was set".parse::<crate::types::PerformanceMode>().ok()
    }
    if builder.tags.is_none() {
        builder.tags = Some(Default::default())
    }
    builder
}

pub(crate) fn mount_target_description_correct_errors(
    mut builder: crate::types::builders::MountTargetDescriptionBuilder,
) -> crate::types::builders::MountTargetDescriptionBuilder {
    if builder.mount_target_id.is_none() {
        builder.mount_target_id = Some(Default::default())
    }
    if builder.file_system_id.is_none() {
        builder.file_system_id = Some(Default::default())
    }
    if builder.subnet_id.is_none() {
        builder.subnet_id = Some(Default::default())
    }
    if builder.life_cycle_state.is_none() {
        builder.life_cycle_state = "no value was set".parse::<crate::types::LifeCycleState>().ok()
    }
    builder
}

pub(crate) fn replication_configuration_description_correct_errors(
    mut builder: crate::types::builders::ReplicationConfigurationDescriptionBuilder,
) -> crate::types::builders::ReplicationConfigurationDescriptionBuilder {
    if builder.source_file_system_id.is_none() {
        builder.source_file_system_id = Some(Default::default())
    }
    if builder.source_file_system_region.is_none() {
        builder.source_file_system_region = Some(Default::default())
    }
    if builder.source_file_system_arn.is_none() {
        builder.source_file_system_arn = Some(Default::default())
    }
    if builder.original_source_file_system_arn.is_none() {
        builder.original_source_file_system_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.destinations.is_none() {
        builder.destinations = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}
