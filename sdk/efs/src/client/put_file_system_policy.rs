// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`PutFileSystemPolicy`](crate::client::fluent_builders::PutFileSystemPolicy) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`file_system_id(impl Into<String>)`](crate::client::fluent_builders::PutFileSystemPolicy::file_system_id) / [`set_file_system_id(Option<String>)`](crate::client::fluent_builders::PutFileSystemPolicy::set_file_system_id): <p>The ID of the EFS file system that you want to create or update the <code>FileSystemPolicy</code> for.</p>
    ///   - [`policy(impl Into<String>)`](crate::client::fluent_builders::PutFileSystemPolicy::policy) / [`set_policy(Option<String>)`](crate::client::fluent_builders::PutFileSystemPolicy::set_policy): <p>The <code>FileSystemPolicy</code> that you're creating. Accepts a JSON formatted policy definition. EFS file system policies have a 20,000 character limit. To find out more about the elements that make up a file system policy, see <a href="https://docs.aws.amazon.com/efs/latest/ug/access-control-overview.html#access-control-manage-access-intro-resource-policies">EFS Resource-based Policies</a>. </p>
    ///   - [`bypass_policy_lockout_safety_check(bool)`](crate::client::fluent_builders::PutFileSystemPolicy::bypass_policy_lockout_safety_check) / [`set_bypass_policy_lockout_safety_check(bool)`](crate::client::fluent_builders::PutFileSystemPolicy::set_bypass_policy_lockout_safety_check): <p>(Optional) A boolean that specifies whether or not to bypass the <code>FileSystemPolicy</code> lockout safety check. The lockout safety check determines whether the policy in the request will lock out, or prevent, the IAM principal that is making the request from making future <code>PutFileSystemPolicy</code> requests on this file system. Set <code>BypassPolicyLockoutSafetyCheck</code> to <code>True</code> only when you intend to prevent the IAM principal that is making the request from making subsequent <code>PutFileSystemPolicy</code> requests on this file system. The default value is <code>False</code>. </p>
    /// - On success, responds with [`PutFileSystemPolicyOutput`](crate::output::PutFileSystemPolicyOutput) with field(s):
    ///   - [`file_system_id(Option<String>)`](crate::output::PutFileSystemPolicyOutput::file_system_id): <p>Specifies the EFS file system to which the <code>FileSystemPolicy</code> applies.</p>
    ///   - [`policy(Option<String>)`](crate::output::PutFileSystemPolicyOutput::policy): <p>The JSON formatted <code>FileSystemPolicy</code> for the EFS file system.</p>
    /// - On failure, responds with [`SdkError<PutFileSystemPolicyError>`](crate::error::PutFileSystemPolicyError)
    pub fn put_file_system_policy(&self) -> crate::client::fluent_builders::PutFileSystemPolicy {
        crate::client::fluent_builders::PutFileSystemPolicy::new(self.handle.clone())
    }
}
