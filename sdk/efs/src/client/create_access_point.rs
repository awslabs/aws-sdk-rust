// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateAccessPoint`](crate::operation::create_access_point::builders::CreateAccessPointFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`client_token(impl Into<String>)`](crate::operation::create_access_point::builders::CreateAccessPointFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::create_access_point::builders::CreateAccessPointFluentBuilder::set_client_token): <p>A string of up to 64 ASCII characters that Amazon EFS uses to ensure idempotent creation.</p>
    ///   - [`tags(Vec<Tag>)`](crate::operation::create_access_point::builders::CreateAccessPointFluentBuilder::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::operation::create_access_point::builders::CreateAccessPointFluentBuilder::set_tags): <p>Creates tags associated with the access point. Each tag is a key-value pair, each key must be unique. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a> in the <i>Amazon Web Services General Reference Guide</i>.</p>
    ///   - [`file_system_id(impl Into<String>)`](crate::operation::create_access_point::builders::CreateAccessPointFluentBuilder::file_system_id) / [`set_file_system_id(Option<String>)`](crate::operation::create_access_point::builders::CreateAccessPointFluentBuilder::set_file_system_id): <p>The ID of the EFS file system that the access point provides access to.</p>
    ///   - [`posix_user(PosixUser)`](crate::operation::create_access_point::builders::CreateAccessPointFluentBuilder::posix_user) / [`set_posix_user(Option<PosixUser>)`](crate::operation::create_access_point::builders::CreateAccessPointFluentBuilder::set_posix_user): <p>The operating system user and group applied to all file system requests made using the access point.</p>
    ///   - [`root_directory(RootDirectory)`](crate::operation::create_access_point::builders::CreateAccessPointFluentBuilder::root_directory) / [`set_root_directory(Option<RootDirectory>)`](crate::operation::create_access_point::builders::CreateAccessPointFluentBuilder::set_root_directory): <p>Specifies the directory on the Amazon EFS file system that the access point exposes as the root directory of your file system to NFS clients using the access point. The clients using the access point can only access the root directory and below. If the <code>RootDirectory</code> &gt; <code>Path</code> specified does not exist, EFS creates it and applies the <code>CreationInfo</code> settings when a client connects to an access point. When specifying a <code>RootDirectory</code>, you must provide the <code>Path</code>, and the <code>CreationInfo</code>.</p>  <p>Amazon EFS creates a root directory only if you have provided the CreationInfo: OwnUid, OwnGID, and permissions for the directory. If you do not provide this information, Amazon EFS does not create the root directory. If the root directory does not exist, attempts to mount using the access point will fail.</p>
    /// - On success, responds with [`CreateAccessPointOutput`](crate::operation::create_access_point::CreateAccessPointOutput) with field(s):
    ///   - [`client_token(Option<String>)`](crate::operation::create_access_point::CreateAccessPointOutput::client_token): <p>The opaque string specified in the request to ensure idempotent creation.</p>
    ///   - [`name(Option<String>)`](crate::operation::create_access_point::CreateAccessPointOutput::name): <p>The name of the access point. This is the value of the <code>Name</code> tag.</p>
    ///   - [`tags(Option<Vec<Tag>>)`](crate::operation::create_access_point::CreateAccessPointOutput::tags): <p>The tags associated with the access point, presented as an array of Tag objects.</p>
    ///   - [`access_point_id(Option<String>)`](crate::operation::create_access_point::CreateAccessPointOutput::access_point_id): <p>The ID of the access point, assigned by Amazon EFS.</p>
    ///   - [`access_point_arn(Option<String>)`](crate::operation::create_access_point::CreateAccessPointOutput::access_point_arn): <p>The unique Amazon Resource Name (ARN) associated with the access point.</p>
    ///   - [`file_system_id(Option<String>)`](crate::operation::create_access_point::CreateAccessPointOutput::file_system_id): <p>The ID of the EFS file system that the access point applies to.</p>
    ///   - [`posix_user(Option<PosixUser>)`](crate::operation::create_access_point::CreateAccessPointOutput::posix_user): <p>The full POSIX identity, including the user ID, group ID, and secondary group IDs on the access point that is used for all file operations by NFS clients using the access point.</p>
    ///   - [`root_directory(Option<RootDirectory>)`](crate::operation::create_access_point::CreateAccessPointOutput::root_directory): <p>The directory on the Amazon EFS file system that the access point exposes as the root directory to NFS clients using the access point.</p>
    ///   - [`owner_id(Option<String>)`](crate::operation::create_access_point::CreateAccessPointOutput::owner_id): <p>Identified the Amazon Web Services account that owns the access point resource.</p>
    ///   - [`life_cycle_state(Option<LifeCycleState>)`](crate::operation::create_access_point::CreateAccessPointOutput::life_cycle_state): <p>Identifies the lifecycle phase of the access point.</p>
    /// - On failure, responds with [`SdkError<CreateAccessPointError>`](crate::operation::create_access_point::CreateAccessPointError)
    pub fn create_access_point(
        &self,
    ) -> crate::operation::create_access_point::builders::CreateAccessPointFluentBuilder {
        crate::operation::create_access_point::builders::CreateAccessPointFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
