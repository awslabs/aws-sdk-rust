// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DescribeAccessPoints`](crate::operation::describe_access_points::builders::DescribeAccessPointsFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::describe_access_points::builders::DescribeAccessPointsFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::operation::describe_access_points::builders::DescribeAccessPointsFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::describe_access_points::builders::DescribeAccessPointsFluentBuilder::set_max_results):<br>required: **false**<br><p>(Optional) When retrieving all access points for a file system, you can optionally specify the <code>MaxItems</code> parameter to limit the number of objects returned in a response. The default value is 100. </p><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::describe_access_points::builders::DescribeAccessPointsFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::describe_access_points::builders::DescribeAccessPointsFluentBuilder::set_next_token):<br>required: **false**<br><p> <code>NextToken</code> is present if the response is paginated. You can use <code>NextMarker</code> in the subsequent request to fetch the next page of access point descriptions.</p><br>
    ///   - [`access_point_id(impl Into<String>)`](crate::operation::describe_access_points::builders::DescribeAccessPointsFluentBuilder::access_point_id) / [`set_access_point_id(Option<String>)`](crate::operation::describe_access_points::builders::DescribeAccessPointsFluentBuilder::set_access_point_id):<br>required: **false**<br><p>(Optional) Specifies an EFS access point to describe in the response; mutually exclusive with <code>FileSystemId</code>.</p><br>
    ///   - [`file_system_id(impl Into<String>)`](crate::operation::describe_access_points::builders::DescribeAccessPointsFluentBuilder::file_system_id) / [`set_file_system_id(Option<String>)`](crate::operation::describe_access_points::builders::DescribeAccessPointsFluentBuilder::set_file_system_id):<br>required: **false**<br><p>(Optional) If you provide a <code>FileSystemId</code>, EFS returns all access points for that file system; mutually exclusive with <code>AccessPointId</code>.</p><br>
    /// - On success, responds with [`DescribeAccessPointsOutput`](crate::operation::describe_access_points::DescribeAccessPointsOutput) with field(s):
    ///   - [`access_points(Option<Vec::<AccessPointDescription>>)`](crate::operation::describe_access_points::DescribeAccessPointsOutput::access_points): <p>An array of access point descriptions.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::describe_access_points::DescribeAccessPointsOutput::next_token): <p>Present if there are more access points than returned in the response. You can use the NextMarker in the subsequent request to fetch the additional descriptions.</p>
    /// - On failure, responds with [`SdkError<DescribeAccessPointsError>`](crate::operation::describe_access_points::DescribeAccessPointsError)
    pub fn describe_access_points(&self) -> crate::operation::describe_access_points::builders::DescribeAccessPointsFluentBuilder {
        crate::operation::describe_access_points::builders::DescribeAccessPointsFluentBuilder::new(self.handle.clone())
    }
}
