// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides a description of a mount target.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MountTargetDescription {
    /// <p>Amazon Web Services account ID that owns the resource.</p>
    #[doc(hidden)]
    pub owner_id: std::option::Option<std::string::String>,
    /// <p>System-assigned mount target ID.</p>
    #[doc(hidden)]
    pub mount_target_id: std::option::Option<std::string::String>,
    /// <p>The ID of the file system for which the mount target is intended.</p>
    #[doc(hidden)]
    pub file_system_id: std::option::Option<std::string::String>,
    /// <p>The ID of the mount target's subnet.</p>
    #[doc(hidden)]
    pub subnet_id: std::option::Option<std::string::String>,
    /// <p>Lifecycle state of the mount target.</p>
    #[doc(hidden)]
    pub life_cycle_state: std::option::Option<crate::types::LifeCycleState>,
    /// <p>Address at which the file system can be mounted by using the mount target.</p>
    #[doc(hidden)]
    pub ip_address: std::option::Option<std::string::String>,
    /// <p>The ID of the network interface that Amazon EFS created when it created the mount target.</p>
    #[doc(hidden)]
    pub network_interface_id: std::option::Option<std::string::String>,
    /// <p>The unique and consistent identifier of the Availability Zone that the mount target resides in. For example, <code>use1-az1</code> is an AZ ID for the us-east-1 Region and it has the same location in every Amazon Web Services account.</p>
    #[doc(hidden)]
    pub availability_zone_id: std::option::Option<std::string::String>,
    /// <p>The name of the Availability Zone in which the mount target is located. Availability Zones are independently mapped to names for each Amazon Web Services account. For example, the Availability Zone <code>us-east-1a</code> for your Amazon Web Services account might not be the same location as <code>us-east-1a</code> for another Amazon Web Services account.</p>
    #[doc(hidden)]
    pub availability_zone_name: std::option::Option<std::string::String>,
    /// <p>The virtual private cloud (VPC) ID that the mount target is configured in.</p>
    #[doc(hidden)]
    pub vpc_id: std::option::Option<std::string::String>,
}
impl MountTargetDescription {
    /// <p>Amazon Web Services account ID that owns the resource.</p>
    pub fn owner_id(&self) -> std::option::Option<&str> {
        self.owner_id.as_deref()
    }
    /// <p>System-assigned mount target ID.</p>
    pub fn mount_target_id(&self) -> std::option::Option<&str> {
        self.mount_target_id.as_deref()
    }
    /// <p>The ID of the file system for which the mount target is intended.</p>
    pub fn file_system_id(&self) -> std::option::Option<&str> {
        self.file_system_id.as_deref()
    }
    /// <p>The ID of the mount target's subnet.</p>
    pub fn subnet_id(&self) -> std::option::Option<&str> {
        self.subnet_id.as_deref()
    }
    /// <p>Lifecycle state of the mount target.</p>
    pub fn life_cycle_state(&self) -> std::option::Option<&crate::types::LifeCycleState> {
        self.life_cycle_state.as_ref()
    }
    /// <p>Address at which the file system can be mounted by using the mount target.</p>
    pub fn ip_address(&self) -> std::option::Option<&str> {
        self.ip_address.as_deref()
    }
    /// <p>The ID of the network interface that Amazon EFS created when it created the mount target.</p>
    pub fn network_interface_id(&self) -> std::option::Option<&str> {
        self.network_interface_id.as_deref()
    }
    /// <p>The unique and consistent identifier of the Availability Zone that the mount target resides in. For example, <code>use1-az1</code> is an AZ ID for the us-east-1 Region and it has the same location in every Amazon Web Services account.</p>
    pub fn availability_zone_id(&self) -> std::option::Option<&str> {
        self.availability_zone_id.as_deref()
    }
    /// <p>The name of the Availability Zone in which the mount target is located. Availability Zones are independently mapped to names for each Amazon Web Services account. For example, the Availability Zone <code>us-east-1a</code> for your Amazon Web Services account might not be the same location as <code>us-east-1a</code> for another Amazon Web Services account.</p>
    pub fn availability_zone_name(&self) -> std::option::Option<&str> {
        self.availability_zone_name.as_deref()
    }
    /// <p>The virtual private cloud (VPC) ID that the mount target is configured in.</p>
    pub fn vpc_id(&self) -> std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
}
impl MountTargetDescription {
    /// Creates a new builder-style object to manufacture [`MountTargetDescription`](crate::types::MountTargetDescription).
    pub fn builder() -> crate::types::builders::MountTargetDescriptionBuilder {
        crate::types::builders::MountTargetDescriptionBuilder::default()
    }
}

/// A builder for [`MountTargetDescription`](crate::types::MountTargetDescription).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MountTargetDescriptionBuilder {
    pub(crate) owner_id: std::option::Option<std::string::String>,
    pub(crate) mount_target_id: std::option::Option<std::string::String>,
    pub(crate) file_system_id: std::option::Option<std::string::String>,
    pub(crate) subnet_id: std::option::Option<std::string::String>,
    pub(crate) life_cycle_state: std::option::Option<crate::types::LifeCycleState>,
    pub(crate) ip_address: std::option::Option<std::string::String>,
    pub(crate) network_interface_id: std::option::Option<std::string::String>,
    pub(crate) availability_zone_id: std::option::Option<std::string::String>,
    pub(crate) availability_zone_name: std::option::Option<std::string::String>,
    pub(crate) vpc_id: std::option::Option<std::string::String>,
}
impl MountTargetDescriptionBuilder {
    /// <p>Amazon Web Services account ID that owns the resource.</p>
    pub fn owner_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.owner_id = Some(input.into());
        self
    }
    /// <p>Amazon Web Services account ID that owns the resource.</p>
    pub fn set_owner_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.owner_id = input;
        self
    }
    /// <p>System-assigned mount target ID.</p>
    pub fn mount_target_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.mount_target_id = Some(input.into());
        self
    }
    /// <p>System-assigned mount target ID.</p>
    pub fn set_mount_target_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.mount_target_id = input;
        self
    }
    /// <p>The ID of the file system for which the mount target is intended.</p>
    pub fn file_system_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.file_system_id = Some(input.into());
        self
    }
    /// <p>The ID of the file system for which the mount target is intended.</p>
    pub fn set_file_system_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.file_system_id = input;
        self
    }
    /// <p>The ID of the mount target's subnet.</p>
    pub fn subnet_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.subnet_id = Some(input.into());
        self
    }
    /// <p>The ID of the mount target's subnet.</p>
    pub fn set_subnet_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.subnet_id = input;
        self
    }
    /// <p>Lifecycle state of the mount target.</p>
    pub fn life_cycle_state(mut self, input: crate::types::LifeCycleState) -> Self {
        self.life_cycle_state = Some(input);
        self
    }
    /// <p>Lifecycle state of the mount target.</p>
    pub fn set_life_cycle_state(
        mut self,
        input: std::option::Option<crate::types::LifeCycleState>,
    ) -> Self {
        self.life_cycle_state = input;
        self
    }
    /// <p>Address at which the file system can be mounted by using the mount target.</p>
    pub fn ip_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.ip_address = Some(input.into());
        self
    }
    /// <p>Address at which the file system can be mounted by using the mount target.</p>
    pub fn set_ip_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ip_address = input;
        self
    }
    /// <p>The ID of the network interface that Amazon EFS created when it created the mount target.</p>
    pub fn network_interface_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.network_interface_id = Some(input.into());
        self
    }
    /// <p>The ID of the network interface that Amazon EFS created when it created the mount target.</p>
    pub fn set_network_interface_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.network_interface_id = input;
        self
    }
    /// <p>The unique and consistent identifier of the Availability Zone that the mount target resides in. For example, <code>use1-az1</code> is an AZ ID for the us-east-1 Region and it has the same location in every Amazon Web Services account.</p>
    pub fn availability_zone_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.availability_zone_id = Some(input.into());
        self
    }
    /// <p>The unique and consistent identifier of the Availability Zone that the mount target resides in. For example, <code>use1-az1</code> is an AZ ID for the us-east-1 Region and it has the same location in every Amazon Web Services account.</p>
    pub fn set_availability_zone_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.availability_zone_id = input;
        self
    }
    /// <p>The name of the Availability Zone in which the mount target is located. Availability Zones are independently mapped to names for each Amazon Web Services account. For example, the Availability Zone <code>us-east-1a</code> for your Amazon Web Services account might not be the same location as <code>us-east-1a</code> for another Amazon Web Services account.</p>
    pub fn availability_zone_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.availability_zone_name = Some(input.into());
        self
    }
    /// <p>The name of the Availability Zone in which the mount target is located. Availability Zones are independently mapped to names for each Amazon Web Services account. For example, the Availability Zone <code>us-east-1a</code> for your Amazon Web Services account might not be the same location as <code>us-east-1a</code> for another Amazon Web Services account.</p>
    pub fn set_availability_zone_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.availability_zone_name = input;
        self
    }
    /// <p>The virtual private cloud (VPC) ID that the mount target is configured in.</p>
    pub fn vpc_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.vpc_id = Some(input.into());
        self
    }
    /// <p>The virtual private cloud (VPC) ID that the mount target is configured in.</p>
    pub fn set_vpc_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// Consumes the builder and constructs a [`MountTargetDescription`](crate::types::MountTargetDescription).
    pub fn build(self) -> crate::types::MountTargetDescription {
        crate::types::MountTargetDescription {
            owner_id: self.owner_id,
            mount_target_id: self.mount_target_id,
            file_system_id: self.file_system_id,
            subnet_id: self.subnet_id,
            life_cycle_state: self.life_cycle_state,
            ip_address: self.ip_address,
            network_interface_id: self.network_interface_id,
            availability_zone_id: self.availability_zone_id,
            availability_zone_name: self.availability_zone_name,
            vpc_id: self.vpc_id,
        }
    }
}
