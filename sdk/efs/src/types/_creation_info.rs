// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Required if the <code>RootDirectory</code> &gt; <code>Path</code> specified does not exist. Specifies the POSIX IDs and permissions to apply to the access point's <code>RootDirectory</code> &gt; <code>Path</code>. If the access point root directory does not exist, EFS creates it with these settings when a client connects to the access point. When specifying <code>CreationInfo</code>, you must include values for all properties. </p>
/// <p>Amazon EFS creates a root directory only if you have provided the CreationInfo: OwnUid, OwnGID, and permissions for the directory. If you do not provide this information, Amazon EFS does not create the root directory. If the root directory does not exist, attempts to mount using the access point will fail.</p> <important>
/// <p>If you do not provide <code>CreationInfo</code> and the specified <code>RootDirectory</code> does not exist, attempts to mount the file system using the access point will fail.</p>
/// </important>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreationInfo {
    /// <p>Specifies the POSIX user ID to apply to the <code>RootDirectory</code>. Accepts values from 0 to 2^32 (4294967295).</p>
    pub owner_uid: i64,
    /// <p>Specifies the POSIX group ID to apply to the <code>RootDirectory</code>. Accepts values from 0 to 2^32 (4294967295).</p>
    pub owner_gid: i64,
    /// <p>Specifies the POSIX permissions to apply to the <code>RootDirectory</code>, in the format of an octal number representing the file's mode bits.</p>
    pub permissions: ::std::string::String,
}
impl CreationInfo {
    /// <p>Specifies the POSIX user ID to apply to the <code>RootDirectory</code>. Accepts values from 0 to 2^32 (4294967295).</p>
    pub fn owner_uid(&self) -> i64 {
        self.owner_uid
    }
    /// <p>Specifies the POSIX group ID to apply to the <code>RootDirectory</code>. Accepts values from 0 to 2^32 (4294967295).</p>
    pub fn owner_gid(&self) -> i64 {
        self.owner_gid
    }
    /// <p>Specifies the POSIX permissions to apply to the <code>RootDirectory</code>, in the format of an octal number representing the file's mode bits.</p>
    pub fn permissions(&self) -> &str {
        use std::ops::Deref;
        self.permissions.deref()
    }
}
impl CreationInfo {
    /// Creates a new builder-style object to manufacture [`CreationInfo`](crate::types::CreationInfo).
    pub fn builder() -> crate::types::builders::CreationInfoBuilder {
        crate::types::builders::CreationInfoBuilder::default()
    }
}

/// A builder for [`CreationInfo`](crate::types::CreationInfo).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreationInfoBuilder {
    pub(crate) owner_uid: ::std::option::Option<i64>,
    pub(crate) owner_gid: ::std::option::Option<i64>,
    pub(crate) permissions: ::std::option::Option<::std::string::String>,
}
impl CreationInfoBuilder {
    /// <p>Specifies the POSIX user ID to apply to the <code>RootDirectory</code>. Accepts values from 0 to 2^32 (4294967295).</p>
    /// This field is required.
    pub fn owner_uid(mut self, input: i64) -> Self {
        self.owner_uid = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the POSIX user ID to apply to the <code>RootDirectory</code>. Accepts values from 0 to 2^32 (4294967295).</p>
    pub fn set_owner_uid(mut self, input: ::std::option::Option<i64>) -> Self {
        self.owner_uid = input;
        self
    }
    /// <p>Specifies the POSIX user ID to apply to the <code>RootDirectory</code>. Accepts values from 0 to 2^32 (4294967295).</p>
    pub fn get_owner_uid(&self) -> &::std::option::Option<i64> {
        &self.owner_uid
    }
    /// <p>Specifies the POSIX group ID to apply to the <code>RootDirectory</code>. Accepts values from 0 to 2^32 (4294967295).</p>
    /// This field is required.
    pub fn owner_gid(mut self, input: i64) -> Self {
        self.owner_gid = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the POSIX group ID to apply to the <code>RootDirectory</code>. Accepts values from 0 to 2^32 (4294967295).</p>
    pub fn set_owner_gid(mut self, input: ::std::option::Option<i64>) -> Self {
        self.owner_gid = input;
        self
    }
    /// <p>Specifies the POSIX group ID to apply to the <code>RootDirectory</code>. Accepts values from 0 to 2^32 (4294967295).</p>
    pub fn get_owner_gid(&self) -> &::std::option::Option<i64> {
        &self.owner_gid
    }
    /// <p>Specifies the POSIX permissions to apply to the <code>RootDirectory</code>, in the format of an octal number representing the file's mode bits.</p>
    /// This field is required.
    pub fn permissions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.permissions = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the POSIX permissions to apply to the <code>RootDirectory</code>, in the format of an octal number representing the file's mode bits.</p>
    pub fn set_permissions(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.permissions = input;
        self
    }
    /// <p>Specifies the POSIX permissions to apply to the <code>RootDirectory</code>, in the format of an octal number representing the file's mode bits.</p>
    pub fn get_permissions(&self) -> &::std::option::Option<::std::string::String> {
        &self.permissions
    }
    /// Consumes the builder and constructs a [`CreationInfo`](crate::types::CreationInfo).
    /// This method will fail if any of the following fields are not set:
    /// - [`owner_uid`](crate::types::builders::CreationInfoBuilder::owner_uid)
    /// - [`owner_gid`](crate::types::builders::CreationInfoBuilder::owner_gid)
    /// - [`permissions`](crate::types::builders::CreationInfoBuilder::permissions)
    pub fn build(self) -> ::std::result::Result<crate::types::CreationInfo, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CreationInfo {
            owner_uid: self.owner_uid.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "owner_uid",
                    "owner_uid was not specified but it is required when building CreationInfo",
                )
            })?,
            owner_gid: self.owner_gid.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "owner_gid",
                    "owner_gid was not specified but it is required when building CreationInfo",
                )
            })?,
            permissions: self.permissions.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "permissions",
                    "permissions was not specified but it is required when building CreationInfo",
                )
            })?,
        })
    }
}
