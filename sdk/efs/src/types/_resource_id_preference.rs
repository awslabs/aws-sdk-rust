// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the resource type and its ID preference for the user's Amazon Web Services account, in the current Amazon Web Services Region.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResourceIdPreference {
    /// <p>Identifies the EFS resource ID preference, either <code>LONG_ID</code> (17 characters) or <code>SHORT_ID</code> (8 characters).</p>
    pub resource_id_type: ::std::option::Option<crate::types::ResourceIdType>,
    /// <p>Identifies the Amazon EFS resources to which the ID preference setting applies, <code>FILE_SYSTEM</code> and <code>MOUNT_TARGET</code>.</p>
    pub resources: ::std::option::Option<::std::vec::Vec<crate::types::Resource>>,
}
impl ResourceIdPreference {
    /// <p>Identifies the EFS resource ID preference, either <code>LONG_ID</code> (17 characters) or <code>SHORT_ID</code> (8 characters).</p>
    pub fn resource_id_type(&self) -> ::std::option::Option<&crate::types::ResourceIdType> {
        self.resource_id_type.as_ref()
    }
    /// <p>Identifies the Amazon EFS resources to which the ID preference setting applies, <code>FILE_SYSTEM</code> and <code>MOUNT_TARGET</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resources.is_none()`.
    pub fn resources(&self) -> &[crate::types::Resource] {
        self.resources.as_deref().unwrap_or_default()
    }
}
impl ResourceIdPreference {
    /// Creates a new builder-style object to manufacture [`ResourceIdPreference`](crate::types::ResourceIdPreference).
    pub fn builder() -> crate::types::builders::ResourceIdPreferenceBuilder {
        crate::types::builders::ResourceIdPreferenceBuilder::default()
    }
}

/// A builder for [`ResourceIdPreference`](crate::types::ResourceIdPreference).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ResourceIdPreferenceBuilder {
    pub(crate) resource_id_type: ::std::option::Option<crate::types::ResourceIdType>,
    pub(crate) resources: ::std::option::Option<::std::vec::Vec<crate::types::Resource>>,
}
impl ResourceIdPreferenceBuilder {
    /// <p>Identifies the EFS resource ID preference, either <code>LONG_ID</code> (17 characters) or <code>SHORT_ID</code> (8 characters).</p>
    pub fn resource_id_type(mut self, input: crate::types::ResourceIdType) -> Self {
        self.resource_id_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Identifies the EFS resource ID preference, either <code>LONG_ID</code> (17 characters) or <code>SHORT_ID</code> (8 characters).</p>
    pub fn set_resource_id_type(mut self, input: ::std::option::Option<crate::types::ResourceIdType>) -> Self {
        self.resource_id_type = input;
        self
    }
    /// <p>Identifies the EFS resource ID preference, either <code>LONG_ID</code> (17 characters) or <code>SHORT_ID</code> (8 characters).</p>
    pub fn get_resource_id_type(&self) -> &::std::option::Option<crate::types::ResourceIdType> {
        &self.resource_id_type
    }
    /// Appends an item to `resources`.
    ///
    /// To override the contents of this collection use [`set_resources`](Self::set_resources).
    ///
    /// <p>Identifies the Amazon EFS resources to which the ID preference setting applies, <code>FILE_SYSTEM</code> and <code>MOUNT_TARGET</code>.</p>
    pub fn resources(mut self, input: crate::types::Resource) -> Self {
        let mut v = self.resources.unwrap_or_default();
        v.push(input);
        self.resources = ::std::option::Option::Some(v);
        self
    }
    /// <p>Identifies the Amazon EFS resources to which the ID preference setting applies, <code>FILE_SYSTEM</code> and <code>MOUNT_TARGET</code>.</p>
    pub fn set_resources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Resource>>) -> Self {
        self.resources = input;
        self
    }
    /// <p>Identifies the Amazon EFS resources to which the ID preference setting applies, <code>FILE_SYSTEM</code> and <code>MOUNT_TARGET</code>.</p>
    pub fn get_resources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Resource>> {
        &self.resources
    }
    /// Consumes the builder and constructs a [`ResourceIdPreference`](crate::types::ResourceIdPreference).
    pub fn build(self) -> crate::types::ResourceIdPreference {
        crate::types::ResourceIdPreference {
            resource_id_type: self.resource_id_type,
            resources: self.resources,
        }
    }
}
