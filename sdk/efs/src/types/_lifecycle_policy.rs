// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a policy used by EFS lifecycle management and EFS Intelligent-Tiering that specifies when to transition files into and out of the file system's Infrequent Access (IA) storage class. For more information, see <a href="https://docs.aws.amazon.com/efs/latest/ug/lifecycle-management-efs.html">EFS Intelligent‚ÄêTiering and EFS Lifecycle Management</a>.</p> <note>
/// <p>When using the <code>put-lifecycle-configuration</code> CLI command or the <code>PutLifecycleConfiguration</code> API action, Amazon EFS requires that each <code>LifecyclePolicy</code> object have only a single transition. This means that in a request body, <code>LifecyclePolicies</code> must be structured as an array of <code>LifecyclePolicy</code> objects, one object for each transition, <code>TransitionToIA</code>, <code>TransitionToPrimaryStorageClass</code>. For more information, see the request examples in <code>PutLifecycleConfiguration</code>.</p>
/// </note>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LifecyclePolicy {
    /// <p> Describes the period of time that a file is not accessed, after which it transitions to IA storage. Metadata operations such as listing the contents of a directory don't count as file access events.</p>
    #[doc(hidden)]
    pub transition_to_ia: std::option::Option<crate::types::TransitionToIaRules>,
    /// <p>Describes when to transition a file from IA storage to primary storage. Metadata operations such as listing the contents of a directory don't count as file access events.</p>
    #[doc(hidden)]
    pub transition_to_primary_storage_class:
        std::option::Option<crate::types::TransitionToPrimaryStorageClassRules>,
}
impl LifecyclePolicy {
    /// <p> Describes the period of time that a file is not accessed, after which it transitions to IA storage. Metadata operations such as listing the contents of a directory don't count as file access events.</p>
    pub fn transition_to_ia(&self) -> std::option::Option<&crate::types::TransitionToIaRules> {
        self.transition_to_ia.as_ref()
    }
    /// <p>Describes when to transition a file from IA storage to primary storage. Metadata operations such as listing the contents of a directory don't count as file access events.</p>
    pub fn transition_to_primary_storage_class(
        &self,
    ) -> std::option::Option<&crate::types::TransitionToPrimaryStorageClassRules> {
        self.transition_to_primary_storage_class.as_ref()
    }
}
impl LifecyclePolicy {
    /// Creates a new builder-style object to manufacture [`LifecyclePolicy`](crate::types::LifecyclePolicy).
    pub fn builder() -> crate::types::builders::LifecyclePolicyBuilder {
        crate::types::builders::LifecyclePolicyBuilder::default()
    }
}

/// A builder for [`LifecyclePolicy`](crate::types::LifecyclePolicy).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LifecyclePolicyBuilder {
    pub(crate) transition_to_ia: std::option::Option<crate::types::TransitionToIaRules>,
    pub(crate) transition_to_primary_storage_class:
        std::option::Option<crate::types::TransitionToPrimaryStorageClassRules>,
}
impl LifecyclePolicyBuilder {
    /// <p> Describes the period of time that a file is not accessed, after which it transitions to IA storage. Metadata operations such as listing the contents of a directory don't count as file access events.</p>
    pub fn transition_to_ia(mut self, input: crate::types::TransitionToIaRules) -> Self {
        self.transition_to_ia = Some(input);
        self
    }
    /// <p> Describes the period of time that a file is not accessed, after which it transitions to IA storage. Metadata operations such as listing the contents of a directory don't count as file access events.</p>
    pub fn set_transition_to_ia(
        mut self,
        input: std::option::Option<crate::types::TransitionToIaRules>,
    ) -> Self {
        self.transition_to_ia = input;
        self
    }
    /// <p>Describes when to transition a file from IA storage to primary storage. Metadata operations such as listing the contents of a directory don't count as file access events.</p>
    pub fn transition_to_primary_storage_class(
        mut self,
        input: crate::types::TransitionToPrimaryStorageClassRules,
    ) -> Self {
        self.transition_to_primary_storage_class = Some(input);
        self
    }
    /// <p>Describes when to transition a file from IA storage to primary storage. Metadata operations such as listing the contents of a directory don't count as file access events.</p>
    pub fn set_transition_to_primary_storage_class(
        mut self,
        input: std::option::Option<crate::types::TransitionToPrimaryStorageClassRules>,
    ) -> Self {
        self.transition_to_primary_storage_class = input;
        self
    }
    /// Consumes the builder and constructs a [`LifecyclePolicy`](crate::types::LifecyclePolicy).
    pub fn build(self) -> crate::types::LifecyclePolicy {
        crate::types::LifecyclePolicy {
            transition_to_ia: self.transition_to_ia,
            transition_to_primary_storage_class: self.transition_to_primary_storage_class,
        }
    }
}
