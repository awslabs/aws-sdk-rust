// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    AccessPointAlreadyExists(crate::error::AccessPointAlreadyExists),
    AccessPointLimitExceeded(crate::error::AccessPointLimitExceeded),
    AccessPointNotFound(crate::error::AccessPointNotFound),
    AvailabilityZonesMismatch(crate::error::AvailabilityZonesMismatch),
    BadRequest(crate::error::BadRequest),
    DependencyTimeout(crate::error::DependencyTimeout),
    FileSystemAlreadyExists(crate::error::FileSystemAlreadyExists),
    FileSystemInUse(crate::error::FileSystemInUse),
    FileSystemLimitExceeded(crate::error::FileSystemLimitExceeded),
    FileSystemNotFound(crate::error::FileSystemNotFound),
    IncorrectFileSystemLifeCycleState(crate::error::IncorrectFileSystemLifeCycleState),
    IncorrectMountTargetState(crate::error::IncorrectMountTargetState),
    InsufficientThroughputCapacity(crate::error::InsufficientThroughputCapacity),
    InternalServerError(crate::error::InternalServerError),
    InvalidPolicyException(crate::error::InvalidPolicyException),
    IpAddressInUse(crate::error::IpAddressInUse),
    MountTargetConflict(crate::error::MountTargetConflict),
    MountTargetNotFound(crate::error::MountTargetNotFound),
    NetworkInterfaceLimitExceeded(crate::error::NetworkInterfaceLimitExceeded),
    NoFreeAddressesInSubnet(crate::error::NoFreeAddressesInSubnet),
    PolicyNotFound(crate::error::PolicyNotFound),
    SecurityGroupLimitExceeded(crate::error::SecurityGroupLimitExceeded),
    SecurityGroupNotFound(crate::error::SecurityGroupNotFound),
    SubnetNotFound(crate::error::SubnetNotFound),
    ThroughputLimitExceeded(crate::error::ThroughputLimitExceeded),
    TooManyRequests(crate::error::TooManyRequests),
    UnsupportedAvailabilityZone(crate::error::UnsupportedAvailabilityZone),
    ValidationException(crate::error::ValidationException),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessPointAlreadyExists(inner) => inner.fmt(f),
            Error::AccessPointLimitExceeded(inner) => inner.fmt(f),
            Error::AccessPointNotFound(inner) => inner.fmt(f),
            Error::AvailabilityZonesMismatch(inner) => inner.fmt(f),
            Error::BadRequest(inner) => inner.fmt(f),
            Error::DependencyTimeout(inner) => inner.fmt(f),
            Error::FileSystemAlreadyExists(inner) => inner.fmt(f),
            Error::FileSystemInUse(inner) => inner.fmt(f),
            Error::FileSystemLimitExceeded(inner) => inner.fmt(f),
            Error::FileSystemNotFound(inner) => inner.fmt(f),
            Error::IncorrectFileSystemLifeCycleState(inner) => inner.fmt(f),
            Error::IncorrectMountTargetState(inner) => inner.fmt(f),
            Error::InsufficientThroughputCapacity(inner) => inner.fmt(f),
            Error::InternalServerError(inner) => inner.fmt(f),
            Error::InvalidPolicyException(inner) => inner.fmt(f),
            Error::IpAddressInUse(inner) => inner.fmt(f),
            Error::MountTargetConflict(inner) => inner.fmt(f),
            Error::MountTargetNotFound(inner) => inner.fmt(f),
            Error::NetworkInterfaceLimitExceeded(inner) => inner.fmt(f),
            Error::NoFreeAddressesInSubnet(inner) => inner.fmt(f),
            Error::PolicyNotFound(inner) => inner.fmt(f),
            Error::SecurityGroupLimitExceeded(inner) => inner.fmt(f),
            Error::SecurityGroupNotFound(inner) => inner.fmt(f),
            Error::SubnetNotFound(inner) => inner.fmt(f),
            Error::ThroughputLimitExceeded(inner) => inner.fmt(f),
            Error::TooManyRequests(inner) => inner.fmt(f),
            Error::UnsupportedAvailabilityZone(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateAccessPointError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateAccessPointError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateAccessPointErrorKind::AccessPointAlreadyExists(inner) => {
                    Error::AccessPointAlreadyExists(inner)
                }
                crate::error::CreateAccessPointErrorKind::AccessPointLimitExceeded(inner) => {
                    Error::AccessPointLimitExceeded(inner)
                }
                crate::error::CreateAccessPointErrorKind::BadRequest(inner) => {
                    Error::BadRequest(inner)
                }
                crate::error::CreateAccessPointErrorKind::FileSystemNotFound(inner) => {
                    Error::FileSystemNotFound(inner)
                }
                crate::error::CreateAccessPointErrorKind::IncorrectFileSystemLifeCycleState(
                    inner,
                ) => Error::IncorrectFileSystemLifeCycleState(inner),
                crate::error::CreateAccessPointErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::CreateAccessPointErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateFileSystemError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateFileSystemError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateFileSystemErrorKind::BadRequest(inner) => {
                    Error::BadRequest(inner)
                }
                crate::error::CreateFileSystemErrorKind::FileSystemAlreadyExists(inner) => {
                    Error::FileSystemAlreadyExists(inner)
                }
                crate::error::CreateFileSystemErrorKind::FileSystemLimitExceeded(inner) => {
                    Error::FileSystemLimitExceeded(inner)
                }
                crate::error::CreateFileSystemErrorKind::InsufficientThroughputCapacity(inner) => {
                    Error::InsufficientThroughputCapacity(inner)
                }
                crate::error::CreateFileSystemErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::CreateFileSystemErrorKind::ThroughputLimitExceeded(inner) => {
                    Error::ThroughputLimitExceeded(inner)
                }
                crate::error::CreateFileSystemErrorKind::UnsupportedAvailabilityZone(inner) => {
                    Error::UnsupportedAvailabilityZone(inner)
                }
                crate::error::CreateFileSystemErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateMountTargetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateMountTargetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateMountTargetErrorKind::AvailabilityZonesMismatch(inner) => {
                    Error::AvailabilityZonesMismatch(inner)
                }
                crate::error::CreateMountTargetErrorKind::BadRequest(inner) => {
                    Error::BadRequest(inner)
                }
                crate::error::CreateMountTargetErrorKind::FileSystemNotFound(inner) => {
                    Error::FileSystemNotFound(inner)
                }
                crate::error::CreateMountTargetErrorKind::IncorrectFileSystemLifeCycleState(
                    inner,
                ) => Error::IncorrectFileSystemLifeCycleState(inner),
                crate::error::CreateMountTargetErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::CreateMountTargetErrorKind::IpAddressInUse(inner) => {
                    Error::IpAddressInUse(inner)
                }
                crate::error::CreateMountTargetErrorKind::MountTargetConflict(inner) => {
                    Error::MountTargetConflict(inner)
                }
                crate::error::CreateMountTargetErrorKind::NetworkInterfaceLimitExceeded(inner) => {
                    Error::NetworkInterfaceLimitExceeded(inner)
                }
                crate::error::CreateMountTargetErrorKind::NoFreeAddressesInSubnet(inner) => {
                    Error::NoFreeAddressesInSubnet(inner)
                }
                crate::error::CreateMountTargetErrorKind::SecurityGroupLimitExceeded(inner) => {
                    Error::SecurityGroupLimitExceeded(inner)
                }
                crate::error::CreateMountTargetErrorKind::SecurityGroupNotFound(inner) => {
                    Error::SecurityGroupNotFound(inner)
                }
                crate::error::CreateMountTargetErrorKind::SubnetNotFound(inner) => {
                    Error::SubnetNotFound(inner)
                }
                crate::error::CreateMountTargetErrorKind::UnsupportedAvailabilityZone(inner) => {
                    Error::UnsupportedAvailabilityZone(inner)
                }
                crate::error::CreateMountTargetErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateTagsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateTagsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateTagsErrorKind::BadRequest(inner) => Error::BadRequest(inner),
                crate::error::CreateTagsErrorKind::FileSystemNotFound(inner) => {
                    Error::FileSystemNotFound(inner)
                }
                crate::error::CreateTagsErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::CreateTagsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteAccessPointError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteAccessPointError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteAccessPointErrorKind::AccessPointNotFound(inner) => {
                    Error::AccessPointNotFound(inner)
                }
                crate::error::DeleteAccessPointErrorKind::BadRequest(inner) => {
                    Error::BadRequest(inner)
                }
                crate::error::DeleteAccessPointErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DeleteAccessPointErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteFileSystemError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteFileSystemError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteFileSystemErrorKind::BadRequest(inner) => {
                    Error::BadRequest(inner)
                }
                crate::error::DeleteFileSystemErrorKind::FileSystemInUse(inner) => {
                    Error::FileSystemInUse(inner)
                }
                crate::error::DeleteFileSystemErrorKind::FileSystemNotFound(inner) => {
                    Error::FileSystemNotFound(inner)
                }
                crate::error::DeleteFileSystemErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DeleteFileSystemErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteFileSystemPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteFileSystemPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DeleteFileSystemPolicyErrorKind::FileSystemNotFound(inner) => Error::FileSystemNotFound(inner),
                crate::error::DeleteFileSystemPolicyErrorKind::IncorrectFileSystemLifeCycleState(inner) => Error::IncorrectFileSystemLifeCycleState(inner),
                crate::error::DeleteFileSystemPolicyErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
                crate::error::DeleteFileSystemPolicyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteMountTargetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteMountTargetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteMountTargetErrorKind::BadRequest(inner) => {
                    Error::BadRequest(inner)
                }
                crate::error::DeleteMountTargetErrorKind::DependencyTimeout(inner) => {
                    Error::DependencyTimeout(inner)
                }
                crate::error::DeleteMountTargetErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DeleteMountTargetErrorKind::MountTargetNotFound(inner) => {
                    Error::MountTargetNotFound(inner)
                }
                crate::error::DeleteMountTargetErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteTagsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteTagsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteTagsErrorKind::BadRequest(inner) => Error::BadRequest(inner),
                crate::error::DeleteTagsErrorKind::FileSystemNotFound(inner) => {
                    Error::FileSystemNotFound(inner)
                }
                crate::error::DeleteTagsErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DeleteTagsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeAccessPointsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeAccessPointsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeAccessPointsErrorKind::AccessPointNotFound(inner) => {
                    Error::AccessPointNotFound(inner)
                }
                crate::error::DescribeAccessPointsErrorKind::BadRequest(inner) => {
                    Error::BadRequest(inner)
                }
                crate::error::DescribeAccessPointsErrorKind::FileSystemNotFound(inner) => {
                    Error::FileSystemNotFound(inner)
                }
                crate::error::DescribeAccessPointsErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DescribeAccessPointsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeAccountPreferencesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeAccountPreferencesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeAccountPreferencesErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DescribeAccountPreferencesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeBackupPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeBackupPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeBackupPolicyErrorKind::BadRequest(inner) => {
                    Error::BadRequest(inner)
                }
                crate::error::DescribeBackupPolicyErrorKind::FileSystemNotFound(inner) => {
                    Error::FileSystemNotFound(inner)
                }
                crate::error::DescribeBackupPolicyErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DescribeBackupPolicyErrorKind::PolicyNotFound(inner) => {
                    Error::PolicyNotFound(inner)
                }
                crate::error::DescribeBackupPolicyErrorKind::ValidationException(inner) => {
                    Error::ValidationException(inner)
                }
                crate::error::DescribeBackupPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeFileSystemPolicyError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeFileSystemPolicyError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeFileSystemPolicyErrorKind::FileSystemNotFound(inner) => {
                    Error::FileSystemNotFound(inner)
                }
                crate::error::DescribeFileSystemPolicyErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DescribeFileSystemPolicyErrorKind::PolicyNotFound(inner) => {
                    Error::PolicyNotFound(inner)
                }
                crate::error::DescribeFileSystemPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeFileSystemsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeFileSystemsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeFileSystemsErrorKind::BadRequest(inner) => {
                    Error::BadRequest(inner)
                }
                crate::error::DescribeFileSystemsErrorKind::FileSystemNotFound(inner) => {
                    Error::FileSystemNotFound(inner)
                }
                crate::error::DescribeFileSystemsErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DescribeFileSystemsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeLifecycleConfigurationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeLifecycleConfigurationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeLifecycleConfigurationErrorKind::BadRequest(inner) => {
                    Error::BadRequest(inner)
                }
                crate::error::DescribeLifecycleConfigurationErrorKind::FileSystemNotFound(
                    inner,
                ) => Error::FileSystemNotFound(inner),
                crate::error::DescribeLifecycleConfigurationErrorKind::InternalServerError(
                    inner,
                ) => Error::InternalServerError(inner),
                crate::error::DescribeLifecycleConfigurationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeMountTargetsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeMountTargetsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeMountTargetsErrorKind::AccessPointNotFound(inner) => {
                    Error::AccessPointNotFound(inner)
                }
                crate::error::DescribeMountTargetsErrorKind::BadRequest(inner) => {
                    Error::BadRequest(inner)
                }
                crate::error::DescribeMountTargetsErrorKind::FileSystemNotFound(inner) => {
                    Error::FileSystemNotFound(inner)
                }
                crate::error::DescribeMountTargetsErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DescribeMountTargetsErrorKind::MountTargetNotFound(inner) => {
                    Error::MountTargetNotFound(inner)
                }
                crate::error::DescribeMountTargetsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeMountTargetSecurityGroupsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeMountTargetSecurityGroupsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeMountTargetSecurityGroupsErrorKind::BadRequest(inner) => Error::BadRequest(inner),
                crate::error::DescribeMountTargetSecurityGroupsErrorKind::IncorrectMountTargetState(inner) => Error::IncorrectMountTargetState(inner),
                crate::error::DescribeMountTargetSecurityGroupsErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
                crate::error::DescribeMountTargetSecurityGroupsErrorKind::MountTargetNotFound(inner) => Error::MountTargetNotFound(inner),
                crate::error::DescribeMountTargetSecurityGroupsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeTagsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeTagsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeTagsErrorKind::BadRequest(inner) => Error::BadRequest(inner),
                crate::error::DescribeTagsErrorKind::FileSystemNotFound(inner) => {
                    Error::FileSystemNotFound(inner)
                }
                crate::error::DescribeTagsErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DescribeTagsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTagsForResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTagsForResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTagsForResourceErrorKind::AccessPointNotFound(inner) => {
                    Error::AccessPointNotFound(inner)
                }
                crate::error::ListTagsForResourceErrorKind::BadRequest(inner) => {
                    Error::BadRequest(inner)
                }
                crate::error::ListTagsForResourceErrorKind::FileSystemNotFound(inner) => {
                    Error::FileSystemNotFound(inner)
                }
                crate::error::ListTagsForResourceErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::ListTagsForResourceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyMountTargetSecurityGroupsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ModifyMountTargetSecurityGroupsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ModifyMountTargetSecurityGroupsErrorKind::BadRequest(inner) => Error::BadRequest(inner),
                crate::error::ModifyMountTargetSecurityGroupsErrorKind::IncorrectMountTargetState(inner) => Error::IncorrectMountTargetState(inner),
                crate::error::ModifyMountTargetSecurityGroupsErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
                crate::error::ModifyMountTargetSecurityGroupsErrorKind::MountTargetNotFound(inner) => Error::MountTargetNotFound(inner),
                crate::error::ModifyMountTargetSecurityGroupsErrorKind::SecurityGroupLimitExceeded(inner) => Error::SecurityGroupLimitExceeded(inner),
                crate::error::ModifyMountTargetSecurityGroupsErrorKind::SecurityGroupNotFound(inner) => Error::SecurityGroupNotFound(inner),
                crate::error::ModifyMountTargetSecurityGroupsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutAccountPreferencesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutAccountPreferencesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutAccountPreferencesErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::PutAccountPreferencesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutBackupPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutBackupPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutBackupPolicyErrorKind::BadRequest(inner) => {
                    Error::BadRequest(inner)
                }
                crate::error::PutBackupPolicyErrorKind::FileSystemNotFound(inner) => {
                    Error::FileSystemNotFound(inner)
                }
                crate::error::PutBackupPolicyErrorKind::IncorrectFileSystemLifeCycleState(
                    inner,
                ) => Error::IncorrectFileSystemLifeCycleState(inner),
                crate::error::PutBackupPolicyErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::PutBackupPolicyErrorKind::ValidationException(inner) => {
                    Error::ValidationException(inner)
                }
                crate::error::PutBackupPolicyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutFileSystemPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutFileSystemPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutFileSystemPolicyErrorKind::FileSystemNotFound(inner) => {
                    Error::FileSystemNotFound(inner)
                }
                crate::error::PutFileSystemPolicyErrorKind::IncorrectFileSystemLifeCycleState(
                    inner,
                ) => Error::IncorrectFileSystemLifeCycleState(inner),
                crate::error::PutFileSystemPolicyErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::PutFileSystemPolicyErrorKind::InvalidPolicyException(inner) => {
                    Error::InvalidPolicyException(inner)
                }
                crate::error::PutFileSystemPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutLifecycleConfigurationError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::PutLifecycleConfigurationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::PutLifecycleConfigurationErrorKind::BadRequest(inner) => Error::BadRequest(inner),
                crate::error::PutLifecycleConfigurationErrorKind::FileSystemNotFound(inner) => Error::FileSystemNotFound(inner),
                crate::error::PutLifecycleConfigurationErrorKind::IncorrectFileSystemLifeCycleState(inner) => Error::IncorrectFileSystemLifeCycleState(inner),
                crate::error::PutLifecycleConfigurationErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
                crate::error::PutLifecycleConfigurationErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TagResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::TagResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TagResourceErrorKind::AccessPointNotFound(inner) => {
                    Error::AccessPointNotFound(inner)
                }
                crate::error::TagResourceErrorKind::BadRequest(inner) => Error::BadRequest(inner),
                crate::error::TagResourceErrorKind::FileSystemNotFound(inner) => {
                    Error::FileSystemNotFound(inner)
                }
                crate::error::TagResourceErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::TagResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UntagResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UntagResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UntagResourceErrorKind::AccessPointNotFound(inner) => {
                    Error::AccessPointNotFound(inner)
                }
                crate::error::UntagResourceErrorKind::BadRequest(inner) => Error::BadRequest(inner),
                crate::error::UntagResourceErrorKind::FileSystemNotFound(inner) => {
                    Error::FileSystemNotFound(inner)
                }
                crate::error::UntagResourceErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::UntagResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateFileSystemError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateFileSystemError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateFileSystemErrorKind::BadRequest(inner) => {
                    Error::BadRequest(inner)
                }
                crate::error::UpdateFileSystemErrorKind::FileSystemNotFound(inner) => {
                    Error::FileSystemNotFound(inner)
                }
                crate::error::UpdateFileSystemErrorKind::IncorrectFileSystemLifeCycleState(
                    inner,
                ) => Error::IncorrectFileSystemLifeCycleState(inner),
                crate::error::UpdateFileSystemErrorKind::InsufficientThroughputCapacity(inner) => {
                    Error::InsufficientThroughputCapacity(inner)
                }
                crate::error::UpdateFileSystemErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::UpdateFileSystemErrorKind::ThroughputLimitExceeded(inner) => {
                    Error::ThroughputLimitExceeded(inner)
                }
                crate::error::UpdateFileSystemErrorKind::TooManyRequests(inner) => {
                    Error::TooManyRequests(inner)
                }
                crate::error::UpdateFileSystemErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
