// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_send_command_input(
    input: &crate::operation::send_command::SendCommandInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    let mut object = aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_send_command_input::ser_send_command_input(&mut object, input)?;
    object.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_send_command_http_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::send_command::SendCommandOutput,
    crate::operation::send_command::SendCommandError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response)
        .map_err(crate::operation::send_command::SendCommandError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::operation::send_command::SendCommandError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "BadRequestException" => {
            crate::operation::send_command::SendCommandError::BadRequestException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::types::error::builders::BadRequestExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_bad_request_exception::de_bad_request_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::send_command::SendCommandError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "CapacityExceededException" => {
            crate::operation::send_command::SendCommandError::CapacityExceededException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::types::error::builders::CapacityExceededExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_capacity_exceeded_exception::de_capacity_exceeded_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::send_command::SendCommandError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidSessionException" => {
            crate::operation::send_command::SendCommandError::InvalidSessionException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::types::error::builders::InvalidSessionExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_invalid_session_exception::de_invalid_session_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::send_command::SendCommandError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "LimitExceededException" => {
            crate::operation::send_command::SendCommandError::LimitExceededException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::types::error::builders::LimitExceededExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_limit_exceeded_exception::de_limit_exceeded_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::send_command::SendCommandError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "OccConflictException" => {
            crate::operation::send_command::SendCommandError::OccConflictException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::types::error::builders::OccConflictExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_occ_conflict_exception::de_occ_conflict_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::send_command::SendCommandError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "RateExceededException" => {
            crate::operation::send_command::SendCommandError::RateExceededException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::types::error::builders::RateExceededExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_rate_exceeded_exception::de_rate_exceeded_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::send_command::SendCommandError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::operation::send_command::SendCommandError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_send_command_http_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::send_command::SendCommandOutput,
    crate::operation::send_command::SendCommandError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::operation::send_command::builders::SendCommandOutputBuilder::default();
        let _ = response;
        output = crate::protocol_serde::shape_send_command::de_send_command(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::operation::send_command::SendCommandError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

pub(crate) fn de_send_command(
    value: &[u8],
    mut builder: crate::operation::send_command::builders::SendCommandOutputBuilder,
) -> Result<
    crate::operation::send_command::builders::SendCommandOutputBuilder,
    aws_smithy_json::deserialize::error::DeserializeError,
> {
    let mut tokens_owned =
        aws_smithy_json::deserialize::json_token_iter(crate::protocol_serde::or_empty_doc(value))
            .peekable();
    let tokens = &mut tokens_owned;
    aws_smithy_json::deserialize::token::expect_start_object(tokens.next())?;
    loop {
        match tokens.next().transpose()? {
            Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
            Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                match key.to_unescaped()?.as_ref() {
                    "StartSession" => {
                        builder = builder.set_start_session(
                            crate::protocol_serde::shape_start_session_result::de_start_session_result(tokens)?
                        );
                    }
                    "StartTransaction" => {
                        builder = builder.set_start_transaction(
                            crate::protocol_serde::shape_start_transaction_result::de_start_transaction_result(tokens)?
                        );
                    }
                    "EndSession" => {
                        builder = builder.set_end_session(
                            crate::protocol_serde::shape_end_session_result::de_end_session_result(
                                tokens,
                            )?,
                        );
                    }
                    "CommitTransaction" => {
                        builder = builder.set_commit_transaction(
                            crate::protocol_serde::shape_commit_transaction_result::de_commit_transaction_result(tokens)?
                        );
                    }
                    "AbortTransaction" => {
                        builder = builder.set_abort_transaction(
                            crate::protocol_serde::shape_abort_transaction_result::de_abort_transaction_result(tokens)?
                        );
                    }
                    "ExecuteStatement" => {
                        builder = builder.set_execute_statement(
                            crate::protocol_serde::shape_execute_statement_result::de_execute_statement_result(tokens)?
                        );
                    }
                    "FetchPage" => {
                        builder = builder.set_fetch_page(
                            crate::protocol_serde::shape_fetch_page_result::de_fetch_page_result(
                                tokens,
                            )?,
                        );
                    }
                    _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                }
            }
            other => {
                return Err(
                    aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                        "expected object key or end object, found: {:?}",
                        other
                    )),
                )
            }
        }
    }
    if tokens.next().is_some() {
        return Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "found more JSON tokens after completing parsing",
            ),
        );
    }
    Ok(builder)
}
