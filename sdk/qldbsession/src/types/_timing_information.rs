// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains server-side performance information for a command. Amazon QLDB captures timing information between the times when it receives the request and when it sends the corresponding response.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TimingInformation {
    /// <p>The amount of time that QLDB spent on processing the command, measured in milliseconds.</p>
    #[doc(hidden)]
    pub processing_time_milliseconds: i64,
}
impl TimingInformation {
    /// <p>The amount of time that QLDB spent on processing the command, measured in milliseconds.</p>
    pub fn processing_time_milliseconds(&self) -> i64 {
        self.processing_time_milliseconds
    }
}
impl TimingInformation {
    /// Creates a new builder-style object to manufacture [`TimingInformation`](crate::types::TimingInformation).
    pub fn builder() -> crate::types::builders::TimingInformationBuilder {
        crate::types::builders::TimingInformationBuilder::default()
    }
}

/// A builder for [`TimingInformation`](crate::types::TimingInformation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TimingInformationBuilder {
    pub(crate) processing_time_milliseconds: std::option::Option<i64>,
}
impl TimingInformationBuilder {
    /// <p>The amount of time that QLDB spent on processing the command, measured in milliseconds.</p>
    pub fn processing_time_milliseconds(mut self, input: i64) -> Self {
        self.processing_time_milliseconds = Some(input);
        self
    }
    /// <p>The amount of time that QLDB spent on processing the command, measured in milliseconds.</p>
    pub fn set_processing_time_milliseconds(mut self, input: std::option::Option<i64>) -> Self {
        self.processing_time_milliseconds = input;
        self
    }
    /// Consumes the builder and constructs a [`TimingInformation`](crate::types::TimingInformation).
    pub fn build(self) -> crate::types::TimingInformation {
        crate::types::TimingInformation {
            processing_time_milliseconds: self.processing_time_milliseconds.unwrap_or_default(),
        }
    }
}
