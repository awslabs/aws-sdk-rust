// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the details of the executed statement.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExecuteStatementResult {
    /// <p>Contains the details of the first fetched page.</p>
    #[doc(hidden)]
    pub first_page: std::option::Option<crate::types::Page>,
    /// <p>Contains server-side performance information for the command.</p>
    #[doc(hidden)]
    pub timing_information: std::option::Option<crate::types::TimingInformation>,
    /// <p>Contains metrics about the number of I/O requests that were consumed.</p>
    #[doc(hidden)]
    pub consumed_i_os: std::option::Option<crate::types::IoUsage>,
}
impl ExecuteStatementResult {
    /// <p>Contains the details of the first fetched page.</p>
    pub fn first_page(&self) -> std::option::Option<&crate::types::Page> {
        self.first_page.as_ref()
    }
    /// <p>Contains server-side performance information for the command.</p>
    pub fn timing_information(&self) -> std::option::Option<&crate::types::TimingInformation> {
        self.timing_information.as_ref()
    }
    /// <p>Contains metrics about the number of I/O requests that were consumed.</p>
    pub fn consumed_i_os(&self) -> std::option::Option<&crate::types::IoUsage> {
        self.consumed_i_os.as_ref()
    }
}
impl ExecuteStatementResult {
    /// Creates a new builder-style object to manufacture [`ExecuteStatementResult`](crate::types::ExecuteStatementResult).
    pub fn builder() -> crate::types::builders::ExecuteStatementResultBuilder {
        crate::types::builders::ExecuteStatementResultBuilder::default()
    }
}

/// A builder for [`ExecuteStatementResult`](crate::types::ExecuteStatementResult).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ExecuteStatementResultBuilder {
    pub(crate) first_page: std::option::Option<crate::types::Page>,
    pub(crate) timing_information: std::option::Option<crate::types::TimingInformation>,
    pub(crate) consumed_i_os: std::option::Option<crate::types::IoUsage>,
}
impl ExecuteStatementResultBuilder {
    /// <p>Contains the details of the first fetched page.</p>
    pub fn first_page(mut self, input: crate::types::Page) -> Self {
        self.first_page = Some(input);
        self
    }
    /// <p>Contains the details of the first fetched page.</p>
    pub fn set_first_page(mut self, input: std::option::Option<crate::types::Page>) -> Self {
        self.first_page = input;
        self
    }
    /// <p>Contains server-side performance information for the command.</p>
    pub fn timing_information(mut self, input: crate::types::TimingInformation) -> Self {
        self.timing_information = Some(input);
        self
    }
    /// <p>Contains server-side performance information for the command.</p>
    pub fn set_timing_information(
        mut self,
        input: std::option::Option<crate::types::TimingInformation>,
    ) -> Self {
        self.timing_information = input;
        self
    }
    /// <p>Contains metrics about the number of I/O requests that were consumed.</p>
    pub fn consumed_i_os(mut self, input: crate::types::IoUsage) -> Self {
        self.consumed_i_os = Some(input);
        self
    }
    /// <p>Contains metrics about the number of I/O requests that were consumed.</p>
    pub fn set_consumed_i_os(mut self, input: std::option::Option<crate::types::IoUsage>) -> Self {
        self.consumed_i_os = input;
        self
    }
    /// Consumes the builder and constructs a [`ExecuteStatementResult`](crate::types::ExecuteStatementResult).
    pub fn build(self) -> crate::types::ExecuteStatementResult {
        crate::types::ExecuteStatementResult {
            first_page: self.first_page,
            timing_information: self.timing_information,
            consumed_i_os: self.consumed_i_os,
        }
    }
}
