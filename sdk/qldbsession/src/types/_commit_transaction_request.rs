// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the details of the transaction to commit.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CommitTransactionRequest {
    /// <p>Specifies the transaction ID of the transaction to commit.</p>
    #[doc(hidden)]
    pub transaction_id: std::option::Option<std::string::String>,
    /// <p>Specifies the commit digest for the transaction to commit. For every active transaction, the commit digest must be passed. QLDB validates <code>CommitDigest</code> and rejects the commit with an error if the digest computed on the client does not match the digest computed by QLDB.</p>
    /// <p>The purpose of the <code>CommitDigest</code> parameter is to ensure that QLDB commits a transaction if and only if the server has processed the exact set of statements sent by the client, in the same order that client sent them, and with no duplicates.</p>
    #[doc(hidden)]
    pub commit_digest: std::option::Option<aws_smithy_types::Blob>,
}
impl CommitTransactionRequest {
    /// <p>Specifies the transaction ID of the transaction to commit.</p>
    pub fn transaction_id(&self) -> std::option::Option<&str> {
        self.transaction_id.as_deref()
    }
    /// <p>Specifies the commit digest for the transaction to commit. For every active transaction, the commit digest must be passed. QLDB validates <code>CommitDigest</code> and rejects the commit with an error if the digest computed on the client does not match the digest computed by QLDB.</p>
    /// <p>The purpose of the <code>CommitDigest</code> parameter is to ensure that QLDB commits a transaction if and only if the server has processed the exact set of statements sent by the client, in the same order that client sent them, and with no duplicates.</p>
    pub fn commit_digest(&self) -> std::option::Option<&aws_smithy_types::Blob> {
        self.commit_digest.as_ref()
    }
}
impl CommitTransactionRequest {
    /// Creates a new builder-style object to manufacture [`CommitTransactionRequest`](crate::types::CommitTransactionRequest).
    pub fn builder() -> crate::types::builders::CommitTransactionRequestBuilder {
        crate::types::builders::CommitTransactionRequestBuilder::default()
    }
}

/// A builder for [`CommitTransactionRequest`](crate::types::CommitTransactionRequest).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CommitTransactionRequestBuilder {
    pub(crate) transaction_id: std::option::Option<std::string::String>,
    pub(crate) commit_digest: std::option::Option<aws_smithy_types::Blob>,
}
impl CommitTransactionRequestBuilder {
    /// <p>Specifies the transaction ID of the transaction to commit.</p>
    pub fn transaction_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.transaction_id = Some(input.into());
        self
    }
    /// <p>Specifies the transaction ID of the transaction to commit.</p>
    pub fn set_transaction_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.transaction_id = input;
        self
    }
    /// <p>Specifies the commit digest for the transaction to commit. For every active transaction, the commit digest must be passed. QLDB validates <code>CommitDigest</code> and rejects the commit with an error if the digest computed on the client does not match the digest computed by QLDB.</p>
    /// <p>The purpose of the <code>CommitDigest</code> parameter is to ensure that QLDB commits a transaction if and only if the server has processed the exact set of statements sent by the client, in the same order that client sent them, and with no duplicates.</p>
    pub fn commit_digest(mut self, input: aws_smithy_types::Blob) -> Self {
        self.commit_digest = Some(input);
        self
    }
    /// <p>Specifies the commit digest for the transaction to commit. For every active transaction, the commit digest must be passed. QLDB validates <code>CommitDigest</code> and rejects the commit with an error if the digest computed on the client does not match the digest computed by QLDB.</p>
    /// <p>The purpose of the <code>CommitDigest</code> parameter is to ensure that QLDB commits a transaction if and only if the server has processed the exact set of statements sent by the client, in the same order that client sent them, and with no duplicates.</p>
    pub fn set_commit_digest(mut self, input: std::option::Option<aws_smithy_types::Blob>) -> Self {
        self.commit_digest = input;
        self
    }
    /// Consumes the builder and constructs a [`CommitTransactionRequest`](crate::types::CommitTransactionRequest).
    pub fn build(self) -> crate::types::CommitTransactionRequest {
        crate::types::CommitTransactionRequest {
            transaction_id: self.transaction_id,
            commit_digest: self.commit_digest,
        }
    }
}
