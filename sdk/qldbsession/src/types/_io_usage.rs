// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains I/O usage metrics for a command that was invoked.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IoUsage {
    /// <p>The number of read I/O requests that the command made.</p>
    pub read_ios: i64,
    /// <p>The number of write I/O requests that the command made.</p>
    pub write_ios: i64,
}
impl IoUsage {
    /// <p>The number of read I/O requests that the command made.</p>
    pub fn read_ios(&self) -> i64 {
        self.read_ios
    }
    /// <p>The number of write I/O requests that the command made.</p>
    pub fn write_ios(&self) -> i64 {
        self.write_ios
    }
}
impl IoUsage {
    /// Creates a new builder-style object to manufacture [`IoUsage`](crate::types::IoUsage).
    pub fn builder() -> crate::types::builders::IoUsageBuilder {
        crate::types::builders::IoUsageBuilder::default()
    }
}

/// A builder for [`IoUsage`](crate::types::IoUsage).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct IoUsageBuilder {
    pub(crate) read_ios: ::std::option::Option<i64>,
    pub(crate) write_ios: ::std::option::Option<i64>,
}
impl IoUsageBuilder {
    /// <p>The number of read I/O requests that the command made.</p>
    pub fn read_ios(mut self, input: i64) -> Self {
        self.read_ios = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of read I/O requests that the command made.</p>
    pub fn set_read_ios(mut self, input: ::std::option::Option<i64>) -> Self {
        self.read_ios = input;
        self
    }
    /// <p>The number of read I/O requests that the command made.</p>
    pub fn get_read_ios(&self) -> &::std::option::Option<i64> {
        &self.read_ios
    }
    /// <p>The number of write I/O requests that the command made.</p>
    pub fn write_ios(mut self, input: i64) -> Self {
        self.write_ios = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of write I/O requests that the command made.</p>
    pub fn set_write_ios(mut self, input: ::std::option::Option<i64>) -> Self {
        self.write_ios = input;
        self
    }
    /// <p>The number of write I/O requests that the command made.</p>
    pub fn get_write_ios(&self) -> &::std::option::Option<i64> {
        &self.write_ios
    }
    /// Consumes the builder and constructs a [`IoUsage`](crate::types::IoUsage).
    pub fn build(self) -> crate::types::IoUsage {
        crate::types::IoUsage {
            read_ios: self.read_ios.unwrap_or_default(),
            write_ios: self.write_ios.unwrap_or_default(),
        }
    }
}
