// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_send_command_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendCommandInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.session_token {
        object.key("SessionToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.start_session {
        let mut object_3 = object.key("StartSession").start_object();
        crate::json_ser::serialize_structure_crate_model_start_session_request(
            &mut object_3,
            var_2,
        )?;
        object_3.finish();
    }
    if let Some(var_4) = &input.start_transaction {
        let mut object_5 = object.key("StartTransaction").start_object();
        crate::json_ser::serialize_structure_crate_model_start_transaction_request(
            &mut object_5,
            var_4,
        )?;
        object_5.finish();
    }
    if let Some(var_6) = &input.end_session {
        let mut object_7 = object.key("EndSession").start_object();
        crate::json_ser::serialize_structure_crate_model_end_session_request(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.commit_transaction {
        let mut object_9 = object.key("CommitTransaction").start_object();
        crate::json_ser::serialize_structure_crate_model_commit_transaction_request(
            &mut object_9,
            var_8,
        )?;
        object_9.finish();
    }
    if let Some(var_10) = &input.abort_transaction {
        let mut object_11 = object.key("AbortTransaction").start_object();
        crate::json_ser::serialize_structure_crate_model_abort_transaction_request(
            &mut object_11,
            var_10,
        )?;
        object_11.finish();
    }
    if let Some(var_12) = &input.execute_statement {
        let mut object_13 = object.key("ExecuteStatement").start_object();
        crate::json_ser::serialize_structure_crate_model_execute_statement_request(
            &mut object_13,
            var_12,
        )?;
        object_13.finish();
    }
    if let Some(var_14) = &input.fetch_page {
        let mut object_15 = object.key("FetchPage").start_object();
        crate::json_ser::serialize_structure_crate_model_fetch_page_request(
            &mut object_15,
            var_14,
        )?;
        object_15.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_start_session_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StartSessionRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_16) = &input.ledger_name {
        object.key("LedgerName").string(var_16.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_start_transaction_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StartTransactionRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let (_, _) = (object, input);
    Ok(())
}

pub fn serialize_structure_crate_model_end_session_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EndSessionRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let (_, _) = (object, input);
    Ok(())
}

pub fn serialize_structure_crate_model_commit_transaction_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CommitTransactionRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_17) = &input.transaction_id {
        object.key("TransactionId").string(var_17.as_str());
    }
    if let Some(var_18) = &input.commit_digest {
        object
            .key("CommitDigest")
            .string_unchecked(&aws_smithy_types::base64::encode(var_18));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_abort_transaction_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AbortTransactionRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let (_, _) = (object, input);
    Ok(())
}

pub fn serialize_structure_crate_model_execute_statement_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExecuteStatementRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_19) = &input.transaction_id {
        object.key("TransactionId").string(var_19.as_str());
    }
    if let Some(var_20) = &input.statement {
        object.key("Statement").string(var_20.as_str());
    }
    if let Some(var_21) = &input.parameters {
        let mut array_22 = object.key("Parameters").start_array();
        for item_23 in var_21 {
            {
                let mut object_24 = array_22.value().start_object();
                crate::json_ser::serialize_structure_crate_model_value_holder(
                    &mut object_24,
                    item_23,
                )?;
                object_24.finish();
            }
        }
        array_22.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_fetch_page_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FetchPageRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_25) = &input.transaction_id {
        object.key("TransactionId").string(var_25.as_str());
    }
    if let Some(var_26) = &input.next_page_token {
        object.key("NextPageToken").string(var_26.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_value_holder(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ValueHolder,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_27) = &input.ion_binary {
        object
            .key("IonBinary")
            .string_unchecked(&aws_smithy_types::base64::encode(var_27));
    }
    if let Some(var_28) = &input.ion_text {
        object.key("IonText").string(var_28.as_str());
    }
    Ok(())
}
