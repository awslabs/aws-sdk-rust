// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::send_command::_send_command_output::SendCommandOutputBuilder;

pub use crate::operation::send_command::_send_command_input::SendCommandInputBuilder;

impl crate::operation::send_command::builders::SendCommandInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::send_command::SendCommandOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::send_command::SendCommandError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.send_command();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `SendCommand`.
///
/// <p>Sends a command to an Amazon QLDB ledger.</p><note>
/// <p>Instead of interacting directly with this API, we recommend using the QLDB driver or the QLDB shell to execute data transactions on a ledger.</p>
/// <ul>
/// <li>
/// <p>If you are working with an AWS SDK, use the QLDB driver. The driver provides a high-level abstraction layer above this <i>QLDB Session</i> data plane and manages <code>SendCommand</code> API calls for you. For information and a list of supported programming languages, see <a href="https://docs.aws.amazon.com/qldb/latest/developerguide/getting-started-driver.html">Getting started with the driver</a> in the <i>Amazon QLDB Developer Guide</i>.</p></li>
/// <li>
/// <p>If you are working with the AWS Command Line Interface (AWS CLI), use the QLDB shell. The shell is a command line interface that uses the QLDB driver to interact with a ledger. For information, see <a href="https://docs.aws.amazon.com/qldb/latest/developerguide/data-shell.html">Accessing Amazon QLDB using the QLDB shell</a>.</p></li>
/// </ul>
/// </note>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct SendCommandFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::send_command::builders::SendCommandInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::send_command::SendCommandOutput,
        crate::operation::send_command::SendCommandError,
    > for SendCommandFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::send_command::SendCommandOutput,
            crate::operation::send_command::SendCommandError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl SendCommandFluentBuilder {
    /// Creates a new `SendCommand`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the SendCommand as a reference.
    pub fn as_input(&self) -> &crate::operation::send_command::builders::SendCommandInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::send_command::SendCommandOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::send_command::SendCommandError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::send_command::SendCommand::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::send_command::SendCommand::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::send_command::SendCommandOutput,
        crate::operation::send_command::SendCommandError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Specifies the session token for the current command. A session token is constant throughout the life of the session.</p>
    /// <p>To obtain a session token, run the <code>StartSession</code> command. This <code>SessionToken</code> is required for every subsequent command that is issued during the current session.</p>
    pub fn session_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.session_token(input.into());
        self
    }
    /// <p>Specifies the session token for the current command. A session token is constant throughout the life of the session.</p>
    /// <p>To obtain a session token, run the <code>StartSession</code> command. This <code>SessionToken</code> is required for every subsequent command that is issued during the current session.</p>
    pub fn set_session_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_session_token(input);
        self
    }
    /// <p>Specifies the session token for the current command. A session token is constant throughout the life of the session.</p>
    /// <p>To obtain a session token, run the <code>StartSession</code> command. This <code>SessionToken</code> is required for every subsequent command that is issued during the current session.</p>
    pub fn get_session_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_session_token()
    }
    /// <p>Command to start a new session. A session token is obtained as part of the response.</p>
    pub fn start_session(mut self, input: crate::types::StartSessionRequest) -> Self {
        self.inner = self.inner.start_session(input);
        self
    }
    /// <p>Command to start a new session. A session token is obtained as part of the response.</p>
    pub fn set_start_session(mut self, input: ::std::option::Option<crate::types::StartSessionRequest>) -> Self {
        self.inner = self.inner.set_start_session(input);
        self
    }
    /// <p>Command to start a new session. A session token is obtained as part of the response.</p>
    pub fn get_start_session(&self) -> &::std::option::Option<crate::types::StartSessionRequest> {
        self.inner.get_start_session()
    }
    /// <p>Command to start a new transaction.</p>
    pub fn start_transaction(mut self, input: crate::types::StartTransactionRequest) -> Self {
        self.inner = self.inner.start_transaction(input);
        self
    }
    /// <p>Command to start a new transaction.</p>
    pub fn set_start_transaction(mut self, input: ::std::option::Option<crate::types::StartTransactionRequest>) -> Self {
        self.inner = self.inner.set_start_transaction(input);
        self
    }
    /// <p>Command to start a new transaction.</p>
    pub fn get_start_transaction(&self) -> &::std::option::Option<crate::types::StartTransactionRequest> {
        self.inner.get_start_transaction()
    }
    /// <p>Command to end the current session.</p>
    pub fn end_session(mut self, input: crate::types::EndSessionRequest) -> Self {
        self.inner = self.inner.end_session(input);
        self
    }
    /// <p>Command to end the current session.</p>
    pub fn set_end_session(mut self, input: ::std::option::Option<crate::types::EndSessionRequest>) -> Self {
        self.inner = self.inner.set_end_session(input);
        self
    }
    /// <p>Command to end the current session.</p>
    pub fn get_end_session(&self) -> &::std::option::Option<crate::types::EndSessionRequest> {
        self.inner.get_end_session()
    }
    /// <p>Command to commit the specified transaction.</p>
    pub fn commit_transaction(mut self, input: crate::types::CommitTransactionRequest) -> Self {
        self.inner = self.inner.commit_transaction(input);
        self
    }
    /// <p>Command to commit the specified transaction.</p>
    pub fn set_commit_transaction(mut self, input: ::std::option::Option<crate::types::CommitTransactionRequest>) -> Self {
        self.inner = self.inner.set_commit_transaction(input);
        self
    }
    /// <p>Command to commit the specified transaction.</p>
    pub fn get_commit_transaction(&self) -> &::std::option::Option<crate::types::CommitTransactionRequest> {
        self.inner.get_commit_transaction()
    }
    /// <p>Command to abort the current transaction.</p>
    pub fn abort_transaction(mut self, input: crate::types::AbortTransactionRequest) -> Self {
        self.inner = self.inner.abort_transaction(input);
        self
    }
    /// <p>Command to abort the current transaction.</p>
    pub fn set_abort_transaction(mut self, input: ::std::option::Option<crate::types::AbortTransactionRequest>) -> Self {
        self.inner = self.inner.set_abort_transaction(input);
        self
    }
    /// <p>Command to abort the current transaction.</p>
    pub fn get_abort_transaction(&self) -> &::std::option::Option<crate::types::AbortTransactionRequest> {
        self.inner.get_abort_transaction()
    }
    /// <p>Command to execute a statement in the specified transaction.</p>
    pub fn execute_statement(mut self, input: crate::types::ExecuteStatementRequest) -> Self {
        self.inner = self.inner.execute_statement(input);
        self
    }
    /// <p>Command to execute a statement in the specified transaction.</p>
    pub fn set_execute_statement(mut self, input: ::std::option::Option<crate::types::ExecuteStatementRequest>) -> Self {
        self.inner = self.inner.set_execute_statement(input);
        self
    }
    /// <p>Command to execute a statement in the specified transaction.</p>
    pub fn get_execute_statement(&self) -> &::std::option::Option<crate::types::ExecuteStatementRequest> {
        self.inner.get_execute_statement()
    }
    /// <p>Command to fetch a page.</p>
    pub fn fetch_page(mut self, input: crate::types::FetchPageRequest) -> Self {
        self.inner = self.inner.fetch_page(input);
        self
    }
    /// <p>Command to fetch a page.</p>
    pub fn set_fetch_page(mut self, input: ::std::option::Option<crate::types::FetchPageRequest>) -> Self {
        self.inner = self.inner.set_fetch_page(input);
        self
    }
    /// <p>Command to fetch a page.</p>
    pub fn get_fetch_page(&self) -> &::std::option::Option<crate::types::FetchPageRequest> {
        self.inner.get_fetch_page()
    }
}
