// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SendCommandInput {
    /// <p>Specifies the session token for the current command. A session token is constant throughout the life of the session.</p>
    /// <p>To obtain a session token, run the <code>StartSession</code> command. This <code>SessionToken</code> is required for every subsequent command that is issued during the current session.</p>
    pub session_token: ::std::option::Option<::std::string::String>,
    /// <p>Command to start a new session. A session token is obtained as part of the response.</p>
    pub start_session: ::std::option::Option<crate::types::StartSessionRequest>,
    /// <p>Command to start a new transaction.</p>
    pub start_transaction: ::std::option::Option<crate::types::StartTransactionRequest>,
    /// <p>Command to end the current session.</p>
    pub end_session: ::std::option::Option<crate::types::EndSessionRequest>,
    /// <p>Command to commit the specified transaction.</p>
    pub commit_transaction: ::std::option::Option<crate::types::CommitTransactionRequest>,
    /// <p>Command to abort the current transaction.</p>
    pub abort_transaction: ::std::option::Option<crate::types::AbortTransactionRequest>,
    /// <p>Command to execute a statement in the specified transaction.</p>
    pub execute_statement: ::std::option::Option<crate::types::ExecuteStatementRequest>,
    /// <p>Command to fetch a page.</p>
    pub fetch_page: ::std::option::Option<crate::types::FetchPageRequest>,
}
impl SendCommandInput {
    /// <p>Specifies the session token for the current command. A session token is constant throughout the life of the session.</p>
    /// <p>To obtain a session token, run the <code>StartSession</code> command. This <code>SessionToken</code> is required for every subsequent command that is issued during the current session.</p>
    pub fn session_token(&self) -> ::std::option::Option<&str> {
        self.session_token.as_deref()
    }
    /// <p>Command to start a new session. A session token is obtained as part of the response.</p>
    pub fn start_session(&self) -> ::std::option::Option<&crate::types::StartSessionRequest> {
        self.start_session.as_ref()
    }
    /// <p>Command to start a new transaction.</p>
    pub fn start_transaction(&self) -> ::std::option::Option<&crate::types::StartTransactionRequest> {
        self.start_transaction.as_ref()
    }
    /// <p>Command to end the current session.</p>
    pub fn end_session(&self) -> ::std::option::Option<&crate::types::EndSessionRequest> {
        self.end_session.as_ref()
    }
    /// <p>Command to commit the specified transaction.</p>
    pub fn commit_transaction(&self) -> ::std::option::Option<&crate::types::CommitTransactionRequest> {
        self.commit_transaction.as_ref()
    }
    /// <p>Command to abort the current transaction.</p>
    pub fn abort_transaction(&self) -> ::std::option::Option<&crate::types::AbortTransactionRequest> {
        self.abort_transaction.as_ref()
    }
    /// <p>Command to execute a statement in the specified transaction.</p>
    pub fn execute_statement(&self) -> ::std::option::Option<&crate::types::ExecuteStatementRequest> {
        self.execute_statement.as_ref()
    }
    /// <p>Command to fetch a page.</p>
    pub fn fetch_page(&self) -> ::std::option::Option<&crate::types::FetchPageRequest> {
        self.fetch_page.as_ref()
    }
}
impl SendCommandInput {
    /// Creates a new builder-style object to manufacture [`SendCommandInput`](crate::operation::send_command::SendCommandInput).
    pub fn builder() -> crate::operation::send_command::builders::SendCommandInputBuilder {
        crate::operation::send_command::builders::SendCommandInputBuilder::default()
    }
}

/// A builder for [`SendCommandInput`](crate::operation::send_command::SendCommandInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SendCommandInputBuilder {
    pub(crate) session_token: ::std::option::Option<::std::string::String>,
    pub(crate) start_session: ::std::option::Option<crate::types::StartSessionRequest>,
    pub(crate) start_transaction: ::std::option::Option<crate::types::StartTransactionRequest>,
    pub(crate) end_session: ::std::option::Option<crate::types::EndSessionRequest>,
    pub(crate) commit_transaction: ::std::option::Option<crate::types::CommitTransactionRequest>,
    pub(crate) abort_transaction: ::std::option::Option<crate::types::AbortTransactionRequest>,
    pub(crate) execute_statement: ::std::option::Option<crate::types::ExecuteStatementRequest>,
    pub(crate) fetch_page: ::std::option::Option<crate::types::FetchPageRequest>,
}
impl SendCommandInputBuilder {
    /// <p>Specifies the session token for the current command. A session token is constant throughout the life of the session.</p>
    /// <p>To obtain a session token, run the <code>StartSession</code> command. This <code>SessionToken</code> is required for every subsequent command that is issued during the current session.</p>
    pub fn session_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the session token for the current command. A session token is constant throughout the life of the session.</p>
    /// <p>To obtain a session token, run the <code>StartSession</code> command. This <code>SessionToken</code> is required for every subsequent command that is issued during the current session.</p>
    pub fn set_session_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_token = input;
        self
    }
    /// <p>Specifies the session token for the current command. A session token is constant throughout the life of the session.</p>
    /// <p>To obtain a session token, run the <code>StartSession</code> command. This <code>SessionToken</code> is required for every subsequent command that is issued during the current session.</p>
    pub fn get_session_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_token
    }
    /// <p>Command to start a new session. A session token is obtained as part of the response.</p>
    pub fn start_session(mut self, input: crate::types::StartSessionRequest) -> Self {
        self.start_session = ::std::option::Option::Some(input);
        self
    }
    /// <p>Command to start a new session. A session token is obtained as part of the response.</p>
    pub fn set_start_session(mut self, input: ::std::option::Option<crate::types::StartSessionRequest>) -> Self {
        self.start_session = input;
        self
    }
    /// <p>Command to start a new session. A session token is obtained as part of the response.</p>
    pub fn get_start_session(&self) -> &::std::option::Option<crate::types::StartSessionRequest> {
        &self.start_session
    }
    /// <p>Command to start a new transaction.</p>
    pub fn start_transaction(mut self, input: crate::types::StartTransactionRequest) -> Self {
        self.start_transaction = ::std::option::Option::Some(input);
        self
    }
    /// <p>Command to start a new transaction.</p>
    pub fn set_start_transaction(mut self, input: ::std::option::Option<crate::types::StartTransactionRequest>) -> Self {
        self.start_transaction = input;
        self
    }
    /// <p>Command to start a new transaction.</p>
    pub fn get_start_transaction(&self) -> &::std::option::Option<crate::types::StartTransactionRequest> {
        &self.start_transaction
    }
    /// <p>Command to end the current session.</p>
    pub fn end_session(mut self, input: crate::types::EndSessionRequest) -> Self {
        self.end_session = ::std::option::Option::Some(input);
        self
    }
    /// <p>Command to end the current session.</p>
    pub fn set_end_session(mut self, input: ::std::option::Option<crate::types::EndSessionRequest>) -> Self {
        self.end_session = input;
        self
    }
    /// <p>Command to end the current session.</p>
    pub fn get_end_session(&self) -> &::std::option::Option<crate::types::EndSessionRequest> {
        &self.end_session
    }
    /// <p>Command to commit the specified transaction.</p>
    pub fn commit_transaction(mut self, input: crate::types::CommitTransactionRequest) -> Self {
        self.commit_transaction = ::std::option::Option::Some(input);
        self
    }
    /// <p>Command to commit the specified transaction.</p>
    pub fn set_commit_transaction(mut self, input: ::std::option::Option<crate::types::CommitTransactionRequest>) -> Self {
        self.commit_transaction = input;
        self
    }
    /// <p>Command to commit the specified transaction.</p>
    pub fn get_commit_transaction(&self) -> &::std::option::Option<crate::types::CommitTransactionRequest> {
        &self.commit_transaction
    }
    /// <p>Command to abort the current transaction.</p>
    pub fn abort_transaction(mut self, input: crate::types::AbortTransactionRequest) -> Self {
        self.abort_transaction = ::std::option::Option::Some(input);
        self
    }
    /// <p>Command to abort the current transaction.</p>
    pub fn set_abort_transaction(mut self, input: ::std::option::Option<crate::types::AbortTransactionRequest>) -> Self {
        self.abort_transaction = input;
        self
    }
    /// <p>Command to abort the current transaction.</p>
    pub fn get_abort_transaction(&self) -> &::std::option::Option<crate::types::AbortTransactionRequest> {
        &self.abort_transaction
    }
    /// <p>Command to execute a statement in the specified transaction.</p>
    pub fn execute_statement(mut self, input: crate::types::ExecuteStatementRequest) -> Self {
        self.execute_statement = ::std::option::Option::Some(input);
        self
    }
    /// <p>Command to execute a statement in the specified transaction.</p>
    pub fn set_execute_statement(mut self, input: ::std::option::Option<crate::types::ExecuteStatementRequest>) -> Self {
        self.execute_statement = input;
        self
    }
    /// <p>Command to execute a statement in the specified transaction.</p>
    pub fn get_execute_statement(&self) -> &::std::option::Option<crate::types::ExecuteStatementRequest> {
        &self.execute_statement
    }
    /// <p>Command to fetch a page.</p>
    pub fn fetch_page(mut self, input: crate::types::FetchPageRequest) -> Self {
        self.fetch_page = ::std::option::Option::Some(input);
        self
    }
    /// <p>Command to fetch a page.</p>
    pub fn set_fetch_page(mut self, input: ::std::option::Option<crate::types::FetchPageRequest>) -> Self {
        self.fetch_page = input;
        self
    }
    /// <p>Command to fetch a page.</p>
    pub fn get_fetch_page(&self) -> &::std::option::Option<crate::types::FetchPageRequest> {
        &self.fetch_page
    }
    /// Consumes the builder and constructs a [`SendCommandInput`](crate::operation::send_command::SendCommandInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::send_command::SendCommandInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::send_command::SendCommandInput {
            session_token: self.session_token,
            start_session: self.start_session,
            start_transaction: self.start_transaction,
            end_session: self.end_session,
            commit_transaction: self.commit_transaction,
            abort_transaction: self.abort_transaction,
            execute_statement: self.execute_statement,
            fetch_page: self.fetch_page,
        })
    }
}
