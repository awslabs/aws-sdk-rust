// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SendCommandInputBody<'a> {
    /// <p>Specifies the session token for the current command. A session token is constant
    /// throughout the life of the session.</p>
    /// <p>To obtain a session token, run the <code>StartSession</code> command. This
    /// <code>SessionToken</code> is required for every subsequent command that is issued during
    /// the current session.</p>
    pub session_token: &'a std::option::Option<std::string::String>,
    /// <p>Command to start a new session. A session token is obtained as part of the
    /// response.</p>
    pub start_session: &'a std::option::Option<crate::model::StartSessionRequest>,
    /// <p>Command to start a new transaction.</p>
    pub start_transaction: &'a std::option::Option<crate::model::StartTransactionRequest>,
    /// <p>Command to end the current session.</p>
    pub end_session: &'a std::option::Option<crate::model::EndSessionRequest>,
    /// <p>Command to commit the specified transaction.</p>
    pub commit_transaction: &'a std::option::Option<crate::model::CommitTransactionRequest>,
    /// <p>Command to abort the current transaction.</p>
    pub abort_transaction: &'a std::option::Option<crate::model::AbortTransactionRequest>,
    /// <p>Command to execute a statement in the specified transaction.</p>
    pub execute_statement: &'a std::option::Option<crate::model::ExecuteStatementRequest>,
    /// <p>Command to fetch a page.</p>
    pub fetch_page: &'a std::option::Option<crate::model::FetchPageRequest>,
}
impl<'a> std::fmt::Debug for SendCommandInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SendCommandInputBody");
        formatter.field("session_token", &self.session_token);
        formatter.field("start_session", &self.start_session);
        formatter.field("start_transaction", &self.start_transaction);
        formatter.field("end_session", &self.end_session);
        formatter.field("commit_transaction", &self.commit_transaction);
        formatter.field("abort_transaction", &self.abort_transaction);
        formatter.field("execute_statement", &self.execute_statement);
        formatter.field("fetch_page", &self.fetch_page);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct SendCommandOutputBody {
    /// <p>Contains the details of the started session that includes a session token. This
    /// <code>SessionToken</code> is required for every subsequent command that is issued during
    /// the current session.</p>
    #[serde(rename = "StartSession")]
    #[serde(default)]
    pub start_session: std::option::Option<crate::model::StartSessionResult>,
    /// <p>Contains the details of the started transaction.</p>
    #[serde(rename = "StartTransaction")]
    #[serde(default)]
    pub start_transaction: std::option::Option<crate::model::StartTransactionResult>,
    /// <p>Contains the details of the ended session.</p>
    #[serde(rename = "EndSession")]
    #[serde(default)]
    pub end_session: std::option::Option<crate::model::EndSessionResult>,
    /// <p>Contains the details of the committed transaction.</p>
    #[serde(rename = "CommitTransaction")]
    #[serde(default)]
    pub commit_transaction: std::option::Option<crate::model::CommitTransactionResult>,
    /// <p>Contains the details of the aborted transaction.</p>
    #[serde(rename = "AbortTransaction")]
    #[serde(default)]
    pub abort_transaction: std::option::Option<crate::model::AbortTransactionResult>,
    /// <p>Contains the details of the executed statement.</p>
    #[serde(rename = "ExecuteStatement")]
    #[serde(default)]
    pub execute_statement: std::option::Option<crate::model::ExecuteStatementResult>,
    /// <p>Contains the details of the fetched page.</p>
    #[serde(rename = "FetchPage")]
    #[serde(default)]
    pub fetch_page: std::option::Option<crate::model::FetchPageResult>,
}
impl std::fmt::Debug for SendCommandOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SendCommandOutputBody");
        formatter.field("start_session", &self.start_session);
        formatter.field("start_transaction", &self.start_transaction);
        formatter.field("end_session", &self.end_session);
        formatter.field("commit_transaction", &self.commit_transaction);
        formatter.field("abort_transaction", &self.abort_transaction);
        formatter.field("execute_statement", &self.execute_statement);
        formatter.field("fetch_page", &self.fetch_page);
        formatter.finish()
    }
}
