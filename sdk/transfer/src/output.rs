// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> <code>UpdateUserResponse</code> returns the user name and identifier for the request to update a user's properties.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateUserOutput {
    /// <p>A system-assigned unique identifier for a server instance that the user account is assigned to.</p>
    #[doc(hidden)]
    pub server_id: std::option::Option<std::string::String>,
    /// <p>The unique identifier for a user that is assigned to a server instance that was specified in the request.</p>
    #[doc(hidden)]
    pub user_name: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateUserOutput {
    /// <p>A system-assigned unique identifier for a server instance that the user account is assigned to.</p>
    pub fn server_id(&self) -> std::option::Option<&str> {
        self.server_id.as_deref()
    }
    /// <p>The unique identifier for a user that is assigned to a server instance that was specified in the request.</p>
    pub fn user_name(&self) -> std::option::Option<&str> {
        self.user_name.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateUserOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateUserOutput {
    /// Creates a new builder-style object to manufacture [`UpdateUserOutput`](crate::output::UpdateUserOutput).
    pub fn builder() -> crate::output::update_user_output::Builder {
        crate::output::update_user_output::Builder::default()
    }
}

/// See [`UpdateUserOutput`](crate::output::UpdateUserOutput).
pub mod update_user_output {

    /// A builder for [`UpdateUserOutput`](crate::output::UpdateUserOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) server_id: std::option::Option<std::string::String>,
        pub(crate) user_name: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A system-assigned unique identifier for a server instance that the user account is assigned to.</p>
        pub fn server_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.server_id = Some(input.into());
            self
        }
        /// <p>A system-assigned unique identifier for a server instance that the user account is assigned to.</p>
        pub fn set_server_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.server_id = input;
            self
        }
        /// <p>The unique identifier for a user that is assigned to a server instance that was specified in the request.</p>
        pub fn user_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.user_name = Some(input.into());
            self
        }
        /// <p>The unique identifier for a user that is assigned to a server instance that was specified in the request.</p>
        pub fn set_user_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.user_name = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateUserOutput`](crate::output::UpdateUserOutput).
        pub fn build(self) -> crate::output::UpdateUserOutput {
            crate::output::UpdateUserOutput {
                server_id: self.server_id,
                user_name: self.user_name,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateServerOutput {
    /// <p>A system-assigned unique identifier for a server that the user account is assigned to.</p>
    #[doc(hidden)]
    pub server_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateServerOutput {
    /// <p>A system-assigned unique identifier for a server that the user account is assigned to.</p>
    pub fn server_id(&self) -> std::option::Option<&str> {
        self.server_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateServerOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateServerOutput {
    /// Creates a new builder-style object to manufacture [`UpdateServerOutput`](crate::output::UpdateServerOutput).
    pub fn builder() -> crate::output::update_server_output::Builder {
        crate::output::update_server_output::Builder::default()
    }
}

/// See [`UpdateServerOutput`](crate::output::UpdateServerOutput).
pub mod update_server_output {

    /// A builder for [`UpdateServerOutput`](crate::output::UpdateServerOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) server_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A system-assigned unique identifier for a server that the user account is assigned to.</p>
        pub fn server_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.server_id = Some(input.into());
            self
        }
        /// <p>A system-assigned unique identifier for a server that the user account is assigned to.</p>
        pub fn set_server_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.server_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateServerOutput`](crate::output::UpdateServerOutput).
        pub fn build(self) -> crate::output::UpdateServerOutput {
            crate::output::UpdateServerOutput {
                server_id: self.server_id,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateProfileOutput {
    /// <p>Returns the identifier for the profile that's being updated.</p>
    #[doc(hidden)]
    pub profile_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateProfileOutput {
    /// <p>Returns the identifier for the profile that's being updated.</p>
    pub fn profile_id(&self) -> std::option::Option<&str> {
        self.profile_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateProfileOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateProfileOutput {
    /// Creates a new builder-style object to manufacture [`UpdateProfileOutput`](crate::output::UpdateProfileOutput).
    pub fn builder() -> crate::output::update_profile_output::Builder {
        crate::output::update_profile_output::Builder::default()
    }
}

/// See [`UpdateProfileOutput`](crate::output::UpdateProfileOutput).
pub mod update_profile_output {

    /// A builder for [`UpdateProfileOutput`](crate::output::UpdateProfileOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) profile_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns the identifier for the profile that's being updated.</p>
        pub fn profile_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.profile_id = Some(input.into());
            self
        }
        /// <p>Returns the identifier for the profile that's being updated.</p>
        pub fn set_profile_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.profile_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateProfileOutput`](crate::output::UpdateProfileOutput).
        pub fn build(self) -> crate::output::UpdateProfileOutput {
            crate::output::UpdateProfileOutput {
                profile_id: self.profile_id,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateHostKeyOutput {
    /// <p>Returns the server identifier for the server that contains the updated host key.</p>
    #[doc(hidden)]
    pub server_id: std::option::Option<std::string::String>,
    /// <p>Returns the host key identifier for the updated host key.</p>
    #[doc(hidden)]
    pub host_key_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateHostKeyOutput {
    /// <p>Returns the server identifier for the server that contains the updated host key.</p>
    pub fn server_id(&self) -> std::option::Option<&str> {
        self.server_id.as_deref()
    }
    /// <p>Returns the host key identifier for the updated host key.</p>
    pub fn host_key_id(&self) -> std::option::Option<&str> {
        self.host_key_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateHostKeyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateHostKeyOutput {
    /// Creates a new builder-style object to manufacture [`UpdateHostKeyOutput`](crate::output::UpdateHostKeyOutput).
    pub fn builder() -> crate::output::update_host_key_output::Builder {
        crate::output::update_host_key_output::Builder::default()
    }
}

/// See [`UpdateHostKeyOutput`](crate::output::UpdateHostKeyOutput).
pub mod update_host_key_output {

    /// A builder for [`UpdateHostKeyOutput`](crate::output::UpdateHostKeyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) server_id: std::option::Option<std::string::String>,
        pub(crate) host_key_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns the server identifier for the server that contains the updated host key.</p>
        pub fn server_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.server_id = Some(input.into());
            self
        }
        /// <p>Returns the server identifier for the server that contains the updated host key.</p>
        pub fn set_server_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.server_id = input;
            self
        }
        /// <p>Returns the host key identifier for the updated host key.</p>
        pub fn host_key_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.host_key_id = Some(input.into());
            self
        }
        /// <p>Returns the host key identifier for the updated host key.</p>
        pub fn set_host_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.host_key_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateHostKeyOutput`](crate::output::UpdateHostKeyOutput).
        pub fn build(self) -> crate::output::UpdateHostKeyOutput {
            crate::output::UpdateHostKeyOutput {
                server_id: self.server_id,
                host_key_id: self.host_key_id,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateConnectorOutput {
    /// <p>Returns the identifier of the connector object that you are updating.</p>
    #[doc(hidden)]
    pub connector_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateConnectorOutput {
    /// <p>Returns the identifier of the connector object that you are updating.</p>
    pub fn connector_id(&self) -> std::option::Option<&str> {
        self.connector_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateConnectorOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateConnectorOutput {
    /// Creates a new builder-style object to manufacture [`UpdateConnectorOutput`](crate::output::UpdateConnectorOutput).
    pub fn builder() -> crate::output::update_connector_output::Builder {
        crate::output::update_connector_output::Builder::default()
    }
}

/// See [`UpdateConnectorOutput`](crate::output::UpdateConnectorOutput).
pub mod update_connector_output {

    /// A builder for [`UpdateConnectorOutput`](crate::output::UpdateConnectorOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) connector_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns the identifier of the connector object that you are updating.</p>
        pub fn connector_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.connector_id = Some(input.into());
            self
        }
        /// <p>Returns the identifier of the connector object that you are updating.</p>
        pub fn set_connector_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.connector_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateConnectorOutput`](crate::output::UpdateConnectorOutput).
        pub fn build(self) -> crate::output::UpdateConnectorOutput {
            crate::output::UpdateConnectorOutput {
                connector_id: self.connector_id,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateCertificateOutput {
    /// <p>Returns the identifier of the certificate object that you are updating.</p>
    #[doc(hidden)]
    pub certificate_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateCertificateOutput {
    /// <p>Returns the identifier of the certificate object that you are updating.</p>
    pub fn certificate_id(&self) -> std::option::Option<&str> {
        self.certificate_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateCertificateOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateCertificateOutput {
    /// Creates a new builder-style object to manufacture [`UpdateCertificateOutput`](crate::output::UpdateCertificateOutput).
    pub fn builder() -> crate::output::update_certificate_output::Builder {
        crate::output::update_certificate_output::Builder::default()
    }
}

/// See [`UpdateCertificateOutput`](crate::output::UpdateCertificateOutput).
pub mod update_certificate_output {

    /// A builder for [`UpdateCertificateOutput`](crate::output::UpdateCertificateOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) certificate_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns the identifier of the certificate object that you are updating.</p>
        pub fn certificate_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.certificate_id = Some(input.into());
            self
        }
        /// <p>Returns the identifier of the certificate object that you are updating.</p>
        pub fn set_certificate_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.certificate_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateCertificateOutput`](crate::output::UpdateCertificateOutput).
        pub fn build(self) -> crate::output::UpdateCertificateOutput {
            crate::output::UpdateCertificateOutput {
                certificate_id: self.certificate_id,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateAgreementOutput {
    /// <p>A unique identifier for the agreement. This identifier is returned when you create an agreement.</p>
    #[doc(hidden)]
    pub agreement_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateAgreementOutput {
    /// <p>A unique identifier for the agreement. This identifier is returned when you create an agreement.</p>
    pub fn agreement_id(&self) -> std::option::Option<&str> {
        self.agreement_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateAgreementOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateAgreementOutput {
    /// Creates a new builder-style object to manufacture [`UpdateAgreementOutput`](crate::output::UpdateAgreementOutput).
    pub fn builder() -> crate::output::update_agreement_output::Builder {
        crate::output::update_agreement_output::Builder::default()
    }
}

/// See [`UpdateAgreementOutput`](crate::output::UpdateAgreementOutput).
pub mod update_agreement_output {

    /// A builder for [`UpdateAgreementOutput`](crate::output::UpdateAgreementOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) agreement_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A unique identifier for the agreement. This identifier is returned when you create an agreement.</p>
        pub fn agreement_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.agreement_id = Some(input.into());
            self
        }
        /// <p>A unique identifier for the agreement. This identifier is returned when you create an agreement.</p>
        pub fn set_agreement_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.agreement_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateAgreementOutput`](crate::output::UpdateAgreementOutput).
        pub fn build(self) -> crate::output::UpdateAgreementOutput {
            crate::output::UpdateAgreementOutput {
                agreement_id: self.agreement_id,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateAccessOutput {
    /// <p>The identifier of the server that the user is attached to.</p>
    #[doc(hidden)]
    pub server_id: std::option::Option<std::string::String>,
    /// <p>The external identifier of the group whose users have access to your Amazon S3 or Amazon EFS resources over the enabled protocols using Amazon Web ServicesTransfer Family.</p>
    #[doc(hidden)]
    pub external_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateAccessOutput {
    /// <p>The identifier of the server that the user is attached to.</p>
    pub fn server_id(&self) -> std::option::Option<&str> {
        self.server_id.as_deref()
    }
    /// <p>The external identifier of the group whose users have access to your Amazon S3 or Amazon EFS resources over the enabled protocols using Amazon Web ServicesTransfer Family.</p>
    pub fn external_id(&self) -> std::option::Option<&str> {
        self.external_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateAccessOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateAccessOutput {
    /// Creates a new builder-style object to manufacture [`UpdateAccessOutput`](crate::output::UpdateAccessOutput).
    pub fn builder() -> crate::output::update_access_output::Builder {
        crate::output::update_access_output::Builder::default()
    }
}

/// See [`UpdateAccessOutput`](crate::output::UpdateAccessOutput).
pub mod update_access_output {

    /// A builder for [`UpdateAccessOutput`](crate::output::UpdateAccessOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) server_id: std::option::Option<std::string::String>,
        pub(crate) external_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The identifier of the server that the user is attached to.</p>
        pub fn server_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.server_id = Some(input.into());
            self
        }
        /// <p>The identifier of the server that the user is attached to.</p>
        pub fn set_server_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.server_id = input;
            self
        }
        /// <p>The external identifier of the group whose users have access to your Amazon S3 or Amazon EFS resources over the enabled protocols using Amazon Web ServicesTransfer Family.</p>
        pub fn external_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.external_id = Some(input.into());
            self
        }
        /// <p>The external identifier of the group whose users have access to your Amazon S3 or Amazon EFS resources over the enabled protocols using Amazon Web ServicesTransfer Family.</p>
        pub fn set_external_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.external_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateAccessOutput`](crate::output::UpdateAccessOutput).
        pub fn build(self) -> crate::output::UpdateAccessOutput {
            crate::output::UpdateAccessOutput {
                server_id: self.server_id,
                external_id: self.external_id,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UntagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UntagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput).
pub mod untag_resource_output {

    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput).
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TestIdentityProviderOutput {
    /// <p>The response that is returned from your API Gateway.</p>
    #[doc(hidden)]
    pub response: std::option::Option<std::string::String>,
    /// <p>The HTTP status code that is the response from your API Gateway.</p>
    #[doc(hidden)]
    pub status_code: i32,
    /// <p>A message that indicates whether the test was successful or not.</p> <note>
    /// <p>If an empty string is returned, the most likely cause is that the authentication failed due to an incorrect username or password.</p>
    /// </note>
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
    /// <p>The endpoint of the service used to authenticate a user.</p>
    #[doc(hidden)]
    pub url: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl TestIdentityProviderOutput {
    /// <p>The response that is returned from your API Gateway.</p>
    pub fn response(&self) -> std::option::Option<&str> {
        self.response.as_deref()
    }
    /// <p>The HTTP status code that is the response from your API Gateway.</p>
    pub fn status_code(&self) -> i32 {
        self.status_code
    }
    /// <p>A message that indicates whether the test was successful or not.</p> <note>
    /// <p>If an empty string is returned, the most likely cause is that the authentication failed due to an incorrect username or password.</p>
    /// </note>
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>The endpoint of the service used to authenticate a user.</p>
    pub fn url(&self) -> std::option::Option<&str> {
        self.url.as_deref()
    }
}
impl aws_http::request_id::RequestId for TestIdentityProviderOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl TestIdentityProviderOutput {
    /// Creates a new builder-style object to manufacture [`TestIdentityProviderOutput`](crate::output::TestIdentityProviderOutput).
    pub fn builder() -> crate::output::test_identity_provider_output::Builder {
        crate::output::test_identity_provider_output::Builder::default()
    }
}

/// See [`TestIdentityProviderOutput`](crate::output::TestIdentityProviderOutput).
pub mod test_identity_provider_output {

    /// A builder for [`TestIdentityProviderOutput`](crate::output::TestIdentityProviderOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) response: std::option::Option<std::string::String>,
        pub(crate) status_code: std::option::Option<i32>,
        pub(crate) message: std::option::Option<std::string::String>,
        pub(crate) url: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The response that is returned from your API Gateway.</p>
        pub fn response(mut self, input: impl Into<std::string::String>) -> Self {
            self.response = Some(input.into());
            self
        }
        /// <p>The response that is returned from your API Gateway.</p>
        pub fn set_response(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.response = input;
            self
        }
        /// <p>The HTTP status code that is the response from your API Gateway.</p>
        pub fn status_code(mut self, input: i32) -> Self {
            self.status_code = Some(input);
            self
        }
        /// <p>The HTTP status code that is the response from your API Gateway.</p>
        pub fn set_status_code(mut self, input: std::option::Option<i32>) -> Self {
            self.status_code = input;
            self
        }
        /// <p>A message that indicates whether the test was successful or not.</p> <note>
        /// <p>If an empty string is returned, the most likely cause is that the authentication failed due to an incorrect username or password.</p>
        /// </note>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        /// <p>A message that indicates whether the test was successful or not.</p> <note>
        /// <p>If an empty string is returned, the most likely cause is that the authentication failed due to an incorrect username or password.</p>
        /// </note>
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// <p>The endpoint of the service used to authenticate a user.</p>
        pub fn url(mut self, input: impl Into<std::string::String>) -> Self {
            self.url = Some(input.into());
            self
        }
        /// <p>The endpoint of the service used to authenticate a user.</p>
        pub fn set_url(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.url = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`TestIdentityProviderOutput`](crate::output::TestIdentityProviderOutput).
        pub fn build(self) -> crate::output::TestIdentityProviderOutput {
            crate::output::TestIdentityProviderOutput {
                response: self.response,
                status_code: self.status_code.unwrap_or_default(),
                message: self.message,
                url: self.url,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for TagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput).
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

/// See [`TagResourceOutput`](crate::output::TagResourceOutput).
pub mod tag_resource_output {

    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput).
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StopServerOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for StopServerOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StopServerOutput {
    /// Creates a new builder-style object to manufacture [`StopServerOutput`](crate::output::StopServerOutput).
    pub fn builder() -> crate::output::stop_server_output::Builder {
        crate::output::stop_server_output::Builder::default()
    }
}

/// See [`StopServerOutput`](crate::output::StopServerOutput).
pub mod stop_server_output {

    /// A builder for [`StopServerOutput`](crate::output::StopServerOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StopServerOutput`](crate::output::StopServerOutput).
        pub fn build(self) -> crate::output::StopServerOutput {
            crate::output::StopServerOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartServerOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for StartServerOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartServerOutput {
    /// Creates a new builder-style object to manufacture [`StartServerOutput`](crate::output::StartServerOutput).
    pub fn builder() -> crate::output::start_server_output::Builder {
        crate::output::start_server_output::Builder::default()
    }
}

/// See [`StartServerOutput`](crate::output::StartServerOutput).
pub mod start_server_output {

    /// A builder for [`StartServerOutput`](crate::output::StartServerOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StartServerOutput`](crate::output::StartServerOutput).
        pub fn build(self) -> crate::output::StartServerOutput {
            crate::output::StartServerOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartFileTransferOutput {
    /// <p>Returns the unique identifier for this file transfer. </p>
    #[doc(hidden)]
    pub transfer_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl StartFileTransferOutput {
    /// <p>Returns the unique identifier for this file transfer. </p>
    pub fn transfer_id(&self) -> std::option::Option<&str> {
        self.transfer_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for StartFileTransferOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartFileTransferOutput {
    /// Creates a new builder-style object to manufacture [`StartFileTransferOutput`](crate::output::StartFileTransferOutput).
    pub fn builder() -> crate::output::start_file_transfer_output::Builder {
        crate::output::start_file_transfer_output::Builder::default()
    }
}

/// See [`StartFileTransferOutput`](crate::output::StartFileTransferOutput).
pub mod start_file_transfer_output {

    /// A builder for [`StartFileTransferOutput`](crate::output::StartFileTransferOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transfer_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns the unique identifier for this file transfer. </p>
        pub fn transfer_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.transfer_id = Some(input.into());
            self
        }
        /// <p>Returns the unique identifier for this file transfer. </p>
        pub fn set_transfer_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.transfer_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StartFileTransferOutput`](crate::output::StartFileTransferOutput).
        pub fn build(self) -> crate::output::StartFileTransferOutput {
            crate::output::StartFileTransferOutput {
                transfer_id: self.transfer_id,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SendWorkflowStepStateOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for SendWorkflowStepStateOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl SendWorkflowStepStateOutput {
    /// Creates a new builder-style object to manufacture [`SendWorkflowStepStateOutput`](crate::output::SendWorkflowStepStateOutput).
    pub fn builder() -> crate::output::send_workflow_step_state_output::Builder {
        crate::output::send_workflow_step_state_output::Builder::default()
    }
}

/// See [`SendWorkflowStepStateOutput`](crate::output::SendWorkflowStepStateOutput).
pub mod send_workflow_step_state_output {

    /// A builder for [`SendWorkflowStepStateOutput`](crate::output::SendWorkflowStepStateOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`SendWorkflowStepStateOutput`](crate::output::SendWorkflowStepStateOutput).
        pub fn build(self) -> crate::output::SendWorkflowStepStateOutput {
            crate::output::SendWorkflowStepStateOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListWorkflowsOutput {
    /// <p> <code>ListWorkflows</code> returns the <code>NextToken</code> parameter in the output. You can then pass the <code>NextToken</code> parameter in a subsequent command to continue listing additional workflows.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Returns the <code>Arn</code>, <code>WorkflowId</code>, and <code>Description</code> for each workflow.</p>
    #[doc(hidden)]
    pub workflows: std::option::Option<std::vec::Vec<crate::model::ListedWorkflow>>,
    _request_id: Option<String>,
}
impl ListWorkflowsOutput {
    /// <p> <code>ListWorkflows</code> returns the <code>NextToken</code> parameter in the output. You can then pass the <code>NextToken</code> parameter in a subsequent command to continue listing additional workflows.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Returns the <code>Arn</code>, <code>WorkflowId</code>, and <code>Description</code> for each workflow.</p>
    pub fn workflows(&self) -> std::option::Option<&[crate::model::ListedWorkflow]> {
        self.workflows.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListWorkflowsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListWorkflowsOutput {
    /// Creates a new builder-style object to manufacture [`ListWorkflowsOutput`](crate::output::ListWorkflowsOutput).
    pub fn builder() -> crate::output::list_workflows_output::Builder {
        crate::output::list_workflows_output::Builder::default()
    }
}

/// See [`ListWorkflowsOutput`](crate::output::ListWorkflowsOutput).
pub mod list_workflows_output {

    /// A builder for [`ListWorkflowsOutput`](crate::output::ListWorkflowsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) workflows: std::option::Option<std::vec::Vec<crate::model::ListedWorkflow>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> <code>ListWorkflows</code> returns the <code>NextToken</code> parameter in the output. You can then pass the <code>NextToken</code> parameter in a subsequent command to continue listing additional workflows.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p> <code>ListWorkflows</code> returns the <code>NextToken</code> parameter in the output. You can then pass the <code>NextToken</code> parameter in a subsequent command to continue listing additional workflows.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `workflows`.
        ///
        /// To override the contents of this collection use [`set_workflows`](Self::set_workflows).
        ///
        /// <p>Returns the <code>Arn</code>, <code>WorkflowId</code>, and <code>Description</code> for each workflow.</p>
        pub fn workflows(mut self, input: crate::model::ListedWorkflow) -> Self {
            let mut v = self.workflows.unwrap_or_default();
            v.push(input);
            self.workflows = Some(v);
            self
        }
        /// <p>Returns the <code>Arn</code>, <code>WorkflowId</code>, and <code>Description</code> for each workflow.</p>
        pub fn set_workflows(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ListedWorkflow>>,
        ) -> Self {
            self.workflows = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListWorkflowsOutput`](crate::output::ListWorkflowsOutput).
        pub fn build(self) -> crate::output::ListWorkflowsOutput {
            crate::output::ListWorkflowsOutput {
                next_token: self.next_token,
                workflows: self.workflows,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListUsersOutput {
    /// <p>When you can get additional results from the <code>ListUsers</code> call, a <code>NextToken</code> parameter is returned in the output. You can then pass in a subsequent command to the <code>NextToken</code> parameter to continue listing additional users.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>A system-assigned unique identifier for a server that the users are assigned to.</p>
    #[doc(hidden)]
    pub server_id: std::option::Option<std::string::String>,
    /// <p>Returns the user accounts and their properties for the <code>ServerId</code> value that you specify.</p>
    #[doc(hidden)]
    pub users: std::option::Option<std::vec::Vec<crate::model::ListedUser>>,
    _request_id: Option<String>,
}
impl ListUsersOutput {
    /// <p>When you can get additional results from the <code>ListUsers</code> call, a <code>NextToken</code> parameter is returned in the output. You can then pass in a subsequent command to the <code>NextToken</code> parameter to continue listing additional users.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>A system-assigned unique identifier for a server that the users are assigned to.</p>
    pub fn server_id(&self) -> std::option::Option<&str> {
        self.server_id.as_deref()
    }
    /// <p>Returns the user accounts and their properties for the <code>ServerId</code> value that you specify.</p>
    pub fn users(&self) -> std::option::Option<&[crate::model::ListedUser]> {
        self.users.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListUsersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListUsersOutput {
    /// Creates a new builder-style object to manufacture [`ListUsersOutput`](crate::output::ListUsersOutput).
    pub fn builder() -> crate::output::list_users_output::Builder {
        crate::output::list_users_output::Builder::default()
    }
}

/// See [`ListUsersOutput`](crate::output::ListUsersOutput).
pub mod list_users_output {

    /// A builder for [`ListUsersOutput`](crate::output::ListUsersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) server_id: std::option::Option<std::string::String>,
        pub(crate) users: std::option::Option<std::vec::Vec<crate::model::ListedUser>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>When you can get additional results from the <code>ListUsers</code> call, a <code>NextToken</code> parameter is returned in the output. You can then pass in a subsequent command to the <code>NextToken</code> parameter to continue listing additional users.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>When you can get additional results from the <code>ListUsers</code> call, a <code>NextToken</code> parameter is returned in the output. You can then pass in a subsequent command to the <code>NextToken</code> parameter to continue listing additional users.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// <p>A system-assigned unique identifier for a server that the users are assigned to.</p>
        pub fn server_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.server_id = Some(input.into());
            self
        }
        /// <p>A system-assigned unique identifier for a server that the users are assigned to.</p>
        pub fn set_server_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.server_id = input;
            self
        }
        /// Appends an item to `users`.
        ///
        /// To override the contents of this collection use [`set_users`](Self::set_users).
        ///
        /// <p>Returns the user accounts and their properties for the <code>ServerId</code> value that you specify.</p>
        pub fn users(mut self, input: crate::model::ListedUser) -> Self {
            let mut v = self.users.unwrap_or_default();
            v.push(input);
            self.users = Some(v);
            self
        }
        /// <p>Returns the user accounts and their properties for the <code>ServerId</code> value that you specify.</p>
        pub fn set_users(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ListedUser>>,
        ) -> Self {
            self.users = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListUsersOutput`](crate::output::ListUsersOutput).
        pub fn build(self) -> crate::output::ListUsersOutput {
            crate::output::ListUsersOutput {
                next_token: self.next_token,
                server_id: self.server_id,
                users: self.users,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTagsForResourceOutput {
    /// <p>The ARN you specified to list the tags of.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>When you can get additional results from the <code>ListTagsForResource</code> call, a <code>NextToken</code> parameter is returned in the output. You can then pass in a subsequent command to the <code>NextToken</code> parameter to continue listing additional tags.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Key-value pairs that are assigned to a resource, usually for the purpose of grouping and searching for items. Tags are metadata that you define.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    _request_id: Option<String>,
}
impl ListTagsForResourceOutput {
    /// <p>The ARN you specified to list the tags of.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>When you can get additional results from the <code>ListTagsForResource</code> call, a <code>NextToken</code> parameter is returned in the output. You can then pass in a subsequent command to the <code>NextToken</code> parameter to continue listing additional tags.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Key-value pairs that are assigned to a resource, usually for the purpose of grouping and searching for items. Tags are metadata that you define.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::model::Tag]> {
        self.tags.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListTagsForResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
pub mod list_tags_for_resource_output {

    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ARN you specified to list the tags of.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The ARN you specified to list the tags of.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>When you can get additional results from the <code>ListTagsForResource</code> call, a <code>NextToken</code> parameter is returned in the output. You can then pass in a subsequent command to the <code>NextToken</code> parameter to continue listing additional tags.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>When you can get additional results from the <code>ListTagsForResource</code> call, a <code>NextToken</code> parameter is returned in the output. You can then pass in a subsequent command to the <code>NextToken</code> parameter to continue listing additional tags.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>Key-value pairs that are assigned to a resource, usually for the purpose of grouping and searching for items. Tags are metadata that you define.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input);
            self.tags = Some(v);
            self
        }
        /// <p>Key-value pairs that are assigned to a resource, usually for the purpose of grouping and searching for items. Tags are metadata that you define.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput {
                arn: self.arn,
                next_token: self.next_token,
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListServersOutput {
    /// <p>When you can get additional results from the <code>ListServers</code> operation, a <code>NextToken</code> parameter is returned in the output. In a following command, you can pass in the <code>NextToken</code> parameter to continue listing additional servers.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>An array of servers that were listed.</p>
    #[doc(hidden)]
    pub servers: std::option::Option<std::vec::Vec<crate::model::ListedServer>>,
    _request_id: Option<String>,
}
impl ListServersOutput {
    /// <p>When you can get additional results from the <code>ListServers</code> operation, a <code>NextToken</code> parameter is returned in the output. In a following command, you can pass in the <code>NextToken</code> parameter to continue listing additional servers.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>An array of servers that were listed.</p>
    pub fn servers(&self) -> std::option::Option<&[crate::model::ListedServer]> {
        self.servers.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListServersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListServersOutput {
    /// Creates a new builder-style object to manufacture [`ListServersOutput`](crate::output::ListServersOutput).
    pub fn builder() -> crate::output::list_servers_output::Builder {
        crate::output::list_servers_output::Builder::default()
    }
}

/// See [`ListServersOutput`](crate::output::ListServersOutput).
pub mod list_servers_output {

    /// A builder for [`ListServersOutput`](crate::output::ListServersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) servers: std::option::Option<std::vec::Vec<crate::model::ListedServer>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>When you can get additional results from the <code>ListServers</code> operation, a <code>NextToken</code> parameter is returned in the output. In a following command, you can pass in the <code>NextToken</code> parameter to continue listing additional servers.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>When you can get additional results from the <code>ListServers</code> operation, a <code>NextToken</code> parameter is returned in the output. In a following command, you can pass in the <code>NextToken</code> parameter to continue listing additional servers.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `servers`.
        ///
        /// To override the contents of this collection use [`set_servers`](Self::set_servers).
        ///
        /// <p>An array of servers that were listed.</p>
        pub fn servers(mut self, input: crate::model::ListedServer) -> Self {
            let mut v = self.servers.unwrap_or_default();
            v.push(input);
            self.servers = Some(v);
            self
        }
        /// <p>An array of servers that were listed.</p>
        pub fn set_servers(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ListedServer>>,
        ) -> Self {
            self.servers = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListServersOutput`](crate::output::ListServersOutput).
        pub fn build(self) -> crate::output::ListServersOutput {
            crate::output::ListServersOutput {
                next_token: self.next_token,
                servers: self.servers,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListSecurityPoliciesOutput {
    /// <p>When you can get additional results from the <code>ListSecurityPolicies</code> operation, a <code>NextToken</code> parameter is returned in the output. In a following command, you can pass in the <code>NextToken</code> parameter to continue listing security policies.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>An array of security policies that were listed.</p>
    #[doc(hidden)]
    pub security_policy_names: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl ListSecurityPoliciesOutput {
    /// <p>When you can get additional results from the <code>ListSecurityPolicies</code> operation, a <code>NextToken</code> parameter is returned in the output. In a following command, you can pass in the <code>NextToken</code> parameter to continue listing security policies.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>An array of security policies that were listed.</p>
    pub fn security_policy_names(&self) -> std::option::Option<&[std::string::String]> {
        self.security_policy_names.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListSecurityPoliciesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListSecurityPoliciesOutput {
    /// Creates a new builder-style object to manufacture [`ListSecurityPoliciesOutput`](crate::output::ListSecurityPoliciesOutput).
    pub fn builder() -> crate::output::list_security_policies_output::Builder {
        crate::output::list_security_policies_output::Builder::default()
    }
}

/// See [`ListSecurityPoliciesOutput`](crate::output::ListSecurityPoliciesOutput).
pub mod list_security_policies_output {

    /// A builder for [`ListSecurityPoliciesOutput`](crate::output::ListSecurityPoliciesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) security_policy_names: std::option::Option<std::vec::Vec<std::string::String>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>When you can get additional results from the <code>ListSecurityPolicies</code> operation, a <code>NextToken</code> parameter is returned in the output. In a following command, you can pass in the <code>NextToken</code> parameter to continue listing security policies.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>When you can get additional results from the <code>ListSecurityPolicies</code> operation, a <code>NextToken</code> parameter is returned in the output. In a following command, you can pass in the <code>NextToken</code> parameter to continue listing security policies.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `security_policy_names`.
        ///
        /// To override the contents of this collection use [`set_security_policy_names`](Self::set_security_policy_names).
        ///
        /// <p>An array of security policies that were listed.</p>
        pub fn security_policy_names(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.security_policy_names.unwrap_or_default();
            v.push(input.into());
            self.security_policy_names = Some(v);
            self
        }
        /// <p>An array of security policies that were listed.</p>
        pub fn set_security_policy_names(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.security_policy_names = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListSecurityPoliciesOutput`](crate::output::ListSecurityPoliciesOutput).
        pub fn build(self) -> crate::output::ListSecurityPoliciesOutput {
            crate::output::ListSecurityPoliciesOutput {
                next_token: self.next_token,
                security_policy_names: self.security_policy_names,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListProfilesOutput {
    /// <p>Returns a token that you can use to call <code>ListProfiles</code> again and receive additional results, if there are any.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Returns an array, where each item contains the details of a profile.</p>
    #[doc(hidden)]
    pub profiles: std::option::Option<std::vec::Vec<crate::model::ListedProfile>>,
    _request_id: Option<String>,
}
impl ListProfilesOutput {
    /// <p>Returns a token that you can use to call <code>ListProfiles</code> again and receive additional results, if there are any.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Returns an array, where each item contains the details of a profile.</p>
    pub fn profiles(&self) -> std::option::Option<&[crate::model::ListedProfile]> {
        self.profiles.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListProfilesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListProfilesOutput {
    /// Creates a new builder-style object to manufacture [`ListProfilesOutput`](crate::output::ListProfilesOutput).
    pub fn builder() -> crate::output::list_profiles_output::Builder {
        crate::output::list_profiles_output::Builder::default()
    }
}

/// See [`ListProfilesOutput`](crate::output::ListProfilesOutput).
pub mod list_profiles_output {

    /// A builder for [`ListProfilesOutput`](crate::output::ListProfilesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) profiles: std::option::Option<std::vec::Vec<crate::model::ListedProfile>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns a token that you can use to call <code>ListProfiles</code> again and receive additional results, if there are any.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>Returns a token that you can use to call <code>ListProfiles</code> again and receive additional results, if there are any.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `profiles`.
        ///
        /// To override the contents of this collection use [`set_profiles`](Self::set_profiles).
        ///
        /// <p>Returns an array, where each item contains the details of a profile.</p>
        pub fn profiles(mut self, input: crate::model::ListedProfile) -> Self {
            let mut v = self.profiles.unwrap_or_default();
            v.push(input);
            self.profiles = Some(v);
            self
        }
        /// <p>Returns an array, where each item contains the details of a profile.</p>
        pub fn set_profiles(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ListedProfile>>,
        ) -> Self {
            self.profiles = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListProfilesOutput`](crate::output::ListProfilesOutput).
        pub fn build(self) -> crate::output::ListProfilesOutput {
            crate::output::ListProfilesOutput {
                next_token: self.next_token,
                profiles: self.profiles,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListHostKeysOutput {
    /// <p>Returns a token that you can use to call <code>ListHostKeys</code> again and receive additional results, if there are any.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Returns the server identifier that contains the listed host keys.</p>
    #[doc(hidden)]
    pub server_id: std::option::Option<std::string::String>,
    /// <p>Returns an array, where each item contains the details of a host key.</p>
    #[doc(hidden)]
    pub host_keys: std::option::Option<std::vec::Vec<crate::model::ListedHostKey>>,
    _request_id: Option<String>,
}
impl ListHostKeysOutput {
    /// <p>Returns a token that you can use to call <code>ListHostKeys</code> again and receive additional results, if there are any.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Returns the server identifier that contains the listed host keys.</p>
    pub fn server_id(&self) -> std::option::Option<&str> {
        self.server_id.as_deref()
    }
    /// <p>Returns an array, where each item contains the details of a host key.</p>
    pub fn host_keys(&self) -> std::option::Option<&[crate::model::ListedHostKey]> {
        self.host_keys.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListHostKeysOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListHostKeysOutput {
    /// Creates a new builder-style object to manufacture [`ListHostKeysOutput`](crate::output::ListHostKeysOutput).
    pub fn builder() -> crate::output::list_host_keys_output::Builder {
        crate::output::list_host_keys_output::Builder::default()
    }
}

/// See [`ListHostKeysOutput`](crate::output::ListHostKeysOutput).
pub mod list_host_keys_output {

    /// A builder for [`ListHostKeysOutput`](crate::output::ListHostKeysOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) server_id: std::option::Option<std::string::String>,
        pub(crate) host_keys: std::option::Option<std::vec::Vec<crate::model::ListedHostKey>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns a token that you can use to call <code>ListHostKeys</code> again and receive additional results, if there are any.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>Returns a token that you can use to call <code>ListHostKeys</code> again and receive additional results, if there are any.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// <p>Returns the server identifier that contains the listed host keys.</p>
        pub fn server_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.server_id = Some(input.into());
            self
        }
        /// <p>Returns the server identifier that contains the listed host keys.</p>
        pub fn set_server_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.server_id = input;
            self
        }
        /// Appends an item to `host_keys`.
        ///
        /// To override the contents of this collection use [`set_host_keys`](Self::set_host_keys).
        ///
        /// <p>Returns an array, where each item contains the details of a host key.</p>
        pub fn host_keys(mut self, input: crate::model::ListedHostKey) -> Self {
            let mut v = self.host_keys.unwrap_or_default();
            v.push(input);
            self.host_keys = Some(v);
            self
        }
        /// <p>Returns an array, where each item contains the details of a host key.</p>
        pub fn set_host_keys(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ListedHostKey>>,
        ) -> Self {
            self.host_keys = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListHostKeysOutput`](crate::output::ListHostKeysOutput).
        pub fn build(self) -> crate::output::ListHostKeysOutput {
            crate::output::ListHostKeysOutput {
                next_token: self.next_token,
                server_id: self.server_id,
                host_keys: self.host_keys,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListExecutionsOutput {
    /// <p> <code>ListExecutions</code> returns the <code>NextToken</code> parameter in the output. You can then pass the <code>NextToken</code> parameter in a subsequent command to continue listing additional executions.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>A unique identifier for the workflow.</p>
    #[doc(hidden)]
    pub workflow_id: std::option::Option<std::string::String>,
    /// <p>Returns the details for each execution.</p>
    /// <ul>
    /// <li> <p> <b>NextToken</b>: returned from a call to several APIs, you can use pass it to a subsequent command to continue listing additional executions.</p> </li>
    /// <li> <p> <b>StartTime</b>: timestamp indicating when the execution began.</p> </li>
    /// <li> <p> <b>Executions</b>: details of the execution, including the execution ID, initial file location, and Service metadata.</p> </li>
    /// <li> <p> <b>Status</b>: one of the following values: <code>IN_PROGRESS</code>, <code>COMPLETED</code>, <code>EXCEPTION</code>, <code>HANDLING_EXEPTION</code>. </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub executions: std::option::Option<std::vec::Vec<crate::model::ListedExecution>>,
    _request_id: Option<String>,
}
impl ListExecutionsOutput {
    /// <p> <code>ListExecutions</code> returns the <code>NextToken</code> parameter in the output. You can then pass the <code>NextToken</code> parameter in a subsequent command to continue listing additional executions.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>A unique identifier for the workflow.</p>
    pub fn workflow_id(&self) -> std::option::Option<&str> {
        self.workflow_id.as_deref()
    }
    /// <p>Returns the details for each execution.</p>
    /// <ul>
    /// <li> <p> <b>NextToken</b>: returned from a call to several APIs, you can use pass it to a subsequent command to continue listing additional executions.</p> </li>
    /// <li> <p> <b>StartTime</b>: timestamp indicating when the execution began.</p> </li>
    /// <li> <p> <b>Executions</b>: details of the execution, including the execution ID, initial file location, and Service metadata.</p> </li>
    /// <li> <p> <b>Status</b>: one of the following values: <code>IN_PROGRESS</code>, <code>COMPLETED</code>, <code>EXCEPTION</code>, <code>HANDLING_EXEPTION</code>. </p> </li>
    /// </ul>
    pub fn executions(&self) -> std::option::Option<&[crate::model::ListedExecution]> {
        self.executions.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListExecutionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListExecutionsOutput {
    /// Creates a new builder-style object to manufacture [`ListExecutionsOutput`](crate::output::ListExecutionsOutput).
    pub fn builder() -> crate::output::list_executions_output::Builder {
        crate::output::list_executions_output::Builder::default()
    }
}

/// See [`ListExecutionsOutput`](crate::output::ListExecutionsOutput).
pub mod list_executions_output {

    /// A builder for [`ListExecutionsOutput`](crate::output::ListExecutionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) workflow_id: std::option::Option<std::string::String>,
        pub(crate) executions: std::option::Option<std::vec::Vec<crate::model::ListedExecution>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> <code>ListExecutions</code> returns the <code>NextToken</code> parameter in the output. You can then pass the <code>NextToken</code> parameter in a subsequent command to continue listing additional executions.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p> <code>ListExecutions</code> returns the <code>NextToken</code> parameter in the output. You can then pass the <code>NextToken</code> parameter in a subsequent command to continue listing additional executions.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// <p>A unique identifier for the workflow.</p>
        pub fn workflow_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.workflow_id = Some(input.into());
            self
        }
        /// <p>A unique identifier for the workflow.</p>
        pub fn set_workflow_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.workflow_id = input;
            self
        }
        /// Appends an item to `executions`.
        ///
        /// To override the contents of this collection use [`set_executions`](Self::set_executions).
        ///
        /// <p>Returns the details for each execution.</p>
        /// <ul>
        /// <li> <p> <b>NextToken</b>: returned from a call to several APIs, you can use pass it to a subsequent command to continue listing additional executions.</p> </li>
        /// <li> <p> <b>StartTime</b>: timestamp indicating when the execution began.</p> </li>
        /// <li> <p> <b>Executions</b>: details of the execution, including the execution ID, initial file location, and Service metadata.</p> </li>
        /// <li> <p> <b>Status</b>: one of the following values: <code>IN_PROGRESS</code>, <code>COMPLETED</code>, <code>EXCEPTION</code>, <code>HANDLING_EXEPTION</code>. </p> </li>
        /// </ul>
        pub fn executions(mut self, input: crate::model::ListedExecution) -> Self {
            let mut v = self.executions.unwrap_or_default();
            v.push(input);
            self.executions = Some(v);
            self
        }
        /// <p>Returns the details for each execution.</p>
        /// <ul>
        /// <li> <p> <b>NextToken</b>: returned from a call to several APIs, you can use pass it to a subsequent command to continue listing additional executions.</p> </li>
        /// <li> <p> <b>StartTime</b>: timestamp indicating when the execution began.</p> </li>
        /// <li> <p> <b>Executions</b>: details of the execution, including the execution ID, initial file location, and Service metadata.</p> </li>
        /// <li> <p> <b>Status</b>: one of the following values: <code>IN_PROGRESS</code>, <code>COMPLETED</code>, <code>EXCEPTION</code>, <code>HANDLING_EXEPTION</code>. </p> </li>
        /// </ul>
        pub fn set_executions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ListedExecution>>,
        ) -> Self {
            self.executions = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListExecutionsOutput`](crate::output::ListExecutionsOutput).
        pub fn build(self) -> crate::output::ListExecutionsOutput {
            crate::output::ListExecutionsOutput {
                next_token: self.next_token,
                workflow_id: self.workflow_id,
                executions: self.executions,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListConnectorsOutput {
    /// <p>Returns a token that you can use to call <code>ListConnectors</code> again and receive additional results, if there are any.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Returns an array, where each item contains the details of a connector.</p>
    #[doc(hidden)]
    pub connectors: std::option::Option<std::vec::Vec<crate::model::ListedConnector>>,
    _request_id: Option<String>,
}
impl ListConnectorsOutput {
    /// <p>Returns a token that you can use to call <code>ListConnectors</code> again and receive additional results, if there are any.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Returns an array, where each item contains the details of a connector.</p>
    pub fn connectors(&self) -> std::option::Option<&[crate::model::ListedConnector]> {
        self.connectors.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListConnectorsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListConnectorsOutput {
    /// Creates a new builder-style object to manufacture [`ListConnectorsOutput`](crate::output::ListConnectorsOutput).
    pub fn builder() -> crate::output::list_connectors_output::Builder {
        crate::output::list_connectors_output::Builder::default()
    }
}

/// See [`ListConnectorsOutput`](crate::output::ListConnectorsOutput).
pub mod list_connectors_output {

    /// A builder for [`ListConnectorsOutput`](crate::output::ListConnectorsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) connectors: std::option::Option<std::vec::Vec<crate::model::ListedConnector>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns a token that you can use to call <code>ListConnectors</code> again and receive additional results, if there are any.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>Returns a token that you can use to call <code>ListConnectors</code> again and receive additional results, if there are any.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `connectors`.
        ///
        /// To override the contents of this collection use [`set_connectors`](Self::set_connectors).
        ///
        /// <p>Returns an array, where each item contains the details of a connector.</p>
        pub fn connectors(mut self, input: crate::model::ListedConnector) -> Self {
            let mut v = self.connectors.unwrap_or_default();
            v.push(input);
            self.connectors = Some(v);
            self
        }
        /// <p>Returns an array, where each item contains the details of a connector.</p>
        pub fn set_connectors(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ListedConnector>>,
        ) -> Self {
            self.connectors = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListConnectorsOutput`](crate::output::ListConnectorsOutput).
        pub fn build(self) -> crate::output::ListConnectorsOutput {
            crate::output::ListConnectorsOutput {
                next_token: self.next_token,
                connectors: self.connectors,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListCertificatesOutput {
    /// <p>Returns the next token, which you can use to list the next certificate.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Returns an array of the certificates that are specified in the <code>ListCertificates</code> call.</p>
    #[doc(hidden)]
    pub certificates: std::option::Option<std::vec::Vec<crate::model::ListedCertificate>>,
    _request_id: Option<String>,
}
impl ListCertificatesOutput {
    /// <p>Returns the next token, which you can use to list the next certificate.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Returns an array of the certificates that are specified in the <code>ListCertificates</code> call.</p>
    pub fn certificates(&self) -> std::option::Option<&[crate::model::ListedCertificate]> {
        self.certificates.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListCertificatesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListCertificatesOutput {
    /// Creates a new builder-style object to manufacture [`ListCertificatesOutput`](crate::output::ListCertificatesOutput).
    pub fn builder() -> crate::output::list_certificates_output::Builder {
        crate::output::list_certificates_output::Builder::default()
    }
}

/// See [`ListCertificatesOutput`](crate::output::ListCertificatesOutput).
pub mod list_certificates_output {

    /// A builder for [`ListCertificatesOutput`](crate::output::ListCertificatesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) certificates:
            std::option::Option<std::vec::Vec<crate::model::ListedCertificate>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns the next token, which you can use to list the next certificate.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>Returns the next token, which you can use to list the next certificate.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `certificates`.
        ///
        /// To override the contents of this collection use [`set_certificates`](Self::set_certificates).
        ///
        /// <p>Returns an array of the certificates that are specified in the <code>ListCertificates</code> call.</p>
        pub fn certificates(mut self, input: crate::model::ListedCertificate) -> Self {
            let mut v = self.certificates.unwrap_or_default();
            v.push(input);
            self.certificates = Some(v);
            self
        }
        /// <p>Returns an array of the certificates that are specified in the <code>ListCertificates</code> call.</p>
        pub fn set_certificates(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ListedCertificate>>,
        ) -> Self {
            self.certificates = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListCertificatesOutput`](crate::output::ListCertificatesOutput).
        pub fn build(self) -> crate::output::ListCertificatesOutput {
            crate::output::ListCertificatesOutput {
                next_token: self.next_token,
                certificates: self.certificates,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListAgreementsOutput {
    /// <p>Returns a token that you can use to call <code>ListAgreements</code> again and receive additional results, if there are any.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Returns an array, where each item contains the details of an agreement.</p>
    #[doc(hidden)]
    pub agreements: std::option::Option<std::vec::Vec<crate::model::ListedAgreement>>,
    _request_id: Option<String>,
}
impl ListAgreementsOutput {
    /// <p>Returns a token that you can use to call <code>ListAgreements</code> again and receive additional results, if there are any.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Returns an array, where each item contains the details of an agreement.</p>
    pub fn agreements(&self) -> std::option::Option<&[crate::model::ListedAgreement]> {
        self.agreements.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListAgreementsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListAgreementsOutput {
    /// Creates a new builder-style object to manufacture [`ListAgreementsOutput`](crate::output::ListAgreementsOutput).
    pub fn builder() -> crate::output::list_agreements_output::Builder {
        crate::output::list_agreements_output::Builder::default()
    }
}

/// See [`ListAgreementsOutput`](crate::output::ListAgreementsOutput).
pub mod list_agreements_output {

    /// A builder for [`ListAgreementsOutput`](crate::output::ListAgreementsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) agreements: std::option::Option<std::vec::Vec<crate::model::ListedAgreement>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns a token that you can use to call <code>ListAgreements</code> again and receive additional results, if there are any.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>Returns a token that you can use to call <code>ListAgreements</code> again and receive additional results, if there are any.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `agreements`.
        ///
        /// To override the contents of this collection use [`set_agreements`](Self::set_agreements).
        ///
        /// <p>Returns an array, where each item contains the details of an agreement.</p>
        pub fn agreements(mut self, input: crate::model::ListedAgreement) -> Self {
            let mut v = self.agreements.unwrap_or_default();
            v.push(input);
            self.agreements = Some(v);
            self
        }
        /// <p>Returns an array, where each item contains the details of an agreement.</p>
        pub fn set_agreements(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ListedAgreement>>,
        ) -> Self {
            self.agreements = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListAgreementsOutput`](crate::output::ListAgreementsOutput).
        pub fn build(self) -> crate::output::ListAgreementsOutput {
            crate::output::ListAgreementsOutput {
                next_token: self.next_token,
                agreements: self.agreements,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListAccessesOutput {
    /// <p>When you can get additional results from the <code>ListAccesses</code> call, a <code>NextToken</code> parameter is returned in the output. You can then pass in a subsequent command to the <code>NextToken</code> parameter to continue listing additional accesses.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>A system-assigned unique identifier for a server that has users assigned to it.</p>
    #[doc(hidden)]
    pub server_id: std::option::Option<std::string::String>,
    /// <p>Returns the accesses and their properties for the <code>ServerId</code> value that you specify.</p>
    #[doc(hidden)]
    pub accesses: std::option::Option<std::vec::Vec<crate::model::ListedAccess>>,
    _request_id: Option<String>,
}
impl ListAccessesOutput {
    /// <p>When you can get additional results from the <code>ListAccesses</code> call, a <code>NextToken</code> parameter is returned in the output. You can then pass in a subsequent command to the <code>NextToken</code> parameter to continue listing additional accesses.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>A system-assigned unique identifier for a server that has users assigned to it.</p>
    pub fn server_id(&self) -> std::option::Option<&str> {
        self.server_id.as_deref()
    }
    /// <p>Returns the accesses and their properties for the <code>ServerId</code> value that you specify.</p>
    pub fn accesses(&self) -> std::option::Option<&[crate::model::ListedAccess]> {
        self.accesses.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListAccessesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListAccessesOutput {
    /// Creates a new builder-style object to manufacture [`ListAccessesOutput`](crate::output::ListAccessesOutput).
    pub fn builder() -> crate::output::list_accesses_output::Builder {
        crate::output::list_accesses_output::Builder::default()
    }
}

/// See [`ListAccessesOutput`](crate::output::ListAccessesOutput).
pub mod list_accesses_output {

    /// A builder for [`ListAccessesOutput`](crate::output::ListAccessesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) server_id: std::option::Option<std::string::String>,
        pub(crate) accesses: std::option::Option<std::vec::Vec<crate::model::ListedAccess>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>When you can get additional results from the <code>ListAccesses</code> call, a <code>NextToken</code> parameter is returned in the output. You can then pass in a subsequent command to the <code>NextToken</code> parameter to continue listing additional accesses.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>When you can get additional results from the <code>ListAccesses</code> call, a <code>NextToken</code> parameter is returned in the output. You can then pass in a subsequent command to the <code>NextToken</code> parameter to continue listing additional accesses.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// <p>A system-assigned unique identifier for a server that has users assigned to it.</p>
        pub fn server_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.server_id = Some(input.into());
            self
        }
        /// <p>A system-assigned unique identifier for a server that has users assigned to it.</p>
        pub fn set_server_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.server_id = input;
            self
        }
        /// Appends an item to `accesses`.
        ///
        /// To override the contents of this collection use [`set_accesses`](Self::set_accesses).
        ///
        /// <p>Returns the accesses and their properties for the <code>ServerId</code> value that you specify.</p>
        pub fn accesses(mut self, input: crate::model::ListedAccess) -> Self {
            let mut v = self.accesses.unwrap_or_default();
            v.push(input);
            self.accesses = Some(v);
            self
        }
        /// <p>Returns the accesses and their properties for the <code>ServerId</code> value that you specify.</p>
        pub fn set_accesses(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ListedAccess>>,
        ) -> Self {
            self.accesses = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListAccessesOutput`](crate::output::ListAccessesOutput).
        pub fn build(self) -> crate::output::ListAccessesOutput {
            crate::output::ListAccessesOutput {
                next_token: self.next_token,
                server_id: self.server_id,
                accesses: self.accesses,
                _request_id: self._request_id,
            }
        }
    }
}

/// <p>Identifies the user, the server they belong to, and the identifier of the SSH public key associated with that user. A user can have more than one key on each server that they are associated with.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ImportSshPublicKeyOutput {
    /// <p>A system-assigned unique identifier for a server.</p>
    #[doc(hidden)]
    pub server_id: std::option::Option<std::string::String>,
    /// <p>The name given to a public key by the system that was imported.</p>
    #[doc(hidden)]
    pub ssh_public_key_id: std::option::Option<std::string::String>,
    /// <p>A user name assigned to the <code>ServerID</code> value that you specified.</p>
    #[doc(hidden)]
    pub user_name: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ImportSshPublicKeyOutput {
    /// <p>A system-assigned unique identifier for a server.</p>
    pub fn server_id(&self) -> std::option::Option<&str> {
        self.server_id.as_deref()
    }
    /// <p>The name given to a public key by the system that was imported.</p>
    pub fn ssh_public_key_id(&self) -> std::option::Option<&str> {
        self.ssh_public_key_id.as_deref()
    }
    /// <p>A user name assigned to the <code>ServerID</code> value that you specified.</p>
    pub fn user_name(&self) -> std::option::Option<&str> {
        self.user_name.as_deref()
    }
}
impl aws_http::request_id::RequestId for ImportSshPublicKeyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ImportSshPublicKeyOutput {
    /// Creates a new builder-style object to manufacture [`ImportSshPublicKeyOutput`](crate::output::ImportSshPublicKeyOutput).
    pub fn builder() -> crate::output::import_ssh_public_key_output::Builder {
        crate::output::import_ssh_public_key_output::Builder::default()
    }
}

/// See [`ImportSshPublicKeyOutput`](crate::output::ImportSshPublicKeyOutput).
pub mod import_ssh_public_key_output {

    /// A builder for [`ImportSshPublicKeyOutput`](crate::output::ImportSshPublicKeyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) server_id: std::option::Option<std::string::String>,
        pub(crate) ssh_public_key_id: std::option::Option<std::string::String>,
        pub(crate) user_name: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A system-assigned unique identifier for a server.</p>
        pub fn server_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.server_id = Some(input.into());
            self
        }
        /// <p>A system-assigned unique identifier for a server.</p>
        pub fn set_server_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.server_id = input;
            self
        }
        /// <p>The name given to a public key by the system that was imported.</p>
        pub fn ssh_public_key_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.ssh_public_key_id = Some(input.into());
            self
        }
        /// <p>The name given to a public key by the system that was imported.</p>
        pub fn set_ssh_public_key_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.ssh_public_key_id = input;
            self
        }
        /// <p>A user name assigned to the <code>ServerID</code> value that you specified.</p>
        pub fn user_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.user_name = Some(input.into());
            self
        }
        /// <p>A user name assigned to the <code>ServerID</code> value that you specified.</p>
        pub fn set_user_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.user_name = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ImportSshPublicKeyOutput`](crate::output::ImportSshPublicKeyOutput).
        pub fn build(self) -> crate::output::ImportSshPublicKeyOutput {
            crate::output::ImportSshPublicKeyOutput {
                server_id: self.server_id,
                ssh_public_key_id: self.ssh_public_key_id,
                user_name: self.user_name,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ImportHostKeyOutput {
    /// <p>Returns the server identifier that contains the imported key.</p>
    #[doc(hidden)]
    pub server_id: std::option::Option<std::string::String>,
    /// <p>Returns the host key identifier for the imported key.</p>
    #[doc(hidden)]
    pub host_key_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ImportHostKeyOutput {
    /// <p>Returns the server identifier that contains the imported key.</p>
    pub fn server_id(&self) -> std::option::Option<&str> {
        self.server_id.as_deref()
    }
    /// <p>Returns the host key identifier for the imported key.</p>
    pub fn host_key_id(&self) -> std::option::Option<&str> {
        self.host_key_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for ImportHostKeyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ImportHostKeyOutput {
    /// Creates a new builder-style object to manufacture [`ImportHostKeyOutput`](crate::output::ImportHostKeyOutput).
    pub fn builder() -> crate::output::import_host_key_output::Builder {
        crate::output::import_host_key_output::Builder::default()
    }
}

/// See [`ImportHostKeyOutput`](crate::output::ImportHostKeyOutput).
pub mod import_host_key_output {

    /// A builder for [`ImportHostKeyOutput`](crate::output::ImportHostKeyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) server_id: std::option::Option<std::string::String>,
        pub(crate) host_key_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns the server identifier that contains the imported key.</p>
        pub fn server_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.server_id = Some(input.into());
            self
        }
        /// <p>Returns the server identifier that contains the imported key.</p>
        pub fn set_server_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.server_id = input;
            self
        }
        /// <p>Returns the host key identifier for the imported key.</p>
        pub fn host_key_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.host_key_id = Some(input.into());
            self
        }
        /// <p>Returns the host key identifier for the imported key.</p>
        pub fn set_host_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.host_key_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ImportHostKeyOutput`](crate::output::ImportHostKeyOutput).
        pub fn build(self) -> crate::output::ImportHostKeyOutput {
            crate::output::ImportHostKeyOutput {
                server_id: self.server_id,
                host_key_id: self.host_key_id,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ImportCertificateOutput {
    /// <p>An array of identifiers for the imported certificates. You use this identifier for working with profiles and partner profiles.</p>
    #[doc(hidden)]
    pub certificate_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ImportCertificateOutput {
    /// <p>An array of identifiers for the imported certificates. You use this identifier for working with profiles and partner profiles.</p>
    pub fn certificate_id(&self) -> std::option::Option<&str> {
        self.certificate_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for ImportCertificateOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ImportCertificateOutput {
    /// Creates a new builder-style object to manufacture [`ImportCertificateOutput`](crate::output::ImportCertificateOutput).
    pub fn builder() -> crate::output::import_certificate_output::Builder {
        crate::output::import_certificate_output::Builder::default()
    }
}

/// See [`ImportCertificateOutput`](crate::output::ImportCertificateOutput).
pub mod import_certificate_output {

    /// A builder for [`ImportCertificateOutput`](crate::output::ImportCertificateOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) certificate_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>An array of identifiers for the imported certificates. You use this identifier for working with profiles and partner profiles.</p>
        pub fn certificate_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.certificate_id = Some(input.into());
            self
        }
        /// <p>An array of identifiers for the imported certificates. You use this identifier for working with profiles and partner profiles.</p>
        pub fn set_certificate_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.certificate_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ImportCertificateOutput`](crate::output::ImportCertificateOutput).
        pub fn build(self) -> crate::output::ImportCertificateOutput {
            crate::output::ImportCertificateOutput {
                certificate_id: self.certificate_id,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeWorkflowOutput {
    /// <p>The structure that contains the details of the workflow.</p>
    #[doc(hidden)]
    pub workflow: std::option::Option<crate::model::DescribedWorkflow>,
    _request_id: Option<String>,
}
impl DescribeWorkflowOutput {
    /// <p>The structure that contains the details of the workflow.</p>
    pub fn workflow(&self) -> std::option::Option<&crate::model::DescribedWorkflow> {
        self.workflow.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeWorkflowOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeWorkflowOutput {
    /// Creates a new builder-style object to manufacture [`DescribeWorkflowOutput`](crate::output::DescribeWorkflowOutput).
    pub fn builder() -> crate::output::describe_workflow_output::Builder {
        crate::output::describe_workflow_output::Builder::default()
    }
}

/// See [`DescribeWorkflowOutput`](crate::output::DescribeWorkflowOutput).
pub mod describe_workflow_output {

    /// A builder for [`DescribeWorkflowOutput`](crate::output::DescribeWorkflowOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) workflow: std::option::Option<crate::model::DescribedWorkflow>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The structure that contains the details of the workflow.</p>
        pub fn workflow(mut self, input: crate::model::DescribedWorkflow) -> Self {
            self.workflow = Some(input);
            self
        }
        /// <p>The structure that contains the details of the workflow.</p>
        pub fn set_workflow(
            mut self,
            input: std::option::Option<crate::model::DescribedWorkflow>,
        ) -> Self {
            self.workflow = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeWorkflowOutput`](crate::output::DescribeWorkflowOutput).
        pub fn build(self) -> crate::output::DescribeWorkflowOutput {
            crate::output::DescribeWorkflowOutput {
                workflow: self.workflow,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeUserOutput {
    /// <p>A system-assigned unique identifier for a server that has this user assigned.</p>
    #[doc(hidden)]
    pub server_id: std::option::Option<std::string::String>,
    /// <p>An array containing the properties of the user account for the <code>ServerID</code> value that you specified.</p>
    #[doc(hidden)]
    pub user: std::option::Option<crate::model::DescribedUser>,
    _request_id: Option<String>,
}
impl DescribeUserOutput {
    /// <p>A system-assigned unique identifier for a server that has this user assigned.</p>
    pub fn server_id(&self) -> std::option::Option<&str> {
        self.server_id.as_deref()
    }
    /// <p>An array containing the properties of the user account for the <code>ServerID</code> value that you specified.</p>
    pub fn user(&self) -> std::option::Option<&crate::model::DescribedUser> {
        self.user.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeUserOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeUserOutput {
    /// Creates a new builder-style object to manufacture [`DescribeUserOutput`](crate::output::DescribeUserOutput).
    pub fn builder() -> crate::output::describe_user_output::Builder {
        crate::output::describe_user_output::Builder::default()
    }
}

/// See [`DescribeUserOutput`](crate::output::DescribeUserOutput).
pub mod describe_user_output {

    /// A builder for [`DescribeUserOutput`](crate::output::DescribeUserOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) server_id: std::option::Option<std::string::String>,
        pub(crate) user: std::option::Option<crate::model::DescribedUser>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A system-assigned unique identifier for a server that has this user assigned.</p>
        pub fn server_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.server_id = Some(input.into());
            self
        }
        /// <p>A system-assigned unique identifier for a server that has this user assigned.</p>
        pub fn set_server_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.server_id = input;
            self
        }
        /// <p>An array containing the properties of the user account for the <code>ServerID</code> value that you specified.</p>
        pub fn user(mut self, input: crate::model::DescribedUser) -> Self {
            self.user = Some(input);
            self
        }
        /// <p>An array containing the properties of the user account for the <code>ServerID</code> value that you specified.</p>
        pub fn set_user(mut self, input: std::option::Option<crate::model::DescribedUser>) -> Self {
            self.user = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeUserOutput`](crate::output::DescribeUserOutput).
        pub fn build(self) -> crate::output::DescribeUserOutput {
            crate::output::DescribeUserOutput {
                server_id: self.server_id,
                user: self.user,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeServerOutput {
    /// <p>An array containing the properties of a server with the <code>ServerID</code> you specified.</p>
    #[doc(hidden)]
    pub server: std::option::Option<crate::model::DescribedServer>,
    _request_id: Option<String>,
}
impl DescribeServerOutput {
    /// <p>An array containing the properties of a server with the <code>ServerID</code> you specified.</p>
    pub fn server(&self) -> std::option::Option<&crate::model::DescribedServer> {
        self.server.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeServerOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeServerOutput {
    /// Creates a new builder-style object to manufacture [`DescribeServerOutput`](crate::output::DescribeServerOutput).
    pub fn builder() -> crate::output::describe_server_output::Builder {
        crate::output::describe_server_output::Builder::default()
    }
}

/// See [`DescribeServerOutput`](crate::output::DescribeServerOutput).
pub mod describe_server_output {

    /// A builder for [`DescribeServerOutput`](crate::output::DescribeServerOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) server: std::option::Option<crate::model::DescribedServer>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>An array containing the properties of a server with the <code>ServerID</code> you specified.</p>
        pub fn server(mut self, input: crate::model::DescribedServer) -> Self {
            self.server = Some(input);
            self
        }
        /// <p>An array containing the properties of a server with the <code>ServerID</code> you specified.</p>
        pub fn set_server(
            mut self,
            input: std::option::Option<crate::model::DescribedServer>,
        ) -> Self {
            self.server = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeServerOutput`](crate::output::DescribeServerOutput).
        pub fn build(self) -> crate::output::DescribeServerOutput {
            crate::output::DescribeServerOutput {
                server: self.server,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeSecurityPolicyOutput {
    /// <p>An array containing the properties of the security policy.</p>
    #[doc(hidden)]
    pub security_policy: std::option::Option<crate::model::DescribedSecurityPolicy>,
    _request_id: Option<String>,
}
impl DescribeSecurityPolicyOutput {
    /// <p>An array containing the properties of the security policy.</p>
    pub fn security_policy(&self) -> std::option::Option<&crate::model::DescribedSecurityPolicy> {
        self.security_policy.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeSecurityPolicyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeSecurityPolicyOutput {
    /// Creates a new builder-style object to manufacture [`DescribeSecurityPolicyOutput`](crate::output::DescribeSecurityPolicyOutput).
    pub fn builder() -> crate::output::describe_security_policy_output::Builder {
        crate::output::describe_security_policy_output::Builder::default()
    }
}

/// See [`DescribeSecurityPolicyOutput`](crate::output::DescribeSecurityPolicyOutput).
pub mod describe_security_policy_output {

    /// A builder for [`DescribeSecurityPolicyOutput`](crate::output::DescribeSecurityPolicyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) security_policy: std::option::Option<crate::model::DescribedSecurityPolicy>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>An array containing the properties of the security policy.</p>
        pub fn security_policy(mut self, input: crate::model::DescribedSecurityPolicy) -> Self {
            self.security_policy = Some(input);
            self
        }
        /// <p>An array containing the properties of the security policy.</p>
        pub fn set_security_policy(
            mut self,
            input: std::option::Option<crate::model::DescribedSecurityPolicy>,
        ) -> Self {
            self.security_policy = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeSecurityPolicyOutput`](crate::output::DescribeSecurityPolicyOutput).
        pub fn build(self) -> crate::output::DescribeSecurityPolicyOutput {
            crate::output::DescribeSecurityPolicyOutput {
                security_policy: self.security_policy,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeProfileOutput {
    /// <p>The details of the specified profile, returned as an object.</p>
    #[doc(hidden)]
    pub profile: std::option::Option<crate::model::DescribedProfile>,
    _request_id: Option<String>,
}
impl DescribeProfileOutput {
    /// <p>The details of the specified profile, returned as an object.</p>
    pub fn profile(&self) -> std::option::Option<&crate::model::DescribedProfile> {
        self.profile.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeProfileOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeProfileOutput {
    /// Creates a new builder-style object to manufacture [`DescribeProfileOutput`](crate::output::DescribeProfileOutput).
    pub fn builder() -> crate::output::describe_profile_output::Builder {
        crate::output::describe_profile_output::Builder::default()
    }
}

/// See [`DescribeProfileOutput`](crate::output::DescribeProfileOutput).
pub mod describe_profile_output {

    /// A builder for [`DescribeProfileOutput`](crate::output::DescribeProfileOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) profile: std::option::Option<crate::model::DescribedProfile>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The details of the specified profile, returned as an object.</p>
        pub fn profile(mut self, input: crate::model::DescribedProfile) -> Self {
            self.profile = Some(input);
            self
        }
        /// <p>The details of the specified profile, returned as an object.</p>
        pub fn set_profile(
            mut self,
            input: std::option::Option<crate::model::DescribedProfile>,
        ) -> Self {
            self.profile = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeProfileOutput`](crate::output::DescribeProfileOutput).
        pub fn build(self) -> crate::output::DescribeProfileOutput {
            crate::output::DescribeProfileOutput {
                profile: self.profile,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeHostKeyOutput {
    /// <p>Returns the details for the specified host key.</p>
    #[doc(hidden)]
    pub host_key: std::option::Option<crate::model::DescribedHostKey>,
    _request_id: Option<String>,
}
impl DescribeHostKeyOutput {
    /// <p>Returns the details for the specified host key.</p>
    pub fn host_key(&self) -> std::option::Option<&crate::model::DescribedHostKey> {
        self.host_key.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeHostKeyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeHostKeyOutput {
    /// Creates a new builder-style object to manufacture [`DescribeHostKeyOutput`](crate::output::DescribeHostKeyOutput).
    pub fn builder() -> crate::output::describe_host_key_output::Builder {
        crate::output::describe_host_key_output::Builder::default()
    }
}

/// See [`DescribeHostKeyOutput`](crate::output::DescribeHostKeyOutput).
pub mod describe_host_key_output {

    /// A builder for [`DescribeHostKeyOutput`](crate::output::DescribeHostKeyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) host_key: std::option::Option<crate::model::DescribedHostKey>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns the details for the specified host key.</p>
        pub fn host_key(mut self, input: crate::model::DescribedHostKey) -> Self {
            self.host_key = Some(input);
            self
        }
        /// <p>Returns the details for the specified host key.</p>
        pub fn set_host_key(
            mut self,
            input: std::option::Option<crate::model::DescribedHostKey>,
        ) -> Self {
            self.host_key = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeHostKeyOutput`](crate::output::DescribeHostKeyOutput).
        pub fn build(self) -> crate::output::DescribeHostKeyOutput {
            crate::output::DescribeHostKeyOutput {
                host_key: self.host_key,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeExecutionOutput {
    /// <p>A unique identifier for the workflow.</p>
    #[doc(hidden)]
    pub workflow_id: std::option::Option<std::string::String>,
    /// <p>The structure that contains the details of the workflow' execution.</p>
    #[doc(hidden)]
    pub execution: std::option::Option<crate::model::DescribedExecution>,
    _request_id: Option<String>,
}
impl DescribeExecutionOutput {
    /// <p>A unique identifier for the workflow.</p>
    pub fn workflow_id(&self) -> std::option::Option<&str> {
        self.workflow_id.as_deref()
    }
    /// <p>The structure that contains the details of the workflow' execution.</p>
    pub fn execution(&self) -> std::option::Option<&crate::model::DescribedExecution> {
        self.execution.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeExecutionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeExecutionOutput {
    /// Creates a new builder-style object to manufacture [`DescribeExecutionOutput`](crate::output::DescribeExecutionOutput).
    pub fn builder() -> crate::output::describe_execution_output::Builder {
        crate::output::describe_execution_output::Builder::default()
    }
}

/// See [`DescribeExecutionOutput`](crate::output::DescribeExecutionOutput).
pub mod describe_execution_output {

    /// A builder for [`DescribeExecutionOutput`](crate::output::DescribeExecutionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) workflow_id: std::option::Option<std::string::String>,
        pub(crate) execution: std::option::Option<crate::model::DescribedExecution>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A unique identifier for the workflow.</p>
        pub fn workflow_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.workflow_id = Some(input.into());
            self
        }
        /// <p>A unique identifier for the workflow.</p>
        pub fn set_workflow_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.workflow_id = input;
            self
        }
        /// <p>The structure that contains the details of the workflow' execution.</p>
        pub fn execution(mut self, input: crate::model::DescribedExecution) -> Self {
            self.execution = Some(input);
            self
        }
        /// <p>The structure that contains the details of the workflow' execution.</p>
        pub fn set_execution(
            mut self,
            input: std::option::Option<crate::model::DescribedExecution>,
        ) -> Self {
            self.execution = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeExecutionOutput`](crate::output::DescribeExecutionOutput).
        pub fn build(self) -> crate::output::DescribeExecutionOutput {
            crate::output::DescribeExecutionOutput {
                workflow_id: self.workflow_id,
                execution: self.execution,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeConnectorOutput {
    /// <p>The structure that contains the details of the connector.</p>
    #[doc(hidden)]
    pub connector: std::option::Option<crate::model::DescribedConnector>,
    _request_id: Option<String>,
}
impl DescribeConnectorOutput {
    /// <p>The structure that contains the details of the connector.</p>
    pub fn connector(&self) -> std::option::Option<&crate::model::DescribedConnector> {
        self.connector.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeConnectorOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeConnectorOutput {
    /// Creates a new builder-style object to manufacture [`DescribeConnectorOutput`](crate::output::DescribeConnectorOutput).
    pub fn builder() -> crate::output::describe_connector_output::Builder {
        crate::output::describe_connector_output::Builder::default()
    }
}

/// See [`DescribeConnectorOutput`](crate::output::DescribeConnectorOutput).
pub mod describe_connector_output {

    /// A builder for [`DescribeConnectorOutput`](crate::output::DescribeConnectorOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) connector: std::option::Option<crate::model::DescribedConnector>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The structure that contains the details of the connector.</p>
        pub fn connector(mut self, input: crate::model::DescribedConnector) -> Self {
            self.connector = Some(input);
            self
        }
        /// <p>The structure that contains the details of the connector.</p>
        pub fn set_connector(
            mut self,
            input: std::option::Option<crate::model::DescribedConnector>,
        ) -> Self {
            self.connector = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeConnectorOutput`](crate::output::DescribeConnectorOutput).
        pub fn build(self) -> crate::output::DescribeConnectorOutput {
            crate::output::DescribeConnectorOutput {
                connector: self.connector,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeCertificateOutput {
    /// <p>The details for the specified certificate, returned as an object.</p>
    #[doc(hidden)]
    pub certificate: std::option::Option<crate::model::DescribedCertificate>,
    _request_id: Option<String>,
}
impl DescribeCertificateOutput {
    /// <p>The details for the specified certificate, returned as an object.</p>
    pub fn certificate(&self) -> std::option::Option<&crate::model::DescribedCertificate> {
        self.certificate.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeCertificateOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeCertificateOutput {
    /// Creates a new builder-style object to manufacture [`DescribeCertificateOutput`](crate::output::DescribeCertificateOutput).
    pub fn builder() -> crate::output::describe_certificate_output::Builder {
        crate::output::describe_certificate_output::Builder::default()
    }
}

/// See [`DescribeCertificateOutput`](crate::output::DescribeCertificateOutput).
pub mod describe_certificate_output {

    /// A builder for [`DescribeCertificateOutput`](crate::output::DescribeCertificateOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) certificate: std::option::Option<crate::model::DescribedCertificate>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The details for the specified certificate, returned as an object.</p>
        pub fn certificate(mut self, input: crate::model::DescribedCertificate) -> Self {
            self.certificate = Some(input);
            self
        }
        /// <p>The details for the specified certificate, returned as an object.</p>
        pub fn set_certificate(
            mut self,
            input: std::option::Option<crate::model::DescribedCertificate>,
        ) -> Self {
            self.certificate = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeCertificateOutput`](crate::output::DescribeCertificateOutput).
        pub fn build(self) -> crate::output::DescribeCertificateOutput {
            crate::output::DescribeCertificateOutput {
                certificate: self.certificate,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeAgreementOutput {
    /// <p>The details for the specified agreement, returned as a <code>DescribedAgreement</code> object.</p>
    #[doc(hidden)]
    pub agreement: std::option::Option<crate::model::DescribedAgreement>,
    _request_id: Option<String>,
}
impl DescribeAgreementOutput {
    /// <p>The details for the specified agreement, returned as a <code>DescribedAgreement</code> object.</p>
    pub fn agreement(&self) -> std::option::Option<&crate::model::DescribedAgreement> {
        self.agreement.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeAgreementOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeAgreementOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAgreementOutput`](crate::output::DescribeAgreementOutput).
    pub fn builder() -> crate::output::describe_agreement_output::Builder {
        crate::output::describe_agreement_output::Builder::default()
    }
}

/// See [`DescribeAgreementOutput`](crate::output::DescribeAgreementOutput).
pub mod describe_agreement_output {

    /// A builder for [`DescribeAgreementOutput`](crate::output::DescribeAgreementOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) agreement: std::option::Option<crate::model::DescribedAgreement>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The details for the specified agreement, returned as a <code>DescribedAgreement</code> object.</p>
        pub fn agreement(mut self, input: crate::model::DescribedAgreement) -> Self {
            self.agreement = Some(input);
            self
        }
        /// <p>The details for the specified agreement, returned as a <code>DescribedAgreement</code> object.</p>
        pub fn set_agreement(
            mut self,
            input: std::option::Option<crate::model::DescribedAgreement>,
        ) -> Self {
            self.agreement = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAgreementOutput`](crate::output::DescribeAgreementOutput).
        pub fn build(self) -> crate::output::DescribeAgreementOutput {
            crate::output::DescribeAgreementOutput {
                agreement: self.agreement,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeAccessOutput {
    /// <p>A system-assigned unique identifier for a server that has this access assigned.</p>
    #[doc(hidden)]
    pub server_id: std::option::Option<std::string::String>,
    /// <p>The external identifier of the server that the access is attached to.</p>
    #[doc(hidden)]
    pub access: std::option::Option<crate::model::DescribedAccess>,
    _request_id: Option<String>,
}
impl DescribeAccessOutput {
    /// <p>A system-assigned unique identifier for a server that has this access assigned.</p>
    pub fn server_id(&self) -> std::option::Option<&str> {
        self.server_id.as_deref()
    }
    /// <p>The external identifier of the server that the access is attached to.</p>
    pub fn access(&self) -> std::option::Option<&crate::model::DescribedAccess> {
        self.access.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeAccessOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeAccessOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAccessOutput`](crate::output::DescribeAccessOutput).
    pub fn builder() -> crate::output::describe_access_output::Builder {
        crate::output::describe_access_output::Builder::default()
    }
}

/// See [`DescribeAccessOutput`](crate::output::DescribeAccessOutput).
pub mod describe_access_output {

    /// A builder for [`DescribeAccessOutput`](crate::output::DescribeAccessOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) server_id: std::option::Option<std::string::String>,
        pub(crate) access: std::option::Option<crate::model::DescribedAccess>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A system-assigned unique identifier for a server that has this access assigned.</p>
        pub fn server_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.server_id = Some(input.into());
            self
        }
        /// <p>A system-assigned unique identifier for a server that has this access assigned.</p>
        pub fn set_server_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.server_id = input;
            self
        }
        /// <p>The external identifier of the server that the access is attached to.</p>
        pub fn access(mut self, input: crate::model::DescribedAccess) -> Self {
            self.access = Some(input);
            self
        }
        /// <p>The external identifier of the server that the access is attached to.</p>
        pub fn set_access(
            mut self,
            input: std::option::Option<crate::model::DescribedAccess>,
        ) -> Self {
            self.access = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAccessOutput`](crate::output::DescribeAccessOutput).
        pub fn build(self) -> crate::output::DescribeAccessOutput {
            crate::output::DescribeAccessOutput {
                server_id: self.server_id,
                access: self.access,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteWorkflowOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteWorkflowOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteWorkflowOutput {
    /// Creates a new builder-style object to manufacture [`DeleteWorkflowOutput`](crate::output::DeleteWorkflowOutput).
    pub fn builder() -> crate::output::delete_workflow_output::Builder {
        crate::output::delete_workflow_output::Builder::default()
    }
}

/// See [`DeleteWorkflowOutput`](crate::output::DeleteWorkflowOutput).
pub mod delete_workflow_output {

    /// A builder for [`DeleteWorkflowOutput`](crate::output::DeleteWorkflowOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteWorkflowOutput`](crate::output::DeleteWorkflowOutput).
        pub fn build(self) -> crate::output::DeleteWorkflowOutput {
            crate::output::DeleteWorkflowOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteUserOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteUserOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteUserOutput {
    /// Creates a new builder-style object to manufacture [`DeleteUserOutput`](crate::output::DeleteUserOutput).
    pub fn builder() -> crate::output::delete_user_output::Builder {
        crate::output::delete_user_output::Builder::default()
    }
}

/// See [`DeleteUserOutput`](crate::output::DeleteUserOutput).
pub mod delete_user_output {

    /// A builder for [`DeleteUserOutput`](crate::output::DeleteUserOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteUserOutput`](crate::output::DeleteUserOutput).
        pub fn build(self) -> crate::output::DeleteUserOutput {
            crate::output::DeleteUserOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteSshPublicKeyOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteSshPublicKeyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteSshPublicKeyOutput {
    /// Creates a new builder-style object to manufacture [`DeleteSshPublicKeyOutput`](crate::output::DeleteSshPublicKeyOutput).
    pub fn builder() -> crate::output::delete_ssh_public_key_output::Builder {
        crate::output::delete_ssh_public_key_output::Builder::default()
    }
}

/// See [`DeleteSshPublicKeyOutput`](crate::output::DeleteSshPublicKeyOutput).
pub mod delete_ssh_public_key_output {

    /// A builder for [`DeleteSshPublicKeyOutput`](crate::output::DeleteSshPublicKeyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteSshPublicKeyOutput`](crate::output::DeleteSshPublicKeyOutput).
        pub fn build(self) -> crate::output::DeleteSshPublicKeyOutput {
            crate::output::DeleteSshPublicKeyOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteServerOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteServerOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteServerOutput {
    /// Creates a new builder-style object to manufacture [`DeleteServerOutput`](crate::output::DeleteServerOutput).
    pub fn builder() -> crate::output::delete_server_output::Builder {
        crate::output::delete_server_output::Builder::default()
    }
}

/// See [`DeleteServerOutput`](crate::output::DeleteServerOutput).
pub mod delete_server_output {

    /// A builder for [`DeleteServerOutput`](crate::output::DeleteServerOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteServerOutput`](crate::output::DeleteServerOutput).
        pub fn build(self) -> crate::output::DeleteServerOutput {
            crate::output::DeleteServerOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteProfileOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteProfileOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteProfileOutput {
    /// Creates a new builder-style object to manufacture [`DeleteProfileOutput`](crate::output::DeleteProfileOutput).
    pub fn builder() -> crate::output::delete_profile_output::Builder {
        crate::output::delete_profile_output::Builder::default()
    }
}

/// See [`DeleteProfileOutput`](crate::output::DeleteProfileOutput).
pub mod delete_profile_output {

    /// A builder for [`DeleteProfileOutput`](crate::output::DeleteProfileOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteProfileOutput`](crate::output::DeleteProfileOutput).
        pub fn build(self) -> crate::output::DeleteProfileOutput {
            crate::output::DeleteProfileOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteHostKeyOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteHostKeyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteHostKeyOutput {
    /// Creates a new builder-style object to manufacture [`DeleteHostKeyOutput`](crate::output::DeleteHostKeyOutput).
    pub fn builder() -> crate::output::delete_host_key_output::Builder {
        crate::output::delete_host_key_output::Builder::default()
    }
}

/// See [`DeleteHostKeyOutput`](crate::output::DeleteHostKeyOutput).
pub mod delete_host_key_output {

    /// A builder for [`DeleteHostKeyOutput`](crate::output::DeleteHostKeyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteHostKeyOutput`](crate::output::DeleteHostKeyOutput).
        pub fn build(self) -> crate::output::DeleteHostKeyOutput {
            crate::output::DeleteHostKeyOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteConnectorOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteConnectorOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteConnectorOutput {
    /// Creates a new builder-style object to manufacture [`DeleteConnectorOutput`](crate::output::DeleteConnectorOutput).
    pub fn builder() -> crate::output::delete_connector_output::Builder {
        crate::output::delete_connector_output::Builder::default()
    }
}

/// See [`DeleteConnectorOutput`](crate::output::DeleteConnectorOutput).
pub mod delete_connector_output {

    /// A builder for [`DeleteConnectorOutput`](crate::output::DeleteConnectorOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteConnectorOutput`](crate::output::DeleteConnectorOutput).
        pub fn build(self) -> crate::output::DeleteConnectorOutput {
            crate::output::DeleteConnectorOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteCertificateOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteCertificateOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteCertificateOutput {
    /// Creates a new builder-style object to manufacture [`DeleteCertificateOutput`](crate::output::DeleteCertificateOutput).
    pub fn builder() -> crate::output::delete_certificate_output::Builder {
        crate::output::delete_certificate_output::Builder::default()
    }
}

/// See [`DeleteCertificateOutput`](crate::output::DeleteCertificateOutput).
pub mod delete_certificate_output {

    /// A builder for [`DeleteCertificateOutput`](crate::output::DeleteCertificateOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteCertificateOutput`](crate::output::DeleteCertificateOutput).
        pub fn build(self) -> crate::output::DeleteCertificateOutput {
            crate::output::DeleteCertificateOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteAgreementOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteAgreementOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteAgreementOutput {
    /// Creates a new builder-style object to manufacture [`DeleteAgreementOutput`](crate::output::DeleteAgreementOutput).
    pub fn builder() -> crate::output::delete_agreement_output::Builder {
        crate::output::delete_agreement_output::Builder::default()
    }
}

/// See [`DeleteAgreementOutput`](crate::output::DeleteAgreementOutput).
pub mod delete_agreement_output {

    /// A builder for [`DeleteAgreementOutput`](crate::output::DeleteAgreementOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteAgreementOutput`](crate::output::DeleteAgreementOutput).
        pub fn build(self) -> crate::output::DeleteAgreementOutput {
            crate::output::DeleteAgreementOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteAccessOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteAccessOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteAccessOutput {
    /// Creates a new builder-style object to manufacture [`DeleteAccessOutput`](crate::output::DeleteAccessOutput).
    pub fn builder() -> crate::output::delete_access_output::Builder {
        crate::output::delete_access_output::Builder::default()
    }
}

/// See [`DeleteAccessOutput`](crate::output::DeleteAccessOutput).
pub mod delete_access_output {

    /// A builder for [`DeleteAccessOutput`](crate::output::DeleteAccessOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteAccessOutput`](crate::output::DeleteAccessOutput).
        pub fn build(self) -> crate::output::DeleteAccessOutput {
            crate::output::DeleteAccessOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateWorkflowOutput {
    /// <p>A unique identifier for the workflow.</p>
    #[doc(hidden)]
    pub workflow_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateWorkflowOutput {
    /// <p>A unique identifier for the workflow.</p>
    pub fn workflow_id(&self) -> std::option::Option<&str> {
        self.workflow_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateWorkflowOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateWorkflowOutput {
    /// Creates a new builder-style object to manufacture [`CreateWorkflowOutput`](crate::output::CreateWorkflowOutput).
    pub fn builder() -> crate::output::create_workflow_output::Builder {
        crate::output::create_workflow_output::Builder::default()
    }
}

/// See [`CreateWorkflowOutput`](crate::output::CreateWorkflowOutput).
pub mod create_workflow_output {

    /// A builder for [`CreateWorkflowOutput`](crate::output::CreateWorkflowOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) workflow_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A unique identifier for the workflow.</p>
        pub fn workflow_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.workflow_id = Some(input.into());
            self
        }
        /// <p>A unique identifier for the workflow.</p>
        pub fn set_workflow_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.workflow_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateWorkflowOutput`](crate::output::CreateWorkflowOutput).
        pub fn build(self) -> crate::output::CreateWorkflowOutput {
            crate::output::CreateWorkflowOutput {
                workflow_id: self.workflow_id,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateUserOutput {
    /// <p>The identifier of the server that the user is attached to.</p>
    #[doc(hidden)]
    pub server_id: std::option::Option<std::string::String>,
    /// <p>A unique string that identifies a user account associated with a server.</p>
    #[doc(hidden)]
    pub user_name: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateUserOutput {
    /// <p>The identifier of the server that the user is attached to.</p>
    pub fn server_id(&self) -> std::option::Option<&str> {
        self.server_id.as_deref()
    }
    /// <p>A unique string that identifies a user account associated with a server.</p>
    pub fn user_name(&self) -> std::option::Option<&str> {
        self.user_name.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateUserOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateUserOutput {
    /// Creates a new builder-style object to manufacture [`CreateUserOutput`](crate::output::CreateUserOutput).
    pub fn builder() -> crate::output::create_user_output::Builder {
        crate::output::create_user_output::Builder::default()
    }
}

/// See [`CreateUserOutput`](crate::output::CreateUserOutput).
pub mod create_user_output {

    /// A builder for [`CreateUserOutput`](crate::output::CreateUserOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) server_id: std::option::Option<std::string::String>,
        pub(crate) user_name: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The identifier of the server that the user is attached to.</p>
        pub fn server_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.server_id = Some(input.into());
            self
        }
        /// <p>The identifier of the server that the user is attached to.</p>
        pub fn set_server_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.server_id = input;
            self
        }
        /// <p>A unique string that identifies a user account associated with a server.</p>
        pub fn user_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.user_name = Some(input.into());
            self
        }
        /// <p>A unique string that identifies a user account associated with a server.</p>
        pub fn set_user_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.user_name = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateUserOutput`](crate::output::CreateUserOutput).
        pub fn build(self) -> crate::output::CreateUserOutput {
            crate::output::CreateUserOutput {
                server_id: self.server_id,
                user_name: self.user_name,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateServerOutput {
    /// <p>The service-assigned identifier of the server that is created.</p>
    #[doc(hidden)]
    pub server_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateServerOutput {
    /// <p>The service-assigned identifier of the server that is created.</p>
    pub fn server_id(&self) -> std::option::Option<&str> {
        self.server_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateServerOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateServerOutput {
    /// Creates a new builder-style object to manufacture [`CreateServerOutput`](crate::output::CreateServerOutput).
    pub fn builder() -> crate::output::create_server_output::Builder {
        crate::output::create_server_output::Builder::default()
    }
}

/// See [`CreateServerOutput`](crate::output::CreateServerOutput).
pub mod create_server_output {

    /// A builder for [`CreateServerOutput`](crate::output::CreateServerOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) server_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The service-assigned identifier of the server that is created.</p>
        pub fn server_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.server_id = Some(input.into());
            self
        }
        /// <p>The service-assigned identifier of the server that is created.</p>
        pub fn set_server_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.server_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateServerOutput`](crate::output::CreateServerOutput).
        pub fn build(self) -> crate::output::CreateServerOutput {
            crate::output::CreateServerOutput {
                server_id: self.server_id,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateProfileOutput {
    /// <p>The unique identifier for the AS2 profile, returned after the API call succeeds.</p>
    #[doc(hidden)]
    pub profile_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateProfileOutput {
    /// <p>The unique identifier for the AS2 profile, returned after the API call succeeds.</p>
    pub fn profile_id(&self) -> std::option::Option<&str> {
        self.profile_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateProfileOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateProfileOutput {
    /// Creates a new builder-style object to manufacture [`CreateProfileOutput`](crate::output::CreateProfileOutput).
    pub fn builder() -> crate::output::create_profile_output::Builder {
        crate::output::create_profile_output::Builder::default()
    }
}

/// See [`CreateProfileOutput`](crate::output::CreateProfileOutput).
pub mod create_profile_output {

    /// A builder for [`CreateProfileOutput`](crate::output::CreateProfileOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) profile_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The unique identifier for the AS2 profile, returned after the API call succeeds.</p>
        pub fn profile_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.profile_id = Some(input.into());
            self
        }
        /// <p>The unique identifier for the AS2 profile, returned after the API call succeeds.</p>
        pub fn set_profile_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.profile_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateProfileOutput`](crate::output::CreateProfileOutput).
        pub fn build(self) -> crate::output::CreateProfileOutput {
            crate::output::CreateProfileOutput {
                profile_id: self.profile_id,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateConnectorOutput {
    /// <p>The unique identifier for the connector, returned after the API call succeeds.</p>
    #[doc(hidden)]
    pub connector_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateConnectorOutput {
    /// <p>The unique identifier for the connector, returned after the API call succeeds.</p>
    pub fn connector_id(&self) -> std::option::Option<&str> {
        self.connector_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateConnectorOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateConnectorOutput {
    /// Creates a new builder-style object to manufacture [`CreateConnectorOutput`](crate::output::CreateConnectorOutput).
    pub fn builder() -> crate::output::create_connector_output::Builder {
        crate::output::create_connector_output::Builder::default()
    }
}

/// See [`CreateConnectorOutput`](crate::output::CreateConnectorOutput).
pub mod create_connector_output {

    /// A builder for [`CreateConnectorOutput`](crate::output::CreateConnectorOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) connector_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The unique identifier for the connector, returned after the API call succeeds.</p>
        pub fn connector_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.connector_id = Some(input.into());
            self
        }
        /// <p>The unique identifier for the connector, returned after the API call succeeds.</p>
        pub fn set_connector_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.connector_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateConnectorOutput`](crate::output::CreateConnectorOutput).
        pub fn build(self) -> crate::output::CreateConnectorOutput {
            crate::output::CreateConnectorOutput {
                connector_id: self.connector_id,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateAgreementOutput {
    /// <p>The unique identifier for the agreement. Use this ID for deleting, or updating an agreement, as well as in any other API calls that require that you specify the agreement ID.</p>
    #[doc(hidden)]
    pub agreement_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateAgreementOutput {
    /// <p>The unique identifier for the agreement. Use this ID for deleting, or updating an agreement, as well as in any other API calls that require that you specify the agreement ID.</p>
    pub fn agreement_id(&self) -> std::option::Option<&str> {
        self.agreement_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateAgreementOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateAgreementOutput {
    /// Creates a new builder-style object to manufacture [`CreateAgreementOutput`](crate::output::CreateAgreementOutput).
    pub fn builder() -> crate::output::create_agreement_output::Builder {
        crate::output::create_agreement_output::Builder::default()
    }
}

/// See [`CreateAgreementOutput`](crate::output::CreateAgreementOutput).
pub mod create_agreement_output {

    /// A builder for [`CreateAgreementOutput`](crate::output::CreateAgreementOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) agreement_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The unique identifier for the agreement. Use this ID for deleting, or updating an agreement, as well as in any other API calls that require that you specify the agreement ID.</p>
        pub fn agreement_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.agreement_id = Some(input.into());
            self
        }
        /// <p>The unique identifier for the agreement. Use this ID for deleting, or updating an agreement, as well as in any other API calls that require that you specify the agreement ID.</p>
        pub fn set_agreement_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.agreement_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateAgreementOutput`](crate::output::CreateAgreementOutput).
        pub fn build(self) -> crate::output::CreateAgreementOutput {
            crate::output::CreateAgreementOutput {
                agreement_id: self.agreement_id,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateAccessOutput {
    /// <p>The identifier of the server that the user is attached to.</p>
    #[doc(hidden)]
    pub server_id: std::option::Option<std::string::String>,
    /// <p>The external identifier of the group whose users have access to your Amazon S3 or Amazon EFS resources over the enabled protocols using Transfer Family.</p>
    #[doc(hidden)]
    pub external_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateAccessOutput {
    /// <p>The identifier of the server that the user is attached to.</p>
    pub fn server_id(&self) -> std::option::Option<&str> {
        self.server_id.as_deref()
    }
    /// <p>The external identifier of the group whose users have access to your Amazon S3 or Amazon EFS resources over the enabled protocols using Transfer Family.</p>
    pub fn external_id(&self) -> std::option::Option<&str> {
        self.external_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateAccessOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateAccessOutput {
    /// Creates a new builder-style object to manufacture [`CreateAccessOutput`](crate::output::CreateAccessOutput).
    pub fn builder() -> crate::output::create_access_output::Builder {
        crate::output::create_access_output::Builder::default()
    }
}

/// See [`CreateAccessOutput`](crate::output::CreateAccessOutput).
pub mod create_access_output {

    /// A builder for [`CreateAccessOutput`](crate::output::CreateAccessOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) server_id: std::option::Option<std::string::String>,
        pub(crate) external_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The identifier of the server that the user is attached to.</p>
        pub fn server_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.server_id = Some(input.into());
            self
        }
        /// <p>The identifier of the server that the user is attached to.</p>
        pub fn set_server_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.server_id = input;
            self
        }
        /// <p>The external identifier of the group whose users have access to your Amazon S3 or Amazon EFS resources over the enabled protocols using Transfer Family.</p>
        pub fn external_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.external_id = Some(input.into());
            self
        }
        /// <p>The external identifier of the group whose users have access to your Amazon S3 or Amazon EFS resources over the enabled protocols using Transfer Family.</p>
        pub fn set_external_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.external_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateAccessOutput`](crate::output::CreateAccessOutput).
        pub fn build(self) -> crate::output::CreateAccessOutput {
            crate::output::CreateAccessOutput {
                server_id: self.server_id,
                external_id: self.external_id,
                _request_id: self._request_id,
            }
        }
    }
}
