// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `CreateAccess`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_access`](crate::client::fluent_builders::CreateAccess).
///
/// `ParseStrictResponse` impl for `CreateAccess`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateAccess {
    _private: (),
}
impl CreateAccess {
    /// Creates a new builder-style object to manufacture [`CreateAccessInput`](crate::input::CreateAccessInput).
    pub fn builder() -> crate::input::create_access_input::Builder {
        crate::input::create_access_input::Builder::default()
    }
    /// Creates a new `CreateAccess` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateAccess {
    type Output =
        std::result::Result<crate::output::CreateAccessOutput, crate::error::CreateAccessError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_access_error(response)
        } else {
            crate::operation_deser::parse_create_access_response(response)
        }
    }
}

/// Operation shape for `CreateAgreement`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_agreement`](crate::client::fluent_builders::CreateAgreement).
///
/// `ParseStrictResponse` impl for `CreateAgreement`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateAgreement {
    _private: (),
}
impl CreateAgreement {
    /// Creates a new builder-style object to manufacture [`CreateAgreementInput`](crate::input::CreateAgreementInput).
    pub fn builder() -> crate::input::create_agreement_input::Builder {
        crate::input::create_agreement_input::Builder::default()
    }
    /// Creates a new `CreateAgreement` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateAgreement {
    type Output = std::result::Result<
        crate::output::CreateAgreementOutput,
        crate::error::CreateAgreementError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_agreement_error(response)
        } else {
            crate::operation_deser::parse_create_agreement_response(response)
        }
    }
}

/// Operation shape for `CreateConnector`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_connector`](crate::client::fluent_builders::CreateConnector).
///
/// `ParseStrictResponse` impl for `CreateConnector`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateConnector {
    _private: (),
}
impl CreateConnector {
    /// Creates a new builder-style object to manufacture [`CreateConnectorInput`](crate::input::CreateConnectorInput).
    pub fn builder() -> crate::input::create_connector_input::Builder {
        crate::input::create_connector_input::Builder::default()
    }
    /// Creates a new `CreateConnector` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateConnector {
    type Output = std::result::Result<
        crate::output::CreateConnectorOutput,
        crate::error::CreateConnectorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_connector_error(response)
        } else {
            crate::operation_deser::parse_create_connector_response(response)
        }
    }
}

/// Operation shape for `CreateProfile`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_profile`](crate::client::fluent_builders::CreateProfile).
///
/// `ParseStrictResponse` impl for `CreateProfile`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateProfile {
    _private: (),
}
impl CreateProfile {
    /// Creates a new builder-style object to manufacture [`CreateProfileInput`](crate::input::CreateProfileInput).
    pub fn builder() -> crate::input::create_profile_input::Builder {
        crate::input::create_profile_input::Builder::default()
    }
    /// Creates a new `CreateProfile` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateProfile {
    type Output =
        std::result::Result<crate::output::CreateProfileOutput, crate::error::CreateProfileError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_profile_error(response)
        } else {
            crate::operation_deser::parse_create_profile_response(response)
        }
    }
}

/// Operation shape for `CreateServer`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_server`](crate::client::fluent_builders::CreateServer).
///
/// `ParseStrictResponse` impl for `CreateServer`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateServer {
    _private: (),
}
impl CreateServer {
    /// Creates a new builder-style object to manufacture [`CreateServerInput`](crate::input::CreateServerInput).
    pub fn builder() -> crate::input::create_server_input::Builder {
        crate::input::create_server_input::Builder::default()
    }
    /// Creates a new `CreateServer` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateServer {
    type Output =
        std::result::Result<crate::output::CreateServerOutput, crate::error::CreateServerError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_server_error(response)
        } else {
            crate::operation_deser::parse_create_server_response(response)
        }
    }
}

/// Operation shape for `CreateUser`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_user`](crate::client::fluent_builders::CreateUser).
///
/// `ParseStrictResponse` impl for `CreateUser`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateUser {
    _private: (),
}
impl CreateUser {
    /// Creates a new builder-style object to manufacture [`CreateUserInput`](crate::input::CreateUserInput).
    pub fn builder() -> crate::input::create_user_input::Builder {
        crate::input::create_user_input::Builder::default()
    }
    /// Creates a new `CreateUser` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateUser {
    type Output =
        std::result::Result<crate::output::CreateUserOutput, crate::error::CreateUserError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_user_error(response)
        } else {
            crate::operation_deser::parse_create_user_response(response)
        }
    }
}

/// Operation shape for `CreateWorkflow`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_workflow`](crate::client::fluent_builders::CreateWorkflow).
///
/// `ParseStrictResponse` impl for `CreateWorkflow`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateWorkflow {
    _private: (),
}
impl CreateWorkflow {
    /// Creates a new builder-style object to manufacture [`CreateWorkflowInput`](crate::input::CreateWorkflowInput).
    pub fn builder() -> crate::input::create_workflow_input::Builder {
        crate::input::create_workflow_input::Builder::default()
    }
    /// Creates a new `CreateWorkflow` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateWorkflow {
    type Output =
        std::result::Result<crate::output::CreateWorkflowOutput, crate::error::CreateWorkflowError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_workflow_error(response)
        } else {
            crate::operation_deser::parse_create_workflow_response(response)
        }
    }
}

/// Operation shape for `DeleteAccess`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_access`](crate::client::fluent_builders::DeleteAccess).
///
/// `ParseStrictResponse` impl for `DeleteAccess`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteAccess {
    _private: (),
}
impl DeleteAccess {
    /// Creates a new builder-style object to manufacture [`DeleteAccessInput`](crate::input::DeleteAccessInput).
    pub fn builder() -> crate::input::delete_access_input::Builder {
        crate::input::delete_access_input::Builder::default()
    }
    /// Creates a new `DeleteAccess` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteAccess {
    type Output =
        std::result::Result<crate::output::DeleteAccessOutput, crate::error::DeleteAccessError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_access_error(response)
        } else {
            crate::operation_deser::parse_delete_access_response(response)
        }
    }
}

/// Operation shape for `DeleteAgreement`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_agreement`](crate::client::fluent_builders::DeleteAgreement).
///
/// `ParseStrictResponse` impl for `DeleteAgreement`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteAgreement {
    _private: (),
}
impl DeleteAgreement {
    /// Creates a new builder-style object to manufacture [`DeleteAgreementInput`](crate::input::DeleteAgreementInput).
    pub fn builder() -> crate::input::delete_agreement_input::Builder {
        crate::input::delete_agreement_input::Builder::default()
    }
    /// Creates a new `DeleteAgreement` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteAgreement {
    type Output = std::result::Result<
        crate::output::DeleteAgreementOutput,
        crate::error::DeleteAgreementError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_agreement_error(response)
        } else {
            crate::operation_deser::parse_delete_agreement_response(response)
        }
    }
}

/// Operation shape for `DeleteCertificate`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_certificate`](crate::client::fluent_builders::DeleteCertificate).
///
/// `ParseStrictResponse` impl for `DeleteCertificate`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteCertificate {
    _private: (),
}
impl DeleteCertificate {
    /// Creates a new builder-style object to manufacture [`DeleteCertificateInput`](crate::input::DeleteCertificateInput).
    pub fn builder() -> crate::input::delete_certificate_input::Builder {
        crate::input::delete_certificate_input::Builder::default()
    }
    /// Creates a new `DeleteCertificate` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteCertificate {
    type Output = std::result::Result<
        crate::output::DeleteCertificateOutput,
        crate::error::DeleteCertificateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_certificate_error(response)
        } else {
            crate::operation_deser::parse_delete_certificate_response(response)
        }
    }
}

/// Operation shape for `DeleteConnector`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_connector`](crate::client::fluent_builders::DeleteConnector).
///
/// `ParseStrictResponse` impl for `DeleteConnector`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteConnector {
    _private: (),
}
impl DeleteConnector {
    /// Creates a new builder-style object to manufacture [`DeleteConnectorInput`](crate::input::DeleteConnectorInput).
    pub fn builder() -> crate::input::delete_connector_input::Builder {
        crate::input::delete_connector_input::Builder::default()
    }
    /// Creates a new `DeleteConnector` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteConnector {
    type Output = std::result::Result<
        crate::output::DeleteConnectorOutput,
        crate::error::DeleteConnectorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_connector_error(response)
        } else {
            crate::operation_deser::parse_delete_connector_response(response)
        }
    }
}

/// Operation shape for `DeleteHostKey`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_host_key`](crate::client::fluent_builders::DeleteHostKey).
///
/// `ParseStrictResponse` impl for `DeleteHostKey`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteHostKey {
    _private: (),
}
impl DeleteHostKey {
    /// Creates a new builder-style object to manufacture [`DeleteHostKeyInput`](crate::input::DeleteHostKeyInput).
    pub fn builder() -> crate::input::delete_host_key_input::Builder {
        crate::input::delete_host_key_input::Builder::default()
    }
    /// Creates a new `DeleteHostKey` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteHostKey {
    type Output =
        std::result::Result<crate::output::DeleteHostKeyOutput, crate::error::DeleteHostKeyError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_host_key_error(response)
        } else {
            crate::operation_deser::parse_delete_host_key_response(response)
        }
    }
}

/// Operation shape for `DeleteProfile`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_profile`](crate::client::fluent_builders::DeleteProfile).
///
/// `ParseStrictResponse` impl for `DeleteProfile`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteProfile {
    _private: (),
}
impl DeleteProfile {
    /// Creates a new builder-style object to manufacture [`DeleteProfileInput`](crate::input::DeleteProfileInput).
    pub fn builder() -> crate::input::delete_profile_input::Builder {
        crate::input::delete_profile_input::Builder::default()
    }
    /// Creates a new `DeleteProfile` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteProfile {
    type Output =
        std::result::Result<crate::output::DeleteProfileOutput, crate::error::DeleteProfileError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_profile_error(response)
        } else {
            crate::operation_deser::parse_delete_profile_response(response)
        }
    }
}

/// Operation shape for `DeleteServer`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_server`](crate::client::fluent_builders::DeleteServer).
///
/// `ParseStrictResponse` impl for `DeleteServer`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteServer {
    _private: (),
}
impl DeleteServer {
    /// Creates a new builder-style object to manufacture [`DeleteServerInput`](crate::input::DeleteServerInput).
    pub fn builder() -> crate::input::delete_server_input::Builder {
        crate::input::delete_server_input::Builder::default()
    }
    /// Creates a new `DeleteServer` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteServer {
    type Output =
        std::result::Result<crate::output::DeleteServerOutput, crate::error::DeleteServerError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_server_error(response)
        } else {
            crate::operation_deser::parse_delete_server_response(response)
        }
    }
}

/// Operation shape for `DeleteSshPublicKey`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_ssh_public_key`](crate::client::fluent_builders::DeleteSshPublicKey).
///
/// `ParseStrictResponse` impl for `DeleteSshPublicKey`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteSshPublicKey {
    _private: (),
}
impl DeleteSshPublicKey {
    /// Creates a new builder-style object to manufacture [`DeleteSshPublicKeyInput`](crate::input::DeleteSshPublicKeyInput).
    pub fn builder() -> crate::input::delete_ssh_public_key_input::Builder {
        crate::input::delete_ssh_public_key_input::Builder::default()
    }
    /// Creates a new `DeleteSshPublicKey` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteSshPublicKey {
    type Output = std::result::Result<
        crate::output::DeleteSshPublicKeyOutput,
        crate::error::DeleteSshPublicKeyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_ssh_public_key_error(response)
        } else {
            crate::operation_deser::parse_delete_ssh_public_key_response(response)
        }
    }
}

/// Operation shape for `DeleteUser`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_user`](crate::client::fluent_builders::DeleteUser).
///
/// `ParseStrictResponse` impl for `DeleteUser`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteUser {
    _private: (),
}
impl DeleteUser {
    /// Creates a new builder-style object to manufacture [`DeleteUserInput`](crate::input::DeleteUserInput).
    pub fn builder() -> crate::input::delete_user_input::Builder {
        crate::input::delete_user_input::Builder::default()
    }
    /// Creates a new `DeleteUser` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteUser {
    type Output =
        std::result::Result<crate::output::DeleteUserOutput, crate::error::DeleteUserError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_user_error(response)
        } else {
            crate::operation_deser::parse_delete_user_response(response)
        }
    }
}

/// Operation shape for `DeleteWorkflow`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_workflow`](crate::client::fluent_builders::DeleteWorkflow).
///
/// `ParseStrictResponse` impl for `DeleteWorkflow`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteWorkflow {
    _private: (),
}
impl DeleteWorkflow {
    /// Creates a new builder-style object to manufacture [`DeleteWorkflowInput`](crate::input::DeleteWorkflowInput).
    pub fn builder() -> crate::input::delete_workflow_input::Builder {
        crate::input::delete_workflow_input::Builder::default()
    }
    /// Creates a new `DeleteWorkflow` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteWorkflow {
    type Output =
        std::result::Result<crate::output::DeleteWorkflowOutput, crate::error::DeleteWorkflowError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_workflow_error(response)
        } else {
            crate::operation_deser::parse_delete_workflow_response(response)
        }
    }
}

/// Operation shape for `DescribeAccess`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_access`](crate::client::fluent_builders::DescribeAccess).
///
/// `ParseStrictResponse` impl for `DescribeAccess`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeAccess {
    _private: (),
}
impl DescribeAccess {
    /// Creates a new builder-style object to manufacture [`DescribeAccessInput`](crate::input::DescribeAccessInput).
    pub fn builder() -> crate::input::describe_access_input::Builder {
        crate::input::describe_access_input::Builder::default()
    }
    /// Creates a new `DescribeAccess` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeAccess {
    type Output =
        std::result::Result<crate::output::DescribeAccessOutput, crate::error::DescribeAccessError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_access_error(response)
        } else {
            crate::operation_deser::parse_describe_access_response(response)
        }
    }
}

/// Operation shape for `DescribeAgreement`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_agreement`](crate::client::fluent_builders::DescribeAgreement).
///
/// `ParseStrictResponse` impl for `DescribeAgreement`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeAgreement {
    _private: (),
}
impl DescribeAgreement {
    /// Creates a new builder-style object to manufacture [`DescribeAgreementInput`](crate::input::DescribeAgreementInput).
    pub fn builder() -> crate::input::describe_agreement_input::Builder {
        crate::input::describe_agreement_input::Builder::default()
    }
    /// Creates a new `DescribeAgreement` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeAgreement {
    type Output = std::result::Result<
        crate::output::DescribeAgreementOutput,
        crate::error::DescribeAgreementError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_agreement_error(response)
        } else {
            crate::operation_deser::parse_describe_agreement_response(response)
        }
    }
}

/// Operation shape for `DescribeCertificate`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_certificate`](crate::client::fluent_builders::DescribeCertificate).
///
/// `ParseStrictResponse` impl for `DescribeCertificate`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeCertificate {
    _private: (),
}
impl DescribeCertificate {
    /// Creates a new builder-style object to manufacture [`DescribeCertificateInput`](crate::input::DescribeCertificateInput).
    pub fn builder() -> crate::input::describe_certificate_input::Builder {
        crate::input::describe_certificate_input::Builder::default()
    }
    /// Creates a new `DescribeCertificate` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeCertificate {
    type Output = std::result::Result<
        crate::output::DescribeCertificateOutput,
        crate::error::DescribeCertificateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_certificate_error(response)
        } else {
            crate::operation_deser::parse_describe_certificate_response(response)
        }
    }
}

/// Operation shape for `DescribeConnector`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_connector`](crate::client::fluent_builders::DescribeConnector).
///
/// `ParseStrictResponse` impl for `DescribeConnector`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeConnector {
    _private: (),
}
impl DescribeConnector {
    /// Creates a new builder-style object to manufacture [`DescribeConnectorInput`](crate::input::DescribeConnectorInput).
    pub fn builder() -> crate::input::describe_connector_input::Builder {
        crate::input::describe_connector_input::Builder::default()
    }
    /// Creates a new `DescribeConnector` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeConnector {
    type Output = std::result::Result<
        crate::output::DescribeConnectorOutput,
        crate::error::DescribeConnectorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_connector_error(response)
        } else {
            crate::operation_deser::parse_describe_connector_response(response)
        }
    }
}

/// Operation shape for `DescribeExecution`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_execution`](crate::client::fluent_builders::DescribeExecution).
///
/// `ParseStrictResponse` impl for `DescribeExecution`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeExecution {
    _private: (),
}
impl DescribeExecution {
    /// Creates a new builder-style object to manufacture [`DescribeExecutionInput`](crate::input::DescribeExecutionInput).
    pub fn builder() -> crate::input::describe_execution_input::Builder {
        crate::input::describe_execution_input::Builder::default()
    }
    /// Creates a new `DescribeExecution` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeExecution {
    type Output = std::result::Result<
        crate::output::DescribeExecutionOutput,
        crate::error::DescribeExecutionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_execution_error(response)
        } else {
            crate::operation_deser::parse_describe_execution_response(response)
        }
    }
}

/// Operation shape for `DescribeHostKey`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_host_key`](crate::client::fluent_builders::DescribeHostKey).
///
/// `ParseStrictResponse` impl for `DescribeHostKey`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeHostKey {
    _private: (),
}
impl DescribeHostKey {
    /// Creates a new builder-style object to manufacture [`DescribeHostKeyInput`](crate::input::DescribeHostKeyInput).
    pub fn builder() -> crate::input::describe_host_key_input::Builder {
        crate::input::describe_host_key_input::Builder::default()
    }
    /// Creates a new `DescribeHostKey` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeHostKey {
    type Output = std::result::Result<
        crate::output::DescribeHostKeyOutput,
        crate::error::DescribeHostKeyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_host_key_error(response)
        } else {
            crate::operation_deser::parse_describe_host_key_response(response)
        }
    }
}

/// Operation shape for `DescribeProfile`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_profile`](crate::client::fluent_builders::DescribeProfile).
///
/// `ParseStrictResponse` impl for `DescribeProfile`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeProfile {
    _private: (),
}
impl DescribeProfile {
    /// Creates a new builder-style object to manufacture [`DescribeProfileInput`](crate::input::DescribeProfileInput).
    pub fn builder() -> crate::input::describe_profile_input::Builder {
        crate::input::describe_profile_input::Builder::default()
    }
    /// Creates a new `DescribeProfile` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeProfile {
    type Output = std::result::Result<
        crate::output::DescribeProfileOutput,
        crate::error::DescribeProfileError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_profile_error(response)
        } else {
            crate::operation_deser::parse_describe_profile_response(response)
        }
    }
}

/// Operation shape for `DescribeSecurityPolicy`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_security_policy`](crate::client::fluent_builders::DescribeSecurityPolicy).
///
/// `ParseStrictResponse` impl for `DescribeSecurityPolicy`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeSecurityPolicy {
    _private: (),
}
impl DescribeSecurityPolicy {
    /// Creates a new builder-style object to manufacture [`DescribeSecurityPolicyInput`](crate::input::DescribeSecurityPolicyInput).
    pub fn builder() -> crate::input::describe_security_policy_input::Builder {
        crate::input::describe_security_policy_input::Builder::default()
    }
    /// Creates a new `DescribeSecurityPolicy` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeSecurityPolicy {
    type Output = std::result::Result<
        crate::output::DescribeSecurityPolicyOutput,
        crate::error::DescribeSecurityPolicyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_security_policy_error(response)
        } else {
            crate::operation_deser::parse_describe_security_policy_response(response)
        }
    }
}

/// Operation shape for `DescribeServer`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_server`](crate::client::fluent_builders::DescribeServer).
///
/// `ParseStrictResponse` impl for `DescribeServer`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeServer {
    _private: (),
}
impl DescribeServer {
    /// Creates a new builder-style object to manufacture [`DescribeServerInput`](crate::input::DescribeServerInput).
    pub fn builder() -> crate::input::describe_server_input::Builder {
        crate::input::describe_server_input::Builder::default()
    }
    /// Creates a new `DescribeServer` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeServer {
    type Output =
        std::result::Result<crate::output::DescribeServerOutput, crate::error::DescribeServerError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_server_error(response)
        } else {
            crate::operation_deser::parse_describe_server_response(response)
        }
    }
}

/// Operation shape for `DescribeUser`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_user`](crate::client::fluent_builders::DescribeUser).
///
/// `ParseStrictResponse` impl for `DescribeUser`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeUser {
    _private: (),
}
impl DescribeUser {
    /// Creates a new builder-style object to manufacture [`DescribeUserInput`](crate::input::DescribeUserInput).
    pub fn builder() -> crate::input::describe_user_input::Builder {
        crate::input::describe_user_input::Builder::default()
    }
    /// Creates a new `DescribeUser` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeUser {
    type Output =
        std::result::Result<crate::output::DescribeUserOutput, crate::error::DescribeUserError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_user_error(response)
        } else {
            crate::operation_deser::parse_describe_user_response(response)
        }
    }
}

/// Operation shape for `DescribeWorkflow`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_workflow`](crate::client::fluent_builders::DescribeWorkflow).
///
/// `ParseStrictResponse` impl for `DescribeWorkflow`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeWorkflow {
    _private: (),
}
impl DescribeWorkflow {
    /// Creates a new builder-style object to manufacture [`DescribeWorkflowInput`](crate::input::DescribeWorkflowInput).
    pub fn builder() -> crate::input::describe_workflow_input::Builder {
        crate::input::describe_workflow_input::Builder::default()
    }
    /// Creates a new `DescribeWorkflow` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeWorkflow {
    type Output = std::result::Result<
        crate::output::DescribeWorkflowOutput,
        crate::error::DescribeWorkflowError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_workflow_error(response)
        } else {
            crate::operation_deser::parse_describe_workflow_response(response)
        }
    }
}

/// Operation shape for `ImportCertificate`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`import_certificate`](crate::client::fluent_builders::ImportCertificate).
///
/// `ParseStrictResponse` impl for `ImportCertificate`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ImportCertificate {
    _private: (),
}
impl ImportCertificate {
    /// Creates a new builder-style object to manufacture [`ImportCertificateInput`](crate::input::ImportCertificateInput).
    pub fn builder() -> crate::input::import_certificate_input::Builder {
        crate::input::import_certificate_input::Builder::default()
    }
    /// Creates a new `ImportCertificate` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ImportCertificate {
    type Output = std::result::Result<
        crate::output::ImportCertificateOutput,
        crate::error::ImportCertificateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_import_certificate_error(response)
        } else {
            crate::operation_deser::parse_import_certificate_response(response)
        }
    }
}

/// Operation shape for `ImportHostKey`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`import_host_key`](crate::client::fluent_builders::ImportHostKey).
///
/// `ParseStrictResponse` impl for `ImportHostKey`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ImportHostKey {
    _private: (),
}
impl ImportHostKey {
    /// Creates a new builder-style object to manufacture [`ImportHostKeyInput`](crate::input::ImportHostKeyInput).
    pub fn builder() -> crate::input::import_host_key_input::Builder {
        crate::input::import_host_key_input::Builder::default()
    }
    /// Creates a new `ImportHostKey` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ImportHostKey {
    type Output =
        std::result::Result<crate::output::ImportHostKeyOutput, crate::error::ImportHostKeyError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_import_host_key_error(response)
        } else {
            crate::operation_deser::parse_import_host_key_response(response)
        }
    }
}

/// Operation shape for `ImportSshPublicKey`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`import_ssh_public_key`](crate::client::fluent_builders::ImportSshPublicKey).
///
/// `ParseStrictResponse` impl for `ImportSshPublicKey`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ImportSshPublicKey {
    _private: (),
}
impl ImportSshPublicKey {
    /// Creates a new builder-style object to manufacture [`ImportSshPublicKeyInput`](crate::input::ImportSshPublicKeyInput).
    pub fn builder() -> crate::input::import_ssh_public_key_input::Builder {
        crate::input::import_ssh_public_key_input::Builder::default()
    }
    /// Creates a new `ImportSshPublicKey` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ImportSshPublicKey {
    type Output = std::result::Result<
        crate::output::ImportSshPublicKeyOutput,
        crate::error::ImportSshPublicKeyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_import_ssh_public_key_error(response)
        } else {
            crate::operation_deser::parse_import_ssh_public_key_response(response)
        }
    }
}

/// Operation shape for `ListAccesses`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_accesses`](crate::client::fluent_builders::ListAccesses).
///
/// `ParseStrictResponse` impl for `ListAccesses`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListAccesses {
    _private: (),
}
impl ListAccesses {
    /// Creates a new builder-style object to manufacture [`ListAccessesInput`](crate::input::ListAccessesInput).
    pub fn builder() -> crate::input::list_accesses_input::Builder {
        crate::input::list_accesses_input::Builder::default()
    }
    /// Creates a new `ListAccesses` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListAccesses {
    type Output =
        std::result::Result<crate::output::ListAccessesOutput, crate::error::ListAccessesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_accesses_error(response)
        } else {
            crate::operation_deser::parse_list_accesses_response(response)
        }
    }
}

/// Operation shape for `ListAgreements`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_agreements`](crate::client::fluent_builders::ListAgreements).
///
/// `ParseStrictResponse` impl for `ListAgreements`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListAgreements {
    _private: (),
}
impl ListAgreements {
    /// Creates a new builder-style object to manufacture [`ListAgreementsInput`](crate::input::ListAgreementsInput).
    pub fn builder() -> crate::input::list_agreements_input::Builder {
        crate::input::list_agreements_input::Builder::default()
    }
    /// Creates a new `ListAgreements` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListAgreements {
    type Output =
        std::result::Result<crate::output::ListAgreementsOutput, crate::error::ListAgreementsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_agreements_error(response)
        } else {
            crate::operation_deser::parse_list_agreements_response(response)
        }
    }
}

/// Operation shape for `ListCertificates`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_certificates`](crate::client::fluent_builders::ListCertificates).
///
/// `ParseStrictResponse` impl for `ListCertificates`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListCertificates {
    _private: (),
}
impl ListCertificates {
    /// Creates a new builder-style object to manufacture [`ListCertificatesInput`](crate::input::ListCertificatesInput).
    pub fn builder() -> crate::input::list_certificates_input::Builder {
        crate::input::list_certificates_input::Builder::default()
    }
    /// Creates a new `ListCertificates` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListCertificates {
    type Output = std::result::Result<
        crate::output::ListCertificatesOutput,
        crate::error::ListCertificatesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_certificates_error(response)
        } else {
            crate::operation_deser::parse_list_certificates_response(response)
        }
    }
}

/// Operation shape for `ListConnectors`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_connectors`](crate::client::fluent_builders::ListConnectors).
///
/// `ParseStrictResponse` impl for `ListConnectors`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListConnectors {
    _private: (),
}
impl ListConnectors {
    /// Creates a new builder-style object to manufacture [`ListConnectorsInput`](crate::input::ListConnectorsInput).
    pub fn builder() -> crate::input::list_connectors_input::Builder {
        crate::input::list_connectors_input::Builder::default()
    }
    /// Creates a new `ListConnectors` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListConnectors {
    type Output =
        std::result::Result<crate::output::ListConnectorsOutput, crate::error::ListConnectorsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_connectors_error(response)
        } else {
            crate::operation_deser::parse_list_connectors_response(response)
        }
    }
}

/// Operation shape for `ListExecutions`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_executions`](crate::client::fluent_builders::ListExecutions).
///
/// `ParseStrictResponse` impl for `ListExecutions`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListExecutions {
    _private: (),
}
impl ListExecutions {
    /// Creates a new builder-style object to manufacture [`ListExecutionsInput`](crate::input::ListExecutionsInput).
    pub fn builder() -> crate::input::list_executions_input::Builder {
        crate::input::list_executions_input::Builder::default()
    }
    /// Creates a new `ListExecutions` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListExecutions {
    type Output =
        std::result::Result<crate::output::ListExecutionsOutput, crate::error::ListExecutionsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_executions_error(response)
        } else {
            crate::operation_deser::parse_list_executions_response(response)
        }
    }
}

/// Operation shape for `ListHostKeys`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_host_keys`](crate::client::fluent_builders::ListHostKeys).
///
/// `ParseStrictResponse` impl for `ListHostKeys`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListHostKeys {
    _private: (),
}
impl ListHostKeys {
    /// Creates a new builder-style object to manufacture [`ListHostKeysInput`](crate::input::ListHostKeysInput).
    pub fn builder() -> crate::input::list_host_keys_input::Builder {
        crate::input::list_host_keys_input::Builder::default()
    }
    /// Creates a new `ListHostKeys` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListHostKeys {
    type Output =
        std::result::Result<crate::output::ListHostKeysOutput, crate::error::ListHostKeysError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_host_keys_error(response)
        } else {
            crate::operation_deser::parse_list_host_keys_response(response)
        }
    }
}

/// Operation shape for `ListProfiles`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_profiles`](crate::client::fluent_builders::ListProfiles).
///
/// `ParseStrictResponse` impl for `ListProfiles`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListProfiles {
    _private: (),
}
impl ListProfiles {
    /// Creates a new builder-style object to manufacture [`ListProfilesInput`](crate::input::ListProfilesInput).
    pub fn builder() -> crate::input::list_profiles_input::Builder {
        crate::input::list_profiles_input::Builder::default()
    }
    /// Creates a new `ListProfiles` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListProfiles {
    type Output =
        std::result::Result<crate::output::ListProfilesOutput, crate::error::ListProfilesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_profiles_error(response)
        } else {
            crate::operation_deser::parse_list_profiles_response(response)
        }
    }
}

/// Operation shape for `ListSecurityPolicies`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_security_policies`](crate::client::fluent_builders::ListSecurityPolicies).
///
/// `ParseStrictResponse` impl for `ListSecurityPolicies`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListSecurityPolicies {
    _private: (),
}
impl ListSecurityPolicies {
    /// Creates a new builder-style object to manufacture [`ListSecurityPoliciesInput`](crate::input::ListSecurityPoliciesInput).
    pub fn builder() -> crate::input::list_security_policies_input::Builder {
        crate::input::list_security_policies_input::Builder::default()
    }
    /// Creates a new `ListSecurityPolicies` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListSecurityPolicies {
    type Output = std::result::Result<
        crate::output::ListSecurityPoliciesOutput,
        crate::error::ListSecurityPoliciesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_security_policies_error(response)
        } else {
            crate::operation_deser::parse_list_security_policies_response(response)
        }
    }
}

/// Operation shape for `ListServers`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_servers`](crate::client::fluent_builders::ListServers).
///
/// `ParseStrictResponse` impl for `ListServers`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListServers {
    _private: (),
}
impl ListServers {
    /// Creates a new builder-style object to manufacture [`ListServersInput`](crate::input::ListServersInput).
    pub fn builder() -> crate::input::list_servers_input::Builder {
        crate::input::list_servers_input::Builder::default()
    }
    /// Creates a new `ListServers` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListServers {
    type Output =
        std::result::Result<crate::output::ListServersOutput, crate::error::ListServersError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_servers_error(response)
        } else {
            crate::operation_deser::parse_list_servers_response(response)
        }
    }
}

/// Operation shape for `ListTagsForResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_tags_for_resource`](crate::client::fluent_builders::ListTagsForResource).
///
/// `ParseStrictResponse` impl for `ListTagsForResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput).
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    /// Creates a new `ListTagsForResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// Operation shape for `ListUsers`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_users`](crate::client::fluent_builders::ListUsers).
///
/// `ParseStrictResponse` impl for `ListUsers`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListUsers {
    _private: (),
}
impl ListUsers {
    /// Creates a new builder-style object to manufacture [`ListUsersInput`](crate::input::ListUsersInput).
    pub fn builder() -> crate::input::list_users_input::Builder {
        crate::input::list_users_input::Builder::default()
    }
    /// Creates a new `ListUsers` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListUsers {
    type Output = std::result::Result<crate::output::ListUsersOutput, crate::error::ListUsersError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_users_error(response)
        } else {
            crate::operation_deser::parse_list_users_response(response)
        }
    }
}

/// Operation shape for `ListWorkflows`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_workflows`](crate::client::fluent_builders::ListWorkflows).
///
/// `ParseStrictResponse` impl for `ListWorkflows`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListWorkflows {
    _private: (),
}
impl ListWorkflows {
    /// Creates a new builder-style object to manufacture [`ListWorkflowsInput`](crate::input::ListWorkflowsInput).
    pub fn builder() -> crate::input::list_workflows_input::Builder {
        crate::input::list_workflows_input::Builder::default()
    }
    /// Creates a new `ListWorkflows` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListWorkflows {
    type Output =
        std::result::Result<crate::output::ListWorkflowsOutput, crate::error::ListWorkflowsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_workflows_error(response)
        } else {
            crate::operation_deser::parse_list_workflows_response(response)
        }
    }
}

/// Operation shape for `SendWorkflowStepState`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`send_workflow_step_state`](crate::client::fluent_builders::SendWorkflowStepState).
///
/// `ParseStrictResponse` impl for `SendWorkflowStepState`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct SendWorkflowStepState {
    _private: (),
}
impl SendWorkflowStepState {
    /// Creates a new builder-style object to manufacture [`SendWorkflowStepStateInput`](crate::input::SendWorkflowStepStateInput).
    pub fn builder() -> crate::input::send_workflow_step_state_input::Builder {
        crate::input::send_workflow_step_state_input::Builder::default()
    }
    /// Creates a new `SendWorkflowStepState` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for SendWorkflowStepState {
    type Output = std::result::Result<
        crate::output::SendWorkflowStepStateOutput,
        crate::error::SendWorkflowStepStateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_send_workflow_step_state_error(response)
        } else {
            crate::operation_deser::parse_send_workflow_step_state_response(response)
        }
    }
}

/// Operation shape for `StartFileTransfer`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_file_transfer`](crate::client::fluent_builders::StartFileTransfer).
///
/// `ParseStrictResponse` impl for `StartFileTransfer`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StartFileTransfer {
    _private: (),
}
impl StartFileTransfer {
    /// Creates a new builder-style object to manufacture [`StartFileTransferInput`](crate::input::StartFileTransferInput).
    pub fn builder() -> crate::input::start_file_transfer_input::Builder {
        crate::input::start_file_transfer_input::Builder::default()
    }
    /// Creates a new `StartFileTransfer` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StartFileTransfer {
    type Output = std::result::Result<
        crate::output::StartFileTransferOutput,
        crate::error::StartFileTransferError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_file_transfer_error(response)
        } else {
            crate::operation_deser::parse_start_file_transfer_response(response)
        }
    }
}

/// Operation shape for `StartServer`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_server`](crate::client::fluent_builders::StartServer).
///
/// `ParseStrictResponse` impl for `StartServer`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StartServer {
    _private: (),
}
impl StartServer {
    /// Creates a new builder-style object to manufacture [`StartServerInput`](crate::input::StartServerInput).
    pub fn builder() -> crate::input::start_server_input::Builder {
        crate::input::start_server_input::Builder::default()
    }
    /// Creates a new `StartServer` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StartServer {
    type Output =
        std::result::Result<crate::output::StartServerOutput, crate::error::StartServerError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_server_error(response)
        } else {
            crate::operation_deser::parse_start_server_response(response)
        }
    }
}

/// Operation shape for `StopServer`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`stop_server`](crate::client::fluent_builders::StopServer).
///
/// `ParseStrictResponse` impl for `StopServer`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StopServer {
    _private: (),
}
impl StopServer {
    /// Creates a new builder-style object to manufacture [`StopServerInput`](crate::input::StopServerInput).
    pub fn builder() -> crate::input::stop_server_input::Builder {
        crate::input::stop_server_input::Builder::default()
    }
    /// Creates a new `StopServer` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StopServer {
    type Output =
        std::result::Result<crate::output::StopServerOutput, crate::error::StopServerError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_stop_server_error(response)
        } else {
            crate::operation_deser::parse_stop_server_response(response)
        }
    }
}

/// Operation shape for `TagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`tag_resource`](crate::client::fluent_builders::TagResource).
///
/// `ParseStrictResponse` impl for `TagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput).
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    /// Creates a new `TagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_tag_resource_error(response)
        } else {
            crate::operation_deser::parse_tag_resource_response(response)
        }
    }
}

/// Operation shape for `TestIdentityProvider`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`test_identity_provider`](crate::client::fluent_builders::TestIdentityProvider).
///
/// `ParseStrictResponse` impl for `TestIdentityProvider`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct TestIdentityProvider {
    _private: (),
}
impl TestIdentityProvider {
    /// Creates a new builder-style object to manufacture [`TestIdentityProviderInput`](crate::input::TestIdentityProviderInput).
    pub fn builder() -> crate::input::test_identity_provider_input::Builder {
        crate::input::test_identity_provider_input::Builder::default()
    }
    /// Creates a new `TestIdentityProvider` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for TestIdentityProvider {
    type Output = std::result::Result<
        crate::output::TestIdentityProviderOutput,
        crate::error::TestIdentityProviderError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_test_identity_provider_error(response)
        } else {
            crate::operation_deser::parse_test_identity_provider_response(response)
        }
    }
}

/// Operation shape for `UntagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`untag_resource`](crate::client::fluent_builders::UntagResource).
///
/// `ParseStrictResponse` impl for `UntagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput).
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    /// Creates a new `UntagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_untag_resource_error(response)
        } else {
            crate::operation_deser::parse_untag_resource_response(response)
        }
    }
}

/// Operation shape for `UpdateAccess`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_access`](crate::client::fluent_builders::UpdateAccess).
///
/// `ParseStrictResponse` impl for `UpdateAccess`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateAccess {
    _private: (),
}
impl UpdateAccess {
    /// Creates a new builder-style object to manufacture [`UpdateAccessInput`](crate::input::UpdateAccessInput).
    pub fn builder() -> crate::input::update_access_input::Builder {
        crate::input::update_access_input::Builder::default()
    }
    /// Creates a new `UpdateAccess` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateAccess {
    type Output =
        std::result::Result<crate::output::UpdateAccessOutput, crate::error::UpdateAccessError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_access_error(response)
        } else {
            crate::operation_deser::parse_update_access_response(response)
        }
    }
}

/// Operation shape for `UpdateAgreement`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_agreement`](crate::client::fluent_builders::UpdateAgreement).
///
/// `ParseStrictResponse` impl for `UpdateAgreement`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateAgreement {
    _private: (),
}
impl UpdateAgreement {
    /// Creates a new builder-style object to manufacture [`UpdateAgreementInput`](crate::input::UpdateAgreementInput).
    pub fn builder() -> crate::input::update_agreement_input::Builder {
        crate::input::update_agreement_input::Builder::default()
    }
    /// Creates a new `UpdateAgreement` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateAgreement {
    type Output = std::result::Result<
        crate::output::UpdateAgreementOutput,
        crate::error::UpdateAgreementError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_agreement_error(response)
        } else {
            crate::operation_deser::parse_update_agreement_response(response)
        }
    }
}

/// Operation shape for `UpdateCertificate`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_certificate`](crate::client::fluent_builders::UpdateCertificate).
///
/// `ParseStrictResponse` impl for `UpdateCertificate`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateCertificate {
    _private: (),
}
impl UpdateCertificate {
    /// Creates a new builder-style object to manufacture [`UpdateCertificateInput`](crate::input::UpdateCertificateInput).
    pub fn builder() -> crate::input::update_certificate_input::Builder {
        crate::input::update_certificate_input::Builder::default()
    }
    /// Creates a new `UpdateCertificate` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateCertificate {
    type Output = std::result::Result<
        crate::output::UpdateCertificateOutput,
        crate::error::UpdateCertificateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_certificate_error(response)
        } else {
            crate::operation_deser::parse_update_certificate_response(response)
        }
    }
}

/// Operation shape for `UpdateConnector`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_connector`](crate::client::fluent_builders::UpdateConnector).
///
/// `ParseStrictResponse` impl for `UpdateConnector`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateConnector {
    _private: (),
}
impl UpdateConnector {
    /// Creates a new builder-style object to manufacture [`UpdateConnectorInput`](crate::input::UpdateConnectorInput).
    pub fn builder() -> crate::input::update_connector_input::Builder {
        crate::input::update_connector_input::Builder::default()
    }
    /// Creates a new `UpdateConnector` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateConnector {
    type Output = std::result::Result<
        crate::output::UpdateConnectorOutput,
        crate::error::UpdateConnectorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_connector_error(response)
        } else {
            crate::operation_deser::parse_update_connector_response(response)
        }
    }
}

/// Operation shape for `UpdateHostKey`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_host_key`](crate::client::fluent_builders::UpdateHostKey).
///
/// `ParseStrictResponse` impl for `UpdateHostKey`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateHostKey {
    _private: (),
}
impl UpdateHostKey {
    /// Creates a new builder-style object to manufacture [`UpdateHostKeyInput`](crate::input::UpdateHostKeyInput).
    pub fn builder() -> crate::input::update_host_key_input::Builder {
        crate::input::update_host_key_input::Builder::default()
    }
    /// Creates a new `UpdateHostKey` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateHostKey {
    type Output =
        std::result::Result<crate::output::UpdateHostKeyOutput, crate::error::UpdateHostKeyError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_host_key_error(response)
        } else {
            crate::operation_deser::parse_update_host_key_response(response)
        }
    }
}

/// Operation shape for `UpdateProfile`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_profile`](crate::client::fluent_builders::UpdateProfile).
///
/// `ParseStrictResponse` impl for `UpdateProfile`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateProfile {
    _private: (),
}
impl UpdateProfile {
    /// Creates a new builder-style object to manufacture [`UpdateProfileInput`](crate::input::UpdateProfileInput).
    pub fn builder() -> crate::input::update_profile_input::Builder {
        crate::input::update_profile_input::Builder::default()
    }
    /// Creates a new `UpdateProfile` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateProfile {
    type Output =
        std::result::Result<crate::output::UpdateProfileOutput, crate::error::UpdateProfileError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_profile_error(response)
        } else {
            crate::operation_deser::parse_update_profile_response(response)
        }
    }
}

/// Operation shape for `UpdateServer`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_server`](crate::client::fluent_builders::UpdateServer).
///
/// `ParseStrictResponse` impl for `UpdateServer`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateServer {
    _private: (),
}
impl UpdateServer {
    /// Creates a new builder-style object to manufacture [`UpdateServerInput`](crate::input::UpdateServerInput).
    pub fn builder() -> crate::input::update_server_input::Builder {
        crate::input::update_server_input::Builder::default()
    }
    /// Creates a new `UpdateServer` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateServer {
    type Output =
        std::result::Result<crate::output::UpdateServerOutput, crate::error::UpdateServerError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_server_error(response)
        } else {
            crate::operation_deser::parse_update_server_response(response)
        }
    }
}

/// Operation shape for `UpdateUser`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_user`](crate::client::fluent_builders::UpdateUser).
///
/// `ParseStrictResponse` impl for `UpdateUser`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateUser {
    _private: (),
}
impl UpdateUser {
    /// Creates a new builder-style object to manufacture [`UpdateUserInput`](crate::input::UpdateUserInput).
    pub fn builder() -> crate::input::update_user_input::Builder {
        crate::input::update_user_input::Builder::default()
    }
    /// Creates a new `UpdateUser` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateUser {
    type Output =
        std::result::Result<crate::output::UpdateUserOutput, crate::error::UpdateUserError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_user_error(response)
        } else {
            crate::operation_deser::parse_update_user_response(response)
        }
    }
}

/// Operation customization and supporting types
pub mod customize;
