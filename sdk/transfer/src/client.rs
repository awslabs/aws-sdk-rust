// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for AWS Transfer Family
///
/// Client for invoking operations on AWS Transfer Family. Each operation on AWS Transfer Family is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_transfer::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_transfer::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_transfer::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`CreateAccess`](crate::client::fluent_builders::CreateAccess) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`home_directory(impl Into<String>)`](crate::client::fluent_builders::CreateAccess::home_directory) / [`set_home_directory(Option<String>)`](crate::client::fluent_builders::CreateAccess::set_home_directory): <p>The landing directory (folder) for a user when they log in to the server using the client.</p>  <p>A <code>HomeDirectory</code> example is <code>/bucket_name/home/mydirectory</code>.</p>
    ///   - [`home_directory_type(HomeDirectoryType)`](crate::client::fluent_builders::CreateAccess::home_directory_type) / [`set_home_directory_type(Option<HomeDirectoryType>)`](crate::client::fluent_builders::CreateAccess::set_home_directory_type): <p>The type of landing directory (folder) that you want your users' home directory to be when they log in to the server. If you set it to <code>PATH</code>, the user will see the absolute Amazon S3 bucket or EFS paths as is in their file transfer protocol clients. If you set it <code>LOGICAL</code>, you need to provide mappings in the <code>HomeDirectoryMappings</code> for how you want to make Amazon S3 or Amazon EFS paths visible to your users.</p>
    ///   - [`home_directory_mappings(Vec<HomeDirectoryMapEntry>)`](crate::client::fluent_builders::CreateAccess::home_directory_mappings) / [`set_home_directory_mappings(Option<Vec<HomeDirectoryMapEntry>>)`](crate::client::fluent_builders::CreateAccess::set_home_directory_mappings): <p>Logical directory mappings that specify what Amazon S3 or Amazon EFS paths and keys should be visible to your user and how you want to make them visible. You must specify the <code>Entry</code> and <code>Target</code> pair, where <code>Entry</code> shows how the path is made visible and <code>Target</code> is the actual Amazon S3 or Amazon EFS path. If you only specify a target, it is displayed as is. You also must ensure that your Identity and Access Management (IAM) role provides access to paths in <code>Target</code>. This value can be set only when <code>HomeDirectoryType</code> is set to <i>LOGICAL</i>.</p>  <p>The following is an <code>Entry</code> and <code>Target</code> pair example.</p>  <p> <code>[ { "Entry": "/directory1", "Target": "/bucket_name/home/mydirectory" } ]</code> </p>  <p>In most cases, you can use this value instead of the session policy to lock down your user to the designated home directory ("<code>chroot</code>"). To do this, you can set <code>Entry</code> to <code>/</code> and set <code>Target</code> to the <code>HomeDirectory</code> parameter value.</p>  <p>The following is an <code>Entry</code> and <code>Target</code> pair example for <code>chroot</code>.</p>  <p> <code>[ { "Entry": "/", "Target": "/bucket_name/home/mydirectory" } ]</code> </p>
    ///   - [`policy(impl Into<String>)`](crate::client::fluent_builders::CreateAccess::policy) / [`set_policy(Option<String>)`](crate::client::fluent_builders::CreateAccess::set_policy): <p>A session policy for your user so that you can use the same Identity and Access Management (IAM) role across multiple users. This policy scopes down a user's access to portions of their Amazon S3 bucket. Variables that you can use inside this policy include <code>${Transfer:UserName}</code>, <code>${Transfer:HomeDirectory}</code>, and <code>${Transfer:HomeBucket}</code>.</p> <note>   <p>This policy applies only when the domain of <code>ServerId</code> is Amazon S3. Amazon EFS does not use session policies.</p>   <p>For session policies, Transfer Family stores the policy as a JSON blob, instead of the Amazon Resource Name (ARN) of the policy. You save the policy as a JSON blob and pass it in the <code>Policy</code> argument.</p>   <p>For an example of a session policy, see <a href="https://docs.aws.amazon.com/transfer/latest/userguide/session-policy.html">Example session policy</a>.</p>   <p>For more information, see <a href="https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html">AssumeRole</a> in the <i>Security Token Service API Reference</i>.</p>  </note>
    ///   - [`posix_profile(PosixProfile)`](crate::client::fluent_builders::CreateAccess::posix_profile) / [`set_posix_profile(Option<PosixProfile>)`](crate::client::fluent_builders::CreateAccess::set_posix_profile): <p>The full POSIX identity, including user ID (<code>Uid</code>), group ID (<code>Gid</code>), and any secondary groups IDs (<code>SecondaryGids</code>), that controls your users' access to your Amazon EFS file systems. The POSIX permissions that are set on files and directories in your file system determine the level of access your users get when transferring files into and out of your Amazon EFS file systems.</p>
    ///   - [`role(impl Into<String>)`](crate::client::fluent_builders::CreateAccess::role) / [`set_role(Option<String>)`](crate::client::fluent_builders::CreateAccess::set_role): <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that controls your users' access to your Amazon S3 bucket or Amazon EFS file system. The policies attached to this role determine the level of access that you want to provide your users when transferring files into and out of your Amazon S3 bucket or Amazon EFS file system. The IAM role should also contain a trust relationship that allows the server to access your resources when servicing your users' transfer requests.</p>
    ///   - [`server_id(impl Into<String>)`](crate::client::fluent_builders::CreateAccess::server_id) / [`set_server_id(Option<String>)`](crate::client::fluent_builders::CreateAccess::set_server_id): <p>A system-assigned unique identifier for a server instance. This is the specific server that you added your user to.</p>
    ///   - [`external_id(impl Into<String>)`](crate::client::fluent_builders::CreateAccess::external_id) / [`set_external_id(Option<String>)`](crate::client::fluent_builders::CreateAccess::set_external_id): <p>A unique identifier that is required to identify specific groups within your directory. The users of the group that you associate have access to your Amazon S3 or Amazon EFS resources over the enabled protocols using Transfer Family. If you know the group name, you can view the SID values by running the following command using Windows PowerShell.</p>  <p> <code>Get-ADGroup -Filter {samAccountName -like "<i>YourGroupName</i>*"} -Properties * | Select SamAccountName,ObjectSid</code> </p>  <p>In that command, replace <i>YourGroupName</i> with the name of your Active Directory group.</p>  <p>The regular expression used to validate this parameter is a string of characters consisting of uppercase and lowercase alphanumeric characters with no spaces. You can also include underscores or any of the following characters: =,.@:/-</p>
    /// - On success, responds with [`CreateAccessOutput`](crate::output::CreateAccessOutput) with field(s):
    ///   - [`server_id(Option<String>)`](crate::output::CreateAccessOutput::server_id): <p>The identifier of the server that the user is attached to.</p>
    ///   - [`external_id(Option<String>)`](crate::output::CreateAccessOutput::external_id): <p>The external identifier of the group whose users have access to your Amazon S3 or Amazon EFS resources over the enabled protocols using Transfer Family.</p>
    /// - On failure, responds with [`SdkError<CreateAccessError>`](crate::error::CreateAccessError)
    pub fn create_access(&self) -> crate::client::fluent_builders::CreateAccess {
        crate::client::fluent_builders::CreateAccess::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateAgreement`](crate::client::fluent_builders::CreateAgreement) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateAgreement::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateAgreement::set_description): <p>A name or short description to identify the agreement. </p>
    ///   - [`server_id(impl Into<String>)`](crate::client::fluent_builders::CreateAgreement::server_id) / [`set_server_id(Option<String>)`](crate::client::fluent_builders::CreateAgreement::set_server_id): <p>A system-assigned unique identifier for a server instance. This is the specific server that the agreement uses.</p>
    ///   - [`local_profile_id(impl Into<String>)`](crate::client::fluent_builders::CreateAgreement::local_profile_id) / [`set_local_profile_id(Option<String>)`](crate::client::fluent_builders::CreateAgreement::set_local_profile_id): <p>A unique identifier for the AS2 local profile.</p>
    ///   - [`partner_profile_id(impl Into<String>)`](crate::client::fluent_builders::CreateAgreement::partner_profile_id) / [`set_partner_profile_id(Option<String>)`](crate::client::fluent_builders::CreateAgreement::set_partner_profile_id): <p>A unique identifier for the partner profile used in the agreement.</p>
    ///   - [`base_directory(impl Into<String>)`](crate::client::fluent_builders::CreateAgreement::base_directory) / [`set_base_directory(Option<String>)`](crate::client::fluent_builders::CreateAgreement::set_base_directory): <p>The landing directory (folder) for files transferred by using the AS2 protocol.</p>  <p>A <code>BaseDirectory</code> example is <i>DOC-EXAMPLE-BUCKET</i>/<i>home</i>/<i>mydirectory</i>.</p>
    ///   - [`access_role(impl Into<String>)`](crate::client::fluent_builders::CreateAgreement::access_role) / [`set_access_role(Option<String>)`](crate::client::fluent_builders::CreateAgreement::set_access_role): <p>With AS2, you can send files by calling <code>StartFileTransfer</code> and specifying the file paths in the request parameter, <code>SendFilePaths</code>. We use the file’s parent directory (for example, for <code>--send-file-paths /bucket/dir/file.txt</code>, parent directory is <code>/bucket/dir/</code>) to temporarily store a processed AS2 message file, store the MDN when we receive them from the partner, and write a final JSON file containing relevant metadata of the transmission. So, the <code>AccessRole</code> needs to provide read and write access to the parent directory of the file location used in the <code>StartFileTransfer</code> request. Additionally, you need to provide read and write access to the parent directory of the files that you intend to send with <code>StartFileTransfer</code>.</p>
    ///   - [`status(AgreementStatusType)`](crate::client::fluent_builders::CreateAgreement::status) / [`set_status(Option<AgreementStatusType>)`](crate::client::fluent_builders::CreateAgreement::set_status): <p>The status of the agreement. The agreement can be either <code>ACTIVE</code> or <code>INACTIVE</code>.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateAgreement::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateAgreement::set_tags): <p>Key-value pairs that can be used to group and search for agreements.</p>
    /// - On success, responds with [`CreateAgreementOutput`](crate::output::CreateAgreementOutput) with field(s):
    ///   - [`agreement_id(Option<String>)`](crate::output::CreateAgreementOutput::agreement_id): <p>The unique identifier for the agreement. Use this ID for deleting, or updating an agreement, as well as in any other API calls that require that you specify the agreement ID.</p>
    /// - On failure, responds with [`SdkError<CreateAgreementError>`](crate::error::CreateAgreementError)
    pub fn create_agreement(&self) -> crate::client::fluent_builders::CreateAgreement {
        crate::client::fluent_builders::CreateAgreement::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateConnector`](crate::client::fluent_builders::CreateConnector) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`url(impl Into<String>)`](crate::client::fluent_builders::CreateConnector::url) / [`set_url(Option<String>)`](crate::client::fluent_builders::CreateConnector::set_url): <p>The URL of the partner's AS2 endpoint.</p>
    ///   - [`as2_config(As2ConnectorConfig)`](crate::client::fluent_builders::CreateConnector::as2_config) / [`set_as2_config(Option<As2ConnectorConfig>)`](crate::client::fluent_builders::CreateConnector::set_as2_config): <p>A structure that contains the parameters for a connector object.</p>
    ///   - [`access_role(impl Into<String>)`](crate::client::fluent_builders::CreateConnector::access_role) / [`set_access_role(Option<String>)`](crate::client::fluent_builders::CreateConnector::set_access_role): <p>With AS2, you can send files by calling <code>StartFileTransfer</code> and specifying the file paths in the request parameter, <code>SendFilePaths</code>. We use the file’s parent directory (for example, for <code>--send-file-paths /bucket/dir/file.txt</code>, parent directory is <code>/bucket/dir/</code>) to temporarily store a processed AS2 message file, store the MDN when we receive them from the partner, and write a final JSON file containing relevant metadata of the transmission. So, the <code>AccessRole</code> needs to provide read and write access to the parent directory of the file location used in the <code>StartFileTransfer</code> request. Additionally, you need to provide read and write access to the parent directory of the files that you intend to send with <code>StartFileTransfer</code>.</p>
    ///   - [`logging_role(impl Into<String>)`](crate::client::fluent_builders::CreateConnector::logging_role) / [`set_logging_role(Option<String>)`](crate::client::fluent_builders::CreateConnector::set_logging_role): <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that allows a connector to turn on CloudWatch logging for Amazon S3 events. When set, you can view connector activity in your CloudWatch logs.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateConnector::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateConnector::set_tags): <p>Key-value pairs that can be used to group and search for connectors. Tags are metadata attached to connectors for any purpose.</p>
    /// - On success, responds with [`CreateConnectorOutput`](crate::output::CreateConnectorOutput) with field(s):
    ///   - [`connector_id(Option<String>)`](crate::output::CreateConnectorOutput::connector_id): <p>The unique identifier for the connector, returned after the API call succeeds.</p>
    /// - On failure, responds with [`SdkError<CreateConnectorError>`](crate::error::CreateConnectorError)
    pub fn create_connector(&self) -> crate::client::fluent_builders::CreateConnector {
        crate::client::fluent_builders::CreateConnector::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateProfile`](crate::client::fluent_builders::CreateProfile) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`as2_id(impl Into<String>)`](crate::client::fluent_builders::CreateProfile::as2_id) / [`set_as2_id(Option<String>)`](crate::client::fluent_builders::CreateProfile::set_as2_id): <p>The <code>As2Id</code> is the <i>AS2-name</i>, as defined in the <a href="https://datatracker.ietf.org/doc/html/rfc4130">RFC 4130</a>. For inbound transfers, this is the <code>AS2-From</code> header for the AS2 messages sent from the partner. For outbound connectors, this is the <code>AS2-To</code> header for the AS2 messages sent to the partner using the <code>StartFileTransfer</code> API operation. This ID cannot include spaces.</p>
    ///   - [`profile_type(ProfileType)`](crate::client::fluent_builders::CreateProfile::profile_type) / [`set_profile_type(Option<ProfileType>)`](crate::client::fluent_builders::CreateProfile::set_profile_type): <p>Determines the type of profile to create:</p>  <ul>   <li> <p>Specify <code>LOCAL</code> to create a local profile. A local profile represents the AS2-enabled Transfer Family server organization or party.</p> </li>   <li> <p>Specify <code>PARTNER</code> to create a partner profile. A partner profile represents a remote organization, external to Transfer Family.</p> </li>  </ul>
    ///   - [`certificate_ids(Vec<String>)`](crate::client::fluent_builders::CreateProfile::certificate_ids) / [`set_certificate_ids(Option<Vec<String>>)`](crate::client::fluent_builders::CreateProfile::set_certificate_ids): <p>An array of identifiers for the imported certificates. You use this identifier for working with profiles and partner profiles.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateProfile::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateProfile::set_tags): <p>Key-value pairs that can be used to group and search for AS2 profiles.</p>
    /// - On success, responds with [`CreateProfileOutput`](crate::output::CreateProfileOutput) with field(s):
    ///   - [`profile_id(Option<String>)`](crate::output::CreateProfileOutput::profile_id): <p>The unique identifier for the AS2 profile, returned after the API call succeeds.</p>
    /// - On failure, responds with [`SdkError<CreateProfileError>`](crate::error::CreateProfileError)
    pub fn create_profile(&self) -> crate::client::fluent_builders::CreateProfile {
        crate::client::fluent_builders::CreateProfile::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateServer`](crate::client::fluent_builders::CreateServer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`certificate(impl Into<String>)`](crate::client::fluent_builders::CreateServer::certificate) / [`set_certificate(Option<String>)`](crate::client::fluent_builders::CreateServer::set_certificate): <p>The Amazon Resource Name (ARN) of the Certificate Manager (ACM) certificate. Required when <code>Protocols</code> is set to <code>FTPS</code>.</p>  <p>To request a new public certificate, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-request-public.html">Request a public certificate</a> in the <i>Certificate Manager User Guide</i>.</p>  <p>To import an existing certificate into ACM, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html">Importing certificates into ACM</a> in the <i>Certificate Manager User Guide</i>.</p>  <p>To request a private certificate to use FTPS through private IP addresses, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-request-private.html">Request a private certificate</a> in the <i>Certificate Manager User Guide</i>.</p>  <p>Certificates with the following cryptographic algorithms and key sizes are supported:</p>  <ul>   <li> <p>2048-bit RSA (RSA_2048)</p> </li>   <li> <p>4096-bit RSA (RSA_4096)</p> </li>   <li> <p>Elliptic Prime Curve 256 bit (EC_prime256v1)</p> </li>   <li> <p>Elliptic Prime Curve 384 bit (EC_secp384r1)</p> </li>   <li> <p>Elliptic Prime Curve 521 bit (EC_secp521r1)</p> </li>  </ul> <note>   <p>The certificate must be a valid SSL/TLS X.509 version 3 certificate with FQDN or IP address specified and information about the issuer.</p>  </note>
    ///   - [`domain(Domain)`](crate::client::fluent_builders::CreateServer::domain) / [`set_domain(Option<Domain>)`](crate::client::fluent_builders::CreateServer::set_domain): <p>The domain of the storage system that is used for file transfers. There are two domains available: Amazon Simple Storage Service (Amazon S3) and Amazon Elastic File System (Amazon EFS). The default value is S3.</p> <note>   <p>After the server is created, the domain cannot be changed.</p>  </note>
    ///   - [`endpoint_details(EndpointDetails)`](crate::client::fluent_builders::CreateServer::endpoint_details) / [`set_endpoint_details(Option<EndpointDetails>)`](crate::client::fluent_builders::CreateServer::set_endpoint_details): <p>The virtual private cloud (VPC) endpoint settings that are configured for your server. When you host your endpoint within your VPC, you can make your endpoint accessible only to resources within your VPC, or you can attach Elastic IP addresses and make your endpoint accessible to clients over the internet. Your VPC's default security groups are automatically assigned to your endpoint.</p>
    ///   - [`endpoint_type(EndpointType)`](crate::client::fluent_builders::CreateServer::endpoint_type) / [`set_endpoint_type(Option<EndpointType>)`](crate::client::fluent_builders::CreateServer::set_endpoint_type): <p>The type of endpoint that you want your server to use. You can choose to make your server's endpoint publicly accessible (PUBLIC) or host it inside your VPC. With an endpoint that is hosted in a VPC, you can restrict access to your server and resources only within your VPC or choose to make it internet facing by attaching Elastic IP addresses directly to it.</p> <note>   <p> After May 19, 2021, you won't be able to create a server using <code>EndpointType=VPC_ENDPOINT</code> in your Amazon Web Services account if your account hasn't already done so before May 19, 2021. If you have already created servers with <code>EndpointType=VPC_ENDPOINT</code> in your Amazon Web Services account on or before May 19, 2021, you will not be affected. After this date, use <code>EndpointType</code>=<code>VPC</code>.</p>   <p>For more information, see https://docs.aws.amazon.com/transfer/latest/userguide/create-server-in-vpc.html#deprecate-vpc-endpoint.</p>   <p>It is recommended that you use <code>VPC</code> as the <code>EndpointType</code>. With this endpoint type, you have the option to directly associate up to three Elastic IPv4 addresses (BYO IP included) with your server's endpoint and use VPC security groups to restrict traffic by the client's public IP address. This is not possible with <code>EndpointType</code> set to <code>VPC_ENDPOINT</code>.</p>  </note>
    ///   - [`host_key(impl Into<String>)`](crate::client::fluent_builders::CreateServer::host_key) / [`set_host_key(Option<String>)`](crate::client::fluent_builders::CreateServer::set_host_key): <p>The RSA, ECDSA, or ED25519 private key to use for your SFTP-enabled server. You can add multiple host keys, in case you want to rotate keys, or have a set of active keys that use different algorithms.</p>  <p>Use the following command to generate an RSA 2048 bit key with no passphrase:</p>  <p> <code>ssh-keygen -t rsa -b 2048 -N "" -m PEM -f my-new-server-key</code>.</p>  <p>Use a minimum value of 2048 for the <code>-b</code> option. You can create a stronger key by using 3072 or 4096.</p>  <p>Use the following command to generate an ECDSA 256 bit key with no passphrase:</p>  <p> <code>ssh-keygen -t ecdsa -b 256 -N "" -m PEM -f my-new-server-key</code>.</p>  <p>Valid values for the <code>-b</code> option for ECDSA are 256, 384, and 521.</p>  <p>Use the following command to generate an ED25519 key with no passphrase:</p>  <p> <code>ssh-keygen -t ed25519 -N "" -f my-new-server-key</code>.</p>  <p>For all of these commands, you can replace <i>my-new-server-key</i> with a string of your choice.</p> <important>   <p>If you aren't planning to migrate existing users from an existing SFTP-enabled server to a new server, don't update the host key. Accidentally changing a server's host key can be disruptive.</p>  </important>  <p>For more information, see <a href="https://docs.aws.amazon.com/transfer/latest/userguide/edit-server-config.html#configuring-servers-change-host-key">Update host keys for your SFTP-enabled server</a> in the <i>Transfer Family User Guide</i>.</p>
    ///   - [`identity_provider_details(IdentityProviderDetails)`](crate::client::fluent_builders::CreateServer::identity_provider_details) / [`set_identity_provider_details(Option<IdentityProviderDetails>)`](crate::client::fluent_builders::CreateServer::set_identity_provider_details): <p>Required when <code>IdentityProviderType</code> is set to <code>AWS_DIRECTORY_SERVICE</code> or <code>API_GATEWAY</code>. Accepts an array containing all of the information required to use a directory in <code>AWS_DIRECTORY_SERVICE</code> or invoke a customer-supplied authentication API, including the API Gateway URL. Not required when <code>IdentityProviderType</code> is set to <code>SERVICE_MANAGED</code>.</p>
    ///   - [`identity_provider_type(IdentityProviderType)`](crate::client::fluent_builders::CreateServer::identity_provider_type) / [`set_identity_provider_type(Option<IdentityProviderType>)`](crate::client::fluent_builders::CreateServer::set_identity_provider_type): <p>The mode of authentication for a server. The default value is <code>SERVICE_MANAGED</code>, which allows you to store and access user credentials within the Transfer Family service.</p>  <p>Use <code>AWS_DIRECTORY_SERVICE</code> to provide access to Active Directory groups in Directory Service for Microsoft Active Directory or Microsoft Active Directory in your on-premises environment or in Amazon Web Services using AD Connector. This option also requires you to provide a Directory ID by using the <code>IdentityProviderDetails</code> parameter.</p>  <p>Use the <code>API_GATEWAY</code> value to integrate with an identity provider of your choosing. The <code>API_GATEWAY</code> setting requires you to provide an Amazon API Gateway endpoint URL to call for authentication by using the <code>IdentityProviderDetails</code> parameter.</p>  <p>Use the <code>AWS_LAMBDA</code> value to directly use an Lambda function as your identity provider. If you choose this value, you must specify the ARN for the Lambda function in the <code>Function</code> parameter or the <code>IdentityProviderDetails</code> data type.</p>
    ///   - [`logging_role(impl Into<String>)`](crate::client::fluent_builders::CreateServer::logging_role) / [`set_logging_role(Option<String>)`](crate::client::fluent_builders::CreateServer::set_logging_role): <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that allows a server to turn on Amazon CloudWatch logging for Amazon S3 or Amazon EFSevents. When set, you can view user activity in your CloudWatch logs.</p>
    ///   - [`post_authentication_login_banner(impl Into<String>)`](crate::client::fluent_builders::CreateServer::post_authentication_login_banner) / [`set_post_authentication_login_banner(Option<String>)`](crate::client::fluent_builders::CreateServer::set_post_authentication_login_banner): <p>Specifies a string to display when users connect to a server. This string is displayed after the user authenticates.</p> <note>   <p>The SFTP protocol does not support post-authentication display banners.</p>  </note>
    ///   - [`pre_authentication_login_banner(impl Into<String>)`](crate::client::fluent_builders::CreateServer::pre_authentication_login_banner) / [`set_pre_authentication_login_banner(Option<String>)`](crate::client::fluent_builders::CreateServer::set_pre_authentication_login_banner): <p>Specifies a string to display when users connect to a server. This string is displayed before the user authenticates. For example, the following banner displays details about using the system:</p>  <p> <code>This system is for the use of authorized users only. Individuals using this computer system without authority, or in excess of their authority, are subject to having all of their activities on this system monitored and recorded by system personnel.</code> </p>
    ///   - [`protocols(Vec<Protocol>)`](crate::client::fluent_builders::CreateServer::protocols) / [`set_protocols(Option<Vec<Protocol>>)`](crate::client::fluent_builders::CreateServer::set_protocols): <p>Specifies the file transfer protocol or protocols over which your file transfer protocol client can connect to your server's endpoint. The available protocols are:</p>  <ul>   <li> <p> <code>SFTP</code> (Secure Shell (SSH) File Transfer Protocol): File transfer over SSH</p> </li>   <li> <p> <code>FTPS</code> (File Transfer Protocol Secure): File transfer with TLS encryption</p> </li>   <li> <p> <code>FTP</code> (File Transfer Protocol): Unencrypted file transfer</p> </li>   <li> <p> <code>AS2</code> (Applicability Statement 2): used for transporting structured business-to-business data</p> </li>  </ul> <note>   <ul>    <li> <p>If you select <code>FTPS</code>, you must choose a certificate stored in Certificate Manager (ACM) which is used to identify your server when clients connect to it over FTPS.</p> </li>    <li> <p>If <code>Protocol</code> includes either <code>FTP</code> or <code>FTPS</code>, then the <code>EndpointType</code> must be <code>VPC</code> and the <code>IdentityProviderType</code> must be <code>AWS_DIRECTORY_SERVICE</code> or <code>API_GATEWAY</code>.</p> </li>    <li> <p>If <code>Protocol</code> includes <code>FTP</code>, then <code>AddressAllocationIds</code> cannot be associated.</p> </li>    <li> <p>If <code>Protocol</code> is set only to <code>SFTP</code>, the <code>EndpointType</code> can be set to <code>PUBLIC</code> and the <code>IdentityProviderType</code> can be set to <code>SERVICE_MANAGED</code>.</p> </li>    <li> <p>If <code>Protocol</code> includes <code>AS2</code>, then the <code>EndpointType</code> must be <code>VPC</code>, and domain must be Amazon S3.</p> </li>   </ul>  </note>
    ///   - [`protocol_details(ProtocolDetails)`](crate::client::fluent_builders::CreateServer::protocol_details) / [`set_protocol_details(Option<ProtocolDetails>)`](crate::client::fluent_builders::CreateServer::set_protocol_details): <p>The protocol settings that are configured for your server.</p>  <ul>   <li> <p> To indicate passive mode (for FTP and FTPS protocols), use the <code>PassiveIp</code> parameter. Enter a single dotted-quad IPv4 address, such as the external IP address of a firewall, router, or load balancer. </p> </li>   <li> <p>To ignore the error that is generated when the client attempts to use the <code>SETSTAT</code> command on a file that you are uploading to an Amazon S3 bucket, use the <code>SetStatOption</code> parameter. To have the Transfer Family server ignore the <code>SETSTAT</code> command and upload files without needing to make any changes to your SFTP client, set the value to <code>ENABLE_NO_OP</code>. If you set the <code>SetStatOption</code> parameter to <code>ENABLE_NO_OP</code>, Transfer Family generates a log entry to Amazon CloudWatch Logs, so that you can determine when the client is making a <code>SETSTAT</code> call.</p> </li>   <li> <p>To determine whether your Transfer Family server resumes recent, negotiated sessions through a unique session ID, use the <code>TlsSessionResumptionMode</code> parameter.</p> </li>   <li> <p> <code>As2Transports</code> indicates the transport method for the AS2 messages. Currently, only HTTP is supported.</p> </li>  </ul>
    ///   - [`security_policy_name(impl Into<String>)`](crate::client::fluent_builders::CreateServer::security_policy_name) / [`set_security_policy_name(Option<String>)`](crate::client::fluent_builders::CreateServer::set_security_policy_name): <p>Specifies the name of the security policy that is attached to the server.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateServer::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateServer::set_tags): <p>Key-value pairs that can be used to group and search for servers.</p>
    ///   - [`workflow_details(WorkflowDetails)`](crate::client::fluent_builders::CreateServer::workflow_details) / [`set_workflow_details(Option<WorkflowDetails>)`](crate::client::fluent_builders::CreateServer::set_workflow_details): <p>Specifies the workflow ID for the workflow to assign and the execution role that's used for executing the workflow.</p>  <p>In additon to a workflow to execute when a file is uploaded completely, <code>WorkflowDeatails</code> can also contain a workflow ID (and execution role) for a workflow to execute on partial upload. A partial upload occurs when a file is open when the session disconnects.</p>
    /// - On success, responds with [`CreateServerOutput`](crate::output::CreateServerOutput) with field(s):
    ///   - [`server_id(Option<String>)`](crate::output::CreateServerOutput::server_id): <p>The service-assigned identifier of the server that is created.</p>
    /// - On failure, responds with [`SdkError<CreateServerError>`](crate::error::CreateServerError)
    pub fn create_server(&self) -> crate::client::fluent_builders::CreateServer {
        crate::client::fluent_builders::CreateServer::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateUser`](crate::client::fluent_builders::CreateUser) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`home_directory(impl Into<String>)`](crate::client::fluent_builders::CreateUser::home_directory) / [`set_home_directory(Option<String>)`](crate::client::fluent_builders::CreateUser::set_home_directory): <p>The landing directory (folder) for a user when they log in to the server using the client.</p>  <p>A <code>HomeDirectory</code> example is <code>/bucket_name/home/mydirectory</code>.</p>
    ///   - [`home_directory_type(HomeDirectoryType)`](crate::client::fluent_builders::CreateUser::home_directory_type) / [`set_home_directory_type(Option<HomeDirectoryType>)`](crate::client::fluent_builders::CreateUser::set_home_directory_type): <p>The type of landing directory (folder) that you want your users' home directory to be when they log in to the server. If you set it to <code>PATH</code>, the user will see the absolute Amazon S3 bucket or EFS paths as is in their file transfer protocol clients. If you set it <code>LOGICAL</code>, you need to provide mappings in the <code>HomeDirectoryMappings</code> for how you want to make Amazon S3 or Amazon EFS paths visible to your users.</p>
    ///   - [`home_directory_mappings(Vec<HomeDirectoryMapEntry>)`](crate::client::fluent_builders::CreateUser::home_directory_mappings) / [`set_home_directory_mappings(Option<Vec<HomeDirectoryMapEntry>>)`](crate::client::fluent_builders::CreateUser::set_home_directory_mappings): <p>Logical directory mappings that specify what Amazon S3 or Amazon EFS paths and keys should be visible to your user and how you want to make them visible. You must specify the <code>Entry</code> and <code>Target</code> pair, where <code>Entry</code> shows how the path is made visible and <code>Target</code> is the actual Amazon S3 or Amazon EFS path. If you only specify a target, it is displayed as is. You also must ensure that your Identity and Access Management (IAM) role provides access to paths in <code>Target</code>. This value can be set only when <code>HomeDirectoryType</code> is set to <i>LOGICAL</i>.</p>  <p>The following is an <code>Entry</code> and <code>Target</code> pair example.</p>  <p> <code>[ { "Entry": "/directory1", "Target": "/bucket_name/home/mydirectory" } ]</code> </p>  <p>In most cases, you can use this value instead of the session policy to lock your user down to the designated home directory ("<code>chroot</code>"). To do this, you can set <code>Entry</code> to <code>/</code> and set <code>Target</code> to the HomeDirectory parameter value.</p>  <p>The following is an <code>Entry</code> and <code>Target</code> pair example for <code>chroot</code>.</p>  <p> <code>[ { "Entry": "/", "Target": "/bucket_name/home/mydirectory" } ]</code> </p>
    ///   - [`policy(impl Into<String>)`](crate::client::fluent_builders::CreateUser::policy) / [`set_policy(Option<String>)`](crate::client::fluent_builders::CreateUser::set_policy): <p>A session policy for your user so that you can use the same Identity and Access Management (IAM) role across multiple users. This policy scopes down a user's access to portions of their Amazon S3 bucket. Variables that you can use inside this policy include <code>${Transfer:UserName}</code>, <code>${Transfer:HomeDirectory}</code>, and <code>${Transfer:HomeBucket}</code>.</p> <note>   <p>This policy applies only when the domain of <code>ServerId</code> is Amazon S3. Amazon EFS does not use session policies.</p>   <p>For session policies, Transfer Family stores the policy as a JSON blob, instead of the Amazon Resource Name (ARN) of the policy. You save the policy as a JSON blob and pass it in the <code>Policy</code> argument.</p>   <p>For an example of a session policy, see <a href="https://docs.aws.amazon.com/transfer/latest/userguide/session-policy.html">Example session policy</a>.</p>   <p>For more information, see <a href="https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html">AssumeRole</a> in the <i>Amazon Web Services Security Token Service API Reference</i>.</p>  </note>
    ///   - [`posix_profile(PosixProfile)`](crate::client::fluent_builders::CreateUser::posix_profile) / [`set_posix_profile(Option<PosixProfile>)`](crate::client::fluent_builders::CreateUser::set_posix_profile): <p>Specifies the full POSIX identity, including user ID (<code>Uid</code>), group ID (<code>Gid</code>), and any secondary groups IDs (<code>SecondaryGids</code>), that controls your users' access to your Amazon EFS file systems. The POSIX permissions that are set on files and directories in Amazon EFS determine the level of access your users get when transferring files into and out of your Amazon EFS file systems.</p>
    ///   - [`role(impl Into<String>)`](crate::client::fluent_builders::CreateUser::role) / [`set_role(Option<String>)`](crate::client::fluent_builders::CreateUser::set_role): <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that controls your users' access to your Amazon S3 bucket or Amazon EFS file system. The policies attached to this role determine the level of access that you want to provide your users when transferring files into and out of your Amazon S3 bucket or Amazon EFS file system. The IAM role should also contain a trust relationship that allows the server to access your resources when servicing your users' transfer requests.</p>
    ///   - [`server_id(impl Into<String>)`](crate::client::fluent_builders::CreateUser::server_id) / [`set_server_id(Option<String>)`](crate::client::fluent_builders::CreateUser::set_server_id): <p>A system-assigned unique identifier for a server instance. This is the specific server that you added your user to.</p>
    ///   - [`ssh_public_key_body(impl Into<String>)`](crate::client::fluent_builders::CreateUser::ssh_public_key_body) / [`set_ssh_public_key_body(Option<String>)`](crate::client::fluent_builders::CreateUser::set_ssh_public_key_body): <p>The public portion of the Secure Shell (SSH) key used to authenticate the user to the server.</p>  <p>Transfer Family accepts RSA, ECDSA, and ED25519 keys.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateUser::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateUser::set_tags): <p>Key-value pairs that can be used to group and search for users. Tags are metadata attached to users for any purpose.</p>
    ///   - [`user_name(impl Into<String>)`](crate::client::fluent_builders::CreateUser::user_name) / [`set_user_name(Option<String>)`](crate::client::fluent_builders::CreateUser::set_user_name): <p>A unique string that identifies a user and is associated with a <code>ServerId</code>. This user name must be a minimum of 3 and a maximum of 100 characters long. The following are valid characters: a-z, A-Z, 0-9, underscore '_', hyphen '-', period '.', and at sign '@'. The user name can't start with a hyphen, period, or at sign.</p>
    /// - On success, responds with [`CreateUserOutput`](crate::output::CreateUserOutput) with field(s):
    ///   - [`server_id(Option<String>)`](crate::output::CreateUserOutput::server_id): <p>The identifier of the server that the user is attached to.</p>
    ///   - [`user_name(Option<String>)`](crate::output::CreateUserOutput::user_name): <p>A unique string that identifies a user account associated with a server.</p>
    /// - On failure, responds with [`SdkError<CreateUserError>`](crate::error::CreateUserError)
    pub fn create_user(&self) -> crate::client::fluent_builders::CreateUser {
        crate::client::fluent_builders::CreateUser::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateWorkflow`](crate::client::fluent_builders::CreateWorkflow) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateWorkflow::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateWorkflow::set_description): <p>A textual description for the workflow.</p>
    ///   - [`steps(Vec<WorkflowStep>)`](crate::client::fluent_builders::CreateWorkflow::steps) / [`set_steps(Option<Vec<WorkflowStep>>)`](crate::client::fluent_builders::CreateWorkflow::set_steps): <p>Specifies the details for the steps that are in the specified workflow.</p>  <p> The <code>TYPE</code> specifies which of the following actions is being taken for this step. </p>  <ul>   <li> <p> <i>COPY</i>: Copy the file to another location.</p> </li>   <li> <p> <i>CUSTOM</i>: Perform a custom step with an Lambda function target.</p> </li>   <li> <p> <i>DELETE</i>: Delete the file.</p> </li>   <li> <p> <i>TAG</i>: Add a tag to the file.</p> </li>  </ul> <note>   <p> Currently, copying and tagging are supported only on S3. </p>  </note>  <p> For file location, you specify either the S3 bucket and key, or the EFS file system ID and path. </p>
    ///   - [`on_exception_steps(Vec<WorkflowStep>)`](crate::client::fluent_builders::CreateWorkflow::on_exception_steps) / [`set_on_exception_steps(Option<Vec<WorkflowStep>>)`](crate::client::fluent_builders::CreateWorkflow::set_on_exception_steps): <p>Specifies the steps (actions) to take if errors are encountered during execution of the workflow.</p> <note>   <p>For custom steps, the lambda function needs to send <code>FAILURE</code> to the call back API to kick off the exception steps. Additionally, if the lambda does not send <code>SUCCESS</code> before it times out, the exception steps are executed.</p>  </note>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateWorkflow::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateWorkflow::set_tags): <p>Key-value pairs that can be used to group and search for workflows. Tags are metadata attached to workflows for any purpose.</p>
    /// - On success, responds with [`CreateWorkflowOutput`](crate::output::CreateWorkflowOutput) with field(s):
    ///   - [`workflow_id(Option<String>)`](crate::output::CreateWorkflowOutput::workflow_id): <p>A unique identifier for the workflow.</p>
    /// - On failure, responds with [`SdkError<CreateWorkflowError>`](crate::error::CreateWorkflowError)
    pub fn create_workflow(&self) -> crate::client::fluent_builders::CreateWorkflow {
        crate::client::fluent_builders::CreateWorkflow::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteAccess`](crate::client::fluent_builders::DeleteAccess) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`server_id(impl Into<String>)`](crate::client::fluent_builders::DeleteAccess::server_id) / [`set_server_id(Option<String>)`](crate::client::fluent_builders::DeleteAccess::set_server_id): <p>A system-assigned unique identifier for a server that has this user assigned.</p>
    ///   - [`external_id(impl Into<String>)`](crate::client::fluent_builders::DeleteAccess::external_id) / [`set_external_id(Option<String>)`](crate::client::fluent_builders::DeleteAccess::set_external_id): <p>A unique identifier that is required to identify specific groups within your directory. The users of the group that you associate have access to your Amazon S3 or Amazon EFS resources over the enabled protocols using Transfer Family. If you know the group name, you can view the SID values by running the following command using Windows PowerShell.</p>  <p> <code>Get-ADGroup -Filter {samAccountName -like "<i>YourGroupName</i>*"} -Properties * | Select SamAccountName,ObjectSid</code> </p>  <p>In that command, replace <i>YourGroupName</i> with the name of your Active Directory group.</p>  <p>The regular expression used to validate this parameter is a string of characters consisting of uppercase and lowercase alphanumeric characters with no spaces. You can also include underscores or any of the following characters: =,.@:/-</p>
    /// - On success, responds with [`DeleteAccessOutput`](crate::output::DeleteAccessOutput)

    /// - On failure, responds with [`SdkError<DeleteAccessError>`](crate::error::DeleteAccessError)
    pub fn delete_access(&self) -> crate::client::fluent_builders::DeleteAccess {
        crate::client::fluent_builders::DeleteAccess::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteAgreement`](crate::client::fluent_builders::DeleteAgreement) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`agreement_id(impl Into<String>)`](crate::client::fluent_builders::DeleteAgreement::agreement_id) / [`set_agreement_id(Option<String>)`](crate::client::fluent_builders::DeleteAgreement::set_agreement_id): <p>A unique identifier for the agreement. This identifier is returned when you create an agreement.</p>
    ///   - [`server_id(impl Into<String>)`](crate::client::fluent_builders::DeleteAgreement::server_id) / [`set_server_id(Option<String>)`](crate::client::fluent_builders::DeleteAgreement::set_server_id): <p>The server identifier associated with the agreement that you are deleting.</p>
    /// - On success, responds with [`DeleteAgreementOutput`](crate::output::DeleteAgreementOutput)

    /// - On failure, responds with [`SdkError<DeleteAgreementError>`](crate::error::DeleteAgreementError)
    pub fn delete_agreement(&self) -> crate::client::fluent_builders::DeleteAgreement {
        crate::client::fluent_builders::DeleteAgreement::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteCertificate`](crate::client::fluent_builders::DeleteCertificate) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`certificate_id(impl Into<String>)`](crate::client::fluent_builders::DeleteCertificate::certificate_id) / [`set_certificate_id(Option<String>)`](crate::client::fluent_builders::DeleteCertificate::set_certificate_id): <p>The identifier of the certificate object that you are deleting.</p>
    /// - On success, responds with [`DeleteCertificateOutput`](crate::output::DeleteCertificateOutput)

    /// - On failure, responds with [`SdkError<DeleteCertificateError>`](crate::error::DeleteCertificateError)
    pub fn delete_certificate(&self) -> crate::client::fluent_builders::DeleteCertificate {
        crate::client::fluent_builders::DeleteCertificate::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteConnector`](crate::client::fluent_builders::DeleteConnector) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`connector_id(impl Into<String>)`](crate::client::fluent_builders::DeleteConnector::connector_id) / [`set_connector_id(Option<String>)`](crate::client::fluent_builders::DeleteConnector::set_connector_id): <p>The unique identifier for the connector.</p>
    /// - On success, responds with [`DeleteConnectorOutput`](crate::output::DeleteConnectorOutput)

    /// - On failure, responds with [`SdkError<DeleteConnectorError>`](crate::error::DeleteConnectorError)
    pub fn delete_connector(&self) -> crate::client::fluent_builders::DeleteConnector {
        crate::client::fluent_builders::DeleteConnector::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteHostKey`](crate::client::fluent_builders::DeleteHostKey) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`server_id(impl Into<String>)`](crate::client::fluent_builders::DeleteHostKey::server_id) / [`set_server_id(Option<String>)`](crate::client::fluent_builders::DeleteHostKey::set_server_id): <p>The identifier of the server that contains the host key that you are deleting.</p>
    ///   - [`host_key_id(impl Into<String>)`](crate::client::fluent_builders::DeleteHostKey::host_key_id) / [`set_host_key_id(Option<String>)`](crate::client::fluent_builders::DeleteHostKey::set_host_key_id): <p>The identifier of the host key that you are deleting.</p>
    /// - On success, responds with [`DeleteHostKeyOutput`](crate::output::DeleteHostKeyOutput)

    /// - On failure, responds with [`SdkError<DeleteHostKeyError>`](crate::error::DeleteHostKeyError)
    pub fn delete_host_key(&self) -> crate::client::fluent_builders::DeleteHostKey {
        crate::client::fluent_builders::DeleteHostKey::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteProfile`](crate::client::fluent_builders::DeleteProfile) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`profile_id(impl Into<String>)`](crate::client::fluent_builders::DeleteProfile::profile_id) / [`set_profile_id(Option<String>)`](crate::client::fluent_builders::DeleteProfile::set_profile_id): <p>The identifier of the profile that you are deleting.</p>
    /// - On success, responds with [`DeleteProfileOutput`](crate::output::DeleteProfileOutput)

    /// - On failure, responds with [`SdkError<DeleteProfileError>`](crate::error::DeleteProfileError)
    pub fn delete_profile(&self) -> crate::client::fluent_builders::DeleteProfile {
        crate::client::fluent_builders::DeleteProfile::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteServer`](crate::client::fluent_builders::DeleteServer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`server_id(impl Into<String>)`](crate::client::fluent_builders::DeleteServer::server_id) / [`set_server_id(Option<String>)`](crate::client::fluent_builders::DeleteServer::set_server_id): <p>A unique system-assigned identifier for a server instance.</p>
    /// - On success, responds with [`DeleteServerOutput`](crate::output::DeleteServerOutput)

    /// - On failure, responds with [`SdkError<DeleteServerError>`](crate::error::DeleteServerError)
    pub fn delete_server(&self) -> crate::client::fluent_builders::DeleteServer {
        crate::client::fluent_builders::DeleteServer::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteSshPublicKey`](crate::client::fluent_builders::DeleteSshPublicKey) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`server_id(impl Into<String>)`](crate::client::fluent_builders::DeleteSshPublicKey::server_id) / [`set_server_id(Option<String>)`](crate::client::fluent_builders::DeleteSshPublicKey::set_server_id): <p>A system-assigned unique identifier for a file transfer protocol-enabled server instance that has the user assigned to it.</p>
    ///   - [`ssh_public_key_id(impl Into<String>)`](crate::client::fluent_builders::DeleteSshPublicKey::ssh_public_key_id) / [`set_ssh_public_key_id(Option<String>)`](crate::client::fluent_builders::DeleteSshPublicKey::set_ssh_public_key_id): <p>A unique identifier used to reference your user's specific SSH key.</p>
    ///   - [`user_name(impl Into<String>)`](crate::client::fluent_builders::DeleteSshPublicKey::user_name) / [`set_user_name(Option<String>)`](crate::client::fluent_builders::DeleteSshPublicKey::set_user_name): <p>A unique string that identifies a user whose public key is being deleted.</p>
    /// - On success, responds with [`DeleteSshPublicKeyOutput`](crate::output::DeleteSshPublicKeyOutput)

    /// - On failure, responds with [`SdkError<DeleteSshPublicKeyError>`](crate::error::DeleteSshPublicKeyError)
    pub fn delete_ssh_public_key(&self) -> crate::client::fluent_builders::DeleteSshPublicKey {
        crate::client::fluent_builders::DeleteSshPublicKey::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteUser`](crate::client::fluent_builders::DeleteUser) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`server_id(impl Into<String>)`](crate::client::fluent_builders::DeleteUser::server_id) / [`set_server_id(Option<String>)`](crate::client::fluent_builders::DeleteUser::set_server_id): <p>A system-assigned unique identifier for a server instance that has the user assigned to it.</p>
    ///   - [`user_name(impl Into<String>)`](crate::client::fluent_builders::DeleteUser::user_name) / [`set_user_name(Option<String>)`](crate::client::fluent_builders::DeleteUser::set_user_name): <p>A unique string that identifies a user that is being deleted from a server.</p>
    /// - On success, responds with [`DeleteUserOutput`](crate::output::DeleteUserOutput)

    /// - On failure, responds with [`SdkError<DeleteUserError>`](crate::error::DeleteUserError)
    pub fn delete_user(&self) -> crate::client::fluent_builders::DeleteUser {
        crate::client::fluent_builders::DeleteUser::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteWorkflow`](crate::client::fluent_builders::DeleteWorkflow) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workflow_id(impl Into<String>)`](crate::client::fluent_builders::DeleteWorkflow::workflow_id) / [`set_workflow_id(Option<String>)`](crate::client::fluent_builders::DeleteWorkflow::set_workflow_id): <p>A unique identifier for the workflow.</p>
    /// - On success, responds with [`DeleteWorkflowOutput`](crate::output::DeleteWorkflowOutput)

    /// - On failure, responds with [`SdkError<DeleteWorkflowError>`](crate::error::DeleteWorkflowError)
    pub fn delete_workflow(&self) -> crate::client::fluent_builders::DeleteWorkflow {
        crate::client::fluent_builders::DeleteWorkflow::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeAccess`](crate::client::fluent_builders::DescribeAccess) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`server_id(impl Into<String>)`](crate::client::fluent_builders::DescribeAccess::server_id) / [`set_server_id(Option<String>)`](crate::client::fluent_builders::DescribeAccess::set_server_id): <p>A system-assigned unique identifier for a server that has this access assigned.</p>
    ///   - [`external_id(impl Into<String>)`](crate::client::fluent_builders::DescribeAccess::external_id) / [`set_external_id(Option<String>)`](crate::client::fluent_builders::DescribeAccess::set_external_id): <p>A unique identifier that is required to identify specific groups within your directory. The users of the group that you associate have access to your Amazon S3 or Amazon EFS resources over the enabled protocols using Transfer Family. If you know the group name, you can view the SID values by running the following command using Windows PowerShell.</p>  <p> <code>Get-ADGroup -Filter {samAccountName -like "<i>YourGroupName</i>*"} -Properties * | Select SamAccountName,ObjectSid</code> </p>  <p>In that command, replace <i>YourGroupName</i> with the name of your Active Directory group.</p>  <p>The regular expression used to validate this parameter is a string of characters consisting of uppercase and lowercase alphanumeric characters with no spaces. You can also include underscores or any of the following characters: =,.@:/-</p>
    /// - On success, responds with [`DescribeAccessOutput`](crate::output::DescribeAccessOutput) with field(s):
    ///   - [`server_id(Option<String>)`](crate::output::DescribeAccessOutput::server_id): <p>A system-assigned unique identifier for a server that has this access assigned.</p>
    ///   - [`access(Option<DescribedAccess>)`](crate::output::DescribeAccessOutput::access): <p>The external identifier of the server that the access is attached to.</p>
    /// - On failure, responds with [`SdkError<DescribeAccessError>`](crate::error::DescribeAccessError)
    pub fn describe_access(&self) -> crate::client::fluent_builders::DescribeAccess {
        crate::client::fluent_builders::DescribeAccess::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeAgreement`](crate::client::fluent_builders::DescribeAgreement) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`agreement_id(impl Into<String>)`](crate::client::fluent_builders::DescribeAgreement::agreement_id) / [`set_agreement_id(Option<String>)`](crate::client::fluent_builders::DescribeAgreement::set_agreement_id): <p>A unique identifier for the agreement. This identifier is returned when you create an agreement.</p>
    ///   - [`server_id(impl Into<String>)`](crate::client::fluent_builders::DescribeAgreement::server_id) / [`set_server_id(Option<String>)`](crate::client::fluent_builders::DescribeAgreement::set_server_id): <p>The server identifier that's associated with the agreement.</p>
    /// - On success, responds with [`DescribeAgreementOutput`](crate::output::DescribeAgreementOutput) with field(s):
    ///   - [`agreement(Option<DescribedAgreement>)`](crate::output::DescribeAgreementOutput::agreement): <p>The details for the specified agreement, returned as a <code>DescribedAgreement</code> object.</p>
    /// - On failure, responds with [`SdkError<DescribeAgreementError>`](crate::error::DescribeAgreementError)
    pub fn describe_agreement(&self) -> crate::client::fluent_builders::DescribeAgreement {
        crate::client::fluent_builders::DescribeAgreement::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeCertificate`](crate::client::fluent_builders::DescribeCertificate) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`certificate_id(impl Into<String>)`](crate::client::fluent_builders::DescribeCertificate::certificate_id) / [`set_certificate_id(Option<String>)`](crate::client::fluent_builders::DescribeCertificate::set_certificate_id): <p>An array of identifiers for the imported certificates. You use this identifier for working with profiles and partner profiles.</p>
    /// - On success, responds with [`DescribeCertificateOutput`](crate::output::DescribeCertificateOutput) with field(s):
    ///   - [`certificate(Option<DescribedCertificate>)`](crate::output::DescribeCertificateOutput::certificate): <p>The details for the specified certificate, returned as an object.</p>
    /// - On failure, responds with [`SdkError<DescribeCertificateError>`](crate::error::DescribeCertificateError)
    pub fn describe_certificate(&self) -> crate::client::fluent_builders::DescribeCertificate {
        crate::client::fluent_builders::DescribeCertificate::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeConnector`](crate::client::fluent_builders::DescribeConnector) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`connector_id(impl Into<String>)`](crate::client::fluent_builders::DescribeConnector::connector_id) / [`set_connector_id(Option<String>)`](crate::client::fluent_builders::DescribeConnector::set_connector_id): <p>The unique identifier for the connector.</p>
    /// - On success, responds with [`DescribeConnectorOutput`](crate::output::DescribeConnectorOutput) with field(s):
    ///   - [`connector(Option<DescribedConnector>)`](crate::output::DescribeConnectorOutput::connector): <p>The structure that contains the details of the connector.</p>
    /// - On failure, responds with [`SdkError<DescribeConnectorError>`](crate::error::DescribeConnectorError)
    pub fn describe_connector(&self) -> crate::client::fluent_builders::DescribeConnector {
        crate::client::fluent_builders::DescribeConnector::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeExecution`](crate::client::fluent_builders::DescribeExecution) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`execution_id(impl Into<String>)`](crate::client::fluent_builders::DescribeExecution::execution_id) / [`set_execution_id(Option<String>)`](crate::client::fluent_builders::DescribeExecution::set_execution_id): <p>A unique identifier for the execution of a workflow.</p>
    ///   - [`workflow_id(impl Into<String>)`](crate::client::fluent_builders::DescribeExecution::workflow_id) / [`set_workflow_id(Option<String>)`](crate::client::fluent_builders::DescribeExecution::set_workflow_id): <p>A unique identifier for the workflow.</p>
    /// - On success, responds with [`DescribeExecutionOutput`](crate::output::DescribeExecutionOutput) with field(s):
    ///   - [`workflow_id(Option<String>)`](crate::output::DescribeExecutionOutput::workflow_id): <p>A unique identifier for the workflow.</p>
    ///   - [`execution(Option<DescribedExecution>)`](crate::output::DescribeExecutionOutput::execution): <p>The structure that contains the details of the workflow' execution.</p>
    /// - On failure, responds with [`SdkError<DescribeExecutionError>`](crate::error::DescribeExecutionError)
    pub fn describe_execution(&self) -> crate::client::fluent_builders::DescribeExecution {
        crate::client::fluent_builders::DescribeExecution::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeHostKey`](crate::client::fluent_builders::DescribeHostKey) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`server_id(impl Into<String>)`](crate::client::fluent_builders::DescribeHostKey::server_id) / [`set_server_id(Option<String>)`](crate::client::fluent_builders::DescribeHostKey::set_server_id): <p>The identifier of the server that contains the host key that you want described.</p>
    ///   - [`host_key_id(impl Into<String>)`](crate::client::fluent_builders::DescribeHostKey::host_key_id) / [`set_host_key_id(Option<String>)`](crate::client::fluent_builders::DescribeHostKey::set_host_key_id): <p>The identifier of the host key that you want described.</p>
    /// - On success, responds with [`DescribeHostKeyOutput`](crate::output::DescribeHostKeyOutput) with field(s):
    ///   - [`host_key(Option<DescribedHostKey>)`](crate::output::DescribeHostKeyOutput::host_key): <p>Returns the details for the specified host key.</p>
    /// - On failure, responds with [`SdkError<DescribeHostKeyError>`](crate::error::DescribeHostKeyError)
    pub fn describe_host_key(&self) -> crate::client::fluent_builders::DescribeHostKey {
        crate::client::fluent_builders::DescribeHostKey::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeProfile`](crate::client::fluent_builders::DescribeProfile) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`profile_id(impl Into<String>)`](crate::client::fluent_builders::DescribeProfile::profile_id) / [`set_profile_id(Option<String>)`](crate::client::fluent_builders::DescribeProfile::set_profile_id): <p>The identifier of the profile that you want described.</p>
    /// - On success, responds with [`DescribeProfileOutput`](crate::output::DescribeProfileOutput) with field(s):
    ///   - [`profile(Option<DescribedProfile>)`](crate::output::DescribeProfileOutput::profile): <p>The details of the specified profile, returned as an object.</p>
    /// - On failure, responds with [`SdkError<DescribeProfileError>`](crate::error::DescribeProfileError)
    pub fn describe_profile(&self) -> crate::client::fluent_builders::DescribeProfile {
        crate::client::fluent_builders::DescribeProfile::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeSecurityPolicy`](crate::client::fluent_builders::DescribeSecurityPolicy) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`security_policy_name(impl Into<String>)`](crate::client::fluent_builders::DescribeSecurityPolicy::security_policy_name) / [`set_security_policy_name(Option<String>)`](crate::client::fluent_builders::DescribeSecurityPolicy::set_security_policy_name): <p>Specifies the name of the security policy that is attached to the server.</p>
    /// - On success, responds with [`DescribeSecurityPolicyOutput`](crate::output::DescribeSecurityPolicyOutput) with field(s):
    ///   - [`security_policy(Option<DescribedSecurityPolicy>)`](crate::output::DescribeSecurityPolicyOutput::security_policy): <p>An array containing the properties of the security policy.</p>
    /// - On failure, responds with [`SdkError<DescribeSecurityPolicyError>`](crate::error::DescribeSecurityPolicyError)
    pub fn describe_security_policy(
        &self,
    ) -> crate::client::fluent_builders::DescribeSecurityPolicy {
        crate::client::fluent_builders::DescribeSecurityPolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeServer`](crate::client::fluent_builders::DescribeServer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`server_id(impl Into<String>)`](crate::client::fluent_builders::DescribeServer::server_id) / [`set_server_id(Option<String>)`](crate::client::fluent_builders::DescribeServer::set_server_id): <p>A system-assigned unique identifier for a server.</p>
    /// - On success, responds with [`DescribeServerOutput`](crate::output::DescribeServerOutput) with field(s):
    ///   - [`server(Option<DescribedServer>)`](crate::output::DescribeServerOutput::server): <p>An array containing the properties of a server with the <code>ServerID</code> you specified.</p>
    /// - On failure, responds with [`SdkError<DescribeServerError>`](crate::error::DescribeServerError)
    pub fn describe_server(&self) -> crate::client::fluent_builders::DescribeServer {
        crate::client::fluent_builders::DescribeServer::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeUser`](crate::client::fluent_builders::DescribeUser) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`server_id(impl Into<String>)`](crate::client::fluent_builders::DescribeUser::server_id) / [`set_server_id(Option<String>)`](crate::client::fluent_builders::DescribeUser::set_server_id): <p>A system-assigned unique identifier for a server that has this user assigned.</p>
    ///   - [`user_name(impl Into<String>)`](crate::client::fluent_builders::DescribeUser::user_name) / [`set_user_name(Option<String>)`](crate::client::fluent_builders::DescribeUser::set_user_name): <p>The name of the user assigned to one or more servers. User names are part of the sign-in credentials to use the Transfer Family service and perform file transfer tasks.</p>
    /// - On success, responds with [`DescribeUserOutput`](crate::output::DescribeUserOutput) with field(s):
    ///   - [`server_id(Option<String>)`](crate::output::DescribeUserOutput::server_id): <p>A system-assigned unique identifier for a server that has this user assigned.</p>
    ///   - [`user(Option<DescribedUser>)`](crate::output::DescribeUserOutput::user): <p>An array containing the properties of the user account for the <code>ServerID</code> value that you specified.</p>
    /// - On failure, responds with [`SdkError<DescribeUserError>`](crate::error::DescribeUserError)
    pub fn describe_user(&self) -> crate::client::fluent_builders::DescribeUser {
        crate::client::fluent_builders::DescribeUser::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeWorkflow`](crate::client::fluent_builders::DescribeWorkflow) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workflow_id(impl Into<String>)`](crate::client::fluent_builders::DescribeWorkflow::workflow_id) / [`set_workflow_id(Option<String>)`](crate::client::fluent_builders::DescribeWorkflow::set_workflow_id): <p>A unique identifier for the workflow.</p>
    /// - On success, responds with [`DescribeWorkflowOutput`](crate::output::DescribeWorkflowOutput) with field(s):
    ///   - [`workflow(Option<DescribedWorkflow>)`](crate::output::DescribeWorkflowOutput::workflow): <p>The structure that contains the details of the workflow.</p>
    /// - On failure, responds with [`SdkError<DescribeWorkflowError>`](crate::error::DescribeWorkflowError)
    pub fn describe_workflow(&self) -> crate::client::fluent_builders::DescribeWorkflow {
        crate::client::fluent_builders::DescribeWorkflow::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ImportCertificate`](crate::client::fluent_builders::ImportCertificate) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`usage(CertificateUsageType)`](crate::client::fluent_builders::ImportCertificate::usage) / [`set_usage(Option<CertificateUsageType>)`](crate::client::fluent_builders::ImportCertificate::set_usage): <p>Specifies whether this certificate is used for signing or encryption.</p>
    ///   - [`certificate(impl Into<String>)`](crate::client::fluent_builders::ImportCertificate::certificate) / [`set_certificate(Option<String>)`](crate::client::fluent_builders::ImportCertificate::set_certificate): <p>The file that contains the certificate to import.</p>
    ///   - [`certificate_chain(impl Into<String>)`](crate::client::fluent_builders::ImportCertificate::certificate_chain) / [`set_certificate_chain(Option<String>)`](crate::client::fluent_builders::ImportCertificate::set_certificate_chain): <p>An optional list of certificates that make up the chain for the certificate that's being imported.</p>
    ///   - [`private_key(impl Into<String>)`](crate::client::fluent_builders::ImportCertificate::private_key) / [`set_private_key(Option<String>)`](crate::client::fluent_builders::ImportCertificate::set_private_key): <p>The file that contains the private key for the certificate that's being imported.</p>
    ///   - [`active_date(DateTime)`](crate::client::fluent_builders::ImportCertificate::active_date) / [`set_active_date(Option<DateTime>)`](crate::client::fluent_builders::ImportCertificate::set_active_date): <p>An optional date that specifies when the certificate becomes active.</p>
    ///   - [`inactive_date(DateTime)`](crate::client::fluent_builders::ImportCertificate::inactive_date) / [`set_inactive_date(Option<DateTime>)`](crate::client::fluent_builders::ImportCertificate::set_inactive_date): <p>An optional date that specifies when the certificate becomes inactive.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::ImportCertificate::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::ImportCertificate::set_description): <p>A short description that helps identify the certificate. </p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::ImportCertificate::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::ImportCertificate::set_tags): <p>Key-value pairs that can be used to group and search for certificates.</p>
    /// - On success, responds with [`ImportCertificateOutput`](crate::output::ImportCertificateOutput) with field(s):
    ///   - [`certificate_id(Option<String>)`](crate::output::ImportCertificateOutput::certificate_id): <p>An array of identifiers for the imported certificates. You use this identifier for working with profiles and partner profiles.</p>
    /// - On failure, responds with [`SdkError<ImportCertificateError>`](crate::error::ImportCertificateError)
    pub fn import_certificate(&self) -> crate::client::fluent_builders::ImportCertificate {
        crate::client::fluent_builders::ImportCertificate::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ImportHostKey`](crate::client::fluent_builders::ImportHostKey) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`server_id(impl Into<String>)`](crate::client::fluent_builders::ImportHostKey::server_id) / [`set_server_id(Option<String>)`](crate::client::fluent_builders::ImportHostKey::set_server_id): <p>The identifier of the server that contains the host key that you are importing.</p>
    ///   - [`host_key_body(impl Into<String>)`](crate::client::fluent_builders::ImportHostKey::host_key_body) / [`set_host_key_body(Option<String>)`](crate::client::fluent_builders::ImportHostKey::set_host_key_body): <p>The public key portion of an SSH key pair.</p>  <p>Transfer Family accepts RSA, ECDSA, and ED25519 keys.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::ImportHostKey::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::ImportHostKey::set_description): <p>The text description that identifies this host key.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::ImportHostKey::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::ImportHostKey::set_tags): <p>Key-value pairs that can be used to group and search for host keys.</p>
    /// - On success, responds with [`ImportHostKeyOutput`](crate::output::ImportHostKeyOutput) with field(s):
    ///   - [`server_id(Option<String>)`](crate::output::ImportHostKeyOutput::server_id): <p>Returns the server identifier that contains the imported key.</p>
    ///   - [`host_key_id(Option<String>)`](crate::output::ImportHostKeyOutput::host_key_id): <p>Returns the host key identifier for the imported key.</p>
    /// - On failure, responds with [`SdkError<ImportHostKeyError>`](crate::error::ImportHostKeyError)
    pub fn import_host_key(&self) -> crate::client::fluent_builders::ImportHostKey {
        crate::client::fluent_builders::ImportHostKey::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ImportSshPublicKey`](crate::client::fluent_builders::ImportSshPublicKey) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`server_id(impl Into<String>)`](crate::client::fluent_builders::ImportSshPublicKey::server_id) / [`set_server_id(Option<String>)`](crate::client::fluent_builders::ImportSshPublicKey::set_server_id): <p>A system-assigned unique identifier for a server.</p>
    ///   - [`ssh_public_key_body(impl Into<String>)`](crate::client::fluent_builders::ImportSshPublicKey::ssh_public_key_body) / [`set_ssh_public_key_body(Option<String>)`](crate::client::fluent_builders::ImportSshPublicKey::set_ssh_public_key_body): <p>The public key portion of an SSH key pair.</p>  <p>Transfer Family accepts RSA, ECDSA, and ED25519 keys.</p>
    ///   - [`user_name(impl Into<String>)`](crate::client::fluent_builders::ImportSshPublicKey::user_name) / [`set_user_name(Option<String>)`](crate::client::fluent_builders::ImportSshPublicKey::set_user_name): <p>The name of the user account that is assigned to one or more servers.</p>
    /// - On success, responds with [`ImportSshPublicKeyOutput`](crate::output::ImportSshPublicKeyOutput) with field(s):
    ///   - [`server_id(Option<String>)`](crate::output::ImportSshPublicKeyOutput::server_id): <p>A system-assigned unique identifier for a server.</p>
    ///   - [`ssh_public_key_id(Option<String>)`](crate::output::ImportSshPublicKeyOutput::ssh_public_key_id): <p>The name given to a public key by the system that was imported.</p>
    ///   - [`user_name(Option<String>)`](crate::output::ImportSshPublicKeyOutput::user_name): <p>A user name assigned to the <code>ServerID</code> value that you specified.</p>
    /// - On failure, responds with [`SdkError<ImportSshPublicKeyError>`](crate::error::ImportSshPublicKeyError)
    pub fn import_ssh_public_key(&self) -> crate::client::fluent_builders::ImportSshPublicKey {
        crate::client::fluent_builders::ImportSshPublicKey::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListAccesses`](crate::client::fluent_builders::ListAccesses) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListAccesses::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListAccesses::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListAccesses::set_max_results): <p>Specifies the maximum number of access SIDs to return.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListAccesses::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListAccesses::set_next_token): <p>When you can get additional results from the <code>ListAccesses</code> call, a <code>NextToken</code> parameter is returned in the output. You can then pass in a subsequent command to the <code>NextToken</code> parameter to continue listing additional accesses.</p>
    ///   - [`server_id(impl Into<String>)`](crate::client::fluent_builders::ListAccesses::server_id) / [`set_server_id(Option<String>)`](crate::client::fluent_builders::ListAccesses::set_server_id): <p>A system-assigned unique identifier for a server that has users assigned to it.</p>
    /// - On success, responds with [`ListAccessesOutput`](crate::output::ListAccessesOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListAccessesOutput::next_token): <p>When you can get additional results from the <code>ListAccesses</code> call, a <code>NextToken</code> parameter is returned in the output. You can then pass in a subsequent command to the <code>NextToken</code> parameter to continue listing additional accesses.</p>
    ///   - [`server_id(Option<String>)`](crate::output::ListAccessesOutput::server_id): <p>A system-assigned unique identifier for a server that has users assigned to it.</p>
    ///   - [`accesses(Option<Vec<ListedAccess>>)`](crate::output::ListAccessesOutput::accesses): <p>Returns the accesses and their properties for the <code>ServerId</code> value that you specify.</p>
    /// - On failure, responds with [`SdkError<ListAccessesError>`](crate::error::ListAccessesError)
    pub fn list_accesses(&self) -> crate::client::fluent_builders::ListAccesses {
        crate::client::fluent_builders::ListAccesses::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListAgreements`](crate::client::fluent_builders::ListAgreements) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListAgreements::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListAgreements::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListAgreements::set_max_results): <p>The maximum number of agreements to return.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListAgreements::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListAgreements::set_next_token): <p>When you can get additional results from the <code>ListAgreements</code> call, a <code>NextToken</code> parameter is returned in the output. You can then pass in a subsequent command to the <code>NextToken</code> parameter to continue listing additional agreements.</p>
    ///   - [`server_id(impl Into<String>)`](crate::client::fluent_builders::ListAgreements::server_id) / [`set_server_id(Option<String>)`](crate::client::fluent_builders::ListAgreements::set_server_id): <p>The identifier of the server for which you want a list of agreements.</p>
    /// - On success, responds with [`ListAgreementsOutput`](crate::output::ListAgreementsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListAgreementsOutput::next_token): <p>Returns a token that you can use to call <code>ListAgreements</code> again and receive additional results, if there are any.</p>
    ///   - [`agreements(Option<Vec<ListedAgreement>>)`](crate::output::ListAgreementsOutput::agreements): <p>Returns an array, where each item contains the details of an agreement.</p>
    /// - On failure, responds with [`SdkError<ListAgreementsError>`](crate::error::ListAgreementsError)
    pub fn list_agreements(&self) -> crate::client::fluent_builders::ListAgreements {
        crate::client::fluent_builders::ListAgreements::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListCertificates`](crate::client::fluent_builders::ListCertificates) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListCertificates::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListCertificates::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListCertificates::set_max_results): <p>The maximum number of certificates to return.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListCertificates::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListCertificates::set_next_token): <p>When you can get additional results from the <code>ListCertificates</code> call, a <code>NextToken</code> parameter is returned in the output. You can then pass in a subsequent command to the <code>NextToken</code> parameter to continue listing additional certificates.</p>
    /// - On success, responds with [`ListCertificatesOutput`](crate::output::ListCertificatesOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListCertificatesOutput::next_token): <p>Returns the next token, which you can use to list the next certificate.</p>
    ///   - [`certificates(Option<Vec<ListedCertificate>>)`](crate::output::ListCertificatesOutput::certificates): <p>Returns an array of the certificates that are specified in the <code>ListCertificates</code> call.</p>
    /// - On failure, responds with [`SdkError<ListCertificatesError>`](crate::error::ListCertificatesError)
    pub fn list_certificates(&self) -> crate::client::fluent_builders::ListCertificates {
        crate::client::fluent_builders::ListCertificates::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListConnectors`](crate::client::fluent_builders::ListConnectors) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListConnectors::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListConnectors::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListConnectors::set_max_results): <p>The maximum number of connectors to return.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListConnectors::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListConnectors::set_next_token): <p>When you can get additional results from the <code>ListConnectors</code> call, a <code>NextToken</code> parameter is returned in the output. You can then pass in a subsequent command to the <code>NextToken</code> parameter to continue listing additional connectors.</p>
    /// - On success, responds with [`ListConnectorsOutput`](crate::output::ListConnectorsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListConnectorsOutput::next_token): <p>Returns a token that you can use to call <code>ListConnectors</code> again and receive additional results, if there are any.</p>
    ///   - [`connectors(Option<Vec<ListedConnector>>)`](crate::output::ListConnectorsOutput::connectors): <p>Returns an array, where each item contains the details of a connector.</p>
    /// - On failure, responds with [`SdkError<ListConnectorsError>`](crate::error::ListConnectorsError)
    pub fn list_connectors(&self) -> crate::client::fluent_builders::ListConnectors {
        crate::client::fluent_builders::ListConnectors::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListExecutions`](crate::client::fluent_builders::ListExecutions) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListExecutions::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListExecutions::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListExecutions::set_max_results): <p>Specifies the maximum number of executions to return.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListExecutions::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListExecutions::set_next_token): <p> <code>ListExecutions</code> returns the <code>NextToken</code> parameter in the output. You can then pass the <code>NextToken</code> parameter in a subsequent command to continue listing additional executions.</p>  <p> This is useful for pagination, for instance. If you have 100 executions for a workflow, you might only want to list first 10. If so, call the API by specifying the <code>max-results</code>: </p>  <p> <code>aws transfer list-executions --max-results 10</code> </p>  <p> This returns details for the first 10 executions, as well as the pointer (<code>NextToken</code>) to the eleventh execution. You can now call the API again, supplying the <code>NextToken</code> value you received: </p>  <p> <code>aws transfer list-executions --max-results 10 --next-token $somePointerReturnedFromPreviousListResult</code> </p>  <p> This call returns the next 10 executions, the 11th through the 20th. You can then repeat the call until the details for all 100 executions have been returned. </p>
    ///   - [`workflow_id(impl Into<String>)`](crate::client::fluent_builders::ListExecutions::workflow_id) / [`set_workflow_id(Option<String>)`](crate::client::fluent_builders::ListExecutions::set_workflow_id): <p>A unique identifier for the workflow.</p>
    /// - On success, responds with [`ListExecutionsOutput`](crate::output::ListExecutionsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListExecutionsOutput::next_token): <p> <code>ListExecutions</code> returns the <code>NextToken</code> parameter in the output. You can then pass the <code>NextToken</code> parameter in a subsequent command to continue listing additional executions.</p>
    ///   - [`workflow_id(Option<String>)`](crate::output::ListExecutionsOutput::workflow_id): <p>A unique identifier for the workflow.</p>
    ///   - [`executions(Option<Vec<ListedExecution>>)`](crate::output::ListExecutionsOutput::executions): <p>Returns the details for each execution.</p>  <ul>   <li> <p> <b>NextToken</b>: returned from a call to several APIs, you can use pass it to a subsequent command to continue listing additional executions.</p> </li>   <li> <p> <b>StartTime</b>: timestamp indicating when the execution began.</p> </li>   <li> <p> <b>Executions</b>: details of the execution, including the execution ID, initial file location, and Service metadata.</p> </li>   <li> <p> <b>Status</b>: one of the following values: <code>IN_PROGRESS</code>, <code>COMPLETED</code>, <code>EXCEPTION</code>, <code>HANDLING_EXEPTION</code>. </p> </li>  </ul>
    /// - On failure, responds with [`SdkError<ListExecutionsError>`](crate::error::ListExecutionsError)
    pub fn list_executions(&self) -> crate::client::fluent_builders::ListExecutions {
        crate::client::fluent_builders::ListExecutions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListHostKeys`](crate::client::fluent_builders::ListHostKeys) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListHostKeys::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListHostKeys::set_max_results): <p>The maximum number of host keys to return.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListHostKeys::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListHostKeys::set_next_token): <p>When there are additional results that were not returned, a <code>NextToken</code> parameter is returned. You can use that value for a subsequent call to <code>ListHostKeys</code> to continue listing results.</p>
    ///   - [`server_id(impl Into<String>)`](crate::client::fluent_builders::ListHostKeys::server_id) / [`set_server_id(Option<String>)`](crate::client::fluent_builders::ListHostKeys::set_server_id): <p>The identifier of the server that contains the host keys that you want to view.</p>
    /// - On success, responds with [`ListHostKeysOutput`](crate::output::ListHostKeysOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListHostKeysOutput::next_token): <p>Returns a token that you can use to call <code>ListHostKeys</code> again and receive additional results, if there are any.</p>
    ///   - [`server_id(Option<String>)`](crate::output::ListHostKeysOutput::server_id): <p>Returns the server identifier that contains the listed host keys.</p>
    ///   - [`host_keys(Option<Vec<ListedHostKey>>)`](crate::output::ListHostKeysOutput::host_keys): <p>Returns an array, where each item contains the details of a host key.</p>
    /// - On failure, responds with [`SdkError<ListHostKeysError>`](crate::error::ListHostKeysError)
    pub fn list_host_keys(&self) -> crate::client::fluent_builders::ListHostKeys {
        crate::client::fluent_builders::ListHostKeys::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListProfiles`](crate::client::fluent_builders::ListProfiles) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListProfiles::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListProfiles::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListProfiles::set_max_results): <p>The maximum number of profiles to return.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListProfiles::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListProfiles::set_next_token): <p>When there are additional results that were not returned, a <code>NextToken</code> parameter is returned. You can use that value for a subsequent call to <code>ListProfiles</code> to continue listing results.</p>
    ///   - [`profile_type(ProfileType)`](crate::client::fluent_builders::ListProfiles::profile_type) / [`set_profile_type(Option<ProfileType>)`](crate::client::fluent_builders::ListProfiles::set_profile_type): <p>Indicates whether to list only <code>LOCAL</code> type profiles or only <code>PARTNER</code> type profiles. If not supplied in the request, the command lists all types of profiles.</p>
    /// - On success, responds with [`ListProfilesOutput`](crate::output::ListProfilesOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListProfilesOutput::next_token): <p>Returns a token that you can use to call <code>ListProfiles</code> again and receive additional results, if there are any.</p>
    ///   - [`profiles(Option<Vec<ListedProfile>>)`](crate::output::ListProfilesOutput::profiles): <p>Returns an array, where each item contains the details of a profile.</p>
    /// - On failure, responds with [`SdkError<ListProfilesError>`](crate::error::ListProfilesError)
    pub fn list_profiles(&self) -> crate::client::fluent_builders::ListProfiles {
        crate::client::fluent_builders::ListProfiles::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListSecurityPolicies`](crate::client::fluent_builders::ListSecurityPolicies) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListSecurityPolicies::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListSecurityPolicies::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListSecurityPolicies::set_max_results): <p>Specifies the number of security policies to return as a response to the <code>ListSecurityPolicies</code> query.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListSecurityPolicies::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListSecurityPolicies::set_next_token): <p>When additional results are obtained from the <code>ListSecurityPolicies</code> command, a <code>NextToken</code> parameter is returned in the output. You can then pass the <code>NextToken</code> parameter in a subsequent command to continue listing additional security policies.</p>
    /// - On success, responds with [`ListSecurityPoliciesOutput`](crate::output::ListSecurityPoliciesOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListSecurityPoliciesOutput::next_token): <p>When you can get additional results from the <code>ListSecurityPolicies</code> operation, a <code>NextToken</code> parameter is returned in the output. In a following command, you can pass in the <code>NextToken</code> parameter to continue listing security policies.</p>
    ///   - [`security_policy_names(Option<Vec<String>>)`](crate::output::ListSecurityPoliciesOutput::security_policy_names): <p>An array of security policies that were listed.</p>
    /// - On failure, responds with [`SdkError<ListSecurityPoliciesError>`](crate::error::ListSecurityPoliciesError)
    pub fn list_security_policies(&self) -> crate::client::fluent_builders::ListSecurityPolicies {
        crate::client::fluent_builders::ListSecurityPolicies::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListServers`](crate::client::fluent_builders::ListServers) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListServers::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListServers::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListServers::set_max_results): <p>Specifies the number of servers to return as a response to the <code>ListServers</code> query.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListServers::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListServers::set_next_token): <p>When additional results are obtained from the <code>ListServers</code> command, a <code>NextToken</code> parameter is returned in the output. You can then pass the <code>NextToken</code> parameter in a subsequent command to continue listing additional servers.</p>
    /// - On success, responds with [`ListServersOutput`](crate::output::ListServersOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListServersOutput::next_token): <p>When you can get additional results from the <code>ListServers</code> operation, a <code>NextToken</code> parameter is returned in the output. In a following command, you can pass in the <code>NextToken</code> parameter to continue listing additional servers.</p>
    ///   - [`servers(Option<Vec<ListedServer>>)`](crate::output::ListServersOutput::servers): <p>An array of servers that were listed.</p>
    /// - On failure, responds with [`SdkError<ListServersError>`](crate::error::ListServersError)
    pub fn list_servers(&self) -> crate::client::fluent_builders::ListServers {
        crate::client::fluent_builders::ListServers::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListTagsForResource::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::arn) / [`set_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_arn): <p>Requests the tags associated with a particular Amazon Resource Name (ARN). An ARN is an identifier for a specific Amazon Web Services resource, such as a server, user, or role.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListTagsForResource::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListTagsForResource::set_max_results): <p>Specifies the number of tags to return as a response to the <code>ListTagsForResource</code> request.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_next_token): <p>When you request additional results from the <code>ListTagsForResource</code> operation, a <code>NextToken</code> parameter is returned in the input. You can then pass in a subsequent command to the <code>NextToken</code> parameter to continue listing additional tags.</p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::output::ListTagsForResourceOutput::arn): <p>The ARN you specified to list the tags of.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListTagsForResourceOutput::next_token): <p>When you can get additional results from the <code>ListTagsForResource</code> call, a <code>NextToken</code> parameter is returned in the output. You can then pass in a subsequent command to the <code>NextToken</code> parameter to continue listing additional tags.</p>
    ///   - [`tags(Option<Vec<Tag>>)`](crate::output::ListTagsForResourceOutput::tags): <p>Key-value pairs that are assigned to a resource, usually for the purpose of grouping and searching for items. Tags are metadata that you define.</p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListUsers`](crate::client::fluent_builders::ListUsers) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListUsers::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListUsers::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListUsers::set_max_results): <p>Specifies the number of users to return as a response to the <code>ListUsers</code> request.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListUsers::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListUsers::set_next_token): <p>When you can get additional results from the <code>ListUsers</code> call, a <code>NextToken</code> parameter is returned in the output. You can then pass in a subsequent command to the <code>NextToken</code> parameter to continue listing additional users.</p>
    ///   - [`server_id(impl Into<String>)`](crate::client::fluent_builders::ListUsers::server_id) / [`set_server_id(Option<String>)`](crate::client::fluent_builders::ListUsers::set_server_id): <p>A system-assigned unique identifier for a server that has users assigned to it.</p>
    /// - On success, responds with [`ListUsersOutput`](crate::output::ListUsersOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListUsersOutput::next_token): <p>When you can get additional results from the <code>ListUsers</code> call, a <code>NextToken</code> parameter is returned in the output. You can then pass in a subsequent command to the <code>NextToken</code> parameter to continue listing additional users.</p>
    ///   - [`server_id(Option<String>)`](crate::output::ListUsersOutput::server_id): <p>A system-assigned unique identifier for a server that the users are assigned to.</p>
    ///   - [`users(Option<Vec<ListedUser>>)`](crate::output::ListUsersOutput::users): <p>Returns the user accounts and their properties for the <code>ServerId</code> value that you specify.</p>
    /// - On failure, responds with [`SdkError<ListUsersError>`](crate::error::ListUsersError)
    pub fn list_users(&self) -> crate::client::fluent_builders::ListUsers {
        crate::client::fluent_builders::ListUsers::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListWorkflows`](crate::client::fluent_builders::ListWorkflows) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListWorkflows::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListWorkflows::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListWorkflows::set_max_results): <p>Specifies the maximum number of workflows to return.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListWorkflows::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListWorkflows::set_next_token): <p> <code>ListWorkflows</code> returns the <code>NextToken</code> parameter in the output. You can then pass the <code>NextToken</code> parameter in a subsequent command to continue listing additional workflows.</p>
    /// - On success, responds with [`ListWorkflowsOutput`](crate::output::ListWorkflowsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListWorkflowsOutput::next_token): <p> <code>ListWorkflows</code> returns the <code>NextToken</code> parameter in the output. You can then pass the <code>NextToken</code> parameter in a subsequent command to continue listing additional workflows.</p>
    ///   - [`workflows(Option<Vec<ListedWorkflow>>)`](crate::output::ListWorkflowsOutput::workflows): <p>Returns the <code>Arn</code>, <code>WorkflowId</code>, and <code>Description</code> for each workflow.</p>
    /// - On failure, responds with [`SdkError<ListWorkflowsError>`](crate::error::ListWorkflowsError)
    pub fn list_workflows(&self) -> crate::client::fluent_builders::ListWorkflows {
        crate::client::fluent_builders::ListWorkflows::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`SendWorkflowStepState`](crate::client::fluent_builders::SendWorkflowStepState) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workflow_id(impl Into<String>)`](crate::client::fluent_builders::SendWorkflowStepState::workflow_id) / [`set_workflow_id(Option<String>)`](crate::client::fluent_builders::SendWorkflowStepState::set_workflow_id): <p>A unique identifier for the workflow.</p>
    ///   - [`execution_id(impl Into<String>)`](crate::client::fluent_builders::SendWorkflowStepState::execution_id) / [`set_execution_id(Option<String>)`](crate::client::fluent_builders::SendWorkflowStepState::set_execution_id): <p>A unique identifier for the execution of a workflow.</p>
    ///   - [`token(impl Into<String>)`](crate::client::fluent_builders::SendWorkflowStepState::token) / [`set_token(Option<String>)`](crate::client::fluent_builders::SendWorkflowStepState::set_token): <p>Used to distinguish between multiple callbacks for multiple Lambda steps within the same execution.</p>
    ///   - [`status(CustomStepStatus)`](crate::client::fluent_builders::SendWorkflowStepState::status) / [`set_status(Option<CustomStepStatus>)`](crate::client::fluent_builders::SendWorkflowStepState::set_status): <p>Indicates whether the specified step succeeded or failed.</p>
    /// - On success, responds with [`SendWorkflowStepStateOutput`](crate::output::SendWorkflowStepStateOutput)

    /// - On failure, responds with [`SdkError<SendWorkflowStepStateError>`](crate::error::SendWorkflowStepStateError)
    pub fn send_workflow_step_state(
        &self,
    ) -> crate::client::fluent_builders::SendWorkflowStepState {
        crate::client::fluent_builders::SendWorkflowStepState::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartFileTransfer`](crate::client::fluent_builders::StartFileTransfer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`connector_id(impl Into<String>)`](crate::client::fluent_builders::StartFileTransfer::connector_id) / [`set_connector_id(Option<String>)`](crate::client::fluent_builders::StartFileTransfer::set_connector_id): <p>The unique identifier for the connector. </p>
    ///   - [`send_file_paths(Vec<String>)`](crate::client::fluent_builders::StartFileTransfer::send_file_paths) / [`set_send_file_paths(Option<Vec<String>>)`](crate::client::fluent_builders::StartFileTransfer::set_send_file_paths): <p>An array of strings. Each string represents the absolute path for one outbound file transfer. For example, <code> <i>DOC-EXAMPLE-BUCKET</i>/<i>myfile.txt</i> </code>. </p>
    /// - On success, responds with [`StartFileTransferOutput`](crate::output::StartFileTransferOutput) with field(s):
    ///   - [`transfer_id(Option<String>)`](crate::output::StartFileTransferOutput::transfer_id): <p>Returns the unique identifier for this file transfer. </p>
    /// - On failure, responds with [`SdkError<StartFileTransferError>`](crate::error::StartFileTransferError)
    pub fn start_file_transfer(&self) -> crate::client::fluent_builders::StartFileTransfer {
        crate::client::fluent_builders::StartFileTransfer::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartServer`](crate::client::fluent_builders::StartServer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`server_id(impl Into<String>)`](crate::client::fluent_builders::StartServer::server_id) / [`set_server_id(Option<String>)`](crate::client::fluent_builders::StartServer::set_server_id): <p>A system-assigned unique identifier for a server that you start.</p>
    /// - On success, responds with [`StartServerOutput`](crate::output::StartServerOutput)

    /// - On failure, responds with [`SdkError<StartServerError>`](crate::error::StartServerError)
    pub fn start_server(&self) -> crate::client::fluent_builders::StartServer {
        crate::client::fluent_builders::StartServer::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StopServer`](crate::client::fluent_builders::StopServer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`server_id(impl Into<String>)`](crate::client::fluent_builders::StopServer::server_id) / [`set_server_id(Option<String>)`](crate::client::fluent_builders::StopServer::set_server_id): <p>A system-assigned unique identifier for a server that you stopped.</p>
    /// - On success, responds with [`StopServerOutput`](crate::output::StopServerOutput)

    /// - On failure, responds with [`SdkError<StopServerError>`](crate::error::StopServerError)
    pub fn stop_server(&self) -> crate::client::fluent_builders::StopServer {
        crate::client::fluent_builders::StopServer::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::arn) / [`set_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_arn): <p>An Amazon Resource Name (ARN) for a specific Amazon Web Services resource, such as a server, user, or role.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>Key-value pairs assigned to ARNs that you can use to group and search for resources by type. You can attach this metadata to user accounts for any purpose.</p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TestIdentityProvider`](crate::client::fluent_builders::TestIdentityProvider) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`server_id(impl Into<String>)`](crate::client::fluent_builders::TestIdentityProvider::server_id) / [`set_server_id(Option<String>)`](crate::client::fluent_builders::TestIdentityProvider::set_server_id): <p>A system-assigned identifier for a specific server. That server's user authentication method is tested with a user name and password.</p>
    ///   - [`server_protocol(Protocol)`](crate::client::fluent_builders::TestIdentityProvider::server_protocol) / [`set_server_protocol(Option<Protocol>)`](crate::client::fluent_builders::TestIdentityProvider::set_server_protocol): <p>The type of file transfer protocol to be tested.</p>  <p>The available protocols are:</p>  <ul>   <li> <p>Secure Shell (SSH) File Transfer Protocol (SFTP)</p> </li>   <li> <p>File Transfer Protocol Secure (FTPS)</p> </li>   <li> <p>File Transfer Protocol (FTP)</p> </li>  </ul>
    ///   - [`source_ip(impl Into<String>)`](crate::client::fluent_builders::TestIdentityProvider::source_ip) / [`set_source_ip(Option<String>)`](crate::client::fluent_builders::TestIdentityProvider::set_source_ip): <p>The source IP address of the user account to be tested.</p>
    ///   - [`user_name(impl Into<String>)`](crate::client::fluent_builders::TestIdentityProvider::user_name) / [`set_user_name(Option<String>)`](crate::client::fluent_builders::TestIdentityProvider::set_user_name): <p>The name of the user account to be tested.</p>
    ///   - [`user_password(impl Into<String>)`](crate::client::fluent_builders::TestIdentityProvider::user_password) / [`set_user_password(Option<String>)`](crate::client::fluent_builders::TestIdentityProvider::set_user_password): <p>The password of the user account to be tested.</p>
    /// - On success, responds with [`TestIdentityProviderOutput`](crate::output::TestIdentityProviderOutput) with field(s):
    ///   - [`response(Option<String>)`](crate::output::TestIdentityProviderOutput::response): <p>The response that is returned from your API Gateway.</p>
    ///   - [`status_code(i32)`](crate::output::TestIdentityProviderOutput::status_code): <p>The HTTP status code that is the response from your API Gateway.</p>
    ///   - [`message(Option<String>)`](crate::output::TestIdentityProviderOutput::message): <p>A message that indicates whether the test was successful or not.</p> <note>   <p>If an empty string is returned, the most likely cause is that the authentication failed due to an incorrect username or password.</p>  </note>
    ///   - [`url(Option<String>)`](crate::output::TestIdentityProviderOutput::url): <p>The endpoint of the service used to authenticate a user.</p>
    /// - On failure, responds with [`SdkError<TestIdentityProviderError>`](crate::error::TestIdentityProviderError)
    pub fn test_identity_provider(&self) -> crate::client::fluent_builders::TestIdentityProvider {
        crate::client::fluent_builders::TestIdentityProvider::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::arn) / [`set_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_arn): <p>The value of the resource that will have the tag removed. An Amazon Resource Name (ARN) is an identifier for a specific Amazon Web Services resource, such as a server, user, or role.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>TagKeys are key-value pairs assigned to ARNs that can be used to group and search for resources by type. This metadata can be attached to resources for any purpose.</p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateAccess`](crate::client::fluent_builders::UpdateAccess) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`home_directory(impl Into<String>)`](crate::client::fluent_builders::UpdateAccess::home_directory) / [`set_home_directory(Option<String>)`](crate::client::fluent_builders::UpdateAccess::set_home_directory): <p>The landing directory (folder) for a user when they log in to the server using the client.</p>  <p>A <code>HomeDirectory</code> example is <code>/bucket_name/home/mydirectory</code>.</p>
    ///   - [`home_directory_type(HomeDirectoryType)`](crate::client::fluent_builders::UpdateAccess::home_directory_type) / [`set_home_directory_type(Option<HomeDirectoryType>)`](crate::client::fluent_builders::UpdateAccess::set_home_directory_type): <p>The type of landing directory (folder) that you want your users' home directory to be when they log in to the server. If you set it to <code>PATH</code>, the user will see the absolute Amazon S3 bucket or EFS paths as is in their file transfer protocol clients. If you set it <code>LOGICAL</code>, you need to provide mappings in the <code>HomeDirectoryMappings</code> for how you want to make Amazon S3 or Amazon EFS paths visible to your users.</p>
    ///   - [`home_directory_mappings(Vec<HomeDirectoryMapEntry>)`](crate::client::fluent_builders::UpdateAccess::home_directory_mappings) / [`set_home_directory_mappings(Option<Vec<HomeDirectoryMapEntry>>)`](crate::client::fluent_builders::UpdateAccess::set_home_directory_mappings): <p>Logical directory mappings that specify what Amazon S3 or Amazon EFS paths and keys should be visible to your user and how you want to make them visible. You must specify the <code>Entry</code> and <code>Target</code> pair, where <code>Entry</code> shows how the path is made visible and <code>Target</code> is the actual Amazon S3 or Amazon EFS path. If you only specify a target, it is displayed as is. You also must ensure that your Identity and Access Management (IAM) role provides access to paths in <code>Target</code>. This value can be set only when <code>HomeDirectoryType</code> is set to <i>LOGICAL</i>.</p>  <p>The following is an <code>Entry</code> and <code>Target</code> pair example.</p>  <p> <code>[ { "Entry": "/directory1", "Target": "/bucket_name/home/mydirectory" } ]</code> </p>  <p>In most cases, you can use this value instead of the session policy to lock down your user to the designated home directory ("<code>chroot</code>"). To do this, you can set <code>Entry</code> to <code>/</code> and set <code>Target</code> to the <code>HomeDirectory</code> parameter value.</p>  <p>The following is an <code>Entry</code> and <code>Target</code> pair example for <code>chroot</code>.</p>  <p> <code>[ { "Entry": "/", "Target": "/bucket_name/home/mydirectory" } ]</code> </p>
    ///   - [`policy(impl Into<String>)`](crate::client::fluent_builders::UpdateAccess::policy) / [`set_policy(Option<String>)`](crate::client::fluent_builders::UpdateAccess::set_policy): <p>A session policy for your user so that you can use the same Identity and Access Management (IAM) role across multiple users. This policy scopes down a user's access to portions of their Amazon S3 bucket. Variables that you can use inside this policy include <code>${Transfer:UserName}</code>, <code>${Transfer:HomeDirectory}</code>, and <code>${Transfer:HomeBucket}</code>.</p> <note>   <p>This policy applies only when the domain of <code>ServerId</code> is Amazon S3. Amazon EFS does not use session policies.</p>   <p>For session policies, Transfer Family stores the policy as a JSON blob, instead of the Amazon Resource Name (ARN) of the policy. You save the policy as a JSON blob and pass it in the <code>Policy</code> argument.</p>   <p>For an example of a session policy, see <a href="https://docs.aws.amazon.com/transfer/latest/userguide/session-policy.html">Example session policy</a>.</p>   <p>For more information, see <a href="https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html">AssumeRole</a> in the <i>Amazon Web ServicesSecurity Token Service API Reference</i>.</p>  </note>
    ///   - [`posix_profile(PosixProfile)`](crate::client::fluent_builders::UpdateAccess::posix_profile) / [`set_posix_profile(Option<PosixProfile>)`](crate::client::fluent_builders::UpdateAccess::set_posix_profile): <p>The full POSIX identity, including user ID (<code>Uid</code>), group ID (<code>Gid</code>), and any secondary groups IDs (<code>SecondaryGids</code>), that controls your users' access to your Amazon EFS file systems. The POSIX permissions that are set on files and directories in your file system determine the level of access your users get when transferring files into and out of your Amazon EFS file systems.</p>
    ///   - [`role(impl Into<String>)`](crate::client::fluent_builders::UpdateAccess::role) / [`set_role(Option<String>)`](crate::client::fluent_builders::UpdateAccess::set_role): <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that controls your users' access to your Amazon S3 bucket or Amazon EFS file system. The policies attached to this role determine the level of access that you want to provide your users when transferring files into and out of your Amazon S3 bucket or Amazon EFS file system. The IAM role should also contain a trust relationship that allows the server to access your resources when servicing your users' transfer requests.</p>
    ///   - [`server_id(impl Into<String>)`](crate::client::fluent_builders::UpdateAccess::server_id) / [`set_server_id(Option<String>)`](crate::client::fluent_builders::UpdateAccess::set_server_id): <p>A system-assigned unique identifier for a server instance. This is the specific server that you added your user to.</p>
    ///   - [`external_id(impl Into<String>)`](crate::client::fluent_builders::UpdateAccess::external_id) / [`set_external_id(Option<String>)`](crate::client::fluent_builders::UpdateAccess::set_external_id): <p>A unique identifier that is required to identify specific groups within your directory. The users of the group that you associate have access to your Amazon S3 or Amazon EFS resources over the enabled protocols using Transfer Family. If you know the group name, you can view the SID values by running the following command using Windows PowerShell.</p>  <p> <code>Get-ADGroup -Filter {samAccountName -like "<i>YourGroupName</i>*"} -Properties * | Select SamAccountName,ObjectSid</code> </p>  <p>In that command, replace <i>YourGroupName</i> with the name of your Active Directory group.</p>  <p>The regular expression used to validate this parameter is a string of characters consisting of uppercase and lowercase alphanumeric characters with no spaces. You can also include underscores or any of the following characters: =,.@:/-</p>
    /// - On success, responds with [`UpdateAccessOutput`](crate::output::UpdateAccessOutput) with field(s):
    ///   - [`server_id(Option<String>)`](crate::output::UpdateAccessOutput::server_id): <p>The identifier of the server that the user is attached to.</p>
    ///   - [`external_id(Option<String>)`](crate::output::UpdateAccessOutput::external_id): <p>The external identifier of the group whose users have access to your Amazon S3 or Amazon EFS resources over the enabled protocols using Amazon Web ServicesTransfer Family.</p>
    /// - On failure, responds with [`SdkError<UpdateAccessError>`](crate::error::UpdateAccessError)
    pub fn update_access(&self) -> crate::client::fluent_builders::UpdateAccess {
        crate::client::fluent_builders::UpdateAccess::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateAgreement`](crate::client::fluent_builders::UpdateAgreement) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`agreement_id(impl Into<String>)`](crate::client::fluent_builders::UpdateAgreement::agreement_id) / [`set_agreement_id(Option<String>)`](crate::client::fluent_builders::UpdateAgreement::set_agreement_id): <p>A unique identifier for the agreement. This identifier is returned when you create an agreement.</p>
    ///   - [`server_id(impl Into<String>)`](crate::client::fluent_builders::UpdateAgreement::server_id) / [`set_server_id(Option<String>)`](crate::client::fluent_builders::UpdateAgreement::set_server_id): <p>A system-assigned unique identifier for a server instance. This is the specific server that the agreement uses.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateAgreement::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateAgreement::set_description): <p>To replace the existing description, provide a short description for the agreement. </p>
    ///   - [`status(AgreementStatusType)`](crate::client::fluent_builders::UpdateAgreement::status) / [`set_status(Option<AgreementStatusType>)`](crate::client::fluent_builders::UpdateAgreement::set_status): <p>You can update the status for the agreement, either activating an inactive agreement or the reverse.</p>
    ///   - [`local_profile_id(impl Into<String>)`](crate::client::fluent_builders::UpdateAgreement::local_profile_id) / [`set_local_profile_id(Option<String>)`](crate::client::fluent_builders::UpdateAgreement::set_local_profile_id): <p>A unique identifier for the AS2 local profile.</p>  <p>To change the local profile identifier, provide a new value here.</p>
    ///   - [`partner_profile_id(impl Into<String>)`](crate::client::fluent_builders::UpdateAgreement::partner_profile_id) / [`set_partner_profile_id(Option<String>)`](crate::client::fluent_builders::UpdateAgreement::set_partner_profile_id): <p>A unique identifier for the partner profile. To change the partner profile identifier, provide a new value here.</p>
    ///   - [`base_directory(impl Into<String>)`](crate::client::fluent_builders::UpdateAgreement::base_directory) / [`set_base_directory(Option<String>)`](crate::client::fluent_builders::UpdateAgreement::set_base_directory): <p>To change the landing directory (folder) for files that are transferred, provide the bucket folder that you want to use; for example, <code>/<i>DOC-EXAMPLE-BUCKET</i>/<i>home</i>/<i>mydirectory</i> </code>.</p>
    ///   - [`access_role(impl Into<String>)`](crate::client::fluent_builders::UpdateAgreement::access_role) / [`set_access_role(Option<String>)`](crate::client::fluent_builders::UpdateAgreement::set_access_role): <p>With AS2, you can send files by calling <code>StartFileTransfer</code> and specifying the file paths in the request parameter, <code>SendFilePaths</code>. We use the file’s parent directory (for example, for <code>--send-file-paths /bucket/dir/file.txt</code>, parent directory is <code>/bucket/dir/</code>) to temporarily store a processed AS2 message file, store the MDN when we receive them from the partner, and write a final JSON file containing relevant metadata of the transmission. So, the <code>AccessRole</code> needs to provide read and write access to the parent directory of the file location used in the <code>StartFileTransfer</code> request. Additionally, you need to provide read and write access to the parent directory of the files that you intend to send with <code>StartFileTransfer</code>.</p>
    /// - On success, responds with [`UpdateAgreementOutput`](crate::output::UpdateAgreementOutput) with field(s):
    ///   - [`agreement_id(Option<String>)`](crate::output::UpdateAgreementOutput::agreement_id): <p>A unique identifier for the agreement. This identifier is returned when you create an agreement.</p>
    /// - On failure, responds with [`SdkError<UpdateAgreementError>`](crate::error::UpdateAgreementError)
    pub fn update_agreement(&self) -> crate::client::fluent_builders::UpdateAgreement {
        crate::client::fluent_builders::UpdateAgreement::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateCertificate`](crate::client::fluent_builders::UpdateCertificate) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`certificate_id(impl Into<String>)`](crate::client::fluent_builders::UpdateCertificate::certificate_id) / [`set_certificate_id(Option<String>)`](crate::client::fluent_builders::UpdateCertificate::set_certificate_id): <p>The identifier of the certificate object that you are updating.</p>
    ///   - [`active_date(DateTime)`](crate::client::fluent_builders::UpdateCertificate::active_date) / [`set_active_date(Option<DateTime>)`](crate::client::fluent_builders::UpdateCertificate::set_active_date): <p>An optional date that specifies when the certificate becomes active.</p>
    ///   - [`inactive_date(DateTime)`](crate::client::fluent_builders::UpdateCertificate::inactive_date) / [`set_inactive_date(Option<DateTime>)`](crate::client::fluent_builders::UpdateCertificate::set_inactive_date): <p>An optional date that specifies when the certificate becomes inactive.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateCertificate::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateCertificate::set_description): <p>A short description to help identify the certificate.</p>
    /// - On success, responds with [`UpdateCertificateOutput`](crate::output::UpdateCertificateOutput) with field(s):
    ///   - [`certificate_id(Option<String>)`](crate::output::UpdateCertificateOutput::certificate_id): <p>Returns the identifier of the certificate object that you are updating.</p>
    /// - On failure, responds with [`SdkError<UpdateCertificateError>`](crate::error::UpdateCertificateError)
    pub fn update_certificate(&self) -> crate::client::fluent_builders::UpdateCertificate {
        crate::client::fluent_builders::UpdateCertificate::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateConnector`](crate::client::fluent_builders::UpdateConnector) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`connector_id(impl Into<String>)`](crate::client::fluent_builders::UpdateConnector::connector_id) / [`set_connector_id(Option<String>)`](crate::client::fluent_builders::UpdateConnector::set_connector_id): <p>The unique identifier for the connector.</p>
    ///   - [`url(impl Into<String>)`](crate::client::fluent_builders::UpdateConnector::url) / [`set_url(Option<String>)`](crate::client::fluent_builders::UpdateConnector::set_url): <p>The URL of the partner's AS2 endpoint.</p>
    ///   - [`as2_config(As2ConnectorConfig)`](crate::client::fluent_builders::UpdateConnector::as2_config) / [`set_as2_config(Option<As2ConnectorConfig>)`](crate::client::fluent_builders::UpdateConnector::set_as2_config): <p>A structure that contains the parameters for a connector object.</p>
    ///   - [`access_role(impl Into<String>)`](crate::client::fluent_builders::UpdateConnector::access_role) / [`set_access_role(Option<String>)`](crate::client::fluent_builders::UpdateConnector::set_access_role): <p>With AS2, you can send files by calling <code>StartFileTransfer</code> and specifying the file paths in the request parameter, <code>SendFilePaths</code>. We use the file’s parent directory (for example, for <code>--send-file-paths /bucket/dir/file.txt</code>, parent directory is <code>/bucket/dir/</code>) to temporarily store a processed AS2 message file, store the MDN when we receive them from the partner, and write a final JSON file containing relevant metadata of the transmission. So, the <code>AccessRole</code> needs to provide read and write access to the parent directory of the file location used in the <code>StartFileTransfer</code> request. Additionally, you need to provide read and write access to the parent directory of the files that you intend to send with <code>StartFileTransfer</code>.</p>
    ///   - [`logging_role(impl Into<String>)`](crate::client::fluent_builders::UpdateConnector::logging_role) / [`set_logging_role(Option<String>)`](crate::client::fluent_builders::UpdateConnector::set_logging_role): <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that allows a connector to turn on CloudWatch logging for Amazon S3 events. When set, you can view connector activity in your CloudWatch logs.</p>
    /// - On success, responds with [`UpdateConnectorOutput`](crate::output::UpdateConnectorOutput) with field(s):
    ///   - [`connector_id(Option<String>)`](crate::output::UpdateConnectorOutput::connector_id): <p>Returns the identifier of the connector object that you are updating.</p>
    /// - On failure, responds with [`SdkError<UpdateConnectorError>`](crate::error::UpdateConnectorError)
    pub fn update_connector(&self) -> crate::client::fluent_builders::UpdateConnector {
        crate::client::fluent_builders::UpdateConnector::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateHostKey`](crate::client::fluent_builders::UpdateHostKey) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`server_id(impl Into<String>)`](crate::client::fluent_builders::UpdateHostKey::server_id) / [`set_server_id(Option<String>)`](crate::client::fluent_builders::UpdateHostKey::set_server_id): <p>The identifier of the server that contains the host key that you are updating.</p>
    ///   - [`host_key_id(impl Into<String>)`](crate::client::fluent_builders::UpdateHostKey::host_key_id) / [`set_host_key_id(Option<String>)`](crate::client::fluent_builders::UpdateHostKey::set_host_key_id): <p>The identifier of the host key that you are updating.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateHostKey::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateHostKey::set_description): <p>An updated description for the host key.</p>
    /// - On success, responds with [`UpdateHostKeyOutput`](crate::output::UpdateHostKeyOutput) with field(s):
    ///   - [`server_id(Option<String>)`](crate::output::UpdateHostKeyOutput::server_id): <p>Returns the server identifier for the server that contains the updated host key.</p>
    ///   - [`host_key_id(Option<String>)`](crate::output::UpdateHostKeyOutput::host_key_id): <p>Returns the host key identifier for the updated host key.</p>
    /// - On failure, responds with [`SdkError<UpdateHostKeyError>`](crate::error::UpdateHostKeyError)
    pub fn update_host_key(&self) -> crate::client::fluent_builders::UpdateHostKey {
        crate::client::fluent_builders::UpdateHostKey::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateProfile`](crate::client::fluent_builders::UpdateProfile) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`profile_id(impl Into<String>)`](crate::client::fluent_builders::UpdateProfile::profile_id) / [`set_profile_id(Option<String>)`](crate::client::fluent_builders::UpdateProfile::set_profile_id): <p>The identifier of the profile object that you are updating.</p>
    ///   - [`certificate_ids(Vec<String>)`](crate::client::fluent_builders::UpdateProfile::certificate_ids) / [`set_certificate_ids(Option<Vec<String>>)`](crate::client::fluent_builders::UpdateProfile::set_certificate_ids): <p>An array of identifiers for the imported certificates. You use this identifier for working with profiles and partner profiles.</p>
    /// - On success, responds with [`UpdateProfileOutput`](crate::output::UpdateProfileOutput) with field(s):
    ///   - [`profile_id(Option<String>)`](crate::output::UpdateProfileOutput::profile_id): <p>Returns the identifier for the profile that's being updated.</p>
    /// - On failure, responds with [`SdkError<UpdateProfileError>`](crate::error::UpdateProfileError)
    pub fn update_profile(&self) -> crate::client::fluent_builders::UpdateProfile {
        crate::client::fluent_builders::UpdateProfile::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateServer`](crate::client::fluent_builders::UpdateServer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`certificate(impl Into<String>)`](crate::client::fluent_builders::UpdateServer::certificate) / [`set_certificate(Option<String>)`](crate::client::fluent_builders::UpdateServer::set_certificate): <p>The Amazon Resource Name (ARN) of the Amazon Web ServicesCertificate Manager (ACM) certificate. Required when <code>Protocols</code> is set to <code>FTPS</code>.</p>  <p>To request a new public certificate, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-request-public.html">Request a public certificate</a> in the <i> Amazon Web ServicesCertificate Manager User Guide</i>.</p>  <p>To import an existing certificate into ACM, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html">Importing certificates into ACM</a> in the <i> Amazon Web ServicesCertificate Manager User Guide</i>.</p>  <p>To request a private certificate to use FTPS through private IP addresses, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-request-private.html">Request a private certificate</a> in the <i> Amazon Web ServicesCertificate Manager User Guide</i>.</p>  <p>Certificates with the following cryptographic algorithms and key sizes are supported:</p>  <ul>   <li> <p>2048-bit RSA (RSA_2048)</p> </li>   <li> <p>4096-bit RSA (RSA_4096)</p> </li>   <li> <p>Elliptic Prime Curve 256 bit (EC_prime256v1)</p> </li>   <li> <p>Elliptic Prime Curve 384 bit (EC_secp384r1)</p> </li>   <li> <p>Elliptic Prime Curve 521 bit (EC_secp521r1)</p> </li>  </ul> <note>   <p>The certificate must be a valid SSL/TLS X.509 version 3 certificate with FQDN or IP address specified and information about the issuer.</p>  </note>
    ///   - [`protocol_details(ProtocolDetails)`](crate::client::fluent_builders::UpdateServer::protocol_details) / [`set_protocol_details(Option<ProtocolDetails>)`](crate::client::fluent_builders::UpdateServer::set_protocol_details): <p>The protocol settings that are configured for your server.</p>  <ul>   <li> <p> To indicate passive mode (for FTP and FTPS protocols), use the <code>PassiveIp</code> parameter. Enter a single dotted-quad IPv4 address, such as the external IP address of a firewall, router, or load balancer. </p> </li>   <li> <p>To ignore the error that is generated when the client attempts to use the <code>SETSTAT</code> command on a file that you are uploading to an Amazon S3 bucket, use the <code>SetStatOption</code> parameter. To have the Transfer Family server ignore the <code>SETSTAT</code> command and upload files without needing to make any changes to your SFTP client, set the value to <code>ENABLE_NO_OP</code>. If you set the <code>SetStatOption</code> parameter to <code>ENABLE_NO_OP</code>, Transfer Family generates a log entry to Amazon CloudWatch Logs, so that you can determine when the client is making a <code>SETSTAT</code> call.</p> </li>   <li> <p>To determine whether your Transfer Family server resumes recent, negotiated sessions through a unique session ID, use the <code>TlsSessionResumptionMode</code> parameter.</p> </li>   <li> <p> <code>As2Transports</code> indicates the transport method for the AS2 messages. Currently, only HTTP is supported.</p> </li>  </ul>
    ///   - [`endpoint_details(EndpointDetails)`](crate::client::fluent_builders::UpdateServer::endpoint_details) / [`set_endpoint_details(Option<EndpointDetails>)`](crate::client::fluent_builders::UpdateServer::set_endpoint_details): <p>The virtual private cloud (VPC) endpoint settings that are configured for your server. When you host your endpoint within your VPC, you can make your endpoint accessible only to resources within your VPC, or you can attach Elastic IP addresses and make your endpoint accessible to clients over the internet. Your VPC's default security groups are automatically assigned to your endpoint.</p>
    ///   - [`endpoint_type(EndpointType)`](crate::client::fluent_builders::UpdateServer::endpoint_type) / [`set_endpoint_type(Option<EndpointType>)`](crate::client::fluent_builders::UpdateServer::set_endpoint_type): <p>The type of endpoint that you want your server to use. You can choose to make your server's endpoint publicly accessible (PUBLIC) or host it inside your VPC. With an endpoint that is hosted in a VPC, you can restrict access to your server and resources only within your VPC or choose to make it internet facing by attaching Elastic IP addresses directly to it.</p> <note>   <p> After May 19, 2021, you won't be able to create a server using <code>EndpointType=VPC_ENDPOINT</code> in your Amazon Web Servicesaccount if your account hasn't already done so before May 19, 2021. If you have already created servers with <code>EndpointType=VPC_ENDPOINT</code> in your Amazon Web Servicesaccount on or before May 19, 2021, you will not be affected. After this date, use <code>EndpointType</code>=<code>VPC</code>.</p>   <p>For more information, see https://docs.aws.amazon.com/transfer/latest/userguide/create-server-in-vpc.html#deprecate-vpc-endpoint.</p>   <p>It is recommended that you use <code>VPC</code> as the <code>EndpointType</code>. With this endpoint type, you have the option to directly associate up to three Elastic IPv4 addresses (BYO IP included) with your server's endpoint and use VPC security groups to restrict traffic by the client's public IP address. This is not possible with <code>EndpointType</code> set to <code>VPC_ENDPOINT</code>.</p>  </note>
    ///   - [`host_key(impl Into<String>)`](crate::client::fluent_builders::UpdateServer::host_key) / [`set_host_key(Option<String>)`](crate::client::fluent_builders::UpdateServer::set_host_key): <p>The RSA, ECDSA, or ED25519 private key to use for your SFTP-enabled server. You can add multiple host keys, in case you want to rotate keys, or have a set of active keys that use different algorithms.</p>  <p>Use the following command to generate an RSA 2048 bit key with no passphrase:</p>  <p> <code>ssh-keygen -t rsa -b 2048 -N "" -m PEM -f my-new-server-key</code>.</p>  <p>Use a minimum value of 2048 for the <code>-b</code> option. You can create a stronger key by using 3072 or 4096.</p>  <p>Use the following command to generate an ECDSA 256 bit key with no passphrase:</p>  <p> <code>ssh-keygen -t ecdsa -b 256 -N "" -m PEM -f my-new-server-key</code>.</p>  <p>Valid values for the <code>-b</code> option for ECDSA are 256, 384, and 521.</p>  <p>Use the following command to generate an ED25519 key with no passphrase:</p>  <p> <code>ssh-keygen -t ed25519 -N "" -f my-new-server-key</code>.</p>  <p>For all of these commands, you can replace <i>my-new-server-key</i> with a string of your choice.</p> <important>   <p>If you aren't planning to migrate existing users from an existing SFTP-enabled server to a new server, don't update the host key. Accidentally changing a server's host key can be disruptive.</p>  </important>  <p>For more information, see <a href="https://docs.aws.amazon.com/transfer/latest/userguide/edit-server-config.html#configuring-servers-change-host-key">Update host keys for your SFTP-enabled server</a> in the <i>Transfer Family User Guide</i>.</p>
    ///   - [`identity_provider_details(IdentityProviderDetails)`](crate::client::fluent_builders::UpdateServer::identity_provider_details) / [`set_identity_provider_details(Option<IdentityProviderDetails>)`](crate::client::fluent_builders::UpdateServer::set_identity_provider_details): <p>An array containing all of the information required to call a customer's authentication API method.</p>
    ///   - [`logging_role(impl Into<String>)`](crate::client::fluent_builders::UpdateServer::logging_role) / [`set_logging_role(Option<String>)`](crate::client::fluent_builders::UpdateServer::set_logging_role): <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that allows a server to turn on Amazon CloudWatch logging for Amazon S3 or Amazon EFSevents. When set, you can view user activity in your CloudWatch logs.</p>
    ///   - [`post_authentication_login_banner(impl Into<String>)`](crate::client::fluent_builders::UpdateServer::post_authentication_login_banner) / [`set_post_authentication_login_banner(Option<String>)`](crate::client::fluent_builders::UpdateServer::set_post_authentication_login_banner): <p>Specifies a string to display when users connect to a server. This string is displayed after the user authenticates.</p> <note>   <p>The SFTP protocol does not support post-authentication display banners.</p>  </note>
    ///   - [`pre_authentication_login_banner(impl Into<String>)`](crate::client::fluent_builders::UpdateServer::pre_authentication_login_banner) / [`set_pre_authentication_login_banner(Option<String>)`](crate::client::fluent_builders::UpdateServer::set_pre_authentication_login_banner): <p>Specifies a string to display when users connect to a server. This string is displayed before the user authenticates. For example, the following banner displays details about using the system:</p>  <p> <code>This system is for the use of authorized users only. Individuals using this computer system without authority, or in excess of their authority, are subject to having all of their activities on this system monitored and recorded by system personnel.</code> </p>
    ///   - [`protocols(Vec<Protocol>)`](crate::client::fluent_builders::UpdateServer::protocols) / [`set_protocols(Option<Vec<Protocol>>)`](crate::client::fluent_builders::UpdateServer::set_protocols): <p>Specifies the file transfer protocol or protocols over which your file transfer protocol client can connect to your server's endpoint. The available protocols are:</p>  <ul>   <li> <p> <code>SFTP</code> (Secure Shell (SSH) File Transfer Protocol): File transfer over SSH</p> </li>   <li> <p> <code>FTPS</code> (File Transfer Protocol Secure): File transfer with TLS encryption</p> </li>   <li> <p> <code>FTP</code> (File Transfer Protocol): Unencrypted file transfer</p> </li>   <li> <p> <code>AS2</code> (Applicability Statement 2): used for transporting structured business-to-business data</p> </li>  </ul> <note>   <ul>    <li> <p>If you select <code>FTPS</code>, you must choose a certificate stored in Certificate Manager (ACM) which is used to identify your server when clients connect to it over FTPS.</p> </li>    <li> <p>If <code>Protocol</code> includes either <code>FTP</code> or <code>FTPS</code>, then the <code>EndpointType</code> must be <code>VPC</code> and the <code>IdentityProviderType</code> must be <code>AWS_DIRECTORY_SERVICE</code> or <code>API_GATEWAY</code>.</p> </li>    <li> <p>If <code>Protocol</code> includes <code>FTP</code>, then <code>AddressAllocationIds</code> cannot be associated.</p> </li>    <li> <p>If <code>Protocol</code> is set only to <code>SFTP</code>, the <code>EndpointType</code> can be set to <code>PUBLIC</code> and the <code>IdentityProviderType</code> can be set to <code>SERVICE_MANAGED</code>.</p> </li>    <li> <p>If <code>Protocol</code> includes <code>AS2</code>, then the <code>EndpointType</code> must be <code>VPC</code>, and domain must be Amazon S3.</p> </li>   </ul>  </note>
    ///   - [`security_policy_name(impl Into<String>)`](crate::client::fluent_builders::UpdateServer::security_policy_name) / [`set_security_policy_name(Option<String>)`](crate::client::fluent_builders::UpdateServer::set_security_policy_name): <p>Specifies the name of the security policy that is attached to the server.</p>
    ///   - [`server_id(impl Into<String>)`](crate::client::fluent_builders::UpdateServer::server_id) / [`set_server_id(Option<String>)`](crate::client::fluent_builders::UpdateServer::set_server_id): <p>A system-assigned unique identifier for a server instance that the user account is assigned to.</p>
    ///   - [`workflow_details(WorkflowDetails)`](crate::client::fluent_builders::UpdateServer::workflow_details) / [`set_workflow_details(Option<WorkflowDetails>)`](crate::client::fluent_builders::UpdateServer::set_workflow_details): <p>Specifies the workflow ID for the workflow to assign and the execution role that's used for executing the workflow.</p>  <p>In additon to a workflow to execute when a file is uploaded completely, <code>WorkflowDeatails</code> can also contain a workflow ID (and execution role) for a workflow to execute on partial upload. A partial upload occurs when a file is open when the session disconnects.</p>  <p>To remove an associated workflow from a server, you can provide an empty <code>OnUpload</code> object, as in the following example.</p>  <p> <code>aws transfer update-server --server-id s-01234567890abcdef --workflow-details '{"OnUpload":[]}'</code> </p>
    /// - On success, responds with [`UpdateServerOutput`](crate::output::UpdateServerOutput) with field(s):
    ///   - [`server_id(Option<String>)`](crate::output::UpdateServerOutput::server_id): <p>A system-assigned unique identifier for a server that the user account is assigned to.</p>
    /// - On failure, responds with [`SdkError<UpdateServerError>`](crate::error::UpdateServerError)
    pub fn update_server(&self) -> crate::client::fluent_builders::UpdateServer {
        crate::client::fluent_builders::UpdateServer::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateUser`](crate::client::fluent_builders::UpdateUser) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`home_directory(impl Into<String>)`](crate::client::fluent_builders::UpdateUser::home_directory) / [`set_home_directory(Option<String>)`](crate::client::fluent_builders::UpdateUser::set_home_directory): <p>The landing directory (folder) for a user when they log in to the server using the client.</p>  <p>A <code>HomeDirectory</code> example is <code>/bucket_name/home/mydirectory</code>.</p>
    ///   - [`home_directory_type(HomeDirectoryType)`](crate::client::fluent_builders::UpdateUser::home_directory_type) / [`set_home_directory_type(Option<HomeDirectoryType>)`](crate::client::fluent_builders::UpdateUser::set_home_directory_type): <p>The type of landing directory (folder) that you want your users' home directory to be when they log in to the server. If you set it to <code>PATH</code>, the user will see the absolute Amazon S3 bucket or EFS paths as is in their file transfer protocol clients. If you set it <code>LOGICAL</code>, you need to provide mappings in the <code>HomeDirectoryMappings</code> for how you want to make Amazon S3 or Amazon EFS paths visible to your users.</p>
    ///   - [`home_directory_mappings(Vec<HomeDirectoryMapEntry>)`](crate::client::fluent_builders::UpdateUser::home_directory_mappings) / [`set_home_directory_mappings(Option<Vec<HomeDirectoryMapEntry>>)`](crate::client::fluent_builders::UpdateUser::set_home_directory_mappings): <p>Logical directory mappings that specify what Amazon S3 or Amazon EFS paths and keys should be visible to your user and how you want to make them visible. You must specify the <code>Entry</code> and <code>Target</code> pair, where <code>Entry</code> shows how the path is made visible and <code>Target</code> is the actual Amazon S3 or Amazon EFS path. If you only specify a target, it is displayed as is. You also must ensure that your Identity and Access Management (IAM) role provides access to paths in <code>Target</code>. This value can be set only when <code>HomeDirectoryType</code> is set to <i>LOGICAL</i>.</p>  <p>The following is an <code>Entry</code> and <code>Target</code> pair example.</p>  <p> <code>[ { "Entry": "/directory1", "Target": "/bucket_name/home/mydirectory" } ]</code> </p>  <p>In most cases, you can use this value instead of the session policy to lock down your user to the designated home directory ("<code>chroot</code>"). To do this, you can set <code>Entry</code> to '/' and set <code>Target</code> to the HomeDirectory parameter value.</p>  <p>The following is an <code>Entry</code> and <code>Target</code> pair example for <code>chroot</code>.</p>  <p> <code>[ { "Entry": "/", "Target": "/bucket_name/home/mydirectory" } ]</code> </p>
    ///   - [`policy(impl Into<String>)`](crate::client::fluent_builders::UpdateUser::policy) / [`set_policy(Option<String>)`](crate::client::fluent_builders::UpdateUser::set_policy): <p>A session policy for your user so that you can use the same Identity and Access Management (IAM) role across multiple users. This policy scopes down a user's access to portions of their Amazon S3 bucket. Variables that you can use inside this policy include <code>${Transfer:UserName}</code>, <code>${Transfer:HomeDirectory}</code>, and <code>${Transfer:HomeBucket}</code>.</p> <note>   <p>This policy applies only when the domain of <code>ServerId</code> is Amazon S3. Amazon EFS does not use session policies.</p>   <p>For session policies, Transfer Family stores the policy as a JSON blob, instead of the Amazon Resource Name (ARN) of the policy. You save the policy as a JSON blob and pass it in the <code>Policy</code> argument.</p>   <p>For an example of a session policy, see <a href="https://docs.aws.amazon.com/transfer/latest/userguide/session-policy">Creating a session policy</a>.</p>   <p>For more information, see <a href="https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html">AssumeRole</a> in the <i>Amazon Web Services Security Token Service API Reference</i>.</p>  </note>
    ///   - [`posix_profile(PosixProfile)`](crate::client::fluent_builders::UpdateUser::posix_profile) / [`set_posix_profile(Option<PosixProfile>)`](crate::client::fluent_builders::UpdateUser::set_posix_profile): <p>Specifies the full POSIX identity, including user ID (<code>Uid</code>), group ID (<code>Gid</code>), and any secondary groups IDs (<code>SecondaryGids</code>), that controls your users' access to your Amazon Elastic File Systems (Amazon EFS). The POSIX permissions that are set on files and directories in your file system determines the level of access your users get when transferring files into and out of your Amazon EFS file systems.</p>
    ///   - [`role(impl Into<String>)`](crate::client::fluent_builders::UpdateUser::role) / [`set_role(Option<String>)`](crate::client::fluent_builders::UpdateUser::set_role): <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that controls your users' access to your Amazon S3 bucket or Amazon EFS file system. The policies attached to this role determine the level of access that you want to provide your users when transferring files into and out of your Amazon S3 bucket or Amazon EFS file system. The IAM role should also contain a trust relationship that allows the server to access your resources when servicing your users' transfer requests.</p>
    ///   - [`server_id(impl Into<String>)`](crate::client::fluent_builders::UpdateUser::server_id) / [`set_server_id(Option<String>)`](crate::client::fluent_builders::UpdateUser::set_server_id): <p>A system-assigned unique identifier for a server instance that the user account is assigned to.</p>
    ///   - [`user_name(impl Into<String>)`](crate::client::fluent_builders::UpdateUser::user_name) / [`set_user_name(Option<String>)`](crate::client::fluent_builders::UpdateUser::set_user_name): <p>A unique string that identifies a user and is associated with a server as specified by the <code>ServerId</code>. This user name must be a minimum of 3 and a maximum of 100 characters long. The following are valid characters: a-z, A-Z, 0-9, underscore '_', hyphen '-', period '.', and at sign '@'. The user name can't start with a hyphen, period, or at sign.</p>
    /// - On success, responds with [`UpdateUserOutput`](crate::output::UpdateUserOutput) with field(s):
    ///   - [`server_id(Option<String>)`](crate::output::UpdateUserOutput::server_id): <p>A system-assigned unique identifier for a server instance that the user account is assigned to.</p>
    ///   - [`user_name(Option<String>)`](crate::output::UpdateUserOutput::user_name): <p>The unique identifier for a user that is assigned to a server instance that was specified in the request.</p>
    /// - On failure, responds with [`SdkError<UpdateUserError>`](crate::error::UpdateUserError)
    pub fn update_user(&self) -> crate::client::fluent_builders::UpdateUser {
        crate::client::fluent_builders::UpdateUser::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
