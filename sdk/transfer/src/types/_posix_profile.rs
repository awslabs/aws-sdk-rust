// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The full POSIX identity, including user ID (<code>Uid</code>), group ID (<code>Gid</code>), and any secondary groups IDs (<code>SecondaryGids</code>), that controls your users' access to your Amazon EFS file systems. The POSIX permissions that are set on files and directories in your file system determine the level of access your users get when transferring files into and out of your Amazon EFS file systems.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PosixProfile {
    /// <p>The POSIX user ID used for all EFS operations by this user.</p>
    pub uid: i64,
    /// <p>The POSIX group ID used for all EFS operations by this user.</p>
    pub gid: i64,
    /// <p>The secondary POSIX group IDs used for all EFS operations by this user.</p>
    pub secondary_gids: ::std::option::Option<::std::vec::Vec<i64>>,
}
impl PosixProfile {
    /// <p>The POSIX user ID used for all EFS operations by this user.</p>
    pub fn uid(&self) -> i64 {
        self.uid
    }
    /// <p>The POSIX group ID used for all EFS operations by this user.</p>
    pub fn gid(&self) -> i64 {
        self.gid
    }
    /// <p>The secondary POSIX group IDs used for all EFS operations by this user.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.secondary_gids.is_none()`.
    pub fn secondary_gids(&self) -> &[i64] {
        self.secondary_gids.as_deref().unwrap_or_default()
    }
}
impl PosixProfile {
    /// Creates a new builder-style object to manufacture [`PosixProfile`](crate::types::PosixProfile).
    pub fn builder() -> crate::types::builders::PosixProfileBuilder {
        crate::types::builders::PosixProfileBuilder::default()
    }
}

/// A builder for [`PosixProfile`](crate::types::PosixProfile).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PosixProfileBuilder {
    pub(crate) uid: ::std::option::Option<i64>,
    pub(crate) gid: ::std::option::Option<i64>,
    pub(crate) secondary_gids: ::std::option::Option<::std::vec::Vec<i64>>,
}
impl PosixProfileBuilder {
    /// <p>The POSIX user ID used for all EFS operations by this user.</p>
    /// This field is required.
    pub fn uid(mut self, input: i64) -> Self {
        self.uid = ::std::option::Option::Some(input);
        self
    }
    /// <p>The POSIX user ID used for all EFS operations by this user.</p>
    pub fn set_uid(mut self, input: ::std::option::Option<i64>) -> Self {
        self.uid = input;
        self
    }
    /// <p>The POSIX user ID used for all EFS operations by this user.</p>
    pub fn get_uid(&self) -> &::std::option::Option<i64> {
        &self.uid
    }
    /// <p>The POSIX group ID used for all EFS operations by this user.</p>
    /// This field is required.
    pub fn gid(mut self, input: i64) -> Self {
        self.gid = ::std::option::Option::Some(input);
        self
    }
    /// <p>The POSIX group ID used for all EFS operations by this user.</p>
    pub fn set_gid(mut self, input: ::std::option::Option<i64>) -> Self {
        self.gid = input;
        self
    }
    /// <p>The POSIX group ID used for all EFS operations by this user.</p>
    pub fn get_gid(&self) -> &::std::option::Option<i64> {
        &self.gid
    }
    /// Appends an item to `secondary_gids`.
    ///
    /// To override the contents of this collection use [`set_secondary_gids`](Self::set_secondary_gids).
    ///
    /// <p>The secondary POSIX group IDs used for all EFS operations by this user.</p>
    pub fn secondary_gids(mut self, input: i64) -> Self {
        let mut v = self.secondary_gids.unwrap_or_default();
        v.push(input);
        self.secondary_gids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The secondary POSIX group IDs used for all EFS operations by this user.</p>
    pub fn set_secondary_gids(mut self, input: ::std::option::Option<::std::vec::Vec<i64>>) -> Self {
        self.secondary_gids = input;
        self
    }
    /// <p>The secondary POSIX group IDs used for all EFS operations by this user.</p>
    pub fn get_secondary_gids(&self) -> &::std::option::Option<::std::vec::Vec<i64>> {
        &self.secondary_gids
    }
    /// Consumes the builder and constructs a [`PosixProfile`](crate::types::PosixProfile).
    /// This method will fail if any of the following fields are not set:
    /// - [`uid`](crate::types::builders::PosixProfileBuilder::uid)
    /// - [`gid`](crate::types::builders::PosixProfileBuilder::gid)
    pub fn build(self) -> ::std::result::Result<crate::types::PosixProfile, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PosixProfile {
            uid: self.uid.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "uid",
                    "uid was not specified but it is required when building PosixProfile",
                )
            })?,
            gid: self.gid.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "gid",
                    "gid was not specified but it is required when building PosixProfile",
                )
            })?,
            secondary_gids: self.secondary_gids,
        })
    }
}
