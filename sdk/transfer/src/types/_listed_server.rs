// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Returns properties of a file transfer protocol-enabled server that was specified.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListedServer {
    /// <p>Specifies the unique Amazon Resource Name (ARN) for a server to be listed.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>Specifies the domain of the storage system that is used for file transfers.</p>
    #[doc(hidden)]
    pub domain: std::option::Option<crate::types::Domain>,
    /// <p>The mode of authentication for a server. The default value is <code>SERVICE_MANAGED</code>, which allows you to store and access user credentials within the Transfer Family service.</p>
    /// <p>Use <code>AWS_DIRECTORY_SERVICE</code> to provide access to Active Directory groups in Directory Service for Microsoft Active Directory or Microsoft Active Directory in your on-premises environment or in Amazon Web Services using AD Connector. This option also requires you to provide a Directory ID by using the <code>IdentityProviderDetails</code> parameter.</p>
    /// <p>Use the <code>API_GATEWAY</code> value to integrate with an identity provider of your choosing. The <code>API_GATEWAY</code> setting requires you to provide an Amazon API Gateway endpoint URL to call for authentication by using the <code>IdentityProviderDetails</code> parameter.</p>
    /// <p>Use the <code>AWS_LAMBDA</code> value to directly use an Lambda function as your identity provider. If you choose this value, you must specify the ARN for the Lambda function in the <code>Function</code> parameter or the <code>IdentityProviderDetails</code> data type.</p>
    #[doc(hidden)]
    pub identity_provider_type: std::option::Option<crate::types::IdentityProviderType>,
    /// <p>Specifies the type of VPC endpoint that your server is connected to. If your server is connected to a VPC endpoint, your server isn't accessible over the public internet.</p>
    #[doc(hidden)]
    pub endpoint_type: std::option::Option<crate::types::EndpointType>,
    /// <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that allows a server to turn on Amazon CloudWatch logging for Amazon S3 or Amazon EFSevents. When set, you can view user activity in your CloudWatch logs.</p>
    #[doc(hidden)]
    pub logging_role: std::option::Option<std::string::String>,
    /// <p>Specifies the unique system assigned identifier for the servers that were listed.</p>
    #[doc(hidden)]
    pub server_id: std::option::Option<std::string::String>,
    /// <p>The condition of the server that was described. A value of <code>ONLINE</code> indicates that the server can accept jobs and transfer files. A <code>State</code> value of <code>OFFLINE</code> means that the server cannot perform file transfer operations.</p>
    /// <p>The states of <code>STARTING</code> and <code>STOPPING</code> indicate that the server is in an intermediate state, either not fully able to respond, or not fully offline. The values of <code>START_FAILED</code> or <code>STOP_FAILED</code> can indicate an error condition.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::State>,
    /// <p>Specifies the number of users that are assigned to a server you specified with the <code>ServerId</code>.</p>
    #[doc(hidden)]
    pub user_count: std::option::Option<i32>,
}
impl ListedServer {
    /// <p>Specifies the unique Amazon Resource Name (ARN) for a server to be listed.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>Specifies the domain of the storage system that is used for file transfers.</p>
    pub fn domain(&self) -> std::option::Option<&crate::types::Domain> {
        self.domain.as_ref()
    }
    /// <p>The mode of authentication for a server. The default value is <code>SERVICE_MANAGED</code>, which allows you to store and access user credentials within the Transfer Family service.</p>
    /// <p>Use <code>AWS_DIRECTORY_SERVICE</code> to provide access to Active Directory groups in Directory Service for Microsoft Active Directory or Microsoft Active Directory in your on-premises environment or in Amazon Web Services using AD Connector. This option also requires you to provide a Directory ID by using the <code>IdentityProviderDetails</code> parameter.</p>
    /// <p>Use the <code>API_GATEWAY</code> value to integrate with an identity provider of your choosing. The <code>API_GATEWAY</code> setting requires you to provide an Amazon API Gateway endpoint URL to call for authentication by using the <code>IdentityProviderDetails</code> parameter.</p>
    /// <p>Use the <code>AWS_LAMBDA</code> value to directly use an Lambda function as your identity provider. If you choose this value, you must specify the ARN for the Lambda function in the <code>Function</code> parameter or the <code>IdentityProviderDetails</code> data type.</p>
    pub fn identity_provider_type(
        &self,
    ) -> std::option::Option<&crate::types::IdentityProviderType> {
        self.identity_provider_type.as_ref()
    }
    /// <p>Specifies the type of VPC endpoint that your server is connected to. If your server is connected to a VPC endpoint, your server isn't accessible over the public internet.</p>
    pub fn endpoint_type(&self) -> std::option::Option<&crate::types::EndpointType> {
        self.endpoint_type.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that allows a server to turn on Amazon CloudWatch logging for Amazon S3 or Amazon EFSevents. When set, you can view user activity in your CloudWatch logs.</p>
    pub fn logging_role(&self) -> std::option::Option<&str> {
        self.logging_role.as_deref()
    }
    /// <p>Specifies the unique system assigned identifier for the servers that were listed.</p>
    pub fn server_id(&self) -> std::option::Option<&str> {
        self.server_id.as_deref()
    }
    /// <p>The condition of the server that was described. A value of <code>ONLINE</code> indicates that the server can accept jobs and transfer files. A <code>State</code> value of <code>OFFLINE</code> means that the server cannot perform file transfer operations.</p>
    /// <p>The states of <code>STARTING</code> and <code>STOPPING</code> indicate that the server is in an intermediate state, either not fully able to respond, or not fully offline. The values of <code>START_FAILED</code> or <code>STOP_FAILED</code> can indicate an error condition.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::State> {
        self.state.as_ref()
    }
    /// <p>Specifies the number of users that are assigned to a server you specified with the <code>ServerId</code>.</p>
    pub fn user_count(&self) -> std::option::Option<i32> {
        self.user_count
    }
}
impl ListedServer {
    /// Creates a new builder-style object to manufacture [`ListedServer`](crate::types::ListedServer).
    pub fn builder() -> crate::types::builders::ListedServerBuilder {
        crate::types::builders::ListedServerBuilder::default()
    }
}

/// A builder for [`ListedServer`](crate::types::ListedServer).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListedServerBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) domain: std::option::Option<crate::types::Domain>,
    pub(crate) identity_provider_type: std::option::Option<crate::types::IdentityProviderType>,
    pub(crate) endpoint_type: std::option::Option<crate::types::EndpointType>,
    pub(crate) logging_role: std::option::Option<std::string::String>,
    pub(crate) server_id: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<crate::types::State>,
    pub(crate) user_count: std::option::Option<i32>,
}
impl ListedServerBuilder {
    /// <p>Specifies the unique Amazon Resource Name (ARN) for a server to be listed.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>Specifies the unique Amazon Resource Name (ARN) for a server to be listed.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>Specifies the domain of the storage system that is used for file transfers.</p>
    pub fn domain(mut self, input: crate::types::Domain) -> Self {
        self.domain = Some(input);
        self
    }
    /// <p>Specifies the domain of the storage system that is used for file transfers.</p>
    pub fn set_domain(mut self, input: std::option::Option<crate::types::Domain>) -> Self {
        self.domain = input;
        self
    }
    /// <p>The mode of authentication for a server. The default value is <code>SERVICE_MANAGED</code>, which allows you to store and access user credentials within the Transfer Family service.</p>
    /// <p>Use <code>AWS_DIRECTORY_SERVICE</code> to provide access to Active Directory groups in Directory Service for Microsoft Active Directory or Microsoft Active Directory in your on-premises environment or in Amazon Web Services using AD Connector. This option also requires you to provide a Directory ID by using the <code>IdentityProviderDetails</code> parameter.</p>
    /// <p>Use the <code>API_GATEWAY</code> value to integrate with an identity provider of your choosing. The <code>API_GATEWAY</code> setting requires you to provide an Amazon API Gateway endpoint URL to call for authentication by using the <code>IdentityProviderDetails</code> parameter.</p>
    /// <p>Use the <code>AWS_LAMBDA</code> value to directly use an Lambda function as your identity provider. If you choose this value, you must specify the ARN for the Lambda function in the <code>Function</code> parameter or the <code>IdentityProviderDetails</code> data type.</p>
    pub fn identity_provider_type(mut self, input: crate::types::IdentityProviderType) -> Self {
        self.identity_provider_type = Some(input);
        self
    }
    /// <p>The mode of authentication for a server. The default value is <code>SERVICE_MANAGED</code>, which allows you to store and access user credentials within the Transfer Family service.</p>
    /// <p>Use <code>AWS_DIRECTORY_SERVICE</code> to provide access to Active Directory groups in Directory Service for Microsoft Active Directory or Microsoft Active Directory in your on-premises environment or in Amazon Web Services using AD Connector. This option also requires you to provide a Directory ID by using the <code>IdentityProviderDetails</code> parameter.</p>
    /// <p>Use the <code>API_GATEWAY</code> value to integrate with an identity provider of your choosing. The <code>API_GATEWAY</code> setting requires you to provide an Amazon API Gateway endpoint URL to call for authentication by using the <code>IdentityProviderDetails</code> parameter.</p>
    /// <p>Use the <code>AWS_LAMBDA</code> value to directly use an Lambda function as your identity provider. If you choose this value, you must specify the ARN for the Lambda function in the <code>Function</code> parameter or the <code>IdentityProviderDetails</code> data type.</p>
    pub fn set_identity_provider_type(
        mut self,
        input: std::option::Option<crate::types::IdentityProviderType>,
    ) -> Self {
        self.identity_provider_type = input;
        self
    }
    /// <p>Specifies the type of VPC endpoint that your server is connected to. If your server is connected to a VPC endpoint, your server isn't accessible over the public internet.</p>
    pub fn endpoint_type(mut self, input: crate::types::EndpointType) -> Self {
        self.endpoint_type = Some(input);
        self
    }
    /// <p>Specifies the type of VPC endpoint that your server is connected to. If your server is connected to a VPC endpoint, your server isn't accessible over the public internet.</p>
    pub fn set_endpoint_type(
        mut self,
        input: std::option::Option<crate::types::EndpointType>,
    ) -> Self {
        self.endpoint_type = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that allows a server to turn on Amazon CloudWatch logging for Amazon S3 or Amazon EFSevents. When set, you can view user activity in your CloudWatch logs.</p>
    pub fn logging_role(mut self, input: impl Into<std::string::String>) -> Self {
        self.logging_role = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that allows a server to turn on Amazon CloudWatch logging for Amazon S3 or Amazon EFSevents. When set, you can view user activity in your CloudWatch logs.</p>
    pub fn set_logging_role(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.logging_role = input;
        self
    }
    /// <p>Specifies the unique system assigned identifier for the servers that were listed.</p>
    pub fn server_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.server_id = Some(input.into());
        self
    }
    /// <p>Specifies the unique system assigned identifier for the servers that were listed.</p>
    pub fn set_server_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.server_id = input;
        self
    }
    /// <p>The condition of the server that was described. A value of <code>ONLINE</code> indicates that the server can accept jobs and transfer files. A <code>State</code> value of <code>OFFLINE</code> means that the server cannot perform file transfer operations.</p>
    /// <p>The states of <code>STARTING</code> and <code>STOPPING</code> indicate that the server is in an intermediate state, either not fully able to respond, or not fully offline. The values of <code>START_FAILED</code> or <code>STOP_FAILED</code> can indicate an error condition.</p>
    pub fn state(mut self, input: crate::types::State) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The condition of the server that was described. A value of <code>ONLINE</code> indicates that the server can accept jobs and transfer files. A <code>State</code> value of <code>OFFLINE</code> means that the server cannot perform file transfer operations.</p>
    /// <p>The states of <code>STARTING</code> and <code>STOPPING</code> indicate that the server is in an intermediate state, either not fully able to respond, or not fully offline. The values of <code>START_FAILED</code> or <code>STOP_FAILED</code> can indicate an error condition.</p>
    pub fn set_state(mut self, input: std::option::Option<crate::types::State>) -> Self {
        self.state = input;
        self
    }
    /// <p>Specifies the number of users that are assigned to a server you specified with the <code>ServerId</code>.</p>
    pub fn user_count(mut self, input: i32) -> Self {
        self.user_count = Some(input);
        self
    }
    /// <p>Specifies the number of users that are assigned to a server you specified with the <code>ServerId</code>.</p>
    pub fn set_user_count(mut self, input: std::option::Option<i32>) -> Self {
        self.user_count = input;
        self
    }
    /// Consumes the builder and constructs a [`ListedServer`](crate::types::ListedServer).
    pub fn build(self) -> crate::types::ListedServer {
        crate::types::ListedServer {
            arn: self.arn,
            domain: self.domain,
            identity_provider_type: self.identity_provider_type,
            endpoint_type: self.endpoint_type,
            logging_role: self.logging_role,
            server_id: self.server_id,
            state: self.state,
            user_count: self.user_count,
        }
    }
}
