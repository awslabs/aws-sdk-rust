// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the properties of an agreement.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribedAgreement {
    /// <p>The unique Amazon Resource Name (ARN) for the agreement.</p>
    pub arn: ::std::string::String,
    /// <p>A unique identifier for the agreement. This identifier is returned when you create an agreement.</p>
    pub agreement_id: ::std::option::Option<::std::string::String>,
    /// <p>The name or short description that's used to identify the agreement.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the agreement, either <code>ACTIVE</code> or <code>INACTIVE</code>.</p>
    pub status: ::std::option::Option<crate::types::AgreementStatusType>,
    /// <p>A system-assigned unique identifier for a server instance. This identifier indicates the specific server that the agreement uses.</p>
    pub server_id: ::std::option::Option<::std::string::String>,
    /// <p>A unique identifier for the AS2 local profile.</p>
    pub local_profile_id: ::std::option::Option<::std::string::String>,
    /// <p>A unique identifier for the partner profile used in the agreement.</p>
    pub partner_profile_id: ::std::option::Option<::std::string::String>,
    /// <p>The landing directory (folder) for files that are transferred by using the AS2 protocol.</p>
    pub base_directory: ::std::option::Option<::std::string::String>,
    /// <p>Connectors are used to send files using either the AS2 or SFTP protocol. For the access role, provide the Amazon Resource Name (ARN) of the Identity and Access Management role to use.</p>
    /// <p> <b>For AS2 connectors</b> </p>
    /// <p>With AS2, you can send files by calling <code>StartFileTransfer</code> and specifying the file paths in the request parameter, <code>SendFilePaths</code>. We use the file’s parent directory (for example, for <code>--send-file-paths /bucket/dir/file.txt</code>, parent directory is <code>/bucket/dir/</code>) to temporarily store a processed AS2 message file, store the MDN when we receive them from the partner, and write a final JSON file containing relevant metadata of the transmission. So, the <code>AccessRole</code> needs to provide read and write access to the parent directory of the file location used in the <code>StartFileTransfer</code> request. Additionally, you need to provide read and write access to the parent directory of the files that you intend to send with <code>StartFileTransfer</code>.</p>
    /// <p>If you are using Basic authentication for your AS2 connector, the access role requires the <code>secretsmanager:GetSecretValue</code> permission for the secret. If the secret is encrypted using a customer-managed key instead of the Amazon Web Services managed key in Secrets Manager, then the role also needs the <code>kms:Decrypt</code> permission for that key.</p>
    /// <p> <b>For SFTP connectors</b> </p>
    /// <p>Make sure that the access role provides read and write access to the parent directory of the file location that's used in the <code>StartFileTransfer</code> request. Additionally, make sure that the role provides <code>secretsmanager:GetSecretValue</code> permission to Secrets Manager.</p>
    pub access_role: ::std::option::Option<::std::string::String>,
    /// <p>Key-value pairs that can be used to group and search for agreements.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl DescribedAgreement {
    /// <p>The unique Amazon Resource Name (ARN) for the agreement.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>A unique identifier for the agreement. This identifier is returned when you create an agreement.</p>
    pub fn agreement_id(&self) -> ::std::option::Option<&str> {
        self.agreement_id.as_deref()
    }
    /// <p>The name or short description that's used to identify the agreement.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The current status of the agreement, either <code>ACTIVE</code> or <code>INACTIVE</code>.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::AgreementStatusType> {
        self.status.as_ref()
    }
    /// <p>A system-assigned unique identifier for a server instance. This identifier indicates the specific server that the agreement uses.</p>
    pub fn server_id(&self) -> ::std::option::Option<&str> {
        self.server_id.as_deref()
    }
    /// <p>A unique identifier for the AS2 local profile.</p>
    pub fn local_profile_id(&self) -> ::std::option::Option<&str> {
        self.local_profile_id.as_deref()
    }
    /// <p>A unique identifier for the partner profile used in the agreement.</p>
    pub fn partner_profile_id(&self) -> ::std::option::Option<&str> {
        self.partner_profile_id.as_deref()
    }
    /// <p>The landing directory (folder) for files that are transferred by using the AS2 protocol.</p>
    pub fn base_directory(&self) -> ::std::option::Option<&str> {
        self.base_directory.as_deref()
    }
    /// <p>Connectors are used to send files using either the AS2 or SFTP protocol. For the access role, provide the Amazon Resource Name (ARN) of the Identity and Access Management role to use.</p>
    /// <p> <b>For AS2 connectors</b> </p>
    /// <p>With AS2, you can send files by calling <code>StartFileTransfer</code> and specifying the file paths in the request parameter, <code>SendFilePaths</code>. We use the file’s parent directory (for example, for <code>--send-file-paths /bucket/dir/file.txt</code>, parent directory is <code>/bucket/dir/</code>) to temporarily store a processed AS2 message file, store the MDN when we receive them from the partner, and write a final JSON file containing relevant metadata of the transmission. So, the <code>AccessRole</code> needs to provide read and write access to the parent directory of the file location used in the <code>StartFileTransfer</code> request. Additionally, you need to provide read and write access to the parent directory of the files that you intend to send with <code>StartFileTransfer</code>.</p>
    /// <p>If you are using Basic authentication for your AS2 connector, the access role requires the <code>secretsmanager:GetSecretValue</code> permission for the secret. If the secret is encrypted using a customer-managed key instead of the Amazon Web Services managed key in Secrets Manager, then the role also needs the <code>kms:Decrypt</code> permission for that key.</p>
    /// <p> <b>For SFTP connectors</b> </p>
    /// <p>Make sure that the access role provides read and write access to the parent directory of the file location that's used in the <code>StartFileTransfer</code> request. Additionally, make sure that the role provides <code>secretsmanager:GetSecretValue</code> permission to Secrets Manager.</p>
    pub fn access_role(&self) -> ::std::option::Option<&str> {
        self.access_role.as_deref()
    }
    /// <p>Key-value pairs that can be used to group and search for agreements.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl DescribedAgreement {
    /// Creates a new builder-style object to manufacture [`DescribedAgreement`](crate::types::DescribedAgreement).
    pub fn builder() -> crate::types::builders::DescribedAgreementBuilder {
        crate::types::builders::DescribedAgreementBuilder::default()
    }
}

/// A builder for [`DescribedAgreement`](crate::types::DescribedAgreement).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribedAgreementBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) agreement_id: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::AgreementStatusType>,
    pub(crate) server_id: ::std::option::Option<::std::string::String>,
    pub(crate) local_profile_id: ::std::option::Option<::std::string::String>,
    pub(crate) partner_profile_id: ::std::option::Option<::std::string::String>,
    pub(crate) base_directory: ::std::option::Option<::std::string::String>,
    pub(crate) access_role: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl DescribedAgreementBuilder {
    /// <p>The unique Amazon Resource Name (ARN) for the agreement.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique Amazon Resource Name (ARN) for the agreement.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The unique Amazon Resource Name (ARN) for the agreement.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>A unique identifier for the agreement. This identifier is returned when you create an agreement.</p>
    pub fn agreement_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agreement_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the agreement. This identifier is returned when you create an agreement.</p>
    pub fn set_agreement_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agreement_id = input;
        self
    }
    /// <p>A unique identifier for the agreement. This identifier is returned when you create an agreement.</p>
    pub fn get_agreement_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.agreement_id
    }
    /// <p>The name or short description that's used to identify the agreement.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name or short description that's used to identify the agreement.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The name or short description that's used to identify the agreement.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The current status of the agreement, either <code>ACTIVE</code> or <code>INACTIVE</code>.</p>
    pub fn status(mut self, input: crate::types::AgreementStatusType) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the agreement, either <code>ACTIVE</code> or <code>INACTIVE</code>.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::AgreementStatusType>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the agreement, either <code>ACTIVE</code> or <code>INACTIVE</code>.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::AgreementStatusType> {
        &self.status
    }
    /// <p>A system-assigned unique identifier for a server instance. This identifier indicates the specific server that the agreement uses.</p>
    pub fn server_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.server_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A system-assigned unique identifier for a server instance. This identifier indicates the specific server that the agreement uses.</p>
    pub fn set_server_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.server_id = input;
        self
    }
    /// <p>A system-assigned unique identifier for a server instance. This identifier indicates the specific server that the agreement uses.</p>
    pub fn get_server_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.server_id
    }
    /// <p>A unique identifier for the AS2 local profile.</p>
    pub fn local_profile_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.local_profile_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the AS2 local profile.</p>
    pub fn set_local_profile_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.local_profile_id = input;
        self
    }
    /// <p>A unique identifier for the AS2 local profile.</p>
    pub fn get_local_profile_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.local_profile_id
    }
    /// <p>A unique identifier for the partner profile used in the agreement.</p>
    pub fn partner_profile_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.partner_profile_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the partner profile used in the agreement.</p>
    pub fn set_partner_profile_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.partner_profile_id = input;
        self
    }
    /// <p>A unique identifier for the partner profile used in the agreement.</p>
    pub fn get_partner_profile_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.partner_profile_id
    }
    /// <p>The landing directory (folder) for files that are transferred by using the AS2 protocol.</p>
    pub fn base_directory(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.base_directory = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The landing directory (folder) for files that are transferred by using the AS2 protocol.</p>
    pub fn set_base_directory(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.base_directory = input;
        self
    }
    /// <p>The landing directory (folder) for files that are transferred by using the AS2 protocol.</p>
    pub fn get_base_directory(&self) -> &::std::option::Option<::std::string::String> {
        &self.base_directory
    }
    /// <p>Connectors are used to send files using either the AS2 or SFTP protocol. For the access role, provide the Amazon Resource Name (ARN) of the Identity and Access Management role to use.</p>
    /// <p> <b>For AS2 connectors</b> </p>
    /// <p>With AS2, you can send files by calling <code>StartFileTransfer</code> and specifying the file paths in the request parameter, <code>SendFilePaths</code>. We use the file’s parent directory (for example, for <code>--send-file-paths /bucket/dir/file.txt</code>, parent directory is <code>/bucket/dir/</code>) to temporarily store a processed AS2 message file, store the MDN when we receive them from the partner, and write a final JSON file containing relevant metadata of the transmission. So, the <code>AccessRole</code> needs to provide read and write access to the parent directory of the file location used in the <code>StartFileTransfer</code> request. Additionally, you need to provide read and write access to the parent directory of the files that you intend to send with <code>StartFileTransfer</code>.</p>
    /// <p>If you are using Basic authentication for your AS2 connector, the access role requires the <code>secretsmanager:GetSecretValue</code> permission for the secret. If the secret is encrypted using a customer-managed key instead of the Amazon Web Services managed key in Secrets Manager, then the role also needs the <code>kms:Decrypt</code> permission for that key.</p>
    /// <p> <b>For SFTP connectors</b> </p>
    /// <p>Make sure that the access role provides read and write access to the parent directory of the file location that's used in the <code>StartFileTransfer</code> request. Additionally, make sure that the role provides <code>secretsmanager:GetSecretValue</code> permission to Secrets Manager.</p>
    pub fn access_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.access_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Connectors are used to send files using either the AS2 or SFTP protocol. For the access role, provide the Amazon Resource Name (ARN) of the Identity and Access Management role to use.</p>
    /// <p> <b>For AS2 connectors</b> </p>
    /// <p>With AS2, you can send files by calling <code>StartFileTransfer</code> and specifying the file paths in the request parameter, <code>SendFilePaths</code>. We use the file’s parent directory (for example, for <code>--send-file-paths /bucket/dir/file.txt</code>, parent directory is <code>/bucket/dir/</code>) to temporarily store a processed AS2 message file, store the MDN when we receive them from the partner, and write a final JSON file containing relevant metadata of the transmission. So, the <code>AccessRole</code> needs to provide read and write access to the parent directory of the file location used in the <code>StartFileTransfer</code> request. Additionally, you need to provide read and write access to the parent directory of the files that you intend to send with <code>StartFileTransfer</code>.</p>
    /// <p>If you are using Basic authentication for your AS2 connector, the access role requires the <code>secretsmanager:GetSecretValue</code> permission for the secret. If the secret is encrypted using a customer-managed key instead of the Amazon Web Services managed key in Secrets Manager, then the role also needs the <code>kms:Decrypt</code> permission for that key.</p>
    /// <p> <b>For SFTP connectors</b> </p>
    /// <p>Make sure that the access role provides read and write access to the parent directory of the file location that's used in the <code>StartFileTransfer</code> request. Additionally, make sure that the role provides <code>secretsmanager:GetSecretValue</code> permission to Secrets Manager.</p>
    pub fn set_access_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.access_role = input;
        self
    }
    /// <p>Connectors are used to send files using either the AS2 or SFTP protocol. For the access role, provide the Amazon Resource Name (ARN) of the Identity and Access Management role to use.</p>
    /// <p> <b>For AS2 connectors</b> </p>
    /// <p>With AS2, you can send files by calling <code>StartFileTransfer</code> and specifying the file paths in the request parameter, <code>SendFilePaths</code>. We use the file’s parent directory (for example, for <code>--send-file-paths /bucket/dir/file.txt</code>, parent directory is <code>/bucket/dir/</code>) to temporarily store a processed AS2 message file, store the MDN when we receive them from the partner, and write a final JSON file containing relevant metadata of the transmission. So, the <code>AccessRole</code> needs to provide read and write access to the parent directory of the file location used in the <code>StartFileTransfer</code> request. Additionally, you need to provide read and write access to the parent directory of the files that you intend to send with <code>StartFileTransfer</code>.</p>
    /// <p>If you are using Basic authentication for your AS2 connector, the access role requires the <code>secretsmanager:GetSecretValue</code> permission for the secret. If the secret is encrypted using a customer-managed key instead of the Amazon Web Services managed key in Secrets Manager, then the role also needs the <code>kms:Decrypt</code> permission for that key.</p>
    /// <p> <b>For SFTP connectors</b> </p>
    /// <p>Make sure that the access role provides read and write access to the parent directory of the file location that's used in the <code>StartFileTransfer</code> request. Additionally, make sure that the role provides <code>secretsmanager:GetSecretValue</code> permission to Secrets Manager.</p>
    pub fn get_access_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.access_role
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Key-value pairs that can be used to group and search for agreements.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Key-value pairs that can be used to group and search for agreements.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Key-value pairs that can be used to group and search for agreements.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`DescribedAgreement`](crate::types::DescribedAgreement).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::DescribedAgreementBuilder::arn)
    pub fn build(self) -> ::std::result::Result<crate::types::DescribedAgreement, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DescribedAgreement {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building DescribedAgreement",
                )
            })?,
            agreement_id: self.agreement_id,
            description: self.description,
            status: self.status,
            server_id: self.server_id,
            local_profile_id: self.local_profile_id,
            partner_profile_id: self.partner_profile_id,
            base_directory: self.base_directory,
            access_role: self.access_role,
            tags: self.tags,
        })
    }
}
