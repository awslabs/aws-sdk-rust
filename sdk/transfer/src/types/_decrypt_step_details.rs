// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DecryptStepDetails {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::EncryptionType>,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub source_file_location: std::option::Option<std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub overwrite_existing: std::option::Option<crate::types::OverwriteExisting>,
    /// <p>Specifies the location for the file being copied. Only applicable for the Copy type of workflow steps.</p>
    #[doc(hidden)]
    pub destination_file_location: std::option::Option<crate::types::InputFileLocation>,
}
impl DecryptStepDetails {
    #[allow(missing_docs)] // documentation missing in model
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn r#type(&self) -> std::option::Option<&crate::types::EncryptionType> {
        self.r#type.as_ref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn source_file_location(&self) -> std::option::Option<&str> {
        self.source_file_location.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn overwrite_existing(&self) -> std::option::Option<&crate::types::OverwriteExisting> {
        self.overwrite_existing.as_ref()
    }
    /// <p>Specifies the location for the file being copied. Only applicable for the Copy type of workflow steps.</p>
    pub fn destination_file_location(
        &self,
    ) -> std::option::Option<&crate::types::InputFileLocation> {
        self.destination_file_location.as_ref()
    }
}
impl DecryptStepDetails {
    /// Creates a new builder-style object to manufacture [`DecryptStepDetails`](crate::types::DecryptStepDetails).
    pub fn builder() -> crate::types::builders::DecryptStepDetailsBuilder {
        crate::types::builders::DecryptStepDetailsBuilder::default()
    }
}

/// A builder for [`DecryptStepDetails`](crate::types::DecryptStepDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DecryptStepDetailsBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::EncryptionType>,
    pub(crate) source_file_location: std::option::Option<std::string::String>,
    pub(crate) overwrite_existing: std::option::Option<crate::types::OverwriteExisting>,
    pub(crate) destination_file_location: std::option::Option<crate::types::InputFileLocation>,
}
impl DecryptStepDetailsBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn r#type(mut self, input: crate::types::EncryptionType) -> Self {
        self.r#type = Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_type(mut self, input: std::option::Option<crate::types::EncryptionType>) -> Self {
        self.r#type = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn source_file_location(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_file_location = Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_source_file_location(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_file_location = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn overwrite_existing(mut self, input: crate::types::OverwriteExisting) -> Self {
        self.overwrite_existing = Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_overwrite_existing(
        mut self,
        input: std::option::Option<crate::types::OverwriteExisting>,
    ) -> Self {
        self.overwrite_existing = input;
        self
    }
    /// <p>Specifies the location for the file being copied. Only applicable for the Copy type of workflow steps.</p>
    pub fn destination_file_location(mut self, input: crate::types::InputFileLocation) -> Self {
        self.destination_file_location = Some(input);
        self
    }
    /// <p>Specifies the location for the file being copied. Only applicable for the Copy type of workflow steps.</p>
    pub fn set_destination_file_location(
        mut self,
        input: std::option::Option<crate::types::InputFileLocation>,
    ) -> Self {
        self.destination_file_location = input;
        self
    }
    /// Consumes the builder and constructs a [`DecryptStepDetails`](crate::types::DecryptStepDetails).
    pub fn build(self) -> crate::types::DecryptStepDetails {
        crate::types::DecryptStepDetails {
            name: self.name,
            r#type: self.r#type,
            source_file_location: self.source_file_location,
            overwrite_existing: self.overwrite_existing,
            destination_file_location: self.destination_file_location,
        }
    }
}
