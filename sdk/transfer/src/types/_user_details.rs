// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the user name, server ID, and session ID for a workflow.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UserDetails {
    /// <p>A unique string that identifies a user account associated with a server.</p>
    #[doc(hidden)]
    pub user_name: std::option::Option<std::string::String>,
    /// <p>The system-assigned unique identifier for a Transfer server instance. </p>
    #[doc(hidden)]
    pub server_id: std::option::Option<std::string::String>,
    /// <p>The system-assigned unique identifier for a session that corresponds to the workflow.</p>
    #[doc(hidden)]
    pub session_id: std::option::Option<std::string::String>,
}
impl UserDetails {
    /// <p>A unique string that identifies a user account associated with a server.</p>
    pub fn user_name(&self) -> std::option::Option<&str> {
        self.user_name.as_deref()
    }
    /// <p>The system-assigned unique identifier for a Transfer server instance. </p>
    pub fn server_id(&self) -> std::option::Option<&str> {
        self.server_id.as_deref()
    }
    /// <p>The system-assigned unique identifier for a session that corresponds to the workflow.</p>
    pub fn session_id(&self) -> std::option::Option<&str> {
        self.session_id.as_deref()
    }
}
impl UserDetails {
    /// Creates a new builder-style object to manufacture [`UserDetails`](crate::types::UserDetails).
    pub fn builder() -> crate::types::builders::UserDetailsBuilder {
        crate::types::builders::UserDetailsBuilder::default()
    }
}

/// A builder for [`UserDetails`](crate::types::UserDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UserDetailsBuilder {
    pub(crate) user_name: std::option::Option<std::string::String>,
    pub(crate) server_id: std::option::Option<std::string::String>,
    pub(crate) session_id: std::option::Option<std::string::String>,
}
impl UserDetailsBuilder {
    /// <p>A unique string that identifies a user account associated with a server.</p>
    pub fn user_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_name = Some(input.into());
        self
    }
    /// <p>A unique string that identifies a user account associated with a server.</p>
    pub fn set_user_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_name = input;
        self
    }
    /// <p>The system-assigned unique identifier for a Transfer server instance. </p>
    pub fn server_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.server_id = Some(input.into());
        self
    }
    /// <p>The system-assigned unique identifier for a Transfer server instance. </p>
    pub fn set_server_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.server_id = input;
        self
    }
    /// <p>The system-assigned unique identifier for a session that corresponds to the workflow.</p>
    pub fn session_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.session_id = Some(input.into());
        self
    }
    /// <p>The system-assigned unique identifier for a session that corresponds to the workflow.</p>
    pub fn set_session_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// Consumes the builder and constructs a [`UserDetails`](crate::types::UserDetails).
    pub fn build(self) -> crate::types::UserDetails {
        crate::types::UserDetails {
            user_name: self.user_name,
            server_id: self.server_id,
            session_id: self.session_id,
        }
    }
}
