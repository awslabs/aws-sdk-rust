// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the properties of a certificate.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DescribedCertificate {
    /// <p>The unique Amazon Resource Name (ARN) for the certificate.</p>
    pub arn: ::std::string::String,
    /// <p>An array of identifiers for the imported certificates. You use this identifier for working with profiles and partner profiles.</p>
    pub certificate_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether this certificate is used for signing or encryption.</p>
    pub usage: ::std::option::Option<crate::types::CertificateUsageType>,
    /// <p>The certificate can be either <code>ACTIVE</code>, <code>PENDING_ROTATION</code>, or <code>INACTIVE</code>. <code>PENDING_ROTATION</code> means that this certificate will replace the current certificate when it expires.</p>
    pub status: ::std::option::Option<crate::types::CertificateStatusType>,
    /// <p>The file name for the certificate.</p>
    pub certificate: ::std::option::Option<::std::string::String>,
    /// <p>The list of certificates that make up the chain for the certificate.</p>
    pub certificate_chain: ::std::option::Option<::std::string::String>,
    /// <p>An optional date that specifies when the certificate becomes active.</p>
    pub active_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>An optional date that specifies when the certificate becomes inactive.</p>
    pub inactive_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The serial number for the certificate.</p>
    pub serial: ::std::option::Option<::std::string::String>,
    /// <p>The earliest date that the certificate is valid.</p>
    pub not_before_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The final date that the certificate is valid.</p>
    pub not_after_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>If a private key has been specified for the certificate, its type is <code>CERTIFICATE_WITH_PRIVATE_KEY</code>. If there is no private key, the type is <code>CERTIFICATE</code>.</p>
    pub r#type: ::std::option::Option<crate::types::CertificateType>,
    /// <p>The name or description that's used to identity the certificate.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Key-value pairs that can be used to group and search for certificates.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl DescribedCertificate {
    /// <p>The unique Amazon Resource Name (ARN) for the certificate.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>An array of identifiers for the imported certificates. You use this identifier for working with profiles and partner profiles.</p>
    pub fn certificate_id(&self) -> ::std::option::Option<&str> {
        self.certificate_id.as_deref()
    }
    /// <p>Specifies whether this certificate is used for signing or encryption.</p>
    pub fn usage(&self) -> ::std::option::Option<&crate::types::CertificateUsageType> {
        self.usage.as_ref()
    }
    /// <p>The certificate can be either <code>ACTIVE</code>, <code>PENDING_ROTATION</code>, or <code>INACTIVE</code>. <code>PENDING_ROTATION</code> means that this certificate will replace the current certificate when it expires.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::CertificateStatusType> {
        self.status.as_ref()
    }
    /// <p>The file name for the certificate.</p>
    pub fn certificate(&self) -> ::std::option::Option<&str> {
        self.certificate.as_deref()
    }
    /// <p>The list of certificates that make up the chain for the certificate.</p>
    pub fn certificate_chain(&self) -> ::std::option::Option<&str> {
        self.certificate_chain.as_deref()
    }
    /// <p>An optional date that specifies when the certificate becomes active.</p>
    pub fn active_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.active_date.as_ref()
    }
    /// <p>An optional date that specifies when the certificate becomes inactive.</p>
    pub fn inactive_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.inactive_date.as_ref()
    }
    /// <p>The serial number for the certificate.</p>
    pub fn serial(&self) -> ::std::option::Option<&str> {
        self.serial.as_deref()
    }
    /// <p>The earliest date that the certificate is valid.</p>
    pub fn not_before_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.not_before_date.as_ref()
    }
    /// <p>The final date that the certificate is valid.</p>
    pub fn not_after_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.not_after_date.as_ref()
    }
    /// <p>If a private key has been specified for the certificate, its type is <code>CERTIFICATE_WITH_PRIVATE_KEY</code>. If there is no private key, the type is <code>CERTIFICATE</code>.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::CertificateType> {
        self.r#type.as_ref()
    }
    /// <p>The name or description that's used to identity the certificate.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Key-value pairs that can be used to group and search for certificates.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for DescribedCertificate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DescribedCertificate");
        formatter.field("arn", &self.arn);
        formatter.field("certificate_id", &self.certificate_id);
        formatter.field("usage", &self.usage);
        formatter.field("status", &self.status);
        formatter.field("certificate", &"*** Sensitive Data Redacted ***");
        formatter.field("certificate_chain", &"*** Sensitive Data Redacted ***");
        formatter.field("active_date", &self.active_date);
        formatter.field("inactive_date", &self.inactive_date);
        formatter.field("serial", &self.serial);
        formatter.field("not_before_date", &self.not_before_date);
        formatter.field("not_after_date", &self.not_after_date);
        formatter.field("r#type", &self.r#type);
        formatter.field("description", &self.description);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
impl DescribedCertificate {
    /// Creates a new builder-style object to manufacture [`DescribedCertificate`](crate::types::DescribedCertificate).
    pub fn builder() -> crate::types::builders::DescribedCertificateBuilder {
        crate::types::builders::DescribedCertificateBuilder::default()
    }
}

/// A builder for [`DescribedCertificate`](crate::types::DescribedCertificate).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct DescribedCertificateBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) certificate_id: ::std::option::Option<::std::string::String>,
    pub(crate) usage: ::std::option::Option<crate::types::CertificateUsageType>,
    pub(crate) status: ::std::option::Option<crate::types::CertificateStatusType>,
    pub(crate) certificate: ::std::option::Option<::std::string::String>,
    pub(crate) certificate_chain: ::std::option::Option<::std::string::String>,
    pub(crate) active_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) inactive_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) serial: ::std::option::Option<::std::string::String>,
    pub(crate) not_before_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) not_after_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) r#type: ::std::option::Option<crate::types::CertificateType>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl DescribedCertificateBuilder {
    /// <p>The unique Amazon Resource Name (ARN) for the certificate.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique Amazon Resource Name (ARN) for the certificate.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The unique Amazon Resource Name (ARN) for the certificate.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>An array of identifiers for the imported certificates. You use this identifier for working with profiles and partner profiles.</p>
    pub fn certificate_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.certificate_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An array of identifiers for the imported certificates. You use this identifier for working with profiles and partner profiles.</p>
    pub fn set_certificate_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.certificate_id = input;
        self
    }
    /// <p>An array of identifiers for the imported certificates. You use this identifier for working with profiles and partner profiles.</p>
    pub fn get_certificate_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.certificate_id
    }
    /// <p>Specifies whether this certificate is used for signing or encryption.</p>
    pub fn usage(mut self, input: crate::types::CertificateUsageType) -> Self {
        self.usage = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether this certificate is used for signing or encryption.</p>
    pub fn set_usage(mut self, input: ::std::option::Option<crate::types::CertificateUsageType>) -> Self {
        self.usage = input;
        self
    }
    /// <p>Specifies whether this certificate is used for signing or encryption.</p>
    pub fn get_usage(&self) -> &::std::option::Option<crate::types::CertificateUsageType> {
        &self.usage
    }
    /// <p>The certificate can be either <code>ACTIVE</code>, <code>PENDING_ROTATION</code>, or <code>INACTIVE</code>. <code>PENDING_ROTATION</code> means that this certificate will replace the current certificate when it expires.</p>
    pub fn status(mut self, input: crate::types::CertificateStatusType) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The certificate can be either <code>ACTIVE</code>, <code>PENDING_ROTATION</code>, or <code>INACTIVE</code>. <code>PENDING_ROTATION</code> means that this certificate will replace the current certificate when it expires.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::CertificateStatusType>) -> Self {
        self.status = input;
        self
    }
    /// <p>The certificate can be either <code>ACTIVE</code>, <code>PENDING_ROTATION</code>, or <code>INACTIVE</code>. <code>PENDING_ROTATION</code> means that this certificate will replace the current certificate when it expires.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::CertificateStatusType> {
        &self.status
    }
    /// <p>The file name for the certificate.</p>
    pub fn certificate(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.certificate = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The file name for the certificate.</p>
    pub fn set_certificate(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.certificate = input;
        self
    }
    /// <p>The file name for the certificate.</p>
    pub fn get_certificate(&self) -> &::std::option::Option<::std::string::String> {
        &self.certificate
    }
    /// <p>The list of certificates that make up the chain for the certificate.</p>
    pub fn certificate_chain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.certificate_chain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The list of certificates that make up the chain for the certificate.</p>
    pub fn set_certificate_chain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.certificate_chain = input;
        self
    }
    /// <p>The list of certificates that make up the chain for the certificate.</p>
    pub fn get_certificate_chain(&self) -> &::std::option::Option<::std::string::String> {
        &self.certificate_chain
    }
    /// <p>An optional date that specifies when the certificate becomes active.</p>
    pub fn active_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.active_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>An optional date that specifies when the certificate becomes active.</p>
    pub fn set_active_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.active_date = input;
        self
    }
    /// <p>An optional date that specifies when the certificate becomes active.</p>
    pub fn get_active_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.active_date
    }
    /// <p>An optional date that specifies when the certificate becomes inactive.</p>
    pub fn inactive_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.inactive_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>An optional date that specifies when the certificate becomes inactive.</p>
    pub fn set_inactive_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.inactive_date = input;
        self
    }
    /// <p>An optional date that specifies when the certificate becomes inactive.</p>
    pub fn get_inactive_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.inactive_date
    }
    /// <p>The serial number for the certificate.</p>
    pub fn serial(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.serial = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The serial number for the certificate.</p>
    pub fn set_serial(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.serial = input;
        self
    }
    /// <p>The serial number for the certificate.</p>
    pub fn get_serial(&self) -> &::std::option::Option<::std::string::String> {
        &self.serial
    }
    /// <p>The earliest date that the certificate is valid.</p>
    pub fn not_before_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.not_before_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The earliest date that the certificate is valid.</p>
    pub fn set_not_before_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.not_before_date = input;
        self
    }
    /// <p>The earliest date that the certificate is valid.</p>
    pub fn get_not_before_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.not_before_date
    }
    /// <p>The final date that the certificate is valid.</p>
    pub fn not_after_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.not_after_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The final date that the certificate is valid.</p>
    pub fn set_not_after_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.not_after_date = input;
        self
    }
    /// <p>The final date that the certificate is valid.</p>
    pub fn get_not_after_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.not_after_date
    }
    /// <p>If a private key has been specified for the certificate, its type is <code>CERTIFICATE_WITH_PRIVATE_KEY</code>. If there is no private key, the type is <code>CERTIFICATE</code>.</p>
    pub fn r#type(mut self, input: crate::types::CertificateType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>If a private key has been specified for the certificate, its type is <code>CERTIFICATE_WITH_PRIVATE_KEY</code>. If there is no private key, the type is <code>CERTIFICATE</code>.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::CertificateType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>If a private key has been specified for the certificate, its type is <code>CERTIFICATE_WITH_PRIVATE_KEY</code>. If there is no private key, the type is <code>CERTIFICATE</code>.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::CertificateType> {
        &self.r#type
    }
    /// <p>The name or description that's used to identity the certificate.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name or description that's used to identity the certificate.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The name or description that's used to identity the certificate.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Key-value pairs that can be used to group and search for certificates.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Key-value pairs that can be used to group and search for certificates.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Key-value pairs that can be used to group and search for certificates.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`DescribedCertificate`](crate::types::DescribedCertificate).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::DescribedCertificateBuilder::arn)
    pub fn build(self) -> ::std::result::Result<crate::types::DescribedCertificate, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DescribedCertificate {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building DescribedCertificate",
                )
            })?,
            certificate_id: self.certificate_id,
            usage: self.usage,
            status: self.status,
            certificate: self.certificate,
            certificate_chain: self.certificate_chain,
            active_date: self.active_date,
            inactive_date: self.inactive_date,
            serial: self.serial,
            not_before_date: self.not_before_date,
            not_after_date: self.not_after_date,
            r#type: self.r#type,
            description: self.description,
            tags: self.tags,
        })
    }
}
impl ::std::fmt::Debug for DescribedCertificateBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DescribedCertificateBuilder");
        formatter.field("arn", &self.arn);
        formatter.field("certificate_id", &self.certificate_id);
        formatter.field("usage", &self.usage);
        formatter.field("status", &self.status);
        formatter.field("certificate", &"*** Sensitive Data Redacted ***");
        formatter.field("certificate_chain", &"*** Sensitive Data Redacted ***");
        formatter.field("active_date", &self.active_date);
        formatter.field("inactive_date", &self.inactive_date);
        formatter.field("serial", &self.serial);
        formatter.field("not_before_date", &self.not_before_date);
        formatter.field("not_after_date", &self.not_after_date);
        formatter.field("r#type", &self.r#type);
        formatter.field("description", &self.description);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
