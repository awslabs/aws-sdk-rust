// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the properties of a security policy that was specified. For more information about security policies, see <a href="https://docs.aws.amazon.com/transfer/latest/userguide/security-policies.html">Working with security policies</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribedSecurityPolicy {
    /// <p>Specifies whether this policy enables Federal Information Processing Standards (FIPS).</p>
    pub fips: ::std::option::Option<bool>,
    /// <p>Specifies the name of the security policy that is attached to the server.</p>
    pub security_policy_name: ::std::string::String,
    /// <p>Specifies the enabled Secure Shell (SSH) cipher encryption algorithms in the security policy that is attached to the server.</p>
    pub ssh_ciphers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Specifies the enabled SSH key exchange (KEX) encryption algorithms in the security policy that is attached to the server.</p>
    pub ssh_kexs: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Specifies the enabled SSH message authentication code (MAC) encryption algorithms in the security policy that is attached to the server.</p>
    pub ssh_macs: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Specifies the enabled Transport Layer Security (TLS) cipher encryption algorithms in the security policy that is attached to the server.</p>
    pub tls_ciphers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl DescribedSecurityPolicy {
    /// <p>Specifies whether this policy enables Federal Information Processing Standards (FIPS).</p>
    pub fn fips(&self) -> ::std::option::Option<bool> {
        self.fips
    }
    /// <p>Specifies the name of the security policy that is attached to the server.</p>
    pub fn security_policy_name(&self) -> &str {
        use std::ops::Deref;
        self.security_policy_name.deref()
    }
    /// <p>Specifies the enabled Secure Shell (SSH) cipher encryption algorithms in the security policy that is attached to the server.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ssh_ciphers.is_none()`.
    pub fn ssh_ciphers(&self) -> &[::std::string::String] {
        self.ssh_ciphers.as_deref().unwrap_or_default()
    }
    /// <p>Specifies the enabled SSH key exchange (KEX) encryption algorithms in the security policy that is attached to the server.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ssh_kexs.is_none()`.
    pub fn ssh_kexs(&self) -> &[::std::string::String] {
        self.ssh_kexs.as_deref().unwrap_or_default()
    }
    /// <p>Specifies the enabled SSH message authentication code (MAC) encryption algorithms in the security policy that is attached to the server.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ssh_macs.is_none()`.
    pub fn ssh_macs(&self) -> &[::std::string::String] {
        self.ssh_macs.as_deref().unwrap_or_default()
    }
    /// <p>Specifies the enabled Transport Layer Security (TLS) cipher encryption algorithms in the security policy that is attached to the server.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tls_ciphers.is_none()`.
    pub fn tls_ciphers(&self) -> &[::std::string::String] {
        self.tls_ciphers.as_deref().unwrap_or_default()
    }
}
impl DescribedSecurityPolicy {
    /// Creates a new builder-style object to manufacture [`DescribedSecurityPolicy`](crate::types::DescribedSecurityPolicy).
    pub fn builder() -> crate::types::builders::DescribedSecurityPolicyBuilder {
        crate::types::builders::DescribedSecurityPolicyBuilder::default()
    }
}

/// A builder for [`DescribedSecurityPolicy`](crate::types::DescribedSecurityPolicy).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribedSecurityPolicyBuilder {
    pub(crate) fips: ::std::option::Option<bool>,
    pub(crate) security_policy_name: ::std::option::Option<::std::string::String>,
    pub(crate) ssh_ciphers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) ssh_kexs: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) ssh_macs: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) tls_ciphers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl DescribedSecurityPolicyBuilder {
    /// <p>Specifies whether this policy enables Federal Information Processing Standards (FIPS).</p>
    pub fn fips(mut self, input: bool) -> Self {
        self.fips = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether this policy enables Federal Information Processing Standards (FIPS).</p>
    pub fn set_fips(mut self, input: ::std::option::Option<bool>) -> Self {
        self.fips = input;
        self
    }
    /// <p>Specifies whether this policy enables Federal Information Processing Standards (FIPS).</p>
    pub fn get_fips(&self) -> &::std::option::Option<bool> {
        &self.fips
    }
    /// <p>Specifies the name of the security policy that is attached to the server.</p>
    /// This field is required.
    pub fn security_policy_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.security_policy_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the name of the security policy that is attached to the server.</p>
    pub fn set_security_policy_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.security_policy_name = input;
        self
    }
    /// <p>Specifies the name of the security policy that is attached to the server.</p>
    pub fn get_security_policy_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.security_policy_name
    }
    /// Appends an item to `ssh_ciphers`.
    ///
    /// To override the contents of this collection use [`set_ssh_ciphers`](Self::set_ssh_ciphers).
    ///
    /// <p>Specifies the enabled Secure Shell (SSH) cipher encryption algorithms in the security policy that is attached to the server.</p>
    pub fn ssh_ciphers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.ssh_ciphers.unwrap_or_default();
        v.push(input.into());
        self.ssh_ciphers = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the enabled Secure Shell (SSH) cipher encryption algorithms in the security policy that is attached to the server.</p>
    pub fn set_ssh_ciphers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.ssh_ciphers = input;
        self
    }
    /// <p>Specifies the enabled Secure Shell (SSH) cipher encryption algorithms in the security policy that is attached to the server.</p>
    pub fn get_ssh_ciphers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.ssh_ciphers
    }
    /// Appends an item to `ssh_kexs`.
    ///
    /// To override the contents of this collection use [`set_ssh_kexs`](Self::set_ssh_kexs).
    ///
    /// <p>Specifies the enabled SSH key exchange (KEX) encryption algorithms in the security policy that is attached to the server.</p>
    pub fn ssh_kexs(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.ssh_kexs.unwrap_or_default();
        v.push(input.into());
        self.ssh_kexs = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the enabled SSH key exchange (KEX) encryption algorithms in the security policy that is attached to the server.</p>
    pub fn set_ssh_kexs(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.ssh_kexs = input;
        self
    }
    /// <p>Specifies the enabled SSH key exchange (KEX) encryption algorithms in the security policy that is attached to the server.</p>
    pub fn get_ssh_kexs(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.ssh_kexs
    }
    /// Appends an item to `ssh_macs`.
    ///
    /// To override the contents of this collection use [`set_ssh_macs`](Self::set_ssh_macs).
    ///
    /// <p>Specifies the enabled SSH message authentication code (MAC) encryption algorithms in the security policy that is attached to the server.</p>
    pub fn ssh_macs(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.ssh_macs.unwrap_or_default();
        v.push(input.into());
        self.ssh_macs = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the enabled SSH message authentication code (MAC) encryption algorithms in the security policy that is attached to the server.</p>
    pub fn set_ssh_macs(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.ssh_macs = input;
        self
    }
    /// <p>Specifies the enabled SSH message authentication code (MAC) encryption algorithms in the security policy that is attached to the server.</p>
    pub fn get_ssh_macs(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.ssh_macs
    }
    /// Appends an item to `tls_ciphers`.
    ///
    /// To override the contents of this collection use [`set_tls_ciphers`](Self::set_tls_ciphers).
    ///
    /// <p>Specifies the enabled Transport Layer Security (TLS) cipher encryption algorithms in the security policy that is attached to the server.</p>
    pub fn tls_ciphers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.tls_ciphers.unwrap_or_default();
        v.push(input.into());
        self.tls_ciphers = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the enabled Transport Layer Security (TLS) cipher encryption algorithms in the security policy that is attached to the server.</p>
    pub fn set_tls_ciphers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.tls_ciphers = input;
        self
    }
    /// <p>Specifies the enabled Transport Layer Security (TLS) cipher encryption algorithms in the security policy that is attached to the server.</p>
    pub fn get_tls_ciphers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.tls_ciphers
    }
    /// Consumes the builder and constructs a [`DescribedSecurityPolicy`](crate::types::DescribedSecurityPolicy).
    /// This method will fail if any of the following fields are not set:
    /// - [`security_policy_name`](crate::types::builders::DescribedSecurityPolicyBuilder::security_policy_name)
    pub fn build(self) -> ::std::result::Result<crate::types::DescribedSecurityPolicy, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DescribedSecurityPolicy {
            fips: self.fips,
            security_policy_name: self.security_policy_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "security_policy_name",
                    "security_policy_name was not specified but it is required when building DescribedSecurityPolicy",
                )
            })?,
            ssh_ciphers: self.ssh_ciphers,
            ssh_kexs: self.ssh_kexs,
            ssh_macs: self.ssh_macs,
            tls_ciphers: self.tls_ciphers,
        })
    }
}
