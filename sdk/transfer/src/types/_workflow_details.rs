// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Container for the <code>WorkflowDetail</code> data type. It is used by actions that trigger a workflow to begin execution.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WorkflowDetails {
    /// <p>A trigger that starts a workflow: the workflow begins to execute after a file is uploaded.</p>
    /// <p>To remove an associated workflow from a server, you can provide an empty <code>OnUpload</code> object, as in the following example.</p>
    /// <p> <code>aws transfer update-server --server-id s-01234567890abcdef --workflow-details '{"OnUpload":[]}'</code> </p>
    pub on_upload: ::std::option::Option<::std::vec::Vec<crate::types::WorkflowDetail>>,
    /// <p>A trigger that starts a workflow if a file is only partially uploaded. You can attach a workflow to a server that executes whenever there is a partial upload.</p>
    /// <p>A <i>partial upload</i> occurs when a file is open when the session disconnects.</p>
    pub on_partial_upload: ::std::option::Option<::std::vec::Vec<crate::types::WorkflowDetail>>,
}
impl WorkflowDetails {
    /// <p>A trigger that starts a workflow: the workflow begins to execute after a file is uploaded.</p>
    /// <p>To remove an associated workflow from a server, you can provide an empty <code>OnUpload</code> object, as in the following example.</p>
    /// <p> <code>aws transfer update-server --server-id s-01234567890abcdef --workflow-details '{"OnUpload":[]}'</code> </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.on_upload.is_none()`.
    pub fn on_upload(&self) -> &[crate::types::WorkflowDetail] {
        self.on_upload.as_deref().unwrap_or_default()
    }
    /// <p>A trigger that starts a workflow if a file is only partially uploaded. You can attach a workflow to a server that executes whenever there is a partial upload.</p>
    /// <p>A <i>partial upload</i> occurs when a file is open when the session disconnects.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.on_partial_upload.is_none()`.
    pub fn on_partial_upload(&self) -> &[crate::types::WorkflowDetail] {
        self.on_partial_upload.as_deref().unwrap_or_default()
    }
}
impl WorkflowDetails {
    /// Creates a new builder-style object to manufacture [`WorkflowDetails`](crate::types::WorkflowDetails).
    pub fn builder() -> crate::types::builders::WorkflowDetailsBuilder {
        crate::types::builders::WorkflowDetailsBuilder::default()
    }
}

/// A builder for [`WorkflowDetails`](crate::types::WorkflowDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct WorkflowDetailsBuilder {
    pub(crate) on_upload: ::std::option::Option<::std::vec::Vec<crate::types::WorkflowDetail>>,
    pub(crate) on_partial_upload: ::std::option::Option<::std::vec::Vec<crate::types::WorkflowDetail>>,
}
impl WorkflowDetailsBuilder {
    /// Appends an item to `on_upload`.
    ///
    /// To override the contents of this collection use [`set_on_upload`](Self::set_on_upload).
    ///
    /// <p>A trigger that starts a workflow: the workflow begins to execute after a file is uploaded.</p>
    /// <p>To remove an associated workflow from a server, you can provide an empty <code>OnUpload</code> object, as in the following example.</p>
    /// <p> <code>aws transfer update-server --server-id s-01234567890abcdef --workflow-details '{"OnUpload":[]}'</code> </p>
    pub fn on_upload(mut self, input: crate::types::WorkflowDetail) -> Self {
        let mut v = self.on_upload.unwrap_or_default();
        v.push(input);
        self.on_upload = ::std::option::Option::Some(v);
        self
    }
    /// <p>A trigger that starts a workflow: the workflow begins to execute after a file is uploaded.</p>
    /// <p>To remove an associated workflow from a server, you can provide an empty <code>OnUpload</code> object, as in the following example.</p>
    /// <p> <code>aws transfer update-server --server-id s-01234567890abcdef --workflow-details '{"OnUpload":[]}'</code> </p>
    pub fn set_on_upload(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::WorkflowDetail>>) -> Self {
        self.on_upload = input;
        self
    }
    /// <p>A trigger that starts a workflow: the workflow begins to execute after a file is uploaded.</p>
    /// <p>To remove an associated workflow from a server, you can provide an empty <code>OnUpload</code> object, as in the following example.</p>
    /// <p> <code>aws transfer update-server --server-id s-01234567890abcdef --workflow-details '{"OnUpload":[]}'</code> </p>
    pub fn get_on_upload(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::WorkflowDetail>> {
        &self.on_upload
    }
    /// Appends an item to `on_partial_upload`.
    ///
    /// To override the contents of this collection use [`set_on_partial_upload`](Self::set_on_partial_upload).
    ///
    /// <p>A trigger that starts a workflow if a file is only partially uploaded. You can attach a workflow to a server that executes whenever there is a partial upload.</p>
    /// <p>A <i>partial upload</i> occurs when a file is open when the session disconnects.</p>
    pub fn on_partial_upload(mut self, input: crate::types::WorkflowDetail) -> Self {
        let mut v = self.on_partial_upload.unwrap_or_default();
        v.push(input);
        self.on_partial_upload = ::std::option::Option::Some(v);
        self
    }
    /// <p>A trigger that starts a workflow if a file is only partially uploaded. You can attach a workflow to a server that executes whenever there is a partial upload.</p>
    /// <p>A <i>partial upload</i> occurs when a file is open when the session disconnects.</p>
    pub fn set_on_partial_upload(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::WorkflowDetail>>) -> Self {
        self.on_partial_upload = input;
        self
    }
    /// <p>A trigger that starts a workflow if a file is only partially uploaded. You can attach a workflow to a server that executes whenever there is a partial upload.</p>
    /// <p>A <i>partial upload</i> occurs when a file is open when the session disconnects.</p>
    pub fn get_on_partial_upload(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::WorkflowDetail>> {
        &self.on_partial_upload
    }
    /// Consumes the builder and constructs a [`WorkflowDetails`](crate::types::WorkflowDetails).
    pub fn build(self) -> crate::types::WorkflowDetails {
        crate::types::WorkflowDetails {
            on_upload: self.on_upload,
            on_partial_upload: self.on_partial_upload,
        }
    }
}
