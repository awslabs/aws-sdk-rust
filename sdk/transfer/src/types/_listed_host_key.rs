// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Returns properties of the host key that's specified.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListedHostKey {
    /// <p>The unique Amazon Resource Name (ARN) of the host key.</p>
    pub arn: ::std::string::String,
    /// <p>A unique identifier for the host key.</p>
    pub host_key_id: ::std::option::Option<::std::string::String>,
    /// <p>The public key fingerprint, which is a short sequence of bytes used to identify the longer public key.</p>
    pub fingerprint: ::std::option::Option<::std::string::String>,
    /// <p>The current description for the host key. You can change it by calling the <code>UpdateHostKey</code> operation and providing a new description.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The encryption algorithm that is used for the host key. The <code>Type</code> parameter is specified by using one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>ssh-rsa</code> </p> </li>
    /// <li> <p> <code>ssh-ed25519</code> </p> </li>
    /// <li> <p> <code>ecdsa-sha2-nistp256</code> </p> </li>
    /// <li> <p> <code>ecdsa-sha2-nistp384</code> </p> </li>
    /// <li> <p> <code>ecdsa-sha2-nistp521</code> </p> </li>
    /// </ul>
    pub r#type: ::std::option::Option<::std::string::String>,
    /// <p>The date on which the host key was added to the server.</p>
    pub date_imported: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ListedHostKey {
    /// <p>The unique Amazon Resource Name (ARN) of the host key.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>A unique identifier for the host key.</p>
    pub fn host_key_id(&self) -> ::std::option::Option<&str> {
        self.host_key_id.as_deref()
    }
    /// <p>The public key fingerprint, which is a short sequence of bytes used to identify the longer public key.</p>
    pub fn fingerprint(&self) -> ::std::option::Option<&str> {
        self.fingerprint.as_deref()
    }
    /// <p>The current description for the host key. You can change it by calling the <code>UpdateHostKey</code> operation and providing a new description.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The encryption algorithm that is used for the host key. The <code>Type</code> parameter is specified by using one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>ssh-rsa</code> </p> </li>
    /// <li> <p> <code>ssh-ed25519</code> </p> </li>
    /// <li> <p> <code>ecdsa-sha2-nistp256</code> </p> </li>
    /// <li> <p> <code>ecdsa-sha2-nistp384</code> </p> </li>
    /// <li> <p> <code>ecdsa-sha2-nistp521</code> </p> </li>
    /// </ul>
    pub fn r#type(&self) -> ::std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The date on which the host key was added to the server.</p>
    pub fn date_imported(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.date_imported.as_ref()
    }
}
impl ListedHostKey {
    /// Creates a new builder-style object to manufacture [`ListedHostKey`](crate::types::ListedHostKey).
    pub fn builder() -> crate::types::builders::ListedHostKeyBuilder {
        crate::types::builders::ListedHostKeyBuilder::default()
    }
}

/// A builder for [`ListedHostKey`](crate::types::ListedHostKey).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListedHostKeyBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) host_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) fingerprint: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
    pub(crate) date_imported: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ListedHostKeyBuilder {
    /// <p>The unique Amazon Resource Name (ARN) of the host key.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique Amazon Resource Name (ARN) of the host key.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The unique Amazon Resource Name (ARN) of the host key.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>A unique identifier for the host key.</p>
    pub fn host_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.host_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the host key.</p>
    pub fn set_host_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.host_key_id = input;
        self
    }
    /// <p>A unique identifier for the host key.</p>
    pub fn get_host_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.host_key_id
    }
    /// <p>The public key fingerprint, which is a short sequence of bytes used to identify the longer public key.</p>
    pub fn fingerprint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.fingerprint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The public key fingerprint, which is a short sequence of bytes used to identify the longer public key.</p>
    pub fn set_fingerprint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.fingerprint = input;
        self
    }
    /// <p>The public key fingerprint, which is a short sequence of bytes used to identify the longer public key.</p>
    pub fn get_fingerprint(&self) -> &::std::option::Option<::std::string::String> {
        &self.fingerprint
    }
    /// <p>The current description for the host key. You can change it by calling the <code>UpdateHostKey</code> operation and providing a new description.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current description for the host key. You can change it by calling the <code>UpdateHostKey</code> operation and providing a new description.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The current description for the host key. You can change it by calling the <code>UpdateHostKey</code> operation and providing a new description.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The encryption algorithm that is used for the host key. The <code>Type</code> parameter is specified by using one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>ssh-rsa</code> </p> </li>
    /// <li> <p> <code>ssh-ed25519</code> </p> </li>
    /// <li> <p> <code>ecdsa-sha2-nistp256</code> </p> </li>
    /// <li> <p> <code>ecdsa-sha2-nistp384</code> </p> </li>
    /// <li> <p> <code>ecdsa-sha2-nistp521</code> </p> </li>
    /// </ul>
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The encryption algorithm that is used for the host key. The <code>Type</code> parameter is specified by using one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>ssh-rsa</code> </p> </li>
    /// <li> <p> <code>ssh-ed25519</code> </p> </li>
    /// <li> <p> <code>ecdsa-sha2-nistp256</code> </p> </li>
    /// <li> <p> <code>ecdsa-sha2-nistp384</code> </p> </li>
    /// <li> <p> <code>ecdsa-sha2-nistp521</code> </p> </li>
    /// </ul>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The encryption algorithm that is used for the host key. The <code>Type</code> parameter is specified by using one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>ssh-rsa</code> </p> </li>
    /// <li> <p> <code>ssh-ed25519</code> </p> </li>
    /// <li> <p> <code>ecdsa-sha2-nistp256</code> </p> </li>
    /// <li> <p> <code>ecdsa-sha2-nistp384</code> </p> </li>
    /// <li> <p> <code>ecdsa-sha2-nistp521</code> </p> </li>
    /// </ul>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// <p>The date on which the host key was added to the server.</p>
    pub fn date_imported(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.date_imported = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date on which the host key was added to the server.</p>
    pub fn set_date_imported(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.date_imported = input;
        self
    }
    /// <p>The date on which the host key was added to the server.</p>
    pub fn get_date_imported(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.date_imported
    }
    /// Consumes the builder and constructs a [`ListedHostKey`](crate::types::ListedHostKey).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::ListedHostKeyBuilder::arn)
    pub fn build(self) -> ::std::result::Result<crate::types::ListedHostKey, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ListedHostKey {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building ListedHostKey",
                )
            })?,
            host_key_id: self.host_key_id,
            fingerprint: self.fingerprint,
            description: self.description,
            r#type: self.r#type,
            date_imported: self.date_imported,
        })
    }
}
