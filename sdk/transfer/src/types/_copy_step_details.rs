// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Each step type has its own <code>StepDetails</code> structure.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CopyStepDetails {
    /// <p>The name of the step, used as an identifier.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>Specifies the location for the file being copied. Only applicable for Copy type workflow steps. Use <code>${Transfer:username}</code> in this field to parametrize the destination prefix by username.</p>
    #[doc(hidden)]
    pub destination_file_location: std::option::Option<crate::types::InputFileLocation>,
    /// <p>A flag that indicates whether or not to overwrite an existing file of the same name. The default is <code>FALSE</code>.</p>
    #[doc(hidden)]
    pub overwrite_existing: std::option::Option<crate::types::OverwriteExisting>,
    /// <p>Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow.</p>
    /// <ul>
    /// <li> <p>Enter <code>${previous.file}</code> to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value.</p> </li>
    /// <li> <p>Enter <code>${original.file}</code> to use the originally-uploaded file location as input for this step.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub source_file_location: std::option::Option<std::string::String>,
}
impl CopyStepDetails {
    /// <p>The name of the step, used as an identifier.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Specifies the location for the file being copied. Only applicable for Copy type workflow steps. Use <code>${Transfer:username}</code> in this field to parametrize the destination prefix by username.</p>
    pub fn destination_file_location(
        &self,
    ) -> std::option::Option<&crate::types::InputFileLocation> {
        self.destination_file_location.as_ref()
    }
    /// <p>A flag that indicates whether or not to overwrite an existing file of the same name. The default is <code>FALSE</code>.</p>
    pub fn overwrite_existing(&self) -> std::option::Option<&crate::types::OverwriteExisting> {
        self.overwrite_existing.as_ref()
    }
    /// <p>Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow.</p>
    /// <ul>
    /// <li> <p>Enter <code>${previous.file}</code> to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value.</p> </li>
    /// <li> <p>Enter <code>${original.file}</code> to use the originally-uploaded file location as input for this step.</p> </li>
    /// </ul>
    pub fn source_file_location(&self) -> std::option::Option<&str> {
        self.source_file_location.as_deref()
    }
}
impl CopyStepDetails {
    /// Creates a new builder-style object to manufacture [`CopyStepDetails`](crate::types::CopyStepDetails).
    pub fn builder() -> crate::types::builders::CopyStepDetailsBuilder {
        crate::types::builders::CopyStepDetailsBuilder::default()
    }
}

/// A builder for [`CopyStepDetails`](crate::types::CopyStepDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CopyStepDetailsBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) destination_file_location: std::option::Option<crate::types::InputFileLocation>,
    pub(crate) overwrite_existing: std::option::Option<crate::types::OverwriteExisting>,
    pub(crate) source_file_location: std::option::Option<std::string::String>,
}
impl CopyStepDetailsBuilder {
    /// <p>The name of the step, used as an identifier.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the step, used as an identifier.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Specifies the location for the file being copied. Only applicable for Copy type workflow steps. Use <code>${Transfer:username}</code> in this field to parametrize the destination prefix by username.</p>
    pub fn destination_file_location(mut self, input: crate::types::InputFileLocation) -> Self {
        self.destination_file_location = Some(input);
        self
    }
    /// <p>Specifies the location for the file being copied. Only applicable for Copy type workflow steps. Use <code>${Transfer:username}</code> in this field to parametrize the destination prefix by username.</p>
    pub fn set_destination_file_location(
        mut self,
        input: std::option::Option<crate::types::InputFileLocation>,
    ) -> Self {
        self.destination_file_location = input;
        self
    }
    /// <p>A flag that indicates whether or not to overwrite an existing file of the same name. The default is <code>FALSE</code>.</p>
    pub fn overwrite_existing(mut self, input: crate::types::OverwriteExisting) -> Self {
        self.overwrite_existing = Some(input);
        self
    }
    /// <p>A flag that indicates whether or not to overwrite an existing file of the same name. The default is <code>FALSE</code>.</p>
    pub fn set_overwrite_existing(
        mut self,
        input: std::option::Option<crate::types::OverwriteExisting>,
    ) -> Self {
        self.overwrite_existing = input;
        self
    }
    /// <p>Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow.</p>
    /// <ul>
    /// <li> <p>Enter <code>${previous.file}</code> to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value.</p> </li>
    /// <li> <p>Enter <code>${original.file}</code> to use the originally-uploaded file location as input for this step.</p> </li>
    /// </ul>
    pub fn source_file_location(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_file_location = Some(input.into());
        self
    }
    /// <p>Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow.</p>
    /// <ul>
    /// <li> <p>Enter <code>${previous.file}</code> to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value.</p> </li>
    /// <li> <p>Enter <code>${original.file}</code> to use the originally-uploaded file location as input for this step.</p> </li>
    /// </ul>
    pub fn set_source_file_location(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_file_location = input;
        self
    }
    /// Consumes the builder and constructs a [`CopyStepDetails`](crate::types::CopyStepDetails).
    pub fn build(self) -> crate::types::CopyStepDetails {
        crate::types::CopyStepDetails {
            name: self.name,
            destination_file_location: self.destination_file_location,
            overwrite_existing: self.overwrite_existing,
            source_file_location: self.source_file_location,
        }
    }
}
