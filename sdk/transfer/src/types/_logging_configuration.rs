// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Consists of the logging role and the log group name.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LoggingConfiguration {
    /// <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that allows a server to turn on Amazon CloudWatch logging for Amazon S3 or Amazon EFSevents. When set, you can view user activity in your CloudWatch logs.</p>
    #[doc(hidden)]
    pub logging_role: std::option::Option<std::string::String>,
    /// <p>The name of the CloudWatch logging group for the Transfer Family server to which this workflow belongs.</p>
    #[doc(hidden)]
    pub log_group_name: std::option::Option<std::string::String>,
}
impl LoggingConfiguration {
    /// <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that allows a server to turn on Amazon CloudWatch logging for Amazon S3 or Amazon EFSevents. When set, you can view user activity in your CloudWatch logs.</p>
    pub fn logging_role(&self) -> std::option::Option<&str> {
        self.logging_role.as_deref()
    }
    /// <p>The name of the CloudWatch logging group for the Transfer Family server to which this workflow belongs.</p>
    pub fn log_group_name(&self) -> std::option::Option<&str> {
        self.log_group_name.as_deref()
    }
}
impl LoggingConfiguration {
    /// Creates a new builder-style object to manufacture [`LoggingConfiguration`](crate::types::LoggingConfiguration).
    pub fn builder() -> crate::types::builders::LoggingConfigurationBuilder {
        crate::types::builders::LoggingConfigurationBuilder::default()
    }
}

/// A builder for [`LoggingConfiguration`](crate::types::LoggingConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LoggingConfigurationBuilder {
    pub(crate) logging_role: std::option::Option<std::string::String>,
    pub(crate) log_group_name: std::option::Option<std::string::String>,
}
impl LoggingConfigurationBuilder {
    /// <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that allows a server to turn on Amazon CloudWatch logging for Amazon S3 or Amazon EFSevents. When set, you can view user activity in your CloudWatch logs.</p>
    pub fn logging_role(mut self, input: impl Into<std::string::String>) -> Self {
        self.logging_role = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that allows a server to turn on Amazon CloudWatch logging for Amazon S3 or Amazon EFSevents. When set, you can view user activity in your CloudWatch logs.</p>
    pub fn set_logging_role(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.logging_role = input;
        self
    }
    /// <p>The name of the CloudWatch logging group for the Transfer Family server to which this workflow belongs.</p>
    pub fn log_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.log_group_name = Some(input.into());
        self
    }
    /// <p>The name of the CloudWatch logging group for the Transfer Family server to which this workflow belongs.</p>
    pub fn set_log_group_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.log_group_name = input;
        self
    }
    /// Consumes the builder and constructs a [`LoggingConfiguration`](crate::types::LoggingConfiguration).
    pub fn build(self) -> crate::types::LoggingConfiguration {
        crate::types::LoggingConfiguration {
            logging_role: self.logging_role,
            log_group_name: self.log_group_name,
        }
    }
}
