// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the properties of a certificate.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListedCertificate {
    /// <p>The Amazon Resource Name (ARN) of the specified certificate.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>An array of identifiers for the imported certificates. You use this identifier for working with profiles and partner profiles.</p>
    #[doc(hidden)]
    pub certificate_id: std::option::Option<std::string::String>,
    /// <p>Specifies whether this certificate is used for signing or encryption.</p>
    #[doc(hidden)]
    pub usage: std::option::Option<crate::types::CertificateUsageType>,
    /// <p>The certificate can be either <code>ACTIVE</code>, <code>PENDING_ROTATION</code>, or <code>INACTIVE</code>. <code>PENDING_ROTATION</code> means that this certificate will replace the current certificate when it expires.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::CertificateStatusType>,
    /// <p>An optional date that specifies when the certificate becomes active.</p>
    #[doc(hidden)]
    pub active_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>An optional date that specifies when the certificate becomes inactive.</p>
    #[doc(hidden)]
    pub inactive_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The type for the certificate. If a private key has been specified for the certificate, its type is <code>CERTIFICATE_WITH_PRIVATE_KEY</code>. If there is no private key, the type is <code>CERTIFICATE</code>.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::CertificateType>,
    /// <p>The name or short description that's used to identify the certificate.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
}
impl ListedCertificate {
    /// <p>The Amazon Resource Name (ARN) of the specified certificate.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>An array of identifiers for the imported certificates. You use this identifier for working with profiles and partner profiles.</p>
    pub fn certificate_id(&self) -> std::option::Option<&str> {
        self.certificate_id.as_deref()
    }
    /// <p>Specifies whether this certificate is used for signing or encryption.</p>
    pub fn usage(&self) -> std::option::Option<&crate::types::CertificateUsageType> {
        self.usage.as_ref()
    }
    /// <p>The certificate can be either <code>ACTIVE</code>, <code>PENDING_ROTATION</code>, or <code>INACTIVE</code>. <code>PENDING_ROTATION</code> means that this certificate will replace the current certificate when it expires.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::CertificateStatusType> {
        self.status.as_ref()
    }
    /// <p>An optional date that specifies when the certificate becomes active.</p>
    pub fn active_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.active_date.as_ref()
    }
    /// <p>An optional date that specifies when the certificate becomes inactive.</p>
    pub fn inactive_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.inactive_date.as_ref()
    }
    /// <p>The type for the certificate. If a private key has been specified for the certificate, its type is <code>CERTIFICATE_WITH_PRIVATE_KEY</code>. If there is no private key, the type is <code>CERTIFICATE</code>.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::CertificateType> {
        self.r#type.as_ref()
    }
    /// <p>The name or short description that's used to identify the certificate.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl ListedCertificate {
    /// Creates a new builder-style object to manufacture [`ListedCertificate`](crate::types::ListedCertificate).
    pub fn builder() -> crate::types::builders::ListedCertificateBuilder {
        crate::types::builders::ListedCertificateBuilder::default()
    }
}

/// A builder for [`ListedCertificate`](crate::types::ListedCertificate).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListedCertificateBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) certificate_id: std::option::Option<std::string::String>,
    pub(crate) usage: std::option::Option<crate::types::CertificateUsageType>,
    pub(crate) status: std::option::Option<crate::types::CertificateStatusType>,
    pub(crate) active_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) inactive_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) r#type: std::option::Option<crate::types::CertificateType>,
    pub(crate) description: std::option::Option<std::string::String>,
}
impl ListedCertificateBuilder {
    /// <p>The Amazon Resource Name (ARN) of the specified certificate.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the specified certificate.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>An array of identifiers for the imported certificates. You use this identifier for working with profiles and partner profiles.</p>
    pub fn certificate_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.certificate_id = Some(input.into());
        self
    }
    /// <p>An array of identifiers for the imported certificates. You use this identifier for working with profiles and partner profiles.</p>
    pub fn set_certificate_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.certificate_id = input;
        self
    }
    /// <p>Specifies whether this certificate is used for signing or encryption.</p>
    pub fn usage(mut self, input: crate::types::CertificateUsageType) -> Self {
        self.usage = Some(input);
        self
    }
    /// <p>Specifies whether this certificate is used for signing or encryption.</p>
    pub fn set_usage(
        mut self,
        input: std::option::Option<crate::types::CertificateUsageType>,
    ) -> Self {
        self.usage = input;
        self
    }
    /// <p>The certificate can be either <code>ACTIVE</code>, <code>PENDING_ROTATION</code>, or <code>INACTIVE</code>. <code>PENDING_ROTATION</code> means that this certificate will replace the current certificate when it expires.</p>
    pub fn status(mut self, input: crate::types::CertificateStatusType) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The certificate can be either <code>ACTIVE</code>, <code>PENDING_ROTATION</code>, or <code>INACTIVE</code>. <code>PENDING_ROTATION</code> means that this certificate will replace the current certificate when it expires.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::CertificateStatusType>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>An optional date that specifies when the certificate becomes active.</p>
    pub fn active_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.active_date = Some(input);
        self
    }
    /// <p>An optional date that specifies when the certificate becomes active.</p>
    pub fn set_active_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.active_date = input;
        self
    }
    /// <p>An optional date that specifies when the certificate becomes inactive.</p>
    pub fn inactive_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inactive_date = Some(input);
        self
    }
    /// <p>An optional date that specifies when the certificate becomes inactive.</p>
    pub fn set_inactive_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inactive_date = input;
        self
    }
    /// <p>The type for the certificate. If a private key has been specified for the certificate, its type is <code>CERTIFICATE_WITH_PRIVATE_KEY</code>. If there is no private key, the type is <code>CERTIFICATE</code>.</p>
    pub fn r#type(mut self, input: crate::types::CertificateType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type for the certificate. If a private key has been specified for the certificate, its type is <code>CERTIFICATE_WITH_PRIVATE_KEY</code>. If there is no private key, the type is <code>CERTIFICATE</code>.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::CertificateType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The name or short description that's used to identify the certificate.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The name or short description that's used to identify the certificate.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Consumes the builder and constructs a [`ListedCertificate`](crate::types::ListedCertificate).
    pub fn build(self) -> crate::types::ListedCertificate {
        crate::types::ListedCertificate {
            arn: self.arn,
            certificate_id: self.certificate_id,
            usage: self.usage,
            status: self.status,
            active_date: self.active_date,
            inactive_date: self.inactive_date,
            r#type: self.r#type,
            description: self.description,
        }
    }
}
