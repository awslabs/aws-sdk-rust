// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Returns properties of the execution that is specified.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListedExecution {
    /// <p>A unique identifier for the execution of a workflow.</p>
    #[doc(hidden)]
    pub execution_id: std::option::Option<std::string::String>,
    /// <p>A structure that describes the Amazon S3 or EFS file location. This is the file location when the execution begins: if the file is being copied, this is the initial (as opposed to destination) file location.</p>
    #[doc(hidden)]
    pub initial_file_location: std::option::Option<crate::types::FileLocation>,
    /// <p>A container object for the session details that are associated with a workflow.</p>
    #[doc(hidden)]
    pub service_metadata: std::option::Option<crate::types::ServiceMetadata>,
    /// <p>The status is one of the execution. Can be in progress, completed, exception encountered, or handling the exception.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ExecutionStatus>,
}
impl ListedExecution {
    /// <p>A unique identifier for the execution of a workflow.</p>
    pub fn execution_id(&self) -> std::option::Option<&str> {
        self.execution_id.as_deref()
    }
    /// <p>A structure that describes the Amazon S3 or EFS file location. This is the file location when the execution begins: if the file is being copied, this is the initial (as opposed to destination) file location.</p>
    pub fn initial_file_location(&self) -> std::option::Option<&crate::types::FileLocation> {
        self.initial_file_location.as_ref()
    }
    /// <p>A container object for the session details that are associated with a workflow.</p>
    pub fn service_metadata(&self) -> std::option::Option<&crate::types::ServiceMetadata> {
        self.service_metadata.as_ref()
    }
    /// <p>The status is one of the execution. Can be in progress, completed, exception encountered, or handling the exception.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::ExecutionStatus> {
        self.status.as_ref()
    }
}
impl ListedExecution {
    /// Creates a new builder-style object to manufacture [`ListedExecution`](crate::types::ListedExecution).
    pub fn builder() -> crate::types::builders::ListedExecutionBuilder {
        crate::types::builders::ListedExecutionBuilder::default()
    }
}

/// A builder for [`ListedExecution`](crate::types::ListedExecution).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListedExecutionBuilder {
    pub(crate) execution_id: std::option::Option<std::string::String>,
    pub(crate) initial_file_location: std::option::Option<crate::types::FileLocation>,
    pub(crate) service_metadata: std::option::Option<crate::types::ServiceMetadata>,
    pub(crate) status: std::option::Option<crate::types::ExecutionStatus>,
}
impl ListedExecutionBuilder {
    /// <p>A unique identifier for the execution of a workflow.</p>
    pub fn execution_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.execution_id = Some(input.into());
        self
    }
    /// <p>A unique identifier for the execution of a workflow.</p>
    pub fn set_execution_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.execution_id = input;
        self
    }
    /// <p>A structure that describes the Amazon S3 or EFS file location. This is the file location when the execution begins: if the file is being copied, this is the initial (as opposed to destination) file location.</p>
    pub fn initial_file_location(mut self, input: crate::types::FileLocation) -> Self {
        self.initial_file_location = Some(input);
        self
    }
    /// <p>A structure that describes the Amazon S3 or EFS file location. This is the file location when the execution begins: if the file is being copied, this is the initial (as opposed to destination) file location.</p>
    pub fn set_initial_file_location(
        mut self,
        input: std::option::Option<crate::types::FileLocation>,
    ) -> Self {
        self.initial_file_location = input;
        self
    }
    /// <p>A container object for the session details that are associated with a workflow.</p>
    pub fn service_metadata(mut self, input: crate::types::ServiceMetadata) -> Self {
        self.service_metadata = Some(input);
        self
    }
    /// <p>A container object for the session details that are associated with a workflow.</p>
    pub fn set_service_metadata(
        mut self,
        input: std::option::Option<crate::types::ServiceMetadata>,
    ) -> Self {
        self.service_metadata = input;
        self
    }
    /// <p>The status is one of the execution. Can be in progress, completed, exception encountered, or handling the exception.</p>
    pub fn status(mut self, input: crate::types::ExecutionStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status is one of the execution. Can be in progress, completed, exception encountered, or handling the exception.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::ExecutionStatus>) -> Self {
        self.status = input;
        self
    }
    /// Consumes the builder and constructs a [`ListedExecution`](crate::types::ListedExecution).
    pub fn build(self) -> crate::types::ListedExecution {
        crate::types::ListedExecution {
            execution_id: self.execution_id,
            initial_file_location: self.initial_file_location,
            service_metadata: self.service_metadata,
            status: self.status,
        }
    }
}
