// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the parameters for the connector, as identified by the <code>ConnectorId</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribedConnector {
    /// <p>The unique Amazon Resource Name (ARN) for the connector.</p>
    pub arn: ::std::string::String,
    /// <p>The unique identifier for the connector.</p>
    pub connector_id: ::std::option::Option<::std::string::String>,
    /// <p>The URL of the partner's AS2 or SFTP endpoint.</p>
    /// <p>When creating AS2 connectors or service-managed SFTP connectors (connectors without egress configuration), you must provide a URL to specify the remote server endpoint. For VPC Lattice type connectors, the URL must be null.</p>
    pub url: ::std::option::Option<::std::string::String>,
    /// <p>A structure that contains the parameters for an AS2 connector object.</p>
    pub as2_config: ::std::option::Option<crate::types::As2ConnectorConfig>,
    /// <p>Connectors are used to send files using either the AS2 or SFTP protocol. For the access role, provide the Amazon Resource Name (ARN) of the Identity and Access Management role to use.</p>
    /// <p><b>For AS2 connectors</b></p>
    /// <p>With AS2, you can send files by calling <code>StartFileTransfer</code> and specifying the file paths in the request parameter, <code>SendFilePaths</code>. We use the file’s parent directory (for example, for <code>--send-file-paths /bucket/dir/file.txt</code>, parent directory is <code>/bucket/dir/</code>) to temporarily store a processed AS2 message file, store the MDN when we receive them from the partner, and write a final JSON file containing relevant metadata of the transmission. So, the <code>AccessRole</code> needs to provide read and write access to the parent directory of the file location used in the <code>StartFileTransfer</code> request. Additionally, you need to provide read and write access to the parent directory of the files that you intend to send with <code>StartFileTransfer</code>.</p>
    /// <p>If you are using Basic authentication for your AS2 connector, the access role requires the <code>secretsmanager:GetSecretValue</code> permission for the secret. If the secret is encrypted using a customer-managed key instead of the Amazon Web Services managed key in Secrets Manager, then the role also needs the <code>kms:Decrypt</code> permission for that key.</p>
    /// <p><b>For SFTP connectors</b></p>
    /// <p>Make sure that the access role provides read and write access to the parent directory of the file location that's used in the <code>StartFileTransfer</code> request. Additionally, make sure that the role provides <code>secretsmanager:GetSecretValue</code> permission to Secrets Manager.</p>
    pub access_role: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that allows a connector to turn on CloudWatch logging for Amazon S3 events. When set, you can view connector activity in your CloudWatch logs.</p>
    pub logging_role: ::std::option::Option<::std::string::String>,
    /// <p>Key-value pairs that can be used to group and search for connectors.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>A structure that contains the parameters for an SFTP connector object.</p>
    pub sftp_config: ::std::option::Option<crate::types::SftpConnectorConfig>,
    /// <p>The list of egress IP addresses of this connector. These IP addresses are assigned automatically when you create the connector.</p>
    pub service_managed_egress_ip_addresses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The text name of the security policy for the specified connector.</p>
    pub security_policy_name: ::std::option::Option<::std::string::String>,
    /// <p>Current egress configuration of the connector, showing how traffic is routed to the SFTP server. Contains VPC Lattice settings when using VPC_LATTICE egress type.</p>
    /// <p>When using the VPC_LATTICE egress type, Transfer Family uses a managed Service Network to simplify the resource sharing process.</p>
    pub egress_config: ::std::option::Option<crate::types::DescribedConnectorEgressConfig>,
    /// <p>Type of egress configuration for the connector. SERVICE_MANAGED uses Transfer Family managed NAT gateways, while VPC_LATTICE routes traffic through customer VPCs using VPC Lattice.</p>
    pub egress_type: crate::types::ConnectorEgressType,
    /// <p>Error message providing details when the connector is in ERRORED status. Contains information to help troubleshoot connector creation or operation failures.</p>
    pub error_message: ::std::option::Option<::std::string::String>,
    /// <p>Current status of the connector. PENDING indicates creation/update in progress, ACTIVE means ready for operations, and ERRORED indicates a failure requiring attention.</p>
    pub status: crate::types::ConnectorStatus,
}
impl DescribedConnector {
    /// <p>The unique Amazon Resource Name (ARN) for the connector.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The unique identifier for the connector.</p>
    pub fn connector_id(&self) -> ::std::option::Option<&str> {
        self.connector_id.as_deref()
    }
    /// <p>The URL of the partner's AS2 or SFTP endpoint.</p>
    /// <p>When creating AS2 connectors or service-managed SFTP connectors (connectors without egress configuration), you must provide a URL to specify the remote server endpoint. For VPC Lattice type connectors, the URL must be null.</p>
    pub fn url(&self) -> ::std::option::Option<&str> {
        self.url.as_deref()
    }
    /// <p>A structure that contains the parameters for an AS2 connector object.</p>
    pub fn as2_config(&self) -> ::std::option::Option<&crate::types::As2ConnectorConfig> {
        self.as2_config.as_ref()
    }
    /// <p>Connectors are used to send files using either the AS2 or SFTP protocol. For the access role, provide the Amazon Resource Name (ARN) of the Identity and Access Management role to use.</p>
    /// <p><b>For AS2 connectors</b></p>
    /// <p>With AS2, you can send files by calling <code>StartFileTransfer</code> and specifying the file paths in the request parameter, <code>SendFilePaths</code>. We use the file’s parent directory (for example, for <code>--send-file-paths /bucket/dir/file.txt</code>, parent directory is <code>/bucket/dir/</code>) to temporarily store a processed AS2 message file, store the MDN when we receive them from the partner, and write a final JSON file containing relevant metadata of the transmission. So, the <code>AccessRole</code> needs to provide read and write access to the parent directory of the file location used in the <code>StartFileTransfer</code> request. Additionally, you need to provide read and write access to the parent directory of the files that you intend to send with <code>StartFileTransfer</code>.</p>
    /// <p>If you are using Basic authentication for your AS2 connector, the access role requires the <code>secretsmanager:GetSecretValue</code> permission for the secret. If the secret is encrypted using a customer-managed key instead of the Amazon Web Services managed key in Secrets Manager, then the role also needs the <code>kms:Decrypt</code> permission for that key.</p>
    /// <p><b>For SFTP connectors</b></p>
    /// <p>Make sure that the access role provides read and write access to the parent directory of the file location that's used in the <code>StartFileTransfer</code> request. Additionally, make sure that the role provides <code>secretsmanager:GetSecretValue</code> permission to Secrets Manager.</p>
    pub fn access_role(&self) -> ::std::option::Option<&str> {
        self.access_role.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that allows a connector to turn on CloudWatch logging for Amazon S3 events. When set, you can view connector activity in your CloudWatch logs.</p>
    pub fn logging_role(&self) -> ::std::option::Option<&str> {
        self.logging_role.as_deref()
    }
    /// <p>Key-value pairs that can be used to group and search for connectors.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>A structure that contains the parameters for an SFTP connector object.</p>
    pub fn sftp_config(&self) -> ::std::option::Option<&crate::types::SftpConnectorConfig> {
        self.sftp_config.as_ref()
    }
    /// <p>The list of egress IP addresses of this connector. These IP addresses are assigned automatically when you create the connector.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.service_managed_egress_ip_addresses.is_none()`.
    pub fn service_managed_egress_ip_addresses(&self) -> &[::std::string::String] {
        self.service_managed_egress_ip_addresses.as_deref().unwrap_or_default()
    }
    /// <p>The text name of the security policy for the specified connector.</p>
    pub fn security_policy_name(&self) -> ::std::option::Option<&str> {
        self.security_policy_name.as_deref()
    }
    /// <p>Current egress configuration of the connector, showing how traffic is routed to the SFTP server. Contains VPC Lattice settings when using VPC_LATTICE egress type.</p>
    /// <p>When using the VPC_LATTICE egress type, Transfer Family uses a managed Service Network to simplify the resource sharing process.</p>
    pub fn egress_config(&self) -> ::std::option::Option<&crate::types::DescribedConnectorEgressConfig> {
        self.egress_config.as_ref()
    }
    /// <p>Type of egress configuration for the connector. SERVICE_MANAGED uses Transfer Family managed NAT gateways, while VPC_LATTICE routes traffic through customer VPCs using VPC Lattice.</p>
    pub fn egress_type(&self) -> &crate::types::ConnectorEgressType {
        &self.egress_type
    }
    /// <p>Error message providing details when the connector is in ERRORED status. Contains information to help troubleshoot connector creation or operation failures.</p>
    pub fn error_message(&self) -> ::std::option::Option<&str> {
        self.error_message.as_deref()
    }
    /// <p>Current status of the connector. PENDING indicates creation/update in progress, ACTIVE means ready for operations, and ERRORED indicates a failure requiring attention.</p>
    pub fn status(&self) -> &crate::types::ConnectorStatus {
        &self.status
    }
}
impl DescribedConnector {
    /// Creates a new builder-style object to manufacture [`DescribedConnector`](crate::types::DescribedConnector).
    pub fn builder() -> crate::types::builders::DescribedConnectorBuilder {
        crate::types::builders::DescribedConnectorBuilder::default()
    }
}

/// A builder for [`DescribedConnector`](crate::types::DescribedConnector).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribedConnectorBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) connector_id: ::std::option::Option<::std::string::String>,
    pub(crate) url: ::std::option::Option<::std::string::String>,
    pub(crate) as2_config: ::std::option::Option<crate::types::As2ConnectorConfig>,
    pub(crate) access_role: ::std::option::Option<::std::string::String>,
    pub(crate) logging_role: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) sftp_config: ::std::option::Option<crate::types::SftpConnectorConfig>,
    pub(crate) service_managed_egress_ip_addresses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) security_policy_name: ::std::option::Option<::std::string::String>,
    pub(crate) egress_config: ::std::option::Option<crate::types::DescribedConnectorEgressConfig>,
    pub(crate) egress_type: ::std::option::Option<crate::types::ConnectorEgressType>,
    pub(crate) error_message: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ConnectorStatus>,
}
impl DescribedConnectorBuilder {
    /// <p>The unique Amazon Resource Name (ARN) for the connector.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique Amazon Resource Name (ARN) for the connector.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The unique Amazon Resource Name (ARN) for the connector.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The unique identifier for the connector.</p>
    pub fn connector_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connector_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the connector.</p>
    pub fn set_connector_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connector_id = input;
        self
    }
    /// <p>The unique identifier for the connector.</p>
    pub fn get_connector_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.connector_id
    }
    /// <p>The URL of the partner's AS2 or SFTP endpoint.</p>
    /// <p>When creating AS2 connectors or service-managed SFTP connectors (connectors without egress configuration), you must provide a URL to specify the remote server endpoint. For VPC Lattice type connectors, the URL must be null.</p>
    pub fn url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL of the partner's AS2 or SFTP endpoint.</p>
    /// <p>When creating AS2 connectors or service-managed SFTP connectors (connectors without egress configuration), you must provide a URL to specify the remote server endpoint. For VPC Lattice type connectors, the URL must be null.</p>
    pub fn set_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// <p>The URL of the partner's AS2 or SFTP endpoint.</p>
    /// <p>When creating AS2 connectors or service-managed SFTP connectors (connectors without egress configuration), you must provide a URL to specify the remote server endpoint. For VPC Lattice type connectors, the URL must be null.</p>
    pub fn get_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.url
    }
    /// <p>A structure that contains the parameters for an AS2 connector object.</p>
    pub fn as2_config(mut self, input: crate::types::As2ConnectorConfig) -> Self {
        self.as2_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure that contains the parameters for an AS2 connector object.</p>
    pub fn set_as2_config(mut self, input: ::std::option::Option<crate::types::As2ConnectorConfig>) -> Self {
        self.as2_config = input;
        self
    }
    /// <p>A structure that contains the parameters for an AS2 connector object.</p>
    pub fn get_as2_config(&self) -> &::std::option::Option<crate::types::As2ConnectorConfig> {
        &self.as2_config
    }
    /// <p>Connectors are used to send files using either the AS2 or SFTP protocol. For the access role, provide the Amazon Resource Name (ARN) of the Identity and Access Management role to use.</p>
    /// <p><b>For AS2 connectors</b></p>
    /// <p>With AS2, you can send files by calling <code>StartFileTransfer</code> and specifying the file paths in the request parameter, <code>SendFilePaths</code>. We use the file’s parent directory (for example, for <code>--send-file-paths /bucket/dir/file.txt</code>, parent directory is <code>/bucket/dir/</code>) to temporarily store a processed AS2 message file, store the MDN when we receive them from the partner, and write a final JSON file containing relevant metadata of the transmission. So, the <code>AccessRole</code> needs to provide read and write access to the parent directory of the file location used in the <code>StartFileTransfer</code> request. Additionally, you need to provide read and write access to the parent directory of the files that you intend to send with <code>StartFileTransfer</code>.</p>
    /// <p>If you are using Basic authentication for your AS2 connector, the access role requires the <code>secretsmanager:GetSecretValue</code> permission for the secret. If the secret is encrypted using a customer-managed key instead of the Amazon Web Services managed key in Secrets Manager, then the role also needs the <code>kms:Decrypt</code> permission for that key.</p>
    /// <p><b>For SFTP connectors</b></p>
    /// <p>Make sure that the access role provides read and write access to the parent directory of the file location that's used in the <code>StartFileTransfer</code> request. Additionally, make sure that the role provides <code>secretsmanager:GetSecretValue</code> permission to Secrets Manager.</p>
    pub fn access_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.access_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Connectors are used to send files using either the AS2 or SFTP protocol. For the access role, provide the Amazon Resource Name (ARN) of the Identity and Access Management role to use.</p>
    /// <p><b>For AS2 connectors</b></p>
    /// <p>With AS2, you can send files by calling <code>StartFileTransfer</code> and specifying the file paths in the request parameter, <code>SendFilePaths</code>. We use the file’s parent directory (for example, for <code>--send-file-paths /bucket/dir/file.txt</code>, parent directory is <code>/bucket/dir/</code>) to temporarily store a processed AS2 message file, store the MDN when we receive them from the partner, and write a final JSON file containing relevant metadata of the transmission. So, the <code>AccessRole</code> needs to provide read and write access to the parent directory of the file location used in the <code>StartFileTransfer</code> request. Additionally, you need to provide read and write access to the parent directory of the files that you intend to send with <code>StartFileTransfer</code>.</p>
    /// <p>If you are using Basic authentication for your AS2 connector, the access role requires the <code>secretsmanager:GetSecretValue</code> permission for the secret. If the secret is encrypted using a customer-managed key instead of the Amazon Web Services managed key in Secrets Manager, then the role also needs the <code>kms:Decrypt</code> permission for that key.</p>
    /// <p><b>For SFTP connectors</b></p>
    /// <p>Make sure that the access role provides read and write access to the parent directory of the file location that's used in the <code>StartFileTransfer</code> request. Additionally, make sure that the role provides <code>secretsmanager:GetSecretValue</code> permission to Secrets Manager.</p>
    pub fn set_access_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.access_role = input;
        self
    }
    /// <p>Connectors are used to send files using either the AS2 or SFTP protocol. For the access role, provide the Amazon Resource Name (ARN) of the Identity and Access Management role to use.</p>
    /// <p><b>For AS2 connectors</b></p>
    /// <p>With AS2, you can send files by calling <code>StartFileTransfer</code> and specifying the file paths in the request parameter, <code>SendFilePaths</code>. We use the file’s parent directory (for example, for <code>--send-file-paths /bucket/dir/file.txt</code>, parent directory is <code>/bucket/dir/</code>) to temporarily store a processed AS2 message file, store the MDN when we receive them from the partner, and write a final JSON file containing relevant metadata of the transmission. So, the <code>AccessRole</code> needs to provide read and write access to the parent directory of the file location used in the <code>StartFileTransfer</code> request. Additionally, you need to provide read and write access to the parent directory of the files that you intend to send with <code>StartFileTransfer</code>.</p>
    /// <p>If you are using Basic authentication for your AS2 connector, the access role requires the <code>secretsmanager:GetSecretValue</code> permission for the secret. If the secret is encrypted using a customer-managed key instead of the Amazon Web Services managed key in Secrets Manager, then the role also needs the <code>kms:Decrypt</code> permission for that key.</p>
    /// <p><b>For SFTP connectors</b></p>
    /// <p>Make sure that the access role provides read and write access to the parent directory of the file location that's used in the <code>StartFileTransfer</code> request. Additionally, make sure that the role provides <code>secretsmanager:GetSecretValue</code> permission to Secrets Manager.</p>
    pub fn get_access_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.access_role
    }
    /// <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that allows a connector to turn on CloudWatch logging for Amazon S3 events. When set, you can view connector activity in your CloudWatch logs.</p>
    pub fn logging_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.logging_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that allows a connector to turn on CloudWatch logging for Amazon S3 events. When set, you can view connector activity in your CloudWatch logs.</p>
    pub fn set_logging_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.logging_role = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that allows a connector to turn on CloudWatch logging for Amazon S3 events. When set, you can view connector activity in your CloudWatch logs.</p>
    pub fn get_logging_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.logging_role
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Key-value pairs that can be used to group and search for connectors.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Key-value pairs that can be used to group and search for connectors.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Key-value pairs that can be used to group and search for connectors.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>A structure that contains the parameters for an SFTP connector object.</p>
    pub fn sftp_config(mut self, input: crate::types::SftpConnectorConfig) -> Self {
        self.sftp_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure that contains the parameters for an SFTP connector object.</p>
    pub fn set_sftp_config(mut self, input: ::std::option::Option<crate::types::SftpConnectorConfig>) -> Self {
        self.sftp_config = input;
        self
    }
    /// <p>A structure that contains the parameters for an SFTP connector object.</p>
    pub fn get_sftp_config(&self) -> &::std::option::Option<crate::types::SftpConnectorConfig> {
        &self.sftp_config
    }
    /// Appends an item to `service_managed_egress_ip_addresses`.
    ///
    /// To override the contents of this collection use [`set_service_managed_egress_ip_addresses`](Self::set_service_managed_egress_ip_addresses).
    ///
    /// <p>The list of egress IP addresses of this connector. These IP addresses are assigned automatically when you create the connector.</p>
    pub fn service_managed_egress_ip_addresses(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.service_managed_egress_ip_addresses.unwrap_or_default();
        v.push(input.into());
        self.service_managed_egress_ip_addresses = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of egress IP addresses of this connector. These IP addresses are assigned automatically when you create the connector.</p>
    pub fn set_service_managed_egress_ip_addresses(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.service_managed_egress_ip_addresses = input;
        self
    }
    /// <p>The list of egress IP addresses of this connector. These IP addresses are assigned automatically when you create the connector.</p>
    pub fn get_service_managed_egress_ip_addresses(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.service_managed_egress_ip_addresses
    }
    /// <p>The text name of the security policy for the specified connector.</p>
    pub fn security_policy_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.security_policy_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The text name of the security policy for the specified connector.</p>
    pub fn set_security_policy_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.security_policy_name = input;
        self
    }
    /// <p>The text name of the security policy for the specified connector.</p>
    pub fn get_security_policy_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.security_policy_name
    }
    /// <p>Current egress configuration of the connector, showing how traffic is routed to the SFTP server. Contains VPC Lattice settings when using VPC_LATTICE egress type.</p>
    /// <p>When using the VPC_LATTICE egress type, Transfer Family uses a managed Service Network to simplify the resource sharing process.</p>
    pub fn egress_config(mut self, input: crate::types::DescribedConnectorEgressConfig) -> Self {
        self.egress_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Current egress configuration of the connector, showing how traffic is routed to the SFTP server. Contains VPC Lattice settings when using VPC_LATTICE egress type.</p>
    /// <p>When using the VPC_LATTICE egress type, Transfer Family uses a managed Service Network to simplify the resource sharing process.</p>
    pub fn set_egress_config(mut self, input: ::std::option::Option<crate::types::DescribedConnectorEgressConfig>) -> Self {
        self.egress_config = input;
        self
    }
    /// <p>Current egress configuration of the connector, showing how traffic is routed to the SFTP server. Contains VPC Lattice settings when using VPC_LATTICE egress type.</p>
    /// <p>When using the VPC_LATTICE egress type, Transfer Family uses a managed Service Network to simplify the resource sharing process.</p>
    pub fn get_egress_config(&self) -> &::std::option::Option<crate::types::DescribedConnectorEgressConfig> {
        &self.egress_config
    }
    /// <p>Type of egress configuration for the connector. SERVICE_MANAGED uses Transfer Family managed NAT gateways, while VPC_LATTICE routes traffic through customer VPCs using VPC Lattice.</p>
    /// This field is required.
    pub fn egress_type(mut self, input: crate::types::ConnectorEgressType) -> Self {
        self.egress_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Type of egress configuration for the connector. SERVICE_MANAGED uses Transfer Family managed NAT gateways, while VPC_LATTICE routes traffic through customer VPCs using VPC Lattice.</p>
    pub fn set_egress_type(mut self, input: ::std::option::Option<crate::types::ConnectorEgressType>) -> Self {
        self.egress_type = input;
        self
    }
    /// <p>Type of egress configuration for the connector. SERVICE_MANAGED uses Transfer Family managed NAT gateways, while VPC_LATTICE routes traffic through customer VPCs using VPC Lattice.</p>
    pub fn get_egress_type(&self) -> &::std::option::Option<crate::types::ConnectorEgressType> {
        &self.egress_type
    }
    /// <p>Error message providing details when the connector is in ERRORED status. Contains information to help troubleshoot connector creation or operation failures.</p>
    pub fn error_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Error message providing details when the connector is in ERRORED status. Contains information to help troubleshoot connector creation or operation failures.</p>
    pub fn set_error_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>Error message providing details when the connector is in ERRORED status. Contains information to help troubleshoot connector creation or operation failures.</p>
    pub fn get_error_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_message
    }
    /// <p>Current status of the connector. PENDING indicates creation/update in progress, ACTIVE means ready for operations, and ERRORED indicates a failure requiring attention.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::ConnectorStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Current status of the connector. PENDING indicates creation/update in progress, ACTIVE means ready for operations, and ERRORED indicates a failure requiring attention.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ConnectorStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Current status of the connector. PENDING indicates creation/update in progress, ACTIVE means ready for operations, and ERRORED indicates a failure requiring attention.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ConnectorStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`DescribedConnector`](crate::types::DescribedConnector).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::DescribedConnectorBuilder::arn)
    pub fn build(self) -> ::std::result::Result<crate::types::DescribedConnector, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DescribedConnector {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building DescribedConnector",
                )
            })?,
            connector_id: self.connector_id,
            url: self.url,
            as2_config: self.as2_config,
            access_role: self.access_role,
            logging_role: self.logging_role,
            tags: self.tags,
            sftp_config: self.sftp_config,
            service_managed_egress_ip_addresses: self.service_managed_egress_ip_addresses,
            security_policy_name: self.security_policy_name,
            egress_config: self.egress_config,
            egress_type: self.egress_type.unwrap_or(
                "SERVICE_MANAGED"
                    .parse::<crate::types::ConnectorEgressType>()
                    .expect("static value validated to member"),
            ),
            error_message: self.error_message,
            status: self.status.unwrap_or(
                "ACTIVE"
                    .parse::<crate::types::ConnectorStatus>()
                    .expect("static value validated to member"),
            ),
        })
    }
}
