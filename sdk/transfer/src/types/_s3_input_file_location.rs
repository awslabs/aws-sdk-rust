// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the customer input S3 file location. If it is used inside <code>copyStepDetails.DestinationFileLocation</code>, it should be the S3 copy destination.</p>
/// <p> You need to provide the bucket and key. The key can represent either a path or a file. This is determined by whether or not you end the key value with the forward slash (/) character. If the final character is "/", then your file is copied to the folder, and its name does not change. If, rather, the final character is alphanumeric, your uploaded file is renamed to the path value. In this case, if a file with that name already exists, it is overwritten. </p>
/// <p>For example, if your path is <code>shared-files/bob/</code>, your uploaded files are copied to the <code>shared-files/bob/</code>, folder. If your path is <code>shared-files/today</code>, each uploaded file is copied to the <code>shared-files</code> folder and named <code>today</code>: each upload overwrites the previous version of the <i>bob</i> file.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct S3InputFileLocation {
    /// <p>Specifies the S3 bucket for the customer input file.</p>
    #[doc(hidden)]
    pub bucket: std::option::Option<std::string::String>,
    /// <p>The name assigned to the file when it was created in Amazon S3. You use the object key to retrieve the object.</p>
    #[doc(hidden)]
    pub key: std::option::Option<std::string::String>,
}
impl S3InputFileLocation {
    /// <p>Specifies the S3 bucket for the customer input file.</p>
    pub fn bucket(&self) -> std::option::Option<&str> {
        self.bucket.as_deref()
    }
    /// <p>The name assigned to the file when it was created in Amazon S3. You use the object key to retrieve the object.</p>
    pub fn key(&self) -> std::option::Option<&str> {
        self.key.as_deref()
    }
}
impl S3InputFileLocation {
    /// Creates a new builder-style object to manufacture [`S3InputFileLocation`](crate::types::S3InputFileLocation).
    pub fn builder() -> crate::types::builders::S3InputFileLocationBuilder {
        crate::types::builders::S3InputFileLocationBuilder::default()
    }
}

/// A builder for [`S3InputFileLocation`](crate::types::S3InputFileLocation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct S3InputFileLocationBuilder {
    pub(crate) bucket: std::option::Option<std::string::String>,
    pub(crate) key: std::option::Option<std::string::String>,
}
impl S3InputFileLocationBuilder {
    /// <p>Specifies the S3 bucket for the customer input file.</p>
    pub fn bucket(mut self, input: impl Into<std::string::String>) -> Self {
        self.bucket = Some(input.into());
        self
    }
    /// <p>Specifies the S3 bucket for the customer input file.</p>
    pub fn set_bucket(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bucket = input;
        self
    }
    /// <p>The name assigned to the file when it was created in Amazon S3. You use the object key to retrieve the object.</p>
    pub fn key(mut self, input: impl Into<std::string::String>) -> Self {
        self.key = Some(input.into());
        self
    }
    /// <p>The name assigned to the file when it was created in Amazon S3. You use the object key to retrieve the object.</p>
    pub fn set_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// Consumes the builder and constructs a [`S3InputFileLocation`](crate::types::S3InputFileLocation).
    pub fn build(self) -> crate::types::S3InputFileLocation {
        crate::types::S3InputFileLocation {
            bucket: self.bucket,
            key: self.key,
        }
    }
}
