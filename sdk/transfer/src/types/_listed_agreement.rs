// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the properties of an agreement.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListedAgreement {
    /// <p>The Amazon Resource Name (ARN) of the specified agreement.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>A unique identifier for the agreement. This identifier is returned when you create an agreement.</p>
    #[doc(hidden)]
    pub agreement_id: std::option::Option<std::string::String>,
    /// <p>The current description for the agreement. You can change it by calling the <code>UpdateAgreement</code> operation and providing a new description. </p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The agreement can be either <code>ACTIVE</code> or <code>INACTIVE</code>.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::AgreementStatusType>,
    /// <p>The unique identifier for the agreement.</p>
    #[doc(hidden)]
    pub server_id: std::option::Option<std::string::String>,
    /// <p>A unique identifier for the AS2 local profile.</p>
    #[doc(hidden)]
    pub local_profile_id: std::option::Option<std::string::String>,
    /// <p>A unique identifier for the partner profile.</p>
    #[doc(hidden)]
    pub partner_profile_id: std::option::Option<std::string::String>,
}
impl ListedAgreement {
    /// <p>The Amazon Resource Name (ARN) of the specified agreement.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>A unique identifier for the agreement. This identifier is returned when you create an agreement.</p>
    pub fn agreement_id(&self) -> std::option::Option<&str> {
        self.agreement_id.as_deref()
    }
    /// <p>The current description for the agreement. You can change it by calling the <code>UpdateAgreement</code> operation and providing a new description. </p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The agreement can be either <code>ACTIVE</code> or <code>INACTIVE</code>.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::AgreementStatusType> {
        self.status.as_ref()
    }
    /// <p>The unique identifier for the agreement.</p>
    pub fn server_id(&self) -> std::option::Option<&str> {
        self.server_id.as_deref()
    }
    /// <p>A unique identifier for the AS2 local profile.</p>
    pub fn local_profile_id(&self) -> std::option::Option<&str> {
        self.local_profile_id.as_deref()
    }
    /// <p>A unique identifier for the partner profile.</p>
    pub fn partner_profile_id(&self) -> std::option::Option<&str> {
        self.partner_profile_id.as_deref()
    }
}
impl ListedAgreement {
    /// Creates a new builder-style object to manufacture [`ListedAgreement`](crate::types::ListedAgreement).
    pub fn builder() -> crate::types::builders::ListedAgreementBuilder {
        crate::types::builders::ListedAgreementBuilder::default()
    }
}

/// A builder for [`ListedAgreement`](crate::types::ListedAgreement).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListedAgreementBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) agreement_id: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::AgreementStatusType>,
    pub(crate) server_id: std::option::Option<std::string::String>,
    pub(crate) local_profile_id: std::option::Option<std::string::String>,
    pub(crate) partner_profile_id: std::option::Option<std::string::String>,
}
impl ListedAgreementBuilder {
    /// <p>The Amazon Resource Name (ARN) of the specified agreement.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the specified agreement.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>A unique identifier for the agreement. This identifier is returned when you create an agreement.</p>
    pub fn agreement_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.agreement_id = Some(input.into());
        self
    }
    /// <p>A unique identifier for the agreement. This identifier is returned when you create an agreement.</p>
    pub fn set_agreement_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.agreement_id = input;
        self
    }
    /// <p>The current description for the agreement. You can change it by calling the <code>UpdateAgreement</code> operation and providing a new description. </p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The current description for the agreement. You can change it by calling the <code>UpdateAgreement</code> operation and providing a new description. </p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The agreement can be either <code>ACTIVE</code> or <code>INACTIVE</code>.</p>
    pub fn status(mut self, input: crate::types::AgreementStatusType) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The agreement can be either <code>ACTIVE</code> or <code>INACTIVE</code>.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::AgreementStatusType>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The unique identifier for the agreement.</p>
    pub fn server_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.server_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the agreement.</p>
    pub fn set_server_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.server_id = input;
        self
    }
    /// <p>A unique identifier for the AS2 local profile.</p>
    pub fn local_profile_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.local_profile_id = Some(input.into());
        self
    }
    /// <p>A unique identifier for the AS2 local profile.</p>
    pub fn set_local_profile_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.local_profile_id = input;
        self
    }
    /// <p>A unique identifier for the partner profile.</p>
    pub fn partner_profile_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.partner_profile_id = Some(input.into());
        self
    }
    /// <p>A unique identifier for the partner profile.</p>
    pub fn set_partner_profile_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.partner_profile_id = input;
        self
    }
    /// Consumes the builder and constructs a [`ListedAgreement`](crate::types::ListedAgreement).
    pub fn build(self) -> crate::types::ListedAgreement {
        crate::types::ListedAgreement {
            arn: self.arn,
            agreement_id: self.agreement_id,
            description: self.description,
            status: self.status,
            server_id: self.server_id,
            local_profile_id: self.local_profile_id,
            partner_profile_id: self.partner_profile_id,
        }
    }
}
