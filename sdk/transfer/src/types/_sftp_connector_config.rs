// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the details for an SFTP connector object. The connector object is used for transferring files to and from a partner's SFTP server.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SftpConnectorConfig {
    /// <p>The identifier for the secret (in Amazon Web Services Secrets Manager) that contains the SFTP user's private key, password, or both. The identifier must be the Amazon Resource Name (ARN) of the secret.</p><note>
    /// <ul>
    /// <li>
    /// <p>Required when creating an SFTP connector</p></li>
    /// <li>
    /// <p>Optional when updating an existing SFTP connector</p></li>
    /// </ul>
    /// </note>
    pub user_secret_id: ::std::option::Option<::std::string::String>,
    /// <p>The public portion of the host key, or keys, that are used to identify the external server to which you are connecting. You can use the <code>ssh-keyscan</code> command against the SFTP server to retrieve the necessary key.</p><note>
    /// <p><code>TrustedHostKeys</code> is optional for <code>CreateConnector</code>. If not provided, you can use <code>TestConnection</code> to retrieve the server host key during the initial connection attempt, and subsequently update the connector with the observed host key.</p>
    /// </note>
    /// <p>When creating connectors with egress config (VPC_LATTICE type connectors), since host name is not something we can verify, the only accepted trusted host key format is <code>key-type key-body</code> without the host name. For example: <code>ssh-rsa AAAAB3Nza...&lt;long-string-for-public-key&gt;</code></p>
    /// <p>The three standard SSH public key format elements are <code>&lt;key type&gt;</code>, <code>&lt;body base64&gt;</code>, and an optional <code>&lt;comment&gt;</code>, with spaces between each element. Specify only the <code>&lt;key type&gt;</code> and <code>&lt;body base64&gt;</code>: do not enter the <code>&lt;comment&gt;</code> portion of the key.</p>
    /// <p>For the trusted host key, Transfer Family accepts RSA and ECDSA keys.</p>
    /// <ul>
    /// <li>
    /// <p>For RSA keys, the <code>&lt;key type&gt;</code> string is <code>ssh-rsa</code>.</p></li>
    /// <li>
    /// <p>For ECDSA keys, the <code>&lt;key type&gt;</code> string is either <code>ecdsa-sha2-nistp256</code>, <code>ecdsa-sha2-nistp384</code>, or <code>ecdsa-sha2-nistp521</code>, depending on the size of the key you generated.</p></li>
    /// </ul>
    /// <p>Run this command to retrieve the SFTP server host key, where your SFTP server name is <code>ftp.host.com</code>.</p>
    /// <p><code>ssh-keyscan ftp.host.com</code></p>
    /// <p>This prints the public host key to standard output.</p>
    /// <p><code>ftp.host.com ssh-rsa AAAAB3Nza...&lt;long-string-for-public-key&gt;</code></p>
    /// <p>Copy and paste this string into the <code>TrustedHostKeys</code> field for the <code>create-connector</code> command or into the <b>Trusted host keys</b> field in the console.</p>
    /// <p>For VPC Lattice type connectors (VPC_LATTICE), remove the hostname from the key and use only the <code>key-type key-body</code> format. In this example, it should be: <code>ssh-rsa AAAAB3Nza...&lt;long-string-for-public-key&gt;</code></p>
    pub trusted_host_keys: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Specify the number of concurrent connections that your connector creates to the remote server. The default value is <code>1</code>. The maximum values is <code>5</code>.</p><note>
    /// <p>If you are using the Amazon Web Services Management Console, the default value is <code>5</code>.</p>
    /// </note>
    /// <p>This parameter specifies the number of active connections that your connector can establish with the remote server at the same time. Increasing this value can enhance connector performance when transferring large file batches by enabling parallel operations.</p>
    pub max_concurrent_connections: i32,
}
impl SftpConnectorConfig {
    /// <p>The identifier for the secret (in Amazon Web Services Secrets Manager) that contains the SFTP user's private key, password, or both. The identifier must be the Amazon Resource Name (ARN) of the secret.</p><note>
    /// <ul>
    /// <li>
    /// <p>Required when creating an SFTP connector</p></li>
    /// <li>
    /// <p>Optional when updating an existing SFTP connector</p></li>
    /// </ul>
    /// </note>
    pub fn user_secret_id(&self) -> ::std::option::Option<&str> {
        self.user_secret_id.as_deref()
    }
    /// <p>The public portion of the host key, or keys, that are used to identify the external server to which you are connecting. You can use the <code>ssh-keyscan</code> command against the SFTP server to retrieve the necessary key.</p><note>
    /// <p><code>TrustedHostKeys</code> is optional for <code>CreateConnector</code>. If not provided, you can use <code>TestConnection</code> to retrieve the server host key during the initial connection attempt, and subsequently update the connector with the observed host key.</p>
    /// </note>
    /// <p>When creating connectors with egress config (VPC_LATTICE type connectors), since host name is not something we can verify, the only accepted trusted host key format is <code>key-type key-body</code> without the host name. For example: <code>ssh-rsa AAAAB3Nza...&lt;long-string-for-public-key&gt;</code></p>
    /// <p>The three standard SSH public key format elements are <code>&lt;key type&gt;</code>, <code>&lt;body base64&gt;</code>, and an optional <code>&lt;comment&gt;</code>, with spaces between each element. Specify only the <code>&lt;key type&gt;</code> and <code>&lt;body base64&gt;</code>: do not enter the <code>&lt;comment&gt;</code> portion of the key.</p>
    /// <p>For the trusted host key, Transfer Family accepts RSA and ECDSA keys.</p>
    /// <ul>
    /// <li>
    /// <p>For RSA keys, the <code>&lt;key type&gt;</code> string is <code>ssh-rsa</code>.</p></li>
    /// <li>
    /// <p>For ECDSA keys, the <code>&lt;key type&gt;</code> string is either <code>ecdsa-sha2-nistp256</code>, <code>ecdsa-sha2-nistp384</code>, or <code>ecdsa-sha2-nistp521</code>, depending on the size of the key you generated.</p></li>
    /// </ul>
    /// <p>Run this command to retrieve the SFTP server host key, where your SFTP server name is <code>ftp.host.com</code>.</p>
    /// <p><code>ssh-keyscan ftp.host.com</code></p>
    /// <p>This prints the public host key to standard output.</p>
    /// <p><code>ftp.host.com ssh-rsa AAAAB3Nza...&lt;long-string-for-public-key&gt;</code></p>
    /// <p>Copy and paste this string into the <code>TrustedHostKeys</code> field for the <code>create-connector</code> command or into the <b>Trusted host keys</b> field in the console.</p>
    /// <p>For VPC Lattice type connectors (VPC_LATTICE), remove the hostname from the key and use only the <code>key-type key-body</code> format. In this example, it should be: <code>ssh-rsa AAAAB3Nza...&lt;long-string-for-public-key&gt;</code></p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.trusted_host_keys.is_none()`.
    pub fn trusted_host_keys(&self) -> &[::std::string::String] {
        self.trusted_host_keys.as_deref().unwrap_or_default()
    }
    /// <p>Specify the number of concurrent connections that your connector creates to the remote server. The default value is <code>1</code>. The maximum values is <code>5</code>.</p><note>
    /// <p>If you are using the Amazon Web Services Management Console, the default value is <code>5</code>.</p>
    /// </note>
    /// <p>This parameter specifies the number of active connections that your connector can establish with the remote server at the same time. Increasing this value can enhance connector performance when transferring large file batches by enabling parallel operations.</p>
    pub fn max_concurrent_connections(&self) -> i32 {
        self.max_concurrent_connections
    }
}
impl SftpConnectorConfig {
    /// Creates a new builder-style object to manufacture [`SftpConnectorConfig`](crate::types::SftpConnectorConfig).
    pub fn builder() -> crate::types::builders::SftpConnectorConfigBuilder {
        crate::types::builders::SftpConnectorConfigBuilder::default()
    }
}

/// A builder for [`SftpConnectorConfig`](crate::types::SftpConnectorConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SftpConnectorConfigBuilder {
    pub(crate) user_secret_id: ::std::option::Option<::std::string::String>,
    pub(crate) trusted_host_keys: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) max_concurrent_connections: ::std::option::Option<i32>,
}
impl SftpConnectorConfigBuilder {
    /// <p>The identifier for the secret (in Amazon Web Services Secrets Manager) that contains the SFTP user's private key, password, or both. The identifier must be the Amazon Resource Name (ARN) of the secret.</p><note>
    /// <ul>
    /// <li>
    /// <p>Required when creating an SFTP connector</p></li>
    /// <li>
    /// <p>Optional when updating an existing SFTP connector</p></li>
    /// </ul>
    /// </note>
    pub fn user_secret_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_secret_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the secret (in Amazon Web Services Secrets Manager) that contains the SFTP user's private key, password, or both. The identifier must be the Amazon Resource Name (ARN) of the secret.</p><note>
    /// <ul>
    /// <li>
    /// <p>Required when creating an SFTP connector</p></li>
    /// <li>
    /// <p>Optional when updating an existing SFTP connector</p></li>
    /// </ul>
    /// </note>
    pub fn set_user_secret_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_secret_id = input;
        self
    }
    /// <p>The identifier for the secret (in Amazon Web Services Secrets Manager) that contains the SFTP user's private key, password, or both. The identifier must be the Amazon Resource Name (ARN) of the secret.</p><note>
    /// <ul>
    /// <li>
    /// <p>Required when creating an SFTP connector</p></li>
    /// <li>
    /// <p>Optional when updating an existing SFTP connector</p></li>
    /// </ul>
    /// </note>
    pub fn get_user_secret_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_secret_id
    }
    /// Appends an item to `trusted_host_keys`.
    ///
    /// To override the contents of this collection use [`set_trusted_host_keys`](Self::set_trusted_host_keys).
    ///
    /// <p>The public portion of the host key, or keys, that are used to identify the external server to which you are connecting. You can use the <code>ssh-keyscan</code> command against the SFTP server to retrieve the necessary key.</p><note>
    /// <p><code>TrustedHostKeys</code> is optional for <code>CreateConnector</code>. If not provided, you can use <code>TestConnection</code> to retrieve the server host key during the initial connection attempt, and subsequently update the connector with the observed host key.</p>
    /// </note>
    /// <p>When creating connectors with egress config (VPC_LATTICE type connectors), since host name is not something we can verify, the only accepted trusted host key format is <code>key-type key-body</code> without the host name. For example: <code>ssh-rsa AAAAB3Nza...&lt;long-string-for-public-key&gt;</code></p>
    /// <p>The three standard SSH public key format elements are <code>&lt;key type&gt;</code>, <code>&lt;body base64&gt;</code>, and an optional <code>&lt;comment&gt;</code>, with spaces between each element. Specify only the <code>&lt;key type&gt;</code> and <code>&lt;body base64&gt;</code>: do not enter the <code>&lt;comment&gt;</code> portion of the key.</p>
    /// <p>For the trusted host key, Transfer Family accepts RSA and ECDSA keys.</p>
    /// <ul>
    /// <li>
    /// <p>For RSA keys, the <code>&lt;key type&gt;</code> string is <code>ssh-rsa</code>.</p></li>
    /// <li>
    /// <p>For ECDSA keys, the <code>&lt;key type&gt;</code> string is either <code>ecdsa-sha2-nistp256</code>, <code>ecdsa-sha2-nistp384</code>, or <code>ecdsa-sha2-nistp521</code>, depending on the size of the key you generated.</p></li>
    /// </ul>
    /// <p>Run this command to retrieve the SFTP server host key, where your SFTP server name is <code>ftp.host.com</code>.</p>
    /// <p><code>ssh-keyscan ftp.host.com</code></p>
    /// <p>This prints the public host key to standard output.</p>
    /// <p><code>ftp.host.com ssh-rsa AAAAB3Nza...&lt;long-string-for-public-key&gt;</code></p>
    /// <p>Copy and paste this string into the <code>TrustedHostKeys</code> field for the <code>create-connector</code> command or into the <b>Trusted host keys</b> field in the console.</p>
    /// <p>For VPC Lattice type connectors (VPC_LATTICE), remove the hostname from the key and use only the <code>key-type key-body</code> format. In this example, it should be: <code>ssh-rsa AAAAB3Nza...&lt;long-string-for-public-key&gt;</code></p>
    pub fn trusted_host_keys(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.trusted_host_keys.unwrap_or_default();
        v.push(input.into());
        self.trusted_host_keys = ::std::option::Option::Some(v);
        self
    }
    /// <p>The public portion of the host key, or keys, that are used to identify the external server to which you are connecting. You can use the <code>ssh-keyscan</code> command against the SFTP server to retrieve the necessary key.</p><note>
    /// <p><code>TrustedHostKeys</code> is optional for <code>CreateConnector</code>. If not provided, you can use <code>TestConnection</code> to retrieve the server host key during the initial connection attempt, and subsequently update the connector with the observed host key.</p>
    /// </note>
    /// <p>When creating connectors with egress config (VPC_LATTICE type connectors), since host name is not something we can verify, the only accepted trusted host key format is <code>key-type key-body</code> without the host name. For example: <code>ssh-rsa AAAAB3Nza...&lt;long-string-for-public-key&gt;</code></p>
    /// <p>The three standard SSH public key format elements are <code>&lt;key type&gt;</code>, <code>&lt;body base64&gt;</code>, and an optional <code>&lt;comment&gt;</code>, with spaces between each element. Specify only the <code>&lt;key type&gt;</code> and <code>&lt;body base64&gt;</code>: do not enter the <code>&lt;comment&gt;</code> portion of the key.</p>
    /// <p>For the trusted host key, Transfer Family accepts RSA and ECDSA keys.</p>
    /// <ul>
    /// <li>
    /// <p>For RSA keys, the <code>&lt;key type&gt;</code> string is <code>ssh-rsa</code>.</p></li>
    /// <li>
    /// <p>For ECDSA keys, the <code>&lt;key type&gt;</code> string is either <code>ecdsa-sha2-nistp256</code>, <code>ecdsa-sha2-nistp384</code>, or <code>ecdsa-sha2-nistp521</code>, depending on the size of the key you generated.</p></li>
    /// </ul>
    /// <p>Run this command to retrieve the SFTP server host key, where your SFTP server name is <code>ftp.host.com</code>.</p>
    /// <p><code>ssh-keyscan ftp.host.com</code></p>
    /// <p>This prints the public host key to standard output.</p>
    /// <p><code>ftp.host.com ssh-rsa AAAAB3Nza...&lt;long-string-for-public-key&gt;</code></p>
    /// <p>Copy and paste this string into the <code>TrustedHostKeys</code> field for the <code>create-connector</code> command or into the <b>Trusted host keys</b> field in the console.</p>
    /// <p>For VPC Lattice type connectors (VPC_LATTICE), remove the hostname from the key and use only the <code>key-type key-body</code> format. In this example, it should be: <code>ssh-rsa AAAAB3Nza...&lt;long-string-for-public-key&gt;</code></p>
    pub fn set_trusted_host_keys(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.trusted_host_keys = input;
        self
    }
    /// <p>The public portion of the host key, or keys, that are used to identify the external server to which you are connecting. You can use the <code>ssh-keyscan</code> command against the SFTP server to retrieve the necessary key.</p><note>
    /// <p><code>TrustedHostKeys</code> is optional for <code>CreateConnector</code>. If not provided, you can use <code>TestConnection</code> to retrieve the server host key during the initial connection attempt, and subsequently update the connector with the observed host key.</p>
    /// </note>
    /// <p>When creating connectors with egress config (VPC_LATTICE type connectors), since host name is not something we can verify, the only accepted trusted host key format is <code>key-type key-body</code> without the host name. For example: <code>ssh-rsa AAAAB3Nza...&lt;long-string-for-public-key&gt;</code></p>
    /// <p>The three standard SSH public key format elements are <code>&lt;key type&gt;</code>, <code>&lt;body base64&gt;</code>, and an optional <code>&lt;comment&gt;</code>, with spaces between each element. Specify only the <code>&lt;key type&gt;</code> and <code>&lt;body base64&gt;</code>: do not enter the <code>&lt;comment&gt;</code> portion of the key.</p>
    /// <p>For the trusted host key, Transfer Family accepts RSA and ECDSA keys.</p>
    /// <ul>
    /// <li>
    /// <p>For RSA keys, the <code>&lt;key type&gt;</code> string is <code>ssh-rsa</code>.</p></li>
    /// <li>
    /// <p>For ECDSA keys, the <code>&lt;key type&gt;</code> string is either <code>ecdsa-sha2-nistp256</code>, <code>ecdsa-sha2-nistp384</code>, or <code>ecdsa-sha2-nistp521</code>, depending on the size of the key you generated.</p></li>
    /// </ul>
    /// <p>Run this command to retrieve the SFTP server host key, where your SFTP server name is <code>ftp.host.com</code>.</p>
    /// <p><code>ssh-keyscan ftp.host.com</code></p>
    /// <p>This prints the public host key to standard output.</p>
    /// <p><code>ftp.host.com ssh-rsa AAAAB3Nza...&lt;long-string-for-public-key&gt;</code></p>
    /// <p>Copy and paste this string into the <code>TrustedHostKeys</code> field for the <code>create-connector</code> command or into the <b>Trusted host keys</b> field in the console.</p>
    /// <p>For VPC Lattice type connectors (VPC_LATTICE), remove the hostname from the key and use only the <code>key-type key-body</code> format. In this example, it should be: <code>ssh-rsa AAAAB3Nza...&lt;long-string-for-public-key&gt;</code></p>
    pub fn get_trusted_host_keys(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.trusted_host_keys
    }
    /// <p>Specify the number of concurrent connections that your connector creates to the remote server. The default value is <code>1</code>. The maximum values is <code>5</code>.</p><note>
    /// <p>If you are using the Amazon Web Services Management Console, the default value is <code>5</code>.</p>
    /// </note>
    /// <p>This parameter specifies the number of active connections that your connector can establish with the remote server at the same time. Increasing this value can enhance connector performance when transferring large file batches by enabling parallel operations.</p>
    pub fn max_concurrent_connections(mut self, input: i32) -> Self {
        self.max_concurrent_connections = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specify the number of concurrent connections that your connector creates to the remote server. The default value is <code>1</code>. The maximum values is <code>5</code>.</p><note>
    /// <p>If you are using the Amazon Web Services Management Console, the default value is <code>5</code>.</p>
    /// </note>
    /// <p>This parameter specifies the number of active connections that your connector can establish with the remote server at the same time. Increasing this value can enhance connector performance when transferring large file batches by enabling parallel operations.</p>
    pub fn set_max_concurrent_connections(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_concurrent_connections = input;
        self
    }
    /// <p>Specify the number of concurrent connections that your connector creates to the remote server. The default value is <code>1</code>. The maximum values is <code>5</code>.</p><note>
    /// <p>If you are using the Amazon Web Services Management Console, the default value is <code>5</code>.</p>
    /// </note>
    /// <p>This parameter specifies the number of active connections that your connector can establish with the remote server at the same time. Increasing this value can enhance connector performance when transferring large file batches by enabling parallel operations.</p>
    pub fn get_max_concurrent_connections(&self) -> &::std::option::Option<i32> {
        &self.max_concurrent_connections
    }
    /// Consumes the builder and constructs a [`SftpConnectorConfig`](crate::types::SftpConnectorConfig).
    pub fn build(self) -> crate::types::SftpConnectorConfig {
        crate::types::SftpConnectorConfig {
            user_secret_id: self.user_secret_id,
            trusted_host_keys: self.trusted_host_keys,
            max_concurrent_connections: self.max_concurrent_connections.unwrap_or(1),
        }
    }
}
