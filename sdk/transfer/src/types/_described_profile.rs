// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details for a local or partner AS2 profile. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribedProfile {
    /// <p>The unique Amazon Resource Name (ARN) for the profile.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>A unique identifier for the local or partner AS2 profile.</p>
    #[doc(hidden)]
    pub profile_id: std::option::Option<std::string::String>,
    /// <p>Indicates whether to list only <code>LOCAL</code> type profiles or only <code>PARTNER</code> type profiles. If not supplied in the request, the command lists all types of profiles.</p>
    #[doc(hidden)]
    pub profile_type: std::option::Option<crate::types::ProfileType>,
    /// <p>The <code>As2Id</code> is the <i>AS2-name</i>, as defined in the <a href="https://datatracker.ietf.org/doc/html/rfc4130">RFC 4130</a>. For inbound transfers, this is the <code>AS2-From</code> header for the AS2 messages sent from the partner. For outbound connectors, this is the <code>AS2-To</code> header for the AS2 messages sent to the partner using the <code>StartFileTransfer</code> API operation. This ID cannot include spaces.</p>
    #[doc(hidden)]
    pub as2_id: std::option::Option<std::string::String>,
    /// <p>An array of identifiers for the imported certificates. You use this identifier for working with profiles and partner profiles.</p>
    #[doc(hidden)]
    pub certificate_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Key-value pairs that can be used to group and search for profiles.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl DescribedProfile {
    /// <p>The unique Amazon Resource Name (ARN) for the profile.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>A unique identifier for the local or partner AS2 profile.</p>
    pub fn profile_id(&self) -> std::option::Option<&str> {
        self.profile_id.as_deref()
    }
    /// <p>Indicates whether to list only <code>LOCAL</code> type profiles or only <code>PARTNER</code> type profiles. If not supplied in the request, the command lists all types of profiles.</p>
    pub fn profile_type(&self) -> std::option::Option<&crate::types::ProfileType> {
        self.profile_type.as_ref()
    }
    /// <p>The <code>As2Id</code> is the <i>AS2-name</i>, as defined in the <a href="https://datatracker.ietf.org/doc/html/rfc4130">RFC 4130</a>. For inbound transfers, this is the <code>AS2-From</code> header for the AS2 messages sent from the partner. For outbound connectors, this is the <code>AS2-To</code> header for the AS2 messages sent to the partner using the <code>StartFileTransfer</code> API operation. This ID cannot include spaces.</p>
    pub fn as2_id(&self) -> std::option::Option<&str> {
        self.as2_id.as_deref()
    }
    /// <p>An array of identifiers for the imported certificates. You use this identifier for working with profiles and partner profiles.</p>
    pub fn certificate_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.certificate_ids.as_deref()
    }
    /// <p>Key-value pairs that can be used to group and search for profiles.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl DescribedProfile {
    /// Creates a new builder-style object to manufacture [`DescribedProfile`](crate::types::DescribedProfile).
    pub fn builder() -> crate::types::builders::DescribedProfileBuilder {
        crate::types::builders::DescribedProfileBuilder::default()
    }
}

/// A builder for [`DescribedProfile`](crate::types::DescribedProfile).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribedProfileBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) profile_id: std::option::Option<std::string::String>,
    pub(crate) profile_type: std::option::Option<crate::types::ProfileType>,
    pub(crate) as2_id: std::option::Option<std::string::String>,
    pub(crate) certificate_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl DescribedProfileBuilder {
    /// <p>The unique Amazon Resource Name (ARN) for the profile.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The unique Amazon Resource Name (ARN) for the profile.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>A unique identifier for the local or partner AS2 profile.</p>
    pub fn profile_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.profile_id = Some(input.into());
        self
    }
    /// <p>A unique identifier for the local or partner AS2 profile.</p>
    pub fn set_profile_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.profile_id = input;
        self
    }
    /// <p>Indicates whether to list only <code>LOCAL</code> type profiles or only <code>PARTNER</code> type profiles. If not supplied in the request, the command lists all types of profiles.</p>
    pub fn profile_type(mut self, input: crate::types::ProfileType) -> Self {
        self.profile_type = Some(input);
        self
    }
    /// <p>Indicates whether to list only <code>LOCAL</code> type profiles or only <code>PARTNER</code> type profiles. If not supplied in the request, the command lists all types of profiles.</p>
    pub fn set_profile_type(
        mut self,
        input: std::option::Option<crate::types::ProfileType>,
    ) -> Self {
        self.profile_type = input;
        self
    }
    /// <p>The <code>As2Id</code> is the <i>AS2-name</i>, as defined in the <a href="https://datatracker.ietf.org/doc/html/rfc4130">RFC 4130</a>. For inbound transfers, this is the <code>AS2-From</code> header for the AS2 messages sent from the partner. For outbound connectors, this is the <code>AS2-To</code> header for the AS2 messages sent to the partner using the <code>StartFileTransfer</code> API operation. This ID cannot include spaces.</p>
    pub fn as2_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.as2_id = Some(input.into());
        self
    }
    /// <p>The <code>As2Id</code> is the <i>AS2-name</i>, as defined in the <a href="https://datatracker.ietf.org/doc/html/rfc4130">RFC 4130</a>. For inbound transfers, this is the <code>AS2-From</code> header for the AS2 messages sent from the partner. For outbound connectors, this is the <code>AS2-To</code> header for the AS2 messages sent to the partner using the <code>StartFileTransfer</code> API operation. This ID cannot include spaces.</p>
    pub fn set_as2_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.as2_id = input;
        self
    }
    /// Appends an item to `certificate_ids`.
    ///
    /// To override the contents of this collection use [`set_certificate_ids`](Self::set_certificate_ids).
    ///
    /// <p>An array of identifiers for the imported certificates. You use this identifier for working with profiles and partner profiles.</p>
    pub fn certificate_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.certificate_ids.unwrap_or_default();
        v.push(input.into());
        self.certificate_ids = Some(v);
        self
    }
    /// <p>An array of identifiers for the imported certificates. You use this identifier for working with profiles and partner profiles.</p>
    pub fn set_certificate_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.certificate_ids = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Key-value pairs that can be used to group and search for profiles.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>Key-value pairs that can be used to group and search for profiles.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribedProfile`](crate::types::DescribedProfile).
    pub fn build(self) -> crate::types::DescribedProfile {
        crate::types::DescribedProfile {
            arn: self.arn,
            profile_id: self.profile_id,
            profile_type: self.profile_type,
            as2_id: self.as2_id,
            certificate_ids: self.certificate_ids,
            tags: self.tags,
        }
    }
}
