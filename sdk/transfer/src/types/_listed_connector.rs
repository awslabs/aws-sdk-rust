// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Returns details of the connector that is specified.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListedConnector {
    /// <p>The Amazon Resource Name (ARN) of the specified connector.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier for the connector.</p>
    pub connector_id: ::std::option::Option<::std::string::String>,
    /// <p>The URL of the partner's AS2 or SFTP endpoint.</p>
    /// <p>When creating AS2 connectors or service-managed SFTP connectors (connectors without egress configuration), you must provide a URL to specify the remote server endpoint. For VPC Lattice type connectors, the URL must be null.</p>
    pub url: ::std::option::Option<::std::string::String>,
}
impl ListedConnector {
    /// <p>The Amazon Resource Name (ARN) of the specified connector.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The unique identifier for the connector.</p>
    pub fn connector_id(&self) -> ::std::option::Option<&str> {
        self.connector_id.as_deref()
    }
    /// <p>The URL of the partner's AS2 or SFTP endpoint.</p>
    /// <p>When creating AS2 connectors or service-managed SFTP connectors (connectors without egress configuration), you must provide a URL to specify the remote server endpoint. For VPC Lattice type connectors, the URL must be null.</p>
    pub fn url(&self) -> ::std::option::Option<&str> {
        self.url.as_deref()
    }
}
impl ListedConnector {
    /// Creates a new builder-style object to manufacture [`ListedConnector`](crate::types::ListedConnector).
    pub fn builder() -> crate::types::builders::ListedConnectorBuilder {
        crate::types::builders::ListedConnectorBuilder::default()
    }
}

/// A builder for [`ListedConnector`](crate::types::ListedConnector).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListedConnectorBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) connector_id: ::std::option::Option<::std::string::String>,
    pub(crate) url: ::std::option::Option<::std::string::String>,
}
impl ListedConnectorBuilder {
    /// <p>The Amazon Resource Name (ARN) of the specified connector.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the specified connector.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the specified connector.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The unique identifier for the connector.</p>
    pub fn connector_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connector_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the connector.</p>
    pub fn set_connector_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connector_id = input;
        self
    }
    /// <p>The unique identifier for the connector.</p>
    pub fn get_connector_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.connector_id
    }
    /// <p>The URL of the partner's AS2 or SFTP endpoint.</p>
    /// <p>When creating AS2 connectors or service-managed SFTP connectors (connectors without egress configuration), you must provide a URL to specify the remote server endpoint. For VPC Lattice type connectors, the URL must be null.</p>
    pub fn url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL of the partner's AS2 or SFTP endpoint.</p>
    /// <p>When creating AS2 connectors or service-managed SFTP connectors (connectors without egress configuration), you must provide a URL to specify the remote server endpoint. For VPC Lattice type connectors, the URL must be null.</p>
    pub fn set_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// <p>The URL of the partner's AS2 or SFTP endpoint.</p>
    /// <p>When creating AS2 connectors or service-managed SFTP connectors (connectors without egress configuration), you must provide a URL to specify the remote server endpoint. For VPC Lattice type connectors, the URL must be null.</p>
    pub fn get_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.url
    }
    /// Consumes the builder and constructs a [`ListedConnector`](crate::types::ListedConnector).
    pub fn build(self) -> crate::types::ListedConnector {
        crate::types::ListedConnector {
            arn: self.arn,
            connector_id: self.connector_id,
            url: self.url,
        }
    }
}
