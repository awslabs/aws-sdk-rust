// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents an object that contains entries and targets for <code>HomeDirectoryMappings</code>.</p>
/// <p>The following is an <code>Entry</code> and <code>Target</code> pair example for <code>chroot</code>.</p>
/// <p> <code>[ { "Entry": "/", "Target": "/bucket_name/home/mydirectory" } ]</code> </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct HomeDirectoryMapEntry {
    /// <p>Represents an entry for <code>HomeDirectoryMappings</code>.</p>
    #[doc(hidden)]
    pub entry: std::option::Option<std::string::String>,
    /// <p>Represents the map target that is used in a <code>HomeDirectorymapEntry</code>.</p>
    #[doc(hidden)]
    pub target: std::option::Option<std::string::String>,
}
impl HomeDirectoryMapEntry {
    /// <p>Represents an entry for <code>HomeDirectoryMappings</code>.</p>
    pub fn entry(&self) -> std::option::Option<&str> {
        self.entry.as_deref()
    }
    /// <p>Represents the map target that is used in a <code>HomeDirectorymapEntry</code>.</p>
    pub fn target(&self) -> std::option::Option<&str> {
        self.target.as_deref()
    }
}
impl HomeDirectoryMapEntry {
    /// Creates a new builder-style object to manufacture [`HomeDirectoryMapEntry`](crate::types::HomeDirectoryMapEntry).
    pub fn builder() -> crate::types::builders::HomeDirectoryMapEntryBuilder {
        crate::types::builders::HomeDirectoryMapEntryBuilder::default()
    }
}

/// A builder for [`HomeDirectoryMapEntry`](crate::types::HomeDirectoryMapEntry).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct HomeDirectoryMapEntryBuilder {
    pub(crate) entry: std::option::Option<std::string::String>,
    pub(crate) target: std::option::Option<std::string::String>,
}
impl HomeDirectoryMapEntryBuilder {
    /// <p>Represents an entry for <code>HomeDirectoryMappings</code>.</p>
    pub fn entry(mut self, input: impl Into<std::string::String>) -> Self {
        self.entry = Some(input.into());
        self
    }
    /// <p>Represents an entry for <code>HomeDirectoryMappings</code>.</p>
    pub fn set_entry(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.entry = input;
        self
    }
    /// <p>Represents the map target that is used in a <code>HomeDirectorymapEntry</code>.</p>
    pub fn target(mut self, input: impl Into<std::string::String>) -> Self {
        self.target = Some(input.into());
        self
    }
    /// <p>Represents the map target that is used in a <code>HomeDirectorymapEntry</code>.</p>
    pub fn set_target(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.target = input;
        self
    }
    /// Consumes the builder and constructs a [`HomeDirectoryMapEntry`](crate::types::HomeDirectoryMapEntry).
    pub fn build(self) -> crate::types::HomeDirectoryMapEntry {
        crate::types::HomeDirectoryMapEntry {
            entry: self.entry,
            target: self.target,
        }
    }
}
