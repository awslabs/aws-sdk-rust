// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Returns information related to the type of user authentication that is in use for a file transfer protocol-enabled server's users. A server can have only one method of authentication.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct IdentityProviderDetails {
    /// <p>Provides the location of the service endpoint used to authenticate users.</p>
    #[doc(hidden)]
    pub url: std::option::Option<std::string::String>,
    /// <p>Provides the type of <code>InvocationRole</code> used to authenticate the user account.</p>
    #[doc(hidden)]
    pub invocation_role: std::option::Option<std::string::String>,
    /// <p>The identifier of the Directory Service directory that you want to stop sharing.</p>
    #[doc(hidden)]
    pub directory_id: std::option::Option<std::string::String>,
    /// <p>The ARN for a lambda function to use for the Identity provider.</p>
    #[doc(hidden)]
    pub function: std::option::Option<std::string::String>,
}
impl IdentityProviderDetails {
    /// <p>Provides the location of the service endpoint used to authenticate users.</p>
    pub fn url(&self) -> std::option::Option<&str> {
        self.url.as_deref()
    }
    /// <p>Provides the type of <code>InvocationRole</code> used to authenticate the user account.</p>
    pub fn invocation_role(&self) -> std::option::Option<&str> {
        self.invocation_role.as_deref()
    }
    /// <p>The identifier of the Directory Service directory that you want to stop sharing.</p>
    pub fn directory_id(&self) -> std::option::Option<&str> {
        self.directory_id.as_deref()
    }
    /// <p>The ARN for a lambda function to use for the Identity provider.</p>
    pub fn function(&self) -> std::option::Option<&str> {
        self.function.as_deref()
    }
}
impl IdentityProviderDetails {
    /// Creates a new builder-style object to manufacture [`IdentityProviderDetails`](crate::types::IdentityProviderDetails).
    pub fn builder() -> crate::types::builders::IdentityProviderDetailsBuilder {
        crate::types::builders::IdentityProviderDetailsBuilder::default()
    }
}

/// A builder for [`IdentityProviderDetails`](crate::types::IdentityProviderDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct IdentityProviderDetailsBuilder {
    pub(crate) url: std::option::Option<std::string::String>,
    pub(crate) invocation_role: std::option::Option<std::string::String>,
    pub(crate) directory_id: std::option::Option<std::string::String>,
    pub(crate) function: std::option::Option<std::string::String>,
}
impl IdentityProviderDetailsBuilder {
    /// <p>Provides the location of the service endpoint used to authenticate users.</p>
    pub fn url(mut self, input: impl Into<std::string::String>) -> Self {
        self.url = Some(input.into());
        self
    }
    /// <p>Provides the location of the service endpoint used to authenticate users.</p>
    pub fn set_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// <p>Provides the type of <code>InvocationRole</code> used to authenticate the user account.</p>
    pub fn invocation_role(mut self, input: impl Into<std::string::String>) -> Self {
        self.invocation_role = Some(input.into());
        self
    }
    /// <p>Provides the type of <code>InvocationRole</code> used to authenticate the user account.</p>
    pub fn set_invocation_role(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.invocation_role = input;
        self
    }
    /// <p>The identifier of the Directory Service directory that you want to stop sharing.</p>
    pub fn directory_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.directory_id = Some(input.into());
        self
    }
    /// <p>The identifier of the Directory Service directory that you want to stop sharing.</p>
    pub fn set_directory_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.directory_id = input;
        self
    }
    /// <p>The ARN for a lambda function to use for the Identity provider.</p>
    pub fn function(mut self, input: impl Into<std::string::String>) -> Self {
        self.function = Some(input.into());
        self
    }
    /// <p>The ARN for a lambda function to use for the Identity provider.</p>
    pub fn set_function(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.function = input;
        self
    }
    /// Consumes the builder and constructs a [`IdentityProviderDetails`](crate::types::IdentityProviderDetails).
    pub fn build(self) -> crate::types::IdentityProviderDetails {
        crate::types::IdentityProviderDetails {
            url: self.url,
            invocation_role: self.invocation_role,
            directory_id: self.directory_id,
            function: self.function,
        }
    }
}
