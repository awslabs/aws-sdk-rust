// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_access_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAccessInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.home_directory {
        object.key("HomeDirectory").string(var_1);
    }
    if let Some(var_2) = &input.home_directory_type {
        object.key("HomeDirectoryType").string(var_2.as_str());
    }
    if let Some(var_3) = &input.home_directory_mappings {
        let mut array_4 = object.key("HomeDirectoryMappings").start_array();
        for item_5 in var_3 {
            {
                let mut object_6 = array_4.value().start_object();
                crate::json_ser::serialize_structure_crate_model_home_directory_map_entry(
                    &mut object_6,
                    item_5,
                )?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    if let Some(var_7) = &input.policy {
        object.key("Policy").string(var_7);
    }
    if let Some(var_8) = &input.posix_profile {
        let mut object_9 = object.key("PosixProfile").start_object();
        crate::json_ser::serialize_structure_crate_model_posix_profile(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.role {
        object.key("Role").string(var_10);
    }
    if let Some(var_11) = &input.server_id {
        object.key("ServerId").string(var_11);
    }
    if let Some(var_12) = &input.external_id {
        object.key("ExternalId").string(var_12);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_server_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateServerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_13) = &input.certificate {
        object.key("Certificate").string(var_13);
    }
    if let Some(var_14) = &input.domain {
        object.key("Domain").string(var_14.as_str());
    }
    if let Some(var_15) = &input.endpoint_details {
        let mut object_16 = object.key("EndpointDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_details(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.endpoint_type {
        object.key("EndpointType").string(var_17.as_str());
    }
    if let Some(var_18) = &input.host_key {
        object.key("HostKey").string(var_18);
    }
    if let Some(var_19) = &input.identity_provider_details {
        let mut object_20 = object.key("IdentityProviderDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_identity_provider_details(
            &mut object_20,
            var_19,
        )?;
        object_20.finish();
    }
    if let Some(var_21) = &input.identity_provider_type {
        object.key("IdentityProviderType").string(var_21.as_str());
    }
    if let Some(var_22) = &input.logging_role {
        object.key("LoggingRole").string(var_22);
    }
    if let Some(var_23) = &input.protocols {
        let mut array_24 = object.key("Protocols").start_array();
        for item_25 in var_23 {
            {
                array_24.value().string(item_25.as_str());
            }
        }
        array_24.finish();
    }
    if let Some(var_26) = &input.security_policy_name {
        object.key("SecurityPolicyName").string(var_26);
    }
    if let Some(var_27) = &input.tags {
        let mut array_28 = object.key("Tags").start_array();
        for item_29 in var_27 {
            {
                let mut object_30 = array_28.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_30, item_29)?;
                object_30.finish();
            }
        }
        array_28.finish();
    }
    if let Some(var_31) = &input.workflow_details {
        let mut object_32 = object.key("WorkflowDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_workflow_details(&mut object_32, var_31)?;
        object_32.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_33) = &input.home_directory {
        object.key("HomeDirectory").string(var_33);
    }
    if let Some(var_34) = &input.home_directory_type {
        object.key("HomeDirectoryType").string(var_34.as_str());
    }
    if let Some(var_35) = &input.home_directory_mappings {
        let mut array_36 = object.key("HomeDirectoryMappings").start_array();
        for item_37 in var_35 {
            {
                let mut object_38 = array_36.value().start_object();
                crate::json_ser::serialize_structure_crate_model_home_directory_map_entry(
                    &mut object_38,
                    item_37,
                )?;
                object_38.finish();
            }
        }
        array_36.finish();
    }
    if let Some(var_39) = &input.policy {
        object.key("Policy").string(var_39);
    }
    if let Some(var_40) = &input.posix_profile {
        let mut object_41 = object.key("PosixProfile").start_object();
        crate::json_ser::serialize_structure_crate_model_posix_profile(&mut object_41, var_40)?;
        object_41.finish();
    }
    if let Some(var_42) = &input.role {
        object.key("Role").string(var_42);
    }
    if let Some(var_43) = &input.server_id {
        object.key("ServerId").string(var_43);
    }
    if let Some(var_44) = &input.ssh_public_key_body {
        object.key("SshPublicKeyBody").string(var_44);
    }
    if let Some(var_45) = &input.tags {
        let mut array_46 = object.key("Tags").start_array();
        for item_47 in var_45 {
            {
                let mut object_48 = array_46.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_48, item_47)?;
                object_48.finish();
            }
        }
        array_46.finish();
    }
    if let Some(var_49) = &input.user_name {
        object.key("UserName").string(var_49);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_workflow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWorkflowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_50) = &input.description {
        object.key("Description").string(var_50);
    }
    if let Some(var_51) = &input.steps {
        let mut array_52 = object.key("Steps").start_array();
        for item_53 in var_51 {
            {
                let mut object_54 = array_52.value().start_object();
                crate::json_ser::serialize_structure_crate_model_workflow_step(
                    &mut object_54,
                    item_53,
                )?;
                object_54.finish();
            }
        }
        array_52.finish();
    }
    if let Some(var_55) = &input.on_exception_steps {
        let mut array_56 = object.key("OnExceptionSteps").start_array();
        for item_57 in var_55 {
            {
                let mut object_58 = array_56.value().start_object();
                crate::json_ser::serialize_structure_crate_model_workflow_step(
                    &mut object_58,
                    item_57,
                )?;
                object_58.finish();
            }
        }
        array_56.finish();
    }
    if let Some(var_59) = &input.tags {
        let mut array_60 = object.key("Tags").start_array();
        for item_61 in var_59 {
            {
                let mut object_62 = array_60.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_62, item_61)?;
                object_62.finish();
            }
        }
        array_60.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_access_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAccessInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_63) = &input.server_id {
        object.key("ServerId").string(var_63);
    }
    if let Some(var_64) = &input.external_id {
        object.key("ExternalId").string(var_64);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_server_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteServerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_65) = &input.server_id {
        object.key("ServerId").string(var_65);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_ssh_public_key_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSshPublicKeyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_66) = &input.server_id {
        object.key("ServerId").string(var_66);
    }
    if let Some(var_67) = &input.ssh_public_key_id {
        object.key("SshPublicKeyId").string(var_67);
    }
    if let Some(var_68) = &input.user_name {
        object.key("UserName").string(var_68);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_69) = &input.server_id {
        object.key("ServerId").string(var_69);
    }
    if let Some(var_70) = &input.user_name {
        object.key("UserName").string(var_70);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_workflow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteWorkflowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_71) = &input.workflow_id {
        object.key("WorkflowId").string(var_71);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_access_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAccessInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_72) = &input.server_id {
        object.key("ServerId").string(var_72);
    }
    if let Some(var_73) = &input.external_id {
        object.key("ExternalId").string(var_73);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_74) = &input.execution_id {
        object.key("ExecutionId").string(var_74);
    }
    if let Some(var_75) = &input.workflow_id {
        object.key("WorkflowId").string(var_75);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_security_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSecurityPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_76) = &input.security_policy_name {
        object.key("SecurityPolicyName").string(var_76);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_server_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeServerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_77) = &input.server_id {
        object.key("ServerId").string(var_77);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_78) = &input.server_id {
        object.key("ServerId").string(var_78);
    }
    if let Some(var_79) = &input.user_name {
        object.key("UserName").string(var_79);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_workflow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeWorkflowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_80) = &input.workflow_id {
        object.key("WorkflowId").string(var_80);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_import_ssh_public_key_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ImportSshPublicKeyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_81) = &input.server_id {
        object.key("ServerId").string(var_81);
    }
    if let Some(var_82) = &input.ssh_public_key_body {
        object.key("SshPublicKeyBody").string(var_82);
    }
    if let Some(var_83) = &input.user_name {
        object.key("UserName").string(var_83);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_accesses_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAccessesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_84) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_84).into()),
        );
    }
    if let Some(var_85) = &input.next_token {
        object.key("NextToken").string(var_85);
    }
    if let Some(var_86) = &input.server_id {
        object.key("ServerId").string(var_86);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_executions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListExecutionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_87) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_87).into()),
        );
    }
    if let Some(var_88) = &input.next_token {
        object.key("NextToken").string(var_88);
    }
    if let Some(var_89) = &input.workflow_id {
        object.key("WorkflowId").string(var_89);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_security_policies_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSecurityPoliciesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_90) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_90).into()),
        );
    }
    if let Some(var_91) = &input.next_token {
        object.key("NextToken").string(var_91);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_servers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListServersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_92) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_92).into()),
        );
    }
    if let Some(var_93) = &input.next_token {
        object.key("NextToken").string(var_93);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_94) = &input.arn {
        object.key("Arn").string(var_94);
    }
    if let Some(var_95) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_95).into()),
        );
    }
    if let Some(var_96) = &input.next_token {
        object.key("NextToken").string(var_96);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_users_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListUsersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_97) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_97).into()),
        );
    }
    if let Some(var_98) = &input.next_token {
        object.key("NextToken").string(var_98);
    }
    if let Some(var_99) = &input.server_id {
        object.key("ServerId").string(var_99);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_workflows_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListWorkflowsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_100) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_100).into()),
        );
    }
    if let Some(var_101) = &input.next_token {
        object.key("NextToken").string(var_101);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_send_workflow_step_state_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendWorkflowStepStateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_102) = &input.workflow_id {
        object.key("WorkflowId").string(var_102);
    }
    if let Some(var_103) = &input.execution_id {
        object.key("ExecutionId").string(var_103);
    }
    if let Some(var_104) = &input.token {
        object.key("Token").string(var_104);
    }
    if let Some(var_105) = &input.status {
        object.key("Status").string(var_105.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_server_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartServerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_106) = &input.server_id {
        object.key("ServerId").string(var_106);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_server_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopServerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_107) = &input.server_id {
        object.key("ServerId").string(var_107);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_108) = &input.arn {
        object.key("Arn").string(var_108);
    }
    if let Some(var_109) = &input.tags {
        let mut array_110 = object.key("Tags").start_array();
        for item_111 in var_109 {
            {
                let mut object_112 = array_110.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_112, item_111)?;
                object_112.finish();
            }
        }
        array_110.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_test_identity_provider_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TestIdentityProviderInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_113) = &input.server_id {
        object.key("ServerId").string(var_113);
    }
    if let Some(var_114) = &input.server_protocol {
        object.key("ServerProtocol").string(var_114.as_str());
    }
    if let Some(var_115) = &input.source_ip {
        object.key("SourceIp").string(var_115);
    }
    if let Some(var_116) = &input.user_name {
        object.key("UserName").string(var_116);
    }
    if let Some(var_117) = &input.user_password {
        object.key("UserPassword").string(var_117);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_118) = &input.arn {
        object.key("Arn").string(var_118);
    }
    if let Some(var_119) = &input.tag_keys {
        let mut array_120 = object.key("TagKeys").start_array();
        for item_121 in var_119 {
            {
                array_120.value().string(item_121);
            }
        }
        array_120.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_access_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAccessInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_122) = &input.home_directory {
        object.key("HomeDirectory").string(var_122);
    }
    if let Some(var_123) = &input.home_directory_type {
        object.key("HomeDirectoryType").string(var_123.as_str());
    }
    if let Some(var_124) = &input.home_directory_mappings {
        let mut array_125 = object.key("HomeDirectoryMappings").start_array();
        for item_126 in var_124 {
            {
                let mut object_127 = array_125.value().start_object();
                crate::json_ser::serialize_structure_crate_model_home_directory_map_entry(
                    &mut object_127,
                    item_126,
                )?;
                object_127.finish();
            }
        }
        array_125.finish();
    }
    if let Some(var_128) = &input.policy {
        object.key("Policy").string(var_128);
    }
    if let Some(var_129) = &input.posix_profile {
        let mut object_130 = object.key("PosixProfile").start_object();
        crate::json_ser::serialize_structure_crate_model_posix_profile(&mut object_130, var_129)?;
        object_130.finish();
    }
    if let Some(var_131) = &input.role {
        object.key("Role").string(var_131);
    }
    if let Some(var_132) = &input.server_id {
        object.key("ServerId").string(var_132);
    }
    if let Some(var_133) = &input.external_id {
        object.key("ExternalId").string(var_133);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_server_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateServerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_134) = &input.certificate {
        object.key("Certificate").string(var_134);
    }
    if let Some(var_135) = &input.protocol_details {
        let mut object_136 = object.key("ProtocolDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_protocol_details(
            &mut object_136,
            var_135,
        )?;
        object_136.finish();
    }
    if let Some(var_137) = &input.endpoint_details {
        let mut object_138 = object.key("EndpointDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_details(
            &mut object_138,
            var_137,
        )?;
        object_138.finish();
    }
    if let Some(var_139) = &input.endpoint_type {
        object.key("EndpointType").string(var_139.as_str());
    }
    if let Some(var_140) = &input.host_key {
        object.key("HostKey").string(var_140);
    }
    if let Some(var_141) = &input.identity_provider_details {
        let mut object_142 = object.key("IdentityProviderDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_identity_provider_details(
            &mut object_142,
            var_141,
        )?;
        object_142.finish();
    }
    if let Some(var_143) = &input.logging_role {
        object.key("LoggingRole").string(var_143);
    }
    if let Some(var_144) = &input.protocols {
        let mut array_145 = object.key("Protocols").start_array();
        for item_146 in var_144 {
            {
                array_145.value().string(item_146.as_str());
            }
        }
        array_145.finish();
    }
    if let Some(var_147) = &input.security_policy_name {
        object.key("SecurityPolicyName").string(var_147);
    }
    if let Some(var_148) = &input.server_id {
        object.key("ServerId").string(var_148);
    }
    if let Some(var_149) = &input.workflow_details {
        let mut object_150 = object.key("WorkflowDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_workflow_details(
            &mut object_150,
            var_149,
        )?;
        object_150.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_151) = &input.home_directory {
        object.key("HomeDirectory").string(var_151);
    }
    if let Some(var_152) = &input.home_directory_type {
        object.key("HomeDirectoryType").string(var_152.as_str());
    }
    if let Some(var_153) = &input.home_directory_mappings {
        let mut array_154 = object.key("HomeDirectoryMappings").start_array();
        for item_155 in var_153 {
            {
                let mut object_156 = array_154.value().start_object();
                crate::json_ser::serialize_structure_crate_model_home_directory_map_entry(
                    &mut object_156,
                    item_155,
                )?;
                object_156.finish();
            }
        }
        array_154.finish();
    }
    if let Some(var_157) = &input.policy {
        object.key("Policy").string(var_157);
    }
    if let Some(var_158) = &input.posix_profile {
        let mut object_159 = object.key("PosixProfile").start_object();
        crate::json_ser::serialize_structure_crate_model_posix_profile(&mut object_159, var_158)?;
        object_159.finish();
    }
    if let Some(var_160) = &input.role {
        object.key("Role").string(var_160);
    }
    if let Some(var_161) = &input.server_id {
        object.key("ServerId").string(var_161);
    }
    if let Some(var_162) = &input.user_name {
        object.key("UserName").string(var_162);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_home_directory_map_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HomeDirectoryMapEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_163) = &input.entry {
        object.key("Entry").string(var_163);
    }
    if let Some(var_164) = &input.target {
        object.key("Target").string(var_164);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_posix_profile(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PosixProfile,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_165) = &input.uid {
        object.key("Uid").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_165).into()),
        );
    }
    if let Some(var_166) = &input.gid {
        object.key("Gid").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_166).into()),
        );
    }
    if let Some(var_167) = &input.secondary_gids {
        let mut array_168 = object.key("SecondaryGids").start_array();
        for item_169 in var_167 {
            {
                array_168.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*item_169).into()),
                );
            }
        }
        array_168.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_endpoint_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EndpointDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_170) = &input.address_allocation_ids {
        let mut array_171 = object.key("AddressAllocationIds").start_array();
        for item_172 in var_170 {
            {
                array_171.value().string(item_172);
            }
        }
        array_171.finish();
    }
    if let Some(var_173) = &input.subnet_ids {
        let mut array_174 = object.key("SubnetIds").start_array();
        for item_175 in var_173 {
            {
                array_174.value().string(item_175);
            }
        }
        array_174.finish();
    }
    if let Some(var_176) = &input.vpc_endpoint_id {
        object.key("VpcEndpointId").string(var_176);
    }
    if let Some(var_177) = &input.vpc_id {
        object.key("VpcId").string(var_177);
    }
    if let Some(var_178) = &input.security_group_ids {
        let mut array_179 = object.key("SecurityGroupIds").start_array();
        for item_180 in var_178 {
            {
                array_179.value().string(item_180);
            }
        }
        array_179.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_identity_provider_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IdentityProviderDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_181) = &input.url {
        object.key("Url").string(var_181);
    }
    if let Some(var_182) = &input.invocation_role {
        object.key("InvocationRole").string(var_182);
    }
    if let Some(var_183) = &input.directory_id {
        object.key("DirectoryId").string(var_183);
    }
    if let Some(var_184) = &input.function {
        object.key("Function").string(var_184);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_185) = &input.key {
        object.key("Key").string(var_185);
    }
    if let Some(var_186) = &input.value {
        object.key("Value").string(var_186);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_workflow_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WorkflowDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_187) = &input.on_upload {
        let mut array_188 = object.key("OnUpload").start_array();
        for item_189 in var_187 {
            {
                let mut object_190 = array_188.value().start_object();
                crate::json_ser::serialize_structure_crate_model_workflow_detail(
                    &mut object_190,
                    item_189,
                )?;
                object_190.finish();
            }
        }
        array_188.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_workflow_step(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WorkflowStep,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_191) = &input.r#type {
        object.key("Type").string(var_191.as_str());
    }
    if let Some(var_192) = &input.copy_step_details {
        let mut object_193 = object.key("CopyStepDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_copy_step_details(
            &mut object_193,
            var_192,
        )?;
        object_193.finish();
    }
    if let Some(var_194) = &input.custom_step_details {
        let mut object_195 = object.key("CustomStepDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_step_details(
            &mut object_195,
            var_194,
        )?;
        object_195.finish();
    }
    if let Some(var_196) = &input.delete_step_details {
        let mut object_197 = object.key("DeleteStepDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_delete_step_details(
            &mut object_197,
            var_196,
        )?;
        object_197.finish();
    }
    if let Some(var_198) = &input.tag_step_details {
        let mut object_199 = object.key("TagStepDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_tag_step_details(
            &mut object_199,
            var_198,
        )?;
        object_199.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_protocol_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProtocolDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_200) = &input.passive_ip {
        object.key("PassiveIp").string(var_200);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_workflow_detail(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WorkflowDetail,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_201) = &input.workflow_id {
        object.key("WorkflowId").string(var_201);
    }
    if let Some(var_202) = &input.execution_role {
        object.key("ExecutionRole").string(var_202);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_copy_step_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CopyStepDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_203) = &input.name {
        object.key("Name").string(var_203);
    }
    if let Some(var_204) = &input.destination_file_location {
        let mut object_205 = object.key("DestinationFileLocation").start_object();
        crate::json_ser::serialize_structure_crate_model_input_file_location(
            &mut object_205,
            var_204,
        )?;
        object_205.finish();
    }
    if let Some(var_206) = &input.overwrite_existing {
        object.key("OverwriteExisting").string(var_206.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_step_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomStepDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_207) = &input.name {
        object.key("Name").string(var_207);
    }
    if let Some(var_208) = &input.target {
        object.key("Target").string(var_208);
    }
    if let Some(var_209) = &input.timeout_seconds {
        object.key("TimeoutSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_209).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_delete_step_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeleteStepDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_210) = &input.name {
        object.key("Name").string(var_210);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag_step_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TagStepDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_211) = &input.name {
        object.key("Name").string(var_211);
    }
    if let Some(var_212) = &input.tags {
        let mut array_213 = object.key("Tags").start_array();
        for item_214 in var_212 {
            {
                let mut object_215 = array_213.value().start_object();
                crate::json_ser::serialize_structure_crate_model_s3_tag(&mut object_215, item_214)?;
                object_215.finish();
            }
        }
        array_213.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_input_file_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputFileLocation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_216) = &input.s3_file_location {
        let mut object_217 = object.key("S3FileLocation").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_input_file_location(
            &mut object_217,
            var_216,
        )?;
        object_217.finish();
    }
    if let Some(var_218) = &input.efs_file_location {
        let mut object_219 = object.key("EfsFileLocation").start_object();
        crate::json_ser::serialize_structure_crate_model_efs_file_location(
            &mut object_219,
            var_218,
        )?;
        object_219.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_220) = &input.key {
        object.key("Key").string(var_220);
    }
    if let Some(var_221) = &input.value {
        object.key("Value").string(var_221);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_input_file_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3InputFileLocation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_222) = &input.bucket {
        object.key("Bucket").string(var_222);
    }
    if let Some(var_223) = &input.key {
        object.key("Key").string(var_223);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_efs_file_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EfsFileLocation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_224) = &input.file_system_id {
        object.key("FileSystemId").string(var_224);
    }
    if let Some(var_225) = &input.path {
        object.key("Path").string(var_225);
    }
    Ok(())
}
