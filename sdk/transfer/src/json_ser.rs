// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_access_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAccessInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.home_directory {
        object.key("HomeDirectory").string(var_1);
    }
    if let Some(var_2) = &input.home_directory_type {
        object.key("HomeDirectoryType").string(var_2.as_str());
    }
    if let Some(var_3) = &input.home_directory_mappings {
        let mut array_4 = object.key("HomeDirectoryMappings").start_array();
        for item_5 in var_3 {
            {
                let mut object_6 = array_4.value().start_object();
                crate::json_ser::serialize_structure_crate_model_home_directory_map_entry(
                    &mut object_6,
                    item_5,
                )?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    if let Some(var_7) = &input.policy {
        object.key("Policy").string(var_7);
    }
    if let Some(var_8) = &input.posix_profile {
        let mut object_9 = object.key("PosixProfile").start_object();
        crate::json_ser::serialize_structure_crate_model_posix_profile(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.role {
        object.key("Role").string(var_10);
    }
    if let Some(var_11) = &input.server_id {
        object.key("ServerId").string(var_11);
    }
    if let Some(var_12) = &input.external_id {
        object.key("ExternalId").string(var_12);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_server_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateServerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_13) = &input.certificate {
        object.key("Certificate").string(var_13);
    }
    if let Some(var_14) = &input.domain {
        object.key("Domain").string(var_14.as_str());
    }
    if let Some(var_15) = &input.endpoint_details {
        let mut object_16 = object.key("EndpointDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_details(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.endpoint_type {
        object.key("EndpointType").string(var_17.as_str());
    }
    if let Some(var_18) = &input.host_key {
        object.key("HostKey").string(var_18);
    }
    if let Some(var_19) = &input.identity_provider_details {
        let mut object_20 = object.key("IdentityProviderDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_identity_provider_details(
            &mut object_20,
            var_19,
        )?;
        object_20.finish();
    }
    if let Some(var_21) = &input.identity_provider_type {
        object.key("IdentityProviderType").string(var_21.as_str());
    }
    if let Some(var_22) = &input.logging_role {
        object.key("LoggingRole").string(var_22);
    }
    if let Some(var_23) = &input.protocols {
        let mut array_24 = object.key("Protocols").start_array();
        for item_25 in var_23 {
            {
                array_24.value().string(item_25.as_str());
            }
        }
        array_24.finish();
    }
    if let Some(var_26) = &input.protocol_details {
        let mut object_27 = object.key("ProtocolDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_protocol_details(&mut object_27, var_26)?;
        object_27.finish();
    }
    if let Some(var_28) = &input.security_policy_name {
        object.key("SecurityPolicyName").string(var_28);
    }
    if let Some(var_29) = &input.tags {
        let mut array_30 = object.key("Tags").start_array();
        for item_31 in var_29 {
            {
                let mut object_32 = array_30.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_32, item_31)?;
                object_32.finish();
            }
        }
        array_30.finish();
    }
    if let Some(var_33) = &input.workflow_details {
        let mut object_34 = object.key("WorkflowDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_workflow_details(&mut object_34, var_33)?;
        object_34.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_35) = &input.home_directory {
        object.key("HomeDirectory").string(var_35);
    }
    if let Some(var_36) = &input.home_directory_type {
        object.key("HomeDirectoryType").string(var_36.as_str());
    }
    if let Some(var_37) = &input.home_directory_mappings {
        let mut array_38 = object.key("HomeDirectoryMappings").start_array();
        for item_39 in var_37 {
            {
                let mut object_40 = array_38.value().start_object();
                crate::json_ser::serialize_structure_crate_model_home_directory_map_entry(
                    &mut object_40,
                    item_39,
                )?;
                object_40.finish();
            }
        }
        array_38.finish();
    }
    if let Some(var_41) = &input.policy {
        object.key("Policy").string(var_41);
    }
    if let Some(var_42) = &input.posix_profile {
        let mut object_43 = object.key("PosixProfile").start_object();
        crate::json_ser::serialize_structure_crate_model_posix_profile(&mut object_43, var_42)?;
        object_43.finish();
    }
    if let Some(var_44) = &input.role {
        object.key("Role").string(var_44);
    }
    if let Some(var_45) = &input.server_id {
        object.key("ServerId").string(var_45);
    }
    if let Some(var_46) = &input.ssh_public_key_body {
        object.key("SshPublicKeyBody").string(var_46);
    }
    if let Some(var_47) = &input.tags {
        let mut array_48 = object.key("Tags").start_array();
        for item_49 in var_47 {
            {
                let mut object_50 = array_48.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_50, item_49)?;
                object_50.finish();
            }
        }
        array_48.finish();
    }
    if let Some(var_51) = &input.user_name {
        object.key("UserName").string(var_51);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_workflow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWorkflowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_52) = &input.description {
        object.key("Description").string(var_52);
    }
    if let Some(var_53) = &input.steps {
        let mut array_54 = object.key("Steps").start_array();
        for item_55 in var_53 {
            {
                let mut object_56 = array_54.value().start_object();
                crate::json_ser::serialize_structure_crate_model_workflow_step(
                    &mut object_56,
                    item_55,
                )?;
                object_56.finish();
            }
        }
        array_54.finish();
    }
    if let Some(var_57) = &input.on_exception_steps {
        let mut array_58 = object.key("OnExceptionSteps").start_array();
        for item_59 in var_57 {
            {
                let mut object_60 = array_58.value().start_object();
                crate::json_ser::serialize_structure_crate_model_workflow_step(
                    &mut object_60,
                    item_59,
                )?;
                object_60.finish();
            }
        }
        array_58.finish();
    }
    if let Some(var_61) = &input.tags {
        let mut array_62 = object.key("Tags").start_array();
        for item_63 in var_61 {
            {
                let mut object_64 = array_62.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_64, item_63)?;
                object_64.finish();
            }
        }
        array_62.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_access_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAccessInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_65) = &input.server_id {
        object.key("ServerId").string(var_65);
    }
    if let Some(var_66) = &input.external_id {
        object.key("ExternalId").string(var_66);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_server_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteServerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_67) = &input.server_id {
        object.key("ServerId").string(var_67);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_ssh_public_key_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSshPublicKeyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_68) = &input.server_id {
        object.key("ServerId").string(var_68);
    }
    if let Some(var_69) = &input.ssh_public_key_id {
        object.key("SshPublicKeyId").string(var_69);
    }
    if let Some(var_70) = &input.user_name {
        object.key("UserName").string(var_70);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_71) = &input.server_id {
        object.key("ServerId").string(var_71);
    }
    if let Some(var_72) = &input.user_name {
        object.key("UserName").string(var_72);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_workflow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteWorkflowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_73) = &input.workflow_id {
        object.key("WorkflowId").string(var_73);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_access_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAccessInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_74) = &input.server_id {
        object.key("ServerId").string(var_74);
    }
    if let Some(var_75) = &input.external_id {
        object.key("ExternalId").string(var_75);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_76) = &input.execution_id {
        object.key("ExecutionId").string(var_76);
    }
    if let Some(var_77) = &input.workflow_id {
        object.key("WorkflowId").string(var_77);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_security_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSecurityPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_78) = &input.security_policy_name {
        object.key("SecurityPolicyName").string(var_78);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_server_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeServerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_79) = &input.server_id {
        object.key("ServerId").string(var_79);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_80) = &input.server_id {
        object.key("ServerId").string(var_80);
    }
    if let Some(var_81) = &input.user_name {
        object.key("UserName").string(var_81);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_workflow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeWorkflowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_82) = &input.workflow_id {
        object.key("WorkflowId").string(var_82);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_import_ssh_public_key_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ImportSshPublicKeyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_83) = &input.server_id {
        object.key("ServerId").string(var_83);
    }
    if let Some(var_84) = &input.ssh_public_key_body {
        object.key("SshPublicKeyBody").string(var_84);
    }
    if let Some(var_85) = &input.user_name {
        object.key("UserName").string(var_85);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_accesses_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAccessesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_86) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_86).into()),
        );
    }
    if let Some(var_87) = &input.next_token {
        object.key("NextToken").string(var_87);
    }
    if let Some(var_88) = &input.server_id {
        object.key("ServerId").string(var_88);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_executions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListExecutionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_89) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_89).into()),
        );
    }
    if let Some(var_90) = &input.next_token {
        object.key("NextToken").string(var_90);
    }
    if let Some(var_91) = &input.workflow_id {
        object.key("WorkflowId").string(var_91);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_security_policies_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSecurityPoliciesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_92) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_92).into()),
        );
    }
    if let Some(var_93) = &input.next_token {
        object.key("NextToken").string(var_93);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_servers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListServersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_94) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_94).into()),
        );
    }
    if let Some(var_95) = &input.next_token {
        object.key("NextToken").string(var_95);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_96) = &input.arn {
        object.key("Arn").string(var_96);
    }
    if let Some(var_97) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_97).into()),
        );
    }
    if let Some(var_98) = &input.next_token {
        object.key("NextToken").string(var_98);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_users_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListUsersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_99) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_99).into()),
        );
    }
    if let Some(var_100) = &input.next_token {
        object.key("NextToken").string(var_100);
    }
    if let Some(var_101) = &input.server_id {
        object.key("ServerId").string(var_101);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_workflows_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListWorkflowsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_102) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_102).into()),
        );
    }
    if let Some(var_103) = &input.next_token {
        object.key("NextToken").string(var_103);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_send_workflow_step_state_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendWorkflowStepStateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_104) = &input.workflow_id {
        object.key("WorkflowId").string(var_104);
    }
    if let Some(var_105) = &input.execution_id {
        object.key("ExecutionId").string(var_105);
    }
    if let Some(var_106) = &input.token {
        object.key("Token").string(var_106);
    }
    if let Some(var_107) = &input.status {
        object.key("Status").string(var_107.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_server_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartServerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_108) = &input.server_id {
        object.key("ServerId").string(var_108);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_server_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopServerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_109) = &input.server_id {
        object.key("ServerId").string(var_109);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_110) = &input.arn {
        object.key("Arn").string(var_110);
    }
    if let Some(var_111) = &input.tags {
        let mut array_112 = object.key("Tags").start_array();
        for item_113 in var_111 {
            {
                let mut object_114 = array_112.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_114, item_113)?;
                object_114.finish();
            }
        }
        array_112.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_test_identity_provider_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TestIdentityProviderInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_115) = &input.server_id {
        object.key("ServerId").string(var_115);
    }
    if let Some(var_116) = &input.server_protocol {
        object.key("ServerProtocol").string(var_116.as_str());
    }
    if let Some(var_117) = &input.source_ip {
        object.key("SourceIp").string(var_117);
    }
    if let Some(var_118) = &input.user_name {
        object.key("UserName").string(var_118);
    }
    if let Some(var_119) = &input.user_password {
        object.key("UserPassword").string(var_119);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_120) = &input.arn {
        object.key("Arn").string(var_120);
    }
    if let Some(var_121) = &input.tag_keys {
        let mut array_122 = object.key("TagKeys").start_array();
        for item_123 in var_121 {
            {
                array_122.value().string(item_123);
            }
        }
        array_122.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_access_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAccessInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_124) = &input.home_directory {
        object.key("HomeDirectory").string(var_124);
    }
    if let Some(var_125) = &input.home_directory_type {
        object.key("HomeDirectoryType").string(var_125.as_str());
    }
    if let Some(var_126) = &input.home_directory_mappings {
        let mut array_127 = object.key("HomeDirectoryMappings").start_array();
        for item_128 in var_126 {
            {
                let mut object_129 = array_127.value().start_object();
                crate::json_ser::serialize_structure_crate_model_home_directory_map_entry(
                    &mut object_129,
                    item_128,
                )?;
                object_129.finish();
            }
        }
        array_127.finish();
    }
    if let Some(var_130) = &input.policy {
        object.key("Policy").string(var_130);
    }
    if let Some(var_131) = &input.posix_profile {
        let mut object_132 = object.key("PosixProfile").start_object();
        crate::json_ser::serialize_structure_crate_model_posix_profile(&mut object_132, var_131)?;
        object_132.finish();
    }
    if let Some(var_133) = &input.role {
        object.key("Role").string(var_133);
    }
    if let Some(var_134) = &input.server_id {
        object.key("ServerId").string(var_134);
    }
    if let Some(var_135) = &input.external_id {
        object.key("ExternalId").string(var_135);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_server_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateServerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_136) = &input.certificate {
        object.key("Certificate").string(var_136);
    }
    if let Some(var_137) = &input.protocol_details {
        let mut object_138 = object.key("ProtocolDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_protocol_details(
            &mut object_138,
            var_137,
        )?;
        object_138.finish();
    }
    if let Some(var_139) = &input.endpoint_details {
        let mut object_140 = object.key("EndpointDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_details(
            &mut object_140,
            var_139,
        )?;
        object_140.finish();
    }
    if let Some(var_141) = &input.endpoint_type {
        object.key("EndpointType").string(var_141.as_str());
    }
    if let Some(var_142) = &input.host_key {
        object.key("HostKey").string(var_142);
    }
    if let Some(var_143) = &input.identity_provider_details {
        let mut object_144 = object.key("IdentityProviderDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_identity_provider_details(
            &mut object_144,
            var_143,
        )?;
        object_144.finish();
    }
    if let Some(var_145) = &input.logging_role {
        object.key("LoggingRole").string(var_145);
    }
    if let Some(var_146) = &input.protocols {
        let mut array_147 = object.key("Protocols").start_array();
        for item_148 in var_146 {
            {
                array_147.value().string(item_148.as_str());
            }
        }
        array_147.finish();
    }
    if let Some(var_149) = &input.security_policy_name {
        object.key("SecurityPolicyName").string(var_149);
    }
    if let Some(var_150) = &input.server_id {
        object.key("ServerId").string(var_150);
    }
    if let Some(var_151) = &input.workflow_details {
        let mut object_152 = object.key("WorkflowDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_workflow_details(
            &mut object_152,
            var_151,
        )?;
        object_152.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_153) = &input.home_directory {
        object.key("HomeDirectory").string(var_153);
    }
    if let Some(var_154) = &input.home_directory_type {
        object.key("HomeDirectoryType").string(var_154.as_str());
    }
    if let Some(var_155) = &input.home_directory_mappings {
        let mut array_156 = object.key("HomeDirectoryMappings").start_array();
        for item_157 in var_155 {
            {
                let mut object_158 = array_156.value().start_object();
                crate::json_ser::serialize_structure_crate_model_home_directory_map_entry(
                    &mut object_158,
                    item_157,
                )?;
                object_158.finish();
            }
        }
        array_156.finish();
    }
    if let Some(var_159) = &input.policy {
        object.key("Policy").string(var_159);
    }
    if let Some(var_160) = &input.posix_profile {
        let mut object_161 = object.key("PosixProfile").start_object();
        crate::json_ser::serialize_structure_crate_model_posix_profile(&mut object_161, var_160)?;
        object_161.finish();
    }
    if let Some(var_162) = &input.role {
        object.key("Role").string(var_162);
    }
    if let Some(var_163) = &input.server_id {
        object.key("ServerId").string(var_163);
    }
    if let Some(var_164) = &input.user_name {
        object.key("UserName").string(var_164);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_home_directory_map_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HomeDirectoryMapEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_165) = &input.entry {
        object.key("Entry").string(var_165);
    }
    if let Some(var_166) = &input.target {
        object.key("Target").string(var_166);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_posix_profile(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PosixProfile,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_167) = &input.uid {
        object.key("Uid").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_167).into()),
        );
    }
    if let Some(var_168) = &input.gid {
        object.key("Gid").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_168).into()),
        );
    }
    if let Some(var_169) = &input.secondary_gids {
        let mut array_170 = object.key("SecondaryGids").start_array();
        for item_171 in var_169 {
            {
                array_170.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*item_171).into()),
                );
            }
        }
        array_170.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_endpoint_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EndpointDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_172) = &input.address_allocation_ids {
        let mut array_173 = object.key("AddressAllocationIds").start_array();
        for item_174 in var_172 {
            {
                array_173.value().string(item_174);
            }
        }
        array_173.finish();
    }
    if let Some(var_175) = &input.subnet_ids {
        let mut array_176 = object.key("SubnetIds").start_array();
        for item_177 in var_175 {
            {
                array_176.value().string(item_177);
            }
        }
        array_176.finish();
    }
    if let Some(var_178) = &input.vpc_endpoint_id {
        object.key("VpcEndpointId").string(var_178);
    }
    if let Some(var_179) = &input.vpc_id {
        object.key("VpcId").string(var_179);
    }
    if let Some(var_180) = &input.security_group_ids {
        let mut array_181 = object.key("SecurityGroupIds").start_array();
        for item_182 in var_180 {
            {
                array_181.value().string(item_182);
            }
        }
        array_181.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_identity_provider_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IdentityProviderDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_183) = &input.url {
        object.key("Url").string(var_183);
    }
    if let Some(var_184) = &input.invocation_role {
        object.key("InvocationRole").string(var_184);
    }
    if let Some(var_185) = &input.directory_id {
        object.key("DirectoryId").string(var_185);
    }
    if let Some(var_186) = &input.function {
        object.key("Function").string(var_186);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_protocol_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProtocolDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_187) = &input.passive_ip {
        object.key("PassiveIp").string(var_187);
    }
    if let Some(var_188) = &input.tls_session_resumption_mode {
        object
            .key("TlsSessionResumptionMode")
            .string(var_188.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_189) = &input.key {
        object.key("Key").string(var_189);
    }
    if let Some(var_190) = &input.value {
        object.key("Value").string(var_190);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_workflow_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WorkflowDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_191) = &input.on_upload {
        let mut array_192 = object.key("OnUpload").start_array();
        for item_193 in var_191 {
            {
                let mut object_194 = array_192.value().start_object();
                crate::json_ser::serialize_structure_crate_model_workflow_detail(
                    &mut object_194,
                    item_193,
                )?;
                object_194.finish();
            }
        }
        array_192.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_workflow_step(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WorkflowStep,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_195) = &input.r#type {
        object.key("Type").string(var_195.as_str());
    }
    if let Some(var_196) = &input.copy_step_details {
        let mut object_197 = object.key("CopyStepDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_copy_step_details(
            &mut object_197,
            var_196,
        )?;
        object_197.finish();
    }
    if let Some(var_198) = &input.custom_step_details {
        let mut object_199 = object.key("CustomStepDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_step_details(
            &mut object_199,
            var_198,
        )?;
        object_199.finish();
    }
    if let Some(var_200) = &input.delete_step_details {
        let mut object_201 = object.key("DeleteStepDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_delete_step_details(
            &mut object_201,
            var_200,
        )?;
        object_201.finish();
    }
    if let Some(var_202) = &input.tag_step_details {
        let mut object_203 = object.key("TagStepDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_tag_step_details(
            &mut object_203,
            var_202,
        )?;
        object_203.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_workflow_detail(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WorkflowDetail,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_204) = &input.workflow_id {
        object.key("WorkflowId").string(var_204);
    }
    if let Some(var_205) = &input.execution_role {
        object.key("ExecutionRole").string(var_205);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_copy_step_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CopyStepDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_206) = &input.name {
        object.key("Name").string(var_206);
    }
    if let Some(var_207) = &input.destination_file_location {
        let mut object_208 = object.key("DestinationFileLocation").start_object();
        crate::json_ser::serialize_structure_crate_model_input_file_location(
            &mut object_208,
            var_207,
        )?;
        object_208.finish();
    }
    if let Some(var_209) = &input.overwrite_existing {
        object.key("OverwriteExisting").string(var_209.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_step_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomStepDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_210) = &input.name {
        object.key("Name").string(var_210);
    }
    if let Some(var_211) = &input.target {
        object.key("Target").string(var_211);
    }
    if let Some(var_212) = &input.timeout_seconds {
        object.key("TimeoutSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_212).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_delete_step_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeleteStepDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_213) = &input.name {
        object.key("Name").string(var_213);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag_step_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TagStepDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_214) = &input.name {
        object.key("Name").string(var_214);
    }
    if let Some(var_215) = &input.tags {
        let mut array_216 = object.key("Tags").start_array();
        for item_217 in var_215 {
            {
                let mut object_218 = array_216.value().start_object();
                crate::json_ser::serialize_structure_crate_model_s3_tag(&mut object_218, item_217)?;
                object_218.finish();
            }
        }
        array_216.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_input_file_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputFileLocation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_219) = &input.s3_file_location {
        let mut object_220 = object.key("S3FileLocation").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_input_file_location(
            &mut object_220,
            var_219,
        )?;
        object_220.finish();
    }
    if let Some(var_221) = &input.efs_file_location {
        let mut object_222 = object.key("EfsFileLocation").start_object();
        crate::json_ser::serialize_structure_crate_model_efs_file_location(
            &mut object_222,
            var_221,
        )?;
        object_222.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_223) = &input.key {
        object.key("Key").string(var_223);
    }
    if let Some(var_224) = &input.value {
        object.key("Value").string(var_224);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_input_file_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3InputFileLocation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_225) = &input.bucket {
        object.key("Bucket").string(var_225);
    }
    if let Some(var_226) = &input.key {
        object.key("Key").string(var_226);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_efs_file_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EfsFileLocation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_227) = &input.file_system_id {
        object.key("FileSystemId").string(var_227);
    }
    if let Some(var_228) = &input.path {
        object.key("Path").string(var_228);
    }
    Ok(())
}
