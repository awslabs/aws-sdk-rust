// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_server_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_server::CreateServerInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.certificate {
        object.key("Certificate").string(var_1.as_str());
    }
    if let Some(var_2) = &input.domain {
        object.key("Domain").string(var_2.as_str());
    }
    if let Some(var_3) = &input.endpoint_details {
        #[allow(unused_mut)]
        let mut object_4 = object.key("EndpointDetails").start_object();
        crate::protocol_serde::shape_endpoint_details::ser_endpoint_details(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.endpoint_type {
        object.key("EndpointType").string(var_5.as_str());
    }
    if let Some(var_6) = &input.host_key {
        object.key("HostKey").string(var_6.as_str());
    }
    if let Some(var_7) = &input.identity_provider_details {
        #[allow(unused_mut)]
        let mut object_8 = object.key("IdentityProviderDetails").start_object();
        crate::protocol_serde::shape_identity_provider_details::ser_identity_provider_details(
            &mut object_8,
            var_7,
        )?;
        object_8.finish();
    }
    if let Some(var_9) = &input.identity_provider_type {
        object.key("IdentityProviderType").string(var_9.as_str());
    }
    if let Some(var_10) = &input.logging_role {
        object.key("LoggingRole").string(var_10.as_str());
    }
    if let Some(var_11) = &input.post_authentication_login_banner {
        object
            .key("PostAuthenticationLoginBanner")
            .string(var_11.as_str());
    }
    if let Some(var_12) = &input.pre_authentication_login_banner {
        object
            .key("PreAuthenticationLoginBanner")
            .string(var_12.as_str());
    }
    if let Some(var_13) = &input.protocols {
        let mut array_14 = object.key("Protocols").start_array();
        for item_15 in var_13 {
            {
                array_14.value().string(item_15.as_str());
            }
        }
        array_14.finish();
    }
    if let Some(var_16) = &input.protocol_details {
        #[allow(unused_mut)]
        let mut object_17 = object.key("ProtocolDetails").start_object();
        crate::protocol_serde::shape_protocol_details::ser_protocol_details(
            &mut object_17,
            var_16,
        )?;
        object_17.finish();
    }
    if let Some(var_18) = &input.security_policy_name {
        object.key("SecurityPolicyName").string(var_18.as_str());
    }
    if let Some(var_19) = &input.tags {
        let mut array_20 = object.key("Tags").start_array();
        for item_21 in var_19 {
            {
                #[allow(unused_mut)]
                let mut object_22 = array_20.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_22, item_21)?;
                object_22.finish();
            }
        }
        array_20.finish();
    }
    if let Some(var_23) = &input.workflow_details {
        #[allow(unused_mut)]
        let mut object_24 = object.key("WorkflowDetails").start_object();
        crate::protocol_serde::shape_workflow_details::ser_workflow_details(
            &mut object_24,
            var_23,
        )?;
        object_24.finish();
    }
    Ok(())
}
