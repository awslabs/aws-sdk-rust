// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_server_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_server::UpdateServerInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.certificate {
        object.key("Certificate").string(var_1.as_str());
    }
    if let Some(var_2) = &input.protocol_details {
        #[allow(unused_mut)]
        let mut object_3 = object.key("ProtocolDetails").start_object();
        crate::protocol_serde::shape_protocol_details::ser_protocol_details(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.endpoint_details {
        #[allow(unused_mut)]
        let mut object_5 = object.key("EndpointDetails").start_object();
        crate::protocol_serde::shape_endpoint_details::ser_endpoint_details(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.endpoint_type {
        object.key("EndpointType").string(var_6.as_str());
    }
    if let Some(var_7) = &input.host_key {
        object.key("HostKey").string(var_7.as_str());
    }
    if let Some(var_8) = &input.identity_provider_details {
        #[allow(unused_mut)]
        let mut object_9 = object.key("IdentityProviderDetails").start_object();
        crate::protocol_serde::shape_identity_provider_details::ser_identity_provider_details(
            &mut object_9,
            var_8,
        )?;
        object_9.finish();
    }
    if let Some(var_10) = &input.logging_role {
        object.key("LoggingRole").string(var_10.as_str());
    }
    if let Some(var_11) = &input.post_authentication_login_banner {
        object
            .key("PostAuthenticationLoginBanner")
            .string(var_11.as_str());
    }
    if let Some(var_12) = &input.pre_authentication_login_banner {
        object
            .key("PreAuthenticationLoginBanner")
            .string(var_12.as_str());
    }
    if let Some(var_13) = &input.protocols {
        let mut array_14 = object.key("Protocols").start_array();
        for item_15 in var_13 {
            {
                array_14.value().string(item_15.as_str());
            }
        }
        array_14.finish();
    }
    if let Some(var_16) = &input.security_policy_name {
        object.key("SecurityPolicyName").string(var_16.as_str());
    }
    if let Some(var_17) = &input.server_id {
        object.key("ServerId").string(var_17.as_str());
    }
    if let Some(var_18) = &input.workflow_details {
        #[allow(unused_mut)]
        let mut object_19 = object.key("WorkflowDetails").start_object();
        crate::protocol_serde::shape_workflow_details::ser_workflow_details(
            &mut object_19,
            var_18,
        )?;
        object_19.finish();
    }
    Ok(())
}
