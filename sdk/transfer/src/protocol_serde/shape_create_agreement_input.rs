// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_agreement_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_agreement::CreateAgreementInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.description {
        object.key("Description").string(var_1.as_str());
    }
    if let Some(var_2) = &input.server_id {
        object.key("ServerId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.local_profile_id {
        object.key("LocalProfileId").string(var_3.as_str());
    }
    if let Some(var_4) = &input.partner_profile_id {
        object.key("PartnerProfileId").string(var_4.as_str());
    }
    if let Some(var_5) = &input.base_directory {
        object.key("BaseDirectory").string(var_5.as_str());
    }
    if let Some(var_6) = &input.access_role {
        object.key("AccessRole").string(var_6.as_str());
    }
    if let Some(var_7) = &input.status {
        object.key("Status").string(var_7.as_str());
    }
    if let Some(var_8) = &input.tags {
        let mut array_9 = object.key("Tags").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    Ok(())
}
