// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_connector_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_connector::UpdateConnectorInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.connector_id {
        object.key("ConnectorId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.url {
        object.key("Url").string(var_2.as_str());
    }
    if let Some(var_3) = &input.as2_config {
        #[allow(unused_mut)]
        let mut object_4 = object.key("As2Config").start_object();
        crate::protocol_serde::shape_as2_connector_config::ser_as2_connector_config(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.access_role {
        object.key("AccessRole").string(var_5.as_str());
    }
    if let Some(var_6) = &input.logging_role {
        object.key("LoggingRole").string(var_6.as_str());
    }
    if let Some(var_7) = &input.sftp_config {
        #[allow(unused_mut)]
        let mut object_8 = object.key("SftpConfig").start_object();
        crate::protocol_serde::shape_sftp_connector_config::ser_sftp_connector_config(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.security_policy_name {
        object.key("SecurityPolicyName").string(var_9.as_str());
    }
    if let Some(var_10) = &input.egress_config {
        #[allow(unused_mut)]
        let mut object_11 = object.key("EgressConfig").start_object();
        crate::protocol_serde::shape_update_connector_egress_config::ser_update_connector_egress_config(&mut object_11, var_10)?;
        object_11.finish();
    }
    Ok(())
}
