// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_import_certificate_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::import_certificate::ImportCertificateInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.usage {
        object.key("Usage").string(var_1.as_str());
    }
    if let Some(var_2) = &input.certificate {
        object.key("Certificate").string(var_2.as_str());
    }
    if let Some(var_3) = &input.certificate_chain {
        object.key("CertificateChain").string(var_3.as_str());
    }
    if let Some(var_4) = &input.private_key {
        object.key("PrivateKey").string(var_4.as_str());
    }
    if let Some(var_5) = &input.active_date {
        object
            .key("ActiveDate")
            .date_time(var_5, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_6) = &input.inactive_date {
        object
            .key("InactiveDate")
            .date_time(var_6, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_7) = &input.description {
        object.key("Description").string(var_7.as_str());
    }
    if let Some(var_8) = &input.tags {
        let mut array_9 = object.key("Tags").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    Ok(())
}
