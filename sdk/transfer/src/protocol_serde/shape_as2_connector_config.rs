// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_as2_connector_config(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::As2ConnectorConfig,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.local_profile_id {
        object.key("LocalProfileId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.partner_profile_id {
        object.key("PartnerProfileId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.message_subject {
        object.key("MessageSubject").string(var_3.as_str());
    }
    if let Some(var_4) = &input.compression {
        object.key("Compression").string(var_4.as_str());
    }
    if let Some(var_5) = &input.encryption_algorithm {
        object.key("EncryptionAlgorithm").string(var_5.as_str());
    }
    if let Some(var_6) = &input.signing_algorithm {
        object.key("SigningAlgorithm").string(var_6.as_str());
    }
    if let Some(var_7) = &input.mdn_signing_algorithm {
        object.key("MdnSigningAlgorithm").string(var_7.as_str());
    }
    if let Some(var_8) = &input.mdn_response {
        object.key("MdnResponse").string(var_8.as_str());
    }
    if let Some(var_9) = &input.basic_auth_secret_id {
        object.key("BasicAuthSecretId").string(var_9.as_str());
    }
    Ok(())
}

pub(crate) fn de_as2_connector_config<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::As2ConnectorConfig>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::As2ConnectorConfigBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "LocalProfileId" => {
                            builder = builder.set_local_profile_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "PartnerProfileId" => {
                            builder = builder.set_partner_profile_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "MessageSubject" => {
                            builder = builder.set_message_subject(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Compression" => {
                            builder = builder.set_compression(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CompressionEnum::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "EncryptionAlgorithm" => {
                            builder = builder.set_encryption_algorithm(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::EncryptionAlg::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "SigningAlgorithm" => {
                            builder = builder.set_signing_algorithm(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::SigningAlg::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "MdnSigningAlgorithm" => {
                            builder = builder.set_mdn_signing_algorithm(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::MdnSigningAlg::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "MdnResponse" => {
                            builder = builder.set_mdn_response(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::MdnResponse::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "BasicAuthSecretId" => {
                            builder = builder.set_basic_auth_secret_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
