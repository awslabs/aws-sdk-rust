// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateWorkflow`](crate::client::fluent_builders::CreateWorkflow) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateWorkflow::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateWorkflow::set_description): <p>A textual description for the workflow.</p>
    ///   - [`steps(Vec<WorkflowStep>)`](crate::client::fluent_builders::CreateWorkflow::steps) / [`set_steps(Option<Vec<WorkflowStep>>)`](crate::client::fluent_builders::CreateWorkflow::set_steps): <p>Specifies the details for the steps that are in the specified workflow.</p>  <p> The <code>TYPE</code> specifies which of the following actions is being taken for this step. </p>  <ul>   <li> <p> <i>COPY</i>: Copy the file to another location.</p> </li>   <li> <p> <i>CUSTOM</i>: Perform a custom step with an Lambda function target.</p> </li>   <li> <p> <i>DELETE</i>: Delete the file.</p> </li>   <li> <p> <i>TAG</i>: Add a tag to the file.</p> </li>  </ul> <note>   <p> Currently, copying and tagging are supported only on S3. </p>  </note>  <p> For file location, you specify either the S3 bucket and key, or the EFS file system ID and path. </p>
    ///   - [`on_exception_steps(Vec<WorkflowStep>)`](crate::client::fluent_builders::CreateWorkflow::on_exception_steps) / [`set_on_exception_steps(Option<Vec<WorkflowStep>>)`](crate::client::fluent_builders::CreateWorkflow::set_on_exception_steps): <p>Specifies the steps (actions) to take if errors are encountered during execution of the workflow.</p> <note>   <p>For custom steps, the lambda function needs to send <code>FAILURE</code> to the call back API to kick off the exception steps. Additionally, if the lambda does not send <code>SUCCESS</code> before it times out, the exception steps are executed.</p>  </note>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateWorkflow::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateWorkflow::set_tags): <p>Key-value pairs that can be used to group and search for workflows. Tags are metadata attached to workflows for any purpose.</p>
    /// - On success, responds with [`CreateWorkflowOutput`](crate::output::CreateWorkflowOutput) with field(s):
    ///   - [`workflow_id(Option<String>)`](crate::output::CreateWorkflowOutput::workflow_id): <p>A unique identifier for the workflow.</p>
    /// - On failure, responds with [`SdkError<CreateWorkflowError>`](crate::error::CreateWorkflowError)
    pub fn create_workflow(&self) -> crate::client::fluent_builders::CreateWorkflow {
        crate::client::fluent_builders::CreateWorkflow::new(self.handle.clone())
    }
}
