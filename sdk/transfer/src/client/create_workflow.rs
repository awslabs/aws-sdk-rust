// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateWorkflow`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`description(impl Into<String>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::set_description):<br>required: **false**<br><p>A textual description for the workflow.</p><br>
    ///   - [`steps(WorkflowStep)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::steps) / [`set_steps(Option<Vec::<WorkflowStep>>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::set_steps):<br>required: **true**<br><p>Specifies the details for the steps that are in the specified workflow.</p>  <p> The <code>TYPE</code> specifies which of the following actions is being taken for this step. </p>  <ul>   <li> <p> <b> <code>COPY</code> </b> - Copy the file to another location.</p> </li>   <li> <p> <b> <code>CUSTOM</code> </b> - Perform a custom step with an Lambda function target.</p> </li>   <li> <p> <b> <code>DECRYPT</code> </b> - Decrypt a file that was encrypted before it was uploaded.</p> </li>   <li> <p> <b> <code>DELETE</code> </b> - Delete the file.</p> </li>   <li> <p> <b> <code>TAG</code> </b> - Add a tag to the file.</p> </li>  </ul> <note>   <p> Currently, copying and tagging are supported only on S3. </p>  </note>  <p> For file location, you specify either the Amazon S3 bucket and key, or the Amazon EFS file system ID and path. </p><br>
    ///   - [`on_exception_steps(WorkflowStep)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::on_exception_steps) / [`set_on_exception_steps(Option<Vec::<WorkflowStep>>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::set_on_exception_steps):<br>required: **false**<br><p>Specifies the steps (actions) to take if errors are encountered during execution of the workflow.</p> <note>   <p>For custom steps, the Lambda function needs to send <code>FAILURE</code> to the call back API to kick off the exception steps. Additionally, if the Lambda does not send <code>SUCCESS</code> before it times out, the exception steps are executed.</p>  </note><br>
    ///   - [`tags(Tag)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::tags) / [`set_tags(Option<Vec::<Tag>>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::set_tags):<br>required: **false**<br><p>Key-value pairs that can be used to group and search for workflows. Tags are metadata attached to workflows for any purpose.</p><br>
    /// - On success, responds with [`CreateWorkflowOutput`](crate::operation::create_workflow::CreateWorkflowOutput) with field(s):
    ///   - [`workflow_id(String)`](crate::operation::create_workflow::CreateWorkflowOutput::workflow_id): <p>A unique identifier for the workflow.</p>
    /// - On failure, responds with [`SdkError<CreateWorkflowError>`](crate::operation::create_workflow::CreateWorkflowError)
    pub fn create_workflow(&self) -> crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder {
        crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::new(self.handle.clone())
    }
}
