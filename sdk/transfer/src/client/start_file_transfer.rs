// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`StartFileTransfer`](crate::operation::start_file_transfer::builders::StartFileTransferFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`connector_id(impl Into<String>)`](crate::operation::start_file_transfer::builders::StartFileTransferFluentBuilder::connector_id) / [`set_connector_id(Option<String>)`](crate::operation::start_file_transfer::builders::StartFileTransferFluentBuilder::set_connector_id):<br>required: **true**<br><p>The unique identifier for the connector.</p><br>
    ///   - [`send_file_paths(impl Into<String>)`](crate::operation::start_file_transfer::builders::StartFileTransferFluentBuilder::send_file_paths) / [`set_send_file_paths(Option<Vec::<String>>)`](crate::operation::start_file_transfer::builders::StartFileTransferFluentBuilder::set_send_file_paths):<br>required: **false**<br><p>One or more source paths for the Amazon S3 storage. Each string represents a source file path for one outbound file transfer. For example, <code> <i>DOC-EXAMPLE-BUCKET</i>/<i>myfile.txt</i> </code>.</p> <note>   <p>Replace <code> <i>DOC-EXAMPLE-BUCKET</i> </code> with one of your actual buckets.</p>  </note><br>
    ///   - [`retrieve_file_paths(impl Into<String>)`](crate::operation::start_file_transfer::builders::StartFileTransferFluentBuilder::retrieve_file_paths) / [`set_retrieve_file_paths(Option<Vec::<String>>)`](crate::operation::start_file_transfer::builders::StartFileTransferFluentBuilder::set_retrieve_file_paths):<br>required: **false**<br><p>One or more source paths for the partner's SFTP server. Each string represents a source file path for one inbound file transfer.</p><br>
    ///   - [`local_directory_path(impl Into<String>)`](crate::operation::start_file_transfer::builders::StartFileTransferFluentBuilder::local_directory_path) / [`set_local_directory_path(Option<String>)`](crate::operation::start_file_transfer::builders::StartFileTransferFluentBuilder::set_local_directory_path):<br>required: **false**<br><p>For an inbound transfer, the <code>LocaDirectoryPath</code> specifies the destination for one or more files that are transferred from the partner's SFTP server.</p><br>
    ///   - [`remote_directory_path(impl Into<String>)`](crate::operation::start_file_transfer::builders::StartFileTransferFluentBuilder::remote_directory_path) / [`set_remote_directory_path(Option<String>)`](crate::operation::start_file_transfer::builders::StartFileTransferFluentBuilder::set_remote_directory_path):<br>required: **false**<br><p>For an outbound transfer, the <code>RemoteDirectoryPath</code> specifies the destination for one or more files that are transferred to the partner's SFTP server. If you don't specify a <code>RemoteDirectoryPath</code>, the destination for transferred files is the SFTP user's home directory.</p><br>
    /// - On success, responds with [`StartFileTransferOutput`](crate::operation::start_file_transfer::StartFileTransferOutput) with field(s):
    ///   - [`transfer_id(String)`](crate::operation::start_file_transfer::StartFileTransferOutput::transfer_id): <p>Returns the unique identifier for the file transfer.</p>
    /// - On failure, responds with [`SdkError<StartFileTransferError>`](crate::operation::start_file_transfer::StartFileTransferError)
    pub fn start_file_transfer(&self) -> crate::operation::start_file_transfer::builders::StartFileTransferFluentBuilder {
        crate::operation::start_file_transfer::builders::StartFileTransferFluentBuilder::new(self.handle.clone())
    }
}
