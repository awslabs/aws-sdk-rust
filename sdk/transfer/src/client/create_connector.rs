// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateConnector`](crate::client::fluent_builders::CreateConnector) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`url(impl Into<String>)`](crate::client::fluent_builders::CreateConnector::url) / [`set_url(Option<String>)`](crate::client::fluent_builders::CreateConnector::set_url): <p>The URL of the partner's AS2 endpoint.</p>
    ///   - [`as2_config(As2ConnectorConfig)`](crate::client::fluent_builders::CreateConnector::as2_config) / [`set_as2_config(Option<As2ConnectorConfig>)`](crate::client::fluent_builders::CreateConnector::set_as2_config): <p>A structure that contains the parameters for a connector object.</p>
    ///   - [`access_role(impl Into<String>)`](crate::client::fluent_builders::CreateConnector::access_role) / [`set_access_role(Option<String>)`](crate::client::fluent_builders::CreateConnector::set_access_role): <p>With AS2, you can send files by calling <code>StartFileTransfer</code> and specifying the file paths in the request parameter, <code>SendFilePaths</code>. We use the fileâ€™s parent directory (for example, for <code>--send-file-paths /bucket/dir/file.txt</code>, parent directory is <code>/bucket/dir/</code>) to temporarily store a processed AS2 message file, store the MDN when we receive them from the partner, and write a final JSON file containing relevant metadata of the transmission. So, the <code>AccessRole</code> needs to provide read and write access to the parent directory of the file location used in the <code>StartFileTransfer</code> request. Additionally, you need to provide read and write access to the parent directory of the files that you intend to send with <code>StartFileTransfer</code>.</p>
    ///   - [`logging_role(impl Into<String>)`](crate::client::fluent_builders::CreateConnector::logging_role) / [`set_logging_role(Option<String>)`](crate::client::fluent_builders::CreateConnector::set_logging_role): <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that allows a connector to turn on CloudWatch logging for Amazon S3 events. When set, you can view connector activity in your CloudWatch logs.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateConnector::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateConnector::set_tags): <p>Key-value pairs that can be used to group and search for connectors. Tags are metadata attached to connectors for any purpose.</p>
    /// - On success, responds with [`CreateConnectorOutput`](crate::output::CreateConnectorOutput) with field(s):
    ///   - [`connector_id(Option<String>)`](crate::output::CreateConnectorOutput::connector_id): <p>The unique identifier for the connector, returned after the API call succeeds.</p>
    /// - On failure, responds with [`SdkError<CreateConnectorError>`](crate::error::CreateConnectorError)
    pub fn create_connector(&self) -> crate::client::fluent_builders::CreateConnector {
        crate::client::fluent_builders::CreateConnector::new(self.handle.clone())
    }
}
