// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListAgreements`](crate::client::fluent_builders::ListAgreements) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListAgreements::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListAgreements::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListAgreements::set_max_results): <p>The maximum number of agreements to return.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListAgreements::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListAgreements::set_next_token): <p>When you can get additional results from the <code>ListAgreements</code> call, a <code>NextToken</code> parameter is returned in the output. You can then pass in a subsequent command to the <code>NextToken</code> parameter to continue listing additional agreements.</p>
    ///   - [`server_id(impl Into<String>)`](crate::client::fluent_builders::ListAgreements::server_id) / [`set_server_id(Option<String>)`](crate::client::fluent_builders::ListAgreements::set_server_id): <p>The identifier of the server for which you want a list of agreements.</p>
    /// - On success, responds with [`ListAgreementsOutput`](crate::output::ListAgreementsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListAgreementsOutput::next_token): <p>Returns a token that you can use to call <code>ListAgreements</code> again and receive additional results, if there are any.</p>
    ///   - [`agreements(Option<Vec<ListedAgreement>>)`](crate::output::ListAgreementsOutput::agreements): <p>Returns an array, where each item contains the details of an agreement.</p>
    /// - On failure, responds with [`SdkError<ListAgreementsError>`](crate::error::ListAgreementsError)
    pub fn list_agreements(&self) -> crate::client::fluent_builders::ListAgreements {
        crate::client::fluent_builders::ListAgreements::new(self.handle.clone())
    }
}
