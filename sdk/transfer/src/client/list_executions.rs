// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListExecutions`](crate::client::fluent_builders::ListExecutions) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListExecutions::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListExecutions::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListExecutions::set_max_results): <p>Specifies the maximum number of executions to return.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListExecutions::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListExecutions::set_next_token): <p> <code>ListExecutions</code> returns the <code>NextToken</code> parameter in the output. You can then pass the <code>NextToken</code> parameter in a subsequent command to continue listing additional executions.</p>  <p> This is useful for pagination, for instance. If you have 100 executions for a workflow, you might only want to list first 10. If so, call the API by specifying the <code>max-results</code>: </p>  <p> <code>aws transfer list-executions --max-results 10</code> </p>  <p> This returns details for the first 10 executions, as well as the pointer (<code>NextToken</code>) to the eleventh execution. You can now call the API again, supplying the <code>NextToken</code> value you received: </p>  <p> <code>aws transfer list-executions --max-results 10 --next-token $somePointerReturnedFromPreviousListResult</code> </p>  <p> This call returns the next 10 executions, the 11th through the 20th. You can then repeat the call until the details for all 100 executions have been returned. </p>
    ///   - [`workflow_id(impl Into<String>)`](crate::client::fluent_builders::ListExecutions::workflow_id) / [`set_workflow_id(Option<String>)`](crate::client::fluent_builders::ListExecutions::set_workflow_id): <p>A unique identifier for the workflow.</p>
    /// - On success, responds with [`ListExecutionsOutput`](crate::output::ListExecutionsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListExecutionsOutput::next_token): <p> <code>ListExecutions</code> returns the <code>NextToken</code> parameter in the output. You can then pass the <code>NextToken</code> parameter in a subsequent command to continue listing additional executions.</p>
    ///   - [`workflow_id(Option<String>)`](crate::output::ListExecutionsOutput::workflow_id): <p>A unique identifier for the workflow.</p>
    ///   - [`executions(Option<Vec<ListedExecution>>)`](crate::output::ListExecutionsOutput::executions): <p>Returns the details for each execution.</p>  <ul>   <li> <p> <b>NextToken</b>: returned from a call to several APIs, you can use pass it to a subsequent command to continue listing additional executions.</p> </li>   <li> <p> <b>StartTime</b>: timestamp indicating when the execution began.</p> </li>   <li> <p> <b>Executions</b>: details of the execution, including the execution ID, initial file location, and Service metadata.</p> </li>   <li> <p> <b>Status</b>: one of the following values: <code>IN_PROGRESS</code>, <code>COMPLETED</code>, <code>EXCEPTION</code>, <code>HANDLING_EXEPTION</code>. </p> </li>  </ul>
    /// - On failure, responds with [`SdkError<ListExecutionsError>`](crate::error::ListExecutionsError)
    pub fn list_executions(&self) -> crate::client::fluent_builders::ListExecutions {
        crate::client::fluent_builders::ListExecutions::new(self.handle.clone())
    }
}
