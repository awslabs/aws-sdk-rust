// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn internal_service_error_correct_errors(
    mut builder: crate::types::error::builders::InternalServiceErrorBuilder,
) -> crate::types::error::builders::InternalServiceErrorBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn invalid_request_exception_correct_errors(
    mut builder: crate::types::error::builders::InvalidRequestExceptionBuilder,
) -> crate::types::error::builders::InvalidRequestExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_exists_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceExistsExceptionBuilder,
) -> crate::types::error::builders::ResourceExistsExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource.is_none() {
        builder.resource = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource.is_none() {
        builder.resource = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn create_access_output_output_correct_errors(
    mut builder: crate::operation::create_access::builders::CreateAccessOutputBuilder,
) -> crate::operation::create_access::builders::CreateAccessOutputBuilder {
    if builder.server_id.is_none() {
        builder.server_id = Some(Default::default())
    }
    if builder.external_id.is_none() {
        builder.external_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_agreement_output_output_correct_errors(
    mut builder: crate::operation::create_agreement::builders::CreateAgreementOutputBuilder,
) -> crate::operation::create_agreement::builders::CreateAgreementOutputBuilder {
    if builder.agreement_id.is_none() {
        builder.agreement_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_connector_output_output_correct_errors(
    mut builder: crate::operation::create_connector::builders::CreateConnectorOutputBuilder,
) -> crate::operation::create_connector::builders::CreateConnectorOutputBuilder {
    if builder.connector_id.is_none() {
        builder.connector_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_profile_output_output_correct_errors(
    mut builder: crate::operation::create_profile::builders::CreateProfileOutputBuilder,
) -> crate::operation::create_profile::builders::CreateProfileOutputBuilder {
    if builder.profile_id.is_none() {
        builder.profile_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_server_output_output_correct_errors(
    mut builder: crate::operation::create_server::builders::CreateServerOutputBuilder,
) -> crate::operation::create_server::builders::CreateServerOutputBuilder {
    if builder.server_id.is_none() {
        builder.server_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_user_output_output_correct_errors(
    mut builder: crate::operation::create_user::builders::CreateUserOutputBuilder,
) -> crate::operation::create_user::builders::CreateUserOutputBuilder {
    if builder.server_id.is_none() {
        builder.server_id = Some(Default::default())
    }
    if builder.user_name.is_none() {
        builder.user_name = Some(Default::default())
    }
    builder
}

pub(crate) fn create_workflow_output_output_correct_errors(
    mut builder: crate::operation::create_workflow::builders::CreateWorkflowOutputBuilder,
) -> crate::operation::create_workflow::builders::CreateWorkflowOutputBuilder {
    if builder.workflow_id.is_none() {
        builder.workflow_id = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_access_output_output_correct_errors(
    mut builder: crate::operation::describe_access::builders::DescribeAccessOutputBuilder,
) -> crate::operation::describe_access::builders::DescribeAccessOutputBuilder {
    if builder.server_id.is_none() {
        builder.server_id = Some(Default::default())
    }
    if builder.access.is_none() {
        builder.access = {
            let builder = crate::types::builders::DescribedAccessBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn describe_agreement_output_output_correct_errors(
    mut builder: crate::operation::describe_agreement::builders::DescribeAgreementOutputBuilder,
) -> crate::operation::describe_agreement::builders::DescribeAgreementOutputBuilder {
    if builder.agreement.is_none() {
        builder.agreement = {
            let builder = crate::types::builders::DescribedAgreementBuilder::default();
            crate::serde_util::described_agreement_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_certificate_output_output_correct_errors(
    mut builder: crate::operation::describe_certificate::builders::DescribeCertificateOutputBuilder,
) -> crate::operation::describe_certificate::builders::DescribeCertificateOutputBuilder {
    if builder.certificate.is_none() {
        builder.certificate = {
            let builder = crate::types::builders::DescribedCertificateBuilder::default();
            crate::serde_util::described_certificate_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_connector_output_output_correct_errors(
    mut builder: crate::operation::describe_connector::builders::DescribeConnectorOutputBuilder,
) -> crate::operation::describe_connector::builders::DescribeConnectorOutputBuilder {
    if builder.connector.is_none() {
        builder.connector = {
            let builder = crate::types::builders::DescribedConnectorBuilder::default();
            crate::serde_util::described_connector_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_execution_output_output_correct_errors(
    mut builder: crate::operation::describe_execution::builders::DescribeExecutionOutputBuilder,
) -> crate::operation::describe_execution::builders::DescribeExecutionOutputBuilder {
    if builder.workflow_id.is_none() {
        builder.workflow_id = Some(Default::default())
    }
    if builder.execution.is_none() {
        builder.execution = {
            let builder = crate::types::builders::DescribedExecutionBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn describe_host_key_output_output_correct_errors(
    mut builder: crate::operation::describe_host_key::builders::DescribeHostKeyOutputBuilder,
) -> crate::operation::describe_host_key::builders::DescribeHostKeyOutputBuilder {
    if builder.host_key.is_none() {
        builder.host_key = {
            let builder = crate::types::builders::DescribedHostKeyBuilder::default();
            crate::serde_util::described_host_key_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_profile_output_output_correct_errors(
    mut builder: crate::operation::describe_profile::builders::DescribeProfileOutputBuilder,
) -> crate::operation::describe_profile::builders::DescribeProfileOutputBuilder {
    if builder.profile.is_none() {
        builder.profile = {
            let builder = crate::types::builders::DescribedProfileBuilder::default();
            crate::serde_util::described_profile_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_security_policy_output_output_correct_errors(
    mut builder: crate::operation::describe_security_policy::builders::DescribeSecurityPolicyOutputBuilder,
) -> crate::operation::describe_security_policy::builders::DescribeSecurityPolicyOutputBuilder {
    if builder.security_policy.is_none() {
        builder.security_policy = {
            let builder = crate::types::builders::DescribedSecurityPolicyBuilder::default();
            crate::serde_util::described_security_policy_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_server_output_output_correct_errors(
    mut builder: crate::operation::describe_server::builders::DescribeServerOutputBuilder,
) -> crate::operation::describe_server::builders::DescribeServerOutputBuilder {
    if builder.server.is_none() {
        builder.server = {
            let builder = crate::types::builders::DescribedServerBuilder::default();
            crate::serde_util::described_server_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_user_output_output_correct_errors(
    mut builder: crate::operation::describe_user::builders::DescribeUserOutputBuilder,
) -> crate::operation::describe_user::builders::DescribeUserOutputBuilder {
    if builder.server_id.is_none() {
        builder.server_id = Some(Default::default())
    }
    if builder.user.is_none() {
        builder.user = {
            let builder = crate::types::builders::DescribedUserBuilder::default();
            crate::serde_util::described_user_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_workflow_output_output_correct_errors(
    mut builder: crate::operation::describe_workflow::builders::DescribeWorkflowOutputBuilder,
) -> crate::operation::describe_workflow::builders::DescribeWorkflowOutputBuilder {
    if builder.workflow.is_none() {
        builder.workflow = {
            let builder = crate::types::builders::DescribedWorkflowBuilder::default();
            crate::serde_util::described_workflow_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn import_certificate_output_output_correct_errors(
    mut builder: crate::operation::import_certificate::builders::ImportCertificateOutputBuilder,
) -> crate::operation::import_certificate::builders::ImportCertificateOutputBuilder {
    if builder.certificate_id.is_none() {
        builder.certificate_id = Some(Default::default())
    }
    builder
}

pub(crate) fn import_host_key_output_output_correct_errors(
    mut builder: crate::operation::import_host_key::builders::ImportHostKeyOutputBuilder,
) -> crate::operation::import_host_key::builders::ImportHostKeyOutputBuilder {
    if builder.server_id.is_none() {
        builder.server_id = Some(Default::default())
    }
    if builder.host_key_id.is_none() {
        builder.host_key_id = Some(Default::default())
    }
    builder
}

pub(crate) fn import_ssh_public_key_output_output_correct_errors(
    mut builder: crate::operation::import_ssh_public_key::builders::ImportSshPublicKeyOutputBuilder,
) -> crate::operation::import_ssh_public_key::builders::ImportSshPublicKeyOutputBuilder {
    if builder.server_id.is_none() {
        builder.server_id = Some(Default::default())
    }
    if builder.ssh_public_key_id.is_none() {
        builder.ssh_public_key_id = Some(Default::default())
    }
    if builder.user_name.is_none() {
        builder.user_name = Some(Default::default())
    }
    builder
}

pub(crate) fn invalid_next_token_exception_correct_errors(
    mut builder: crate::types::error::builders::InvalidNextTokenExceptionBuilder,
) -> crate::types::error::builders::InvalidNextTokenExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn list_accesses_output_output_correct_errors(
    mut builder: crate::operation::list_accesses::builders::ListAccessesOutputBuilder,
) -> crate::operation::list_accesses::builders::ListAccessesOutputBuilder {
    if builder.server_id.is_none() {
        builder.server_id = Some(Default::default())
    }
    if builder.accesses.is_none() {
        builder.accesses = Some(Default::default())
    }
    builder
}

pub(crate) fn list_agreements_output_output_correct_errors(
    mut builder: crate::operation::list_agreements::builders::ListAgreementsOutputBuilder,
) -> crate::operation::list_agreements::builders::ListAgreementsOutputBuilder {
    if builder.agreements.is_none() {
        builder.agreements = Some(Default::default())
    }
    builder
}

pub(crate) fn list_certificates_output_output_correct_errors(
    mut builder: crate::operation::list_certificates::builders::ListCertificatesOutputBuilder,
) -> crate::operation::list_certificates::builders::ListCertificatesOutputBuilder {
    if builder.certificates.is_none() {
        builder.certificates = Some(Default::default())
    }
    builder
}

pub(crate) fn list_connectors_output_output_correct_errors(
    mut builder: crate::operation::list_connectors::builders::ListConnectorsOutputBuilder,
) -> crate::operation::list_connectors::builders::ListConnectorsOutputBuilder {
    if builder.connectors.is_none() {
        builder.connectors = Some(Default::default())
    }
    builder
}

pub(crate) fn list_executions_output_output_correct_errors(
    mut builder: crate::operation::list_executions::builders::ListExecutionsOutputBuilder,
) -> crate::operation::list_executions::builders::ListExecutionsOutputBuilder {
    if builder.workflow_id.is_none() {
        builder.workflow_id = Some(Default::default())
    }
    if builder.executions.is_none() {
        builder.executions = Some(Default::default())
    }
    builder
}

pub(crate) fn list_host_keys_output_output_correct_errors(
    mut builder: crate::operation::list_host_keys::builders::ListHostKeysOutputBuilder,
) -> crate::operation::list_host_keys::builders::ListHostKeysOutputBuilder {
    if builder.server_id.is_none() {
        builder.server_id = Some(Default::default())
    }
    if builder.host_keys.is_none() {
        builder.host_keys = Some(Default::default())
    }
    builder
}

pub(crate) fn list_profiles_output_output_correct_errors(
    mut builder: crate::operation::list_profiles::builders::ListProfilesOutputBuilder,
) -> crate::operation::list_profiles::builders::ListProfilesOutputBuilder {
    if builder.profiles.is_none() {
        builder.profiles = Some(Default::default())
    }
    builder
}

pub(crate) fn list_security_policies_output_output_correct_errors(
    mut builder: crate::operation::list_security_policies::builders::ListSecurityPoliciesOutputBuilder,
) -> crate::operation::list_security_policies::builders::ListSecurityPoliciesOutputBuilder {
    if builder.security_policy_names.is_none() {
        builder.security_policy_names = Some(Default::default())
    }
    builder
}

pub(crate) fn list_servers_output_output_correct_errors(
    mut builder: crate::operation::list_servers::builders::ListServersOutputBuilder,
) -> crate::operation::list_servers::builders::ListServersOutputBuilder {
    if builder.servers.is_none() {
        builder.servers = Some(Default::default())
    }
    builder
}

pub(crate) fn list_users_output_output_correct_errors(
    mut builder: crate::operation::list_users::builders::ListUsersOutputBuilder,
) -> crate::operation::list_users::builders::ListUsersOutputBuilder {
    if builder.server_id.is_none() {
        builder.server_id = Some(Default::default())
    }
    if builder.users.is_none() {
        builder.users = Some(Default::default())
    }
    builder
}

pub(crate) fn list_workflows_output_output_correct_errors(
    mut builder: crate::operation::list_workflows::builders::ListWorkflowsOutputBuilder,
) -> crate::operation::list_workflows::builders::ListWorkflowsOutputBuilder {
    if builder.workflows.is_none() {
        builder.workflows = Some(Default::default())
    }
    builder
}

pub(crate) fn start_directory_listing_output_output_correct_errors(
    mut builder: crate::operation::start_directory_listing::builders::StartDirectoryListingOutputBuilder,
) -> crate::operation::start_directory_listing::builders::StartDirectoryListingOutputBuilder {
    if builder.listing_id.is_none() {
        builder.listing_id = Some(Default::default())
    }
    if builder.output_file_name.is_none() {
        builder.output_file_name = Some(Default::default())
    }
    builder
}

pub(crate) fn start_file_transfer_output_output_correct_errors(
    mut builder: crate::operation::start_file_transfer::builders::StartFileTransferOutputBuilder,
) -> crate::operation::start_file_transfer::builders::StartFileTransferOutputBuilder {
    if builder.transfer_id.is_none() {
        builder.transfer_id = Some(Default::default())
    }
    builder
}

pub(crate) fn test_identity_provider_output_output_correct_errors(
    mut builder: crate::operation::test_identity_provider::builders::TestIdentityProviderOutputBuilder,
) -> crate::operation::test_identity_provider::builders::TestIdentityProviderOutputBuilder {
    if builder.status_code.is_none() {
        builder.status_code = Some(Default::default())
    }
    if builder.url.is_none() {
        builder.url = Some(Default::default())
    }
    builder
}

pub(crate) fn update_access_output_output_correct_errors(
    mut builder: crate::operation::update_access::builders::UpdateAccessOutputBuilder,
) -> crate::operation::update_access::builders::UpdateAccessOutputBuilder {
    if builder.server_id.is_none() {
        builder.server_id = Some(Default::default())
    }
    if builder.external_id.is_none() {
        builder.external_id = Some(Default::default())
    }
    builder
}

pub(crate) fn update_agreement_output_output_correct_errors(
    mut builder: crate::operation::update_agreement::builders::UpdateAgreementOutputBuilder,
) -> crate::operation::update_agreement::builders::UpdateAgreementOutputBuilder {
    if builder.agreement_id.is_none() {
        builder.agreement_id = Some(Default::default())
    }
    builder
}

pub(crate) fn update_certificate_output_output_correct_errors(
    mut builder: crate::operation::update_certificate::builders::UpdateCertificateOutputBuilder,
) -> crate::operation::update_certificate::builders::UpdateCertificateOutputBuilder {
    if builder.certificate_id.is_none() {
        builder.certificate_id = Some(Default::default())
    }
    builder
}

pub(crate) fn update_connector_output_output_correct_errors(
    mut builder: crate::operation::update_connector::builders::UpdateConnectorOutputBuilder,
) -> crate::operation::update_connector::builders::UpdateConnectorOutputBuilder {
    if builder.connector_id.is_none() {
        builder.connector_id = Some(Default::default())
    }
    builder
}

pub(crate) fn update_host_key_output_output_correct_errors(
    mut builder: crate::operation::update_host_key::builders::UpdateHostKeyOutputBuilder,
) -> crate::operation::update_host_key::builders::UpdateHostKeyOutputBuilder {
    if builder.server_id.is_none() {
        builder.server_id = Some(Default::default())
    }
    if builder.host_key_id.is_none() {
        builder.host_key_id = Some(Default::default())
    }
    builder
}

pub(crate) fn update_profile_output_output_correct_errors(
    mut builder: crate::operation::update_profile::builders::UpdateProfileOutputBuilder,
) -> crate::operation::update_profile::builders::UpdateProfileOutputBuilder {
    if builder.profile_id.is_none() {
        builder.profile_id = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn update_server_output_output_correct_errors(
    mut builder: crate::operation::update_server::builders::UpdateServerOutputBuilder,
) -> crate::operation::update_server::builders::UpdateServerOutputBuilder {
    if builder.server_id.is_none() {
        builder.server_id = Some(Default::default())
    }
    builder
}

pub(crate) fn update_user_output_output_correct_errors(
    mut builder: crate::operation::update_user::builders::UpdateUserOutputBuilder,
) -> crate::operation::update_user::builders::UpdateUserOutputBuilder {
    if builder.server_id.is_none() {
        builder.server_id = Some(Default::default())
    }
    if builder.user_name.is_none() {
        builder.user_name = Some(Default::default())
    }
    builder
}

pub(crate) fn described_agreement_correct_errors(
    mut builder: crate::types::builders::DescribedAgreementBuilder,
) -> crate::types::builders::DescribedAgreementBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn described_certificate_correct_errors(
    mut builder: crate::types::builders::DescribedCertificateBuilder,
) -> crate::types::builders::DescribedCertificateBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn described_connector_correct_errors(
    mut builder: crate::types::builders::DescribedConnectorBuilder,
) -> crate::types::builders::DescribedConnectorBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn described_host_key_correct_errors(
    mut builder: crate::types::builders::DescribedHostKeyBuilder,
) -> crate::types::builders::DescribedHostKeyBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn described_profile_correct_errors(
    mut builder: crate::types::builders::DescribedProfileBuilder,
) -> crate::types::builders::DescribedProfileBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn described_security_policy_correct_errors(
    mut builder: crate::types::builders::DescribedSecurityPolicyBuilder,
) -> crate::types::builders::DescribedSecurityPolicyBuilder {
    if builder.security_policy_name.is_none() {
        builder.security_policy_name = Some(Default::default())
    }
    builder
}

pub(crate) fn described_server_correct_errors(
    mut builder: crate::types::builders::DescribedServerBuilder,
) -> crate::types::builders::DescribedServerBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn described_user_correct_errors(
    mut builder: crate::types::builders::DescribedUserBuilder,
) -> crate::types::builders::DescribedUserBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn described_workflow_correct_errors(
    mut builder: crate::types::builders::DescribedWorkflowBuilder,
) -> crate::types::builders::DescribedWorkflowBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn listed_host_key_correct_errors(
    mut builder: crate::types::builders::ListedHostKeyBuilder,
) -> crate::types::builders::ListedHostKeyBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn listed_server_correct_errors(mut builder: crate::types::builders::ListedServerBuilder) -> crate::types::builders::ListedServerBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn listed_user_correct_errors(mut builder: crate::types::builders::ListedUserBuilder) -> crate::types::builders::ListedUserBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn posix_profile_correct_errors(mut builder: crate::types::builders::PosixProfileBuilder) -> crate::types::builders::PosixProfileBuilder {
    if builder.uid.is_none() {
        builder.uid = Some(Default::default())
    }
    if builder.gid.is_none() {
        builder.gid = Some(Default::default())
    }
    builder
}

pub(crate) fn service_metadata_correct_errors(
    mut builder: crate::types::builders::ServiceMetadataBuilder,
) -> crate::types::builders::ServiceMetadataBuilder {
    if builder.user_details.is_none() {
        builder.user_details = {
            let builder = crate::types::builders::UserDetailsBuilder::default();
            crate::serde_util::user_details_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn home_directory_map_entry_correct_errors(
    mut builder: crate::types::builders::HomeDirectoryMapEntryBuilder,
) -> crate::types::builders::HomeDirectoryMapEntryBuilder {
    if builder.entry.is_none() {
        builder.entry = Some(Default::default())
    }
    if builder.target.is_none() {
        builder.target = Some(Default::default())
    }
    builder
}

pub(crate) fn ssh_public_key_correct_errors(mut builder: crate::types::builders::SshPublicKeyBuilder) -> crate::types::builders::SshPublicKeyBuilder {
    if builder.date_imported.is_none() {
        builder.date_imported = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.ssh_public_key_body.is_none() {
        builder.ssh_public_key_body = Some(Default::default())
    }
    if builder.ssh_public_key_id.is_none() {
        builder.ssh_public_key_id = Some(Default::default())
    }
    builder
}

pub(crate) fn user_details_correct_errors(mut builder: crate::types::builders::UserDetailsBuilder) -> crate::types::builders::UserDetailsBuilder {
    if builder.user_name.is_none() {
        builder.user_name = Some(Default::default())
    }
    if builder.server_id.is_none() {
        builder.server_id = Some(Default::default())
    }
    builder
}

pub(crate) fn decrypt_step_details_correct_errors(
    mut builder: crate::types::builders::DecryptStepDetailsBuilder,
) -> crate::types::builders::DecryptStepDetailsBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::EncryptionType>().ok()
    }
    if builder.destination_file_location.is_none() {
        builder.destination_file_location = {
            let builder = crate::types::builders::InputFileLocationBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn workflow_detail_correct_errors(
    mut builder: crate::types::builders::WorkflowDetailBuilder,
) -> crate::types::builders::WorkflowDetailBuilder {
    if builder.workflow_id.is_none() {
        builder.workflow_id = Some(Default::default())
    }
    if builder.execution_role.is_none() {
        builder.execution_role = Some(Default::default())
    }
    builder
}

pub(crate) fn execution_error_correct_errors(
    mut builder: crate::types::builders::ExecutionErrorBuilder,
) -> crate::types::builders::ExecutionErrorBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::ExecutionErrorType>().ok()
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_tag_correct_errors(mut builder: crate::types::builders::S3TagBuilder) -> crate::types::builders::S3TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}
