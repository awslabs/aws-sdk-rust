// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_accesses_output_next_token(
    input: &crate::operation::list_accesses::ListAccessesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_agreements_output_next_token(
    input: &crate::operation::list_agreements::ListAgreementsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_certificates_output_next_token(
    input: &crate::operation::list_certificates::ListCertificatesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_connectors_output_next_token(
    input: &crate::operation::list_connectors::ListConnectorsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_executions_output_next_token(
    input: &crate::operation::list_executions::ListExecutionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_profiles_output_next_token(
    input: &crate::operation::list_profiles::ListProfilesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_security_policies_output_next_token(
    input: &crate::operation::list_security_policies::ListSecurityPoliciesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_servers_output_next_token(
    input: &crate::operation::list_servers::ListServersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_tags_for_resource_output_next_token(
    input: &crate::operation::list_tags_for_resource::ListTagsForResourceOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_users_output_next_token(
    input: &crate::operation::list_users::ListUsersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_workflows_output_next_token(
    input: &crate::operation::list_workflows::ListWorkflowsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_accesses_output_accesses(
    input: crate::operation::list_accesses::ListAccessesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ListedAccess>> {
    let input = input.accesses;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_agreements_output_agreements(
    input: crate::operation::list_agreements::ListAgreementsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ListedAgreement>> {
    let input = input.agreements;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_certificates_output_certificates(
    input: crate::operation::list_certificates::ListCertificatesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ListedCertificate>> {
    let input = input.certificates;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_connectors_output_connectors(
    input: crate::operation::list_connectors::ListConnectorsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ListedConnector>> {
    let input = input.connectors;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_executions_output_executions(
    input: crate::operation::list_executions::ListExecutionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ListedExecution>> {
    let input = input.executions;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_profiles_output_profiles(
    input: crate::operation::list_profiles::ListProfilesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ListedProfile>> {
    let input = input.profiles;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_security_policies_output_security_policy_names(
    input: crate::operation::list_security_policies::ListSecurityPoliciesOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = input.security_policy_names;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_servers_output_servers(
    input: crate::operation::list_servers::ListServersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ListedServer>> {
    let input = input.servers;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_tags_for_resource_output_tags(
    input: crate::operation::list_tags_for_resource::ListTagsForResourceOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
    let input = match input.tags {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_users_output_users(
    input: crate::operation::list_users::ListUsersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ListedUser>> {
    let input = input.users;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_workflows_output_workflows(
    input: crate::operation::list_workflows::ListWorkflowsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ListedWorkflow>> {
    let input = input.workflows;
    ::std::option::Option::Some(input)
}
