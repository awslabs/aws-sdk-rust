// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_workflow::_create_workflow_output::CreateWorkflowOutputBuilder;

pub use crate::operation::create_workflow::_create_workflow_input::CreateWorkflowInputBuilder;

/// Fluent builder constructing a request to `CreateWorkflow`.
///
/// <p> Allows you to create a workflow with specified steps and step details the workflow invokes after file transfer completes. After creating a workflow, you can associate the workflow created with any transfer servers by specifying the <code>workflow-details</code> field in <code>CreateServer</code> and <code>UpdateServer</code> operations. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateWorkflowFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_workflow::builders::CreateWorkflowInputBuilder,
}
impl CreateWorkflowFluentBuilder {
    /// Creates a new `CreateWorkflow`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_workflow::CreateWorkflow,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::create_workflow::CreateWorkflowError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_workflow::CreateWorkflowOutput,
        aws_smithy_http::result::SdkError<crate::operation::create_workflow::CreateWorkflowError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A textual description for the workflow.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A textual description for the workflow.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// Appends an item to `Steps`.
    ///
    /// To override the contents of this collection use [`set_steps`](Self::set_steps).
    ///
    /// <p>Specifies the details for the steps that are in the specified workflow.</p>
    /// <p> The <code>TYPE</code> specifies which of the following actions is being taken for this step. </p>
    /// <ul>
    /// <li> <p> <i>COPY</i>: Copy the file to another location.</p> </li>
    /// <li> <p> <i>CUSTOM</i>: Perform a custom step with an Lambda function target.</p> </li>
    /// <li> <p> <i>DELETE</i>: Delete the file.</p> </li>
    /// <li> <p> <i>TAG</i>: Add a tag to the file.</p> </li>
    /// </ul> <note>
    /// <p> Currently, copying and tagging are supported only on S3. </p>
    /// </note>
    /// <p> For file location, you specify either the S3 bucket and key, or the EFS file system ID and path. </p>
    pub fn steps(mut self, input: crate::types::WorkflowStep) -> Self {
        self.inner = self.inner.steps(input);
        self
    }
    /// <p>Specifies the details for the steps that are in the specified workflow.</p>
    /// <p> The <code>TYPE</code> specifies which of the following actions is being taken for this step. </p>
    /// <ul>
    /// <li> <p> <i>COPY</i>: Copy the file to another location.</p> </li>
    /// <li> <p> <i>CUSTOM</i>: Perform a custom step with an Lambda function target.</p> </li>
    /// <li> <p> <i>DELETE</i>: Delete the file.</p> </li>
    /// <li> <p> <i>TAG</i>: Add a tag to the file.</p> </li>
    /// </ul> <note>
    /// <p> Currently, copying and tagging are supported only on S3. </p>
    /// </note>
    /// <p> For file location, you specify either the S3 bucket and key, or the EFS file system ID and path. </p>
    pub fn set_steps(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::WorkflowStep>>,
    ) -> Self {
        self.inner = self.inner.set_steps(input);
        self
    }
    /// Appends an item to `OnExceptionSteps`.
    ///
    /// To override the contents of this collection use [`set_on_exception_steps`](Self::set_on_exception_steps).
    ///
    /// <p>Specifies the steps (actions) to take if errors are encountered during execution of the workflow.</p> <note>
    /// <p>For custom steps, the lambda function needs to send <code>FAILURE</code> to the call back API to kick off the exception steps. Additionally, if the lambda does not send <code>SUCCESS</code> before it times out, the exception steps are executed.</p>
    /// </note>
    pub fn on_exception_steps(mut self, input: crate::types::WorkflowStep) -> Self {
        self.inner = self.inner.on_exception_steps(input);
        self
    }
    /// <p>Specifies the steps (actions) to take if errors are encountered during execution of the workflow.</p> <note>
    /// <p>For custom steps, the lambda function needs to send <code>FAILURE</code> to the call back API to kick off the exception steps. Additionally, if the lambda does not send <code>SUCCESS</code> before it times out, the exception steps are executed.</p>
    /// </note>
    pub fn set_on_exception_steps(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::WorkflowStep>>,
    ) -> Self {
        self.inner = self.inner.set_on_exception_steps(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Key-value pairs that can be used to group and search for workflows. Tags are metadata attached to workflows for any purpose.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>Key-value pairs that can be used to group and search for workflows. Tags are metadata attached to workflows for any purpose.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}
