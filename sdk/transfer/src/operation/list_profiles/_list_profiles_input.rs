// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListProfilesInput {
    /// <p>The maximum number of profiles to return.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>When there are additional results that were not returned, a <code>NextToken</code> parameter is returned. You can use that value for a subsequent call to <code>ListProfiles</code> to continue listing results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Indicates whether to list only <code>LOCAL</code> type profiles or only <code>PARTNER</code> type profiles. If not supplied in the request, the command lists all types of profiles.</p>
    #[doc(hidden)]
    pub profile_type: std::option::Option<crate::types::ProfileType>,
}
impl ListProfilesInput {
    /// <p>The maximum number of profiles to return.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>When there are additional results that were not returned, a <code>NextToken</code> parameter is returned. You can use that value for a subsequent call to <code>ListProfiles</code> to continue listing results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Indicates whether to list only <code>LOCAL</code> type profiles or only <code>PARTNER</code> type profiles. If not supplied in the request, the command lists all types of profiles.</p>
    pub fn profile_type(&self) -> std::option::Option<&crate::types::ProfileType> {
        self.profile_type.as_ref()
    }
}
impl ListProfilesInput {
    /// Creates a new builder-style object to manufacture [`ListProfilesInput`](crate::operation::list_profiles::ListProfilesInput).
    pub fn builder() -> crate::operation::list_profiles::builders::ListProfilesInputBuilder {
        crate::operation::list_profiles::builders::ListProfilesInputBuilder::default()
    }
}

/// A builder for [`ListProfilesInput`](crate::operation::list_profiles::ListProfilesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListProfilesInputBuilder {
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) profile_type: std::option::Option<crate::types::ProfileType>,
}
impl ListProfilesInputBuilder {
    /// <p>The maximum number of profiles to return.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of profiles to return.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>When there are additional results that were not returned, a <code>NextToken</code> parameter is returned. You can use that value for a subsequent call to <code>ListProfiles</code> to continue listing results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>When there are additional results that were not returned, a <code>NextToken</code> parameter is returned. You can use that value for a subsequent call to <code>ListProfiles</code> to continue listing results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Indicates whether to list only <code>LOCAL</code> type profiles or only <code>PARTNER</code> type profiles. If not supplied in the request, the command lists all types of profiles.</p>
    pub fn profile_type(mut self, input: crate::types::ProfileType) -> Self {
        self.profile_type = Some(input);
        self
    }
    /// <p>Indicates whether to list only <code>LOCAL</code> type profiles or only <code>PARTNER</code> type profiles. If not supplied in the request, the command lists all types of profiles.</p>
    pub fn set_profile_type(
        mut self,
        input: std::option::Option<crate::types::ProfileType>,
    ) -> Self {
        self.profile_type = input;
        self
    }
    /// Consumes the builder and constructs a [`ListProfilesInput`](crate::operation::list_profiles::ListProfilesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_profiles::ListProfilesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_profiles::ListProfilesInput {
            max_results: self.max_results,
            next_token: self.next_token,
            profile_type: self.profile_type,
        })
    }
}
