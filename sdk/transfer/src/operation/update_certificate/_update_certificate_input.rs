// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateCertificateInput {
    /// <p>The identifier of the certificate object that you are updating.</p>
    #[doc(hidden)]
    pub certificate_id: std::option::Option<std::string::String>,
    /// <p>An optional date that specifies when the certificate becomes active.</p>
    #[doc(hidden)]
    pub active_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>An optional date that specifies when the certificate becomes inactive.</p>
    #[doc(hidden)]
    pub inactive_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>A short description to help identify the certificate.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
}
impl UpdateCertificateInput {
    /// <p>The identifier of the certificate object that you are updating.</p>
    pub fn certificate_id(&self) -> std::option::Option<&str> {
        self.certificate_id.as_deref()
    }
    /// <p>An optional date that specifies when the certificate becomes active.</p>
    pub fn active_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.active_date.as_ref()
    }
    /// <p>An optional date that specifies when the certificate becomes inactive.</p>
    pub fn inactive_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.inactive_date.as_ref()
    }
    /// <p>A short description to help identify the certificate.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl UpdateCertificateInput {
    /// Creates a new builder-style object to manufacture [`UpdateCertificateInput`](crate::operation::update_certificate::UpdateCertificateInput).
    pub fn builder() -> crate::operation::update_certificate::builders::UpdateCertificateInputBuilder
    {
        crate::operation::update_certificate::builders::UpdateCertificateInputBuilder::default()
    }
}

/// A builder for [`UpdateCertificateInput`](crate::operation::update_certificate::UpdateCertificateInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateCertificateInputBuilder {
    pub(crate) certificate_id: std::option::Option<std::string::String>,
    pub(crate) active_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) inactive_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) description: std::option::Option<std::string::String>,
}
impl UpdateCertificateInputBuilder {
    /// <p>The identifier of the certificate object that you are updating.</p>
    pub fn certificate_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.certificate_id = Some(input.into());
        self
    }
    /// <p>The identifier of the certificate object that you are updating.</p>
    pub fn set_certificate_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.certificate_id = input;
        self
    }
    /// <p>An optional date that specifies when the certificate becomes active.</p>
    pub fn active_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.active_date = Some(input);
        self
    }
    /// <p>An optional date that specifies when the certificate becomes active.</p>
    pub fn set_active_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.active_date = input;
        self
    }
    /// <p>An optional date that specifies when the certificate becomes inactive.</p>
    pub fn inactive_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inactive_date = Some(input);
        self
    }
    /// <p>An optional date that specifies when the certificate becomes inactive.</p>
    pub fn set_inactive_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inactive_date = input;
        self
    }
    /// <p>A short description to help identify the certificate.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A short description to help identify the certificate.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateCertificateInput`](crate::operation::update_certificate::UpdateCertificateInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_certificate::UpdateCertificateInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_certificate::UpdateCertificateInput {
                certificate_id: self.certificate_id,
                active_date: self.active_date,
                inactive_date: self.inactive_date,
                description: self.description,
            },
        )
    }
}
