// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListAccessesOutput {
    /// <p>When you can get additional results from the <code>ListAccesses</code> call, a <code>NextToken</code> parameter is returned in the output. You can then pass in a subsequent command to the <code>NextToken</code> parameter to continue listing additional accesses.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>A system-assigned unique identifier for a server that has users assigned to it.</p>
    pub server_id: ::std::string::String,
    /// <p>Returns the accesses and their properties for the <code>ServerId</code> value that you specify.</p>
    pub accesses: ::std::vec::Vec<crate::types::ListedAccess>,
    _request_id: Option<String>,
}
impl ListAccessesOutput {
    /// <p>When you can get additional results from the <code>ListAccesses</code> call, a <code>NextToken</code> parameter is returned in the output. You can then pass in a subsequent command to the <code>NextToken</code> parameter to continue listing additional accesses.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>A system-assigned unique identifier for a server that has users assigned to it.</p>
    pub fn server_id(&self) -> &str {
        use std::ops::Deref;
        self.server_id.deref()
    }
    /// <p>Returns the accesses and their properties for the <code>ServerId</code> value that you specify.</p>
    pub fn accesses(&self) -> &[crate::types::ListedAccess] {
        use std::ops::Deref;
        self.accesses.deref()
    }
}
impl ::aws_http::request_id::RequestId for ListAccessesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListAccessesOutput {
    /// Creates a new builder-style object to manufacture [`ListAccessesOutput`](crate::operation::list_accesses::ListAccessesOutput).
    pub fn builder() -> crate::operation::list_accesses::builders::ListAccessesOutputBuilder {
        crate::operation::list_accesses::builders::ListAccessesOutputBuilder::default()
    }
}

/// A builder for [`ListAccessesOutput`](crate::operation::list_accesses::ListAccessesOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListAccessesOutputBuilder {
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) server_id: ::std::option::Option<::std::string::String>,
    pub(crate) accesses: ::std::option::Option<::std::vec::Vec<crate::types::ListedAccess>>,
    _request_id: Option<String>,
}
impl ListAccessesOutputBuilder {
    /// <p>When you can get additional results from the <code>ListAccesses</code> call, a <code>NextToken</code> parameter is returned in the output. You can then pass in a subsequent command to the <code>NextToken</code> parameter to continue listing additional accesses.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>When you can get additional results from the <code>ListAccesses</code> call, a <code>NextToken</code> parameter is returned in the output. You can then pass in a subsequent command to the <code>NextToken</code> parameter to continue listing additional accesses.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>When you can get additional results from the <code>ListAccesses</code> call, a <code>NextToken</code> parameter is returned in the output. You can then pass in a subsequent command to the <code>NextToken</code> parameter to continue listing additional accesses.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>A system-assigned unique identifier for a server that has users assigned to it.</p>
    /// This field is required.
    pub fn server_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.server_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A system-assigned unique identifier for a server that has users assigned to it.</p>
    pub fn set_server_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.server_id = input;
        self
    }
    /// <p>A system-assigned unique identifier for a server that has users assigned to it.</p>
    pub fn get_server_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.server_id
    }
    /// Appends an item to `accesses`.
    ///
    /// To override the contents of this collection use [`set_accesses`](Self::set_accesses).
    ///
    /// <p>Returns the accesses and their properties for the <code>ServerId</code> value that you specify.</p>
    pub fn accesses(mut self, input: crate::types::ListedAccess) -> Self {
        let mut v = self.accesses.unwrap_or_default();
        v.push(input);
        self.accesses = ::std::option::Option::Some(v);
        self
    }
    /// <p>Returns the accesses and their properties for the <code>ServerId</code> value that you specify.</p>
    pub fn set_accesses(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ListedAccess>>) -> Self {
        self.accesses = input;
        self
    }
    /// <p>Returns the accesses and their properties for the <code>ServerId</code> value that you specify.</p>
    pub fn get_accesses(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ListedAccess>> {
        &self.accesses
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListAccessesOutput`](crate::operation::list_accesses::ListAccessesOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`server_id`](crate::operation::list_accesses::builders::ListAccessesOutputBuilder::server_id)
    /// - [`accesses`](crate::operation::list_accesses::builders::ListAccessesOutputBuilder::accesses)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_accesses::ListAccessesOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_accesses::ListAccessesOutput {
            next_token: self.next_token,
            server_id: self.server_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "server_id",
                    "server_id was not specified but it is required when building ListAccessesOutput",
                )
            })?,
            accesses: self.accesses.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "accesses",
                    "accesses was not specified but it is required when building ListAccessesOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
