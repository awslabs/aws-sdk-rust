// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::import_certificate::_import_certificate_output::ImportCertificateOutputBuilder;

pub use crate::operation::import_certificate::_import_certificate_input::ImportCertificateInputBuilder;

impl ImportCertificateInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::import_certificate::ImportCertificateOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::import_certificate::ImportCertificateError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.import_certificate();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ImportCertificate`.
///
/// <p>Imports the signing and encryption certificates that you need to create local (AS2) profiles and partner profiles.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ImportCertificateFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::import_certificate::builders::ImportCertificateInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::import_certificate::ImportCertificateOutput,
        crate::operation::import_certificate::ImportCertificateError,
    > for ImportCertificateFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::import_certificate::ImportCertificateOutput,
            crate::operation::import_certificate::ImportCertificateError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ImportCertificateFluentBuilder {
    /// Creates a new `ImportCertificate`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ImportCertificate as a reference.
    pub fn as_input(&self) -> &crate::operation::import_certificate::builders::ImportCertificateInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::import_certificate::ImportCertificateOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::import_certificate::ImportCertificateError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::import_certificate::ImportCertificate::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::import_certificate::ImportCertificate::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::import_certificate::ImportCertificateOutput,
        crate::operation::import_certificate::ImportCertificateError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Specifies whether this certificate is used for signing or encryption.</p>
    pub fn usage(mut self, input: crate::types::CertificateUsageType) -> Self {
        self.inner = self.inner.usage(input);
        self
    }
    /// <p>Specifies whether this certificate is used for signing or encryption.</p>
    pub fn set_usage(mut self, input: ::std::option::Option<crate::types::CertificateUsageType>) -> Self {
        self.inner = self.inner.set_usage(input);
        self
    }
    /// <p>Specifies whether this certificate is used for signing or encryption.</p>
    pub fn get_usage(&self) -> &::std::option::Option<crate::types::CertificateUsageType> {
        self.inner.get_usage()
    }
    /// <ul>
    /// <li> <p>For the CLI, provide a file path for a certificate in URI format. For example, <code>--certificate file://encryption-cert.pem</code>. Alternatively, you can provide the raw content.</p> </li>
    /// <li> <p>For the SDK, specify the raw content of a certificate file. For example, <code>--certificate "`cat encryption-cert.pem`"</code>.</p> </li>
    /// </ul>
    pub fn certificate(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.certificate(input.into());
        self
    }
    /// <ul>
    /// <li> <p>For the CLI, provide a file path for a certificate in URI format. For example, <code>--certificate file://encryption-cert.pem</code>. Alternatively, you can provide the raw content.</p> </li>
    /// <li> <p>For the SDK, specify the raw content of a certificate file. For example, <code>--certificate "`cat encryption-cert.pem`"</code>.</p> </li>
    /// </ul>
    pub fn set_certificate(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_certificate(input);
        self
    }
    /// <ul>
    /// <li> <p>For the CLI, provide a file path for a certificate in URI format. For example, <code>--certificate file://encryption-cert.pem</code>. Alternatively, you can provide the raw content.</p> </li>
    /// <li> <p>For the SDK, specify the raw content of a certificate file. For example, <code>--certificate "`cat encryption-cert.pem`"</code>.</p> </li>
    /// </ul>
    pub fn get_certificate(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_certificate()
    }
    /// <p>An optional list of certificates that make up the chain for the certificate that's being imported.</p>
    pub fn certificate_chain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.certificate_chain(input.into());
        self
    }
    /// <p>An optional list of certificates that make up the chain for the certificate that's being imported.</p>
    pub fn set_certificate_chain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_certificate_chain(input);
        self
    }
    /// <p>An optional list of certificates that make up the chain for the certificate that's being imported.</p>
    pub fn get_certificate_chain(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_certificate_chain()
    }
    /// <ul>
    /// <li> <p>For the CLI, provide a file path for a private key in URI format.For example, <code>--private-key file://encryption-key.pem</code>. Alternatively, you can provide the raw content of the private key file.</p> </li>
    /// <li> <p>For the SDK, specify the raw content of a private key file. For example, <code>--private-key "`cat encryption-key.pem`"</code> </p> </li>
    /// </ul>
    pub fn private_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.private_key(input.into());
        self
    }
    /// <ul>
    /// <li> <p>For the CLI, provide a file path for a private key in URI format.For example, <code>--private-key file://encryption-key.pem</code>. Alternatively, you can provide the raw content of the private key file.</p> </li>
    /// <li> <p>For the SDK, specify the raw content of a private key file. For example, <code>--private-key "`cat encryption-key.pem`"</code> </p> </li>
    /// </ul>
    pub fn set_private_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_private_key(input);
        self
    }
    /// <ul>
    /// <li> <p>For the CLI, provide a file path for a private key in URI format.For example, <code>--private-key file://encryption-key.pem</code>. Alternatively, you can provide the raw content of the private key file.</p> </li>
    /// <li> <p>For the SDK, specify the raw content of a private key file. For example, <code>--private-key "`cat encryption-key.pem`"</code> </p> </li>
    /// </ul>
    pub fn get_private_key(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_private_key()
    }
    /// <p>An optional date that specifies when the certificate becomes active.</p>
    pub fn active_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.active_date(input);
        self
    }
    /// <p>An optional date that specifies when the certificate becomes active.</p>
    pub fn set_active_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_active_date(input);
        self
    }
    /// <p>An optional date that specifies when the certificate becomes active.</p>
    pub fn get_active_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        self.inner.get_active_date()
    }
    /// <p>An optional date that specifies when the certificate becomes inactive.</p>
    pub fn inactive_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.inactive_date(input);
        self
    }
    /// <p>An optional date that specifies when the certificate becomes inactive.</p>
    pub fn set_inactive_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_inactive_date(input);
        self
    }
    /// <p>An optional date that specifies when the certificate becomes inactive.</p>
    pub fn get_inactive_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        self.inner.get_inactive_date()
    }
    /// <p>A short description that helps identify the certificate. </p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A short description that helps identify the certificate. </p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>A short description that helps identify the certificate. </p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Key-value pairs that can be used to group and search for certificates.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>Key-value pairs that can be used to group and search for certificates.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>Key-value pairs that can be used to group and search for certificates.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        self.inner.get_tags()
    }
}
