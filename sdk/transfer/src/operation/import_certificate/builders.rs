// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::import_certificate::_import_certificate_output::ImportCertificateOutputBuilder;

pub use crate::operation::import_certificate::_import_certificate_input::ImportCertificateInputBuilder;

/// Fluent builder constructing a request to `ImportCertificate`.
///
/// <p>Imports the signing and encryption certificates that you need to create local (AS2) profiles and partner profiles.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ImportCertificateFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::import_certificate::builders::ImportCertificateInputBuilder,
}
impl ImportCertificateFluentBuilder {
    /// Creates a new `ImportCertificate`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::import_certificate::ImportCertificate,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::import_certificate::ImportCertificateError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::import_certificate::ImportCertificateOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::import_certificate::ImportCertificateError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Specifies whether this certificate is used for signing or encryption.</p>
    pub fn usage(mut self, input: crate::types::CertificateUsageType) -> Self {
        self.inner = self.inner.usage(input);
        self
    }
    /// <p>Specifies whether this certificate is used for signing or encryption.</p>
    pub fn set_usage(
        mut self,
        input: std::option::Option<crate::types::CertificateUsageType>,
    ) -> Self {
        self.inner = self.inner.set_usage(input);
        self
    }
    /// <p>The file that contains the certificate to import.</p>
    pub fn certificate(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.certificate(input.into());
        self
    }
    /// <p>The file that contains the certificate to import.</p>
    pub fn set_certificate(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_certificate(input);
        self
    }
    /// <p>An optional list of certificates that make up the chain for the certificate that's being imported.</p>
    pub fn certificate_chain(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.certificate_chain(input.into());
        self
    }
    /// <p>An optional list of certificates that make up the chain for the certificate that's being imported.</p>
    pub fn set_certificate_chain(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_certificate_chain(input);
        self
    }
    /// <p>The file that contains the private key for the certificate that's being imported.</p>
    pub fn private_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.private_key(input.into());
        self
    }
    /// <p>The file that contains the private key for the certificate that's being imported.</p>
    pub fn set_private_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_private_key(input);
        self
    }
    /// <p>An optional date that specifies when the certificate becomes active.</p>
    pub fn active_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.active_date(input);
        self
    }
    /// <p>An optional date that specifies when the certificate becomes active.</p>
    pub fn set_active_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_active_date(input);
        self
    }
    /// <p>An optional date that specifies when the certificate becomes inactive.</p>
    pub fn inactive_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.inactive_date(input);
        self
    }
    /// <p>An optional date that specifies when the certificate becomes inactive.</p>
    pub fn set_inactive_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_inactive_date(input);
        self
    }
    /// <p>A short description that helps identify the certificate. </p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A short description that helps identify the certificate. </p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Key-value pairs that can be used to group and search for certificates.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>Key-value pairs that can be used to group and search for certificates.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}
