// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ImportCertificateInput {
    /// <p>Specifies whether this certificate is used for signing or encryption.</p>
    #[doc(hidden)]
    pub usage: std::option::Option<crate::types::CertificateUsageType>,
    /// <p>The file that contains the certificate to import.</p>
    #[doc(hidden)]
    pub certificate: std::option::Option<std::string::String>,
    /// <p>An optional list of certificates that make up the chain for the certificate that's being imported.</p>
    #[doc(hidden)]
    pub certificate_chain: std::option::Option<std::string::String>,
    /// <p>The file that contains the private key for the certificate that's being imported.</p>
    #[doc(hidden)]
    pub private_key: std::option::Option<std::string::String>,
    /// <p>An optional date that specifies when the certificate becomes active.</p>
    #[doc(hidden)]
    pub active_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>An optional date that specifies when the certificate becomes inactive.</p>
    #[doc(hidden)]
    pub inactive_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>A short description that helps identify the certificate. </p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>Key-value pairs that can be used to group and search for certificates.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl ImportCertificateInput {
    /// <p>Specifies whether this certificate is used for signing or encryption.</p>
    pub fn usage(&self) -> std::option::Option<&crate::types::CertificateUsageType> {
        self.usage.as_ref()
    }
    /// <p>The file that contains the certificate to import.</p>
    pub fn certificate(&self) -> std::option::Option<&str> {
        self.certificate.as_deref()
    }
    /// <p>An optional list of certificates that make up the chain for the certificate that's being imported.</p>
    pub fn certificate_chain(&self) -> std::option::Option<&str> {
        self.certificate_chain.as_deref()
    }
    /// <p>The file that contains the private key for the certificate that's being imported.</p>
    pub fn private_key(&self) -> std::option::Option<&str> {
        self.private_key.as_deref()
    }
    /// <p>An optional date that specifies when the certificate becomes active.</p>
    pub fn active_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.active_date.as_ref()
    }
    /// <p>An optional date that specifies when the certificate becomes inactive.</p>
    pub fn inactive_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.inactive_date.as_ref()
    }
    /// <p>A short description that helps identify the certificate. </p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Key-value pairs that can be used to group and search for certificates.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl std::fmt::Debug for ImportCertificateInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ImportCertificateInput");
        formatter.field("usage", &self.usage);
        formatter.field("certificate", &"*** Sensitive Data Redacted ***");
        formatter.field("certificate_chain", &"*** Sensitive Data Redacted ***");
        formatter.field("private_key", &"*** Sensitive Data Redacted ***");
        formatter.field("active_date", &self.active_date);
        formatter.field("inactive_date", &self.inactive_date);
        formatter.field("description", &self.description);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
impl ImportCertificateInput {
    /// Creates a new builder-style object to manufacture [`ImportCertificateInput`](crate::operation::import_certificate::ImportCertificateInput).
    pub fn builder() -> crate::operation::import_certificate::builders::ImportCertificateInputBuilder
    {
        crate::operation::import_certificate::builders::ImportCertificateInputBuilder::default()
    }
}

/// A builder for [`ImportCertificateInput`](crate::operation::import_certificate::ImportCertificateInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct ImportCertificateInputBuilder {
    pub(crate) usage: std::option::Option<crate::types::CertificateUsageType>,
    pub(crate) certificate: std::option::Option<std::string::String>,
    pub(crate) certificate_chain: std::option::Option<std::string::String>,
    pub(crate) private_key: std::option::Option<std::string::String>,
    pub(crate) active_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) inactive_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl ImportCertificateInputBuilder {
    /// <p>Specifies whether this certificate is used for signing or encryption.</p>
    pub fn usage(mut self, input: crate::types::CertificateUsageType) -> Self {
        self.usage = Some(input);
        self
    }
    /// <p>Specifies whether this certificate is used for signing or encryption.</p>
    pub fn set_usage(
        mut self,
        input: std::option::Option<crate::types::CertificateUsageType>,
    ) -> Self {
        self.usage = input;
        self
    }
    /// <p>The file that contains the certificate to import.</p>
    pub fn certificate(mut self, input: impl Into<std::string::String>) -> Self {
        self.certificate = Some(input.into());
        self
    }
    /// <p>The file that contains the certificate to import.</p>
    pub fn set_certificate(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.certificate = input;
        self
    }
    /// <p>An optional list of certificates that make up the chain for the certificate that's being imported.</p>
    pub fn certificate_chain(mut self, input: impl Into<std::string::String>) -> Self {
        self.certificate_chain = Some(input.into());
        self
    }
    /// <p>An optional list of certificates that make up the chain for the certificate that's being imported.</p>
    pub fn set_certificate_chain(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.certificate_chain = input;
        self
    }
    /// <p>The file that contains the private key for the certificate that's being imported.</p>
    pub fn private_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.private_key = Some(input.into());
        self
    }
    /// <p>The file that contains the private key for the certificate that's being imported.</p>
    pub fn set_private_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.private_key = input;
        self
    }
    /// <p>An optional date that specifies when the certificate becomes active.</p>
    pub fn active_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.active_date = Some(input);
        self
    }
    /// <p>An optional date that specifies when the certificate becomes active.</p>
    pub fn set_active_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.active_date = input;
        self
    }
    /// <p>An optional date that specifies when the certificate becomes inactive.</p>
    pub fn inactive_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inactive_date = Some(input);
        self
    }
    /// <p>An optional date that specifies when the certificate becomes inactive.</p>
    pub fn set_inactive_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inactive_date = input;
        self
    }
    /// <p>A short description that helps identify the certificate. </p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A short description that helps identify the certificate. </p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Key-value pairs that can be used to group and search for certificates.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>Key-value pairs that can be used to group and search for certificates.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`ImportCertificateInput`](crate::operation::import_certificate::ImportCertificateInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::import_certificate::ImportCertificateInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::import_certificate::ImportCertificateInput {
                usage: self.usage,
                certificate: self.certificate,
                certificate_chain: self.certificate_chain,
                private_key: self.private_key,
                active_date: self.active_date,
                inactive_date: self.inactive_date,
                description: self.description,
                tags: self.tags,
            },
        )
    }
}
impl std::fmt::Debug for ImportCertificateInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ImportCertificateInputBuilder");
        formatter.field("usage", &self.usage);
        formatter.field("certificate", &"*** Sensitive Data Redacted ***");
        formatter.field("certificate_chain", &"*** Sensitive Data Redacted ***");
        formatter.field("private_key", &"*** Sensitive Data Redacted ***");
        formatter.field("active_date", &self.active_date);
        formatter.field("inactive_date", &self.inactive_date);
        formatter.field("description", &self.description);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
