// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartDirectoryListingInput {
    /// <p>The unique identifier for the connector.</p>
    pub connector_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the directory on the remote SFTP server for which you want to list its contents.</p>
    pub remote_directory_path: ::std::option::Option<::std::string::String>,
    /// <p>An optional parameter where you can specify the maximum number of file/directory names to retrieve. The default value is 1,000.</p>
    pub max_items: ::std::option::Option<i32>,
    /// <p>Specifies the path (bucket and prefix) in Amazon S3 storage to store the results of the directory listing.</p>
    pub output_directory_path: ::std::option::Option<::std::string::String>,
}
impl StartDirectoryListingInput {
    /// <p>The unique identifier for the connector.</p>
    pub fn connector_id(&self) -> ::std::option::Option<&str> {
        self.connector_id.as_deref()
    }
    /// <p>Specifies the directory on the remote SFTP server for which you want to list its contents.</p>
    pub fn remote_directory_path(&self) -> ::std::option::Option<&str> {
        self.remote_directory_path.as_deref()
    }
    /// <p>An optional parameter where you can specify the maximum number of file/directory names to retrieve. The default value is 1,000.</p>
    pub fn max_items(&self) -> ::std::option::Option<i32> {
        self.max_items
    }
    /// <p>Specifies the path (bucket and prefix) in Amazon S3 storage to store the results of the directory listing.</p>
    pub fn output_directory_path(&self) -> ::std::option::Option<&str> {
        self.output_directory_path.as_deref()
    }
}
impl StartDirectoryListingInput {
    /// Creates a new builder-style object to manufacture [`StartDirectoryListingInput`](crate::operation::start_directory_listing::StartDirectoryListingInput).
    pub fn builder() -> crate::operation::start_directory_listing::builders::StartDirectoryListingInputBuilder {
        crate::operation::start_directory_listing::builders::StartDirectoryListingInputBuilder::default()
    }
}

/// A builder for [`StartDirectoryListingInput`](crate::operation::start_directory_listing::StartDirectoryListingInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StartDirectoryListingInputBuilder {
    pub(crate) connector_id: ::std::option::Option<::std::string::String>,
    pub(crate) remote_directory_path: ::std::option::Option<::std::string::String>,
    pub(crate) max_items: ::std::option::Option<i32>,
    pub(crate) output_directory_path: ::std::option::Option<::std::string::String>,
}
impl StartDirectoryListingInputBuilder {
    /// <p>The unique identifier for the connector.</p>
    /// This field is required.
    pub fn connector_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connector_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the connector.</p>
    pub fn set_connector_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connector_id = input;
        self
    }
    /// <p>The unique identifier for the connector.</p>
    pub fn get_connector_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.connector_id
    }
    /// <p>Specifies the directory on the remote SFTP server for which you want to list its contents.</p>
    /// This field is required.
    pub fn remote_directory_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.remote_directory_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the directory on the remote SFTP server for which you want to list its contents.</p>
    pub fn set_remote_directory_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.remote_directory_path = input;
        self
    }
    /// <p>Specifies the directory on the remote SFTP server for which you want to list its contents.</p>
    pub fn get_remote_directory_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.remote_directory_path
    }
    /// <p>An optional parameter where you can specify the maximum number of file/directory names to retrieve. The default value is 1,000.</p>
    pub fn max_items(mut self, input: i32) -> Self {
        self.max_items = ::std::option::Option::Some(input);
        self
    }
    /// <p>An optional parameter where you can specify the maximum number of file/directory names to retrieve. The default value is 1,000.</p>
    pub fn set_max_items(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_items = input;
        self
    }
    /// <p>An optional parameter where you can specify the maximum number of file/directory names to retrieve. The default value is 1,000.</p>
    pub fn get_max_items(&self) -> &::std::option::Option<i32> {
        &self.max_items
    }
    /// <p>Specifies the path (bucket and prefix) in Amazon S3 storage to store the results of the directory listing.</p>
    /// This field is required.
    pub fn output_directory_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.output_directory_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the path (bucket and prefix) in Amazon S3 storage to store the results of the directory listing.</p>
    pub fn set_output_directory_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.output_directory_path = input;
        self
    }
    /// <p>Specifies the path (bucket and prefix) in Amazon S3 storage to store the results of the directory listing.</p>
    pub fn get_output_directory_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.output_directory_path
    }
    /// Consumes the builder and constructs a [`StartDirectoryListingInput`](crate::operation::start_directory_listing::StartDirectoryListingInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::start_directory_listing::StartDirectoryListingInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::start_directory_listing::StartDirectoryListingInput {
            connector_id: self.connector_id,
            remote_directory_path: self.remote_directory_path,
            max_items: self.max_items,
            output_directory_path: self.output_directory_path,
        })
    }
}
