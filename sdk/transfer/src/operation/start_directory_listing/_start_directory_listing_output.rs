// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartDirectoryListingOutput {
    /// <p>Returns a unique identifier for the directory listing call.</p>
    pub listing_id: ::std::string::String,
    /// <p>Returns the file name where the results are stored. This is a combination of the connector ID and the listing ID: <code>&lt;connector-id&gt;-&lt;listing-id&gt;.json</code>.</p>
    pub output_file_name: ::std::string::String,
    _request_id: Option<String>,
}
impl StartDirectoryListingOutput {
    /// <p>Returns a unique identifier for the directory listing call.</p>
    pub fn listing_id(&self) -> &str {
        use std::ops::Deref;
        self.listing_id.deref()
    }
    /// <p>Returns the file name where the results are stored. This is a combination of the connector ID and the listing ID: <code>&lt;connector-id&gt;-&lt;listing-id&gt;.json</code>.</p>
    pub fn output_file_name(&self) -> &str {
        use std::ops::Deref;
        self.output_file_name.deref()
    }
}
impl ::aws_types::request_id::RequestId for StartDirectoryListingOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartDirectoryListingOutput {
    /// Creates a new builder-style object to manufacture [`StartDirectoryListingOutput`](crate::operation::start_directory_listing::StartDirectoryListingOutput).
    pub fn builder() -> crate::operation::start_directory_listing::builders::StartDirectoryListingOutputBuilder {
        crate::operation::start_directory_listing::builders::StartDirectoryListingOutputBuilder::default()
    }
}

/// A builder for [`StartDirectoryListingOutput`](crate::operation::start_directory_listing::StartDirectoryListingOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StartDirectoryListingOutputBuilder {
    pub(crate) listing_id: ::std::option::Option<::std::string::String>,
    pub(crate) output_file_name: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl StartDirectoryListingOutputBuilder {
    /// <p>Returns a unique identifier for the directory listing call.</p>
    /// This field is required.
    pub fn listing_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.listing_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Returns a unique identifier for the directory listing call.</p>
    pub fn set_listing_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.listing_id = input;
        self
    }
    /// <p>Returns a unique identifier for the directory listing call.</p>
    pub fn get_listing_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.listing_id
    }
    /// <p>Returns the file name where the results are stored. This is a combination of the connector ID and the listing ID: <code>&lt;connector-id&gt;-&lt;listing-id&gt;.json</code>.</p>
    /// This field is required.
    pub fn output_file_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.output_file_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Returns the file name where the results are stored. This is a combination of the connector ID and the listing ID: <code>&lt;connector-id&gt;-&lt;listing-id&gt;.json</code>.</p>
    pub fn set_output_file_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.output_file_name = input;
        self
    }
    /// <p>Returns the file name where the results are stored. This is a combination of the connector ID and the listing ID: <code>&lt;connector-id&gt;-&lt;listing-id&gt;.json</code>.</p>
    pub fn get_output_file_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.output_file_name
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`StartDirectoryListingOutput`](crate::operation::start_directory_listing::StartDirectoryListingOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`listing_id`](crate::operation::start_directory_listing::builders::StartDirectoryListingOutputBuilder::listing_id)
    /// - [`output_file_name`](crate::operation::start_directory_listing::builders::StartDirectoryListingOutputBuilder::output_file_name)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::start_directory_listing::StartDirectoryListingOutput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::start_directory_listing::StartDirectoryListingOutput {
            listing_id: self.listing_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "listing_id",
                    "listing_id was not specified but it is required when building StartDirectoryListingOutput",
                )
            })?,
            output_file_name: self.output_file_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "output_file_name",
                    "output_file_name was not specified but it is required when building StartDirectoryListingOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
