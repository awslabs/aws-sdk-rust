// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_server::_update_server_output::UpdateServerOutputBuilder;

pub use crate::operation::update_server::_update_server_input::UpdateServerInputBuilder;

/// Fluent builder constructing a request to `UpdateServer`.
///
/// <p>Updates the file transfer protocol-enabled server's properties after that server has been created.</p>
/// <p>The <code>UpdateServer</code> call returns the <code>ServerId</code> of the server you updated.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateServerFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_server::builders::UpdateServerInputBuilder,
}
impl UpdateServerFluentBuilder {
    /// Creates a new `UpdateServer`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_server::UpdateServer,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::update_server::UpdateServerError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_server::UpdateServerOutput,
        aws_smithy_http::result::SdkError<crate::operation::update_server::UpdateServerError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web ServicesCertificate Manager (ACM) certificate. Required when <code>Protocols</code> is set to <code>FTPS</code>.</p>
    /// <p>To request a new public certificate, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-request-public.html">Request a public certificate</a> in the <i> Amazon Web ServicesCertificate Manager User Guide</i>.</p>
    /// <p>To import an existing certificate into ACM, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html">Importing certificates into ACM</a> in the <i> Amazon Web ServicesCertificate Manager User Guide</i>.</p>
    /// <p>To request a private certificate to use FTPS through private IP addresses, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-request-private.html">Request a private certificate</a> in the <i> Amazon Web ServicesCertificate Manager User Guide</i>.</p>
    /// <p>Certificates with the following cryptographic algorithms and key sizes are supported:</p>
    /// <ul>
    /// <li> <p>2048-bit RSA (RSA_2048)</p> </li>
    /// <li> <p>4096-bit RSA (RSA_4096)</p> </li>
    /// <li> <p>Elliptic Prime Curve 256 bit (EC_prime256v1)</p> </li>
    /// <li> <p>Elliptic Prime Curve 384 bit (EC_secp384r1)</p> </li>
    /// <li> <p>Elliptic Prime Curve 521 bit (EC_secp521r1)</p> </li>
    /// </ul> <note>
    /// <p>The certificate must be a valid SSL/TLS X.509 version 3 certificate with FQDN or IP address specified and information about the issuer.</p>
    /// </note>
    pub fn certificate(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.certificate(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web ServicesCertificate Manager (ACM) certificate. Required when <code>Protocols</code> is set to <code>FTPS</code>.</p>
    /// <p>To request a new public certificate, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-request-public.html">Request a public certificate</a> in the <i> Amazon Web ServicesCertificate Manager User Guide</i>.</p>
    /// <p>To import an existing certificate into ACM, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html">Importing certificates into ACM</a> in the <i> Amazon Web ServicesCertificate Manager User Guide</i>.</p>
    /// <p>To request a private certificate to use FTPS through private IP addresses, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-request-private.html">Request a private certificate</a> in the <i> Amazon Web ServicesCertificate Manager User Guide</i>.</p>
    /// <p>Certificates with the following cryptographic algorithms and key sizes are supported:</p>
    /// <ul>
    /// <li> <p>2048-bit RSA (RSA_2048)</p> </li>
    /// <li> <p>4096-bit RSA (RSA_4096)</p> </li>
    /// <li> <p>Elliptic Prime Curve 256 bit (EC_prime256v1)</p> </li>
    /// <li> <p>Elliptic Prime Curve 384 bit (EC_secp384r1)</p> </li>
    /// <li> <p>Elliptic Prime Curve 521 bit (EC_secp521r1)</p> </li>
    /// </ul> <note>
    /// <p>The certificate must be a valid SSL/TLS X.509 version 3 certificate with FQDN or IP address specified and information about the issuer.</p>
    /// </note>
    pub fn set_certificate(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_certificate(input);
        self
    }
    /// <p>The protocol settings that are configured for your server.</p>
    /// <ul>
    /// <li> <p> To indicate passive mode (for FTP and FTPS protocols), use the <code>PassiveIp</code> parameter. Enter a single dotted-quad IPv4 address, such as the external IP address of a firewall, router, or load balancer. </p> </li>
    /// <li> <p>To ignore the error that is generated when the client attempts to use the <code>SETSTAT</code> command on a file that you are uploading to an Amazon S3 bucket, use the <code>SetStatOption</code> parameter. To have the Transfer Family server ignore the <code>SETSTAT</code> command and upload files without needing to make any changes to your SFTP client, set the value to <code>ENABLE_NO_OP</code>. If you set the <code>SetStatOption</code> parameter to <code>ENABLE_NO_OP</code>, Transfer Family generates a log entry to Amazon CloudWatch Logs, so that you can determine when the client is making a <code>SETSTAT</code> call.</p> </li>
    /// <li> <p>To determine whether your Transfer Family server resumes recent, negotiated sessions through a unique session ID, use the <code>TlsSessionResumptionMode</code> parameter.</p> </li>
    /// <li> <p> <code>As2Transports</code> indicates the transport method for the AS2 messages. Currently, only HTTP is supported.</p> </li>
    /// </ul>
    pub fn protocol_details(mut self, input: crate::types::ProtocolDetails) -> Self {
        self.inner = self.inner.protocol_details(input);
        self
    }
    /// <p>The protocol settings that are configured for your server.</p>
    /// <ul>
    /// <li> <p> To indicate passive mode (for FTP and FTPS protocols), use the <code>PassiveIp</code> parameter. Enter a single dotted-quad IPv4 address, such as the external IP address of a firewall, router, or load balancer. </p> </li>
    /// <li> <p>To ignore the error that is generated when the client attempts to use the <code>SETSTAT</code> command on a file that you are uploading to an Amazon S3 bucket, use the <code>SetStatOption</code> parameter. To have the Transfer Family server ignore the <code>SETSTAT</code> command and upload files without needing to make any changes to your SFTP client, set the value to <code>ENABLE_NO_OP</code>. If you set the <code>SetStatOption</code> parameter to <code>ENABLE_NO_OP</code>, Transfer Family generates a log entry to Amazon CloudWatch Logs, so that you can determine when the client is making a <code>SETSTAT</code> call.</p> </li>
    /// <li> <p>To determine whether your Transfer Family server resumes recent, negotiated sessions through a unique session ID, use the <code>TlsSessionResumptionMode</code> parameter.</p> </li>
    /// <li> <p> <code>As2Transports</code> indicates the transport method for the AS2 messages. Currently, only HTTP is supported.</p> </li>
    /// </ul>
    pub fn set_protocol_details(
        mut self,
        input: std::option::Option<crate::types::ProtocolDetails>,
    ) -> Self {
        self.inner = self.inner.set_protocol_details(input);
        self
    }
    /// <p>The virtual private cloud (VPC) endpoint settings that are configured for your server. When you host your endpoint within your VPC, you can make your endpoint accessible only to resources within your VPC, or you can attach Elastic IP addresses and make your endpoint accessible to clients over the internet. Your VPC's default security groups are automatically assigned to your endpoint.</p>
    pub fn endpoint_details(mut self, input: crate::types::EndpointDetails) -> Self {
        self.inner = self.inner.endpoint_details(input);
        self
    }
    /// <p>The virtual private cloud (VPC) endpoint settings that are configured for your server. When you host your endpoint within your VPC, you can make your endpoint accessible only to resources within your VPC, or you can attach Elastic IP addresses and make your endpoint accessible to clients over the internet. Your VPC's default security groups are automatically assigned to your endpoint.</p>
    pub fn set_endpoint_details(
        mut self,
        input: std::option::Option<crate::types::EndpointDetails>,
    ) -> Self {
        self.inner = self.inner.set_endpoint_details(input);
        self
    }
    /// <p>The type of endpoint that you want your server to use. You can choose to make your server's endpoint publicly accessible (PUBLIC) or host it inside your VPC. With an endpoint that is hosted in a VPC, you can restrict access to your server and resources only within your VPC or choose to make it internet facing by attaching Elastic IP addresses directly to it.</p> <note>
    /// <p> After May 19, 2021, you won't be able to create a server using <code>EndpointType=VPC_ENDPOINT</code> in your Amazon Web Servicesaccount if your account hasn't already done so before May 19, 2021. If you have already created servers with <code>EndpointType=VPC_ENDPOINT</code> in your Amazon Web Servicesaccount on or before May 19, 2021, you will not be affected. After this date, use <code>EndpointType</code>=<code>VPC</code>.</p>
    /// <p>For more information, see https://docs.aws.amazon.com/transfer/latest/userguide/create-server-in-vpc.html#deprecate-vpc-endpoint.</p>
    /// <p>It is recommended that you use <code>VPC</code> as the <code>EndpointType</code>. With this endpoint type, you have the option to directly associate up to three Elastic IPv4 addresses (BYO IP included) with your server's endpoint and use VPC security groups to restrict traffic by the client's public IP address. This is not possible with <code>EndpointType</code> set to <code>VPC_ENDPOINT</code>.</p>
    /// </note>
    pub fn endpoint_type(mut self, input: crate::types::EndpointType) -> Self {
        self.inner = self.inner.endpoint_type(input);
        self
    }
    /// <p>The type of endpoint that you want your server to use. You can choose to make your server's endpoint publicly accessible (PUBLIC) or host it inside your VPC. With an endpoint that is hosted in a VPC, you can restrict access to your server and resources only within your VPC or choose to make it internet facing by attaching Elastic IP addresses directly to it.</p> <note>
    /// <p> After May 19, 2021, you won't be able to create a server using <code>EndpointType=VPC_ENDPOINT</code> in your Amazon Web Servicesaccount if your account hasn't already done so before May 19, 2021. If you have already created servers with <code>EndpointType=VPC_ENDPOINT</code> in your Amazon Web Servicesaccount on or before May 19, 2021, you will not be affected. After this date, use <code>EndpointType</code>=<code>VPC</code>.</p>
    /// <p>For more information, see https://docs.aws.amazon.com/transfer/latest/userguide/create-server-in-vpc.html#deprecate-vpc-endpoint.</p>
    /// <p>It is recommended that you use <code>VPC</code> as the <code>EndpointType</code>. With this endpoint type, you have the option to directly associate up to three Elastic IPv4 addresses (BYO IP included) with your server's endpoint and use VPC security groups to restrict traffic by the client's public IP address. This is not possible with <code>EndpointType</code> set to <code>VPC_ENDPOINT</code>.</p>
    /// </note>
    pub fn set_endpoint_type(
        mut self,
        input: std::option::Option<crate::types::EndpointType>,
    ) -> Self {
        self.inner = self.inner.set_endpoint_type(input);
        self
    }
    /// <p>The RSA, ECDSA, or ED25519 private key to use for your SFTP-enabled server. You can add multiple host keys, in case you want to rotate keys, or have a set of active keys that use different algorithms.</p>
    /// <p>Use the following command to generate an RSA 2048 bit key with no passphrase:</p>
    /// <p> <code>ssh-keygen -t rsa -b 2048 -N "" -m PEM -f my-new-server-key</code>.</p>
    /// <p>Use a minimum value of 2048 for the <code>-b</code> option. You can create a stronger key by using 3072 or 4096.</p>
    /// <p>Use the following command to generate an ECDSA 256 bit key with no passphrase:</p>
    /// <p> <code>ssh-keygen -t ecdsa -b 256 -N "" -m PEM -f my-new-server-key</code>.</p>
    /// <p>Valid values for the <code>-b</code> option for ECDSA are 256, 384, and 521.</p>
    /// <p>Use the following command to generate an ED25519 key with no passphrase:</p>
    /// <p> <code>ssh-keygen -t ed25519 -N "" -f my-new-server-key</code>.</p>
    /// <p>For all of these commands, you can replace <i>my-new-server-key</i> with a string of your choice.</p> <important>
    /// <p>If you aren't planning to migrate existing users from an existing SFTP-enabled server to a new server, don't update the host key. Accidentally changing a server's host key can be disruptive.</p>
    /// </important>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/transfer/latest/userguide/edit-server-config.html#configuring-servers-change-host-key">Update host keys for your SFTP-enabled server</a> in the <i>Transfer Family User Guide</i>.</p>
    pub fn host_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.host_key(input.into());
        self
    }
    /// <p>The RSA, ECDSA, or ED25519 private key to use for your SFTP-enabled server. You can add multiple host keys, in case you want to rotate keys, or have a set of active keys that use different algorithms.</p>
    /// <p>Use the following command to generate an RSA 2048 bit key with no passphrase:</p>
    /// <p> <code>ssh-keygen -t rsa -b 2048 -N "" -m PEM -f my-new-server-key</code>.</p>
    /// <p>Use a minimum value of 2048 for the <code>-b</code> option. You can create a stronger key by using 3072 or 4096.</p>
    /// <p>Use the following command to generate an ECDSA 256 bit key with no passphrase:</p>
    /// <p> <code>ssh-keygen -t ecdsa -b 256 -N "" -m PEM -f my-new-server-key</code>.</p>
    /// <p>Valid values for the <code>-b</code> option for ECDSA are 256, 384, and 521.</p>
    /// <p>Use the following command to generate an ED25519 key with no passphrase:</p>
    /// <p> <code>ssh-keygen -t ed25519 -N "" -f my-new-server-key</code>.</p>
    /// <p>For all of these commands, you can replace <i>my-new-server-key</i> with a string of your choice.</p> <important>
    /// <p>If you aren't planning to migrate existing users from an existing SFTP-enabled server to a new server, don't update the host key. Accidentally changing a server's host key can be disruptive.</p>
    /// </important>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/transfer/latest/userguide/edit-server-config.html#configuring-servers-change-host-key">Update host keys for your SFTP-enabled server</a> in the <i>Transfer Family User Guide</i>.</p>
    pub fn set_host_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_host_key(input);
        self
    }
    /// <p>An array containing all of the information required to call a customer's authentication API method.</p>
    pub fn identity_provider_details(
        mut self,
        input: crate::types::IdentityProviderDetails,
    ) -> Self {
        self.inner = self.inner.identity_provider_details(input);
        self
    }
    /// <p>An array containing all of the information required to call a customer's authentication API method.</p>
    pub fn set_identity_provider_details(
        mut self,
        input: std::option::Option<crate::types::IdentityProviderDetails>,
    ) -> Self {
        self.inner = self.inner.set_identity_provider_details(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that allows a server to turn on Amazon CloudWatch logging for Amazon S3 or Amazon EFSevents. When set, you can view user activity in your CloudWatch logs.</p>
    pub fn logging_role(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.logging_role(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that allows a server to turn on Amazon CloudWatch logging for Amazon S3 or Amazon EFSevents. When set, you can view user activity in your CloudWatch logs.</p>
    pub fn set_logging_role(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_logging_role(input);
        self
    }
    /// <p>Specifies a string to display when users connect to a server. This string is displayed after the user authenticates.</p> <note>
    /// <p>The SFTP protocol does not support post-authentication display banners.</p>
    /// </note>
    pub fn post_authentication_login_banner(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.post_authentication_login_banner(input.into());
        self
    }
    /// <p>Specifies a string to display when users connect to a server. This string is displayed after the user authenticates.</p> <note>
    /// <p>The SFTP protocol does not support post-authentication display banners.</p>
    /// </note>
    pub fn set_post_authentication_login_banner(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_post_authentication_login_banner(input);
        self
    }
    /// <p>Specifies a string to display when users connect to a server. This string is displayed before the user authenticates. For example, the following banner displays details about using the system:</p>
    /// <p> <code>This system is for the use of authorized users only. Individuals using this computer system without authority, or in excess of their authority, are subject to having all of their activities on this system monitored and recorded by system personnel.</code> </p>
    pub fn pre_authentication_login_banner(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.pre_authentication_login_banner(input.into());
        self
    }
    /// <p>Specifies a string to display when users connect to a server. This string is displayed before the user authenticates. For example, the following banner displays details about using the system:</p>
    /// <p> <code>This system is for the use of authorized users only. Individuals using this computer system without authority, or in excess of their authority, are subject to having all of their activities on this system monitored and recorded by system personnel.</code> </p>
    pub fn set_pre_authentication_login_banner(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_pre_authentication_login_banner(input);
        self
    }
    /// Appends an item to `Protocols`.
    ///
    /// To override the contents of this collection use [`set_protocols`](Self::set_protocols).
    ///
    /// <p>Specifies the file transfer protocol or protocols over which your file transfer protocol client can connect to your server's endpoint. The available protocols are:</p>
    /// <ul>
    /// <li> <p> <code>SFTP</code> (Secure Shell (SSH) File Transfer Protocol): File transfer over SSH</p> </li>
    /// <li> <p> <code>FTPS</code> (File Transfer Protocol Secure): File transfer with TLS encryption</p> </li>
    /// <li> <p> <code>FTP</code> (File Transfer Protocol): Unencrypted file transfer</p> </li>
    /// <li> <p> <code>AS2</code> (Applicability Statement 2): used for transporting structured business-to-business data</p> </li>
    /// </ul> <note>
    /// <ul>
    /// <li> <p>If you select <code>FTPS</code>, you must choose a certificate stored in Certificate Manager (ACM) which is used to identify your server when clients connect to it over FTPS.</p> </li>
    /// <li> <p>If <code>Protocol</code> includes either <code>FTP</code> or <code>FTPS</code>, then the <code>EndpointType</code> must be <code>VPC</code> and the <code>IdentityProviderType</code> must be <code>AWS_DIRECTORY_SERVICE</code> or <code>API_GATEWAY</code>.</p> </li>
    /// <li> <p>If <code>Protocol</code> includes <code>FTP</code>, then <code>AddressAllocationIds</code> cannot be associated.</p> </li>
    /// <li> <p>If <code>Protocol</code> is set only to <code>SFTP</code>, the <code>EndpointType</code> can be set to <code>PUBLIC</code> and the <code>IdentityProviderType</code> can be set to <code>SERVICE_MANAGED</code>.</p> </li>
    /// <li> <p>If <code>Protocol</code> includes <code>AS2</code>, then the <code>EndpointType</code> must be <code>VPC</code>, and domain must be Amazon S3.</p> </li>
    /// </ul>
    /// </note>
    pub fn protocols(mut self, input: crate::types::Protocol) -> Self {
        self.inner = self.inner.protocols(input);
        self
    }
    /// <p>Specifies the file transfer protocol or protocols over which your file transfer protocol client can connect to your server's endpoint. The available protocols are:</p>
    /// <ul>
    /// <li> <p> <code>SFTP</code> (Secure Shell (SSH) File Transfer Protocol): File transfer over SSH</p> </li>
    /// <li> <p> <code>FTPS</code> (File Transfer Protocol Secure): File transfer with TLS encryption</p> </li>
    /// <li> <p> <code>FTP</code> (File Transfer Protocol): Unencrypted file transfer</p> </li>
    /// <li> <p> <code>AS2</code> (Applicability Statement 2): used for transporting structured business-to-business data</p> </li>
    /// </ul> <note>
    /// <ul>
    /// <li> <p>If you select <code>FTPS</code>, you must choose a certificate stored in Certificate Manager (ACM) which is used to identify your server when clients connect to it over FTPS.</p> </li>
    /// <li> <p>If <code>Protocol</code> includes either <code>FTP</code> or <code>FTPS</code>, then the <code>EndpointType</code> must be <code>VPC</code> and the <code>IdentityProviderType</code> must be <code>AWS_DIRECTORY_SERVICE</code> or <code>API_GATEWAY</code>.</p> </li>
    /// <li> <p>If <code>Protocol</code> includes <code>FTP</code>, then <code>AddressAllocationIds</code> cannot be associated.</p> </li>
    /// <li> <p>If <code>Protocol</code> is set only to <code>SFTP</code>, the <code>EndpointType</code> can be set to <code>PUBLIC</code> and the <code>IdentityProviderType</code> can be set to <code>SERVICE_MANAGED</code>.</p> </li>
    /// <li> <p>If <code>Protocol</code> includes <code>AS2</code>, then the <code>EndpointType</code> must be <code>VPC</code>, and domain must be Amazon S3.</p> </li>
    /// </ul>
    /// </note>
    pub fn set_protocols(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Protocol>>,
    ) -> Self {
        self.inner = self.inner.set_protocols(input);
        self
    }
    /// <p>Specifies the name of the security policy that is attached to the server.</p>
    pub fn security_policy_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.security_policy_name(input.into());
        self
    }
    /// <p>Specifies the name of the security policy that is attached to the server.</p>
    pub fn set_security_policy_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_security_policy_name(input);
        self
    }
    /// <p>A system-assigned unique identifier for a server instance that the user account is assigned to.</p>
    pub fn server_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.server_id(input.into());
        self
    }
    /// <p>A system-assigned unique identifier for a server instance that the user account is assigned to.</p>
    pub fn set_server_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_server_id(input);
        self
    }
    /// <p>Specifies the workflow ID for the workflow to assign and the execution role that's used for executing the workflow.</p>
    /// <p>In additon to a workflow to execute when a file is uploaded completely, <code>WorkflowDeatails</code> can also contain a workflow ID (and execution role) for a workflow to execute on partial upload. A partial upload occurs when a file is open when the session disconnects.</p>
    /// <p>To remove an associated workflow from a server, you can provide an empty <code>OnUpload</code> object, as in the following example.</p>
    /// <p> <code>aws transfer update-server --server-id s-01234567890abcdef --workflow-details '{"OnUpload":[]}'</code> </p>
    pub fn workflow_details(mut self, input: crate::types::WorkflowDetails) -> Self {
        self.inner = self.inner.workflow_details(input);
        self
    }
    /// <p>Specifies the workflow ID for the workflow to assign and the execution role that's used for executing the workflow.</p>
    /// <p>In additon to a workflow to execute when a file is uploaded completely, <code>WorkflowDeatails</code> can also contain a workflow ID (and execution role) for a workflow to execute on partial upload. A partial upload occurs when a file is open when the session disconnects.</p>
    /// <p>To remove an associated workflow from a server, you can provide an empty <code>OnUpload</code> object, as in the following example.</p>
    /// <p> <code>aws transfer update-server --server-id s-01234567890abcdef --workflow-details '{"OnUpload":[]}'</code> </p>
    pub fn set_workflow_details(
        mut self,
        input: std::option::Option<crate::types::WorkflowDetails>,
    ) -> Self {
        self.inner = self.inner.set_workflow_details(input);
        self
    }
}
