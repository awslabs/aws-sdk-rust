// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TestIdentityProviderInput {
    /// <p>A system-assigned identifier for a specific server. That server's user authentication method is tested with a user name and password.</p>
    #[doc(hidden)]
    pub server_id: std::option::Option<std::string::String>,
    /// <p>The type of file transfer protocol to be tested.</p>
    /// <p>The available protocols are:</p>
    /// <ul>
    /// <li> <p>Secure Shell (SSH) File Transfer Protocol (SFTP)</p> </li>
    /// <li> <p>File Transfer Protocol Secure (FTPS)</p> </li>
    /// <li> <p>File Transfer Protocol (FTP)</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub server_protocol: std::option::Option<crate::types::Protocol>,
    /// <p>The source IP address of the user account to be tested.</p>
    #[doc(hidden)]
    pub source_ip: std::option::Option<std::string::String>,
    /// <p>The name of the user account to be tested.</p>
    #[doc(hidden)]
    pub user_name: std::option::Option<std::string::String>,
    /// <p>The password of the user account to be tested.</p>
    #[doc(hidden)]
    pub user_password: std::option::Option<std::string::String>,
}
impl TestIdentityProviderInput {
    /// <p>A system-assigned identifier for a specific server. That server's user authentication method is tested with a user name and password.</p>
    pub fn server_id(&self) -> std::option::Option<&str> {
        self.server_id.as_deref()
    }
    /// <p>The type of file transfer protocol to be tested.</p>
    /// <p>The available protocols are:</p>
    /// <ul>
    /// <li> <p>Secure Shell (SSH) File Transfer Protocol (SFTP)</p> </li>
    /// <li> <p>File Transfer Protocol Secure (FTPS)</p> </li>
    /// <li> <p>File Transfer Protocol (FTP)</p> </li>
    /// </ul>
    pub fn server_protocol(&self) -> std::option::Option<&crate::types::Protocol> {
        self.server_protocol.as_ref()
    }
    /// <p>The source IP address of the user account to be tested.</p>
    pub fn source_ip(&self) -> std::option::Option<&str> {
        self.source_ip.as_deref()
    }
    /// <p>The name of the user account to be tested.</p>
    pub fn user_name(&self) -> std::option::Option<&str> {
        self.user_name.as_deref()
    }
    /// <p>The password of the user account to be tested.</p>
    pub fn user_password(&self) -> std::option::Option<&str> {
        self.user_password.as_deref()
    }
}
impl std::fmt::Debug for TestIdentityProviderInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TestIdentityProviderInput");
        formatter.field("server_id", &self.server_id);
        formatter.field("server_protocol", &self.server_protocol);
        formatter.field("source_ip", &self.source_ip);
        formatter.field("user_name", &self.user_name);
        formatter.field("user_password", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl TestIdentityProviderInput {
    /// Creates a new builder-style object to manufacture [`TestIdentityProviderInput`](crate::operation::test_identity_provider::TestIdentityProviderInput).
    pub fn builder(
    ) -> crate::operation::test_identity_provider::builders::TestIdentityProviderInputBuilder {
        crate::operation::test_identity_provider::builders::TestIdentityProviderInputBuilder::default()
    }
}

/// A builder for [`TestIdentityProviderInput`](crate::operation::test_identity_provider::TestIdentityProviderInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct TestIdentityProviderInputBuilder {
    pub(crate) server_id: std::option::Option<std::string::String>,
    pub(crate) server_protocol: std::option::Option<crate::types::Protocol>,
    pub(crate) source_ip: std::option::Option<std::string::String>,
    pub(crate) user_name: std::option::Option<std::string::String>,
    pub(crate) user_password: std::option::Option<std::string::String>,
}
impl TestIdentityProviderInputBuilder {
    /// <p>A system-assigned identifier for a specific server. That server's user authentication method is tested with a user name and password.</p>
    pub fn server_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.server_id = Some(input.into());
        self
    }
    /// <p>A system-assigned identifier for a specific server. That server's user authentication method is tested with a user name and password.</p>
    pub fn set_server_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.server_id = input;
        self
    }
    /// <p>The type of file transfer protocol to be tested.</p>
    /// <p>The available protocols are:</p>
    /// <ul>
    /// <li> <p>Secure Shell (SSH) File Transfer Protocol (SFTP)</p> </li>
    /// <li> <p>File Transfer Protocol Secure (FTPS)</p> </li>
    /// <li> <p>File Transfer Protocol (FTP)</p> </li>
    /// </ul>
    pub fn server_protocol(mut self, input: crate::types::Protocol) -> Self {
        self.server_protocol = Some(input);
        self
    }
    /// <p>The type of file transfer protocol to be tested.</p>
    /// <p>The available protocols are:</p>
    /// <ul>
    /// <li> <p>Secure Shell (SSH) File Transfer Protocol (SFTP)</p> </li>
    /// <li> <p>File Transfer Protocol Secure (FTPS)</p> </li>
    /// <li> <p>File Transfer Protocol (FTP)</p> </li>
    /// </ul>
    pub fn set_server_protocol(
        mut self,
        input: std::option::Option<crate::types::Protocol>,
    ) -> Self {
        self.server_protocol = input;
        self
    }
    /// <p>The source IP address of the user account to be tested.</p>
    pub fn source_ip(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_ip = Some(input.into());
        self
    }
    /// <p>The source IP address of the user account to be tested.</p>
    pub fn set_source_ip(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source_ip = input;
        self
    }
    /// <p>The name of the user account to be tested.</p>
    pub fn user_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_name = Some(input.into());
        self
    }
    /// <p>The name of the user account to be tested.</p>
    pub fn set_user_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_name = input;
        self
    }
    /// <p>The password of the user account to be tested.</p>
    pub fn user_password(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_password = Some(input.into());
        self
    }
    /// <p>The password of the user account to be tested.</p>
    pub fn set_user_password(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_password = input;
        self
    }
    /// Consumes the builder and constructs a [`TestIdentityProviderInput`](crate::operation::test_identity_provider::TestIdentityProviderInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::test_identity_provider::TestIdentityProviderInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::test_identity_provider::TestIdentityProviderInput {
                server_id: self.server_id,
                server_protocol: self.server_protocol,
                source_ip: self.source_ip,
                user_name: self.user_name,
                user_password: self.user_password,
            },
        )
    }
}
impl std::fmt::Debug for TestIdentityProviderInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TestIdentityProviderInputBuilder");
        formatter.field("server_id", &self.server_id);
        formatter.field("server_protocol", &self.server_protocol);
        formatter.field("source_ip", &self.source_ip);
        formatter.field("user_name", &self.user_name);
        formatter.field("user_password", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
