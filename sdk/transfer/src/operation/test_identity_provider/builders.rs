// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::test_identity_provider::_test_identity_provider_output::TestIdentityProviderOutputBuilder;

pub use crate::operation::test_identity_provider::_test_identity_provider_input::TestIdentityProviderInputBuilder;

/// Fluent builder constructing a request to `TestIdentityProvider`.
///
/// <p>If the <code>IdentityProviderType</code> of a file transfer protocol-enabled server is <code>AWS_DIRECTORY_SERVICE</code> or <code>API_Gateway</code>, tests whether your identity provider is set up successfully. We highly recommend that you call this operation to test your authentication method as soon as you create your server. By doing so, you can troubleshoot issues with the identity provider integration to ensure that your users can successfully use the service.</p>
/// <p> The <code>ServerId</code> and <code>UserName</code> parameters are required. The <code>ServerProtocol</code>, <code>SourceIp</code>, and <code>UserPassword</code> are all optional. </p> <note>
/// <p> You cannot use <code>TestIdentityProvider</code> if the <code>IdentityProviderType</code> of your server is <code>SERVICE_MANAGED</code>. </p>
/// </note>
/// <ul>
/// <li> <p> If you provide any incorrect values for any parameters, the <code>Response</code> field is empty. </p> </li>
/// <li> <p> If you provide a server ID for a server that uses service-managed users, you get an error: </p> <p> <code> An error occurred (InvalidRequestException) when calling the TestIdentityProvider operation: s-<i>server-ID</i> not configured for external auth </code> </p> </li>
/// <li> <p> If you enter a Server ID for the <code>--server-id</code> parameter that does not identify an actual Transfer server, you receive the following error: </p> <p> <code>An error occurred (ResourceNotFoundException) when calling the TestIdentityProvider operation: Unknown server</code> </p> </li>
/// </ul>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct TestIdentityProviderFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::test_identity_provider::builders::TestIdentityProviderInputBuilder,
}
impl TestIdentityProviderFluentBuilder {
    /// Creates a new `TestIdentityProvider`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::test_identity_provider::TestIdentityProvider,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::test_identity_provider::TestIdentityProviderError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::test_identity_provider::TestIdentityProviderOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::test_identity_provider::TestIdentityProviderError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A system-assigned identifier for a specific server. That server's user authentication method is tested with a user name and password.</p>
    pub fn server_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.server_id(input.into());
        self
    }
    /// <p>A system-assigned identifier for a specific server. That server's user authentication method is tested with a user name and password.</p>
    pub fn set_server_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_server_id(input);
        self
    }
    /// <p>The type of file transfer protocol to be tested.</p>
    /// <p>The available protocols are:</p>
    /// <ul>
    /// <li> <p>Secure Shell (SSH) File Transfer Protocol (SFTP)</p> </li>
    /// <li> <p>File Transfer Protocol Secure (FTPS)</p> </li>
    /// <li> <p>File Transfer Protocol (FTP)</p> </li>
    /// </ul>
    pub fn server_protocol(mut self, input: crate::types::Protocol) -> Self {
        self.inner = self.inner.server_protocol(input);
        self
    }
    /// <p>The type of file transfer protocol to be tested.</p>
    /// <p>The available protocols are:</p>
    /// <ul>
    /// <li> <p>Secure Shell (SSH) File Transfer Protocol (SFTP)</p> </li>
    /// <li> <p>File Transfer Protocol Secure (FTPS)</p> </li>
    /// <li> <p>File Transfer Protocol (FTP)</p> </li>
    /// </ul>
    pub fn set_server_protocol(
        mut self,
        input: std::option::Option<crate::types::Protocol>,
    ) -> Self {
        self.inner = self.inner.set_server_protocol(input);
        self
    }
    /// <p>The source IP address of the user account to be tested.</p>
    pub fn source_ip(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.source_ip(input.into());
        self
    }
    /// <p>The source IP address of the user account to be tested.</p>
    pub fn set_source_ip(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_source_ip(input);
        self
    }
    /// <p>The name of the user account to be tested.</p>
    pub fn user_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.user_name(input.into());
        self
    }
    /// <p>The name of the user account to be tested.</p>
    pub fn set_user_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_user_name(input);
        self
    }
    /// <p>The password of the user account to be tested.</p>
    pub fn user_password(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.user_password(input.into());
        self
    }
    /// <p>The password of the user account to be tested.</p>
    pub fn set_user_password(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_user_password(input);
        self
    }
}
