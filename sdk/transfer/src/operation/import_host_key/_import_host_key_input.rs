// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ImportHostKeyInput {
    /// <p>The identifier of the server that contains the host key that you are importing.</p>
    pub server_id: ::std::option::Option<::std::string::String>,
    /// <p>The private key portion of an SSH key pair.</p>
    /// <p>Transfer Family accepts RSA, ECDSA, and ED25519 keys.</p>
    pub host_key_body: ::std::option::Option<::std::string::String>,
    /// <p>The text description that identifies this host key.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Key-value pairs that can be used to group and search for host keys.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl ImportHostKeyInput {
    /// <p>The identifier of the server that contains the host key that you are importing.</p>
    pub fn server_id(&self) -> ::std::option::Option<&str> {
        self.server_id.as_deref()
    }
    /// <p>The private key portion of an SSH key pair.</p>
    /// <p>Transfer Family accepts RSA, ECDSA, and ED25519 keys.</p>
    pub fn host_key_body(&self) -> ::std::option::Option<&str> {
        self.host_key_body.as_deref()
    }
    /// <p>The text description that identifies this host key.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Key-value pairs that can be used to group and search for host keys.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for ImportHostKeyInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ImportHostKeyInput");
        formatter.field("server_id", &self.server_id);
        formatter.field("host_key_body", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &self.description);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
impl ImportHostKeyInput {
    /// Creates a new builder-style object to manufacture [`ImportHostKeyInput`](crate::operation::import_host_key::ImportHostKeyInput).
    pub fn builder() -> crate::operation::import_host_key::builders::ImportHostKeyInputBuilder {
        crate::operation::import_host_key::builders::ImportHostKeyInputBuilder::default()
    }
}

/// A builder for [`ImportHostKeyInput`](crate::operation::import_host_key::ImportHostKeyInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct ImportHostKeyInputBuilder {
    pub(crate) server_id: ::std::option::Option<::std::string::String>,
    pub(crate) host_key_body: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl ImportHostKeyInputBuilder {
    /// <p>The identifier of the server that contains the host key that you are importing.</p>
    /// This field is required.
    pub fn server_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.server_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the server that contains the host key that you are importing.</p>
    pub fn set_server_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.server_id = input;
        self
    }
    /// <p>The identifier of the server that contains the host key that you are importing.</p>
    pub fn get_server_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.server_id
    }
    /// <p>The private key portion of an SSH key pair.</p>
    /// <p>Transfer Family accepts RSA, ECDSA, and ED25519 keys.</p>
    /// This field is required.
    pub fn host_key_body(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.host_key_body = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The private key portion of an SSH key pair.</p>
    /// <p>Transfer Family accepts RSA, ECDSA, and ED25519 keys.</p>
    pub fn set_host_key_body(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.host_key_body = input;
        self
    }
    /// <p>The private key portion of an SSH key pair.</p>
    /// <p>Transfer Family accepts RSA, ECDSA, and ED25519 keys.</p>
    pub fn get_host_key_body(&self) -> &::std::option::Option<::std::string::String> {
        &self.host_key_body
    }
    /// <p>The text description that identifies this host key.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The text description that identifies this host key.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The text description that identifies this host key.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Key-value pairs that can be used to group and search for host keys.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Key-value pairs that can be used to group and search for host keys.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Key-value pairs that can be used to group and search for host keys.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`ImportHostKeyInput`](crate::operation::import_host_key::ImportHostKeyInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::import_host_key::ImportHostKeyInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::import_host_key::ImportHostKeyInput {
            server_id: self.server_id,
            host_key_body: self.host_key_body,
            description: self.description,
            tags: self.tags,
        })
    }
}
impl ::std::fmt::Debug for ImportHostKeyInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ImportHostKeyInputBuilder");
        formatter.field("server_id", &self.server_id);
        formatter.field("host_key_body", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &self.description);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
