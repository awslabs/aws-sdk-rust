// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartFileTransferInput {
    /// <p>The unique identifier for the connector. </p>
    #[doc(hidden)]
    pub connector_id: std::option::Option<std::string::String>,
    /// <p>An array of strings. Each string represents the absolute path for one outbound file transfer. For example, <code> <i>DOC-EXAMPLE-BUCKET</i>/<i>myfile.txt</i> </code>. </p>
    #[doc(hidden)]
    pub send_file_paths: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl StartFileTransferInput {
    /// <p>The unique identifier for the connector. </p>
    pub fn connector_id(&self) -> std::option::Option<&str> {
        self.connector_id.as_deref()
    }
    /// <p>An array of strings. Each string represents the absolute path for one outbound file transfer. For example, <code> <i>DOC-EXAMPLE-BUCKET</i>/<i>myfile.txt</i> </code>. </p>
    pub fn send_file_paths(&self) -> std::option::Option<&[std::string::String]> {
        self.send_file_paths.as_deref()
    }
}
impl StartFileTransferInput {
    /// Creates a new builder-style object to manufacture [`StartFileTransferInput`](crate::operation::start_file_transfer::StartFileTransferInput).
    pub fn builder(
    ) -> crate::operation::start_file_transfer::builders::StartFileTransferInputBuilder {
        crate::operation::start_file_transfer::builders::StartFileTransferInputBuilder::default()
    }
}

/// A builder for [`StartFileTransferInput`](crate::operation::start_file_transfer::StartFileTransferInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StartFileTransferInputBuilder {
    pub(crate) connector_id: std::option::Option<std::string::String>,
    pub(crate) send_file_paths: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl StartFileTransferInputBuilder {
    /// <p>The unique identifier for the connector. </p>
    pub fn connector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.connector_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the connector. </p>
    pub fn set_connector_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.connector_id = input;
        self
    }
    /// Appends an item to `send_file_paths`.
    ///
    /// To override the contents of this collection use [`set_send_file_paths`](Self::set_send_file_paths).
    ///
    /// <p>An array of strings. Each string represents the absolute path for one outbound file transfer. For example, <code> <i>DOC-EXAMPLE-BUCKET</i>/<i>myfile.txt</i> </code>. </p>
    pub fn send_file_paths(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.send_file_paths.unwrap_or_default();
        v.push(input.into());
        self.send_file_paths = Some(v);
        self
    }
    /// <p>An array of strings. Each string represents the absolute path for one outbound file transfer. For example, <code> <i>DOC-EXAMPLE-BUCKET</i>/<i>myfile.txt</i> </code>. </p>
    pub fn set_send_file_paths(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.send_file_paths = input;
        self
    }
    /// Consumes the builder and constructs a [`StartFileTransferInput`](crate::operation::start_file_transfer::StartFileTransferInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::start_file_transfer::StartFileTransferInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::start_file_transfer::StartFileTransferInput {
                connector_id: self.connector_id,
                send_file_paths: self.send_file_paths,
            },
        )
    }
}
