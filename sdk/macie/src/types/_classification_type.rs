// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>(Discontinued) The classification type that Amazon Macie Classic applies to the associated S3 resources.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ClassificationType {
    /// <p>(Discontinued) A one-time classification of all of the existing objects in a specified S3 bucket. </p>
    #[doc(hidden)]
    pub one_time: std::option::Option<crate::types::S3OneTimeClassificationType>,
    /// <p>(Discontinued) A continuous classification of the objects that are added to a specified S3 bucket. Amazon Macie Classic begins performing continuous classification after a bucket is successfully associated with Macie Classic.</p>
    #[doc(hidden)]
    pub continuous: std::option::Option<crate::types::S3ContinuousClassificationType>,
}
impl ClassificationType {
    /// <p>(Discontinued) A one-time classification of all of the existing objects in a specified S3 bucket. </p>
    pub fn one_time(&self) -> std::option::Option<&crate::types::S3OneTimeClassificationType> {
        self.one_time.as_ref()
    }
    /// <p>(Discontinued) A continuous classification of the objects that are added to a specified S3 bucket. Amazon Macie Classic begins performing continuous classification after a bucket is successfully associated with Macie Classic.</p>
    pub fn continuous(&self) -> std::option::Option<&crate::types::S3ContinuousClassificationType> {
        self.continuous.as_ref()
    }
}
impl ClassificationType {
    /// Creates a new builder-style object to manufacture [`ClassificationType`](crate::types::ClassificationType).
    pub fn builder() -> crate::types::builders::ClassificationTypeBuilder {
        crate::types::builders::ClassificationTypeBuilder::default()
    }
}

/// A builder for [`ClassificationType`](crate::types::ClassificationType).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ClassificationTypeBuilder {
    pub(crate) one_time: std::option::Option<crate::types::S3OneTimeClassificationType>,
    pub(crate) continuous: std::option::Option<crate::types::S3ContinuousClassificationType>,
}
impl ClassificationTypeBuilder {
    /// <p>(Discontinued) A one-time classification of all of the existing objects in a specified S3 bucket. </p>
    pub fn one_time(mut self, input: crate::types::S3OneTimeClassificationType) -> Self {
        self.one_time = Some(input);
        self
    }
    /// <p>(Discontinued) A one-time classification of all of the existing objects in a specified S3 bucket. </p>
    pub fn set_one_time(
        mut self,
        input: std::option::Option<crate::types::S3OneTimeClassificationType>,
    ) -> Self {
        self.one_time = input;
        self
    }
    /// <p>(Discontinued) A continuous classification of the objects that are added to a specified S3 bucket. Amazon Macie Classic begins performing continuous classification after a bucket is successfully associated with Macie Classic.</p>
    pub fn continuous(mut self, input: crate::types::S3ContinuousClassificationType) -> Self {
        self.continuous = Some(input);
        self
    }
    /// <p>(Discontinued) A continuous classification of the objects that are added to a specified S3 bucket. Amazon Macie Classic begins performing continuous classification after a bucket is successfully associated with Macie Classic.</p>
    pub fn set_continuous(
        mut self,
        input: std::option::Option<crate::types::S3ContinuousClassificationType>,
    ) -> Self {
        self.continuous = input;
        self
    }
    /// Consumes the builder and constructs a [`ClassificationType`](crate::types::ClassificationType).
    pub fn build(self) -> crate::types::ClassificationType {
        crate::types::ClassificationType {
            one_time: self.one_time,
            continuous: self.continuous,
        }
    }
}
