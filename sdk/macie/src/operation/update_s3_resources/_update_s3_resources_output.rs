// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateS3ResourcesOutput {
    /// <p>(Discontinued) The S3 resources whose classification types can't be updated. An error code and an error message are provided for each failed item.</p>
    pub failed_s3_resources: ::std::option::Option<::std::vec::Vec<crate::types::FailedS3Resource>>,
    _request_id: Option<String>,
}
impl UpdateS3ResourcesOutput {
    /// <p>(Discontinued) The S3 resources whose classification types can't be updated. An error code and an error message are provided for each failed item.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.failed_s3_resources.is_none()`.
    pub fn failed_s3_resources(&self) -> &[crate::types::FailedS3Resource] {
        self.failed_s3_resources.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for UpdateS3ResourcesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateS3ResourcesOutput {
    /// Creates a new builder-style object to manufacture [`UpdateS3ResourcesOutput`](crate::operation::update_s3_resources::UpdateS3ResourcesOutput).
    pub fn builder() -> crate::operation::update_s3_resources::builders::UpdateS3ResourcesOutputBuilder {
        crate::operation::update_s3_resources::builders::UpdateS3ResourcesOutputBuilder::default()
    }
}

/// A builder for [`UpdateS3ResourcesOutput`](crate::operation::update_s3_resources::UpdateS3ResourcesOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateS3ResourcesOutputBuilder {
    pub(crate) failed_s3_resources: ::std::option::Option<::std::vec::Vec<crate::types::FailedS3Resource>>,
    _request_id: Option<String>,
}
impl UpdateS3ResourcesOutputBuilder {
    /// Appends an item to `failed_s3_resources`.
    ///
    /// To override the contents of this collection use [`set_failed_s3_resources`](Self::set_failed_s3_resources).
    ///
    /// <p>(Discontinued) The S3 resources whose classification types can't be updated. An error code and an error message are provided for each failed item.</p>
    pub fn failed_s3_resources(mut self, input: crate::types::FailedS3Resource) -> Self {
        let mut v = self.failed_s3_resources.unwrap_or_default();
        v.push(input);
        self.failed_s3_resources = ::std::option::Option::Some(v);
        self
    }
    /// <p>(Discontinued) The S3 resources whose classification types can't be updated. An error code and an error message are provided for each failed item.</p>
    pub fn set_failed_s3_resources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FailedS3Resource>>) -> Self {
        self.failed_s3_resources = input;
        self
    }
    /// <p>(Discontinued) The S3 resources whose classification types can't be updated. An error code and an error message are provided for each failed item.</p>
    pub fn get_failed_s3_resources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FailedS3Resource>> {
        &self.failed_s3_resources
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateS3ResourcesOutput`](crate::operation::update_s3_resources::UpdateS3ResourcesOutput).
    pub fn build(self) -> crate::operation::update_s3_resources::UpdateS3ResourcesOutput {
        crate::operation::update_s3_resources::UpdateS3ResourcesOutput {
            failed_s3_resources: self.failed_s3_resources,
            _request_id: self._request_id,
        }
    }
}
