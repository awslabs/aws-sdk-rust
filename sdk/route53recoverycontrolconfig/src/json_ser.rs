// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_cluster_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateClusterInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("ClientToken").string(var_1);
    }
    if let Some(var_2) = &input.cluster_name {
        object.key("ClusterName").string(var_2);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_control_panel_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateControlPanelInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3) = &input.client_token {
        object.key("ClientToken").string(var_3);
    }
    if let Some(var_4) = &input.cluster_arn {
        object.key("ClusterArn").string(var_4);
    }
    if let Some(var_5) = &input.control_panel_name {
        object.key("ControlPanelName").string(var_5);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_routing_control_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRoutingControlInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_6) = &input.client_token {
        object.key("ClientToken").string(var_6);
    }
    if let Some(var_7) = &input.cluster_arn {
        object.key("ClusterArn").string(var_7);
    }
    if let Some(var_8) = &input.control_panel_arn {
        object.key("ControlPanelArn").string(var_8);
    }
    if let Some(var_9) = &input.routing_control_name {
        object.key("RoutingControlName").string(var_9);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_safety_rule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSafetyRuleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_10) = &input.assertion_rule {
        let mut object_11 = object.key("AssertionRule").start_object();
        crate::json_ser::serialize_structure_crate_model_new_assertion_rule(
            &mut object_11,
            var_10,
        )?;
        object_11.finish();
    }
    if let Some(var_12) = &input.client_token {
        object.key("ClientToken").string(var_12);
    }
    if let Some(var_13) = &input.gating_rule {
        let mut object_14 = object.key("GatingRule").start_object();
        crate::json_ser::serialize_structure_crate_model_new_gating_rule(&mut object_14, var_13)?;
        object_14.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_control_panel_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateControlPanelInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_15) = &input.control_panel_arn {
        object.key("ControlPanelArn").string(var_15);
    }
    if let Some(var_16) = &input.control_panel_name {
        object.key("ControlPanelName").string(var_16);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_routing_control_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRoutingControlInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_17) = &input.routing_control_arn {
        object.key("RoutingControlArn").string(var_17);
    }
    if let Some(var_18) = &input.routing_control_name {
        object.key("RoutingControlName").string(var_18);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_safety_rule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSafetyRuleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_19) = &input.assertion_rule_update {
        let mut object_20 = object.key("AssertionRuleUpdate").start_object();
        crate::json_ser::serialize_structure_crate_model_assertion_rule_update(
            &mut object_20,
            var_19,
        )?;
        object_20.finish();
    }
    if let Some(var_21) = &input.gating_rule_update {
        let mut object_22 = object.key("GatingRuleUpdate").start_object();
        crate::json_ser::serialize_structure_crate_model_gating_rule_update(
            &mut object_22,
            var_21,
        )?;
        object_22.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_new_assertion_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NewAssertionRule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_23) = &input.asserted_controls {
        let mut array_24 = object.key("AssertedControls").start_array();
        for item_25 in var_23 {
            {
                array_24.value().string(item_25);
            }
        }
        array_24.finish();
    }
    if let Some(var_26) = &input.control_panel_arn {
        object.key("ControlPanelArn").string(var_26);
    }
    if let Some(var_27) = &input.name {
        object.key("Name").string(var_27);
    }
    if let Some(var_28) = &input.rule_config {
        let mut object_29 = object.key("RuleConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_config(&mut object_29, var_28)?;
        object_29.finish();
    }
    {
        object.key("WaitPeriodMs").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.wait_period_ms).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_new_gating_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NewGatingRule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_30) = &input.control_panel_arn {
        object.key("ControlPanelArn").string(var_30);
    }
    if let Some(var_31) = &input.gating_controls {
        let mut array_32 = object.key("GatingControls").start_array();
        for item_33 in var_31 {
            {
                array_32.value().string(item_33);
            }
        }
        array_32.finish();
    }
    if let Some(var_34) = &input.name {
        object.key("Name").string(var_34);
    }
    if let Some(var_35) = &input.rule_config {
        let mut object_36 = object.key("RuleConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_config(&mut object_36, var_35)?;
        object_36.finish();
    }
    if let Some(var_37) = &input.target_controls {
        let mut array_38 = object.key("TargetControls").start_array();
        for item_39 in var_37 {
            {
                array_38.value().string(item_39);
            }
        }
        array_38.finish();
    }
    {
        object.key("WaitPeriodMs").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.wait_period_ms).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_assertion_rule_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssertionRuleUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_40) = &input.name {
        object.key("Name").string(var_40);
    }
    if let Some(var_41) = &input.safety_rule_arn {
        object.key("SafetyRuleArn").string(var_41);
    }
    {
        object.key("WaitPeriodMs").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.wait_period_ms).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_gating_rule_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GatingRuleUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_42) = &input.name {
        object.key("Name").string(var_42);
    }
    if let Some(var_43) = &input.safety_rule_arn {
        object.key("SafetyRuleArn").string(var_43);
    }
    {
        object.key("WaitPeriodMs").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.wait_period_ms).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("Inverted").boolean(input.inverted);
    }
    {
        object.key("Threshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.threshold).into()),
        );
    }
    if let Some(var_44) = &input.r#type {
        object.key("Type").string(var_44.as_str());
    }
    Ok(())
}
