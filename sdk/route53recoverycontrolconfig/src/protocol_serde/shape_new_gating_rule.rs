// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_new_gating_rule(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::NewGatingRule,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.control_panel_arn {
        object.key("ControlPanelArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.gating_controls {
        let mut array_3 = object.key("GatingControls").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    if let Some(var_5) = &input.name {
        object.key("Name").string(var_5.as_str());
    }
    if let Some(var_6) = &input.rule_config {
        #[allow(unused_mut)]
        let mut object_7 = object.key("RuleConfig").start_object();
        crate::protocol_serde::shape_rule_config::ser_rule_config(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.target_controls {
        let mut array_9 = object.key("TargetControls").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.wait_period_ms {
        object.key("WaitPeriodMs").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_11).into()),
        );
    }
    Ok(())
}
