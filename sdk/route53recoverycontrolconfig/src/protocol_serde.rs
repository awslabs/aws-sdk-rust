// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn type_erase_result<O, E>(
    result: ::std::result::Result<O, E>,
) -> ::std::result::Result<
    ::aws_smithy_runtime_api::client::interceptors::context::Output,
    ::aws_smithy_runtime_api::client::orchestrator::OrchestratorError<::aws_smithy_runtime_api::client::interceptors::context::Error>,
>
where
    O: ::std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
    E: ::std::error::Error + std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
{
    result
        .map(|output| ::aws_smithy_runtime_api::client::interceptors::context::Output::erase(output))
        .map_err(|error| ::aws_smithy_runtime_api::client::interceptors::context::Error::erase(error))
        .map_err(::std::convert::Into::into)
}

pub fn parse_http_error_metadata(
    _response_status: u16,
    response_headers: &::http::HeaderMap,
    response_body: &[u8],
) -> Result<::aws_smithy_types::error::metadata::Builder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    crate::json_errors::parse_error_metadata(response_body, response_headers)
}

pub(crate) mod shape_create_cluster;

pub(crate) mod shape_create_control_panel;

pub(crate) mod shape_create_routing_control;

pub(crate) mod shape_create_safety_rule;

pub(crate) mod shape_delete_cluster;

pub(crate) mod shape_delete_control_panel;

pub(crate) mod shape_delete_routing_control;

pub(crate) mod shape_delete_safety_rule;

pub(crate) mod shape_describe_cluster;

pub(crate) mod shape_describe_control_panel;

pub(crate) mod shape_describe_routing_control;

pub(crate) mod shape_describe_safety_rule;

pub(crate) mod shape_get_resource_policy;

pub(crate) mod shape_list_associated_route53_health_checks;

pub(crate) mod shape_list_clusters;

pub(crate) mod shape_list_control_panels;

pub(crate) mod shape_list_routing_controls;

pub(crate) mod shape_list_safety_rules;

pub(crate) mod shape_list_tags_for_resource;

pub(crate) mod shape_tag_resource;

pub(crate) mod shape_untag_resource;

pub(crate) mod shape_update_control_panel;

pub(crate) mod shape_update_routing_control;

pub(crate) mod shape_update_safety_rule;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_access_denied_exception;

pub(crate) mod shape_conflict_exception;

pub(crate) mod shape_create_cluster_input;

pub(crate) mod shape_create_control_panel_input;

pub(crate) mod shape_create_routing_control_input;

pub(crate) mod shape_create_safety_rule_input;

pub(crate) mod shape_internal_server_exception;

pub(crate) mod shape_resource_not_found_exception;

pub(crate) mod shape_service_quota_exceeded_exception;

pub(crate) mod shape_tag_resource_input;

pub(crate) mod shape_throttling_exception;

pub(crate) mod shape_update_control_panel_input;

pub(crate) mod shape_update_routing_control_input;

pub(crate) mod shape_update_safety_rule_input;

pub(crate) mod shape_validation_exception;

pub(crate) mod shape_assertion_rule;

pub(crate) mod shape_assertion_rule_update;

pub(crate) mod shape_cluster;

pub(crate) mod shape_control_panel;

pub(crate) mod shape_gating_rule;

pub(crate) mod shape_gating_rule_update;

pub(crate) mod shape_list_of_cluster;

pub(crate) mod shape_list_of_control_panel;

pub(crate) mod shape_list_of_routing_control;

pub(crate) mod shape_list_of_rule;

pub(crate) mod shape_list_of_string_max36_pattern_s;

pub(crate) mod shape_map_of_string_min0_max256_pattern_s;

pub(crate) mod shape_new_assertion_rule;

pub(crate) mod shape_new_gating_rule;

pub(crate) mod shape_routing_control;

pub(crate) mod shape_list_of_cluster_endpoint;

pub(crate) mod shape_list_of_string_min1_max256_pattern_a_za_z09;

pub(crate) mod shape_rule;

pub(crate) mod shape_rule_config;

pub(crate) mod shape_cluster_endpoint;
