// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateControlPanel`](crate::client::fluent_builders::CreateControlPanel) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateControlPanel::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateControlPanel::set_client_token): <p>A unique, case-sensitive string of up to 64 ASCII characters. To make an idempotent API request with an action, specify a client token in the request.</p>
    ///   - [`cluster_arn(impl Into<String>)`](crate::client::fluent_builders::CreateControlPanel::cluster_arn) / [`set_cluster_arn(Option<String>)`](crate::client::fluent_builders::CreateControlPanel::set_cluster_arn): <p>The Amazon Resource Name (ARN) of the cluster for the control panel.</p>
    ///   - [`control_panel_name(impl Into<String>)`](crate::client::fluent_builders::CreateControlPanel::control_panel_name) / [`set_control_panel_name(Option<String>)`](crate::client::fluent_builders::CreateControlPanel::set_control_panel_name): <p>The name of the control panel.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateControlPanel::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateControlPanel::set_tags): <p>The tags associated with the control panel.</p>
    /// - On success, responds with [`CreateControlPanelOutput`](crate::output::CreateControlPanelOutput) with field(s):
    ///   - [`control_panel(Option<ControlPanel>)`](crate::output::CreateControlPanelOutput::control_panel): <p>Information about a control panel.</p>
    /// - On failure, responds with [`SdkError<CreateControlPanelError>`](crate::error::CreateControlPanelError)
    pub fn create_control_panel(&self) -> crate::client::fluent_builders::CreateControlPanel {
        crate::client::fluent_builders::CreateControlPanel::new(self.handle.clone())
    }
}
