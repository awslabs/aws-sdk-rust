// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>403 response - You do not have sufficient access to perform this action.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>409 response - ConflictException. You might be using a predefined variable.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>500 response - InternalServiceError. Temporary service error. Retry the request.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>404 response - MalformedQueryString. The query string contains a syntax error or resource not found.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>402 response - You attempted to create more resources than the service allows based on service quotas.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>429 response - LimitExceededException or TooManyRequestsException.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>400 response - Multiple causes. For example, you might have a malformed query string and input parameter might be out of range, or you might have used parameters together incorrectly.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::create_cluster::CreateClusterError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_cluster::CreateClusterError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_cluster::CreateClusterError> for Error {
    fn from(err: crate::operation::create_cluster::CreateClusterError) -> Self {
        match err {
            crate::operation::create_cluster::CreateClusterError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_cluster::CreateClusterError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_cluster::CreateClusterError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::create_cluster::CreateClusterError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::create_cluster::CreateClusterError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_cluster::CreateClusterError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_cluster::CreateClusterError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_cluster::CreateClusterError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_control_panel::CreateControlPanelError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_control_panel::CreateControlPanelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_control_panel::CreateControlPanelError> for Error {
    fn from(err: crate::operation::create_control_panel::CreateControlPanelError) -> Self {
        match err {
            crate::operation::create_control_panel::CreateControlPanelError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_control_panel::CreateControlPanelError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_control_panel::CreateControlPanelError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_control_panel::CreateControlPanelError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_control_panel::CreateControlPanelError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_control_panel::CreateControlPanelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_control_panel::CreateControlPanelError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_control_panel::CreateControlPanelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_routing_control::CreateRoutingControlError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_routing_control::CreateRoutingControlError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_routing_control::CreateRoutingControlError> for Error {
    fn from(err: crate::operation::create_routing_control::CreateRoutingControlError) -> Self {
        match err {
            crate::operation::create_routing_control::CreateRoutingControlError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_routing_control::CreateRoutingControlError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_routing_control::CreateRoutingControlError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_routing_control::CreateRoutingControlError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_routing_control::CreateRoutingControlError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_routing_control::CreateRoutingControlError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_routing_control::CreateRoutingControlError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_routing_control::CreateRoutingControlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_safety_rule::CreateSafetyRuleError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_safety_rule::CreateSafetyRuleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_safety_rule::CreateSafetyRuleError> for Error {
    fn from(err: crate::operation::create_safety_rule::CreateSafetyRuleError) -> Self {
        match err {
            crate::operation::create_safety_rule::CreateSafetyRuleError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_safety_rule::CreateSafetyRuleError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_safety_rule::CreateSafetyRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::delete_cluster::DeleteClusterError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_cluster::DeleteClusterError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_cluster::DeleteClusterError> for Error {
    fn from(err: crate::operation::delete_cluster::DeleteClusterError) -> Self {
        match err {
            crate::operation::delete_cluster::DeleteClusterError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_cluster::DeleteClusterError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_cluster::DeleteClusterError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::delete_cluster::DeleteClusterError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_cluster::DeleteClusterError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_cluster::DeleteClusterError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_cluster::DeleteClusterError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_control_panel::DeleteControlPanelError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_control_panel::DeleteControlPanelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_control_panel::DeleteControlPanelError> for Error {
    fn from(err: crate::operation::delete_control_panel::DeleteControlPanelError) -> Self {
        match err {
            crate::operation::delete_control_panel::DeleteControlPanelError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_control_panel::DeleteControlPanelError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_control_panel::DeleteControlPanelError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_control_panel::DeleteControlPanelError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_control_panel::DeleteControlPanelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_control_panel::DeleteControlPanelError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_control_panel::DeleteControlPanelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_routing_control::DeleteRoutingControlError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_routing_control::DeleteRoutingControlError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_routing_control::DeleteRoutingControlError> for Error {
    fn from(err: crate::operation::delete_routing_control::DeleteRoutingControlError) -> Self {
        match err {
            crate::operation::delete_routing_control::DeleteRoutingControlError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_routing_control::DeleteRoutingControlError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_routing_control::DeleteRoutingControlError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_routing_control::DeleteRoutingControlError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_routing_control::DeleteRoutingControlError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_routing_control::DeleteRoutingControlError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_routing_control::DeleteRoutingControlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_safety_rule::DeleteSafetyRuleError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_safety_rule::DeleteSafetyRuleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_safety_rule::DeleteSafetyRuleError> for Error {
    fn from(err: crate::operation::delete_safety_rule::DeleteSafetyRuleError) -> Self {
        match err {
            crate::operation::delete_safety_rule::DeleteSafetyRuleError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_safety_rule::DeleteSafetyRuleError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_safety_rule::DeleteSafetyRuleError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_safety_rule::DeleteSafetyRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_cluster::DescribeClusterError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_cluster::DescribeClusterError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_cluster::DescribeClusterError> for Error {
    fn from(err: crate::operation::describe_cluster::DescribeClusterError) -> Self {
        match err {
            crate::operation::describe_cluster::DescribeClusterError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::describe_cluster::DescribeClusterError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::describe_cluster::DescribeClusterError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::describe_cluster::DescribeClusterError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_cluster::DescribeClusterError::ThrottlingException(
                inner,
            ) => Error::ThrottlingException(inner),
            crate::operation::describe_cluster::DescribeClusterError::ValidationException(
                inner,
            ) => Error::ValidationException(inner),
            crate::operation::describe_cluster::DescribeClusterError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_control_panel::DescribeControlPanelError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_control_panel::DescribeControlPanelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_control_panel::DescribeControlPanelError> for Error {
    fn from(err: crate::operation::describe_control_panel::DescribeControlPanelError) -> Self {
        match err {
            crate::operation::describe_control_panel::DescribeControlPanelError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_control_panel::DescribeControlPanelError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::describe_control_panel::DescribeControlPanelError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_control_panel::DescribeControlPanelError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_control_panel::DescribeControlPanelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_control_panel::DescribeControlPanelError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_control_panel::DescribeControlPanelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_routing_control::DescribeRoutingControlError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_routing_control::DescribeRoutingControlError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_routing_control::DescribeRoutingControlError> for Error {
    fn from(err: crate::operation::describe_routing_control::DescribeRoutingControlError) -> Self {
        match err {
            crate::operation::describe_routing_control::DescribeRoutingControlError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_routing_control::DescribeRoutingControlError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::describe_routing_control::DescribeRoutingControlError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_routing_control::DescribeRoutingControlError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_routing_control::DescribeRoutingControlError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_routing_control::DescribeRoutingControlError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_routing_control::DescribeRoutingControlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_safety_rule::DescribeSafetyRuleError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_safety_rule::DescribeSafetyRuleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_safety_rule::DescribeSafetyRuleError> for Error {
    fn from(err: crate::operation::describe_safety_rule::DescribeSafetyRuleError) -> Self {
        match err {
            crate::operation::describe_safety_rule::DescribeSafetyRuleError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_safety_rule::DescribeSafetyRuleError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_safety_rule::DescribeSafetyRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_associated_route53_health_checks::ListAssociatedRoute53HealthChecksError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_associated_route53_health_checks::ListAssociatedRoute53HealthChecksError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::list_associated_route53_health_checks::ListAssociatedRoute53HealthChecksError> for Error {
    fn from(err: crate::operation::list_associated_route53_health_checks::ListAssociatedRoute53HealthChecksError) -> Self {
        match err {
            crate::operation::list_associated_route53_health_checks::ListAssociatedRoute53HealthChecksError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_associated_route53_health_checks::ListAssociatedRoute53HealthChecksError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_associated_route53_health_checks::ListAssociatedRoute53HealthChecksError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_associated_route53_health_checks::ListAssociatedRoute53HealthChecksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_clusters::ListClustersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_clusters::ListClustersError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_clusters::ListClustersError> for Error {
    fn from(err: crate::operation::list_clusters::ListClustersError) -> Self {
        match err {
            crate::operation::list_clusters::ListClustersError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_clusters::ListClustersError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_clusters::ListClustersError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::list_clusters::ListClustersError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_clusters::ListClustersError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_clusters::ListClustersError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_control_panels::ListControlPanelsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_control_panels::ListControlPanelsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_control_panels::ListControlPanelsError> for Error {
    fn from(err: crate::operation::list_control_panels::ListControlPanelsError) -> Self {
        match err {
            crate::operation::list_control_panels::ListControlPanelsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_control_panels::ListControlPanelsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_control_panels::ListControlPanelsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_control_panels::ListControlPanelsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_control_panels::ListControlPanelsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_control_panels::ListControlPanelsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_routing_controls::ListRoutingControlsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_routing_controls::ListRoutingControlsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_routing_controls::ListRoutingControlsError> for Error {
    fn from(err: crate::operation::list_routing_controls::ListRoutingControlsError) -> Self {
        match err {
            crate::operation::list_routing_controls::ListRoutingControlsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_routing_controls::ListRoutingControlsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_routing_controls::ListRoutingControlsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_routing_controls::ListRoutingControlsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_routing_controls::ListRoutingControlsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_routing_controls::ListRoutingControlsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_safety_rules::ListSafetyRulesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_safety_rules::ListSafetyRulesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_safety_rules::ListSafetyRulesError> for Error {
    fn from(err: crate::operation::list_safety_rules::ListSafetyRulesError) -> Self {
        match err {
            crate::operation::list_safety_rules::ListSafetyRulesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_safety_rules::ListSafetyRulesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_safety_rules::ListSafetyRulesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_safety_rules::ListSafetyRulesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_safety_rules::ListSafetyRulesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_safety_rules::ListSafetyRulesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::untag_resource::UntagResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_control_panel::UpdateControlPanelError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_control_panel::UpdateControlPanelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_control_panel::UpdateControlPanelError> for Error {
    fn from(err: crate::operation::update_control_panel::UpdateControlPanelError) -> Self {
        match err {
            crate::operation::update_control_panel::UpdateControlPanelError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_control_panel::UpdateControlPanelError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_control_panel::UpdateControlPanelError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_control_panel::UpdateControlPanelError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_control_panel::UpdateControlPanelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_control_panel::UpdateControlPanelError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_control_panel::UpdateControlPanelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_routing_control::UpdateRoutingControlError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_routing_control::UpdateRoutingControlError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_routing_control::UpdateRoutingControlError> for Error {
    fn from(err: crate::operation::update_routing_control::UpdateRoutingControlError) -> Self {
        match err {
            crate::operation::update_routing_control::UpdateRoutingControlError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_routing_control::UpdateRoutingControlError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_routing_control::UpdateRoutingControlError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_routing_control::UpdateRoutingControlError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_routing_control::UpdateRoutingControlError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_routing_control::UpdateRoutingControlError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_routing_control::UpdateRoutingControlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_safety_rule::UpdateSafetyRuleError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_safety_rule::UpdateSafetyRuleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_safety_rule::UpdateSafetyRuleError> for Error {
    fn from(err: crate::operation::update_safety_rule::UpdateSafetyRuleError) -> Self {
        match err {
            crate::operation::update_safety_rule::UpdateSafetyRuleError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_safety_rule::UpdateSafetyRuleError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_safety_rule::UpdateSafetyRuleError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_safety_rule::UpdateSafetyRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
