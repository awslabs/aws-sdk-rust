// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A new assertion rule for a control panel.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NewAssertionRule {
    /// <p>The routing controls that are part of transactions that are evaluated to determine if a request to change a routing control state is allowed. For example, you might include three routing controls, one for each of three Amazon Web Services Regions.</p>
    #[doc(hidden)]
    pub asserted_controls: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The Amazon Resource Name (ARN) for the control panel.</p>
    #[doc(hidden)]
    pub control_panel_arn: std::option::Option<std::string::String>,
    /// <p>The name of the assertion rule. You can use any non-white space character in the name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The criteria that you set for specific assertion controls (routing controls) that designate how many control states must be ON as the result of a transaction. For example, if you have three assertion controls, you might specify ATLEAST 2 for your rule configuration. This means that at least two assertion controls must be ON, so that at least two Amazon Web Services Regions have traffic flowing to them.</p>
    #[doc(hidden)]
    pub rule_config: std::option::Option<crate::types::RuleConfig>,
    /// <p>An evaluation period, in milliseconds (ms), during which any request against the target routing controls will fail. This helps prevent "flapping" of state. The wait period is 5000 ms by default, but you can choose a custom value.</p>
    #[doc(hidden)]
    pub wait_period_ms: i32,
}
impl NewAssertionRule {
    /// <p>The routing controls that are part of transactions that are evaluated to determine if a request to change a routing control state is allowed. For example, you might include three routing controls, one for each of three Amazon Web Services Regions.</p>
    pub fn asserted_controls(&self) -> std::option::Option<&[std::string::String]> {
        self.asserted_controls.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) for the control panel.</p>
    pub fn control_panel_arn(&self) -> std::option::Option<&str> {
        self.control_panel_arn.as_deref()
    }
    /// <p>The name of the assertion rule. You can use any non-white space character in the name.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The criteria that you set for specific assertion controls (routing controls) that designate how many control states must be ON as the result of a transaction. For example, if you have three assertion controls, you might specify ATLEAST 2 for your rule configuration. This means that at least two assertion controls must be ON, so that at least two Amazon Web Services Regions have traffic flowing to them.</p>
    pub fn rule_config(&self) -> std::option::Option<&crate::types::RuleConfig> {
        self.rule_config.as_ref()
    }
    /// <p>An evaluation period, in milliseconds (ms), during which any request against the target routing controls will fail. This helps prevent "flapping" of state. The wait period is 5000 ms by default, but you can choose a custom value.</p>
    pub fn wait_period_ms(&self) -> i32 {
        self.wait_period_ms
    }
}
impl NewAssertionRule {
    /// Creates a new builder-style object to manufacture [`NewAssertionRule`](crate::types::NewAssertionRule).
    pub fn builder() -> crate::types::builders::NewAssertionRuleBuilder {
        crate::types::builders::NewAssertionRuleBuilder::default()
    }
}

/// A builder for [`NewAssertionRule`](crate::types::NewAssertionRule).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NewAssertionRuleBuilder {
    pub(crate) asserted_controls: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) control_panel_arn: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) rule_config: std::option::Option<crate::types::RuleConfig>,
    pub(crate) wait_period_ms: std::option::Option<i32>,
}
impl NewAssertionRuleBuilder {
    /// Appends an item to `asserted_controls`.
    ///
    /// To override the contents of this collection use [`set_asserted_controls`](Self::set_asserted_controls).
    ///
    /// <p>The routing controls that are part of transactions that are evaluated to determine if a request to change a routing control state is allowed. For example, you might include three routing controls, one for each of three Amazon Web Services Regions.</p>
    pub fn asserted_controls(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.asserted_controls.unwrap_or_default();
        v.push(input.into());
        self.asserted_controls = Some(v);
        self
    }
    /// <p>The routing controls that are part of transactions that are evaluated to determine if a request to change a routing control state is allowed. For example, you might include three routing controls, one for each of three Amazon Web Services Regions.</p>
    pub fn set_asserted_controls(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.asserted_controls = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the control panel.</p>
    pub fn control_panel_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.control_panel_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the control panel.</p>
    pub fn set_control_panel_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.control_panel_arn = input;
        self
    }
    /// <p>The name of the assertion rule. You can use any non-white space character in the name.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the assertion rule. You can use any non-white space character in the name.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The criteria that you set for specific assertion controls (routing controls) that designate how many control states must be ON as the result of a transaction. For example, if you have three assertion controls, you might specify ATLEAST 2 for your rule configuration. This means that at least two assertion controls must be ON, so that at least two Amazon Web Services Regions have traffic flowing to them.</p>
    pub fn rule_config(mut self, input: crate::types::RuleConfig) -> Self {
        self.rule_config = Some(input);
        self
    }
    /// <p>The criteria that you set for specific assertion controls (routing controls) that designate how many control states must be ON as the result of a transaction. For example, if you have three assertion controls, you might specify ATLEAST 2 for your rule configuration. This means that at least two assertion controls must be ON, so that at least two Amazon Web Services Regions have traffic flowing to them.</p>
    pub fn set_rule_config(mut self, input: std::option::Option<crate::types::RuleConfig>) -> Self {
        self.rule_config = input;
        self
    }
    /// <p>An evaluation period, in milliseconds (ms), during which any request against the target routing controls will fail. This helps prevent "flapping" of state. The wait period is 5000 ms by default, but you can choose a custom value.</p>
    pub fn wait_period_ms(mut self, input: i32) -> Self {
        self.wait_period_ms = Some(input);
        self
    }
    /// <p>An evaluation period, in milliseconds (ms), during which any request against the target routing controls will fail. This helps prevent "flapping" of state. The wait period is 5000 ms by default, but you can choose a custom value.</p>
    pub fn set_wait_period_ms(mut self, input: std::option::Option<i32>) -> Self {
        self.wait_period_ms = input;
        self
    }
    /// Consumes the builder and constructs a [`NewAssertionRule`](crate::types::NewAssertionRule).
    pub fn build(self) -> crate::types::NewAssertionRule {
        crate::types::NewAssertionRule {
            asserted_controls: self.asserted_controls,
            control_panel_arn: self.control_panel_arn,
            name: self.name,
            rule_config: self.rule_config,
            wait_period_ms: self.wait_period_ms.unwrap_or_default(),
        }
    }
}
