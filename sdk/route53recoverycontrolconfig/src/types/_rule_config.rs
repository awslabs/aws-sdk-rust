// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The rule configuration for an assertion rule. That is, the criteria that you set for specific assertion controls (routing controls) that specify how many control states must be ON after a transaction completes.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RuleConfig {
    /// <p>Logical negation of the rule. If the rule would usually evaluate true, it's evaluated as false, and vice versa.</p>
    pub inverted: ::std::option::Option<bool>,
    /// <p>The value of N, when you specify an ATLEAST rule type. That is, Threshold is the number of controls that must be set when you specify an ATLEAST type.</p>
    pub threshold: ::std::option::Option<i32>,
    /// <p>A rule can be one of the following: ATLEAST, AND, or OR.</p>
    pub r#type: ::std::option::Option<crate::types::RuleType>,
}
impl RuleConfig {
    /// <p>Logical negation of the rule. If the rule would usually evaluate true, it's evaluated as false, and vice versa.</p>
    pub fn inverted(&self) -> ::std::option::Option<bool> {
        self.inverted
    }
    /// <p>The value of N, when you specify an ATLEAST rule type. That is, Threshold is the number of controls that must be set when you specify an ATLEAST type.</p>
    pub fn threshold(&self) -> ::std::option::Option<i32> {
        self.threshold
    }
    /// <p>A rule can be one of the following: ATLEAST, AND, or OR.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::RuleType> {
        self.r#type.as_ref()
    }
}
impl RuleConfig {
    /// Creates a new builder-style object to manufacture [`RuleConfig`](crate::types::RuleConfig).
    pub fn builder() -> crate::types::builders::RuleConfigBuilder {
        crate::types::builders::RuleConfigBuilder::default()
    }
}

/// A builder for [`RuleConfig`](crate::types::RuleConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RuleConfigBuilder {
    pub(crate) inverted: ::std::option::Option<bool>,
    pub(crate) threshold: ::std::option::Option<i32>,
    pub(crate) r#type: ::std::option::Option<crate::types::RuleType>,
}
impl RuleConfigBuilder {
    /// <p>Logical negation of the rule. If the rule would usually evaluate true, it's evaluated as false, and vice versa.</p>
    /// This field is required.
    pub fn inverted(mut self, input: bool) -> Self {
        self.inverted = ::std::option::Option::Some(input);
        self
    }
    /// <p>Logical negation of the rule. If the rule would usually evaluate true, it's evaluated as false, and vice versa.</p>
    pub fn set_inverted(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inverted = input;
        self
    }
    /// <p>Logical negation of the rule. If the rule would usually evaluate true, it's evaluated as false, and vice versa.</p>
    pub fn get_inverted(&self) -> &::std::option::Option<bool> {
        &self.inverted
    }
    /// <p>The value of N, when you specify an ATLEAST rule type. That is, Threshold is the number of controls that must be set when you specify an ATLEAST type.</p>
    /// This field is required.
    pub fn threshold(mut self, input: i32) -> Self {
        self.threshold = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value of N, when you specify an ATLEAST rule type. That is, Threshold is the number of controls that must be set when you specify an ATLEAST type.</p>
    pub fn set_threshold(mut self, input: ::std::option::Option<i32>) -> Self {
        self.threshold = input;
        self
    }
    /// <p>The value of N, when you specify an ATLEAST rule type. That is, Threshold is the number of controls that must be set when you specify an ATLEAST type.</p>
    pub fn get_threshold(&self) -> &::std::option::Option<i32> {
        &self.threshold
    }
    /// <p>A rule can be one of the following: ATLEAST, AND, or OR.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::RuleType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>A rule can be one of the following: ATLEAST, AND, or OR.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::RuleType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>A rule can be one of the following: ATLEAST, AND, or OR.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::RuleType> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`RuleConfig`](crate::types::RuleConfig).
    pub fn build(self) -> crate::types::RuleConfig {
        crate::types::RuleConfig {
            inverted: self.inverted,
            threshold: self.threshold,
            r#type: self.r#type,
        }
    }
}
