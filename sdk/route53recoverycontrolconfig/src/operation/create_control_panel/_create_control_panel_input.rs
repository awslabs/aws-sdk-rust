// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of the control panel that you're creating.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateControlPanelInput {
    /// <p>A unique, case-sensitive string of up to 64 ASCII characters. To make an idempotent API request with an action, specify a client token in the request.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the cluster for the control panel.</p>
    #[doc(hidden)]
    pub cluster_arn: std::option::Option<std::string::String>,
    /// <p>The name of the control panel.</p>
    #[doc(hidden)]
    pub control_panel_name: std::option::Option<std::string::String>,
    /// <p>The tags associated with the control panel.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl CreateControlPanelInput {
    /// <p>A unique, case-sensitive string of up to 64 ASCII characters. To make an idempotent API request with an action, specify a client token in the request.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the cluster for the control panel.</p>
    pub fn cluster_arn(&self) -> std::option::Option<&str> {
        self.cluster_arn.as_deref()
    }
    /// <p>The name of the control panel.</p>
    pub fn control_panel_name(&self) -> std::option::Option<&str> {
        self.control_panel_name.as_deref()
    }
    /// <p>The tags associated with the control panel.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl CreateControlPanelInput {
    /// Creates a new builder-style object to manufacture [`CreateControlPanelInput`](crate::operation::create_control_panel::CreateControlPanelInput).
    pub fn builder(
    ) -> crate::operation::create_control_panel::builders::CreateControlPanelInputBuilder {
        crate::operation::create_control_panel::builders::CreateControlPanelInputBuilder::default()
    }
}

/// A builder for [`CreateControlPanelInput`](crate::operation::create_control_panel::CreateControlPanelInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateControlPanelInputBuilder {
    pub(crate) client_token: std::option::Option<std::string::String>,
    pub(crate) cluster_arn: std::option::Option<std::string::String>,
    pub(crate) control_panel_name: std::option::Option<std::string::String>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl CreateControlPanelInputBuilder {
    /// <p>A unique, case-sensitive string of up to 64 ASCII characters. To make an idempotent API request with an action, specify a client token in the request.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive string of up to 64 ASCII characters. To make an idempotent API request with an action, specify a client token in the request.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the cluster for the control panel.</p>
    pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.cluster_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the cluster for the control panel.</p>
    pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cluster_arn = input;
        self
    }
    /// <p>The name of the control panel.</p>
    pub fn control_panel_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.control_panel_name = Some(input.into());
        self
    }
    /// <p>The name of the control panel.</p>
    pub fn set_control_panel_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.control_panel_name = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags associated with the control panel.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>The tags associated with the control panel.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateControlPanelInput`](crate::operation::create_control_panel::CreateControlPanelInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_control_panel::CreateControlPanelInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_control_panel::CreateControlPanelInput {
                client_token: self.client_token,
                cluster_arn: self.cluster_arn,
                control_panel_name: self.control_panel_name,
                tags: self.tags,
            },
        )
    }
}
