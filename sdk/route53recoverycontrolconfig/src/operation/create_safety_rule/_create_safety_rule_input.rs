// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The request body that you include when you create a safety rule.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateSafetyRuleInput {
    /// <p>The assertion rule requested.</p>
    pub assertion_rule: ::std::option::Option<crate::types::NewAssertionRule>,
    /// <p>A unique, case-sensitive string of up to 64 ASCII characters. To make an idempotent API request with an action, specify a client token in the request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The gating rule requested.</p>
    pub gating_rule: ::std::option::Option<crate::types::NewGatingRule>,
    /// <p>The tags associated with the safety rule.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateSafetyRuleInput {
    /// <p>The assertion rule requested.</p>
    pub fn assertion_rule(&self) -> ::std::option::Option<&crate::types::NewAssertionRule> {
        self.assertion_rule.as_ref()
    }
    /// <p>A unique, case-sensitive string of up to 64 ASCII characters. To make an idempotent API request with an action, specify a client token in the request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The gating rule requested.</p>
    pub fn gating_rule(&self) -> ::std::option::Option<&crate::types::NewGatingRule> {
        self.gating_rule.as_ref()
    }
    /// <p>The tags associated with the safety rule.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CreateSafetyRuleInput {
    /// Creates a new builder-style object to manufacture [`CreateSafetyRuleInput`](crate::operation::create_safety_rule::CreateSafetyRuleInput).
    pub fn builder() -> crate::operation::create_safety_rule::builders::CreateSafetyRuleInputBuilder {
        crate::operation::create_safety_rule::builders::CreateSafetyRuleInputBuilder::default()
    }
}

/// A builder for [`CreateSafetyRuleInput`](crate::operation::create_safety_rule::CreateSafetyRuleInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateSafetyRuleInputBuilder {
    pub(crate) assertion_rule: ::std::option::Option<crate::types::NewAssertionRule>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) gating_rule: ::std::option::Option<crate::types::NewGatingRule>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateSafetyRuleInputBuilder {
    /// <p>The assertion rule requested.</p>
    pub fn assertion_rule(mut self, input: crate::types::NewAssertionRule) -> Self {
        self.assertion_rule = ::std::option::Option::Some(input);
        self
    }
    /// <p>The assertion rule requested.</p>
    pub fn set_assertion_rule(mut self, input: ::std::option::Option<crate::types::NewAssertionRule>) -> Self {
        self.assertion_rule = input;
        self
    }
    /// <p>The assertion rule requested.</p>
    pub fn get_assertion_rule(&self) -> &::std::option::Option<crate::types::NewAssertionRule> {
        &self.assertion_rule
    }
    /// <p>A unique, case-sensitive string of up to 64 ASCII characters. To make an idempotent API request with an action, specify a client token in the request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive string of up to 64 ASCII characters. To make an idempotent API request with an action, specify a client token in the request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive string of up to 64 ASCII characters. To make an idempotent API request with an action, specify a client token in the request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The gating rule requested.</p>
    pub fn gating_rule(mut self, input: crate::types::NewGatingRule) -> Self {
        self.gating_rule = ::std::option::Option::Some(input);
        self
    }
    /// <p>The gating rule requested.</p>
    pub fn set_gating_rule(mut self, input: ::std::option::Option<crate::types::NewGatingRule>) -> Self {
        self.gating_rule = input;
        self
    }
    /// <p>The gating rule requested.</p>
    pub fn get_gating_rule(&self) -> &::std::option::Option<crate::types::NewGatingRule> {
        &self.gating_rule
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags associated with the safety rule.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags associated with the safety rule.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags associated with the safety rule.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateSafetyRuleInput`](crate::operation::create_safety_rule::CreateSafetyRuleInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_safety_rule::CreateSafetyRuleInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_safety_rule::CreateSafetyRuleInput {
            assertion_rule: self.assertion_rule,
            client_token: self.client_token,
            gating_rule: self.gating_rule,
            tags: self.tags,
        })
    }
}
