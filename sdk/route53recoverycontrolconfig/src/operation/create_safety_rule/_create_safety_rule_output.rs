// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateSafetyRuleOutput {
    /// <p>The assertion rule created.</p>
    #[doc(hidden)]
    pub assertion_rule: std::option::Option<crate::types::AssertionRule>,
    /// <p>The gating rule created.</p>
    #[doc(hidden)]
    pub gating_rule: std::option::Option<crate::types::GatingRule>,
    _request_id: Option<String>,
}
impl CreateSafetyRuleOutput {
    /// <p>The assertion rule created.</p>
    pub fn assertion_rule(&self) -> std::option::Option<&crate::types::AssertionRule> {
        self.assertion_rule.as_ref()
    }
    /// <p>The gating rule created.</p>
    pub fn gating_rule(&self) -> std::option::Option<&crate::types::GatingRule> {
        self.gating_rule.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateSafetyRuleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateSafetyRuleOutput {
    /// Creates a new builder-style object to manufacture [`CreateSafetyRuleOutput`](crate::operation::create_safety_rule::CreateSafetyRuleOutput).
    pub fn builder() -> crate::operation::create_safety_rule::builders::CreateSafetyRuleOutputBuilder
    {
        crate::operation::create_safety_rule::builders::CreateSafetyRuleOutputBuilder::default()
    }
}

/// A builder for [`CreateSafetyRuleOutput`](crate::operation::create_safety_rule::CreateSafetyRuleOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateSafetyRuleOutputBuilder {
    pub(crate) assertion_rule: std::option::Option<crate::types::AssertionRule>,
    pub(crate) gating_rule: std::option::Option<crate::types::GatingRule>,
    _request_id: Option<String>,
}
impl CreateSafetyRuleOutputBuilder {
    /// <p>The assertion rule created.</p>
    pub fn assertion_rule(mut self, input: crate::types::AssertionRule) -> Self {
        self.assertion_rule = Some(input);
        self
    }
    /// <p>The assertion rule created.</p>
    pub fn set_assertion_rule(
        mut self,
        input: std::option::Option<crate::types::AssertionRule>,
    ) -> Self {
        self.assertion_rule = input;
        self
    }
    /// <p>The gating rule created.</p>
    pub fn gating_rule(mut self, input: crate::types::GatingRule) -> Self {
        self.gating_rule = Some(input);
        self
    }
    /// <p>The gating rule created.</p>
    pub fn set_gating_rule(mut self, input: std::option::Option<crate::types::GatingRule>) -> Self {
        self.gating_rule = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateSafetyRuleOutput`](crate::operation::create_safety_rule::CreateSafetyRuleOutput).
    pub fn build(self) -> crate::operation::create_safety_rule::CreateSafetyRuleOutput {
        crate::operation::create_safety_rule::CreateSafetyRuleOutput {
            assertion_rule: self.assertion_rule,
            gating_rule: self.gating_rule,
            _request_id: self._request_id,
        }
    }
}
