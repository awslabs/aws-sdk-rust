// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_safety_rule::_create_safety_rule_output::CreateSafetyRuleOutputBuilder;

pub use crate::operation::create_safety_rule::_create_safety_rule_input::CreateSafetyRuleInputBuilder;

impl crate::operation::create_safety_rule::builders::CreateSafetyRuleInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_safety_rule::CreateSafetyRuleOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_safety_rule::CreateSafetyRuleError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_safety_rule();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateSafetyRule`.
///
/// <p>Creates a safety rule in a control panel. Safety rules let you add safeguards around changing routing control states, and for enabling and disabling routing controls, to help prevent unexpected outcomes.</p>
/// <p>There are two types of safety rules: assertion rules and gating rules.</p>
/// <p>Assertion rule: An assertion rule enforces that, when you change a routing control state, that a certain criteria is met. For example, the criteria might be that at least one routing control state is On after the transaction so that traffic continues to flow to at least one cell for the application. This ensures that you avoid a fail-open scenario.</p>
/// <p>Gating rule: A gating rule lets you configure a gating routing control as an overall "on/off" switch for a group of routing controls. Or, you can configure more complex gating scenarios, for example by configuring multiple gating routing controls.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/r53recovery/latest/dg/routing-control.safety-rules.html">Safety rules</a> in the Amazon Route 53 Application Recovery Controller Developer Guide.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateSafetyRuleFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_safety_rule::builders::CreateSafetyRuleInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_safety_rule::CreateSafetyRuleOutput,
        crate::operation::create_safety_rule::CreateSafetyRuleError,
    > for CreateSafetyRuleFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_safety_rule::CreateSafetyRuleOutput,
            crate::operation::create_safety_rule::CreateSafetyRuleError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateSafetyRuleFluentBuilder {
    /// Creates a new `CreateSafetyRule`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateSafetyRule as a reference.
    pub fn as_input(&self) -> &crate::operation::create_safety_rule::builders::CreateSafetyRuleInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_safety_rule::CreateSafetyRuleOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_safety_rule::CreateSafetyRuleError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_safety_rule::CreateSafetyRule::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_safety_rule::CreateSafetyRule::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_safety_rule::CreateSafetyRuleOutput,
        crate::operation::create_safety_rule::CreateSafetyRuleError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The assertion rule requested.</p>
    pub fn assertion_rule(mut self, input: crate::types::NewAssertionRule) -> Self {
        self.inner = self.inner.assertion_rule(input);
        self
    }
    /// <p>The assertion rule requested.</p>
    pub fn set_assertion_rule(mut self, input: ::std::option::Option<crate::types::NewAssertionRule>) -> Self {
        self.inner = self.inner.set_assertion_rule(input);
        self
    }
    /// <p>The assertion rule requested.</p>
    pub fn get_assertion_rule(&self) -> &::std::option::Option<crate::types::NewAssertionRule> {
        self.inner.get_assertion_rule()
    }
    /// <p>A unique, case-sensitive string of up to 64 ASCII characters. To make an idempotent API request with an action, specify a client token in the request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive string of up to 64 ASCII characters. To make an idempotent API request with an action, specify a client token in the request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>A unique, case-sensitive string of up to 64 ASCII characters. To make an idempotent API request with an action, specify a client token in the request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
    /// <p>The gating rule requested.</p>
    pub fn gating_rule(mut self, input: crate::types::NewGatingRule) -> Self {
        self.inner = self.inner.gating_rule(input);
        self
    }
    /// <p>The gating rule requested.</p>
    pub fn set_gating_rule(mut self, input: ::std::option::Option<crate::types::NewGatingRule>) -> Self {
        self.inner = self.inner.set_gating_rule(input);
        self
    }
    /// <p>The gating rule requested.</p>
    pub fn get_gating_rule(&self) -> &::std::option::Option<crate::types::NewGatingRule> {
        self.inner.get_gating_rule()
    }
    ///
    /// Adds a key-value pair to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags associated with the safety rule.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>The tags associated with the safety rule.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The tags associated with the safety rule.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_tags()
    }
}
