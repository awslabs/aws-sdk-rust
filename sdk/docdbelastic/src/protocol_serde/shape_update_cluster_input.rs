// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_cluster_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_cluster::UpdateClusterInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.admin_user_password {
        object.key("adminUserPassword").string(var_1.as_str());
    }
    if let Some(var_2) = &input.auth_type {
        object.key("authType").string(var_2.as_str());
    }
    if let Some(var_3) = &input.client_token {
        object.key("clientToken").string(var_3.as_str());
    }
    if let Some(var_4) = &input.preferred_maintenance_window {
        object.key("preferredMaintenanceWindow").string(var_4.as_str());
    }
    if let Some(var_5) = &input.shard_capacity {
        object.key("shardCapacity").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.shard_count {
        object.key("shardCount").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    if let Some(var_7) = &input.subnet_ids {
        let mut array_8 = object.key("subnetIds").start_array();
        for item_9 in var_7 {
            {
                array_8.value().string(item_9.as_str());
            }
        }
        array_8.finish();
    }
    if let Some(var_10) = &input.vpc_security_group_ids {
        let mut array_11 = object.key("vpcSecurityGroupIds").start_array();
        for item_12 in var_10 {
            {
                array_11.value().string(item_12.as_str());
            }
        }
        array_11.finish();
    }
    Ok(())
}
