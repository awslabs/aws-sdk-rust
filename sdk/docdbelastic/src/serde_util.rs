// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.reason.is_none() {
        builder.reason = "no value was set".parse::<crate::types::ValidationExceptionReason>().ok()
    }
    builder
}

pub(crate) fn create_cluster_output_correct_errors(
    mut builder: crate::operation::create_cluster::builders::CreateClusterOutputBuilder,
) -> crate::operation::create_cluster::builders::CreateClusterOutputBuilder {
    if builder.cluster.is_none() {
        builder.cluster = {
            let builder = crate::types::builders::ClusterBuilder::default();
            crate::serde_util::cluster_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn create_cluster_snapshot_output_correct_errors(
    mut builder: crate::operation::create_cluster_snapshot::builders::CreateClusterSnapshotOutputBuilder,
) -> crate::operation::create_cluster_snapshot::builders::CreateClusterSnapshotOutputBuilder {
    if builder.snapshot.is_none() {
        builder.snapshot = {
            let builder = crate::types::builders::ClusterSnapshotBuilder::default();
            crate::serde_util::cluster_snapshot_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn delete_cluster_output_correct_errors(
    mut builder: crate::operation::delete_cluster::builders::DeleteClusterOutputBuilder,
) -> crate::operation::delete_cluster::builders::DeleteClusterOutputBuilder {
    if builder.cluster.is_none() {
        builder.cluster = {
            let builder = crate::types::builders::ClusterBuilder::default();
            crate::serde_util::cluster_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn delete_cluster_snapshot_output_correct_errors(
    mut builder: crate::operation::delete_cluster_snapshot::builders::DeleteClusterSnapshotOutputBuilder,
) -> crate::operation::delete_cluster_snapshot::builders::DeleteClusterSnapshotOutputBuilder {
    if builder.snapshot.is_none() {
        builder.snapshot = {
            let builder = crate::types::builders::ClusterSnapshotBuilder::default();
            crate::serde_util::cluster_snapshot_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_cluster_output_correct_errors(
    mut builder: crate::operation::get_cluster::builders::GetClusterOutputBuilder,
) -> crate::operation::get_cluster::builders::GetClusterOutputBuilder {
    if builder.cluster.is_none() {
        builder.cluster = {
            let builder = crate::types::builders::ClusterBuilder::default();
            crate::serde_util::cluster_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_cluster_snapshot_output_correct_errors(
    mut builder: crate::operation::get_cluster_snapshot::builders::GetClusterSnapshotOutputBuilder,
) -> crate::operation::get_cluster_snapshot::builders::GetClusterSnapshotOutputBuilder {
    if builder.snapshot.is_none() {
        builder.snapshot = {
            let builder = crate::types::builders::ClusterSnapshotBuilder::default();
            crate::serde_util::cluster_snapshot_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn restore_cluster_from_snapshot_output_correct_errors(
    mut builder: crate::operation::restore_cluster_from_snapshot::builders::RestoreClusterFromSnapshotOutputBuilder,
) -> crate::operation::restore_cluster_from_snapshot::builders::RestoreClusterFromSnapshotOutputBuilder {
    if builder.cluster.is_none() {
        builder.cluster = {
            let builder = crate::types::builders::ClusterBuilder::default();
            crate::serde_util::cluster_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_cluster_output_correct_errors(
    mut builder: crate::operation::update_cluster::builders::UpdateClusterOutputBuilder,
) -> crate::operation::update_cluster::builders::UpdateClusterOutputBuilder {
    if builder.cluster.is_none() {
        builder.cluster = {
            let builder = crate::types::builders::ClusterBuilder::default();
            crate::serde_util::cluster_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn cluster_correct_errors(mut builder: crate::types::builders::ClusterBuilder) -> crate::types::builders::ClusterBuilder {
    if builder.cluster_name.is_none() {
        builder.cluster_name = Some(Default::default())
    }
    if builder.cluster_arn.is_none() {
        builder.cluster_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::Status>().ok()
    }
    if builder.cluster_endpoint.is_none() {
        builder.cluster_endpoint = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(Default::default())
    }
    if builder.admin_user_name.is_none() {
        builder.admin_user_name = Some(Default::default())
    }
    if builder.auth_type.is_none() {
        builder.auth_type = "no value was set".parse::<crate::types::Auth>().ok()
    }
    if builder.shard_capacity.is_none() {
        builder.shard_capacity = Some(Default::default())
    }
    if builder.shard_count.is_none() {
        builder.shard_count = Some(Default::default())
    }
    if builder.vpc_security_group_ids.is_none() {
        builder.vpc_security_group_ids = Some(Default::default())
    }
    if builder.subnet_ids.is_none() {
        builder.subnet_ids = Some(Default::default())
    }
    if builder.preferred_maintenance_window.is_none() {
        builder.preferred_maintenance_window = Some(Default::default())
    }
    if builder.kms_key_id.is_none() {
        builder.kms_key_id = Some(Default::default())
    }
    builder
}

pub(crate) fn cluster_snapshot_correct_errors(
    mut builder: crate::types::builders::ClusterSnapshotBuilder,
) -> crate::types::builders::ClusterSnapshotBuilder {
    if builder.subnet_ids.is_none() {
        builder.subnet_ids = Some(Default::default())
    }
    if builder.snapshot_name.is_none() {
        builder.snapshot_name = Some(Default::default())
    }
    if builder.snapshot_arn.is_none() {
        builder.snapshot_arn = Some(Default::default())
    }
    if builder.snapshot_creation_time.is_none() {
        builder.snapshot_creation_time = Some(Default::default())
    }
    if builder.cluster_arn.is_none() {
        builder.cluster_arn = Some(Default::default())
    }
    if builder.cluster_creation_time.is_none() {
        builder.cluster_creation_time = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::Status>().ok()
    }
    if builder.vpc_security_group_ids.is_none() {
        builder.vpc_security_group_ids = Some(Default::default())
    }
    if builder.admin_user_name.is_none() {
        builder.admin_user_name = Some(Default::default())
    }
    if builder.kms_key_id.is_none() {
        builder.kms_key_id = Some(Default::default())
    }
    builder
}

pub(crate) fn cluster_in_list_correct_errors(
    mut builder: crate::types::builders::ClusterInListBuilder,
) -> crate::types::builders::ClusterInListBuilder {
    if builder.cluster_name.is_none() {
        builder.cluster_name = Some(Default::default())
    }
    if builder.cluster_arn.is_none() {
        builder.cluster_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::Status>().ok()
    }
    builder
}

pub(crate) fn cluster_snapshot_in_list_correct_errors(
    mut builder: crate::types::builders::ClusterSnapshotInListBuilder,
) -> crate::types::builders::ClusterSnapshotInListBuilder {
    if builder.snapshot_name.is_none() {
        builder.snapshot_name = Some(Default::default())
    }
    if builder.snapshot_arn.is_none() {
        builder.snapshot_arn = Some(Default::default())
    }
    if builder.cluster_arn.is_none() {
        builder.cluster_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::Status>().ok()
    }
    if builder.snapshot_creation_time.is_none() {
        builder.snapshot_creation_time = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}
