// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_cluster::_create_cluster_output::CreateClusterOutputBuilder;

pub use crate::operation::create_cluster::_create_cluster_input::CreateClusterInputBuilder;

impl CreateClusterInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_cluster::CreateClusterOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_cluster::CreateClusterError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_cluster();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateCluster`.
///
/// <p>Creates a new Elastic DocumentDB cluster and returns its Cluster structure.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateClusterFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_cluster::builders::CreateClusterInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_cluster::CreateClusterOutput,
        crate::operation::create_cluster::CreateClusterError,
    > for CreateClusterFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_cluster::CreateClusterOutput,
            crate::operation::create_cluster::CreateClusterError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateClusterFluentBuilder {
    /// Creates a new `CreateCluster`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateCluster as a reference.
    pub fn as_input(&self) -> &crate::operation::create_cluster::builders::CreateClusterInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_cluster::CreateClusterOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_cluster::CreateClusterError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_cluster::CreateCluster::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_cluster::CreateCluster::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_cluster::CreateClusterOutput,
        crate::operation::create_cluster::CreateClusterError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the new Elastic DocumentDB cluster. This parameter is stored as a lowercase string.</p>
    /// <p> <i>Constraints</i>:</p>
    /// <ul>
    /// <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li>
    /// <li> <p>The first character must be a letter.</p> </li>
    /// <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// </ul>
    /// <p> <i>Example</i>: <code>my-cluster</code> </p>
    pub fn cluster_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.cluster_name(input.into());
        self
    }
    /// <p>The name of the new Elastic DocumentDB cluster. This parameter is stored as a lowercase string.</p>
    /// <p> <i>Constraints</i>:</p>
    /// <ul>
    /// <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li>
    /// <li> <p>The first character must be a letter.</p> </li>
    /// <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// </ul>
    /// <p> <i>Example</i>: <code>my-cluster</code> </p>
    pub fn set_cluster_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_cluster_name(input);
        self
    }
    /// <p>The name of the new Elastic DocumentDB cluster. This parameter is stored as a lowercase string.</p>
    /// <p> <i>Constraints</i>:</p>
    /// <ul>
    /// <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li>
    /// <li> <p>The first character must be a letter.</p> </li>
    /// <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// </ul>
    /// <p> <i>Example</i>: <code>my-cluster</code> </p>
    pub fn get_cluster_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_cluster_name()
    }
    /// <p>The authentication type for the Elastic DocumentDB cluster.</p>
    pub fn auth_type(mut self, input: crate::types::Auth) -> Self {
        self.inner = self.inner.auth_type(input);
        self
    }
    /// <p>The authentication type for the Elastic DocumentDB cluster.</p>
    pub fn set_auth_type(mut self, input: ::std::option::Option<crate::types::Auth>) -> Self {
        self.inner = self.inner.set_auth_type(input);
        self
    }
    /// <p>The authentication type for the Elastic DocumentDB cluster.</p>
    pub fn get_auth_type(&self) -> &::std::option::Option<crate::types::Auth> {
        self.inner.get_auth_type()
    }
    /// <p>The name of the Elastic DocumentDB cluster administrator.</p>
    /// <p> <i>Constraints</i>:</p>
    /// <ul>
    /// <li> <p>Must be from 1 to 63 letters or numbers.</p> </li>
    /// <li> <p>The first character must be a letter.</p> </li>
    /// <li> <p>Cannot be a reserved word.</p> </li>
    /// </ul>
    pub fn admin_user_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.admin_user_name(input.into());
        self
    }
    /// <p>The name of the Elastic DocumentDB cluster administrator.</p>
    /// <p> <i>Constraints</i>:</p>
    /// <ul>
    /// <li> <p>Must be from 1 to 63 letters or numbers.</p> </li>
    /// <li> <p>The first character must be a letter.</p> </li>
    /// <li> <p>Cannot be a reserved word.</p> </li>
    /// </ul>
    pub fn set_admin_user_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_admin_user_name(input);
        self
    }
    /// <p>The name of the Elastic DocumentDB cluster administrator.</p>
    /// <p> <i>Constraints</i>:</p>
    /// <ul>
    /// <li> <p>Must be from 1 to 63 letters or numbers.</p> </li>
    /// <li> <p>The first character must be a letter.</p> </li>
    /// <li> <p>Cannot be a reserved word.</p> </li>
    /// </ul>
    pub fn get_admin_user_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_admin_user_name()
    }
    /// <p>The password for the Elastic DocumentDB cluster administrator and can contain any printable ASCII characters.</p>
    /// <p> <i>Constraints</i>:</p>
    /// <ul>
    /// <li> <p>Must contain from 8 to 100 characters.</p> </li>
    /// <li> <p>Cannot contain a forward slash (/), double quote ("), or the "at" symbol (@).</p> </li>
    /// </ul>
    pub fn admin_user_password(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.admin_user_password(input.into());
        self
    }
    /// <p>The password for the Elastic DocumentDB cluster administrator and can contain any printable ASCII characters.</p>
    /// <p> <i>Constraints</i>:</p>
    /// <ul>
    /// <li> <p>Must contain from 8 to 100 characters.</p> </li>
    /// <li> <p>Cannot contain a forward slash (/), double quote ("), or the "at" symbol (@).</p> </li>
    /// </ul>
    pub fn set_admin_user_password(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_admin_user_password(input);
        self
    }
    /// <p>The password for the Elastic DocumentDB cluster administrator and can contain any printable ASCII characters.</p>
    /// <p> <i>Constraints</i>:</p>
    /// <ul>
    /// <li> <p>Must contain from 8 to 100 characters.</p> </li>
    /// <li> <p>Cannot contain a forward slash (/), double quote ("), or the "at" symbol (@).</p> </li>
    /// </ul>
    pub fn get_admin_user_password(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_admin_user_password()
    }
    /// <p>The capacity of each shard in the new Elastic DocumentDB cluster.</p>
    pub fn shard_capacity(mut self, input: i32) -> Self {
        self.inner = self.inner.shard_capacity(input);
        self
    }
    /// <p>The capacity of each shard in the new Elastic DocumentDB cluster.</p>
    pub fn set_shard_capacity(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_shard_capacity(input);
        self
    }
    /// <p>The capacity of each shard in the new Elastic DocumentDB cluster.</p>
    pub fn get_shard_capacity(&self) -> &::std::option::Option<i32> {
        self.inner.get_shard_capacity()
    }
    /// <p>The number of shards to create in the new Elastic DocumentDB cluster.</p>
    pub fn shard_count(mut self, input: i32) -> Self {
        self.inner = self.inner.shard_count(input);
        self
    }
    /// <p>The number of shards to create in the new Elastic DocumentDB cluster.</p>
    pub fn set_shard_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_shard_count(input);
        self
    }
    /// <p>The number of shards to create in the new Elastic DocumentDB cluster.</p>
    pub fn get_shard_count(&self) -> &::std::option::Option<i32> {
        self.inner.get_shard_count()
    }
    /// Appends an item to `vpcSecurityGroupIds`.
    ///
    /// To override the contents of this collection use [`set_vpc_security_group_ids`](Self::set_vpc_security_group_ids).
    ///
    /// <p>A list of EC2 VPC security groups to associate with the new Elastic DocumentDB cluster.</p>
    pub fn vpc_security_group_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.vpc_security_group_ids(input.into());
        self
    }
    /// <p>A list of EC2 VPC security groups to associate with the new Elastic DocumentDB cluster.</p>
    pub fn set_vpc_security_group_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_vpc_security_group_ids(input);
        self
    }
    /// <p>A list of EC2 VPC security groups to associate with the new Elastic DocumentDB cluster.</p>
    pub fn get_vpc_security_group_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_vpc_security_group_ids()
    }
    /// Appends an item to `subnetIds`.
    ///
    /// To override the contents of this collection use [`set_subnet_ids`](Self::set_subnet_ids).
    ///
    /// <p>The Amazon EC2 subnet IDs for the new Elastic DocumentDB cluster.</p>
    pub fn subnet_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.subnet_ids(input.into());
        self
    }
    /// <p>The Amazon EC2 subnet IDs for the new Elastic DocumentDB cluster.</p>
    pub fn set_subnet_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_subnet_ids(input);
        self
    }
    /// <p>The Amazon EC2 subnet IDs for the new Elastic DocumentDB cluster.</p>
    pub fn get_subnet_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_subnet_ids()
    }
    /// <p>The KMS key identifier to use to encrypt the new Elastic DocumentDB cluster.</p>
    /// <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a cluster using the same Amazon account that owns this KMS encryption key, you can use the KMS key alias instead of the ARN as the KMS encryption key.</p>
    /// <p>If an encryption key is not specified, Elastic DocumentDB uses the default encryption key that KMS creates for your account. Your account has a different default encryption key for each Amazon Region.</p>
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.kms_key_id(input.into());
        self
    }
    /// <p>The KMS key identifier to use to encrypt the new Elastic DocumentDB cluster.</p>
    /// <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a cluster using the same Amazon account that owns this KMS encryption key, you can use the KMS key alias instead of the ARN as the KMS encryption key.</p>
    /// <p>If an encryption key is not specified, Elastic DocumentDB uses the default encryption key that KMS creates for your account. Your account has a different default encryption key for each Amazon Region.</p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_kms_key_id(input);
        self
    }
    /// <p>The KMS key identifier to use to encrypt the new Elastic DocumentDB cluster.</p>
    /// <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a cluster using the same Amazon account that owns this KMS encryption key, you can use the KMS key alias instead of the ARN as the KMS encryption key.</p>
    /// <p>If an encryption key is not specified, Elastic DocumentDB uses the default encryption key that KMS creates for your account. Your account has a different default encryption key for each Amazon Region.</p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_kms_key_id()
    }
    /// <p>The client token for the Elastic DocumentDB cluster.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>The client token for the Elastic DocumentDB cluster.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>The client token for the Elastic DocumentDB cluster.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
    /// <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    /// <p> <i>Format</i>: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p>
    /// <p> <i>Default</i>: a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week.</p>
    /// <p> <i>Valid days</i>: Mon, Tue, Wed, Thu, Fri, Sat, Sun</p>
    /// <p> <i>Constraints</i>: Minimum 30-minute window.</p>
    pub fn preferred_maintenance_window(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.preferred_maintenance_window(input.into());
        self
    }
    /// <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    /// <p> <i>Format</i>: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p>
    /// <p> <i>Default</i>: a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week.</p>
    /// <p> <i>Valid days</i>: Mon, Tue, Wed, Thu, Fri, Sat, Sun</p>
    /// <p> <i>Constraints</i>: Minimum 30-minute window.</p>
    pub fn set_preferred_maintenance_window(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_preferred_maintenance_window(input);
        self
    }
    /// <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    /// <p> <i>Format</i>: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p>
    /// <p> <i>Default</i>: a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week.</p>
    /// <p> <i>Valid days</i>: Mon, Tue, Wed, Thu, Fri, Sat, Sun</p>
    /// <p> <i>Constraints</i>: Minimum 30-minute window.</p>
    pub fn get_preferred_maintenance_window(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_preferred_maintenance_window()
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to be assigned to the new Elastic DocumentDB cluster.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>The tags to be assigned to the new Elastic DocumentDB cluster.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The tags to be assigned to the new Elastic DocumentDB cluster.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_tags()
    }
}
