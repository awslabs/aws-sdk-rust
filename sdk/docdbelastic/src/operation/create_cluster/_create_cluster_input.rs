// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateClusterInput {
    /// <p>The name of the new Elastic DocumentDB cluster. This parameter is stored as a lowercase string.</p>
    /// <p> <i>Constraints</i>:</p>
    /// <ul>
    /// <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li>
    /// <li> <p>The first character must be a letter.</p> </li>
    /// <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// </ul>
    /// <p> <i>Example</i>: <code>my-cluster</code> </p>
    #[doc(hidden)]
    pub cluster_name: std::option::Option<std::string::String>,
    /// <p>The authentication type for the Elastic DocumentDB cluster.</p>
    #[doc(hidden)]
    pub auth_type: std::option::Option<crate::types::Auth>,
    /// <p>The name of the Elastic DocumentDB cluster administrator.</p>
    /// <p> <i>Constraints</i>:</p>
    /// <ul>
    /// <li> <p>Must be from 1 to 63 letters or numbers.</p> </li>
    /// <li> <p>The first character must be a letter.</p> </li>
    /// <li> <p>Cannot be a reserved word.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub admin_user_name: std::option::Option<std::string::String>,
    /// <p>The password for the Elastic DocumentDB cluster administrator and can contain any printable ASCII characters.</p>
    /// <p> <i>Constraints</i>:</p>
    /// <ul>
    /// <li> <p>Must contain from 8 to 100 characters.</p> </li>
    /// <li> <p>Cannot contain a forward slash (/), double quote ("), or the "at" symbol (@).</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub admin_user_password: std::option::Option<std::string::String>,
    /// <p>The capacity of each shard in the new Elastic DocumentDB cluster.</p>
    #[doc(hidden)]
    pub shard_capacity: std::option::Option<i32>,
    /// <p>The number of shards to create in the new Elastic DocumentDB cluster.</p>
    #[doc(hidden)]
    pub shard_count: std::option::Option<i32>,
    /// <p>A list of EC2 VPC security groups to associate with the new Elastic DocumentDB cluster.</p>
    #[doc(hidden)]
    pub vpc_security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The Amazon EC2 subnet IDs for the new Elastic DocumentDB cluster.</p>
    #[doc(hidden)]
    pub subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The KMS key identifier to use to encrypt the new Elastic DocumentDB cluster.</p>
    /// <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a cluster using the same Amazon account that owns this KMS encryption key, you can use the KMS key alias instead of the ARN as the KMS encryption key.</p>
    /// <p>If an encryption key is not specified, Elastic DocumentDB uses the default encryption key that KMS creates for your account. Your account has a different default encryption key for each Amazon Region.</p>
    #[doc(hidden)]
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>The client token for the Elastic DocumentDB cluster.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    /// <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    /// <p> <i>Format</i>: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p>
    /// <p> <i>Default</i>: a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week.</p>
    /// <p> <i>Valid days</i>: Mon, Tue, Wed, Thu, Fri, Sat, Sun</p>
    /// <p> <i>Constraints</i>: Minimum 30-minute window.</p>
    #[doc(hidden)]
    pub preferred_maintenance_window: std::option::Option<std::string::String>,
    /// <p>The tags to be assigned to the new Elastic DocumentDB cluster.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl CreateClusterInput {
    /// <p>The name of the new Elastic DocumentDB cluster. This parameter is stored as a lowercase string.</p>
    /// <p> <i>Constraints</i>:</p>
    /// <ul>
    /// <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li>
    /// <li> <p>The first character must be a letter.</p> </li>
    /// <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// </ul>
    /// <p> <i>Example</i>: <code>my-cluster</code> </p>
    pub fn cluster_name(&self) -> std::option::Option<&str> {
        self.cluster_name.as_deref()
    }
    /// <p>The authentication type for the Elastic DocumentDB cluster.</p>
    pub fn auth_type(&self) -> std::option::Option<&crate::types::Auth> {
        self.auth_type.as_ref()
    }
    /// <p>The name of the Elastic DocumentDB cluster administrator.</p>
    /// <p> <i>Constraints</i>:</p>
    /// <ul>
    /// <li> <p>Must be from 1 to 63 letters or numbers.</p> </li>
    /// <li> <p>The first character must be a letter.</p> </li>
    /// <li> <p>Cannot be a reserved word.</p> </li>
    /// </ul>
    pub fn admin_user_name(&self) -> std::option::Option<&str> {
        self.admin_user_name.as_deref()
    }
    /// <p>The password for the Elastic DocumentDB cluster administrator and can contain any printable ASCII characters.</p>
    /// <p> <i>Constraints</i>:</p>
    /// <ul>
    /// <li> <p>Must contain from 8 to 100 characters.</p> </li>
    /// <li> <p>Cannot contain a forward slash (/), double quote ("), or the "at" symbol (@).</p> </li>
    /// </ul>
    pub fn admin_user_password(&self) -> std::option::Option<&str> {
        self.admin_user_password.as_deref()
    }
    /// <p>The capacity of each shard in the new Elastic DocumentDB cluster.</p>
    pub fn shard_capacity(&self) -> std::option::Option<i32> {
        self.shard_capacity
    }
    /// <p>The number of shards to create in the new Elastic DocumentDB cluster.</p>
    pub fn shard_count(&self) -> std::option::Option<i32> {
        self.shard_count
    }
    /// <p>A list of EC2 VPC security groups to associate with the new Elastic DocumentDB cluster.</p>
    pub fn vpc_security_group_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.vpc_security_group_ids.as_deref()
    }
    /// <p>The Amazon EC2 subnet IDs for the new Elastic DocumentDB cluster.</p>
    pub fn subnet_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.subnet_ids.as_deref()
    }
    /// <p>The KMS key identifier to use to encrypt the new Elastic DocumentDB cluster.</p>
    /// <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a cluster using the same Amazon account that owns this KMS encryption key, you can use the KMS key alias instead of the ARN as the KMS encryption key.</p>
    /// <p>If an encryption key is not specified, Elastic DocumentDB uses the default encryption key that KMS creates for your account. Your account has a different default encryption key for each Amazon Region.</p>
    pub fn kms_key_id(&self) -> std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>The client token for the Elastic DocumentDB cluster.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    /// <p> <i>Format</i>: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p>
    /// <p> <i>Default</i>: a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week.</p>
    /// <p> <i>Valid days</i>: Mon, Tue, Wed, Thu, Fri, Sat, Sun</p>
    /// <p> <i>Constraints</i>: Minimum 30-minute window.</p>
    pub fn preferred_maintenance_window(&self) -> std::option::Option<&str> {
        self.preferred_maintenance_window.as_deref()
    }
    /// <p>The tags to be assigned to the new Elastic DocumentDB cluster.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl std::fmt::Debug for CreateClusterInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateClusterInput");
        formatter.field("cluster_name", &self.cluster_name);
        formatter.field("auth_type", &self.auth_type);
        formatter.field("admin_user_name", &self.admin_user_name);
        formatter.field("admin_user_password", &"*** Sensitive Data Redacted ***");
        formatter.field("shard_capacity", &self.shard_capacity);
        formatter.field("shard_count", &self.shard_count);
        formatter.field("vpc_security_group_ids", &self.vpc_security_group_ids);
        formatter.field("subnet_ids", &self.subnet_ids);
        formatter.field("kms_key_id", &self.kms_key_id);
        formatter.field("client_token", &self.client_token);
        formatter.field(
            "preferred_maintenance_window",
            &self.preferred_maintenance_window,
        );
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
impl CreateClusterInput {
    /// Creates a new builder-style object to manufacture [`CreateClusterInput`](crate::operation::create_cluster::CreateClusterInput).
    pub fn builder() -> crate::operation::create_cluster::builders::CreateClusterInputBuilder {
        crate::operation::create_cluster::builders::CreateClusterInputBuilder::default()
    }
}

/// A builder for [`CreateClusterInput`](crate::operation::create_cluster::CreateClusterInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct CreateClusterInputBuilder {
    pub(crate) cluster_name: std::option::Option<std::string::String>,
    pub(crate) auth_type: std::option::Option<crate::types::Auth>,
    pub(crate) admin_user_name: std::option::Option<std::string::String>,
    pub(crate) admin_user_password: std::option::Option<std::string::String>,
    pub(crate) shard_capacity: std::option::Option<i32>,
    pub(crate) shard_count: std::option::Option<i32>,
    pub(crate) vpc_security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) kms_key_id: std::option::Option<std::string::String>,
    pub(crate) client_token: std::option::Option<std::string::String>,
    pub(crate) preferred_maintenance_window: std::option::Option<std::string::String>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl CreateClusterInputBuilder {
    /// <p>The name of the new Elastic DocumentDB cluster. This parameter is stored as a lowercase string.</p>
    /// <p> <i>Constraints</i>:</p>
    /// <ul>
    /// <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li>
    /// <li> <p>The first character must be a letter.</p> </li>
    /// <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// </ul>
    /// <p> <i>Example</i>: <code>my-cluster</code> </p>
    pub fn cluster_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.cluster_name = Some(input.into());
        self
    }
    /// <p>The name of the new Elastic DocumentDB cluster. This parameter is stored as a lowercase string.</p>
    /// <p> <i>Constraints</i>:</p>
    /// <ul>
    /// <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li>
    /// <li> <p>The first character must be a letter.</p> </li>
    /// <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// </ul>
    /// <p> <i>Example</i>: <code>my-cluster</code> </p>
    pub fn set_cluster_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cluster_name = input;
        self
    }
    /// <p>The authentication type for the Elastic DocumentDB cluster.</p>
    pub fn auth_type(mut self, input: crate::types::Auth) -> Self {
        self.auth_type = Some(input);
        self
    }
    /// <p>The authentication type for the Elastic DocumentDB cluster.</p>
    pub fn set_auth_type(mut self, input: std::option::Option<crate::types::Auth>) -> Self {
        self.auth_type = input;
        self
    }
    /// <p>The name of the Elastic DocumentDB cluster administrator.</p>
    /// <p> <i>Constraints</i>:</p>
    /// <ul>
    /// <li> <p>Must be from 1 to 63 letters or numbers.</p> </li>
    /// <li> <p>The first character must be a letter.</p> </li>
    /// <li> <p>Cannot be a reserved word.</p> </li>
    /// </ul>
    pub fn admin_user_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.admin_user_name = Some(input.into());
        self
    }
    /// <p>The name of the Elastic DocumentDB cluster administrator.</p>
    /// <p> <i>Constraints</i>:</p>
    /// <ul>
    /// <li> <p>Must be from 1 to 63 letters or numbers.</p> </li>
    /// <li> <p>The first character must be a letter.</p> </li>
    /// <li> <p>Cannot be a reserved word.</p> </li>
    /// </ul>
    pub fn set_admin_user_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.admin_user_name = input;
        self
    }
    /// <p>The password for the Elastic DocumentDB cluster administrator and can contain any printable ASCII characters.</p>
    /// <p> <i>Constraints</i>:</p>
    /// <ul>
    /// <li> <p>Must contain from 8 to 100 characters.</p> </li>
    /// <li> <p>Cannot contain a forward slash (/), double quote ("), or the "at" symbol (@).</p> </li>
    /// </ul>
    pub fn admin_user_password(mut self, input: impl Into<std::string::String>) -> Self {
        self.admin_user_password = Some(input.into());
        self
    }
    /// <p>The password for the Elastic DocumentDB cluster administrator and can contain any printable ASCII characters.</p>
    /// <p> <i>Constraints</i>:</p>
    /// <ul>
    /// <li> <p>Must contain from 8 to 100 characters.</p> </li>
    /// <li> <p>Cannot contain a forward slash (/), double quote ("), or the "at" symbol (@).</p> </li>
    /// </ul>
    pub fn set_admin_user_password(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.admin_user_password = input;
        self
    }
    /// <p>The capacity of each shard in the new Elastic DocumentDB cluster.</p>
    pub fn shard_capacity(mut self, input: i32) -> Self {
        self.shard_capacity = Some(input);
        self
    }
    /// <p>The capacity of each shard in the new Elastic DocumentDB cluster.</p>
    pub fn set_shard_capacity(mut self, input: std::option::Option<i32>) -> Self {
        self.shard_capacity = input;
        self
    }
    /// <p>The number of shards to create in the new Elastic DocumentDB cluster.</p>
    pub fn shard_count(mut self, input: i32) -> Self {
        self.shard_count = Some(input);
        self
    }
    /// <p>The number of shards to create in the new Elastic DocumentDB cluster.</p>
    pub fn set_shard_count(mut self, input: std::option::Option<i32>) -> Self {
        self.shard_count = input;
        self
    }
    /// Appends an item to `vpc_security_group_ids`.
    ///
    /// To override the contents of this collection use [`set_vpc_security_group_ids`](Self::set_vpc_security_group_ids).
    ///
    /// <p>A list of EC2 VPC security groups to associate with the new Elastic DocumentDB cluster.</p>
    pub fn vpc_security_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.vpc_security_group_ids.unwrap_or_default();
        v.push(input.into());
        self.vpc_security_group_ids = Some(v);
        self
    }
    /// <p>A list of EC2 VPC security groups to associate with the new Elastic DocumentDB cluster.</p>
    pub fn set_vpc_security_group_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.vpc_security_group_ids = input;
        self
    }
    /// Appends an item to `subnet_ids`.
    ///
    /// To override the contents of this collection use [`set_subnet_ids`](Self::set_subnet_ids).
    ///
    /// <p>The Amazon EC2 subnet IDs for the new Elastic DocumentDB cluster.</p>
    pub fn subnet_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.subnet_ids.unwrap_or_default();
        v.push(input.into());
        self.subnet_ids = Some(v);
        self
    }
    /// <p>The Amazon EC2 subnet IDs for the new Elastic DocumentDB cluster.</p>
    pub fn set_subnet_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.subnet_ids = input;
        self
    }
    /// <p>The KMS key identifier to use to encrypt the new Elastic DocumentDB cluster.</p>
    /// <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a cluster using the same Amazon account that owns this KMS encryption key, you can use the KMS key alias instead of the ARN as the KMS encryption key.</p>
    /// <p>If an encryption key is not specified, Elastic DocumentDB uses the default encryption key that KMS creates for your account. Your account has a different default encryption key for each Amazon Region.</p>
    pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.kms_key_id = Some(input.into());
        self
    }
    /// <p>The KMS key identifier to use to encrypt the new Elastic DocumentDB cluster.</p>
    /// <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a cluster using the same Amazon account that owns this KMS encryption key, you can use the KMS key alias instead of the ARN as the KMS encryption key.</p>
    /// <p>If an encryption key is not specified, Elastic DocumentDB uses the default encryption key that KMS creates for your account. Your account has a different default encryption key for each Amazon Region.</p>
    pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The client token for the Elastic DocumentDB cluster.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p>The client token for the Elastic DocumentDB cluster.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    /// <p> <i>Format</i>: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p>
    /// <p> <i>Default</i>: a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week.</p>
    /// <p> <i>Valid days</i>: Mon, Tue, Wed, Thu, Fri, Sat, Sun</p>
    /// <p> <i>Constraints</i>: Minimum 30-minute window.</p>
    pub fn preferred_maintenance_window(mut self, input: impl Into<std::string::String>) -> Self {
        self.preferred_maintenance_window = Some(input.into());
        self
    }
    /// <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    /// <p> <i>Format</i>: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p>
    /// <p> <i>Default</i>: a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week.</p>
    /// <p> <i>Valid days</i>: Mon, Tue, Wed, Thu, Fri, Sat, Sun</p>
    /// <p> <i>Constraints</i>: Minimum 30-minute window.</p>
    pub fn set_preferred_maintenance_window(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.preferred_maintenance_window = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to be assigned to the new Elastic DocumentDB cluster.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>The tags to be assigned to the new Elastic DocumentDB cluster.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateClusterInput`](crate::operation::create_cluster::CreateClusterInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_cluster::CreateClusterInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_cluster::CreateClusterInput {
            cluster_name: self.cluster_name,
            auth_type: self.auth_type,
            admin_user_name: self.admin_user_name,
            admin_user_password: self.admin_user_password,
            shard_capacity: self.shard_capacity,
            shard_count: self.shard_count,
            vpc_security_group_ids: self.vpc_security_group_ids,
            subnet_ids: self.subnet_ids,
            kms_key_id: self.kms_key_id,
            client_token: self.client_token,
            preferred_maintenance_window: self.preferred_maintenance_window,
            tags: self.tags,
        })
    }
}
impl std::fmt::Debug for CreateClusterInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateClusterInputBuilder");
        formatter.field("cluster_name", &self.cluster_name);
        formatter.field("auth_type", &self.auth_type);
        formatter.field("admin_user_name", &self.admin_user_name);
        formatter.field("admin_user_password", &"*** Sensitive Data Redacted ***");
        formatter.field("shard_capacity", &self.shard_capacity);
        formatter.field("shard_count", &self.shard_count);
        formatter.field("vpc_security_group_ids", &self.vpc_security_group_ids);
        formatter.field("subnet_ids", &self.subnet_ids);
        formatter.field("kms_key_id", &self.kms_key_id);
        formatter.field("client_token", &self.client_token);
        formatter.field(
            "preferred_maintenance_window",
            &self.preferred_maintenance_window,
        );
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
