// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_cluster::_update_cluster_output::UpdateClusterOutputBuilder;

pub use crate::operation::update_cluster::_update_cluster_input::UpdateClusterInputBuilder;

/// Fluent builder constructing a request to `UpdateCluster`.
///
/// <p>Modifies a Elastic DocumentDB cluster. This includes updating admin-username/password, upgrading API version setting up a backup window and maintenance window</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateClusterFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_cluster::builders::UpdateClusterInputBuilder,
}
impl UpdateClusterFluentBuilder {
    /// Creates a new `UpdateCluster`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_cluster::UpdateCluster,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::update_cluster::UpdateClusterError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_cluster::UpdateClusterOutput,
        aws_smithy_http::result::SdkError<crate::operation::update_cluster::UpdateClusterError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The arn of the Elastic DocumentDB cluster.</p>
    pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.cluster_arn(input.into());
        self
    }
    /// <p>The arn of the Elastic DocumentDB cluster.</p>
    pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_cluster_arn(input);
        self
    }
    /// <p>The authentication type for the Elastic DocumentDB cluster.</p>
    pub fn auth_type(mut self, input: crate::types::Auth) -> Self {
        self.inner = self.inner.auth_type(input);
        self
    }
    /// <p>The authentication type for the Elastic DocumentDB cluster.</p>
    pub fn set_auth_type(mut self, input: std::option::Option<crate::types::Auth>) -> Self {
        self.inner = self.inner.set_auth_type(input);
        self
    }
    /// <p>The capacity of each shard in the Elastic DocumentDB cluster.</p>
    pub fn shard_capacity(mut self, input: i32) -> Self {
        self.inner = self.inner.shard_capacity(input);
        self
    }
    /// <p>The capacity of each shard in the Elastic DocumentDB cluster.</p>
    pub fn set_shard_capacity(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_shard_capacity(input);
        self
    }
    /// <p>The number of shards to create in the Elastic DocumentDB cluster.</p>
    pub fn shard_count(mut self, input: i32) -> Self {
        self.inner = self.inner.shard_count(input);
        self
    }
    /// <p>The number of shards to create in the Elastic DocumentDB cluster.</p>
    pub fn set_shard_count(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_shard_count(input);
        self
    }
    /// Appends an item to `vpcSecurityGroupIds`.
    ///
    /// To override the contents of this collection use [`set_vpc_security_group_ids`](Self::set_vpc_security_group_ids).
    ///
    /// <p>A list of EC2 VPC security groups to associate with the new Elastic DocumentDB cluster.</p>
    pub fn vpc_security_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.vpc_security_group_ids(input.into());
        self
    }
    /// <p>A list of EC2 VPC security groups to associate with the new Elastic DocumentDB cluster.</p>
    pub fn set_vpc_security_group_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_vpc_security_group_ids(input);
        self
    }
    /// Appends an item to `subnetIds`.
    ///
    /// To override the contents of this collection use [`set_subnet_ids`](Self::set_subnet_ids).
    ///
    /// <p>The number of shards to create in the Elastic DocumentDB cluster.</p>
    pub fn subnet_ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.subnet_ids(input.into());
        self
    }
    /// <p>The number of shards to create in the Elastic DocumentDB cluster.</p>
    pub fn set_subnet_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_subnet_ids(input);
        self
    }
    /// <p>The password for the Elastic DocumentDB cluster administrator. This password can contain any printable ASCII character except forward slash (/), double quote ("), or the "at" symbol (@).</p>
    /// <p> <i>Constraints</i>: Must contain from 8 to 100 characters.</p>
    pub fn admin_user_password(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.admin_user_password(input.into());
        self
    }
    /// <p>The password for the Elastic DocumentDB cluster administrator. This password can contain any printable ASCII character except forward slash (/), double quote ("), or the "at" symbol (@).</p>
    /// <p> <i>Constraints</i>: Must contain from 8 to 100 characters.</p>
    pub fn set_admin_user_password(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_admin_user_password(input);
        self
    }
    /// <p>The client token for the Elastic DocumentDB cluster.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>The client token for the Elastic DocumentDB cluster.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    /// <p> <i>Format</i>: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p>
    /// <p> <i>Default</i>: a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week.</p>
    /// <p> <i>Valid days</i>: Mon, Tue, Wed, Thu, Fri, Sat, Sun</p>
    /// <p> <i>Constraints</i>: Minimum 30-minute window.</p>
    pub fn preferred_maintenance_window(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.preferred_maintenance_window(input.into());
        self
    }
    /// <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    /// <p> <i>Format</i>: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p>
    /// <p> <i>Default</i>: a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week.</p>
    /// <p> <i>Valid days</i>: Mon, Tue, Wed, Thu, Fri, Sat, Sun</p>
    /// <p> <i>Constraints</i>: Minimum 30-minute window.</p>
    pub fn set_preferred_maintenance_window(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_preferred_maintenance_window(input);
        self
    }
}
