// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::restore_cluster_from_snapshot::_restore_cluster_from_snapshot_output::RestoreClusterFromSnapshotOutputBuilder;

pub use crate::operation::restore_cluster_from_snapshot::_restore_cluster_from_snapshot_input::RestoreClusterFromSnapshotInputBuilder;

impl crate::operation::restore_cluster_from_snapshot::builders::RestoreClusterFromSnapshotInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::restore_cluster_from_snapshot::RestoreClusterFromSnapshotOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::restore_cluster_from_snapshot::RestoreClusterFromSnapshotError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.restore_cluster_from_snapshot();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `RestoreClusterFromSnapshot`.
///
/// <p>Restores an elastic cluster from a snapshot.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct RestoreClusterFromSnapshotFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::restore_cluster_from_snapshot::builders::RestoreClusterFromSnapshotInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::restore_cluster_from_snapshot::RestoreClusterFromSnapshotOutput,
        crate::operation::restore_cluster_from_snapshot::RestoreClusterFromSnapshotError,
    > for RestoreClusterFromSnapshotFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::restore_cluster_from_snapshot::RestoreClusterFromSnapshotOutput,
            crate::operation::restore_cluster_from_snapshot::RestoreClusterFromSnapshotError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl RestoreClusterFromSnapshotFluentBuilder {
    /// Creates a new `RestoreClusterFromSnapshot`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the RestoreClusterFromSnapshot as a reference.
    pub fn as_input(&self) -> &crate::operation::restore_cluster_from_snapshot::builders::RestoreClusterFromSnapshotInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::restore_cluster_from_snapshot::RestoreClusterFromSnapshotOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::restore_cluster_from_snapshot::RestoreClusterFromSnapshotError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::restore_cluster_from_snapshot::RestoreClusterFromSnapshot::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::restore_cluster_from_snapshot::RestoreClusterFromSnapshot::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::restore_cluster_from_snapshot::RestoreClusterFromSnapshotOutput,
        crate::operation::restore_cluster_from_snapshot::RestoreClusterFromSnapshotError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the elastic cluster.</p>
    pub fn cluster_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.cluster_name(input.into());
        self
    }
    /// <p>The name of the elastic cluster.</p>
    pub fn set_cluster_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_cluster_name(input);
        self
    }
    /// <p>The name of the elastic cluster.</p>
    pub fn get_cluster_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_cluster_name()
    }
    /// <p>The ARN identifier of the elastic cluster snapshot.</p>
    pub fn snapshot_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.snapshot_arn(input.into());
        self
    }
    /// <p>The ARN identifier of the elastic cluster snapshot.</p>
    pub fn set_snapshot_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_snapshot_arn(input);
        self
    }
    /// <p>The ARN identifier of the elastic cluster snapshot.</p>
    pub fn get_snapshot_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_snapshot_arn()
    }
    ///
    /// Appends an item to `vpcSecurityGroupIds`.
    ///
    /// To override the contents of this collection use [`set_vpc_security_group_ids`](Self::set_vpc_security_group_ids).
    ///
    /// <p>A list of EC2 VPC security groups to associate with the elastic cluster.</p>
    pub fn vpc_security_group_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.vpc_security_group_ids(input.into());
        self
    }
    /// <p>A list of EC2 VPC security groups to associate with the elastic cluster.</p>
    pub fn set_vpc_security_group_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_vpc_security_group_ids(input);
        self
    }
    /// <p>A list of EC2 VPC security groups to associate with the elastic cluster.</p>
    pub fn get_vpc_security_group_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_vpc_security_group_ids()
    }
    ///
    /// Appends an item to `subnetIds`.
    ///
    /// To override the contents of this collection use [`set_subnet_ids`](Self::set_subnet_ids).
    ///
    /// <p>The Amazon EC2 subnet IDs for the elastic cluster.</p>
    pub fn subnet_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.subnet_ids(input.into());
        self
    }
    /// <p>The Amazon EC2 subnet IDs for the elastic cluster.</p>
    pub fn set_subnet_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_subnet_ids(input);
        self
    }
    /// <p>The Amazon EC2 subnet IDs for the elastic cluster.</p>
    pub fn get_subnet_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_subnet_ids()
    }
    /// <p>The KMS key identifier to use to encrypt the new Amazon DocumentDB elastic clusters cluster.</p>
    /// <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a cluster using the same Amazon account that owns this KMS encryption key, you can use the KMS key alias instead of the ARN as the KMS encryption key.</p>
    /// <p>If an encryption key is not specified here, Amazon DocumentDB uses the default encryption key that KMS creates for your account. Your account has a different default encryption key for each Amazon Region.</p>
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.kms_key_id(input.into());
        self
    }
    /// <p>The KMS key identifier to use to encrypt the new Amazon DocumentDB elastic clusters cluster.</p>
    /// <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a cluster using the same Amazon account that owns this KMS encryption key, you can use the KMS key alias instead of the ARN as the KMS encryption key.</p>
    /// <p>If an encryption key is not specified here, Amazon DocumentDB uses the default encryption key that KMS creates for your account. Your account has a different default encryption key for each Amazon Region.</p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_kms_key_id(input);
        self
    }
    /// <p>The KMS key identifier to use to encrypt the new Amazon DocumentDB elastic clusters cluster.</p>
    /// <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a cluster using the same Amazon account that owns this KMS encryption key, you can use the KMS key alias instead of the ARN as the KMS encryption key.</p>
    /// <p>If an encryption key is not specified here, Amazon DocumentDB uses the default encryption key that KMS creates for your account. Your account has a different default encryption key for each Amazon Region.</p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_kms_key_id()
    }
    ///
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of the tag names to be assigned to the restored elastic cluster, in the form of an array of key-value pairs in which the key is the tag name and the value is the key value.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>A list of the tag names to be assigned to the restored elastic cluster, in the form of an array of key-value pairs in which the key is the tag name and the value is the key value.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>A list of the tag names to be assigned to the restored elastic cluster, in the form of an array of key-value pairs in which the key is the tag name and the value is the key value.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_tags()
    }
    /// <p>The capacity of each shard in the new restored elastic cluster.</p>
    pub fn shard_capacity(mut self, input: i32) -> Self {
        self.inner = self.inner.shard_capacity(input);
        self
    }
    /// <p>The capacity of each shard in the new restored elastic cluster.</p>
    pub fn set_shard_capacity(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_shard_capacity(input);
        self
    }
    /// <p>The capacity of each shard in the new restored elastic cluster.</p>
    pub fn get_shard_capacity(&self) -> &::std::option::Option<i32> {
        self.inner.get_shard_capacity()
    }
    /// <p>The number of replica instances applying to all shards in the elastic cluster. A <code>shardInstanceCount</code> value of 1 means there is one writer instance, and any additional instances are replicas that can be used for reads and to improve availability.</p>
    pub fn shard_instance_count(mut self, input: i32) -> Self {
        self.inner = self.inner.shard_instance_count(input);
        self
    }
    /// <p>The number of replica instances applying to all shards in the elastic cluster. A <code>shardInstanceCount</code> value of 1 means there is one writer instance, and any additional instances are replicas that can be used for reads and to improve availability.</p>
    pub fn set_shard_instance_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_shard_instance_count(input);
        self
    }
    /// <p>The number of replica instances applying to all shards in the elastic cluster. A <code>shardInstanceCount</code> value of 1 means there is one writer instance, and any additional instances are replicas that can be used for reads and to improve availability.</p>
    pub fn get_shard_instance_count(&self) -> &::std::option::Option<i32> {
        self.inner.get_shard_instance_count()
    }
}
