// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    if builder.service_code.is_none() {
        builder.service_code = Some(Default::default())
    }
    if builder.quota_code.is_none() {
        builder.quota_code = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn template_revision_correct_errors(
    mut builder: crate::types::builders::TemplateRevisionBuilder,
) -> crate::types::builders::TemplateRevisionBuilder {
    if builder.major_revision.is_none() {
        builder.major_revision = Some(Default::default())
    }
    if builder.minor_revision.is_none() {
        builder.minor_revision = Some(Default::default())
    }
    builder
}

pub(crate) fn vpc_information_correct_errors(
    mut builder: crate::types::builders::VpcInformationBuilder,
) -> crate::types::builders::VpcInformationBuilder {
    if builder.security_group_ids.is_none() {
        builder.security_group_ids = Some(Default::default())
    }
    builder
}

pub(crate) fn template_v2_correct_errors(mut builder: crate::types::builders::TemplateV2Builder) -> crate::types::builders::TemplateV2Builder {
    if builder.certificate_validity.is_none() {
        builder.certificate_validity = {
            let builder = crate::types::builders::CertificateValidityBuilder::default();
            Some(crate::serde_util::certificate_validity_correct_errors(builder).build())
        }
    }
    if builder.private_key_attributes.is_none() {
        builder.private_key_attributes = {
            let builder = crate::types::builders::PrivateKeyAttributesV2Builder::default();
            crate::serde_util::private_key_attributes_v2_correct_errors(builder).build().ok()
        }
    }
    if builder.private_key_flags.is_none() {
        builder.private_key_flags = {
            let builder = crate::types::builders::PrivateKeyFlagsV2Builder::default();
            crate::serde_util::private_key_flags_v2_correct_errors(builder).build().ok()
        }
    }
    if builder.enrollment_flags.is_none() {
        builder.enrollment_flags = {
            let builder = crate::types::builders::EnrollmentFlagsV2Builder::default();
            Some(builder.build())
        }
    }
    if builder.subject_name_flags.is_none() {
        builder.subject_name_flags = {
            let builder = crate::types::builders::SubjectNameFlagsV2Builder::default();
            Some(builder.build())
        }
    }
    if builder.general_flags.is_none() {
        builder.general_flags = {
            let builder = crate::types::builders::GeneralFlagsV2Builder::default();
            Some(builder.build())
        }
    }
    if builder.extensions.is_none() {
        builder.extensions = {
            let builder = crate::types::builders::ExtensionsV2Builder::default();
            Some(crate::serde_util::extensions_v2_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn template_v3_correct_errors(mut builder: crate::types::builders::TemplateV3Builder) -> crate::types::builders::TemplateV3Builder {
    if builder.certificate_validity.is_none() {
        builder.certificate_validity = {
            let builder = crate::types::builders::CertificateValidityBuilder::default();
            Some(crate::serde_util::certificate_validity_correct_errors(builder).build())
        }
    }
    if builder.private_key_attributes.is_none() {
        builder.private_key_attributes = {
            let builder = crate::types::builders::PrivateKeyAttributesV3Builder::default();
            crate::serde_util::private_key_attributes_v3_correct_errors(builder).build().ok()
        }
    }
    if builder.private_key_flags.is_none() {
        builder.private_key_flags = {
            let builder = crate::types::builders::PrivateKeyFlagsV3Builder::default();
            crate::serde_util::private_key_flags_v3_correct_errors(builder).build().ok()
        }
    }
    if builder.enrollment_flags.is_none() {
        builder.enrollment_flags = {
            let builder = crate::types::builders::EnrollmentFlagsV3Builder::default();
            Some(builder.build())
        }
    }
    if builder.subject_name_flags.is_none() {
        builder.subject_name_flags = {
            let builder = crate::types::builders::SubjectNameFlagsV3Builder::default();
            Some(builder.build())
        }
    }
    if builder.general_flags.is_none() {
        builder.general_flags = {
            let builder = crate::types::builders::GeneralFlagsV3Builder::default();
            Some(builder.build())
        }
    }
    if builder.hash_algorithm.is_none() {
        builder.hash_algorithm = "no value was set".parse::<crate::types::HashAlgorithm>().ok()
    }
    if builder.extensions.is_none() {
        builder.extensions = {
            let builder = crate::types::builders::ExtensionsV3Builder::default();
            Some(crate::serde_util::extensions_v3_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn template_v4_correct_errors(mut builder: crate::types::builders::TemplateV4Builder) -> crate::types::builders::TemplateV4Builder {
    if builder.certificate_validity.is_none() {
        builder.certificate_validity = {
            let builder = crate::types::builders::CertificateValidityBuilder::default();
            Some(crate::serde_util::certificate_validity_correct_errors(builder).build())
        }
    }
    if builder.private_key_attributes.is_none() {
        builder.private_key_attributes = {
            let builder = crate::types::builders::PrivateKeyAttributesV4Builder::default();
            crate::serde_util::private_key_attributes_v4_correct_errors(builder).build().ok()
        }
    }
    if builder.private_key_flags.is_none() {
        builder.private_key_flags = {
            let builder = crate::types::builders::PrivateKeyFlagsV4Builder::default();
            crate::serde_util::private_key_flags_v4_correct_errors(builder).build().ok()
        }
    }
    if builder.enrollment_flags.is_none() {
        builder.enrollment_flags = {
            let builder = crate::types::builders::EnrollmentFlagsV4Builder::default();
            Some(builder.build())
        }
    }
    if builder.subject_name_flags.is_none() {
        builder.subject_name_flags = {
            let builder = crate::types::builders::SubjectNameFlagsV4Builder::default();
            Some(builder.build())
        }
    }
    if builder.general_flags.is_none() {
        builder.general_flags = {
            let builder = crate::types::builders::GeneralFlagsV4Builder::default();
            Some(builder.build())
        }
    }
    if builder.extensions.is_none() {
        builder.extensions = {
            let builder = crate::types::builders::ExtensionsV4Builder::default();
            Some(crate::serde_util::extensions_v4_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn certificate_validity_correct_errors(
    mut builder: crate::types::builders::CertificateValidityBuilder,
) -> crate::types::builders::CertificateValidityBuilder {
    if builder.validity_period.is_none() {
        builder.validity_period = {
            let builder = crate::types::builders::ValidityPeriodBuilder::default();
            crate::serde_util::validity_period_correct_errors(builder).build().ok()
        }
    }
    if builder.renewal_period.is_none() {
        builder.renewal_period = {
            let builder = crate::types::builders::ValidityPeriodBuilder::default();
            crate::serde_util::validity_period_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn extensions_v2_correct_errors(mut builder: crate::types::builders::ExtensionsV2Builder) -> crate::types::builders::ExtensionsV2Builder {
    if builder.key_usage.is_none() {
        builder.key_usage = {
            let builder = crate::types::builders::KeyUsageBuilder::default();
            Some(crate::serde_util::key_usage_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn extensions_v3_correct_errors(mut builder: crate::types::builders::ExtensionsV3Builder) -> crate::types::builders::ExtensionsV3Builder {
    if builder.key_usage.is_none() {
        builder.key_usage = {
            let builder = crate::types::builders::KeyUsageBuilder::default();
            Some(crate::serde_util::key_usage_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn extensions_v4_correct_errors(mut builder: crate::types::builders::ExtensionsV4Builder) -> crate::types::builders::ExtensionsV4Builder {
    if builder.key_usage.is_none() {
        builder.key_usage = {
            let builder = crate::types::builders::KeyUsageBuilder::default();
            Some(crate::serde_util::key_usage_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn private_key_attributes_v2_correct_errors(
    mut builder: crate::types::builders::PrivateKeyAttributesV2Builder,
) -> crate::types::builders::PrivateKeyAttributesV2Builder {
    if builder.minimal_key_length.is_none() {
        builder.minimal_key_length = Some(Default::default())
    }
    if builder.key_spec.is_none() {
        builder.key_spec = "no value was set".parse::<crate::types::KeySpec>().ok()
    }
    builder
}

pub(crate) fn private_key_attributes_v3_correct_errors(
    mut builder: crate::types::builders::PrivateKeyAttributesV3Builder,
) -> crate::types::builders::PrivateKeyAttributesV3Builder {
    if builder.minimal_key_length.is_none() {
        builder.minimal_key_length = Some(Default::default())
    }
    if builder.key_spec.is_none() {
        builder.key_spec = "no value was set".parse::<crate::types::KeySpec>().ok()
    }
    if builder.key_usage_property.is_none() {
        builder.key_usage_property = Some(crate::types::KeyUsageProperty::Unknown)
    }
    if builder.algorithm.is_none() {
        builder.algorithm = "no value was set".parse::<crate::types::PrivateKeyAlgorithm>().ok()
    }
    builder
}

pub(crate) fn private_key_attributes_v4_correct_errors(
    mut builder: crate::types::builders::PrivateKeyAttributesV4Builder,
) -> crate::types::builders::PrivateKeyAttributesV4Builder {
    if builder.minimal_key_length.is_none() {
        builder.minimal_key_length = Some(Default::default())
    }
    if builder.key_spec.is_none() {
        builder.key_spec = "no value was set".parse::<crate::types::KeySpec>().ok()
    }
    builder
}

pub(crate) fn private_key_flags_v2_correct_errors(
    mut builder: crate::types::builders::PrivateKeyFlagsV2Builder,
) -> crate::types::builders::PrivateKeyFlagsV2Builder {
    if builder.client_version.is_none() {
        builder.client_version = "no value was set".parse::<crate::types::ClientCompatibilityV2>().ok()
    }
    builder
}

pub(crate) fn private_key_flags_v3_correct_errors(
    mut builder: crate::types::builders::PrivateKeyFlagsV3Builder,
) -> crate::types::builders::PrivateKeyFlagsV3Builder {
    if builder.client_version.is_none() {
        builder.client_version = "no value was set".parse::<crate::types::ClientCompatibilityV3>().ok()
    }
    builder
}

pub(crate) fn private_key_flags_v4_correct_errors(
    mut builder: crate::types::builders::PrivateKeyFlagsV4Builder,
) -> crate::types::builders::PrivateKeyFlagsV4Builder {
    if builder.client_version.is_none() {
        builder.client_version = "no value was set".parse::<crate::types::ClientCompatibilityV4>().ok()
    }
    builder
}

pub(crate) fn application_policies_correct_errors(
    mut builder: crate::types::builders::ApplicationPoliciesBuilder,
) -> crate::types::builders::ApplicationPoliciesBuilder {
    if builder.policies.is_none() {
        builder.policies = Some(Default::default())
    }
    builder
}

pub(crate) fn key_usage_correct_errors(mut builder: crate::types::builders::KeyUsageBuilder) -> crate::types::builders::KeyUsageBuilder {
    if builder.usage_flags.is_none() {
        builder.usage_flags = {
            let builder = crate::types::builders::KeyUsageFlagsBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn validity_period_correct_errors(
    mut builder: crate::types::builders::ValidityPeriodBuilder,
) -> crate::types::builders::ValidityPeriodBuilder {
    if builder.period_type.is_none() {
        builder.period_type = "no value was set".parse::<crate::types::ValidityPeriodType>().ok()
    }
    if builder.period.is_none() {
        builder.period = Some(Default::default())
    }
    builder
}
