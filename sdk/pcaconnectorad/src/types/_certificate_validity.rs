// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information describing the end of the validity period of the certificate. This parameter sets the “Not After” date for the certificate. Certificate validity is the period of time during which a certificate is valid. Validity can be expressed as an explicit date and time when the certificate expires, or as a span of time after issuance, stated in days, months, or years. For more information, see Validity in RFC 5280. This value is unaffected when ValidityNotBefore is also specified. For example, if Validity is set to 20 days in the future, the certificate will expire 20 days from issuance time regardless of the ValidityNotBefore value.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CertificateValidity {
    /// <p>Information describing the end of the validity period of the certificate. This parameter sets the “Not After” date for the certificate. Certificate validity is the period of time during which a certificate is valid. Validity can be expressed as an explicit date and time when the certificate expires, or as a span of time after issuance, stated in days, months, or years. For more information, see Validity in RFC 5280. This value is unaffected when ValidityNotBefore is also specified. For example, if Validity is set to 20 days in the future, the certificate will expire 20 days from issuance time regardless of the ValidityNotBefore value.</p>
    pub validity_period: ::std::option::Option<crate::types::ValidityPeriod>,
    /// <p>Renewal period is the period of time before certificate expiration when a new certificate will be requested.</p>
    pub renewal_period: ::std::option::Option<crate::types::ValidityPeriod>,
}
impl CertificateValidity {
    /// <p>Information describing the end of the validity period of the certificate. This parameter sets the “Not After” date for the certificate. Certificate validity is the period of time during which a certificate is valid. Validity can be expressed as an explicit date and time when the certificate expires, or as a span of time after issuance, stated in days, months, or years. For more information, see Validity in RFC 5280. This value is unaffected when ValidityNotBefore is also specified. For example, if Validity is set to 20 days in the future, the certificate will expire 20 days from issuance time regardless of the ValidityNotBefore value.</p>
    pub fn validity_period(&self) -> ::std::option::Option<&crate::types::ValidityPeriod> {
        self.validity_period.as_ref()
    }
    /// <p>Renewal period is the period of time before certificate expiration when a new certificate will be requested.</p>
    pub fn renewal_period(&self) -> ::std::option::Option<&crate::types::ValidityPeriod> {
        self.renewal_period.as_ref()
    }
}
impl CertificateValidity {
    /// Creates a new builder-style object to manufacture [`CertificateValidity`](crate::types::CertificateValidity).
    pub fn builder() -> crate::types::builders::CertificateValidityBuilder {
        crate::types::builders::CertificateValidityBuilder::default()
    }
}

/// A builder for [`CertificateValidity`](crate::types::CertificateValidity).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CertificateValidityBuilder {
    pub(crate) validity_period: ::std::option::Option<crate::types::ValidityPeriod>,
    pub(crate) renewal_period: ::std::option::Option<crate::types::ValidityPeriod>,
}
impl CertificateValidityBuilder {
    /// <p>Information describing the end of the validity period of the certificate. This parameter sets the “Not After” date for the certificate. Certificate validity is the period of time during which a certificate is valid. Validity can be expressed as an explicit date and time when the certificate expires, or as a span of time after issuance, stated in days, months, or years. For more information, see Validity in RFC 5280. This value is unaffected when ValidityNotBefore is also specified. For example, if Validity is set to 20 days in the future, the certificate will expire 20 days from issuance time regardless of the ValidityNotBefore value.</p>
    /// This field is required.
    pub fn validity_period(mut self, input: crate::types::ValidityPeriod) -> Self {
        self.validity_period = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information describing the end of the validity period of the certificate. This parameter sets the “Not After” date for the certificate. Certificate validity is the period of time during which a certificate is valid. Validity can be expressed as an explicit date and time when the certificate expires, or as a span of time after issuance, stated in days, months, or years. For more information, see Validity in RFC 5280. This value is unaffected when ValidityNotBefore is also specified. For example, if Validity is set to 20 days in the future, the certificate will expire 20 days from issuance time regardless of the ValidityNotBefore value.</p>
    pub fn set_validity_period(mut self, input: ::std::option::Option<crate::types::ValidityPeriod>) -> Self {
        self.validity_period = input;
        self
    }
    /// <p>Information describing the end of the validity period of the certificate. This parameter sets the “Not After” date for the certificate. Certificate validity is the period of time during which a certificate is valid. Validity can be expressed as an explicit date and time when the certificate expires, or as a span of time after issuance, stated in days, months, or years. For more information, see Validity in RFC 5280. This value is unaffected when ValidityNotBefore is also specified. For example, if Validity is set to 20 days in the future, the certificate will expire 20 days from issuance time regardless of the ValidityNotBefore value.</p>
    pub fn get_validity_period(&self) -> &::std::option::Option<crate::types::ValidityPeriod> {
        &self.validity_period
    }
    /// <p>Renewal period is the period of time before certificate expiration when a new certificate will be requested.</p>
    /// This field is required.
    pub fn renewal_period(mut self, input: crate::types::ValidityPeriod) -> Self {
        self.renewal_period = ::std::option::Option::Some(input);
        self
    }
    /// <p>Renewal period is the period of time before certificate expiration when a new certificate will be requested.</p>
    pub fn set_renewal_period(mut self, input: ::std::option::Option<crate::types::ValidityPeriod>) -> Self {
        self.renewal_period = input;
        self
    }
    /// <p>Renewal period is the period of time before certificate expiration when a new certificate will be requested.</p>
    pub fn get_renewal_period(&self) -> &::std::option::Option<crate::types::ValidityPeriod> {
        &self.renewal_period
    }
    /// Consumes the builder and constructs a [`CertificateValidity`](crate::types::CertificateValidity).
    pub fn build(self) -> crate::types::CertificateValidity {
        crate::types::CertificateValidity {
            validity_period: self.validity_period,
            renewal_period: self.renewal_period,
        }
    }
}
