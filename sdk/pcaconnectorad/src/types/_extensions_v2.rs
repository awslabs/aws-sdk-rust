// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Certificate extensions for v2 template schema</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExtensionsV2 {
    /// <p>The key usage extension defines the purpose (e.g., encipherment, signature, certificate signing) of the key contained in the certificate.</p>
    pub key_usage: ::std::option::Option<crate::types::KeyUsage>,
    /// <p>Application policies specify what the certificate is used for and its purpose. </p>
    pub application_policies: ::std::option::Option<crate::types::ApplicationPolicies>,
}
impl ExtensionsV2 {
    /// <p>The key usage extension defines the purpose (e.g., encipherment, signature, certificate signing) of the key contained in the certificate.</p>
    pub fn key_usage(&self) -> ::std::option::Option<&crate::types::KeyUsage> {
        self.key_usage.as_ref()
    }
    /// <p>Application policies specify what the certificate is used for and its purpose. </p>
    pub fn application_policies(&self) -> ::std::option::Option<&crate::types::ApplicationPolicies> {
        self.application_policies.as_ref()
    }
}
impl ExtensionsV2 {
    /// Creates a new builder-style object to manufacture [`ExtensionsV2`](crate::types::ExtensionsV2).
    pub fn builder() -> crate::types::builders::ExtensionsV2Builder {
        crate::types::builders::ExtensionsV2Builder::default()
    }
}

/// A builder for [`ExtensionsV2`](crate::types::ExtensionsV2).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExtensionsV2Builder {
    pub(crate) key_usage: ::std::option::Option<crate::types::KeyUsage>,
    pub(crate) application_policies: ::std::option::Option<crate::types::ApplicationPolicies>,
}
impl ExtensionsV2Builder {
    /// <p>The key usage extension defines the purpose (e.g., encipherment, signature, certificate signing) of the key contained in the certificate.</p>
    /// This field is required.
    pub fn key_usage(mut self, input: crate::types::KeyUsage) -> Self {
        self.key_usage = ::std::option::Option::Some(input);
        self
    }
    /// <p>The key usage extension defines the purpose (e.g., encipherment, signature, certificate signing) of the key contained in the certificate.</p>
    pub fn set_key_usage(mut self, input: ::std::option::Option<crate::types::KeyUsage>) -> Self {
        self.key_usage = input;
        self
    }
    /// <p>The key usage extension defines the purpose (e.g., encipherment, signature, certificate signing) of the key contained in the certificate.</p>
    pub fn get_key_usage(&self) -> &::std::option::Option<crate::types::KeyUsage> {
        &self.key_usage
    }
    /// <p>Application policies specify what the certificate is used for and its purpose. </p>
    pub fn application_policies(mut self, input: crate::types::ApplicationPolicies) -> Self {
        self.application_policies = ::std::option::Option::Some(input);
        self
    }
    /// <p>Application policies specify what the certificate is used for and its purpose. </p>
    pub fn set_application_policies(mut self, input: ::std::option::Option<crate::types::ApplicationPolicies>) -> Self {
        self.application_policies = input;
        self
    }
    /// <p>Application policies specify what the certificate is used for and its purpose. </p>
    pub fn get_application_policies(&self) -> &::std::option::Option<crate::types::ApplicationPolicies> {
        &self.application_policies
    }
    /// Consumes the builder and constructs a [`ExtensionsV2`](crate::types::ExtensionsV2).
    pub fn build(self) -> crate::types::ExtensionsV2 {
        crate::types::ExtensionsV2 {
            key_usage: self.key_usage,
            application_policies: self.application_policies,
        }
    }
}
