// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The key usage extension defines the purpose (e.g., encipherment, signature) of the key contained in the certificate.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KeyUsage {
    /// <p>Sets the key usage extension to critical.</p>
    pub critical: ::std::option::Option<bool>,
    /// <p>The key usage flags represent the purpose (e.g., encipherment, signature) of the key contained in the certificate.</p>
    pub usage_flags: ::std::option::Option<crate::types::KeyUsageFlags>,
}
impl KeyUsage {
    /// <p>Sets the key usage extension to critical.</p>
    pub fn critical(&self) -> ::std::option::Option<bool> {
        self.critical
    }
    /// <p>The key usage flags represent the purpose (e.g., encipherment, signature) of the key contained in the certificate.</p>
    pub fn usage_flags(&self) -> ::std::option::Option<&crate::types::KeyUsageFlags> {
        self.usage_flags.as_ref()
    }
}
impl KeyUsage {
    /// Creates a new builder-style object to manufacture [`KeyUsage`](crate::types::KeyUsage).
    pub fn builder() -> crate::types::builders::KeyUsageBuilder {
        crate::types::builders::KeyUsageBuilder::default()
    }
}

/// A builder for [`KeyUsage`](crate::types::KeyUsage).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct KeyUsageBuilder {
    pub(crate) critical: ::std::option::Option<bool>,
    pub(crate) usage_flags: ::std::option::Option<crate::types::KeyUsageFlags>,
}
impl KeyUsageBuilder {
    /// <p>Sets the key usage extension to critical.</p>
    pub fn critical(mut self, input: bool) -> Self {
        self.critical = ::std::option::Option::Some(input);
        self
    }
    /// <p>Sets the key usage extension to critical.</p>
    pub fn set_critical(mut self, input: ::std::option::Option<bool>) -> Self {
        self.critical = input;
        self
    }
    /// <p>Sets the key usage extension to critical.</p>
    pub fn get_critical(&self) -> &::std::option::Option<bool> {
        &self.critical
    }
    /// <p>The key usage flags represent the purpose (e.g., encipherment, signature) of the key contained in the certificate.</p>
    /// This field is required.
    pub fn usage_flags(mut self, input: crate::types::KeyUsageFlags) -> Self {
        self.usage_flags = ::std::option::Option::Some(input);
        self
    }
    /// <p>The key usage flags represent the purpose (e.g., encipherment, signature) of the key contained in the certificate.</p>
    pub fn set_usage_flags(mut self, input: ::std::option::Option<crate::types::KeyUsageFlags>) -> Self {
        self.usage_flags = input;
        self
    }
    /// <p>The key usage flags represent the purpose (e.g., encipherment, signature) of the key contained in the certificate.</p>
    pub fn get_usage_flags(&self) -> &::std::option::Option<crate::types::KeyUsageFlags> {
        &self.usage_flags
    }
    /// Consumes the builder and constructs a [`KeyUsage`](crate::types::KeyUsage).
    pub fn build(self) -> crate::types::KeyUsage {
        crate::types::KeyUsage {
            critical: self.critical,
            usage_flags: self.usage_flags,
        }
    }
}
