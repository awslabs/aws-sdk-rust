// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about your VPC and security groups used with the connector.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VpcInformation {
    /// <p>The security groups used with the connector. You can use a maximum of 4 security groups with a connector.</p>
    pub security_group_ids: ::std::vec::Vec<::std::string::String>,
}
impl VpcInformation {
    /// <p>The security groups used with the connector. You can use a maximum of 4 security groups with a connector.</p>
    pub fn security_group_ids(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.security_group_ids.deref()
    }
}
impl VpcInformation {
    /// Creates a new builder-style object to manufacture [`VpcInformation`](crate::types::VpcInformation).
    pub fn builder() -> crate::types::builders::VpcInformationBuilder {
        crate::types::builders::VpcInformationBuilder::default()
    }
}

/// A builder for [`VpcInformation`](crate::types::VpcInformation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct VpcInformationBuilder {
    pub(crate) security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl VpcInformationBuilder {
    /// Appends an item to `security_group_ids`.
    ///
    /// To override the contents of this collection use [`set_security_group_ids`](Self::set_security_group_ids).
    ///
    /// <p>The security groups used with the connector. You can use a maximum of 4 security groups with a connector.</p>
    pub fn security_group_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.security_group_ids.unwrap_or_default();
        v.push(input.into());
        self.security_group_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The security groups used with the connector. You can use a maximum of 4 security groups with a connector.</p>
    pub fn set_security_group_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.security_group_ids = input;
        self
    }
    /// <p>The security groups used with the connector. You can use a maximum of 4 security groups with a connector.</p>
    pub fn get_security_group_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.security_group_ids
    }
    /// Consumes the builder and constructs a [`VpcInformation`](crate::types::VpcInformation).
    /// This method will fail if any of the following fields are not set:
    /// - [`security_group_ids`](crate::types::builders::VpcInformationBuilder::security_group_ids)
    pub fn build(self) -> ::std::result::Result<crate::types::VpcInformation, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::VpcInformation {
            security_group_ids: self.security_group_ids.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "security_group_ids",
                    "security_group_ids was not specified but it is required when building VpcInformation",
                )
            })?,
        })
    }
}
