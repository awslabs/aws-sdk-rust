// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Application policies describe what the certificate can be used for.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ApplicationPolicies {
    /// <p>Marks the application policy extension as critical.</p>
    pub critical: ::std::option::Option<bool>,
    /// <p>Application policies describe what the certificate can be used for.</p>
    pub policies: ::std::vec::Vec<crate::types::ApplicationPolicy>,
}
impl ApplicationPolicies {
    /// <p>Marks the application policy extension as critical.</p>
    pub fn critical(&self) -> ::std::option::Option<bool> {
        self.critical
    }
    /// <p>Application policies describe what the certificate can be used for.</p>
    pub fn policies(&self) -> &[crate::types::ApplicationPolicy] {
        use std::ops::Deref;
        self.policies.deref()
    }
}
impl ApplicationPolicies {
    /// Creates a new builder-style object to manufacture [`ApplicationPolicies`](crate::types::ApplicationPolicies).
    pub fn builder() -> crate::types::builders::ApplicationPoliciesBuilder {
        crate::types::builders::ApplicationPoliciesBuilder::default()
    }
}

/// A builder for [`ApplicationPolicies`](crate::types::ApplicationPolicies).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ApplicationPoliciesBuilder {
    pub(crate) critical: ::std::option::Option<bool>,
    pub(crate) policies: ::std::option::Option<::std::vec::Vec<crate::types::ApplicationPolicy>>,
}
impl ApplicationPoliciesBuilder {
    /// <p>Marks the application policy extension as critical.</p>
    pub fn critical(mut self, input: bool) -> Self {
        self.critical = ::std::option::Option::Some(input);
        self
    }
    /// <p>Marks the application policy extension as critical.</p>
    pub fn set_critical(mut self, input: ::std::option::Option<bool>) -> Self {
        self.critical = input;
        self
    }
    /// <p>Marks the application policy extension as critical.</p>
    pub fn get_critical(&self) -> &::std::option::Option<bool> {
        &self.critical
    }
    /// Appends an item to `policies`.
    ///
    /// To override the contents of this collection use [`set_policies`](Self::set_policies).
    ///
    /// <p>Application policies describe what the certificate can be used for.</p>
    pub fn policies(mut self, input: crate::types::ApplicationPolicy) -> Self {
        let mut v = self.policies.unwrap_or_default();
        v.push(input);
        self.policies = ::std::option::Option::Some(v);
        self
    }
    /// <p>Application policies describe what the certificate can be used for.</p>
    pub fn set_policies(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ApplicationPolicy>>) -> Self {
        self.policies = input;
        self
    }
    /// <p>Application policies describe what the certificate can be used for.</p>
    pub fn get_policies(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ApplicationPolicy>> {
        &self.policies
    }
    /// Consumes the builder and constructs a [`ApplicationPolicies`](crate::types::ApplicationPolicies).
    /// This method will fail if any of the following fields are not set:
    /// - [`policies`](crate::types::builders::ApplicationPoliciesBuilder::policies)
    pub fn build(self) -> ::std::result::Result<crate::types::ApplicationPolicies, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ApplicationPolicies {
            critical: self.critical,
            policies: self.policies.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "policies",
                    "policies was not specified but it is required when building ApplicationPolicies",
                )
            })?,
        })
    }
}
