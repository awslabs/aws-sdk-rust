// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_private_key_attributes_v3(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::PrivateKeyAttributesV3,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("MinimalKeyLength").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.minimal_key_length).into()),
        );
    }
    {
        object.key("KeySpec").string(input.key_spec.as_str());
    }
    if let Some(var_1) = &input.crypto_providers {
        let mut array_2 = object.key("CryptoProviders").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.key_usage_property {
        #[allow(unused_mut)]
        let mut object_5 = object.key("KeyUsageProperty").start_object();
        crate::protocol_serde::shape_key_usage_property::ser_key_usage_property(&mut object_5, var_4)?;
        object_5.finish();
    }
    {
        object.key("Algorithm").string(input.algorithm.as_str());
    }
    Ok(())
}

pub(crate) fn de_private_key_attributes_v3<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::PrivateKeyAttributesV3>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::PrivateKeyAttributesV3Builder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "MinimalKeyLength" => {
                            builder = builder.set_minimal_key_length(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "KeySpec" => {
                            builder = builder.set_key_spec(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::KeySpec::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "CryptoProviders" => {
                            builder =
                                builder.set_crypto_providers(crate::protocol_serde::shape_crypto_providers_list::de_crypto_providers_list(tokens)?);
                        }
                        "KeyUsageProperty" => {
                            builder = builder.set_key_usage_property(crate::protocol_serde::shape_key_usage_property::de_key_usage_property(tokens)?);
                        }
                        "Algorithm" => {
                            builder = builder.set_algorithm(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::PrivateKeyAlgorithm::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(
                crate::serde_util::private_key_attributes_v3_correct_errors(builder)
                    .build()
                    .map_err(|err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err))?,
            ))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
