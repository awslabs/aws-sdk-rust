// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_template_v2(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::TemplateV2,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.certificate_validity {
        #[allow(unused_mut)]
        let mut object_2 = object.key("CertificateValidity").start_object();
        crate::protocol_serde::shape_certificate_validity::ser_certificate_validity(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.superseded_templates {
        let mut array_4 = object.key("SupersededTemplates").start_array();
        for item_5 in var_3 {
            {
                array_4.value().string(item_5.as_str());
            }
        }
        array_4.finish();
    }
    if let Some(var_6) = &input.private_key_attributes {
        #[allow(unused_mut)]
        let mut object_7 = object.key("PrivateKeyAttributes").start_object();
        crate::protocol_serde::shape_private_key_attributes_v2::ser_private_key_attributes_v2(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.private_key_flags {
        #[allow(unused_mut)]
        let mut object_9 = object.key("PrivateKeyFlags").start_object();
        crate::protocol_serde::shape_private_key_flags_v2::ser_private_key_flags_v2(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.enrollment_flags {
        #[allow(unused_mut)]
        let mut object_11 = object.key("EnrollmentFlags").start_object();
        crate::protocol_serde::shape_enrollment_flags_v2::ser_enrollment_flags_v2(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.subject_name_flags {
        #[allow(unused_mut)]
        let mut object_13 = object.key("SubjectNameFlags").start_object();
        crate::protocol_serde::shape_subject_name_flags_v2::ser_subject_name_flags_v2(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.general_flags {
        #[allow(unused_mut)]
        let mut object_15 = object.key("GeneralFlags").start_object();
        crate::protocol_serde::shape_general_flags_v2::ser_general_flags_v2(&mut object_15, var_14)?;
        object_15.finish();
    }
    if let Some(var_16) = &input.extensions {
        #[allow(unused_mut)]
        let mut object_17 = object.key("Extensions").start_object();
        crate::protocol_serde::shape_extensions_v2::ser_extensions_v2(&mut object_17, var_16)?;
        object_17.finish();
    }
    Ok(())
}

pub(crate) fn de_template_v2<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::TemplateV2>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::TemplateV2Builder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "CertificateValidity" => {
                            builder =
                                builder.set_certificate_validity(crate::protocol_serde::shape_certificate_validity::de_certificate_validity(tokens)?);
                        }
                        "SupersededTemplates" => {
                            builder =
                                builder.set_superseded_templates(crate::protocol_serde::shape_template_name_list::de_template_name_list(tokens)?);
                        }
                        "PrivateKeyAttributes" => {
                            builder = builder.set_private_key_attributes(
                                crate::protocol_serde::shape_private_key_attributes_v2::de_private_key_attributes_v2(tokens)?,
                            );
                        }
                        "PrivateKeyFlags" => {
                            builder =
                                builder.set_private_key_flags(crate::protocol_serde::shape_private_key_flags_v2::de_private_key_flags_v2(tokens)?);
                        }
                        "EnrollmentFlags" => {
                            builder = builder.set_enrollment_flags(crate::protocol_serde::shape_enrollment_flags_v2::de_enrollment_flags_v2(tokens)?);
                        }
                        "SubjectNameFlags" => {
                            builder =
                                builder.set_subject_name_flags(crate::protocol_serde::shape_subject_name_flags_v2::de_subject_name_flags_v2(tokens)?);
                        }
                        "GeneralFlags" => {
                            builder = builder.set_general_flags(crate::protocol_serde::shape_general_flags_v2::de_general_flags_v2(tokens)?);
                        }
                        "Extensions" => {
                            builder = builder.set_extensions(crate::protocol_serde::shape_extensions_v2::de_extensions_v2(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::template_v2_correct_errors(builder).build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
