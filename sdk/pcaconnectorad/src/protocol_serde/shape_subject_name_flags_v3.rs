// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_subject_name_flags_v3(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::SubjectNameFlagsV3,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.san_require_domain_dns {
        object.key("SanRequireDomainDns").boolean(*var_1);
    }
    if let Some(var_2) = &input.san_require_spn {
        object.key("SanRequireSpn").boolean(*var_2);
    }
    if let Some(var_3) = &input.san_require_directory_guid {
        object.key("SanRequireDirectoryGuid").boolean(*var_3);
    }
    if let Some(var_4) = &input.san_require_upn {
        object.key("SanRequireUpn").boolean(*var_4);
    }
    if let Some(var_5) = &input.san_require_email {
        object.key("SanRequireEmail").boolean(*var_5);
    }
    if let Some(var_6) = &input.san_require_dns {
        object.key("SanRequireDns").boolean(*var_6);
    }
    if let Some(var_7) = &input.require_dns_as_cn {
        object.key("RequireDnsAsCn").boolean(*var_7);
    }
    if let Some(var_8) = &input.require_email {
        object.key("RequireEmail").boolean(*var_8);
    }
    if let Some(var_9) = &input.require_common_name {
        object.key("RequireCommonName").boolean(*var_9);
    }
    if let Some(var_10) = &input.require_directory_path {
        object.key("RequireDirectoryPath").boolean(*var_10);
    }
    Ok(())
}

pub(crate) fn de_subject_name_flags_v3<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::SubjectNameFlagsV3>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::SubjectNameFlagsV3Builder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "SanRequireDomainDns" => {
                            builder = builder.set_san_require_domain_dns(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "SanRequireSpn" => {
                            builder = builder.set_san_require_spn(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "SanRequireDirectoryGuid" => {
                            builder =
                                builder.set_san_require_directory_guid(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "SanRequireUpn" => {
                            builder = builder.set_san_require_upn(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "SanRequireEmail" => {
                            builder = builder.set_san_require_email(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "SanRequireDns" => {
                            builder = builder.set_san_require_dns(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "RequireDnsAsCn" => {
                            builder = builder.set_require_dns_as_cn(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "RequireEmail" => {
                            builder = builder.set_require_email(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "RequireCommonName" => {
                            builder = builder.set_require_common_name(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "RequireDirectoryPath" => {
                            builder = builder.set_require_directory_path(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
