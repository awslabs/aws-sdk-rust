// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn deploy_system_instance_output_correct_errors(
    mut builder: crate::operation::deploy_system_instance::builders::DeploySystemInstanceOutputBuilder,
) -> crate::operation::deploy_system_instance::builders::DeploySystemInstanceOutputBuilder {
    if builder.summary.is_none() {
        builder.summary = {
            let builder = crate::types::builders::SystemInstanceSummaryBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn get_upload_status_output_correct_errors(
    mut builder: crate::operation::get_upload_status::builders::GetUploadStatusOutputBuilder,
) -> crate::operation::get_upload_status::builders::GetUploadStatusOutputBuilder {
    if builder.upload_id.is_none() {
        builder.upload_id = Some(Default::default())
    }
    if builder.upload_status.is_none() {
        builder.upload_status = "no value was set".parse::<crate::types::UploadStatus>().ok()
    }
    if builder.created_date.is_none() {
        builder.created_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn upload_entity_definitions_output_correct_errors(
    mut builder: crate::operation::upload_entity_definitions::builders::UploadEntityDefinitionsOutputBuilder,
) -> crate::operation::upload_entity_definitions::builders::UploadEntityDefinitionsOutputBuilder {
    if builder.upload_id.is_none() {
        builder.upload_id = Some(Default::default())
    }
    builder
}

pub(crate) fn definition_document_correct_errors(
    mut builder: crate::types::builders::DefinitionDocumentBuilder,
) -> crate::types::builders::DefinitionDocumentBuilder {
    if builder.language.is_none() {
        builder.language = "no value was set".parse::<crate::types::DefinitionLanguage>().ok()
    }
    if builder.text.is_none() {
        builder.text = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}
