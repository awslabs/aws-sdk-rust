// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_get_flow_template_revisions_output_next_token(
    input: &crate::output::GetFlowTemplateRevisionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_system_template_revisions_output_next_token(
    input: &crate::output::GetSystemTemplateRevisionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_flow_execution_messages_output_next_token(
    input: &crate::output::ListFlowExecutionMessagesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_tags_for_resource_output_next_token(
    input: &crate::output::ListTagsForResourceOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_search_entities_output_next_token(
    input: &crate::output::SearchEntitiesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_search_flow_executions_output_next_token(
    input: &crate::output::SearchFlowExecutionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_search_flow_templates_output_next_token(
    input: &crate::output::SearchFlowTemplatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_search_system_instances_output_next_token(
    input: &crate::output::SearchSystemInstancesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_search_system_templates_output_next_token(
    input: &crate::output::SearchSystemTemplatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_search_things_output_next_token(
    input: &crate::output::SearchThingsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_get_flow_template_revisions_output_summaries(
    input: crate::output::GetFlowTemplateRevisionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::FlowTemplateSummary>> {
    let input = match input.summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_get_system_template_revisions_output_summaries(
    input: crate::output::GetSystemTemplateRevisionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::SystemTemplateSummary>> {
    let input = match input.summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_flow_execution_messages_output_messages(
    input: crate::output::ListFlowExecutionMessagesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::FlowExecutionMessage>> {
    let input = match input.messages {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_tags_for_resource_output_tags(
    input: crate::output::ListTagsForResourceOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Tag>> {
    let input = match input.tags {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_search_entities_output_descriptions(
    input: crate::output::SearchEntitiesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::EntityDescription>> {
    let input = match input.descriptions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_search_flow_executions_output_summaries(
    input: crate::output::SearchFlowExecutionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::FlowExecutionSummary>> {
    let input = match input.summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_search_flow_templates_output_summaries(
    input: crate::output::SearchFlowTemplatesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::FlowTemplateSummary>> {
    let input = match input.summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_search_system_instances_output_summaries(
    input: crate::output::SearchSystemInstancesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::SystemInstanceSummary>> {
    let input = match input.summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_search_system_templates_output_summaries(
    input: crate::output::SearchSystemTemplatesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::SystemTemplateSummary>> {
    let input = match input.summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_search_things_output_things(
    input: crate::output::SearchThingsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Thing>> {
    let input = match input.things {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
