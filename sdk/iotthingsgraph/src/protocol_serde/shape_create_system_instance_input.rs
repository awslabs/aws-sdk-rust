// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_system_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_system_instance::CreateSystemInstanceInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.tags {
        let mut array_2 = object.key("tags").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.definition {
        #[allow(unused_mut)]
        let mut object_6 = object.key("definition").start_object();
        crate::protocol_serde::shape_definition_document::ser_definition_document(
            &mut object_6,
            var_5,
        )?;
        object_6.finish();
    }
    if let Some(var_7) = &input.target {
        object.key("target").string(var_7.as_str());
    }
    if let Some(var_8) = &input.greengrass_group_name {
        object.key("greengrassGroupName").string(var_8.as_str());
    }
    if let Some(var_9) = &input.s3_bucket_name {
        object.key("s3BucketName").string(var_9.as_str());
    }
    if let Some(var_10) = &input.metrics_configuration {
        #[allow(unused_mut)]
        let mut object_11 = object.key("metricsConfiguration").start_object();
        crate::protocol_serde::shape_metrics_configuration::ser_metrics_configuration(
            &mut object_11,
            var_10,
        )?;
        object_11.finish();
    }
    if let Some(var_12) = &input.flow_actions_role_arn {
        object.key("flowActionsRoleArn").string(var_12.as_str());
    }
    Ok(())
}
