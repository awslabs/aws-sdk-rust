// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetNamespaceDeletionStatusOutput {
    /// <p>The ARN of the namespace that is being deleted.</p>
    #[doc(hidden)]
    pub namespace_arn: std::option::Option<std::string::String>,
    /// <p>The name of the namespace that is being deleted.</p>
    #[doc(hidden)]
    pub namespace_name: std::option::Option<std::string::String>,
    /// <p>The status of the deletion request.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::NamespaceDeletionStatus>,
    /// <p>An error code returned by the namespace deletion task.</p>
    #[doc(hidden)]
    pub error_code: std::option::Option<crate::types::NamespaceDeletionStatusErrorCodes>,
    /// <p>An error code returned by the namespace deletion task.</p>
    #[doc(hidden)]
    pub error_message: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetNamespaceDeletionStatusOutput {
    /// <p>The ARN of the namespace that is being deleted.</p>
    pub fn namespace_arn(&self) -> std::option::Option<&str> {
        self.namespace_arn.as_deref()
    }
    /// <p>The name of the namespace that is being deleted.</p>
    pub fn namespace_name(&self) -> std::option::Option<&str> {
        self.namespace_name.as_deref()
    }
    /// <p>The status of the deletion request.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::NamespaceDeletionStatus> {
        self.status.as_ref()
    }
    /// <p>An error code returned by the namespace deletion task.</p>
    pub fn error_code(
        &self,
    ) -> std::option::Option<&crate::types::NamespaceDeletionStatusErrorCodes> {
        self.error_code.as_ref()
    }
    /// <p>An error code returned by the namespace deletion task.</p>
    pub fn error_message(&self) -> std::option::Option<&str> {
        self.error_message.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetNamespaceDeletionStatusOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetNamespaceDeletionStatusOutput {
    /// Creates a new builder-style object to manufacture [`GetNamespaceDeletionStatusOutput`](crate::operation::get_namespace_deletion_status::GetNamespaceDeletionStatusOutput).
    pub fn builder() -> crate::operation::get_namespace_deletion_status::builders::GetNamespaceDeletionStatusOutputBuilder{
        crate::operation::get_namespace_deletion_status::builders::GetNamespaceDeletionStatusOutputBuilder::default()
    }
}

/// A builder for [`GetNamespaceDeletionStatusOutput`](crate::operation::get_namespace_deletion_status::GetNamespaceDeletionStatusOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetNamespaceDeletionStatusOutputBuilder {
    pub(crate) namespace_arn: std::option::Option<std::string::String>,
    pub(crate) namespace_name: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::NamespaceDeletionStatus>,
    pub(crate) error_code: std::option::Option<crate::types::NamespaceDeletionStatusErrorCodes>,
    pub(crate) error_message: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetNamespaceDeletionStatusOutputBuilder {
    /// <p>The ARN of the namespace that is being deleted.</p>
    pub fn namespace_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.namespace_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the namespace that is being deleted.</p>
    pub fn set_namespace_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.namespace_arn = input;
        self
    }
    /// <p>The name of the namespace that is being deleted.</p>
    pub fn namespace_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.namespace_name = Some(input.into());
        self
    }
    /// <p>The name of the namespace that is being deleted.</p>
    pub fn set_namespace_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.namespace_name = input;
        self
    }
    /// <p>The status of the deletion request.</p>
    pub fn status(mut self, input: crate::types::NamespaceDeletionStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the deletion request.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::NamespaceDeletionStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>An error code returned by the namespace deletion task.</p>
    pub fn error_code(mut self, input: crate::types::NamespaceDeletionStatusErrorCodes) -> Self {
        self.error_code = Some(input);
        self
    }
    /// <p>An error code returned by the namespace deletion task.</p>
    pub fn set_error_code(
        mut self,
        input: std::option::Option<crate::types::NamespaceDeletionStatusErrorCodes>,
    ) -> Self {
        self.error_code = input;
        self
    }
    /// <p>An error code returned by the namespace deletion task.</p>
    pub fn error_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_message = Some(input.into());
        self
    }
    /// <p>An error code returned by the namespace deletion task.</p>
    pub fn set_error_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetNamespaceDeletionStatusOutput`](crate::operation::get_namespace_deletion_status::GetNamespaceDeletionStatusOutput).
    pub fn build(
        self,
    ) -> crate::operation::get_namespace_deletion_status::GetNamespaceDeletionStatusOutput {
        crate::operation::get_namespace_deletion_status::GetNamespaceDeletionStatusOutput {
            namespace_arn: self.namespace_arn,
            namespace_name: self.namespace_name,
            status: self.status,
            error_code: self.error_code,
            error_message: self.error_message,
            _request_id: self._request_id,
        }
    }
}
