// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeNamespaceOutput {
    /// <p>The ARN of the namespace.</p>
    #[doc(hidden)]
    pub namespace_arn: std::option::Option<std::string::String>,
    /// <p>The name of the namespace.</p>
    #[doc(hidden)]
    pub namespace_name: std::option::Option<std::string::String>,
    /// <p>The name of the public namespace that the latest namespace version is tracking.</p>
    #[doc(hidden)]
    pub tracking_namespace_name: std::option::Option<std::string::String>,
    /// <p>The version of the public namespace that the latest version is tracking.</p>
    #[doc(hidden)]
    pub tracking_namespace_version: std::option::Option<i64>,
    /// <p>The version of the user's namespace to describe.</p>
    #[doc(hidden)]
    pub namespace_version: std::option::Option<i64>,
    _request_id: Option<String>,
}
impl DescribeNamespaceOutput {
    /// <p>The ARN of the namespace.</p>
    pub fn namespace_arn(&self) -> std::option::Option<&str> {
        self.namespace_arn.as_deref()
    }
    /// <p>The name of the namespace.</p>
    pub fn namespace_name(&self) -> std::option::Option<&str> {
        self.namespace_name.as_deref()
    }
    /// <p>The name of the public namespace that the latest namespace version is tracking.</p>
    pub fn tracking_namespace_name(&self) -> std::option::Option<&str> {
        self.tracking_namespace_name.as_deref()
    }
    /// <p>The version of the public namespace that the latest version is tracking.</p>
    pub fn tracking_namespace_version(&self) -> std::option::Option<i64> {
        self.tracking_namespace_version
    }
    /// <p>The version of the user's namespace to describe.</p>
    pub fn namespace_version(&self) -> std::option::Option<i64> {
        self.namespace_version
    }
}
impl aws_http::request_id::RequestId for DescribeNamespaceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeNamespaceOutput {
    /// Creates a new builder-style object to manufacture [`DescribeNamespaceOutput`](crate::operation::describe_namespace::DescribeNamespaceOutput).
    pub fn builder(
    ) -> crate::operation::describe_namespace::builders::DescribeNamespaceOutputBuilder {
        crate::operation::describe_namespace::builders::DescribeNamespaceOutputBuilder::default()
    }
}

/// A builder for [`DescribeNamespaceOutput`](crate::operation::describe_namespace::DescribeNamespaceOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeNamespaceOutputBuilder {
    pub(crate) namespace_arn: std::option::Option<std::string::String>,
    pub(crate) namespace_name: std::option::Option<std::string::String>,
    pub(crate) tracking_namespace_name: std::option::Option<std::string::String>,
    pub(crate) tracking_namespace_version: std::option::Option<i64>,
    pub(crate) namespace_version: std::option::Option<i64>,
    _request_id: Option<String>,
}
impl DescribeNamespaceOutputBuilder {
    /// <p>The ARN of the namespace.</p>
    pub fn namespace_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.namespace_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the namespace.</p>
    pub fn set_namespace_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.namespace_arn = input;
        self
    }
    /// <p>The name of the namespace.</p>
    pub fn namespace_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.namespace_name = Some(input.into());
        self
    }
    /// <p>The name of the namespace.</p>
    pub fn set_namespace_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.namespace_name = input;
        self
    }
    /// <p>The name of the public namespace that the latest namespace version is tracking.</p>
    pub fn tracking_namespace_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.tracking_namespace_name = Some(input.into());
        self
    }
    /// <p>The name of the public namespace that the latest namespace version is tracking.</p>
    pub fn set_tracking_namespace_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.tracking_namespace_name = input;
        self
    }
    /// <p>The version of the public namespace that the latest version is tracking.</p>
    pub fn tracking_namespace_version(mut self, input: i64) -> Self {
        self.tracking_namespace_version = Some(input);
        self
    }
    /// <p>The version of the public namespace that the latest version is tracking.</p>
    pub fn set_tracking_namespace_version(mut self, input: std::option::Option<i64>) -> Self {
        self.tracking_namespace_version = input;
        self
    }
    /// <p>The version of the user's namespace to describe.</p>
    pub fn namespace_version(mut self, input: i64) -> Self {
        self.namespace_version = Some(input);
        self
    }
    /// <p>The version of the user's namespace to describe.</p>
    pub fn set_namespace_version(mut self, input: std::option::Option<i64>) -> Self {
        self.namespace_version = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeNamespaceOutput`](crate::operation::describe_namespace::DescribeNamespaceOutput).
    pub fn build(self) -> crate::operation::describe_namespace::DescribeNamespaceOutput {
        crate::operation::describe_namespace::DescribeNamespaceOutput {
            namespace_arn: self.namespace_arn,
            namespace_name: self.namespace_name,
            tracking_namespace_name: self.tracking_namespace_name,
            tracking_namespace_version: self.tracking_namespace_version,
            namespace_version: self.namespace_version,
            _request_id: self._request_id,
        }
    }
}
