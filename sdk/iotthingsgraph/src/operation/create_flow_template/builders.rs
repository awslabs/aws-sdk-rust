// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_flow_template::_create_flow_template_output::CreateFlowTemplateOutputBuilder;

pub use crate::operation::create_flow_template::_create_flow_template_input::CreateFlowTemplateInputBuilder;

/// Fluent builder constructing a request to `CreateFlowTemplate`.
///
/// <p>Creates a workflow template. Workflows can be created only in the user's namespace. (The public namespace contains only entities.) The workflow can contain only entities in the specified namespace. The workflow is validated against the entities in the latest version of the user's namespace unless another namespace version is specified in the request.</p>
#[deprecated(note = "since: 2022-08-30")]
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateFlowTemplateFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_flow_template::builders::CreateFlowTemplateInputBuilder,
}
impl CreateFlowTemplateFluentBuilder {
    /// Creates a new `CreateFlowTemplate`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_flow_template::CreateFlowTemplate,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_flow_template::CreateFlowTemplateError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_flow_template::CreateFlowTemplateOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_flow_template::CreateFlowTemplateError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The workflow <code>DefinitionDocument</code>.</p>
    pub fn definition(mut self, input: crate::types::DefinitionDocument) -> Self {
        self.inner = self.inner.definition(input);
        self
    }
    /// <p>The workflow <code>DefinitionDocument</code>.</p>
    pub fn set_definition(
        mut self,
        input: std::option::Option<crate::types::DefinitionDocument>,
    ) -> Self {
        self.inner = self.inner.set_definition(input);
        self
    }
    /// <p>The namespace version in which the workflow is to be created.</p>
    /// <p>If no value is specified, the latest version is used by default.</p>
    pub fn compatible_namespace_version(mut self, input: i64) -> Self {
        self.inner = self.inner.compatible_namespace_version(input);
        self
    }
    /// <p>The namespace version in which the workflow is to be created.</p>
    /// <p>If no value is specified, the latest version is used by default.</p>
    pub fn set_compatible_namespace_version(mut self, input: std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_compatible_namespace_version(input);
        self
    }
}
