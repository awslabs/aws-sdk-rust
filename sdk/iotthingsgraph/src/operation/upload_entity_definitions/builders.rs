// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::upload_entity_definitions::_upload_entity_definitions_output::UploadEntityDefinitionsOutputBuilder;

pub use crate::operation::upload_entity_definitions::_upload_entity_definitions_input::UploadEntityDefinitionsInputBuilder;

/// Fluent builder constructing a request to `UploadEntityDefinitions`.
///
/// <p>Asynchronously uploads one or more entity definitions to the user's namespace. The <code>document</code> parameter is required if <code>syncWithPublicNamespace</code> and <code>deleteExistingEntites</code> are false. If the <code>syncWithPublicNamespace</code> parameter is set to <code>true</code>, the user's namespace will synchronize with the latest version of the public namespace. If <code>deprecateExistingEntities</code> is set to true, all entities in the latest version will be deleted before the new <code>DefinitionDocument</code> is uploaded.</p>
/// <p>When a user uploads entity definitions for the first time, the service creates a new namespace for the user. The new namespace tracks the public namespace. Currently users can have only one namespace. The namespace version increments whenever a user uploads entity definitions that are backwards-incompatible and whenever a user sets the <code>syncWithPublicNamespace</code> parameter or the <code>deprecateExistingEntities</code> parameter to <code>true</code>.</p>
/// <p>The IDs for all of the entities should be in URN format. Each entity must be in the user's namespace. Users can't create entities in the public namespace, but entity definitions can refer to entities in the public namespace.</p>
/// <p>Valid entities are <code>Device</code>, <code>DeviceModel</code>, <code>Service</code>, <code>Capability</code>, <code>State</code>, <code>Action</code>, <code>Event</code>, <code>Property</code>, <code>Mapping</code>, <code>Enum</code>. </p>
#[deprecated(note = "since: 2022-08-30")]
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UploadEntityDefinitionsFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner:
        crate::operation::upload_entity_definitions::builders::UploadEntityDefinitionsInputBuilder,
}
impl UploadEntityDefinitionsFluentBuilder {
    /// Creates a new `UploadEntityDefinitions`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::upload_entity_definitions::UploadEntityDefinitions,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::upload_entity_definitions::UploadEntityDefinitionsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::upload_entity_definitions::UploadEntityDefinitionsOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::upload_entity_definitions::UploadEntityDefinitionsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The <code>DefinitionDocument</code> that defines the updated entities.</p>
    pub fn document(mut self, input: crate::types::DefinitionDocument) -> Self {
        self.inner = self.inner.document(input);
        self
    }
    /// <p>The <code>DefinitionDocument</code> that defines the updated entities.</p>
    pub fn set_document(
        mut self,
        input: std::option::Option<crate::types::DefinitionDocument>,
    ) -> Self {
        self.inner = self.inner.set_document(input);
        self
    }
    /// <p>A Boolean that specifies whether to synchronize with the latest version of the public namespace. If set to <code>true</code>, the upload will create a new namespace version.</p>
    pub fn sync_with_public_namespace(mut self, input: bool) -> Self {
        self.inner = self.inner.sync_with_public_namespace(input);
        self
    }
    /// <p>A Boolean that specifies whether to synchronize with the latest version of the public namespace. If set to <code>true</code>, the upload will create a new namespace version.</p>
    pub fn set_sync_with_public_namespace(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_sync_with_public_namespace(input);
        self
    }
    /// <p>A Boolean that specifies whether to deprecate all entities in the latest version before uploading the new <code>DefinitionDocument</code>. If set to <code>true</code>, the upload will create a new namespace version.</p>
    pub fn deprecate_existing_entities(mut self, input: bool) -> Self {
        self.inner = self.inner.deprecate_existing_entities(input);
        self
    }
    /// <p>A Boolean that specifies whether to deprecate all entities in the latest version before uploading the new <code>DefinitionDocument</code>. If set to <code>true</code>, the upload will create a new namespace version.</p>
    pub fn set_deprecate_existing_entities(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_deprecate_existing_entities(input);
        self
    }
}
