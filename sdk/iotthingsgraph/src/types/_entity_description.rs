// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the properties of an entity.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EntityDescription {
    /// <p>The entity ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The entity ARN.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The entity type.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::EntityType>,
    /// <p>The time at which the entity was created.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The definition document of the entity.</p>
    #[doc(hidden)]
    pub definition: std::option::Option<crate::types::DefinitionDocument>,
}
impl EntityDescription {
    /// <p>The entity ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The entity ARN.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The entity type.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::EntityType> {
        self.r#type.as_ref()
    }
    /// <p>The time at which the entity was created.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The definition document of the entity.</p>
    pub fn definition(&self) -> std::option::Option<&crate::types::DefinitionDocument> {
        self.definition.as_ref()
    }
}
impl EntityDescription {
    /// Creates a new builder-style object to manufacture [`EntityDescription`](crate::types::EntityDescription).
    pub fn builder() -> crate::types::builders::EntityDescriptionBuilder {
        crate::types::builders::EntityDescriptionBuilder::default()
    }
}

/// A builder for [`EntityDescription`](crate::types::EntityDescription).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EntityDescriptionBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::EntityType>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) definition: std::option::Option<crate::types::DefinitionDocument>,
}
impl EntityDescriptionBuilder {
    /// <p>The entity ID.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The entity ID.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The entity ARN.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The entity ARN.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The entity type.</p>
    pub fn r#type(mut self, input: crate::types::EntityType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The entity type.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::EntityType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The time at which the entity was created.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The time at which the entity was created.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The definition document of the entity.</p>
    pub fn definition(mut self, input: crate::types::DefinitionDocument) -> Self {
        self.definition = Some(input);
        self
    }
    /// <p>The definition document of the entity.</p>
    pub fn set_definition(
        mut self,
        input: std::option::Option<crate::types::DefinitionDocument>,
    ) -> Self {
        self.definition = input;
        self
    }
    /// Consumes the builder and constructs a [`EntityDescription`](crate::types::EntityDescription).
    pub fn build(self) -> crate::types::EntityDescription {
        crate::types::EntityDescription {
            id: self.id,
            arn: self.arn,
            r#type: self.r#type,
            created_at: self.created_at,
            definition: self.definition,
        }
    }
}
