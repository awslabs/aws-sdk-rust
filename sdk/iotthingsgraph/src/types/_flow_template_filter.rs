// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that filters a workflow search.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FlowTemplateFilter {
    /// <p>The name of the search filter field.</p>
    #[doc(hidden)]
    pub name: std::option::Option<crate::types::FlowTemplateFilterName>,
    /// <p>An array of string values for the search filter field. Multiple values function as AND criteria in the search.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl FlowTemplateFilter {
    /// <p>The name of the search filter field.</p>
    pub fn name(&self) -> std::option::Option<&crate::types::FlowTemplateFilterName> {
        self.name.as_ref()
    }
    /// <p>An array of string values for the search filter field. Multiple values function as AND criteria in the search.</p>
    pub fn value(&self) -> std::option::Option<&[std::string::String]> {
        self.value.as_deref()
    }
}
impl FlowTemplateFilter {
    /// Creates a new builder-style object to manufacture [`FlowTemplateFilter`](crate::types::FlowTemplateFilter).
    pub fn builder() -> crate::types::builders::FlowTemplateFilterBuilder {
        crate::types::builders::FlowTemplateFilterBuilder::default()
    }
}

/// A builder for [`FlowTemplateFilter`](crate::types::FlowTemplateFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FlowTemplateFilterBuilder {
    pub(crate) name: std::option::Option<crate::types::FlowTemplateFilterName>,
    pub(crate) value: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl FlowTemplateFilterBuilder {
    /// <p>The name of the search filter field.</p>
    pub fn name(mut self, input: crate::types::FlowTemplateFilterName) -> Self {
        self.name = Some(input);
        self
    }
    /// <p>The name of the search filter field.</p>
    pub fn set_name(
        mut self,
        input: std::option::Option<crate::types::FlowTemplateFilterName>,
    ) -> Self {
        self.name = input;
        self
    }
    /// Appends an item to `value`.
    ///
    /// To override the contents of this collection use [`set_value`](Self::set_value).
    ///
    /// <p>An array of string values for the search filter field. Multiple values function as AND criteria in the search.</p>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.value.unwrap_or_default();
        v.push(input.into());
        self.value = Some(v);
        self
    }
    /// <p>An array of string values for the search filter field. Multiple values function as AND criteria in the search.</p>
    pub fn set_value(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.value = input;
        self
    }
    /// Consumes the builder and constructs a [`FlowTemplateFilter`](crate::types::FlowTemplateFilter).
    pub fn build(self) -> crate::types::FlowTemplateFilter {
        crate::types::FlowTemplateFilter {
            name: self.name,
            value: self.value,
        }
    }
}
