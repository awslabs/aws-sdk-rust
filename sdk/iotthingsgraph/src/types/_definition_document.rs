// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A document that defines an entity. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DefinitionDocument {
    /// <p>The language used to define the entity. <code>GRAPHQL</code> is the only valid value.</p>
    pub language: crate::types::DefinitionLanguage,
    /// <p>The GraphQL text that defines the entity.</p>
    pub text: ::std::string::String,
}
impl DefinitionDocument {
    /// <p>The language used to define the entity. <code>GRAPHQL</code> is the only valid value.</p>
    pub fn language(&self) -> &crate::types::DefinitionLanguage {
        &self.language
    }
    /// <p>The GraphQL text that defines the entity.</p>
    pub fn text(&self) -> &str {
        use std::ops::Deref;
        self.text.deref()
    }
}
impl DefinitionDocument {
    /// Creates a new builder-style object to manufacture [`DefinitionDocument`](crate::types::DefinitionDocument).
    pub fn builder() -> crate::types::builders::DefinitionDocumentBuilder {
        crate::types::builders::DefinitionDocumentBuilder::default()
    }
}

/// A builder for [`DefinitionDocument`](crate::types::DefinitionDocument).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DefinitionDocumentBuilder {
    pub(crate) language: ::std::option::Option<crate::types::DefinitionLanguage>,
    pub(crate) text: ::std::option::Option<::std::string::String>,
}
impl DefinitionDocumentBuilder {
    /// <p>The language used to define the entity. <code>GRAPHQL</code> is the only valid value.</p>
    /// This field is required.
    pub fn language(mut self, input: crate::types::DefinitionLanguage) -> Self {
        self.language = ::std::option::Option::Some(input);
        self
    }
    /// <p>The language used to define the entity. <code>GRAPHQL</code> is the only valid value.</p>
    pub fn set_language(mut self, input: ::std::option::Option<crate::types::DefinitionLanguage>) -> Self {
        self.language = input;
        self
    }
    /// <p>The language used to define the entity. <code>GRAPHQL</code> is the only valid value.</p>
    pub fn get_language(&self) -> &::std::option::Option<crate::types::DefinitionLanguage> {
        &self.language
    }
    /// <p>The GraphQL text that defines the entity.</p>
    /// This field is required.
    pub fn text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.text = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The GraphQL text that defines the entity.</p>
    pub fn set_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.text = input;
        self
    }
    /// <p>The GraphQL text that defines the entity.</p>
    pub fn get_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.text
    }
    /// Consumes the builder and constructs a [`DefinitionDocument`](crate::types::DefinitionDocument).
    /// This method will fail if any of the following fields are not set:
    /// - [`language`](crate::types::builders::DefinitionDocumentBuilder::language)
    /// - [`text`](crate::types::builders::DefinitionDocumentBuilder::text)
    pub fn build(self) -> ::std::result::Result<crate::types::DefinitionDocument, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DefinitionDocument {
            language: self.language.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "language",
                    "language was not specified but it is required when building DefinitionDocument",
                )
            })?,
            text: self.text.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "text",
                    "text was not specified but it is required when building DefinitionDocument",
                )
            })?,
        })
    }
}
