// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A document that defines an entity. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DefinitionDocument {
    /// <p>The language used to define the entity. <code>GRAPHQL</code> is the only valid value.</p>
    #[doc(hidden)]
    pub language: std::option::Option<crate::types::DefinitionLanguage>,
    /// <p>The GraphQL text that defines the entity.</p>
    #[doc(hidden)]
    pub text: std::option::Option<std::string::String>,
}
impl DefinitionDocument {
    /// <p>The language used to define the entity. <code>GRAPHQL</code> is the only valid value.</p>
    pub fn language(&self) -> std::option::Option<&crate::types::DefinitionLanguage> {
        self.language.as_ref()
    }
    /// <p>The GraphQL text that defines the entity.</p>
    pub fn text(&self) -> std::option::Option<&str> {
        self.text.as_deref()
    }
}
impl DefinitionDocument {
    /// Creates a new builder-style object to manufacture [`DefinitionDocument`](crate::types::DefinitionDocument).
    pub fn builder() -> crate::types::builders::DefinitionDocumentBuilder {
        crate::types::builders::DefinitionDocumentBuilder::default()
    }
}

/// A builder for [`DefinitionDocument`](crate::types::DefinitionDocument).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DefinitionDocumentBuilder {
    pub(crate) language: std::option::Option<crate::types::DefinitionLanguage>,
    pub(crate) text: std::option::Option<std::string::String>,
}
impl DefinitionDocumentBuilder {
    /// <p>The language used to define the entity. <code>GRAPHQL</code> is the only valid value.</p>
    pub fn language(mut self, input: crate::types::DefinitionLanguage) -> Self {
        self.language = Some(input);
        self
    }
    /// <p>The language used to define the entity. <code>GRAPHQL</code> is the only valid value.</p>
    pub fn set_language(
        mut self,
        input: std::option::Option<crate::types::DefinitionLanguage>,
    ) -> Self {
        self.language = input;
        self
    }
    /// <p>The GraphQL text that defines the entity.</p>
    pub fn text(mut self, input: impl Into<std::string::String>) -> Self {
        self.text = Some(input.into());
        self
    }
    /// <p>The GraphQL text that defines the entity.</p>
    pub fn set_text(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.text = input;
        self
    }
    /// Consumes the builder and constructs a [`DefinitionDocument`](crate::types::DefinitionDocument).
    pub fn build(self) -> crate::types::DefinitionDocument {
        crate::types::DefinitionDocument {
            language: self.language,
            text: self.text,
        }
    }
}
