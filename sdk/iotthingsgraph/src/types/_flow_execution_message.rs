// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that contains information about a flow event.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FlowExecutionMessage {
    /// <p>The unique identifier of the message.</p>
    #[doc(hidden)]
    pub message_id: std::option::Option<std::string::String>,
    /// <p>The type of flow event .</p>
    #[doc(hidden)]
    pub event_type: std::option::Option<crate::types::FlowExecutionEventType>,
    /// <p>The date and time when the message was last updated.</p>
    #[doc(hidden)]
    pub timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>A string containing information about the flow event.</p>
    #[doc(hidden)]
    pub payload: std::option::Option<std::string::String>,
}
impl FlowExecutionMessage {
    /// <p>The unique identifier of the message.</p>
    pub fn message_id(&self) -> std::option::Option<&str> {
        self.message_id.as_deref()
    }
    /// <p>The type of flow event .</p>
    pub fn event_type(&self) -> std::option::Option<&crate::types::FlowExecutionEventType> {
        self.event_type.as_ref()
    }
    /// <p>The date and time when the message was last updated.</p>
    pub fn timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.timestamp.as_ref()
    }
    /// <p>A string containing information about the flow event.</p>
    pub fn payload(&self) -> std::option::Option<&str> {
        self.payload.as_deref()
    }
}
impl FlowExecutionMessage {
    /// Creates a new builder-style object to manufacture [`FlowExecutionMessage`](crate::types::FlowExecutionMessage).
    pub fn builder() -> crate::types::builders::FlowExecutionMessageBuilder {
        crate::types::builders::FlowExecutionMessageBuilder::default()
    }
}

/// A builder for [`FlowExecutionMessage`](crate::types::FlowExecutionMessage).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FlowExecutionMessageBuilder {
    pub(crate) message_id: std::option::Option<std::string::String>,
    pub(crate) event_type: std::option::Option<crate::types::FlowExecutionEventType>,
    pub(crate) timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) payload: std::option::Option<std::string::String>,
}
impl FlowExecutionMessageBuilder {
    /// <p>The unique identifier of the message.</p>
    pub fn message_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.message_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the message.</p>
    pub fn set_message_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message_id = input;
        self
    }
    /// <p>The type of flow event .</p>
    pub fn event_type(mut self, input: crate::types::FlowExecutionEventType) -> Self {
        self.event_type = Some(input);
        self
    }
    /// <p>The type of flow event .</p>
    pub fn set_event_type(
        mut self,
        input: std::option::Option<crate::types::FlowExecutionEventType>,
    ) -> Self {
        self.event_type = input;
        self
    }
    /// <p>The date and time when the message was last updated.</p>
    pub fn timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.timestamp = Some(input);
        self
    }
    /// <p>The date and time when the message was last updated.</p>
    pub fn set_timestamp(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>A string containing information about the flow event.</p>
    pub fn payload(mut self, input: impl Into<std::string::String>) -> Self {
        self.payload = Some(input.into());
        self
    }
    /// <p>A string containing information about the flow event.</p>
    pub fn set_payload(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.payload = input;
        self
    }
    /// Consumes the builder and constructs a [`FlowExecutionMessage`](crate::types::FlowExecutionMessage).
    pub fn build(self) -> crate::types::FlowExecutionMessage {
        crate::types::FlowExecutionMessage {
            message_id: self.message_id,
            event_type: self.event_type,
            timestamp: self.timestamp,
            payload: self.payload,
        }
    }
}
