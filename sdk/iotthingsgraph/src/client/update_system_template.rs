// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateSystemTemplate`](crate::client::fluent_builders::UpdateSystemTemplate) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::UpdateSystemTemplate::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::UpdateSystemTemplate::set_id): <p>The ID of the system to be updated.</p>  <p>The ID should be in the following format.</p>  <p> <code>urn:tdm:REGION/ACCOUNT ID/default:system:SYSTEMNAME</code> </p>
    ///   - [`definition(DefinitionDocument)`](crate::client::fluent_builders::UpdateSystemTemplate::definition) / [`set_definition(Option<DefinitionDocument>)`](crate::client::fluent_builders::UpdateSystemTemplate::set_definition): <p>The <code>DefinitionDocument</code> that contains the updated system definition.</p>
    ///   - [`compatible_namespace_version(i64)`](crate::client::fluent_builders::UpdateSystemTemplate::compatible_namespace_version) / [`set_compatible_namespace_version(Option<i64>)`](crate::client::fluent_builders::UpdateSystemTemplate::set_compatible_namespace_version): <p>The version of the user's namespace. Defaults to the latest version of the user's namespace.</p>  <p>If no value is specified, the latest version is used by default.</p>
    /// - On success, responds with [`UpdateSystemTemplateOutput`](crate::output::UpdateSystemTemplateOutput) with field(s):
    ///   - [`summary(Option<SystemTemplateSummary>)`](crate::output::UpdateSystemTemplateOutput::summary): <p>An object containing summary information about the updated system.</p>
    /// - On failure, responds with [`SdkError<UpdateSystemTemplateError>`](crate::error::UpdateSystemTemplateError)
    #[deprecated(note = "since: 2022-08-30")]
    pub fn update_system_template(&self) -> crate::client::fluent_builders::UpdateSystemTemplate {
        crate::client::fluent_builders::UpdateSystemTemplate::new(self.handle.clone())
    }
}
