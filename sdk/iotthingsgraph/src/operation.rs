// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Associates a device with a concrete thing that is in the user's registry.</p>
/// <p>A thing can be associated with only one device at a time. If you associate a thing with a new device id, its previous association will be removed.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateEntityToThing {
    _private: (),
}
impl AssociateEntityToThing {
    /// Creates a new builder-style object to manufacture [`AssociateEntityToThingInput`](crate::input::AssociateEntityToThingInput)
    pub fn builder() -> crate::input::associate_entity_to_thing_input::Builder {
        crate::input::associate_entity_to_thing_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociateEntityToThing {
    type Output = std::result::Result<
        crate::output::AssociateEntityToThingOutput,
        crate::error::AssociateEntityToThingError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_entity_to_thing_error(response)
        } else {
            crate::operation_deser::parse_associate_entity_to_thing_response(response)
        }
    }
}

/// <p>Creates a workflow template. Workflows can be created only in the user's namespace. (The public namespace contains only
/// entities.) The workflow can contain only entities in the specified namespace. The workflow is validated against the entities in the
/// latest version of the user's namespace unless another namespace version is specified in the request.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateFlowTemplate {
    _private: (),
}
impl CreateFlowTemplate {
    /// Creates a new builder-style object to manufacture [`CreateFlowTemplateInput`](crate::input::CreateFlowTemplateInput)
    pub fn builder() -> crate::input::create_flow_template_input::Builder {
        crate::input::create_flow_template_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateFlowTemplate {
    type Output = std::result::Result<
        crate::output::CreateFlowTemplateOutput,
        crate::error::CreateFlowTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_flow_template_error(response)
        } else {
            crate::operation_deser::parse_create_flow_template_response(response)
        }
    }
}

/// <p>Creates a system instance. </p>
/// <p>This action validates the system instance, prepares the deployment-related resources. For Greengrass deployments, it updates the Greengrass group that is
/// specified by the <code>greengrassGroupName</code> parameter. It also adds a file to the S3 bucket specified by the <code>s3BucketName</code> parameter. You need to
/// call <code>DeploySystemInstance</code> after running this action.</p>
/// <p>For Greengrass deployments, since this action modifies and adds resources to a Greengrass group and an S3 bucket on the caller's behalf, the calling identity must have write permissions
/// to both the specified Greengrass group and S3 bucket. Otherwise, the call will fail with an authorization error.</p>
/// <p>For cloud deployments, this action requires a <code>flowActionsRoleArn</code> value. This is an IAM role
/// that has permissions to access AWS services, such as AWS Lambda and AWS IoT, that the flow uses when it executes.</p>
/// <p>If the definition document doesn't specify a version of the user's namespace, the latest version will be used by default.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateSystemInstance {
    _private: (),
}
impl CreateSystemInstance {
    /// Creates a new builder-style object to manufacture [`CreateSystemInstanceInput`](crate::input::CreateSystemInstanceInput)
    pub fn builder() -> crate::input::create_system_instance_input::Builder {
        crate::input::create_system_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateSystemInstance {
    type Output = std::result::Result<
        crate::output::CreateSystemInstanceOutput,
        crate::error::CreateSystemInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_system_instance_error(response)
        } else {
            crate::operation_deser::parse_create_system_instance_response(response)
        }
    }
}

/// <p>Creates a system. The system is validated against the entities in the
/// latest version of the user's namespace unless another namespace version is specified in the request.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateSystemTemplate {
    _private: (),
}
impl CreateSystemTemplate {
    /// Creates a new builder-style object to manufacture [`CreateSystemTemplateInput`](crate::input::CreateSystemTemplateInput)
    pub fn builder() -> crate::input::create_system_template_input::Builder {
        crate::input::create_system_template_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateSystemTemplate {
    type Output = std::result::Result<
        crate::output::CreateSystemTemplateOutput,
        crate::error::CreateSystemTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_system_template_error(response)
        } else {
            crate::operation_deser::parse_create_system_template_response(response)
        }
    }
}

/// <p>Deletes a workflow. Any new system or deployment that contains this workflow will fail to update or deploy.
/// Existing deployments that contain the workflow will continue to run (since they use a snapshot of the workflow taken at the time of deployment).</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteFlowTemplate {
    _private: (),
}
impl DeleteFlowTemplate {
    /// Creates a new builder-style object to manufacture [`DeleteFlowTemplateInput`](crate::input::DeleteFlowTemplateInput)
    pub fn builder() -> crate::input::delete_flow_template_input::Builder {
        crate::input::delete_flow_template_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteFlowTemplate {
    type Output = std::result::Result<
        crate::output::DeleteFlowTemplateOutput,
        crate::error::DeleteFlowTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_flow_template_error(response)
        } else {
            crate::operation_deser::parse_delete_flow_template_response(response)
        }
    }
}

/// <p>Deletes the specified namespace. This action deletes all of the entities in the namespace. Delete the systems and flows that use entities in the namespace before performing this action.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteNamespace {
    _private: (),
}
impl DeleteNamespace {
    /// Creates a new builder-style object to manufacture [`DeleteNamespaceInput`](crate::input::DeleteNamespaceInput)
    pub fn builder() -> crate::input::delete_namespace_input::Builder {
        crate::input::delete_namespace_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteNamespace {
    type Output = std::result::Result<
        crate::output::DeleteNamespaceOutput,
        crate::error::DeleteNamespaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_namespace_error(response)
        } else {
            crate::operation_deser::parse_delete_namespace_response(response)
        }
    }
}

/// <p>Deletes a system instance.
/// Only system instances that have never been deployed, or that have been undeployed can be deleted.</p>
/// <p>Users can create a new system instance that has the same ID as a deleted system instance.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteSystemInstance {
    _private: (),
}
impl DeleteSystemInstance {
    /// Creates a new builder-style object to manufacture [`DeleteSystemInstanceInput`](crate::input::DeleteSystemInstanceInput)
    pub fn builder() -> crate::input::delete_system_instance_input::Builder {
        crate::input::delete_system_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteSystemInstance {
    type Output = std::result::Result<
        crate::output::DeleteSystemInstanceOutput,
        crate::error::DeleteSystemInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_system_instance_error(response)
        } else {
            crate::operation_deser::parse_delete_system_instance_response(response)
        }
    }
}

/// <p>Deletes a system. New deployments can't contain the system after its deletion.
/// Existing deployments that contain the system will continue to work because they use a snapshot of the system that is taken when it is deployed.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteSystemTemplate {
    _private: (),
}
impl DeleteSystemTemplate {
    /// Creates a new builder-style object to manufacture [`DeleteSystemTemplateInput`](crate::input::DeleteSystemTemplateInput)
    pub fn builder() -> crate::input::delete_system_template_input::Builder {
        crate::input::delete_system_template_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteSystemTemplate {
    type Output = std::result::Result<
        crate::output::DeleteSystemTemplateOutput,
        crate::error::DeleteSystemTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_system_template_error(response)
        } else {
            crate::operation_deser::parse_delete_system_template_response(response)
        }
    }
}

/// <p>
/// <b>Greengrass and Cloud Deployments</b>
/// </p>
/// <p>Deploys the system instance to the target specified in <code>CreateSystemInstance</code>. </p>
/// <p>
/// <b>Greengrass Deployments</b>
/// </p>
/// <p>If the system or any workflows and entities have been updated before this action is called, then the deployment will create a new Amazon Simple Storage Service
/// resource file and then deploy it.</p>
/// <p>Since this action creates a Greengrass deployment on the caller's behalf, the calling identity must have write permissions
/// to the specified Greengrass group. Otherwise, the call will fail with an authorization error.</p>
/// <p>For information about the artifacts that get added to your Greengrass core device when you use this API, see <a href="https://docs.aws.amazon.com/thingsgraph/latest/ug/iot-tg-greengrass.html">AWS IoT Things Graph and AWS IoT Greengrass</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeploySystemInstance {
    _private: (),
}
impl DeploySystemInstance {
    /// Creates a new builder-style object to manufacture [`DeploySystemInstanceInput`](crate::input::DeploySystemInstanceInput)
    pub fn builder() -> crate::input::deploy_system_instance_input::Builder {
        crate::input::deploy_system_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeploySystemInstance {
    type Output = std::result::Result<
        crate::output::DeploySystemInstanceOutput,
        crate::error::DeploySystemInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_deploy_system_instance_error(response)
        } else {
            crate::operation_deser::parse_deploy_system_instance_response(response)
        }
    }
}

/// <p>Deprecates the specified workflow. This action marks the workflow for deletion. Deprecated flows can't be deployed, but existing deployments will continue to run.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeprecateFlowTemplate {
    _private: (),
}
impl DeprecateFlowTemplate {
    /// Creates a new builder-style object to manufacture [`DeprecateFlowTemplateInput`](crate::input::DeprecateFlowTemplateInput)
    pub fn builder() -> crate::input::deprecate_flow_template_input::Builder {
        crate::input::deprecate_flow_template_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeprecateFlowTemplate {
    type Output = std::result::Result<
        crate::output::DeprecateFlowTemplateOutput,
        crate::error::DeprecateFlowTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_deprecate_flow_template_error(response)
        } else {
            crate::operation_deser::parse_deprecate_flow_template_response(response)
        }
    }
}

/// <p>Deprecates the specified system.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeprecateSystemTemplate {
    _private: (),
}
impl DeprecateSystemTemplate {
    /// Creates a new builder-style object to manufacture [`DeprecateSystemTemplateInput`](crate::input::DeprecateSystemTemplateInput)
    pub fn builder() -> crate::input::deprecate_system_template_input::Builder {
        crate::input::deprecate_system_template_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeprecateSystemTemplate {
    type Output = std::result::Result<
        crate::output::DeprecateSystemTemplateOutput,
        crate::error::DeprecateSystemTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_deprecate_system_template_error(response)
        } else {
            crate::operation_deser::parse_deprecate_system_template_response(response)
        }
    }
}

/// <p>Gets the latest version of the user's namespace and the public version that it is tracking.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeNamespace {
    _private: (),
}
impl DescribeNamespace {
    /// Creates a new builder-style object to manufacture [`DescribeNamespaceInput`](crate::input::DescribeNamespaceInput)
    pub fn builder() -> crate::input::describe_namespace_input::Builder {
        crate::input::describe_namespace_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeNamespace {
    type Output = std::result::Result<
        crate::output::DescribeNamespaceOutput,
        crate::error::DescribeNamespaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_namespace_error(response)
        } else {
            crate::operation_deser::parse_describe_namespace_response(response)
        }
    }
}

/// <p>Dissociates a device entity from a concrete thing. The action takes only the type of the entity that you need to dissociate because only
/// one entity of a particular type can be associated with a thing.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DissociateEntityFromThing {
    _private: (),
}
impl DissociateEntityFromThing {
    /// Creates a new builder-style object to manufacture [`DissociateEntityFromThingInput`](crate::input::DissociateEntityFromThingInput)
    pub fn builder() -> crate::input::dissociate_entity_from_thing_input::Builder {
        crate::input::dissociate_entity_from_thing_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DissociateEntityFromThing {
    type Output = std::result::Result<
        crate::output::DissociateEntityFromThingOutput,
        crate::error::DissociateEntityFromThingError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_dissociate_entity_from_thing_error(response)
        } else {
            crate::operation_deser::parse_dissociate_entity_from_thing_response(response)
        }
    }
}

/// <p>Gets definitions of the specified entities. Uses the latest version of the user's namespace by default. This API returns the
/// following TDM entities.</p>
/// <ul>
/// <li>
/// <p>Properties</p>
/// </li>
/// <li>
/// <p>States</p>
/// </li>
/// <li>
/// <p>Events</p>
/// </li>
/// <li>
/// <p>Actions</p>
/// </li>
/// <li>
/// <p>Capabilities</p>
/// </li>
/// <li>
/// <p>Mappings</p>
/// </li>
/// <li>
/// <p>Devices</p>
/// </li>
/// <li>
/// <p>Device Models</p>
/// </li>
/// <li>
/// <p>Services</p>
/// </li>
/// </ul>
/// <p>This action doesn't return definitions for systems, flows, and deployments.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetEntities {
    _private: (),
}
impl GetEntities {
    /// Creates a new builder-style object to manufacture [`GetEntitiesInput`](crate::input::GetEntitiesInput)
    pub fn builder() -> crate::input::get_entities_input::Builder {
        crate::input::get_entities_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetEntities {
    type Output =
        std::result::Result<crate::output::GetEntitiesOutput, crate::error::GetEntitiesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_entities_error(response)
        } else {
            crate::operation_deser::parse_get_entities_response(response)
        }
    }
}

/// <p>Gets the latest version of the <code>DefinitionDocument</code> and <code>FlowTemplateSummary</code> for the specified workflow.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetFlowTemplate {
    _private: (),
}
impl GetFlowTemplate {
    /// Creates a new builder-style object to manufacture [`GetFlowTemplateInput`](crate::input::GetFlowTemplateInput)
    pub fn builder() -> crate::input::get_flow_template_input::Builder {
        crate::input::get_flow_template_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetFlowTemplate {
    type Output = std::result::Result<
        crate::output::GetFlowTemplateOutput,
        crate::error::GetFlowTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_flow_template_error(response)
        } else {
            crate::operation_deser::parse_get_flow_template_response(response)
        }
    }
}

/// <p>Gets revisions of the specified workflow. Only the last 100 revisions are stored. If the workflow has been deprecated,
/// this action will return revisions that occurred before the deprecation. This action won't work for workflows that have been deleted.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetFlowTemplateRevisions {
    _private: (),
}
impl GetFlowTemplateRevisions {
    /// Creates a new builder-style object to manufacture [`GetFlowTemplateRevisionsInput`](crate::input::GetFlowTemplateRevisionsInput)
    pub fn builder() -> crate::input::get_flow_template_revisions_input::Builder {
        crate::input::get_flow_template_revisions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetFlowTemplateRevisions {
    type Output = std::result::Result<
        crate::output::GetFlowTemplateRevisionsOutput,
        crate::error::GetFlowTemplateRevisionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_flow_template_revisions_error(response)
        } else {
            crate::operation_deser::parse_get_flow_template_revisions_response(response)
        }
    }
}

/// <p>Gets the status of a namespace deletion task.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetNamespaceDeletionStatus {
    _private: (),
}
impl GetNamespaceDeletionStatus {
    /// Creates a new builder-style object to manufacture [`GetNamespaceDeletionStatusInput`](crate::input::GetNamespaceDeletionStatusInput)
    pub fn builder() -> crate::input::get_namespace_deletion_status_input::Builder {
        crate::input::get_namespace_deletion_status_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetNamespaceDeletionStatus {
    type Output = std::result::Result<
        crate::output::GetNamespaceDeletionStatusOutput,
        crate::error::GetNamespaceDeletionStatusError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_namespace_deletion_status_error(response)
        } else {
            crate::operation_deser::parse_get_namespace_deletion_status_response(response)
        }
    }
}

/// <p>Gets a system instance.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetSystemInstance {
    _private: (),
}
impl GetSystemInstance {
    /// Creates a new builder-style object to manufacture [`GetSystemInstanceInput`](crate::input::GetSystemInstanceInput)
    pub fn builder() -> crate::input::get_system_instance_input::Builder {
        crate::input::get_system_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetSystemInstance {
    type Output = std::result::Result<
        crate::output::GetSystemInstanceOutput,
        crate::error::GetSystemInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_system_instance_error(response)
        } else {
            crate::operation_deser::parse_get_system_instance_response(response)
        }
    }
}

/// <p>Gets a system.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetSystemTemplate {
    _private: (),
}
impl GetSystemTemplate {
    /// Creates a new builder-style object to manufacture [`GetSystemTemplateInput`](crate::input::GetSystemTemplateInput)
    pub fn builder() -> crate::input::get_system_template_input::Builder {
        crate::input::get_system_template_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetSystemTemplate {
    type Output = std::result::Result<
        crate::output::GetSystemTemplateOutput,
        crate::error::GetSystemTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_system_template_error(response)
        } else {
            crate::operation_deser::parse_get_system_template_response(response)
        }
    }
}

/// <p>Gets revisions made to the specified system template. Only the previous 100 revisions are stored. If the system has been deprecated, this action will return
/// the revisions that occurred before its deprecation. This action won't work with systems that have been deleted.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetSystemTemplateRevisions {
    _private: (),
}
impl GetSystemTemplateRevisions {
    /// Creates a new builder-style object to manufacture [`GetSystemTemplateRevisionsInput`](crate::input::GetSystemTemplateRevisionsInput)
    pub fn builder() -> crate::input::get_system_template_revisions_input::Builder {
        crate::input::get_system_template_revisions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetSystemTemplateRevisions {
    type Output = std::result::Result<
        crate::output::GetSystemTemplateRevisionsOutput,
        crate::error::GetSystemTemplateRevisionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_system_template_revisions_error(response)
        } else {
            crate::operation_deser::parse_get_system_template_revisions_response(response)
        }
    }
}

/// <p>Gets the status of the specified upload.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetUploadStatus {
    _private: (),
}
impl GetUploadStatus {
    /// Creates a new builder-style object to manufacture [`GetUploadStatusInput`](crate::input::GetUploadStatusInput)
    pub fn builder() -> crate::input::get_upload_status_input::Builder {
        crate::input::get_upload_status_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetUploadStatus {
    type Output = std::result::Result<
        crate::output::GetUploadStatusOutput,
        crate::error::GetUploadStatusError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_upload_status_error(response)
        } else {
            crate::operation_deser::parse_get_upload_status_response(response)
        }
    }
}

/// <p>Returns a list of objects that contain information about events in a flow execution.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListFlowExecutionMessages {
    _private: (),
}
impl ListFlowExecutionMessages {
    /// Creates a new builder-style object to manufacture [`ListFlowExecutionMessagesInput`](crate::input::ListFlowExecutionMessagesInput)
    pub fn builder() -> crate::input::list_flow_execution_messages_input::Builder {
        crate::input::list_flow_execution_messages_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListFlowExecutionMessages {
    type Output = std::result::Result<
        crate::output::ListFlowExecutionMessagesOutput,
        crate::error::ListFlowExecutionMessagesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_flow_execution_messages_error(response)
        } else {
            crate::operation_deser::parse_list_flow_execution_messages_response(response)
        }
    }
}

/// <p>Lists all tags on an AWS IoT Things Graph resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput)
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// <p>Searches for entities of the specified type. You can search for entities in your namespace and the public namespace that you're tracking.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SearchEntities {
    _private: (),
}
impl SearchEntities {
    /// Creates a new builder-style object to manufacture [`SearchEntitiesInput`](crate::input::SearchEntitiesInput)
    pub fn builder() -> crate::input::search_entities_input::Builder {
        crate::input::search_entities_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for SearchEntities {
    type Output =
        std::result::Result<crate::output::SearchEntitiesOutput, crate::error::SearchEntitiesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_search_entities_error(response)
        } else {
            crate::operation_deser::parse_search_entities_response(response)
        }
    }
}

/// <p>Searches for AWS IoT Things Graph workflow execution instances.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SearchFlowExecutions {
    _private: (),
}
impl SearchFlowExecutions {
    /// Creates a new builder-style object to manufacture [`SearchFlowExecutionsInput`](crate::input::SearchFlowExecutionsInput)
    pub fn builder() -> crate::input::search_flow_executions_input::Builder {
        crate::input::search_flow_executions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for SearchFlowExecutions {
    type Output = std::result::Result<
        crate::output::SearchFlowExecutionsOutput,
        crate::error::SearchFlowExecutionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_search_flow_executions_error(response)
        } else {
            crate::operation_deser::parse_search_flow_executions_response(response)
        }
    }
}

/// <p>Searches for summary information about workflows.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SearchFlowTemplates {
    _private: (),
}
impl SearchFlowTemplates {
    /// Creates a new builder-style object to manufacture [`SearchFlowTemplatesInput`](crate::input::SearchFlowTemplatesInput)
    pub fn builder() -> crate::input::search_flow_templates_input::Builder {
        crate::input::search_flow_templates_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for SearchFlowTemplates {
    type Output = std::result::Result<
        crate::output::SearchFlowTemplatesOutput,
        crate::error::SearchFlowTemplatesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_search_flow_templates_error(response)
        } else {
            crate::operation_deser::parse_search_flow_templates_response(response)
        }
    }
}

/// <p>Searches for system instances in the user's account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SearchSystemInstances {
    _private: (),
}
impl SearchSystemInstances {
    /// Creates a new builder-style object to manufacture [`SearchSystemInstancesInput`](crate::input::SearchSystemInstancesInput)
    pub fn builder() -> crate::input::search_system_instances_input::Builder {
        crate::input::search_system_instances_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for SearchSystemInstances {
    type Output = std::result::Result<
        crate::output::SearchSystemInstancesOutput,
        crate::error::SearchSystemInstancesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_search_system_instances_error(response)
        } else {
            crate::operation_deser::parse_search_system_instances_response(response)
        }
    }
}

/// <p>Searches for summary information about systems in the user's account. You can filter by the ID of a workflow to return only systems that use the specified workflow.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SearchSystemTemplates {
    _private: (),
}
impl SearchSystemTemplates {
    /// Creates a new builder-style object to manufacture [`SearchSystemTemplatesInput`](crate::input::SearchSystemTemplatesInput)
    pub fn builder() -> crate::input::search_system_templates_input::Builder {
        crate::input::search_system_templates_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for SearchSystemTemplates {
    type Output = std::result::Result<
        crate::output::SearchSystemTemplatesOutput,
        crate::error::SearchSystemTemplatesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_search_system_templates_error(response)
        } else {
            crate::operation_deser::parse_search_system_templates_response(response)
        }
    }
}

/// <p>Searches for things associated with the specified entity. You can search by both device and device model.</p>
/// <p>For example, if two different devices, camera1 and camera2, implement the camera device model, the user can associate thing1 to camera1 and thing2 to camera2.
/// <code>SearchThings(camera2)</code> will return only thing2, but <code>SearchThings(camera)</code> will return both thing1 and thing2.</p>
/// <p>This action searches for exact matches and doesn't perform partial text matching.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SearchThings {
    _private: (),
}
impl SearchThings {
    /// Creates a new builder-style object to manufacture [`SearchThingsInput`](crate::input::SearchThingsInput)
    pub fn builder() -> crate::input::search_things_input::Builder {
        crate::input::search_things_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for SearchThings {
    type Output =
        std::result::Result<crate::output::SearchThingsOutput, crate::error::SearchThingsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_search_things_error(response)
        } else {
            crate::operation_deser::parse_search_things_response(response)
        }
    }
}

/// <p>Creates a tag for the specified resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput)
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_tag_resource_error(response)
        } else {
            crate::operation_deser::parse_tag_resource_response(response)
        }
    }
}

/// <p>Removes a system instance from its target (Cloud or Greengrass).</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UndeploySystemInstance {
    _private: (),
}
impl UndeploySystemInstance {
    /// Creates a new builder-style object to manufacture [`UndeploySystemInstanceInput`](crate::input::UndeploySystemInstanceInput)
    pub fn builder() -> crate::input::undeploy_system_instance_input::Builder {
        crate::input::undeploy_system_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UndeploySystemInstance {
    type Output = std::result::Result<
        crate::output::UndeploySystemInstanceOutput,
        crate::error::UndeploySystemInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_undeploy_system_instance_error(response)
        } else {
            crate::operation_deser::parse_undeploy_system_instance_response(response)
        }
    }
}

/// <p>Removes a tag from the specified resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput)
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_untag_resource_error(response)
        } else {
            crate::operation_deser::parse_untag_resource_response(response)
        }
    }
}

/// <p>Updates the specified workflow. All deployed systems and system instances that use the workflow will see the changes in the flow when it is redeployed. If you don't want this
/// behavior, copy the workflow (creating a new workflow with a different ID), and update the copy. The workflow can contain only entities in the specified namespace. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateFlowTemplate {
    _private: (),
}
impl UpdateFlowTemplate {
    /// Creates a new builder-style object to manufacture [`UpdateFlowTemplateInput`](crate::input::UpdateFlowTemplateInput)
    pub fn builder() -> crate::input::update_flow_template_input::Builder {
        crate::input::update_flow_template_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateFlowTemplate {
    type Output = std::result::Result<
        crate::output::UpdateFlowTemplateOutput,
        crate::error::UpdateFlowTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_flow_template_error(response)
        } else {
            crate::operation_deser::parse_update_flow_template_response(response)
        }
    }
}

/// <p>Updates the specified system. You don't need to run this action after updating a workflow. Any deployment that uses the system will see the changes in the system when it is redeployed.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateSystemTemplate {
    _private: (),
}
impl UpdateSystemTemplate {
    /// Creates a new builder-style object to manufacture [`UpdateSystemTemplateInput`](crate::input::UpdateSystemTemplateInput)
    pub fn builder() -> crate::input::update_system_template_input::Builder {
        crate::input::update_system_template_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateSystemTemplate {
    type Output = std::result::Result<
        crate::output::UpdateSystemTemplateOutput,
        crate::error::UpdateSystemTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_system_template_error(response)
        } else {
            crate::operation_deser::parse_update_system_template_response(response)
        }
    }
}

/// <p>Asynchronously uploads one or more entity definitions to the user's namespace. The <code>document</code> parameter is required if
/// <code>syncWithPublicNamespace</code> and <code>deleteExistingEntites</code> are false. If the <code>syncWithPublicNamespace</code> parameter  is set to
/// <code>true</code>, the user's namespace will synchronize with the latest version of the public namespace. If <code>deprecateExistingEntities</code> is set to true,
/// all entities in the latest version will be deleted before the new <code>DefinitionDocument</code> is uploaded.</p>
/// <p>When a user uploads entity definitions for the first time, the service creates a new namespace for the user. The new namespace tracks the public namespace. Currently users
/// can have only one namespace. The namespace version increments whenever a user uploads entity definitions that are backwards-incompatible and whenever a user sets the
/// <code>syncWithPublicNamespace</code> parameter or the <code>deprecateExistingEntities</code> parameter to <code>true</code>.</p>
/// <p>The IDs for all of the entities should be in URN format. Each entity must be in the user's namespace. Users can't create entities in the public namespace, but entity definitions can refer to entities in the public namespace.</p>
/// <p>Valid entities are <code>Device</code>, <code>DeviceModel</code>, <code>Service</code>, <code>Capability</code>, <code>State</code>, <code>Action</code>, <code>Event</code>, <code>Property</code>,
/// <code>Mapping</code>, <code>Enum</code>.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UploadEntityDefinitions {
    _private: (),
}
impl UploadEntityDefinitions {
    /// Creates a new builder-style object to manufacture [`UploadEntityDefinitionsInput`](crate::input::UploadEntityDefinitionsInput)
    pub fn builder() -> crate::input::upload_entity_definitions_input::Builder {
        crate::input::upload_entity_definitions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UploadEntityDefinitions {
    type Output = std::result::Result<
        crate::output::UploadEntityDefinitionsOutput,
        crate::error::UploadEntityDefinitionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_upload_entity_definitions_error(response)
        } else {
            crate::operation_deser::parse_upload_entity_definitions_response(response)
        }
    }
}
