// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_add_role_to_db_cluster(
    input: &crate::input::AddRoleToDbClusterInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AddRoleToDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("DBClusterIdentifier");
    if let Some(var_2) = &input.db_cluster_identifier {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("RoleArn");
    if let Some(var_4) = &input.role_arn {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("FeatureName");
    if let Some(var_6) = &input.feature_name {
        scope_5.string(var_6);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_add_source_identifier_to_subscription(
    input: &crate::input::AddSourceIdentifierToSubscriptionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AddSourceIdentifierToSubscription", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("SubscriptionName");
    if let Some(var_8) = &input.subscription_name {
        scope_7.string(var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("SourceIdentifier");
    if let Some(var_10) = &input.source_identifier {
        scope_9.string(var_10);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_add_tags_to_resource(
    input: &crate::input::AddTagsToResourceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AddTagsToResource", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("ResourceName");
    if let Some(var_12) = &input.resource_name {
        scope_11.string(var_12);
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("Tags");
    if let Some(var_14) = &input.tags {
        let mut list_16 = scope_13.start_list(false, Some("Tag"));
        for item_15 in var_14 {
            #[allow(unused_mut)]
            let mut entry_17 = list_16.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_17, item_15);
        }
        list_16.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_apply_pending_maintenance_action(
    input: &crate::input::ApplyPendingMaintenanceActionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ApplyPendingMaintenanceAction", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_18 = writer.prefix("ResourceIdentifier");
    if let Some(var_19) = &input.resource_identifier {
        scope_18.string(var_19);
    }
    #[allow(unused_mut)]
    let mut scope_20 = writer.prefix("ApplyAction");
    if let Some(var_21) = &input.apply_action {
        scope_20.string(var_21);
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("OptInType");
    if let Some(var_23) = &input.opt_in_type {
        scope_22.string(var_23);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_db_cluster_parameter_group(
    input: &crate::input::CopyDbClusterParameterGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CopyDBClusterParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("SourceDBClusterParameterGroupIdentifier");
    if let Some(var_25) = &input.source_db_cluster_parameter_group_identifier {
        scope_24.string(var_25);
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("TargetDBClusterParameterGroupIdentifier");
    if let Some(var_27) = &input.target_db_cluster_parameter_group_identifier {
        scope_26.string(var_27);
    }
    #[allow(unused_mut)]
    let mut scope_28 = writer.prefix("TargetDBClusterParameterGroupDescription");
    if let Some(var_29) = &input.target_db_cluster_parameter_group_description {
        scope_28.string(var_29);
    }
    #[allow(unused_mut)]
    let mut scope_30 = writer.prefix("Tags");
    if let Some(var_31) = &input.tags {
        let mut list_33 = scope_30.start_list(false, Some("Tag"));
        for item_32 in var_31 {
            #[allow(unused_mut)]
            let mut entry_34 = list_33.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_34, item_32);
        }
        list_33.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_db_cluster_snapshot(
    input: &crate::input::CopyDbClusterSnapshotInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CopyDBClusterSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_35 = writer.prefix("SourceDBClusterSnapshotIdentifier");
    if let Some(var_36) = &input.source_db_cluster_snapshot_identifier {
        scope_35.string(var_36);
    }
    #[allow(unused_mut)]
    let mut scope_37 = writer.prefix("TargetDBClusterSnapshotIdentifier");
    if let Some(var_38) = &input.target_db_cluster_snapshot_identifier {
        scope_37.string(var_38);
    }
    #[allow(unused_mut)]
    let mut scope_39 = writer.prefix("KmsKeyId");
    if let Some(var_40) = &input.kms_key_id {
        scope_39.string(var_40);
    }
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("PreSignedUrl");
    if let Some(var_42) = &input.pre_signed_url {
        scope_41.string(var_42);
    }
    #[allow(unused_mut)]
    let mut scope_43 = writer.prefix("CopyTags");
    if let Some(var_44) = &input.copy_tags {
        scope_43.boolean(*var_44);
    }
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("Tags");
    if let Some(var_46) = &input.tags {
        let mut list_48 = scope_45.start_list(false, Some("Tag"));
        for item_47 in var_46 {
            #[allow(unused_mut)]
            let mut entry_49 = list_48.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_49, item_47);
        }
        list_48.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_db_parameter_group(
    input: &crate::input::CopyDbParameterGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CopyDBParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_50 = writer.prefix("SourceDBParameterGroupIdentifier");
    if let Some(var_51) = &input.source_db_parameter_group_identifier {
        scope_50.string(var_51);
    }
    #[allow(unused_mut)]
    let mut scope_52 = writer.prefix("TargetDBParameterGroupIdentifier");
    if let Some(var_53) = &input.target_db_parameter_group_identifier {
        scope_52.string(var_53);
    }
    #[allow(unused_mut)]
    let mut scope_54 = writer.prefix("TargetDBParameterGroupDescription");
    if let Some(var_55) = &input.target_db_parameter_group_description {
        scope_54.string(var_55);
    }
    #[allow(unused_mut)]
    let mut scope_56 = writer.prefix("Tags");
    if let Some(var_57) = &input.tags {
        let mut list_59 = scope_56.start_list(false, Some("Tag"));
        for item_58 in var_57 {
            #[allow(unused_mut)]
            let mut entry_60 = list_59.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_60, item_58);
        }
        list_59.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_cluster(
    input: &crate::input::CreateDbClusterInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("AvailabilityZones");
    if let Some(var_62) = &input.availability_zones {
        let mut list_64 = scope_61.start_list(false, Some("AvailabilityZone"));
        for item_63 in var_62 {
            #[allow(unused_mut)]
            let mut entry_65 = list_64.entry();
            entry_65.string(item_63);
        }
        list_64.finish();
    }
    #[allow(unused_mut)]
    let mut scope_66 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_67) = &input.backup_retention_period {
        scope_66.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_67).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_68 = writer.prefix("CharacterSetName");
    if let Some(var_69) = &input.character_set_name {
        scope_68.string(var_69);
    }
    #[allow(unused_mut)]
    let mut scope_70 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_71) = &input.copy_tags_to_snapshot {
        scope_70.boolean(*var_71);
    }
    #[allow(unused_mut)]
    let mut scope_72 = writer.prefix("DatabaseName");
    if let Some(var_73) = &input.database_name {
        scope_72.string(var_73);
    }
    #[allow(unused_mut)]
    let mut scope_74 = writer.prefix("DBClusterIdentifier");
    if let Some(var_75) = &input.db_cluster_identifier {
        scope_74.string(var_75);
    }
    #[allow(unused_mut)]
    let mut scope_76 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_77) = &input.db_cluster_parameter_group_name {
        scope_76.string(var_77);
    }
    #[allow(unused_mut)]
    let mut scope_78 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_79) = &input.vpc_security_group_ids {
        let mut list_81 = scope_78.start_list(false, Some("VpcSecurityGroupId"));
        for item_80 in var_79 {
            #[allow(unused_mut)]
            let mut entry_82 = list_81.entry();
            entry_82.string(item_80);
        }
        list_81.finish();
    }
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("DBSubnetGroupName");
    if let Some(var_84) = &input.db_subnet_group_name {
        scope_83.string(var_84);
    }
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("Engine");
    if let Some(var_86) = &input.engine {
        scope_85.string(var_86);
    }
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("EngineVersion");
    if let Some(var_88) = &input.engine_version {
        scope_87.string(var_88);
    }
    #[allow(unused_mut)]
    let mut scope_89 = writer.prefix("Port");
    if let Some(var_90) = &input.port {
        scope_89.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_90).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_91 = writer.prefix("MasterUsername");
    if let Some(var_92) = &input.master_username {
        scope_91.string(var_92);
    }
    #[allow(unused_mut)]
    let mut scope_93 = writer.prefix("MasterUserPassword");
    if let Some(var_94) = &input.master_user_password {
        scope_93.string(var_94);
    }
    #[allow(unused_mut)]
    let mut scope_95 = writer.prefix("OptionGroupName");
    if let Some(var_96) = &input.option_group_name {
        scope_95.string(var_96);
    }
    #[allow(unused_mut)]
    let mut scope_97 = writer.prefix("PreferredBackupWindow");
    if let Some(var_98) = &input.preferred_backup_window {
        scope_97.string(var_98);
    }
    #[allow(unused_mut)]
    let mut scope_99 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_100) = &input.preferred_maintenance_window {
        scope_99.string(var_100);
    }
    #[allow(unused_mut)]
    let mut scope_101 = writer.prefix("ReplicationSourceIdentifier");
    if let Some(var_102) = &input.replication_source_identifier {
        scope_101.string(var_102);
    }
    #[allow(unused_mut)]
    let mut scope_103 = writer.prefix("Tags");
    if let Some(var_104) = &input.tags {
        let mut list_106 = scope_103.start_list(false, Some("Tag"));
        for item_105 in var_104 {
            #[allow(unused_mut)]
            let mut entry_107 = list_106.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_107, item_105);
        }
        list_106.finish();
    }
    #[allow(unused_mut)]
    let mut scope_108 = writer.prefix("StorageEncrypted");
    if let Some(var_109) = &input.storage_encrypted {
        scope_108.boolean(*var_109);
    }
    #[allow(unused_mut)]
    let mut scope_110 = writer.prefix("KmsKeyId");
    if let Some(var_111) = &input.kms_key_id {
        scope_110.string(var_111);
    }
    #[allow(unused_mut)]
    let mut scope_112 = writer.prefix("PreSignedUrl");
    if let Some(var_113) = &input.pre_signed_url {
        scope_112.string(var_113);
    }
    #[allow(unused_mut)]
    let mut scope_114 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_115) = &input.enable_iam_database_authentication {
        scope_114.boolean(*var_115);
    }
    #[allow(unused_mut)]
    let mut scope_116 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_117) = &input.enable_cloudwatch_logs_exports {
        let mut list_119 = scope_116.start_list(false, None);
        for item_118 in var_117 {
            #[allow(unused_mut)]
            let mut entry_120 = list_119.entry();
            entry_120.string(item_118);
        }
        list_119.finish();
    }
    #[allow(unused_mut)]
    let mut scope_121 = writer.prefix("DeletionProtection");
    if let Some(var_122) = &input.deletion_protection {
        scope_121.boolean(*var_122);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_cluster_endpoint(
    input: &crate::input::CreateDbClusterEndpointInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateDBClusterEndpoint", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_123 = writer.prefix("DBClusterIdentifier");
    if let Some(var_124) = &input.db_cluster_identifier {
        scope_123.string(var_124);
    }
    #[allow(unused_mut)]
    let mut scope_125 = writer.prefix("DBClusterEndpointIdentifier");
    if let Some(var_126) = &input.db_cluster_endpoint_identifier {
        scope_125.string(var_126);
    }
    #[allow(unused_mut)]
    let mut scope_127 = writer.prefix("EndpointType");
    if let Some(var_128) = &input.endpoint_type {
        scope_127.string(var_128);
    }
    #[allow(unused_mut)]
    let mut scope_129 = writer.prefix("StaticMembers");
    if let Some(var_130) = &input.static_members {
        let mut list_132 = scope_129.start_list(false, None);
        for item_131 in var_130 {
            #[allow(unused_mut)]
            let mut entry_133 = list_132.entry();
            entry_133.string(item_131);
        }
        list_132.finish();
    }
    #[allow(unused_mut)]
    let mut scope_134 = writer.prefix("ExcludedMembers");
    if let Some(var_135) = &input.excluded_members {
        let mut list_137 = scope_134.start_list(false, None);
        for item_136 in var_135 {
            #[allow(unused_mut)]
            let mut entry_138 = list_137.entry();
            entry_138.string(item_136);
        }
        list_137.finish();
    }
    #[allow(unused_mut)]
    let mut scope_139 = writer.prefix("Tags");
    if let Some(var_140) = &input.tags {
        let mut list_142 = scope_139.start_list(false, Some("Tag"));
        for item_141 in var_140 {
            #[allow(unused_mut)]
            let mut entry_143 = list_142.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_143, item_141);
        }
        list_142.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_cluster_parameter_group(
    input: &crate::input::CreateDbClusterParameterGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateDBClusterParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_144 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_145) = &input.db_cluster_parameter_group_name {
        scope_144.string(var_145);
    }
    #[allow(unused_mut)]
    let mut scope_146 = writer.prefix("DBParameterGroupFamily");
    if let Some(var_147) = &input.db_parameter_group_family {
        scope_146.string(var_147);
    }
    #[allow(unused_mut)]
    let mut scope_148 = writer.prefix("Description");
    if let Some(var_149) = &input.description {
        scope_148.string(var_149);
    }
    #[allow(unused_mut)]
    let mut scope_150 = writer.prefix("Tags");
    if let Some(var_151) = &input.tags {
        let mut list_153 = scope_150.start_list(false, Some("Tag"));
        for item_152 in var_151 {
            #[allow(unused_mut)]
            let mut entry_154 = list_153.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_154, item_152);
        }
        list_153.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_cluster_snapshot(
    input: &crate::input::CreateDbClusterSnapshotInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateDBClusterSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_155 = writer.prefix("DBClusterSnapshotIdentifier");
    if let Some(var_156) = &input.db_cluster_snapshot_identifier {
        scope_155.string(var_156);
    }
    #[allow(unused_mut)]
    let mut scope_157 = writer.prefix("DBClusterIdentifier");
    if let Some(var_158) = &input.db_cluster_identifier {
        scope_157.string(var_158);
    }
    #[allow(unused_mut)]
    let mut scope_159 = writer.prefix("Tags");
    if let Some(var_160) = &input.tags {
        let mut list_162 = scope_159.start_list(false, Some("Tag"));
        for item_161 in var_160 {
            #[allow(unused_mut)]
            let mut entry_163 = list_162.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_163, item_161);
        }
        list_162.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_instance(
    input: &crate::input::CreateDbInstanceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateDBInstance", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_164 = writer.prefix("DBName");
    if let Some(var_165) = &input.db_name {
        scope_164.string(var_165);
    }
    #[allow(unused_mut)]
    let mut scope_166 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_167) = &input.db_instance_identifier {
        scope_166.string(var_167);
    }
    #[allow(unused_mut)]
    let mut scope_168 = writer.prefix("AllocatedStorage");
    if let Some(var_169) = &input.allocated_storage {
        scope_168.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_169).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_170 = writer.prefix("DBInstanceClass");
    if let Some(var_171) = &input.db_instance_class {
        scope_170.string(var_171);
    }
    #[allow(unused_mut)]
    let mut scope_172 = writer.prefix("Engine");
    if let Some(var_173) = &input.engine {
        scope_172.string(var_173);
    }
    #[allow(unused_mut)]
    let mut scope_174 = writer.prefix("MasterUsername");
    if let Some(var_175) = &input.master_username {
        scope_174.string(var_175);
    }
    #[allow(unused_mut)]
    let mut scope_176 = writer.prefix("MasterUserPassword");
    if let Some(var_177) = &input.master_user_password {
        scope_176.string(var_177);
    }
    #[allow(unused_mut)]
    let mut scope_178 = writer.prefix("DBSecurityGroups");
    if let Some(var_179) = &input.db_security_groups {
        let mut list_181 = scope_178.start_list(false, Some("DBSecurityGroupName"));
        for item_180 in var_179 {
            #[allow(unused_mut)]
            let mut entry_182 = list_181.entry();
            entry_182.string(item_180);
        }
        list_181.finish();
    }
    #[allow(unused_mut)]
    let mut scope_183 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_184) = &input.vpc_security_group_ids {
        let mut list_186 = scope_183.start_list(false, Some("VpcSecurityGroupId"));
        for item_185 in var_184 {
            #[allow(unused_mut)]
            let mut entry_187 = list_186.entry();
            entry_187.string(item_185);
        }
        list_186.finish();
    }
    #[allow(unused_mut)]
    let mut scope_188 = writer.prefix("AvailabilityZone");
    if let Some(var_189) = &input.availability_zone {
        scope_188.string(var_189);
    }
    #[allow(unused_mut)]
    let mut scope_190 = writer.prefix("DBSubnetGroupName");
    if let Some(var_191) = &input.db_subnet_group_name {
        scope_190.string(var_191);
    }
    #[allow(unused_mut)]
    let mut scope_192 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_193) = &input.preferred_maintenance_window {
        scope_192.string(var_193);
    }
    #[allow(unused_mut)]
    let mut scope_194 = writer.prefix("DBParameterGroupName");
    if let Some(var_195) = &input.db_parameter_group_name {
        scope_194.string(var_195);
    }
    #[allow(unused_mut)]
    let mut scope_196 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_197) = &input.backup_retention_period {
        scope_196.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_197).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_198 = writer.prefix("PreferredBackupWindow");
    if let Some(var_199) = &input.preferred_backup_window {
        scope_198.string(var_199);
    }
    #[allow(unused_mut)]
    let mut scope_200 = writer.prefix("Port");
    if let Some(var_201) = &input.port {
        scope_200.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_201).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_202 = writer.prefix("MultiAZ");
    if let Some(var_203) = &input.multi_az {
        scope_202.boolean(*var_203);
    }
    #[allow(unused_mut)]
    let mut scope_204 = writer.prefix("EngineVersion");
    if let Some(var_205) = &input.engine_version {
        scope_204.string(var_205);
    }
    #[allow(unused_mut)]
    let mut scope_206 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_207) = &input.auto_minor_version_upgrade {
        scope_206.boolean(*var_207);
    }
    #[allow(unused_mut)]
    let mut scope_208 = writer.prefix("LicenseModel");
    if let Some(var_209) = &input.license_model {
        scope_208.string(var_209);
    }
    #[allow(unused_mut)]
    let mut scope_210 = writer.prefix("Iops");
    if let Some(var_211) = &input.iops {
        scope_210.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_211).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_212 = writer.prefix("OptionGroupName");
    if let Some(var_213) = &input.option_group_name {
        scope_212.string(var_213);
    }
    #[allow(unused_mut)]
    let mut scope_214 = writer.prefix("CharacterSetName");
    if let Some(var_215) = &input.character_set_name {
        scope_214.string(var_215);
    }
    #[allow(unused_mut)]
    let mut scope_216 = writer.prefix("PubliclyAccessible");
    if let Some(var_217) = &input.publicly_accessible {
        scope_216.boolean(*var_217);
    }
    #[allow(unused_mut)]
    let mut scope_218 = writer.prefix("Tags");
    if let Some(var_219) = &input.tags {
        let mut list_221 = scope_218.start_list(false, Some("Tag"));
        for item_220 in var_219 {
            #[allow(unused_mut)]
            let mut entry_222 = list_221.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_222, item_220);
        }
        list_221.finish();
    }
    #[allow(unused_mut)]
    let mut scope_223 = writer.prefix("DBClusterIdentifier");
    if let Some(var_224) = &input.db_cluster_identifier {
        scope_223.string(var_224);
    }
    #[allow(unused_mut)]
    let mut scope_225 = writer.prefix("StorageType");
    if let Some(var_226) = &input.storage_type {
        scope_225.string(var_226);
    }
    #[allow(unused_mut)]
    let mut scope_227 = writer.prefix("TdeCredentialArn");
    if let Some(var_228) = &input.tde_credential_arn {
        scope_227.string(var_228);
    }
    #[allow(unused_mut)]
    let mut scope_229 = writer.prefix("TdeCredentialPassword");
    if let Some(var_230) = &input.tde_credential_password {
        scope_229.string(var_230);
    }
    #[allow(unused_mut)]
    let mut scope_231 = writer.prefix("StorageEncrypted");
    if let Some(var_232) = &input.storage_encrypted {
        scope_231.boolean(*var_232);
    }
    #[allow(unused_mut)]
    let mut scope_233 = writer.prefix("KmsKeyId");
    if let Some(var_234) = &input.kms_key_id {
        scope_233.string(var_234);
    }
    #[allow(unused_mut)]
    let mut scope_235 = writer.prefix("Domain");
    if let Some(var_236) = &input.domain {
        scope_235.string(var_236);
    }
    #[allow(unused_mut)]
    let mut scope_237 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_238) = &input.copy_tags_to_snapshot {
        scope_237.boolean(*var_238);
    }
    #[allow(unused_mut)]
    let mut scope_239 = writer.prefix("MonitoringInterval");
    if let Some(var_240) = &input.monitoring_interval {
        scope_239.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_240).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_241 = writer.prefix("MonitoringRoleArn");
    if let Some(var_242) = &input.monitoring_role_arn {
        scope_241.string(var_242);
    }
    #[allow(unused_mut)]
    let mut scope_243 = writer.prefix("DomainIAMRoleName");
    if let Some(var_244) = &input.domain_iam_role_name {
        scope_243.string(var_244);
    }
    #[allow(unused_mut)]
    let mut scope_245 = writer.prefix("PromotionTier");
    if let Some(var_246) = &input.promotion_tier {
        scope_245.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_246).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_247 = writer.prefix("Timezone");
    if let Some(var_248) = &input.timezone {
        scope_247.string(var_248);
    }
    #[allow(unused_mut)]
    let mut scope_249 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_250) = &input.enable_iam_database_authentication {
        scope_249.boolean(*var_250);
    }
    #[allow(unused_mut)]
    let mut scope_251 = writer.prefix("EnablePerformanceInsights");
    if let Some(var_252) = &input.enable_performance_insights {
        scope_251.boolean(*var_252);
    }
    #[allow(unused_mut)]
    let mut scope_253 = writer.prefix("PerformanceInsightsKMSKeyId");
    if let Some(var_254) = &input.performance_insights_kms_key_id {
        scope_253.string(var_254);
    }
    #[allow(unused_mut)]
    let mut scope_255 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_256) = &input.enable_cloudwatch_logs_exports {
        let mut list_258 = scope_255.start_list(false, None);
        for item_257 in var_256 {
            #[allow(unused_mut)]
            let mut entry_259 = list_258.entry();
            entry_259.string(item_257);
        }
        list_258.finish();
    }
    #[allow(unused_mut)]
    let mut scope_260 = writer.prefix("DeletionProtection");
    if let Some(var_261) = &input.deletion_protection {
        scope_260.boolean(*var_261);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_parameter_group(
    input: &crate::input::CreateDbParameterGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateDBParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_262 = writer.prefix("DBParameterGroupName");
    if let Some(var_263) = &input.db_parameter_group_name {
        scope_262.string(var_263);
    }
    #[allow(unused_mut)]
    let mut scope_264 = writer.prefix("DBParameterGroupFamily");
    if let Some(var_265) = &input.db_parameter_group_family {
        scope_264.string(var_265);
    }
    #[allow(unused_mut)]
    let mut scope_266 = writer.prefix("Description");
    if let Some(var_267) = &input.description {
        scope_266.string(var_267);
    }
    #[allow(unused_mut)]
    let mut scope_268 = writer.prefix("Tags");
    if let Some(var_269) = &input.tags {
        let mut list_271 = scope_268.start_list(false, Some("Tag"));
        for item_270 in var_269 {
            #[allow(unused_mut)]
            let mut entry_272 = list_271.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_272, item_270);
        }
        list_271.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_subnet_group(
    input: &crate::input::CreateDbSubnetGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateDBSubnetGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_273 = writer.prefix("DBSubnetGroupName");
    if let Some(var_274) = &input.db_subnet_group_name {
        scope_273.string(var_274);
    }
    #[allow(unused_mut)]
    let mut scope_275 = writer.prefix("DBSubnetGroupDescription");
    if let Some(var_276) = &input.db_subnet_group_description {
        scope_275.string(var_276);
    }
    #[allow(unused_mut)]
    let mut scope_277 = writer.prefix("SubnetIds");
    if let Some(var_278) = &input.subnet_ids {
        let mut list_280 = scope_277.start_list(false, Some("SubnetIdentifier"));
        for item_279 in var_278 {
            #[allow(unused_mut)]
            let mut entry_281 = list_280.entry();
            entry_281.string(item_279);
        }
        list_280.finish();
    }
    #[allow(unused_mut)]
    let mut scope_282 = writer.prefix("Tags");
    if let Some(var_283) = &input.tags {
        let mut list_285 = scope_282.start_list(false, Some("Tag"));
        for item_284 in var_283 {
            #[allow(unused_mut)]
            let mut entry_286 = list_285.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_286, item_284);
        }
        list_285.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_event_subscription(
    input: &crate::input::CreateEventSubscriptionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateEventSubscription", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_287 = writer.prefix("SubscriptionName");
    if let Some(var_288) = &input.subscription_name {
        scope_287.string(var_288);
    }
    #[allow(unused_mut)]
    let mut scope_289 = writer.prefix("SnsTopicArn");
    if let Some(var_290) = &input.sns_topic_arn {
        scope_289.string(var_290);
    }
    #[allow(unused_mut)]
    let mut scope_291 = writer.prefix("SourceType");
    if let Some(var_292) = &input.source_type {
        scope_291.string(var_292);
    }
    #[allow(unused_mut)]
    let mut scope_293 = writer.prefix("EventCategories");
    if let Some(var_294) = &input.event_categories {
        let mut list_296 = scope_293.start_list(false, Some("EventCategory"));
        for item_295 in var_294 {
            #[allow(unused_mut)]
            let mut entry_297 = list_296.entry();
            entry_297.string(item_295);
        }
        list_296.finish();
    }
    #[allow(unused_mut)]
    let mut scope_298 = writer.prefix("SourceIds");
    if let Some(var_299) = &input.source_ids {
        let mut list_301 = scope_298.start_list(false, Some("SourceId"));
        for item_300 in var_299 {
            #[allow(unused_mut)]
            let mut entry_302 = list_301.entry();
            entry_302.string(item_300);
        }
        list_301.finish();
    }
    #[allow(unused_mut)]
    let mut scope_303 = writer.prefix("Enabled");
    if let Some(var_304) = &input.enabled {
        scope_303.boolean(*var_304);
    }
    #[allow(unused_mut)]
    let mut scope_305 = writer.prefix("Tags");
    if let Some(var_306) = &input.tags {
        let mut list_308 = scope_305.start_list(false, Some("Tag"));
        for item_307 in var_306 {
            #[allow(unused_mut)]
            let mut entry_309 = list_308.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_309, item_307);
        }
        list_308.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_cluster(
    input: &crate::input::DeleteDbClusterInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_310 = writer.prefix("DBClusterIdentifier");
    if let Some(var_311) = &input.db_cluster_identifier {
        scope_310.string(var_311);
    }
    #[allow(unused_mut)]
    let mut scope_312 = writer.prefix("SkipFinalSnapshot");
    if input.skip_final_snapshot {
        scope_312.boolean(input.skip_final_snapshot);
    }
    #[allow(unused_mut)]
    let mut scope_313 = writer.prefix("FinalDBSnapshotIdentifier");
    if let Some(var_314) = &input.final_db_snapshot_identifier {
        scope_313.string(var_314);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_cluster_endpoint(
    input: &crate::input::DeleteDbClusterEndpointInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteDBClusterEndpoint", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_315 = writer.prefix("DBClusterEndpointIdentifier");
    if let Some(var_316) = &input.db_cluster_endpoint_identifier {
        scope_315.string(var_316);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_cluster_parameter_group(
    input: &crate::input::DeleteDbClusterParameterGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteDBClusterParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_317 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_318) = &input.db_cluster_parameter_group_name {
        scope_317.string(var_318);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_cluster_snapshot(
    input: &crate::input::DeleteDbClusterSnapshotInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteDBClusterSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_319 = writer.prefix("DBClusterSnapshotIdentifier");
    if let Some(var_320) = &input.db_cluster_snapshot_identifier {
        scope_319.string(var_320);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_instance(
    input: &crate::input::DeleteDbInstanceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteDBInstance", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_321 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_322) = &input.db_instance_identifier {
        scope_321.string(var_322);
    }
    #[allow(unused_mut)]
    let mut scope_323 = writer.prefix("SkipFinalSnapshot");
    if input.skip_final_snapshot {
        scope_323.boolean(input.skip_final_snapshot);
    }
    #[allow(unused_mut)]
    let mut scope_324 = writer.prefix("FinalDBSnapshotIdentifier");
    if let Some(var_325) = &input.final_db_snapshot_identifier {
        scope_324.string(var_325);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_parameter_group(
    input: &crate::input::DeleteDbParameterGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteDBParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_326 = writer.prefix("DBParameterGroupName");
    if let Some(var_327) = &input.db_parameter_group_name {
        scope_326.string(var_327);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_subnet_group(
    input: &crate::input::DeleteDbSubnetGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteDBSubnetGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_328 = writer.prefix("DBSubnetGroupName");
    if let Some(var_329) = &input.db_subnet_group_name {
        scope_328.string(var_329);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_event_subscription(
    input: &crate::input::DeleteEventSubscriptionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteEventSubscription", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_330 = writer.prefix("SubscriptionName");
    if let Some(var_331) = &input.subscription_name {
        scope_330.string(var_331);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_endpoints(
    input: &crate::input::DescribeDbClusterEndpointsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeDBClusterEndpoints", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_332 = writer.prefix("DBClusterIdentifier");
    if let Some(var_333) = &input.db_cluster_identifier {
        scope_332.string(var_333);
    }
    #[allow(unused_mut)]
    let mut scope_334 = writer.prefix("DBClusterEndpointIdentifier");
    if let Some(var_335) = &input.db_cluster_endpoint_identifier {
        scope_334.string(var_335);
    }
    #[allow(unused_mut)]
    let mut scope_336 = writer.prefix("Filters");
    if let Some(var_337) = &input.filters {
        let mut list_339 = scope_336.start_list(false, Some("Filter"));
        for item_338 in var_337 {
            #[allow(unused_mut)]
            let mut entry_340 = list_339.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_340, item_338);
        }
        list_339.finish();
    }
    #[allow(unused_mut)]
    let mut scope_341 = writer.prefix("MaxRecords");
    if let Some(var_342) = &input.max_records {
        scope_341.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_342).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_343 = writer.prefix("Marker");
    if let Some(var_344) = &input.marker {
        scope_343.string(var_344);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_parameter_groups(
    input: &crate::input::DescribeDbClusterParameterGroupsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeDBClusterParameterGroups", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_345 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_346) = &input.db_cluster_parameter_group_name {
        scope_345.string(var_346);
    }
    #[allow(unused_mut)]
    let mut scope_347 = writer.prefix("Filters");
    if let Some(var_348) = &input.filters {
        let mut list_350 = scope_347.start_list(false, Some("Filter"));
        for item_349 in var_348 {
            #[allow(unused_mut)]
            let mut entry_351 = list_350.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_351, item_349);
        }
        list_350.finish();
    }
    #[allow(unused_mut)]
    let mut scope_352 = writer.prefix("MaxRecords");
    if let Some(var_353) = &input.max_records {
        scope_352.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_353).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_354 = writer.prefix("Marker");
    if let Some(var_355) = &input.marker {
        scope_354.string(var_355);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_parameters(
    input: &crate::input::DescribeDbClusterParametersInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeDBClusterParameters", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_356 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_357) = &input.db_cluster_parameter_group_name {
        scope_356.string(var_357);
    }
    #[allow(unused_mut)]
    let mut scope_358 = writer.prefix("Source");
    if let Some(var_359) = &input.source {
        scope_358.string(var_359);
    }
    #[allow(unused_mut)]
    let mut scope_360 = writer.prefix("Filters");
    if let Some(var_361) = &input.filters {
        let mut list_363 = scope_360.start_list(false, Some("Filter"));
        for item_362 in var_361 {
            #[allow(unused_mut)]
            let mut entry_364 = list_363.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_364, item_362);
        }
        list_363.finish();
    }
    #[allow(unused_mut)]
    let mut scope_365 = writer.prefix("MaxRecords");
    if let Some(var_366) = &input.max_records {
        scope_365.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_366).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_367 = writer.prefix("Marker");
    if let Some(var_368) = &input.marker {
        scope_367.string(var_368);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_clusters(
    input: &crate::input::DescribeDbClustersInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeDBClusters", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_369 = writer.prefix("DBClusterIdentifier");
    if let Some(var_370) = &input.db_cluster_identifier {
        scope_369.string(var_370);
    }
    #[allow(unused_mut)]
    let mut scope_371 = writer.prefix("Filters");
    if let Some(var_372) = &input.filters {
        let mut list_374 = scope_371.start_list(false, Some("Filter"));
        for item_373 in var_372 {
            #[allow(unused_mut)]
            let mut entry_375 = list_374.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_375, item_373);
        }
        list_374.finish();
    }
    #[allow(unused_mut)]
    let mut scope_376 = writer.prefix("MaxRecords");
    if let Some(var_377) = &input.max_records {
        scope_376.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_377).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_378 = writer.prefix("Marker");
    if let Some(var_379) = &input.marker {
        scope_378.string(var_379);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_snapshot_attributes(
    input: &crate::input::DescribeDbClusterSnapshotAttributesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeDBClusterSnapshotAttributes",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_380 = writer.prefix("DBClusterSnapshotIdentifier");
    if let Some(var_381) = &input.db_cluster_snapshot_identifier {
        scope_380.string(var_381);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_snapshots(
    input: &crate::input::DescribeDbClusterSnapshotsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeDBClusterSnapshots", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_382 = writer.prefix("DBClusterIdentifier");
    if let Some(var_383) = &input.db_cluster_identifier {
        scope_382.string(var_383);
    }
    #[allow(unused_mut)]
    let mut scope_384 = writer.prefix("DBClusterSnapshotIdentifier");
    if let Some(var_385) = &input.db_cluster_snapshot_identifier {
        scope_384.string(var_385);
    }
    #[allow(unused_mut)]
    let mut scope_386 = writer.prefix("SnapshotType");
    if let Some(var_387) = &input.snapshot_type {
        scope_386.string(var_387);
    }
    #[allow(unused_mut)]
    let mut scope_388 = writer.prefix("Filters");
    if let Some(var_389) = &input.filters {
        let mut list_391 = scope_388.start_list(false, Some("Filter"));
        for item_390 in var_389 {
            #[allow(unused_mut)]
            let mut entry_392 = list_391.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_392, item_390);
        }
        list_391.finish();
    }
    #[allow(unused_mut)]
    let mut scope_393 = writer.prefix("MaxRecords");
    if let Some(var_394) = &input.max_records {
        scope_393.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_394).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_395 = writer.prefix("Marker");
    if let Some(var_396) = &input.marker {
        scope_395.string(var_396);
    }
    #[allow(unused_mut)]
    let mut scope_397 = writer.prefix("IncludeShared");
    if input.include_shared {
        scope_397.boolean(input.include_shared);
    }
    #[allow(unused_mut)]
    let mut scope_398 = writer.prefix("IncludePublic");
    if input.include_public {
        scope_398.boolean(input.include_public);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_engine_versions(
    input: &crate::input::DescribeDbEngineVersionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeDBEngineVersions", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_399 = writer.prefix("Engine");
    if let Some(var_400) = &input.engine {
        scope_399.string(var_400);
    }
    #[allow(unused_mut)]
    let mut scope_401 = writer.prefix("EngineVersion");
    if let Some(var_402) = &input.engine_version {
        scope_401.string(var_402);
    }
    #[allow(unused_mut)]
    let mut scope_403 = writer.prefix("DBParameterGroupFamily");
    if let Some(var_404) = &input.db_parameter_group_family {
        scope_403.string(var_404);
    }
    #[allow(unused_mut)]
    let mut scope_405 = writer.prefix("Filters");
    if let Some(var_406) = &input.filters {
        let mut list_408 = scope_405.start_list(false, Some("Filter"));
        for item_407 in var_406 {
            #[allow(unused_mut)]
            let mut entry_409 = list_408.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_409, item_407);
        }
        list_408.finish();
    }
    #[allow(unused_mut)]
    let mut scope_410 = writer.prefix("MaxRecords");
    if let Some(var_411) = &input.max_records {
        scope_410.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_411).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_412 = writer.prefix("Marker");
    if let Some(var_413) = &input.marker {
        scope_412.string(var_413);
    }
    #[allow(unused_mut)]
    let mut scope_414 = writer.prefix("DefaultOnly");
    if input.default_only {
        scope_414.boolean(input.default_only);
    }
    #[allow(unused_mut)]
    let mut scope_415 = writer.prefix("ListSupportedCharacterSets");
    if let Some(var_416) = &input.list_supported_character_sets {
        scope_415.boolean(*var_416);
    }
    #[allow(unused_mut)]
    let mut scope_417 = writer.prefix("ListSupportedTimezones");
    if let Some(var_418) = &input.list_supported_timezones {
        scope_417.boolean(*var_418);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_instances(
    input: &crate::input::DescribeDbInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeDBInstances", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_419 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_420) = &input.db_instance_identifier {
        scope_419.string(var_420);
    }
    #[allow(unused_mut)]
    let mut scope_421 = writer.prefix("Filters");
    if let Some(var_422) = &input.filters {
        let mut list_424 = scope_421.start_list(false, Some("Filter"));
        for item_423 in var_422 {
            #[allow(unused_mut)]
            let mut entry_425 = list_424.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_425, item_423);
        }
        list_424.finish();
    }
    #[allow(unused_mut)]
    let mut scope_426 = writer.prefix("MaxRecords");
    if let Some(var_427) = &input.max_records {
        scope_426.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_427).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_428 = writer.prefix("Marker");
    if let Some(var_429) = &input.marker {
        scope_428.string(var_429);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_parameter_groups(
    input: &crate::input::DescribeDbParameterGroupsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeDBParameterGroups", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_430 = writer.prefix("DBParameterGroupName");
    if let Some(var_431) = &input.db_parameter_group_name {
        scope_430.string(var_431);
    }
    #[allow(unused_mut)]
    let mut scope_432 = writer.prefix("Filters");
    if let Some(var_433) = &input.filters {
        let mut list_435 = scope_432.start_list(false, Some("Filter"));
        for item_434 in var_433 {
            #[allow(unused_mut)]
            let mut entry_436 = list_435.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_436, item_434);
        }
        list_435.finish();
    }
    #[allow(unused_mut)]
    let mut scope_437 = writer.prefix("MaxRecords");
    if let Some(var_438) = &input.max_records {
        scope_437.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_438).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_439 = writer.prefix("Marker");
    if let Some(var_440) = &input.marker {
        scope_439.string(var_440);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_parameters(
    input: &crate::input::DescribeDbParametersInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeDBParameters", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_441 = writer.prefix("DBParameterGroupName");
    if let Some(var_442) = &input.db_parameter_group_name {
        scope_441.string(var_442);
    }
    #[allow(unused_mut)]
    let mut scope_443 = writer.prefix("Source");
    if let Some(var_444) = &input.source {
        scope_443.string(var_444);
    }
    #[allow(unused_mut)]
    let mut scope_445 = writer.prefix("Filters");
    if let Some(var_446) = &input.filters {
        let mut list_448 = scope_445.start_list(false, Some("Filter"));
        for item_447 in var_446 {
            #[allow(unused_mut)]
            let mut entry_449 = list_448.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_449, item_447);
        }
        list_448.finish();
    }
    #[allow(unused_mut)]
    let mut scope_450 = writer.prefix("MaxRecords");
    if let Some(var_451) = &input.max_records {
        scope_450.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_451).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_452 = writer.prefix("Marker");
    if let Some(var_453) = &input.marker {
        scope_452.string(var_453);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_subnet_groups(
    input: &crate::input::DescribeDbSubnetGroupsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeDBSubnetGroups", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_454 = writer.prefix("DBSubnetGroupName");
    if let Some(var_455) = &input.db_subnet_group_name {
        scope_454.string(var_455);
    }
    #[allow(unused_mut)]
    let mut scope_456 = writer.prefix("Filters");
    if let Some(var_457) = &input.filters {
        let mut list_459 = scope_456.start_list(false, Some("Filter"));
        for item_458 in var_457 {
            #[allow(unused_mut)]
            let mut entry_460 = list_459.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_460, item_458);
        }
        list_459.finish();
    }
    #[allow(unused_mut)]
    let mut scope_461 = writer.prefix("MaxRecords");
    if let Some(var_462) = &input.max_records {
        scope_461.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_462).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_463 = writer.prefix("Marker");
    if let Some(var_464) = &input.marker {
        scope_463.string(var_464);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_engine_default_cluster_parameters(
    input: &crate::input::DescribeEngineDefaultClusterParametersInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeEngineDefaultClusterParameters",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_465 = writer.prefix("DBParameterGroupFamily");
    if let Some(var_466) = &input.db_parameter_group_family {
        scope_465.string(var_466);
    }
    #[allow(unused_mut)]
    let mut scope_467 = writer.prefix("Filters");
    if let Some(var_468) = &input.filters {
        let mut list_470 = scope_467.start_list(false, Some("Filter"));
        for item_469 in var_468 {
            #[allow(unused_mut)]
            let mut entry_471 = list_470.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_471, item_469);
        }
        list_470.finish();
    }
    #[allow(unused_mut)]
    let mut scope_472 = writer.prefix("MaxRecords");
    if let Some(var_473) = &input.max_records {
        scope_472.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_473).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_474 = writer.prefix("Marker");
    if let Some(var_475) = &input.marker {
        scope_474.string(var_475);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_engine_default_parameters(
    input: &crate::input::DescribeEngineDefaultParametersInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeEngineDefaultParameters", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_476 = writer.prefix("DBParameterGroupFamily");
    if let Some(var_477) = &input.db_parameter_group_family {
        scope_476.string(var_477);
    }
    #[allow(unused_mut)]
    let mut scope_478 = writer.prefix("Filters");
    if let Some(var_479) = &input.filters {
        let mut list_481 = scope_478.start_list(false, Some("Filter"));
        for item_480 in var_479 {
            #[allow(unused_mut)]
            let mut entry_482 = list_481.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_482, item_480);
        }
        list_481.finish();
    }
    #[allow(unused_mut)]
    let mut scope_483 = writer.prefix("MaxRecords");
    if let Some(var_484) = &input.max_records {
        scope_483.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_484).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_485 = writer.prefix("Marker");
    if let Some(var_486) = &input.marker {
        scope_485.string(var_486);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_event_categories(
    input: &crate::input::DescribeEventCategoriesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeEventCategories", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_487 = writer.prefix("SourceType");
    if let Some(var_488) = &input.source_type {
        scope_487.string(var_488);
    }
    #[allow(unused_mut)]
    let mut scope_489 = writer.prefix("Filters");
    if let Some(var_490) = &input.filters {
        let mut list_492 = scope_489.start_list(false, Some("Filter"));
        for item_491 in var_490 {
            #[allow(unused_mut)]
            let mut entry_493 = list_492.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_493, item_491);
        }
        list_492.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_events(
    input: &crate::input::DescribeEventsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeEvents", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_494 = writer.prefix("SourceIdentifier");
    if let Some(var_495) = &input.source_identifier {
        scope_494.string(var_495);
    }
    #[allow(unused_mut)]
    let mut scope_496 = writer.prefix("SourceType");
    if let Some(var_497) = &input.source_type {
        scope_496.string(var_497.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_498 = writer.prefix("StartTime");
    if let Some(var_499) = &input.start_time {
        scope_498.instant(var_499, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_500 = writer.prefix("EndTime");
    if let Some(var_501) = &input.end_time {
        scope_500.instant(var_501, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_502 = writer.prefix("Duration");
    if let Some(var_503) = &input.duration {
        scope_502.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_503).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_504 = writer.prefix("EventCategories");
    if let Some(var_505) = &input.event_categories {
        let mut list_507 = scope_504.start_list(false, Some("EventCategory"));
        for item_506 in var_505 {
            #[allow(unused_mut)]
            let mut entry_508 = list_507.entry();
            entry_508.string(item_506);
        }
        list_507.finish();
    }
    #[allow(unused_mut)]
    let mut scope_509 = writer.prefix("Filters");
    if let Some(var_510) = &input.filters {
        let mut list_512 = scope_509.start_list(false, Some("Filter"));
        for item_511 in var_510 {
            #[allow(unused_mut)]
            let mut entry_513 = list_512.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_513, item_511);
        }
        list_512.finish();
    }
    #[allow(unused_mut)]
    let mut scope_514 = writer.prefix("MaxRecords");
    if let Some(var_515) = &input.max_records {
        scope_514.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_515).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_516 = writer.prefix("Marker");
    if let Some(var_517) = &input.marker {
        scope_516.string(var_517);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_event_subscriptions(
    input: &crate::input::DescribeEventSubscriptionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeEventSubscriptions", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_518 = writer.prefix("SubscriptionName");
    if let Some(var_519) = &input.subscription_name {
        scope_518.string(var_519);
    }
    #[allow(unused_mut)]
    let mut scope_520 = writer.prefix("Filters");
    if let Some(var_521) = &input.filters {
        let mut list_523 = scope_520.start_list(false, Some("Filter"));
        for item_522 in var_521 {
            #[allow(unused_mut)]
            let mut entry_524 = list_523.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_524, item_522);
        }
        list_523.finish();
    }
    #[allow(unused_mut)]
    let mut scope_525 = writer.prefix("MaxRecords");
    if let Some(var_526) = &input.max_records {
        scope_525.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_526).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_527 = writer.prefix("Marker");
    if let Some(var_528) = &input.marker {
        scope_527.string(var_528);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_orderable_db_instance_options(
    input: &crate::input::DescribeOrderableDbInstanceOptionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeOrderableDBInstanceOptions",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_529 = writer.prefix("Engine");
    if let Some(var_530) = &input.engine {
        scope_529.string(var_530);
    }
    #[allow(unused_mut)]
    let mut scope_531 = writer.prefix("EngineVersion");
    if let Some(var_532) = &input.engine_version {
        scope_531.string(var_532);
    }
    #[allow(unused_mut)]
    let mut scope_533 = writer.prefix("DBInstanceClass");
    if let Some(var_534) = &input.db_instance_class {
        scope_533.string(var_534);
    }
    #[allow(unused_mut)]
    let mut scope_535 = writer.prefix("LicenseModel");
    if let Some(var_536) = &input.license_model {
        scope_535.string(var_536);
    }
    #[allow(unused_mut)]
    let mut scope_537 = writer.prefix("Vpc");
    if let Some(var_538) = &input.vpc {
        scope_537.boolean(*var_538);
    }
    #[allow(unused_mut)]
    let mut scope_539 = writer.prefix("Filters");
    if let Some(var_540) = &input.filters {
        let mut list_542 = scope_539.start_list(false, Some("Filter"));
        for item_541 in var_540 {
            #[allow(unused_mut)]
            let mut entry_543 = list_542.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_543, item_541);
        }
        list_542.finish();
    }
    #[allow(unused_mut)]
    let mut scope_544 = writer.prefix("MaxRecords");
    if let Some(var_545) = &input.max_records {
        scope_544.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_545).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_546 = writer.prefix("Marker");
    if let Some(var_547) = &input.marker {
        scope_546.string(var_547);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_pending_maintenance_actions(
    input: &crate::input::DescribePendingMaintenanceActionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribePendingMaintenanceActions", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_548 = writer.prefix("ResourceIdentifier");
    if let Some(var_549) = &input.resource_identifier {
        scope_548.string(var_549);
    }
    #[allow(unused_mut)]
    let mut scope_550 = writer.prefix("Filters");
    if let Some(var_551) = &input.filters {
        let mut list_553 = scope_550.start_list(false, Some("Filter"));
        for item_552 in var_551 {
            #[allow(unused_mut)]
            let mut entry_554 = list_553.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_554, item_552);
        }
        list_553.finish();
    }
    #[allow(unused_mut)]
    let mut scope_555 = writer.prefix("Marker");
    if let Some(var_556) = &input.marker {
        scope_555.string(var_556);
    }
    #[allow(unused_mut)]
    let mut scope_557 = writer.prefix("MaxRecords");
    if let Some(var_558) = &input.max_records {
        scope_557.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_558).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_valid_db_instance_modifications(
    input: &crate::input::DescribeValidDbInstanceModificationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeValidDBInstanceModifications",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_559 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_560) = &input.db_instance_identifier {
        scope_559.string(var_560);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_failover_db_cluster(
    input: &crate::input::FailoverDbClusterInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "FailoverDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_561 = writer.prefix("DBClusterIdentifier");
    if let Some(var_562) = &input.db_cluster_identifier {
        scope_561.string(var_562);
    }
    #[allow(unused_mut)]
    let mut scope_563 = writer.prefix("TargetDBInstanceIdentifier");
    if let Some(var_564) = &input.target_db_instance_identifier {
        scope_563.string(var_564);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_tags_for_resource(
    input: &crate::input::ListTagsForResourceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ListTagsForResource", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_565 = writer.prefix("ResourceName");
    if let Some(var_566) = &input.resource_name {
        scope_565.string(var_566);
    }
    #[allow(unused_mut)]
    let mut scope_567 = writer.prefix("Filters");
    if let Some(var_568) = &input.filters {
        let mut list_570 = scope_567.start_list(false, Some("Filter"));
        for item_569 in var_568 {
            #[allow(unused_mut)]
            let mut entry_571 = list_570.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_571, item_569);
        }
        list_570.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_cluster(
    input: &crate::input::ModifyDbClusterInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_572 = writer.prefix("DBClusterIdentifier");
    if let Some(var_573) = &input.db_cluster_identifier {
        scope_572.string(var_573);
    }
    #[allow(unused_mut)]
    let mut scope_574 = writer.prefix("NewDBClusterIdentifier");
    if let Some(var_575) = &input.new_db_cluster_identifier {
        scope_574.string(var_575);
    }
    #[allow(unused_mut)]
    let mut scope_576 = writer.prefix("ApplyImmediately");
    if input.apply_immediately {
        scope_576.boolean(input.apply_immediately);
    }
    #[allow(unused_mut)]
    let mut scope_577 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_578) = &input.backup_retention_period {
        scope_577.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_578).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_579 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_580) = &input.db_cluster_parameter_group_name {
        scope_579.string(var_580);
    }
    #[allow(unused_mut)]
    let mut scope_581 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_582) = &input.vpc_security_group_ids {
        let mut list_584 = scope_581.start_list(false, Some("VpcSecurityGroupId"));
        for item_583 in var_582 {
            #[allow(unused_mut)]
            let mut entry_585 = list_584.entry();
            entry_585.string(item_583);
        }
        list_584.finish();
    }
    #[allow(unused_mut)]
    let mut scope_586 = writer.prefix("Port");
    if let Some(var_587) = &input.port {
        scope_586.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_587).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_588 = writer.prefix("MasterUserPassword");
    if let Some(var_589) = &input.master_user_password {
        scope_588.string(var_589);
    }
    #[allow(unused_mut)]
    let mut scope_590 = writer.prefix("OptionGroupName");
    if let Some(var_591) = &input.option_group_name {
        scope_590.string(var_591);
    }
    #[allow(unused_mut)]
    let mut scope_592 = writer.prefix("PreferredBackupWindow");
    if let Some(var_593) = &input.preferred_backup_window {
        scope_592.string(var_593);
    }
    #[allow(unused_mut)]
    let mut scope_594 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_595) = &input.preferred_maintenance_window {
        scope_594.string(var_595);
    }
    #[allow(unused_mut)]
    let mut scope_596 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_597) = &input.enable_iam_database_authentication {
        scope_596.boolean(*var_597);
    }
    #[allow(unused_mut)]
    let mut scope_598 = writer.prefix("CloudwatchLogsExportConfiguration");
    if let Some(var_599) = &input.cloudwatch_logs_export_configuration {
        crate::query_ser::serialize_structure_crate_model_cloudwatch_logs_export_configuration(
            scope_598, var_599,
        );
    }
    #[allow(unused_mut)]
    let mut scope_600 = writer.prefix("EngineVersion");
    if let Some(var_601) = &input.engine_version {
        scope_600.string(var_601);
    }
    #[allow(unused_mut)]
    let mut scope_602 = writer.prefix("DeletionProtection");
    if let Some(var_603) = &input.deletion_protection {
        scope_602.boolean(*var_603);
    }
    #[allow(unused_mut)]
    let mut scope_604 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_605) = &input.copy_tags_to_snapshot {
        scope_604.boolean(*var_605);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_cluster_endpoint(
    input: &crate::input::ModifyDbClusterEndpointInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyDBClusterEndpoint", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_606 = writer.prefix("DBClusterEndpointIdentifier");
    if let Some(var_607) = &input.db_cluster_endpoint_identifier {
        scope_606.string(var_607);
    }
    #[allow(unused_mut)]
    let mut scope_608 = writer.prefix("EndpointType");
    if let Some(var_609) = &input.endpoint_type {
        scope_608.string(var_609);
    }
    #[allow(unused_mut)]
    let mut scope_610 = writer.prefix("StaticMembers");
    if let Some(var_611) = &input.static_members {
        let mut list_613 = scope_610.start_list(false, None);
        for item_612 in var_611 {
            #[allow(unused_mut)]
            let mut entry_614 = list_613.entry();
            entry_614.string(item_612);
        }
        list_613.finish();
    }
    #[allow(unused_mut)]
    let mut scope_615 = writer.prefix("ExcludedMembers");
    if let Some(var_616) = &input.excluded_members {
        let mut list_618 = scope_615.start_list(false, None);
        for item_617 in var_616 {
            #[allow(unused_mut)]
            let mut entry_619 = list_618.entry();
            entry_619.string(item_617);
        }
        list_618.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_cluster_parameter_group(
    input: &crate::input::ModifyDbClusterParameterGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyDBClusterParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_620 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_621) = &input.db_cluster_parameter_group_name {
        scope_620.string(var_621);
    }
    #[allow(unused_mut)]
    let mut scope_622 = writer.prefix("Parameters");
    if let Some(var_623) = &input.parameters {
        let mut list_625 = scope_622.start_list(false, Some("Parameter"));
        for item_624 in var_623 {
            #[allow(unused_mut)]
            let mut entry_626 = list_625.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_626, item_624);
        }
        list_625.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_cluster_snapshot_attribute(
    input: &crate::input::ModifyDbClusterSnapshotAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyDBClusterSnapshotAttribute", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_627 = writer.prefix("DBClusterSnapshotIdentifier");
    if let Some(var_628) = &input.db_cluster_snapshot_identifier {
        scope_627.string(var_628);
    }
    #[allow(unused_mut)]
    let mut scope_629 = writer.prefix("AttributeName");
    if let Some(var_630) = &input.attribute_name {
        scope_629.string(var_630);
    }
    #[allow(unused_mut)]
    let mut scope_631 = writer.prefix("ValuesToAdd");
    if let Some(var_632) = &input.values_to_add {
        let mut list_634 = scope_631.start_list(false, Some("AttributeValue"));
        for item_633 in var_632 {
            #[allow(unused_mut)]
            let mut entry_635 = list_634.entry();
            entry_635.string(item_633);
        }
        list_634.finish();
    }
    #[allow(unused_mut)]
    let mut scope_636 = writer.prefix("ValuesToRemove");
    if let Some(var_637) = &input.values_to_remove {
        let mut list_639 = scope_636.start_list(false, Some("AttributeValue"));
        for item_638 in var_637 {
            #[allow(unused_mut)]
            let mut entry_640 = list_639.entry();
            entry_640.string(item_638);
        }
        list_639.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_instance(
    input: &crate::input::ModifyDbInstanceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyDBInstance", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_641 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_642) = &input.db_instance_identifier {
        scope_641.string(var_642);
    }
    #[allow(unused_mut)]
    let mut scope_643 = writer.prefix("AllocatedStorage");
    if let Some(var_644) = &input.allocated_storage {
        scope_643.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_644).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_645 = writer.prefix("DBInstanceClass");
    if let Some(var_646) = &input.db_instance_class {
        scope_645.string(var_646);
    }
    #[allow(unused_mut)]
    let mut scope_647 = writer.prefix("DBSubnetGroupName");
    if let Some(var_648) = &input.db_subnet_group_name {
        scope_647.string(var_648);
    }
    #[allow(unused_mut)]
    let mut scope_649 = writer.prefix("DBSecurityGroups");
    if let Some(var_650) = &input.db_security_groups {
        let mut list_652 = scope_649.start_list(false, Some("DBSecurityGroupName"));
        for item_651 in var_650 {
            #[allow(unused_mut)]
            let mut entry_653 = list_652.entry();
            entry_653.string(item_651);
        }
        list_652.finish();
    }
    #[allow(unused_mut)]
    let mut scope_654 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_655) = &input.vpc_security_group_ids {
        let mut list_657 = scope_654.start_list(false, Some("VpcSecurityGroupId"));
        for item_656 in var_655 {
            #[allow(unused_mut)]
            let mut entry_658 = list_657.entry();
            entry_658.string(item_656);
        }
        list_657.finish();
    }
    #[allow(unused_mut)]
    let mut scope_659 = writer.prefix("ApplyImmediately");
    if input.apply_immediately {
        scope_659.boolean(input.apply_immediately);
    }
    #[allow(unused_mut)]
    let mut scope_660 = writer.prefix("MasterUserPassword");
    if let Some(var_661) = &input.master_user_password {
        scope_660.string(var_661);
    }
    #[allow(unused_mut)]
    let mut scope_662 = writer.prefix("DBParameterGroupName");
    if let Some(var_663) = &input.db_parameter_group_name {
        scope_662.string(var_663);
    }
    #[allow(unused_mut)]
    let mut scope_664 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_665) = &input.backup_retention_period {
        scope_664.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_665).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_666 = writer.prefix("PreferredBackupWindow");
    if let Some(var_667) = &input.preferred_backup_window {
        scope_666.string(var_667);
    }
    #[allow(unused_mut)]
    let mut scope_668 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_669) = &input.preferred_maintenance_window {
        scope_668.string(var_669);
    }
    #[allow(unused_mut)]
    let mut scope_670 = writer.prefix("MultiAZ");
    if let Some(var_671) = &input.multi_az {
        scope_670.boolean(*var_671);
    }
    #[allow(unused_mut)]
    let mut scope_672 = writer.prefix("EngineVersion");
    if let Some(var_673) = &input.engine_version {
        scope_672.string(var_673);
    }
    #[allow(unused_mut)]
    let mut scope_674 = writer.prefix("AllowMajorVersionUpgrade");
    if input.allow_major_version_upgrade {
        scope_674.boolean(input.allow_major_version_upgrade);
    }
    #[allow(unused_mut)]
    let mut scope_675 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_676) = &input.auto_minor_version_upgrade {
        scope_675.boolean(*var_676);
    }
    #[allow(unused_mut)]
    let mut scope_677 = writer.prefix("LicenseModel");
    if let Some(var_678) = &input.license_model {
        scope_677.string(var_678);
    }
    #[allow(unused_mut)]
    let mut scope_679 = writer.prefix("Iops");
    if let Some(var_680) = &input.iops {
        scope_679.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_680).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_681 = writer.prefix("OptionGroupName");
    if let Some(var_682) = &input.option_group_name {
        scope_681.string(var_682);
    }
    #[allow(unused_mut)]
    let mut scope_683 = writer.prefix("NewDBInstanceIdentifier");
    if let Some(var_684) = &input.new_db_instance_identifier {
        scope_683.string(var_684);
    }
    #[allow(unused_mut)]
    let mut scope_685 = writer.prefix("StorageType");
    if let Some(var_686) = &input.storage_type {
        scope_685.string(var_686);
    }
    #[allow(unused_mut)]
    let mut scope_687 = writer.prefix("TdeCredentialArn");
    if let Some(var_688) = &input.tde_credential_arn {
        scope_687.string(var_688);
    }
    #[allow(unused_mut)]
    let mut scope_689 = writer.prefix("TdeCredentialPassword");
    if let Some(var_690) = &input.tde_credential_password {
        scope_689.string(var_690);
    }
    #[allow(unused_mut)]
    let mut scope_691 = writer.prefix("CACertificateIdentifier");
    if let Some(var_692) = &input.ca_certificate_identifier {
        scope_691.string(var_692);
    }
    #[allow(unused_mut)]
    let mut scope_693 = writer.prefix("Domain");
    if let Some(var_694) = &input.domain {
        scope_693.string(var_694);
    }
    #[allow(unused_mut)]
    let mut scope_695 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_696) = &input.copy_tags_to_snapshot {
        scope_695.boolean(*var_696);
    }
    #[allow(unused_mut)]
    let mut scope_697 = writer.prefix("MonitoringInterval");
    if let Some(var_698) = &input.monitoring_interval {
        scope_697.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_698).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_699 = writer.prefix("DBPortNumber");
    if let Some(var_700) = &input.db_port_number {
        scope_699.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_700).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_701 = writer.prefix("PubliclyAccessible");
    if let Some(var_702) = &input.publicly_accessible {
        scope_701.boolean(*var_702);
    }
    #[allow(unused_mut)]
    let mut scope_703 = writer.prefix("MonitoringRoleArn");
    if let Some(var_704) = &input.monitoring_role_arn {
        scope_703.string(var_704);
    }
    #[allow(unused_mut)]
    let mut scope_705 = writer.prefix("DomainIAMRoleName");
    if let Some(var_706) = &input.domain_iam_role_name {
        scope_705.string(var_706);
    }
    #[allow(unused_mut)]
    let mut scope_707 = writer.prefix("PromotionTier");
    if let Some(var_708) = &input.promotion_tier {
        scope_707.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_708).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_709 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_710) = &input.enable_iam_database_authentication {
        scope_709.boolean(*var_710);
    }
    #[allow(unused_mut)]
    let mut scope_711 = writer.prefix("EnablePerformanceInsights");
    if let Some(var_712) = &input.enable_performance_insights {
        scope_711.boolean(*var_712);
    }
    #[allow(unused_mut)]
    let mut scope_713 = writer.prefix("PerformanceInsightsKMSKeyId");
    if let Some(var_714) = &input.performance_insights_kms_key_id {
        scope_713.string(var_714);
    }
    #[allow(unused_mut)]
    let mut scope_715 = writer.prefix("CloudwatchLogsExportConfiguration");
    if let Some(var_716) = &input.cloudwatch_logs_export_configuration {
        crate::query_ser::serialize_structure_crate_model_cloudwatch_logs_export_configuration(
            scope_715, var_716,
        );
    }
    #[allow(unused_mut)]
    let mut scope_717 = writer.prefix("DeletionProtection");
    if let Some(var_718) = &input.deletion_protection {
        scope_717.boolean(*var_718);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_parameter_group(
    input: &crate::input::ModifyDbParameterGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyDBParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_719 = writer.prefix("DBParameterGroupName");
    if let Some(var_720) = &input.db_parameter_group_name {
        scope_719.string(var_720);
    }
    #[allow(unused_mut)]
    let mut scope_721 = writer.prefix("Parameters");
    if let Some(var_722) = &input.parameters {
        let mut list_724 = scope_721.start_list(false, Some("Parameter"));
        for item_723 in var_722 {
            #[allow(unused_mut)]
            let mut entry_725 = list_724.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_725, item_723);
        }
        list_724.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_subnet_group(
    input: &crate::input::ModifyDbSubnetGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyDBSubnetGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_726 = writer.prefix("DBSubnetGroupName");
    if let Some(var_727) = &input.db_subnet_group_name {
        scope_726.string(var_727);
    }
    #[allow(unused_mut)]
    let mut scope_728 = writer.prefix("DBSubnetGroupDescription");
    if let Some(var_729) = &input.db_subnet_group_description {
        scope_728.string(var_729);
    }
    #[allow(unused_mut)]
    let mut scope_730 = writer.prefix("SubnetIds");
    if let Some(var_731) = &input.subnet_ids {
        let mut list_733 = scope_730.start_list(false, Some("SubnetIdentifier"));
        for item_732 in var_731 {
            #[allow(unused_mut)]
            let mut entry_734 = list_733.entry();
            entry_734.string(item_732);
        }
        list_733.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_event_subscription(
    input: &crate::input::ModifyEventSubscriptionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyEventSubscription", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_735 = writer.prefix("SubscriptionName");
    if let Some(var_736) = &input.subscription_name {
        scope_735.string(var_736);
    }
    #[allow(unused_mut)]
    let mut scope_737 = writer.prefix("SnsTopicArn");
    if let Some(var_738) = &input.sns_topic_arn {
        scope_737.string(var_738);
    }
    #[allow(unused_mut)]
    let mut scope_739 = writer.prefix("SourceType");
    if let Some(var_740) = &input.source_type {
        scope_739.string(var_740);
    }
    #[allow(unused_mut)]
    let mut scope_741 = writer.prefix("EventCategories");
    if let Some(var_742) = &input.event_categories {
        let mut list_744 = scope_741.start_list(false, Some("EventCategory"));
        for item_743 in var_742 {
            #[allow(unused_mut)]
            let mut entry_745 = list_744.entry();
            entry_745.string(item_743);
        }
        list_744.finish();
    }
    #[allow(unused_mut)]
    let mut scope_746 = writer.prefix("Enabled");
    if let Some(var_747) = &input.enabled {
        scope_746.boolean(*var_747);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_promote_read_replica_db_cluster(
    input: &crate::input::PromoteReadReplicaDbClusterInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "PromoteReadReplicaDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_748 = writer.prefix("DBClusterIdentifier");
    if let Some(var_749) = &input.db_cluster_identifier {
        scope_748.string(var_749);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reboot_db_instance(
    input: &crate::input::RebootDbInstanceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "RebootDBInstance", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_750 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_751) = &input.db_instance_identifier {
        scope_750.string(var_751);
    }
    #[allow(unused_mut)]
    let mut scope_752 = writer.prefix("ForceFailover");
    if let Some(var_753) = &input.force_failover {
        scope_752.boolean(*var_753);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_remove_role_from_db_cluster(
    input: &crate::input::RemoveRoleFromDbClusterInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RemoveRoleFromDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_754 = writer.prefix("DBClusterIdentifier");
    if let Some(var_755) = &input.db_cluster_identifier {
        scope_754.string(var_755);
    }
    #[allow(unused_mut)]
    let mut scope_756 = writer.prefix("RoleArn");
    if let Some(var_757) = &input.role_arn {
        scope_756.string(var_757);
    }
    #[allow(unused_mut)]
    let mut scope_758 = writer.prefix("FeatureName");
    if let Some(var_759) = &input.feature_name {
        scope_758.string(var_759);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_remove_source_identifier_from_subscription(
    input: &crate::input::RemoveSourceIdentifierFromSubscriptionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "RemoveSourceIdentifierFromSubscription",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_760 = writer.prefix("SubscriptionName");
    if let Some(var_761) = &input.subscription_name {
        scope_760.string(var_761);
    }
    #[allow(unused_mut)]
    let mut scope_762 = writer.prefix("SourceIdentifier");
    if let Some(var_763) = &input.source_identifier {
        scope_762.string(var_763);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_remove_tags_from_resource(
    input: &crate::input::RemoveTagsFromResourceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RemoveTagsFromResource", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_764 = writer.prefix("ResourceName");
    if let Some(var_765) = &input.resource_name {
        scope_764.string(var_765);
    }
    #[allow(unused_mut)]
    let mut scope_766 = writer.prefix("TagKeys");
    if let Some(var_767) = &input.tag_keys {
        let mut list_769 = scope_766.start_list(false, None);
        for item_768 in var_767 {
            #[allow(unused_mut)]
            let mut entry_770 = list_769.entry();
            entry_770.string(item_768);
        }
        list_769.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_db_cluster_parameter_group(
    input: &crate::input::ResetDbClusterParameterGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ResetDBClusterParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_771 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_772) = &input.db_cluster_parameter_group_name {
        scope_771.string(var_772);
    }
    #[allow(unused_mut)]
    let mut scope_773 = writer.prefix("ResetAllParameters");
    if input.reset_all_parameters {
        scope_773.boolean(input.reset_all_parameters);
    }
    #[allow(unused_mut)]
    let mut scope_774 = writer.prefix("Parameters");
    if let Some(var_775) = &input.parameters {
        let mut list_777 = scope_774.start_list(false, Some("Parameter"));
        for item_776 in var_775 {
            #[allow(unused_mut)]
            let mut entry_778 = list_777.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_778, item_776);
        }
        list_777.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_db_parameter_group(
    input: &crate::input::ResetDbParameterGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ResetDBParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_779 = writer.prefix("DBParameterGroupName");
    if let Some(var_780) = &input.db_parameter_group_name {
        scope_779.string(var_780);
    }
    #[allow(unused_mut)]
    let mut scope_781 = writer.prefix("ResetAllParameters");
    if input.reset_all_parameters {
        scope_781.boolean(input.reset_all_parameters);
    }
    #[allow(unused_mut)]
    let mut scope_782 = writer.prefix("Parameters");
    if let Some(var_783) = &input.parameters {
        let mut list_785 = scope_782.start_list(false, Some("Parameter"));
        for item_784 in var_783 {
            #[allow(unused_mut)]
            let mut entry_786 = list_785.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_786, item_784);
        }
        list_785.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_db_cluster_from_snapshot(
    input: &crate::input::RestoreDbClusterFromSnapshotInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RestoreDBClusterFromSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_787 = writer.prefix("AvailabilityZones");
    if let Some(var_788) = &input.availability_zones {
        let mut list_790 = scope_787.start_list(false, Some("AvailabilityZone"));
        for item_789 in var_788 {
            #[allow(unused_mut)]
            let mut entry_791 = list_790.entry();
            entry_791.string(item_789);
        }
        list_790.finish();
    }
    #[allow(unused_mut)]
    let mut scope_792 = writer.prefix("DBClusterIdentifier");
    if let Some(var_793) = &input.db_cluster_identifier {
        scope_792.string(var_793);
    }
    #[allow(unused_mut)]
    let mut scope_794 = writer.prefix("SnapshotIdentifier");
    if let Some(var_795) = &input.snapshot_identifier {
        scope_794.string(var_795);
    }
    #[allow(unused_mut)]
    let mut scope_796 = writer.prefix("Engine");
    if let Some(var_797) = &input.engine {
        scope_796.string(var_797);
    }
    #[allow(unused_mut)]
    let mut scope_798 = writer.prefix("EngineVersion");
    if let Some(var_799) = &input.engine_version {
        scope_798.string(var_799);
    }
    #[allow(unused_mut)]
    let mut scope_800 = writer.prefix("Port");
    if let Some(var_801) = &input.port {
        scope_800.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_801).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_802 = writer.prefix("DBSubnetGroupName");
    if let Some(var_803) = &input.db_subnet_group_name {
        scope_802.string(var_803);
    }
    #[allow(unused_mut)]
    let mut scope_804 = writer.prefix("DatabaseName");
    if let Some(var_805) = &input.database_name {
        scope_804.string(var_805);
    }
    #[allow(unused_mut)]
    let mut scope_806 = writer.prefix("OptionGroupName");
    if let Some(var_807) = &input.option_group_name {
        scope_806.string(var_807);
    }
    #[allow(unused_mut)]
    let mut scope_808 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_809) = &input.vpc_security_group_ids {
        let mut list_811 = scope_808.start_list(false, Some("VpcSecurityGroupId"));
        for item_810 in var_809 {
            #[allow(unused_mut)]
            let mut entry_812 = list_811.entry();
            entry_812.string(item_810);
        }
        list_811.finish();
    }
    #[allow(unused_mut)]
    let mut scope_813 = writer.prefix("Tags");
    if let Some(var_814) = &input.tags {
        let mut list_816 = scope_813.start_list(false, Some("Tag"));
        for item_815 in var_814 {
            #[allow(unused_mut)]
            let mut entry_817 = list_816.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_817, item_815);
        }
        list_816.finish();
    }
    #[allow(unused_mut)]
    let mut scope_818 = writer.prefix("KmsKeyId");
    if let Some(var_819) = &input.kms_key_id {
        scope_818.string(var_819);
    }
    #[allow(unused_mut)]
    let mut scope_820 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_821) = &input.enable_iam_database_authentication {
        scope_820.boolean(*var_821);
    }
    #[allow(unused_mut)]
    let mut scope_822 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_823) = &input.enable_cloudwatch_logs_exports {
        let mut list_825 = scope_822.start_list(false, None);
        for item_824 in var_823 {
            #[allow(unused_mut)]
            let mut entry_826 = list_825.entry();
            entry_826.string(item_824);
        }
        list_825.finish();
    }
    #[allow(unused_mut)]
    let mut scope_827 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_828) = &input.db_cluster_parameter_group_name {
        scope_827.string(var_828);
    }
    #[allow(unused_mut)]
    let mut scope_829 = writer.prefix("DeletionProtection");
    if let Some(var_830) = &input.deletion_protection {
        scope_829.boolean(*var_830);
    }
    #[allow(unused_mut)]
    let mut scope_831 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_832) = &input.copy_tags_to_snapshot {
        scope_831.boolean(*var_832);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_db_cluster_to_point_in_time(
    input: &crate::input::RestoreDbClusterToPointInTimeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RestoreDBClusterToPointInTime", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_833 = writer.prefix("DBClusterIdentifier");
    if let Some(var_834) = &input.db_cluster_identifier {
        scope_833.string(var_834);
    }
    #[allow(unused_mut)]
    let mut scope_835 = writer.prefix("RestoreType");
    if let Some(var_836) = &input.restore_type {
        scope_835.string(var_836);
    }
    #[allow(unused_mut)]
    let mut scope_837 = writer.prefix("SourceDBClusterIdentifier");
    if let Some(var_838) = &input.source_db_cluster_identifier {
        scope_837.string(var_838);
    }
    #[allow(unused_mut)]
    let mut scope_839 = writer.prefix("RestoreToTime");
    if let Some(var_840) = &input.restore_to_time {
        scope_839.instant(var_840, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_841 = writer.prefix("UseLatestRestorableTime");
    if input.use_latest_restorable_time {
        scope_841.boolean(input.use_latest_restorable_time);
    }
    #[allow(unused_mut)]
    let mut scope_842 = writer.prefix("Port");
    if let Some(var_843) = &input.port {
        scope_842.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_843).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_844 = writer.prefix("DBSubnetGroupName");
    if let Some(var_845) = &input.db_subnet_group_name {
        scope_844.string(var_845);
    }
    #[allow(unused_mut)]
    let mut scope_846 = writer.prefix("OptionGroupName");
    if let Some(var_847) = &input.option_group_name {
        scope_846.string(var_847);
    }
    #[allow(unused_mut)]
    let mut scope_848 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_849) = &input.vpc_security_group_ids {
        let mut list_851 = scope_848.start_list(false, Some("VpcSecurityGroupId"));
        for item_850 in var_849 {
            #[allow(unused_mut)]
            let mut entry_852 = list_851.entry();
            entry_852.string(item_850);
        }
        list_851.finish();
    }
    #[allow(unused_mut)]
    let mut scope_853 = writer.prefix("Tags");
    if let Some(var_854) = &input.tags {
        let mut list_856 = scope_853.start_list(false, Some("Tag"));
        for item_855 in var_854 {
            #[allow(unused_mut)]
            let mut entry_857 = list_856.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_857, item_855);
        }
        list_856.finish();
    }
    #[allow(unused_mut)]
    let mut scope_858 = writer.prefix("KmsKeyId");
    if let Some(var_859) = &input.kms_key_id {
        scope_858.string(var_859);
    }
    #[allow(unused_mut)]
    let mut scope_860 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_861) = &input.enable_iam_database_authentication {
        scope_860.boolean(*var_861);
    }
    #[allow(unused_mut)]
    let mut scope_862 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_863) = &input.enable_cloudwatch_logs_exports {
        let mut list_865 = scope_862.start_list(false, None);
        for item_864 in var_863 {
            #[allow(unused_mut)]
            let mut entry_866 = list_865.entry();
            entry_866.string(item_864);
        }
        list_865.finish();
    }
    #[allow(unused_mut)]
    let mut scope_867 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_868) = &input.db_cluster_parameter_group_name {
        scope_867.string(var_868);
    }
    #[allow(unused_mut)]
    let mut scope_869 = writer.prefix("DeletionProtection");
    if let Some(var_870) = &input.deletion_protection {
        scope_869.boolean(*var_870);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_db_cluster(
    input: &crate::input::StartDbClusterInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "StartDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_871 = writer.prefix("DBClusterIdentifier");
    if let Some(var_872) = &input.db_cluster_identifier {
        scope_871.string(var_872);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_stop_db_cluster(
    input: &crate::input::StopDbClusterInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "StopDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_873 = writer.prefix("DBClusterIdentifier");
    if let Some(var_874) = &input.db_cluster_identifier {
        scope_873.string(var_874);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}
