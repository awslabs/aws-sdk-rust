// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_add_role_to_db_cluster(
    input: &crate::input::AddRoleToDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AddRoleToDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("DBClusterIdentifier");
    if let Some(var_2) = &input.db_cluster_identifier {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("RoleArn");
    if let Some(var_4) = &input.role_arn {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("FeatureName");
    if let Some(var_6) = &input.feature_name {
        scope_5.string(var_6);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_add_source_identifier_to_subscription(
    input: &crate::input::AddSourceIdentifierToSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AddSourceIdentifierToSubscription",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("SubscriptionName");
    if let Some(var_8) = &input.subscription_name {
        scope_7.string(var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("SourceIdentifier");
    if let Some(var_10) = &input.source_identifier {
        scope_9.string(var_10);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_add_tags_to_resource(
    input: &crate::input::AddTagsToResourceInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AddTagsToResource", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("ResourceName");
    if let Some(var_12) = &input.resource_name {
        scope_11.string(var_12);
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("Tags");
    if let Some(var_14) = &input.tags {
        let mut list_16 = scope_13.start_list(false, Some("Tag"));
        for item_15 in var_14 {
            #[allow(unused_mut)]
            let mut entry_17 = list_16.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_17, item_15);
        }
        list_16.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_apply_pending_maintenance_action(
    input: &crate::input::ApplyPendingMaintenanceActionInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ApplyPendingMaintenanceAction", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_18 = writer.prefix("ResourceIdentifier");
    if let Some(var_19) = &input.resource_identifier {
        scope_18.string(var_19);
    }
    #[allow(unused_mut)]
    let mut scope_20 = writer.prefix("ApplyAction");
    if let Some(var_21) = &input.apply_action {
        scope_20.string(var_21);
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("OptInType");
    if let Some(var_23) = &input.opt_in_type {
        scope_22.string(var_23);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_db_cluster_parameter_group(
    input: &crate::input::CopyDbClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CopyDBClusterParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("SourceDBClusterParameterGroupIdentifier");
    if let Some(var_25) = &input.source_db_cluster_parameter_group_identifier {
        scope_24.string(var_25);
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("TargetDBClusterParameterGroupIdentifier");
    if let Some(var_27) = &input.target_db_cluster_parameter_group_identifier {
        scope_26.string(var_27);
    }
    #[allow(unused_mut)]
    let mut scope_28 = writer.prefix("TargetDBClusterParameterGroupDescription");
    if let Some(var_29) = &input.target_db_cluster_parameter_group_description {
        scope_28.string(var_29);
    }
    #[allow(unused_mut)]
    let mut scope_30 = writer.prefix("Tags");
    if let Some(var_31) = &input.tags {
        let mut list_33 = scope_30.start_list(false, Some("Tag"));
        for item_32 in var_31 {
            #[allow(unused_mut)]
            let mut entry_34 = list_33.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_34, item_32);
        }
        list_33.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_db_cluster_snapshot(
    input: &crate::input::CopyDbClusterSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CopyDBClusterSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_35 = writer.prefix("SourceDBClusterSnapshotIdentifier");
    if let Some(var_36) = &input.source_db_cluster_snapshot_identifier {
        scope_35.string(var_36);
    }
    #[allow(unused_mut)]
    let mut scope_37 = writer.prefix("TargetDBClusterSnapshotIdentifier");
    if let Some(var_38) = &input.target_db_cluster_snapshot_identifier {
        scope_37.string(var_38);
    }
    #[allow(unused_mut)]
    let mut scope_39 = writer.prefix("KmsKeyId");
    if let Some(var_40) = &input.kms_key_id {
        scope_39.string(var_40);
    }
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("PreSignedUrl");
    if let Some(var_42) = &input.pre_signed_url {
        scope_41.string(var_42);
    }
    #[allow(unused_mut)]
    let mut scope_43 = writer.prefix("CopyTags");
    if let Some(var_44) = &input.copy_tags {
        scope_43.boolean(*var_44);
    }
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("Tags");
    if let Some(var_46) = &input.tags {
        let mut list_48 = scope_45.start_list(false, Some("Tag"));
        for item_47 in var_46 {
            #[allow(unused_mut)]
            let mut entry_49 = list_48.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_49, item_47);
        }
        list_48.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_db_parameter_group(
    input: &crate::input::CopyDbParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CopyDBParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_50 = writer.prefix("SourceDBParameterGroupIdentifier");
    if let Some(var_51) = &input.source_db_parameter_group_identifier {
        scope_50.string(var_51);
    }
    #[allow(unused_mut)]
    let mut scope_52 = writer.prefix("TargetDBParameterGroupIdentifier");
    if let Some(var_53) = &input.target_db_parameter_group_identifier {
        scope_52.string(var_53);
    }
    #[allow(unused_mut)]
    let mut scope_54 = writer.prefix("TargetDBParameterGroupDescription");
    if let Some(var_55) = &input.target_db_parameter_group_description {
        scope_54.string(var_55);
    }
    #[allow(unused_mut)]
    let mut scope_56 = writer.prefix("Tags");
    if let Some(var_57) = &input.tags {
        let mut list_59 = scope_56.start_list(false, Some("Tag"));
        for item_58 in var_57 {
            #[allow(unused_mut)]
            let mut entry_60 = list_59.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_60, item_58);
        }
        list_59.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_cluster(
    input: &crate::input::CreateDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("AvailabilityZones");
    if let Some(var_62) = &input.availability_zones {
        let mut list_64 = scope_61.start_list(false, Some("AvailabilityZone"));
        for item_63 in var_62 {
            #[allow(unused_mut)]
            let mut entry_65 = list_64.entry();
            entry_65.string(item_63);
        }
        list_64.finish();
    }
    #[allow(unused_mut)]
    let mut scope_66 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_67) = &input.backup_retention_period {
        scope_66.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_67).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_68 = writer.prefix("CharacterSetName");
    if let Some(var_69) = &input.character_set_name {
        scope_68.string(var_69);
    }
    #[allow(unused_mut)]
    let mut scope_70 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_71) = &input.copy_tags_to_snapshot {
        scope_70.boolean(*var_71);
    }
    #[allow(unused_mut)]
    let mut scope_72 = writer.prefix("DatabaseName");
    if let Some(var_73) = &input.database_name {
        scope_72.string(var_73);
    }
    #[allow(unused_mut)]
    let mut scope_74 = writer.prefix("DBClusterIdentifier");
    if let Some(var_75) = &input.db_cluster_identifier {
        scope_74.string(var_75);
    }
    #[allow(unused_mut)]
    let mut scope_76 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_77) = &input.db_cluster_parameter_group_name {
        scope_76.string(var_77);
    }
    #[allow(unused_mut)]
    let mut scope_78 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_79) = &input.vpc_security_group_ids {
        let mut list_81 = scope_78.start_list(false, Some("VpcSecurityGroupId"));
        for item_80 in var_79 {
            #[allow(unused_mut)]
            let mut entry_82 = list_81.entry();
            entry_82.string(item_80);
        }
        list_81.finish();
    }
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("DBSubnetGroupName");
    if let Some(var_84) = &input.db_subnet_group_name {
        scope_83.string(var_84);
    }
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("Engine");
    if let Some(var_86) = &input.engine {
        scope_85.string(var_86);
    }
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("EngineVersion");
    if let Some(var_88) = &input.engine_version {
        scope_87.string(var_88);
    }
    #[allow(unused_mut)]
    let mut scope_89 = writer.prefix("Port");
    if let Some(var_90) = &input.port {
        scope_89.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_90).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_91 = writer.prefix("MasterUsername");
    if let Some(var_92) = &input.master_username {
        scope_91.string(var_92);
    }
    #[allow(unused_mut)]
    let mut scope_93 = writer.prefix("MasterUserPassword");
    if let Some(var_94) = &input.master_user_password {
        scope_93.string(var_94);
    }
    #[allow(unused_mut)]
    let mut scope_95 = writer.prefix("OptionGroupName");
    if let Some(var_96) = &input.option_group_name {
        scope_95.string(var_96);
    }
    #[allow(unused_mut)]
    let mut scope_97 = writer.prefix("PreferredBackupWindow");
    if let Some(var_98) = &input.preferred_backup_window {
        scope_97.string(var_98);
    }
    #[allow(unused_mut)]
    let mut scope_99 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_100) = &input.preferred_maintenance_window {
        scope_99.string(var_100);
    }
    #[allow(unused_mut)]
    let mut scope_101 = writer.prefix("ReplicationSourceIdentifier");
    if let Some(var_102) = &input.replication_source_identifier {
        scope_101.string(var_102);
    }
    #[allow(unused_mut)]
    let mut scope_103 = writer.prefix("Tags");
    if let Some(var_104) = &input.tags {
        let mut list_106 = scope_103.start_list(false, Some("Tag"));
        for item_105 in var_104 {
            #[allow(unused_mut)]
            let mut entry_107 = list_106.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_107, item_105);
        }
        list_106.finish();
    }
    #[allow(unused_mut)]
    let mut scope_108 = writer.prefix("StorageEncrypted");
    if let Some(var_109) = &input.storage_encrypted {
        scope_108.boolean(*var_109);
    }
    #[allow(unused_mut)]
    let mut scope_110 = writer.prefix("KmsKeyId");
    if let Some(var_111) = &input.kms_key_id {
        scope_110.string(var_111);
    }
    #[allow(unused_mut)]
    let mut scope_112 = writer.prefix("PreSignedUrl");
    if let Some(var_113) = &input.pre_signed_url {
        scope_112.string(var_113);
    }
    #[allow(unused_mut)]
    let mut scope_114 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_115) = &input.enable_iam_database_authentication {
        scope_114.boolean(*var_115);
    }
    #[allow(unused_mut)]
    let mut scope_116 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_117) = &input.enable_cloudwatch_logs_exports {
        let mut list_119 = scope_116.start_list(false, None);
        for item_118 in var_117 {
            #[allow(unused_mut)]
            let mut entry_120 = list_119.entry();
            entry_120.string(item_118);
        }
        list_119.finish();
    }
    #[allow(unused_mut)]
    let mut scope_121 = writer.prefix("DeletionProtection");
    if let Some(var_122) = &input.deletion_protection {
        scope_121.boolean(*var_122);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_cluster_endpoint(
    input: &crate::input::CreateDbClusterEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDBClusterEndpoint", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_123 = writer.prefix("DBClusterIdentifier");
    if let Some(var_124) = &input.db_cluster_identifier {
        scope_123.string(var_124);
    }
    #[allow(unused_mut)]
    let mut scope_125 = writer.prefix("DBClusterEndpointIdentifier");
    if let Some(var_126) = &input.db_cluster_endpoint_identifier {
        scope_125.string(var_126);
    }
    #[allow(unused_mut)]
    let mut scope_127 = writer.prefix("EndpointType");
    if let Some(var_128) = &input.endpoint_type {
        scope_127.string(var_128);
    }
    #[allow(unused_mut)]
    let mut scope_129 = writer.prefix("StaticMembers");
    if let Some(var_130) = &input.static_members {
        let mut list_132 = scope_129.start_list(false, None);
        for item_131 in var_130 {
            #[allow(unused_mut)]
            let mut entry_133 = list_132.entry();
            entry_133.string(item_131);
        }
        list_132.finish();
    }
    #[allow(unused_mut)]
    let mut scope_134 = writer.prefix("ExcludedMembers");
    if let Some(var_135) = &input.excluded_members {
        let mut list_137 = scope_134.start_list(false, None);
        for item_136 in var_135 {
            #[allow(unused_mut)]
            let mut entry_138 = list_137.entry();
            entry_138.string(item_136);
        }
        list_137.finish();
    }
    #[allow(unused_mut)]
    let mut scope_139 = writer.prefix("Tags");
    if let Some(var_140) = &input.tags {
        let mut list_142 = scope_139.start_list(false, Some("Tag"));
        for item_141 in var_140 {
            #[allow(unused_mut)]
            let mut entry_143 = list_142.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_143, item_141);
        }
        list_142.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_cluster_parameter_group(
    input: &crate::input::CreateDbClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDBClusterParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_144 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_145) = &input.db_cluster_parameter_group_name {
        scope_144.string(var_145);
    }
    #[allow(unused_mut)]
    let mut scope_146 = writer.prefix("DBParameterGroupFamily");
    if let Some(var_147) = &input.db_parameter_group_family {
        scope_146.string(var_147);
    }
    #[allow(unused_mut)]
    let mut scope_148 = writer.prefix("Description");
    if let Some(var_149) = &input.description {
        scope_148.string(var_149);
    }
    #[allow(unused_mut)]
    let mut scope_150 = writer.prefix("Tags");
    if let Some(var_151) = &input.tags {
        let mut list_153 = scope_150.start_list(false, Some("Tag"));
        for item_152 in var_151 {
            #[allow(unused_mut)]
            let mut entry_154 = list_153.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_154, item_152);
        }
        list_153.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_cluster_snapshot(
    input: &crate::input::CreateDbClusterSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDBClusterSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_155 = writer.prefix("DBClusterSnapshotIdentifier");
    if let Some(var_156) = &input.db_cluster_snapshot_identifier {
        scope_155.string(var_156);
    }
    #[allow(unused_mut)]
    let mut scope_157 = writer.prefix("DBClusterIdentifier");
    if let Some(var_158) = &input.db_cluster_identifier {
        scope_157.string(var_158);
    }
    #[allow(unused_mut)]
    let mut scope_159 = writer.prefix("Tags");
    if let Some(var_160) = &input.tags {
        let mut list_162 = scope_159.start_list(false, Some("Tag"));
        for item_161 in var_160 {
            #[allow(unused_mut)]
            let mut entry_163 = list_162.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_163, item_161);
        }
        list_162.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_instance(
    input: &crate::input::CreateDbInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDBInstance", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_164 = writer.prefix("DBName");
    if let Some(var_165) = &input.db_name {
        scope_164.string(var_165);
    }
    #[allow(unused_mut)]
    let mut scope_166 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_167) = &input.db_instance_identifier {
        scope_166.string(var_167);
    }
    #[allow(unused_mut)]
    let mut scope_168 = writer.prefix("AllocatedStorage");
    if let Some(var_169) = &input.allocated_storage {
        scope_168.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_169).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_170 = writer.prefix("DBInstanceClass");
    if let Some(var_171) = &input.db_instance_class {
        scope_170.string(var_171);
    }
    #[allow(unused_mut)]
    let mut scope_172 = writer.prefix("Engine");
    if let Some(var_173) = &input.engine {
        scope_172.string(var_173);
    }
    #[allow(unused_mut)]
    let mut scope_174 = writer.prefix("MasterUsername");
    if let Some(var_175) = &input.master_username {
        scope_174.string(var_175);
    }
    #[allow(unused_mut)]
    let mut scope_176 = writer.prefix("MasterUserPassword");
    if let Some(var_177) = &input.master_user_password {
        scope_176.string(var_177);
    }
    #[allow(unused_mut)]
    let mut scope_178 = writer.prefix("DBSecurityGroups");
    if let Some(var_179) = &input.db_security_groups {
        let mut list_181 = scope_178.start_list(false, Some("DBSecurityGroupName"));
        for item_180 in var_179 {
            #[allow(unused_mut)]
            let mut entry_182 = list_181.entry();
            entry_182.string(item_180);
        }
        list_181.finish();
    }
    #[allow(unused_mut)]
    let mut scope_183 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_184) = &input.vpc_security_group_ids {
        let mut list_186 = scope_183.start_list(false, Some("VpcSecurityGroupId"));
        for item_185 in var_184 {
            #[allow(unused_mut)]
            let mut entry_187 = list_186.entry();
            entry_187.string(item_185);
        }
        list_186.finish();
    }
    #[allow(unused_mut)]
    let mut scope_188 = writer.prefix("AvailabilityZone");
    if let Some(var_189) = &input.availability_zone {
        scope_188.string(var_189);
    }
    #[allow(unused_mut)]
    let mut scope_190 = writer.prefix("DBSubnetGroupName");
    if let Some(var_191) = &input.db_subnet_group_name {
        scope_190.string(var_191);
    }
    #[allow(unused_mut)]
    let mut scope_192 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_193) = &input.preferred_maintenance_window {
        scope_192.string(var_193);
    }
    #[allow(unused_mut)]
    let mut scope_194 = writer.prefix("DBParameterGroupName");
    if let Some(var_195) = &input.db_parameter_group_name {
        scope_194.string(var_195);
    }
    #[allow(unused_mut)]
    let mut scope_196 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_197) = &input.backup_retention_period {
        scope_196.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_197).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_198 = writer.prefix("PreferredBackupWindow");
    if let Some(var_199) = &input.preferred_backup_window {
        scope_198.string(var_199);
    }
    #[allow(unused_mut)]
    let mut scope_200 = writer.prefix("Port");
    if let Some(var_201) = &input.port {
        scope_200.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_201).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_202 = writer.prefix("MultiAZ");
    if let Some(var_203) = &input.multi_az {
        scope_202.boolean(*var_203);
    }
    #[allow(unused_mut)]
    let mut scope_204 = writer.prefix("EngineVersion");
    if let Some(var_205) = &input.engine_version {
        scope_204.string(var_205);
    }
    #[allow(unused_mut)]
    let mut scope_206 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_207) = &input.auto_minor_version_upgrade {
        scope_206.boolean(*var_207);
    }
    #[allow(unused_mut)]
    let mut scope_208 = writer.prefix("LicenseModel");
    if let Some(var_209) = &input.license_model {
        scope_208.string(var_209);
    }
    #[allow(unused_mut)]
    let mut scope_210 = writer.prefix("Iops");
    if let Some(var_211) = &input.iops {
        scope_210.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_211).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_212 = writer.prefix("OptionGroupName");
    if let Some(var_213) = &input.option_group_name {
        scope_212.string(var_213);
    }
    #[allow(unused_mut)]
    let mut scope_214 = writer.prefix("CharacterSetName");
    if let Some(var_215) = &input.character_set_name {
        scope_214.string(var_215);
    }
    #[allow(unused_mut)]
    let mut scope_216 = writer.prefix("PubliclyAccessible");
    if let Some(var_217) = &input.publicly_accessible {
        scope_216.boolean(*var_217);
    }
    #[allow(unused_mut)]
    let mut scope_218 = writer.prefix("Tags");
    if let Some(var_219) = &input.tags {
        let mut list_221 = scope_218.start_list(false, Some("Tag"));
        for item_220 in var_219 {
            #[allow(unused_mut)]
            let mut entry_222 = list_221.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_222, item_220);
        }
        list_221.finish();
    }
    #[allow(unused_mut)]
    let mut scope_223 = writer.prefix("DBClusterIdentifier");
    if let Some(var_224) = &input.db_cluster_identifier {
        scope_223.string(var_224);
    }
    #[allow(unused_mut)]
    let mut scope_225 = writer.prefix("StorageType");
    if let Some(var_226) = &input.storage_type {
        scope_225.string(var_226);
    }
    #[allow(unused_mut)]
    let mut scope_227 = writer.prefix("TdeCredentialArn");
    if let Some(var_228) = &input.tde_credential_arn {
        scope_227.string(var_228);
    }
    #[allow(unused_mut)]
    let mut scope_229 = writer.prefix("TdeCredentialPassword");
    if let Some(var_230) = &input.tde_credential_password {
        scope_229.string(var_230);
    }
    #[allow(unused_mut)]
    let mut scope_231 = writer.prefix("StorageEncrypted");
    if let Some(var_232) = &input.storage_encrypted {
        scope_231.boolean(*var_232);
    }
    #[allow(unused_mut)]
    let mut scope_233 = writer.prefix("KmsKeyId");
    if let Some(var_234) = &input.kms_key_id {
        scope_233.string(var_234);
    }
    #[allow(unused_mut)]
    let mut scope_235 = writer.prefix("Domain");
    if let Some(var_236) = &input.domain {
        scope_235.string(var_236);
    }
    #[allow(unused_mut)]
    let mut scope_237 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_238) = &input.copy_tags_to_snapshot {
        scope_237.boolean(*var_238);
    }
    #[allow(unused_mut)]
    let mut scope_239 = writer.prefix("MonitoringInterval");
    if let Some(var_240) = &input.monitoring_interval {
        scope_239.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_240).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_241 = writer.prefix("MonitoringRoleArn");
    if let Some(var_242) = &input.monitoring_role_arn {
        scope_241.string(var_242);
    }
    #[allow(unused_mut)]
    let mut scope_243 = writer.prefix("DomainIAMRoleName");
    if let Some(var_244) = &input.domain_iam_role_name {
        scope_243.string(var_244);
    }
    #[allow(unused_mut)]
    let mut scope_245 = writer.prefix("PromotionTier");
    if let Some(var_246) = &input.promotion_tier {
        scope_245.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_246).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_247 = writer.prefix("Timezone");
    if let Some(var_248) = &input.timezone {
        scope_247.string(var_248);
    }
    #[allow(unused_mut)]
    let mut scope_249 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_250) = &input.enable_iam_database_authentication {
        scope_249.boolean(*var_250);
    }
    #[allow(unused_mut)]
    let mut scope_251 = writer.prefix("EnablePerformanceInsights");
    if let Some(var_252) = &input.enable_performance_insights {
        scope_251.boolean(*var_252);
    }
    #[allow(unused_mut)]
    let mut scope_253 = writer.prefix("PerformanceInsightsKMSKeyId");
    if let Some(var_254) = &input.performance_insights_kms_key_id {
        scope_253.string(var_254);
    }
    #[allow(unused_mut)]
    let mut scope_255 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_256) = &input.enable_cloudwatch_logs_exports {
        let mut list_258 = scope_255.start_list(false, None);
        for item_257 in var_256 {
            #[allow(unused_mut)]
            let mut entry_259 = list_258.entry();
            entry_259.string(item_257);
        }
        list_258.finish();
    }
    #[allow(unused_mut)]
    let mut scope_260 = writer.prefix("DeletionProtection");
    if let Some(var_261) = &input.deletion_protection {
        scope_260.boolean(*var_261);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_parameter_group(
    input: &crate::input::CreateDbParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDBParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_262 = writer.prefix("DBParameterGroupName");
    if let Some(var_263) = &input.db_parameter_group_name {
        scope_262.string(var_263);
    }
    #[allow(unused_mut)]
    let mut scope_264 = writer.prefix("DBParameterGroupFamily");
    if let Some(var_265) = &input.db_parameter_group_family {
        scope_264.string(var_265);
    }
    #[allow(unused_mut)]
    let mut scope_266 = writer.prefix("Description");
    if let Some(var_267) = &input.description {
        scope_266.string(var_267);
    }
    #[allow(unused_mut)]
    let mut scope_268 = writer.prefix("Tags");
    if let Some(var_269) = &input.tags {
        let mut list_271 = scope_268.start_list(false, Some("Tag"));
        for item_270 in var_269 {
            #[allow(unused_mut)]
            let mut entry_272 = list_271.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_272, item_270);
        }
        list_271.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_subnet_group(
    input: &crate::input::CreateDbSubnetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDBSubnetGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_273 = writer.prefix("DBSubnetGroupName");
    if let Some(var_274) = &input.db_subnet_group_name {
        scope_273.string(var_274);
    }
    #[allow(unused_mut)]
    let mut scope_275 = writer.prefix("DBSubnetGroupDescription");
    if let Some(var_276) = &input.db_subnet_group_description {
        scope_275.string(var_276);
    }
    #[allow(unused_mut)]
    let mut scope_277 = writer.prefix("SubnetIds");
    if let Some(var_278) = &input.subnet_ids {
        let mut list_280 = scope_277.start_list(false, Some("SubnetIdentifier"));
        for item_279 in var_278 {
            #[allow(unused_mut)]
            let mut entry_281 = list_280.entry();
            entry_281.string(item_279);
        }
        list_280.finish();
    }
    #[allow(unused_mut)]
    let mut scope_282 = writer.prefix("Tags");
    if let Some(var_283) = &input.tags {
        let mut list_285 = scope_282.start_list(false, Some("Tag"));
        for item_284 in var_283 {
            #[allow(unused_mut)]
            let mut entry_286 = list_285.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_286, item_284);
        }
        list_285.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_event_subscription(
    input: &crate::input::CreateEventSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateEventSubscription", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_287 = writer.prefix("SubscriptionName");
    if let Some(var_288) = &input.subscription_name {
        scope_287.string(var_288);
    }
    #[allow(unused_mut)]
    let mut scope_289 = writer.prefix("SnsTopicArn");
    if let Some(var_290) = &input.sns_topic_arn {
        scope_289.string(var_290);
    }
    #[allow(unused_mut)]
    let mut scope_291 = writer.prefix("SourceType");
    if let Some(var_292) = &input.source_type {
        scope_291.string(var_292);
    }
    #[allow(unused_mut)]
    let mut scope_293 = writer.prefix("EventCategories");
    if let Some(var_294) = &input.event_categories {
        let mut list_296 = scope_293.start_list(false, Some("EventCategory"));
        for item_295 in var_294 {
            #[allow(unused_mut)]
            let mut entry_297 = list_296.entry();
            entry_297.string(item_295);
        }
        list_296.finish();
    }
    #[allow(unused_mut)]
    let mut scope_298 = writer.prefix("SourceIds");
    if let Some(var_299) = &input.source_ids {
        let mut list_301 = scope_298.start_list(false, Some("SourceId"));
        for item_300 in var_299 {
            #[allow(unused_mut)]
            let mut entry_302 = list_301.entry();
            entry_302.string(item_300);
        }
        list_301.finish();
    }
    #[allow(unused_mut)]
    let mut scope_303 = writer.prefix("Enabled");
    if let Some(var_304) = &input.enabled {
        scope_303.boolean(*var_304);
    }
    #[allow(unused_mut)]
    let mut scope_305 = writer.prefix("Tags");
    if let Some(var_306) = &input.tags {
        let mut list_308 = scope_305.start_list(false, Some("Tag"));
        for item_307 in var_306 {
            #[allow(unused_mut)]
            let mut entry_309 = list_308.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_309, item_307);
        }
        list_308.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_cluster(
    input: &crate::input::DeleteDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_310 = writer.prefix("DBClusterIdentifier");
    if let Some(var_311) = &input.db_cluster_identifier {
        scope_310.string(var_311);
    }
    #[allow(unused_mut)]
    let mut scope_312 = writer.prefix("SkipFinalSnapshot");
    if input.skip_final_snapshot {
        scope_312.boolean(input.skip_final_snapshot);
    }
    #[allow(unused_mut)]
    let mut scope_313 = writer.prefix("FinalDBSnapshotIdentifier");
    if let Some(var_314) = &input.final_db_snapshot_identifier {
        scope_313.string(var_314);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_cluster_endpoint(
    input: &crate::input::DeleteDbClusterEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBClusterEndpoint", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_315 = writer.prefix("DBClusterEndpointIdentifier");
    if let Some(var_316) = &input.db_cluster_endpoint_identifier {
        scope_315.string(var_316);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_cluster_parameter_group(
    input: &crate::input::DeleteDbClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBClusterParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_317 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_318) = &input.db_cluster_parameter_group_name {
        scope_317.string(var_318);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_cluster_snapshot(
    input: &crate::input::DeleteDbClusterSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBClusterSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_319 = writer.prefix("DBClusterSnapshotIdentifier");
    if let Some(var_320) = &input.db_cluster_snapshot_identifier {
        scope_319.string(var_320);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_instance(
    input: &crate::input::DeleteDbInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBInstance", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_321 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_322) = &input.db_instance_identifier {
        scope_321.string(var_322);
    }
    #[allow(unused_mut)]
    let mut scope_323 = writer.prefix("SkipFinalSnapshot");
    if input.skip_final_snapshot {
        scope_323.boolean(input.skip_final_snapshot);
    }
    #[allow(unused_mut)]
    let mut scope_324 = writer.prefix("FinalDBSnapshotIdentifier");
    if let Some(var_325) = &input.final_db_snapshot_identifier {
        scope_324.string(var_325);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_parameter_group(
    input: &crate::input::DeleteDbParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_326 = writer.prefix("DBParameterGroupName");
    if let Some(var_327) = &input.db_parameter_group_name {
        scope_326.string(var_327);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_subnet_group(
    input: &crate::input::DeleteDbSubnetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBSubnetGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_328 = writer.prefix("DBSubnetGroupName");
    if let Some(var_329) = &input.db_subnet_group_name {
        scope_328.string(var_329);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_event_subscription(
    input: &crate::input::DeleteEventSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteEventSubscription", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_330 = writer.prefix("SubscriptionName");
    if let Some(var_331) = &input.subscription_name {
        scope_330.string(var_331);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_endpoints(
    input: &crate::input::DescribeDbClusterEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBClusterEndpoints", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_332 = writer.prefix("DBClusterIdentifier");
    if let Some(var_333) = &input.db_cluster_identifier {
        scope_332.string(var_333);
    }
    #[allow(unused_mut)]
    let mut scope_334 = writer.prefix("DBClusterEndpointIdentifier");
    if let Some(var_335) = &input.db_cluster_endpoint_identifier {
        scope_334.string(var_335);
    }
    #[allow(unused_mut)]
    let mut scope_336 = writer.prefix("Filters");
    if let Some(var_337) = &input.filters {
        let mut list_339 = scope_336.start_list(false, Some("Filter"));
        for item_338 in var_337 {
            #[allow(unused_mut)]
            let mut entry_340 = list_339.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_340, item_338);
        }
        list_339.finish();
    }
    #[allow(unused_mut)]
    let mut scope_341 = writer.prefix("MaxRecords");
    if let Some(var_342) = &input.max_records {
        scope_341.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_342).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_343 = writer.prefix("Marker");
    if let Some(var_344) = &input.marker {
        scope_343.string(var_344);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_parameter_groups(
    input: &crate::input::DescribeDbClusterParameterGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeDBClusterParameterGroups",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_345 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_346) = &input.db_cluster_parameter_group_name {
        scope_345.string(var_346);
    }
    #[allow(unused_mut)]
    let mut scope_347 = writer.prefix("Filters");
    if let Some(var_348) = &input.filters {
        let mut list_350 = scope_347.start_list(false, Some("Filter"));
        for item_349 in var_348 {
            #[allow(unused_mut)]
            let mut entry_351 = list_350.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_351, item_349);
        }
        list_350.finish();
    }
    #[allow(unused_mut)]
    let mut scope_352 = writer.prefix("MaxRecords");
    if let Some(var_353) = &input.max_records {
        scope_352.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_353).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_354 = writer.prefix("Marker");
    if let Some(var_355) = &input.marker {
        scope_354.string(var_355);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_parameters(
    input: &crate::input::DescribeDbClusterParametersInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBClusterParameters", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_356 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_357) = &input.db_cluster_parameter_group_name {
        scope_356.string(var_357);
    }
    #[allow(unused_mut)]
    let mut scope_358 = writer.prefix("Source");
    if let Some(var_359) = &input.source {
        scope_358.string(var_359);
    }
    #[allow(unused_mut)]
    let mut scope_360 = writer.prefix("Filters");
    if let Some(var_361) = &input.filters {
        let mut list_363 = scope_360.start_list(false, Some("Filter"));
        for item_362 in var_361 {
            #[allow(unused_mut)]
            let mut entry_364 = list_363.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_364, item_362);
        }
        list_363.finish();
    }
    #[allow(unused_mut)]
    let mut scope_365 = writer.prefix("MaxRecords");
    if let Some(var_366) = &input.max_records {
        scope_365.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_366).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_367 = writer.prefix("Marker");
    if let Some(var_368) = &input.marker {
        scope_367.string(var_368);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_clusters(
    input: &crate::input::DescribeDbClustersInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBClusters", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_369 = writer.prefix("DBClusterIdentifier");
    if let Some(var_370) = &input.db_cluster_identifier {
        scope_369.string(var_370);
    }
    #[allow(unused_mut)]
    let mut scope_371 = writer.prefix("Filters");
    if let Some(var_372) = &input.filters {
        let mut list_374 = scope_371.start_list(false, Some("Filter"));
        for item_373 in var_372 {
            #[allow(unused_mut)]
            let mut entry_375 = list_374.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_375, item_373);
        }
        list_374.finish();
    }
    #[allow(unused_mut)]
    let mut scope_376 = writer.prefix("MaxRecords");
    if let Some(var_377) = &input.max_records {
        scope_376.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_377).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_378 = writer.prefix("Marker");
    if let Some(var_379) = &input.marker {
        scope_378.string(var_379);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_snapshot_attributes(
    input: &crate::input::DescribeDbClusterSnapshotAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeDBClusterSnapshotAttributes",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_380 = writer.prefix("DBClusterSnapshotIdentifier");
    if let Some(var_381) = &input.db_cluster_snapshot_identifier {
        scope_380.string(var_381);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_snapshots(
    input: &crate::input::DescribeDbClusterSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBClusterSnapshots", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_382 = writer.prefix("DBClusterIdentifier");
    if let Some(var_383) = &input.db_cluster_identifier {
        scope_382.string(var_383);
    }
    #[allow(unused_mut)]
    let mut scope_384 = writer.prefix("DBClusterSnapshotIdentifier");
    if let Some(var_385) = &input.db_cluster_snapshot_identifier {
        scope_384.string(var_385);
    }
    #[allow(unused_mut)]
    let mut scope_386 = writer.prefix("SnapshotType");
    if let Some(var_387) = &input.snapshot_type {
        scope_386.string(var_387);
    }
    #[allow(unused_mut)]
    let mut scope_388 = writer.prefix("Filters");
    if let Some(var_389) = &input.filters {
        let mut list_391 = scope_388.start_list(false, Some("Filter"));
        for item_390 in var_389 {
            #[allow(unused_mut)]
            let mut entry_392 = list_391.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_392, item_390);
        }
        list_391.finish();
    }
    #[allow(unused_mut)]
    let mut scope_393 = writer.prefix("MaxRecords");
    if let Some(var_394) = &input.max_records {
        scope_393.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_394).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_395 = writer.prefix("Marker");
    if let Some(var_396) = &input.marker {
        scope_395.string(var_396);
    }
    #[allow(unused_mut)]
    let mut scope_397 = writer.prefix("IncludeShared");
    if input.include_shared {
        scope_397.boolean(input.include_shared);
    }
    #[allow(unused_mut)]
    let mut scope_398 = writer.prefix("IncludePublic");
    if input.include_public {
        scope_398.boolean(input.include_public);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_engine_versions(
    input: &crate::input::DescribeDbEngineVersionsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBEngineVersions", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_399 = writer.prefix("Engine");
    if let Some(var_400) = &input.engine {
        scope_399.string(var_400);
    }
    #[allow(unused_mut)]
    let mut scope_401 = writer.prefix("EngineVersion");
    if let Some(var_402) = &input.engine_version {
        scope_401.string(var_402);
    }
    #[allow(unused_mut)]
    let mut scope_403 = writer.prefix("DBParameterGroupFamily");
    if let Some(var_404) = &input.db_parameter_group_family {
        scope_403.string(var_404);
    }
    #[allow(unused_mut)]
    let mut scope_405 = writer.prefix("Filters");
    if let Some(var_406) = &input.filters {
        let mut list_408 = scope_405.start_list(false, Some("Filter"));
        for item_407 in var_406 {
            #[allow(unused_mut)]
            let mut entry_409 = list_408.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_409, item_407);
        }
        list_408.finish();
    }
    #[allow(unused_mut)]
    let mut scope_410 = writer.prefix("MaxRecords");
    if let Some(var_411) = &input.max_records {
        scope_410.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_411).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_412 = writer.prefix("Marker");
    if let Some(var_413) = &input.marker {
        scope_412.string(var_413);
    }
    #[allow(unused_mut)]
    let mut scope_414 = writer.prefix("DefaultOnly");
    if input.default_only {
        scope_414.boolean(input.default_only);
    }
    #[allow(unused_mut)]
    let mut scope_415 = writer.prefix("ListSupportedCharacterSets");
    if let Some(var_416) = &input.list_supported_character_sets {
        scope_415.boolean(*var_416);
    }
    #[allow(unused_mut)]
    let mut scope_417 = writer.prefix("ListSupportedTimezones");
    if let Some(var_418) = &input.list_supported_timezones {
        scope_417.boolean(*var_418);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_instances(
    input: &crate::input::DescribeDbInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBInstances", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_419 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_420) = &input.db_instance_identifier {
        scope_419.string(var_420);
    }
    #[allow(unused_mut)]
    let mut scope_421 = writer.prefix("Filters");
    if let Some(var_422) = &input.filters {
        let mut list_424 = scope_421.start_list(false, Some("Filter"));
        for item_423 in var_422 {
            #[allow(unused_mut)]
            let mut entry_425 = list_424.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_425, item_423);
        }
        list_424.finish();
    }
    #[allow(unused_mut)]
    let mut scope_426 = writer.prefix("MaxRecords");
    if let Some(var_427) = &input.max_records {
        scope_426.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_427).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_428 = writer.prefix("Marker");
    if let Some(var_429) = &input.marker {
        scope_428.string(var_429);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_parameter_groups(
    input: &crate::input::DescribeDbParameterGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBParameterGroups", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_430 = writer.prefix("DBParameterGroupName");
    if let Some(var_431) = &input.db_parameter_group_name {
        scope_430.string(var_431);
    }
    #[allow(unused_mut)]
    let mut scope_432 = writer.prefix("Filters");
    if let Some(var_433) = &input.filters {
        let mut list_435 = scope_432.start_list(false, Some("Filter"));
        for item_434 in var_433 {
            #[allow(unused_mut)]
            let mut entry_436 = list_435.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_436, item_434);
        }
        list_435.finish();
    }
    #[allow(unused_mut)]
    let mut scope_437 = writer.prefix("MaxRecords");
    if let Some(var_438) = &input.max_records {
        scope_437.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_438).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_439 = writer.prefix("Marker");
    if let Some(var_440) = &input.marker {
        scope_439.string(var_440);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_parameters(
    input: &crate::input::DescribeDbParametersInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBParameters", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_441 = writer.prefix("DBParameterGroupName");
    if let Some(var_442) = &input.db_parameter_group_name {
        scope_441.string(var_442);
    }
    #[allow(unused_mut)]
    let mut scope_443 = writer.prefix("Source");
    if let Some(var_444) = &input.source {
        scope_443.string(var_444);
    }
    #[allow(unused_mut)]
    let mut scope_445 = writer.prefix("Filters");
    if let Some(var_446) = &input.filters {
        let mut list_448 = scope_445.start_list(false, Some("Filter"));
        for item_447 in var_446 {
            #[allow(unused_mut)]
            let mut entry_449 = list_448.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_449, item_447);
        }
        list_448.finish();
    }
    #[allow(unused_mut)]
    let mut scope_450 = writer.prefix("MaxRecords");
    if let Some(var_451) = &input.max_records {
        scope_450.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_451).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_452 = writer.prefix("Marker");
    if let Some(var_453) = &input.marker {
        scope_452.string(var_453);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_subnet_groups(
    input: &crate::input::DescribeDbSubnetGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBSubnetGroups", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_454 = writer.prefix("DBSubnetGroupName");
    if let Some(var_455) = &input.db_subnet_group_name {
        scope_454.string(var_455);
    }
    #[allow(unused_mut)]
    let mut scope_456 = writer.prefix("Filters");
    if let Some(var_457) = &input.filters {
        let mut list_459 = scope_456.start_list(false, Some("Filter"));
        for item_458 in var_457 {
            #[allow(unused_mut)]
            let mut entry_460 = list_459.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_460, item_458);
        }
        list_459.finish();
    }
    #[allow(unused_mut)]
    let mut scope_461 = writer.prefix("MaxRecords");
    if let Some(var_462) = &input.max_records {
        scope_461.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_462).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_463 = writer.prefix("Marker");
    if let Some(var_464) = &input.marker {
        scope_463.string(var_464);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_engine_default_cluster_parameters(
    input: &crate::input::DescribeEngineDefaultClusterParametersInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeEngineDefaultClusterParameters",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_465 = writer.prefix("DBParameterGroupFamily");
    if let Some(var_466) = &input.db_parameter_group_family {
        scope_465.string(var_466);
    }
    #[allow(unused_mut)]
    let mut scope_467 = writer.prefix("Filters");
    if let Some(var_468) = &input.filters {
        let mut list_470 = scope_467.start_list(false, Some("Filter"));
        for item_469 in var_468 {
            #[allow(unused_mut)]
            let mut entry_471 = list_470.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_471, item_469);
        }
        list_470.finish();
    }
    #[allow(unused_mut)]
    let mut scope_472 = writer.prefix("MaxRecords");
    if let Some(var_473) = &input.max_records {
        scope_472.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_473).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_474 = writer.prefix("Marker");
    if let Some(var_475) = &input.marker {
        scope_474.string(var_475);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_engine_default_parameters(
    input: &crate::input::DescribeEngineDefaultParametersInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeEngineDefaultParameters",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_476 = writer.prefix("DBParameterGroupFamily");
    if let Some(var_477) = &input.db_parameter_group_family {
        scope_476.string(var_477);
    }
    #[allow(unused_mut)]
    let mut scope_478 = writer.prefix("Filters");
    if let Some(var_479) = &input.filters {
        let mut list_481 = scope_478.start_list(false, Some("Filter"));
        for item_480 in var_479 {
            #[allow(unused_mut)]
            let mut entry_482 = list_481.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_482, item_480);
        }
        list_481.finish();
    }
    #[allow(unused_mut)]
    let mut scope_483 = writer.prefix("MaxRecords");
    if let Some(var_484) = &input.max_records {
        scope_483.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_484).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_485 = writer.prefix("Marker");
    if let Some(var_486) = &input.marker {
        scope_485.string(var_486);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_event_categories(
    input: &crate::input::DescribeEventCategoriesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeEventCategories", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_487 = writer.prefix("SourceType");
    if let Some(var_488) = &input.source_type {
        scope_487.string(var_488);
    }
    #[allow(unused_mut)]
    let mut scope_489 = writer.prefix("Filters");
    if let Some(var_490) = &input.filters {
        let mut list_492 = scope_489.start_list(false, Some("Filter"));
        for item_491 in var_490 {
            #[allow(unused_mut)]
            let mut entry_493 = list_492.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_493, item_491);
        }
        list_492.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_events(
    input: &crate::input::DescribeEventsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeEvents", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_494 = writer.prefix("SourceIdentifier");
    if let Some(var_495) = &input.source_identifier {
        scope_494.string(var_495);
    }
    #[allow(unused_mut)]
    let mut scope_496 = writer.prefix("SourceType");
    if let Some(var_497) = &input.source_type {
        scope_496.string(var_497.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_498 = writer.prefix("StartTime");
    if let Some(var_499) = &input.start_time {
        scope_498.instant(var_499, aws_smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_500 = writer.prefix("EndTime");
    if let Some(var_501) = &input.end_time {
        scope_500.instant(var_501, aws_smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_502 = writer.prefix("Duration");
    if let Some(var_503) = &input.duration {
        scope_502.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_503).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_504 = writer.prefix("EventCategories");
    if let Some(var_505) = &input.event_categories {
        let mut list_507 = scope_504.start_list(false, Some("EventCategory"));
        for item_506 in var_505 {
            #[allow(unused_mut)]
            let mut entry_508 = list_507.entry();
            entry_508.string(item_506);
        }
        list_507.finish();
    }
    #[allow(unused_mut)]
    let mut scope_509 = writer.prefix("Filters");
    if let Some(var_510) = &input.filters {
        let mut list_512 = scope_509.start_list(false, Some("Filter"));
        for item_511 in var_510 {
            #[allow(unused_mut)]
            let mut entry_513 = list_512.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_513, item_511);
        }
        list_512.finish();
    }
    #[allow(unused_mut)]
    let mut scope_514 = writer.prefix("MaxRecords");
    if let Some(var_515) = &input.max_records {
        scope_514.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_515).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_516 = writer.prefix("Marker");
    if let Some(var_517) = &input.marker {
        scope_516.string(var_517);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_event_subscriptions(
    input: &crate::input::DescribeEventSubscriptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeEventSubscriptions", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_518 = writer.prefix("SubscriptionName");
    if let Some(var_519) = &input.subscription_name {
        scope_518.string(var_519);
    }
    #[allow(unused_mut)]
    let mut scope_520 = writer.prefix("Filters");
    if let Some(var_521) = &input.filters {
        let mut list_523 = scope_520.start_list(false, Some("Filter"));
        for item_522 in var_521 {
            #[allow(unused_mut)]
            let mut entry_524 = list_523.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_524, item_522);
        }
        list_523.finish();
    }
    #[allow(unused_mut)]
    let mut scope_525 = writer.prefix("MaxRecords");
    if let Some(var_526) = &input.max_records {
        scope_525.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_526).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_527 = writer.prefix("Marker");
    if let Some(var_528) = &input.marker {
        scope_527.string(var_528);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_orderable_db_instance_options(
    input: &crate::input::DescribeOrderableDbInstanceOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeOrderableDBInstanceOptions",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_529 = writer.prefix("Engine");
    if let Some(var_530) = &input.engine {
        scope_529.string(var_530);
    }
    #[allow(unused_mut)]
    let mut scope_531 = writer.prefix("EngineVersion");
    if let Some(var_532) = &input.engine_version {
        scope_531.string(var_532);
    }
    #[allow(unused_mut)]
    let mut scope_533 = writer.prefix("DBInstanceClass");
    if let Some(var_534) = &input.db_instance_class {
        scope_533.string(var_534);
    }
    #[allow(unused_mut)]
    let mut scope_535 = writer.prefix("LicenseModel");
    if let Some(var_536) = &input.license_model {
        scope_535.string(var_536);
    }
    #[allow(unused_mut)]
    let mut scope_537 = writer.prefix("Vpc");
    if let Some(var_538) = &input.vpc {
        scope_537.boolean(*var_538);
    }
    #[allow(unused_mut)]
    let mut scope_539 = writer.prefix("Filters");
    if let Some(var_540) = &input.filters {
        let mut list_542 = scope_539.start_list(false, Some("Filter"));
        for item_541 in var_540 {
            #[allow(unused_mut)]
            let mut entry_543 = list_542.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_543, item_541);
        }
        list_542.finish();
    }
    #[allow(unused_mut)]
    let mut scope_544 = writer.prefix("MaxRecords");
    if let Some(var_545) = &input.max_records {
        scope_544.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_545).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_546 = writer.prefix("Marker");
    if let Some(var_547) = &input.marker {
        scope_546.string(var_547);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_pending_maintenance_actions(
    input: &crate::input::DescribePendingMaintenanceActionsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribePendingMaintenanceActions",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_548 = writer.prefix("ResourceIdentifier");
    if let Some(var_549) = &input.resource_identifier {
        scope_548.string(var_549);
    }
    #[allow(unused_mut)]
    let mut scope_550 = writer.prefix("Filters");
    if let Some(var_551) = &input.filters {
        let mut list_553 = scope_550.start_list(false, Some("Filter"));
        for item_552 in var_551 {
            #[allow(unused_mut)]
            let mut entry_554 = list_553.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_554, item_552);
        }
        list_553.finish();
    }
    #[allow(unused_mut)]
    let mut scope_555 = writer.prefix("Marker");
    if let Some(var_556) = &input.marker {
        scope_555.string(var_556);
    }
    #[allow(unused_mut)]
    let mut scope_557 = writer.prefix("MaxRecords");
    if let Some(var_558) = &input.max_records {
        scope_557.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_558).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_valid_db_instance_modifications(
    input: &crate::input::DescribeValidDbInstanceModificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeValidDBInstanceModifications",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_559 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_560) = &input.db_instance_identifier {
        scope_559.string(var_560);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_failover_db_cluster(
    input: &crate::input::FailoverDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "FailoverDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_561 = writer.prefix("DBClusterIdentifier");
    if let Some(var_562) = &input.db_cluster_identifier {
        scope_561.string(var_562);
    }
    #[allow(unused_mut)]
    let mut scope_563 = writer.prefix("TargetDBInstanceIdentifier");
    if let Some(var_564) = &input.target_db_instance_identifier {
        scope_563.string(var_564);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_tags_for_resource(
    input: &crate::input::ListTagsForResourceInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListTagsForResource", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_565 = writer.prefix("ResourceName");
    if let Some(var_566) = &input.resource_name {
        scope_565.string(var_566);
    }
    #[allow(unused_mut)]
    let mut scope_567 = writer.prefix("Filters");
    if let Some(var_568) = &input.filters {
        let mut list_570 = scope_567.start_list(false, Some("Filter"));
        for item_569 in var_568 {
            #[allow(unused_mut)]
            let mut entry_571 = list_570.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_571, item_569);
        }
        list_570.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_cluster(
    input: &crate::input::ModifyDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_572 = writer.prefix("DBClusterIdentifier");
    if let Some(var_573) = &input.db_cluster_identifier {
        scope_572.string(var_573);
    }
    #[allow(unused_mut)]
    let mut scope_574 = writer.prefix("NewDBClusterIdentifier");
    if let Some(var_575) = &input.new_db_cluster_identifier {
        scope_574.string(var_575);
    }
    #[allow(unused_mut)]
    let mut scope_576 = writer.prefix("ApplyImmediately");
    if input.apply_immediately {
        scope_576.boolean(input.apply_immediately);
    }
    #[allow(unused_mut)]
    let mut scope_577 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_578) = &input.backup_retention_period {
        scope_577.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_578).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_579 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_580) = &input.db_cluster_parameter_group_name {
        scope_579.string(var_580);
    }
    #[allow(unused_mut)]
    let mut scope_581 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_582) = &input.vpc_security_group_ids {
        let mut list_584 = scope_581.start_list(false, Some("VpcSecurityGroupId"));
        for item_583 in var_582 {
            #[allow(unused_mut)]
            let mut entry_585 = list_584.entry();
            entry_585.string(item_583);
        }
        list_584.finish();
    }
    #[allow(unused_mut)]
    let mut scope_586 = writer.prefix("Port");
    if let Some(var_587) = &input.port {
        scope_586.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_587).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_588 = writer.prefix("MasterUserPassword");
    if let Some(var_589) = &input.master_user_password {
        scope_588.string(var_589);
    }
    #[allow(unused_mut)]
    let mut scope_590 = writer.prefix("OptionGroupName");
    if let Some(var_591) = &input.option_group_name {
        scope_590.string(var_591);
    }
    #[allow(unused_mut)]
    let mut scope_592 = writer.prefix("PreferredBackupWindow");
    if let Some(var_593) = &input.preferred_backup_window {
        scope_592.string(var_593);
    }
    #[allow(unused_mut)]
    let mut scope_594 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_595) = &input.preferred_maintenance_window {
        scope_594.string(var_595);
    }
    #[allow(unused_mut)]
    let mut scope_596 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_597) = &input.enable_iam_database_authentication {
        scope_596.boolean(*var_597);
    }
    #[allow(unused_mut)]
    let mut scope_598 = writer.prefix("CloudwatchLogsExportConfiguration");
    if let Some(var_599) = &input.cloudwatch_logs_export_configuration {
        crate::query_ser::serialize_structure_crate_model_cloudwatch_logs_export_configuration(
            scope_598, var_599,
        );
    }
    #[allow(unused_mut)]
    let mut scope_600 = writer.prefix("EngineVersion");
    if let Some(var_601) = &input.engine_version {
        scope_600.string(var_601);
    }
    #[allow(unused_mut)]
    let mut scope_602 = writer.prefix("AllowMajorVersionUpgrade");
    if input.allow_major_version_upgrade {
        scope_602.boolean(input.allow_major_version_upgrade);
    }
    #[allow(unused_mut)]
    let mut scope_603 = writer.prefix("DBInstanceParameterGroupName");
    if let Some(var_604) = &input.db_instance_parameter_group_name {
        scope_603.string(var_604);
    }
    #[allow(unused_mut)]
    let mut scope_605 = writer.prefix("DeletionProtection");
    if let Some(var_606) = &input.deletion_protection {
        scope_605.boolean(*var_606);
    }
    #[allow(unused_mut)]
    let mut scope_607 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_608) = &input.copy_tags_to_snapshot {
        scope_607.boolean(*var_608);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_cluster_endpoint(
    input: &crate::input::ModifyDbClusterEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBClusterEndpoint", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_609 = writer.prefix("DBClusterEndpointIdentifier");
    if let Some(var_610) = &input.db_cluster_endpoint_identifier {
        scope_609.string(var_610);
    }
    #[allow(unused_mut)]
    let mut scope_611 = writer.prefix("EndpointType");
    if let Some(var_612) = &input.endpoint_type {
        scope_611.string(var_612);
    }
    #[allow(unused_mut)]
    let mut scope_613 = writer.prefix("StaticMembers");
    if let Some(var_614) = &input.static_members {
        let mut list_616 = scope_613.start_list(false, None);
        for item_615 in var_614 {
            #[allow(unused_mut)]
            let mut entry_617 = list_616.entry();
            entry_617.string(item_615);
        }
        list_616.finish();
    }
    #[allow(unused_mut)]
    let mut scope_618 = writer.prefix("ExcludedMembers");
    if let Some(var_619) = &input.excluded_members {
        let mut list_621 = scope_618.start_list(false, None);
        for item_620 in var_619 {
            #[allow(unused_mut)]
            let mut entry_622 = list_621.entry();
            entry_622.string(item_620);
        }
        list_621.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_cluster_parameter_group(
    input: &crate::input::ModifyDbClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBClusterParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_623 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_624) = &input.db_cluster_parameter_group_name {
        scope_623.string(var_624);
    }
    #[allow(unused_mut)]
    let mut scope_625 = writer.prefix("Parameters");
    if let Some(var_626) = &input.parameters {
        let mut list_628 = scope_625.start_list(false, Some("Parameter"));
        for item_627 in var_626 {
            #[allow(unused_mut)]
            let mut entry_629 = list_628.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_629, item_627);
        }
        list_628.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_cluster_snapshot_attribute(
    input: &crate::input::ModifyDbClusterSnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyDBClusterSnapshotAttribute",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_630 = writer.prefix("DBClusterSnapshotIdentifier");
    if let Some(var_631) = &input.db_cluster_snapshot_identifier {
        scope_630.string(var_631);
    }
    #[allow(unused_mut)]
    let mut scope_632 = writer.prefix("AttributeName");
    if let Some(var_633) = &input.attribute_name {
        scope_632.string(var_633);
    }
    #[allow(unused_mut)]
    let mut scope_634 = writer.prefix("ValuesToAdd");
    if let Some(var_635) = &input.values_to_add {
        let mut list_637 = scope_634.start_list(false, Some("AttributeValue"));
        for item_636 in var_635 {
            #[allow(unused_mut)]
            let mut entry_638 = list_637.entry();
            entry_638.string(item_636);
        }
        list_637.finish();
    }
    #[allow(unused_mut)]
    let mut scope_639 = writer.prefix("ValuesToRemove");
    if let Some(var_640) = &input.values_to_remove {
        let mut list_642 = scope_639.start_list(false, Some("AttributeValue"));
        for item_641 in var_640 {
            #[allow(unused_mut)]
            let mut entry_643 = list_642.entry();
            entry_643.string(item_641);
        }
        list_642.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_instance(
    input: &crate::input::ModifyDbInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBInstance", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_644 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_645) = &input.db_instance_identifier {
        scope_644.string(var_645);
    }
    #[allow(unused_mut)]
    let mut scope_646 = writer.prefix("AllocatedStorage");
    if let Some(var_647) = &input.allocated_storage {
        scope_646.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_647).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_648 = writer.prefix("DBInstanceClass");
    if let Some(var_649) = &input.db_instance_class {
        scope_648.string(var_649);
    }
    #[allow(unused_mut)]
    let mut scope_650 = writer.prefix("DBSubnetGroupName");
    if let Some(var_651) = &input.db_subnet_group_name {
        scope_650.string(var_651);
    }
    #[allow(unused_mut)]
    let mut scope_652 = writer.prefix("DBSecurityGroups");
    if let Some(var_653) = &input.db_security_groups {
        let mut list_655 = scope_652.start_list(false, Some("DBSecurityGroupName"));
        for item_654 in var_653 {
            #[allow(unused_mut)]
            let mut entry_656 = list_655.entry();
            entry_656.string(item_654);
        }
        list_655.finish();
    }
    #[allow(unused_mut)]
    let mut scope_657 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_658) = &input.vpc_security_group_ids {
        let mut list_660 = scope_657.start_list(false, Some("VpcSecurityGroupId"));
        for item_659 in var_658 {
            #[allow(unused_mut)]
            let mut entry_661 = list_660.entry();
            entry_661.string(item_659);
        }
        list_660.finish();
    }
    #[allow(unused_mut)]
    let mut scope_662 = writer.prefix("ApplyImmediately");
    if input.apply_immediately {
        scope_662.boolean(input.apply_immediately);
    }
    #[allow(unused_mut)]
    let mut scope_663 = writer.prefix("MasterUserPassword");
    if let Some(var_664) = &input.master_user_password {
        scope_663.string(var_664);
    }
    #[allow(unused_mut)]
    let mut scope_665 = writer.prefix("DBParameterGroupName");
    if let Some(var_666) = &input.db_parameter_group_name {
        scope_665.string(var_666);
    }
    #[allow(unused_mut)]
    let mut scope_667 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_668) = &input.backup_retention_period {
        scope_667.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_668).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_669 = writer.prefix("PreferredBackupWindow");
    if let Some(var_670) = &input.preferred_backup_window {
        scope_669.string(var_670);
    }
    #[allow(unused_mut)]
    let mut scope_671 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_672) = &input.preferred_maintenance_window {
        scope_671.string(var_672);
    }
    #[allow(unused_mut)]
    let mut scope_673 = writer.prefix("MultiAZ");
    if let Some(var_674) = &input.multi_az {
        scope_673.boolean(*var_674);
    }
    #[allow(unused_mut)]
    let mut scope_675 = writer.prefix("EngineVersion");
    if let Some(var_676) = &input.engine_version {
        scope_675.string(var_676);
    }
    #[allow(unused_mut)]
    let mut scope_677 = writer.prefix("AllowMajorVersionUpgrade");
    if input.allow_major_version_upgrade {
        scope_677.boolean(input.allow_major_version_upgrade);
    }
    #[allow(unused_mut)]
    let mut scope_678 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_679) = &input.auto_minor_version_upgrade {
        scope_678.boolean(*var_679);
    }
    #[allow(unused_mut)]
    let mut scope_680 = writer.prefix("LicenseModel");
    if let Some(var_681) = &input.license_model {
        scope_680.string(var_681);
    }
    #[allow(unused_mut)]
    let mut scope_682 = writer.prefix("Iops");
    if let Some(var_683) = &input.iops {
        scope_682.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_683).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_684 = writer.prefix("OptionGroupName");
    if let Some(var_685) = &input.option_group_name {
        scope_684.string(var_685);
    }
    #[allow(unused_mut)]
    let mut scope_686 = writer.prefix("NewDBInstanceIdentifier");
    if let Some(var_687) = &input.new_db_instance_identifier {
        scope_686.string(var_687);
    }
    #[allow(unused_mut)]
    let mut scope_688 = writer.prefix("StorageType");
    if let Some(var_689) = &input.storage_type {
        scope_688.string(var_689);
    }
    #[allow(unused_mut)]
    let mut scope_690 = writer.prefix("TdeCredentialArn");
    if let Some(var_691) = &input.tde_credential_arn {
        scope_690.string(var_691);
    }
    #[allow(unused_mut)]
    let mut scope_692 = writer.prefix("TdeCredentialPassword");
    if let Some(var_693) = &input.tde_credential_password {
        scope_692.string(var_693);
    }
    #[allow(unused_mut)]
    let mut scope_694 = writer.prefix("CACertificateIdentifier");
    if let Some(var_695) = &input.ca_certificate_identifier {
        scope_694.string(var_695);
    }
    #[allow(unused_mut)]
    let mut scope_696 = writer.prefix("Domain");
    if let Some(var_697) = &input.domain {
        scope_696.string(var_697);
    }
    #[allow(unused_mut)]
    let mut scope_698 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_699) = &input.copy_tags_to_snapshot {
        scope_698.boolean(*var_699);
    }
    #[allow(unused_mut)]
    let mut scope_700 = writer.prefix("MonitoringInterval");
    if let Some(var_701) = &input.monitoring_interval {
        scope_700.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_701).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_702 = writer.prefix("DBPortNumber");
    if let Some(var_703) = &input.db_port_number {
        scope_702.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_703).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_704 = writer.prefix("PubliclyAccessible");
    if let Some(var_705) = &input.publicly_accessible {
        scope_704.boolean(*var_705);
    }
    #[allow(unused_mut)]
    let mut scope_706 = writer.prefix("MonitoringRoleArn");
    if let Some(var_707) = &input.monitoring_role_arn {
        scope_706.string(var_707);
    }
    #[allow(unused_mut)]
    let mut scope_708 = writer.prefix("DomainIAMRoleName");
    if let Some(var_709) = &input.domain_iam_role_name {
        scope_708.string(var_709);
    }
    #[allow(unused_mut)]
    let mut scope_710 = writer.prefix("PromotionTier");
    if let Some(var_711) = &input.promotion_tier {
        scope_710.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_711).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_712 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_713) = &input.enable_iam_database_authentication {
        scope_712.boolean(*var_713);
    }
    #[allow(unused_mut)]
    let mut scope_714 = writer.prefix("EnablePerformanceInsights");
    if let Some(var_715) = &input.enable_performance_insights {
        scope_714.boolean(*var_715);
    }
    #[allow(unused_mut)]
    let mut scope_716 = writer.prefix("PerformanceInsightsKMSKeyId");
    if let Some(var_717) = &input.performance_insights_kms_key_id {
        scope_716.string(var_717);
    }
    #[allow(unused_mut)]
    let mut scope_718 = writer.prefix("CloudwatchLogsExportConfiguration");
    if let Some(var_719) = &input.cloudwatch_logs_export_configuration {
        crate::query_ser::serialize_structure_crate_model_cloudwatch_logs_export_configuration(
            scope_718, var_719,
        );
    }
    #[allow(unused_mut)]
    let mut scope_720 = writer.prefix("DeletionProtection");
    if let Some(var_721) = &input.deletion_protection {
        scope_720.boolean(*var_721);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_parameter_group(
    input: &crate::input::ModifyDbParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_722 = writer.prefix("DBParameterGroupName");
    if let Some(var_723) = &input.db_parameter_group_name {
        scope_722.string(var_723);
    }
    #[allow(unused_mut)]
    let mut scope_724 = writer.prefix("Parameters");
    if let Some(var_725) = &input.parameters {
        let mut list_727 = scope_724.start_list(false, Some("Parameter"));
        for item_726 in var_725 {
            #[allow(unused_mut)]
            let mut entry_728 = list_727.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_728, item_726);
        }
        list_727.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_subnet_group(
    input: &crate::input::ModifyDbSubnetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBSubnetGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_729 = writer.prefix("DBSubnetGroupName");
    if let Some(var_730) = &input.db_subnet_group_name {
        scope_729.string(var_730);
    }
    #[allow(unused_mut)]
    let mut scope_731 = writer.prefix("DBSubnetGroupDescription");
    if let Some(var_732) = &input.db_subnet_group_description {
        scope_731.string(var_732);
    }
    #[allow(unused_mut)]
    let mut scope_733 = writer.prefix("SubnetIds");
    if let Some(var_734) = &input.subnet_ids {
        let mut list_736 = scope_733.start_list(false, Some("SubnetIdentifier"));
        for item_735 in var_734 {
            #[allow(unused_mut)]
            let mut entry_737 = list_736.entry();
            entry_737.string(item_735);
        }
        list_736.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_event_subscription(
    input: &crate::input::ModifyEventSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyEventSubscription", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_738 = writer.prefix("SubscriptionName");
    if let Some(var_739) = &input.subscription_name {
        scope_738.string(var_739);
    }
    #[allow(unused_mut)]
    let mut scope_740 = writer.prefix("SnsTopicArn");
    if let Some(var_741) = &input.sns_topic_arn {
        scope_740.string(var_741);
    }
    #[allow(unused_mut)]
    let mut scope_742 = writer.prefix("SourceType");
    if let Some(var_743) = &input.source_type {
        scope_742.string(var_743);
    }
    #[allow(unused_mut)]
    let mut scope_744 = writer.prefix("EventCategories");
    if let Some(var_745) = &input.event_categories {
        let mut list_747 = scope_744.start_list(false, Some("EventCategory"));
        for item_746 in var_745 {
            #[allow(unused_mut)]
            let mut entry_748 = list_747.entry();
            entry_748.string(item_746);
        }
        list_747.finish();
    }
    #[allow(unused_mut)]
    let mut scope_749 = writer.prefix("Enabled");
    if let Some(var_750) = &input.enabled {
        scope_749.boolean(*var_750);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_promote_read_replica_db_cluster(
    input: &crate::input::PromoteReadReplicaDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "PromoteReadReplicaDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_751 = writer.prefix("DBClusterIdentifier");
    if let Some(var_752) = &input.db_cluster_identifier {
        scope_751.string(var_752);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reboot_db_instance(
    input: &crate::input::RebootDbInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RebootDBInstance", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_753 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_754) = &input.db_instance_identifier {
        scope_753.string(var_754);
    }
    #[allow(unused_mut)]
    let mut scope_755 = writer.prefix("ForceFailover");
    if let Some(var_756) = &input.force_failover {
        scope_755.boolean(*var_756);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_remove_role_from_db_cluster(
    input: &crate::input::RemoveRoleFromDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RemoveRoleFromDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_757 = writer.prefix("DBClusterIdentifier");
    if let Some(var_758) = &input.db_cluster_identifier {
        scope_757.string(var_758);
    }
    #[allow(unused_mut)]
    let mut scope_759 = writer.prefix("RoleArn");
    if let Some(var_760) = &input.role_arn {
        scope_759.string(var_760);
    }
    #[allow(unused_mut)]
    let mut scope_761 = writer.prefix("FeatureName");
    if let Some(var_762) = &input.feature_name {
        scope_761.string(var_762);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_remove_source_identifier_from_subscription(
    input: &crate::input::RemoveSourceIdentifierFromSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RemoveSourceIdentifierFromSubscription",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_763 = writer.prefix("SubscriptionName");
    if let Some(var_764) = &input.subscription_name {
        scope_763.string(var_764);
    }
    #[allow(unused_mut)]
    let mut scope_765 = writer.prefix("SourceIdentifier");
    if let Some(var_766) = &input.source_identifier {
        scope_765.string(var_766);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_remove_tags_from_resource(
    input: &crate::input::RemoveTagsFromResourceInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RemoveTagsFromResource", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_767 = writer.prefix("ResourceName");
    if let Some(var_768) = &input.resource_name {
        scope_767.string(var_768);
    }
    #[allow(unused_mut)]
    let mut scope_769 = writer.prefix("TagKeys");
    if let Some(var_770) = &input.tag_keys {
        let mut list_772 = scope_769.start_list(false, None);
        for item_771 in var_770 {
            #[allow(unused_mut)]
            let mut entry_773 = list_772.entry();
            entry_773.string(item_771);
        }
        list_772.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_db_cluster_parameter_group(
    input: &crate::input::ResetDbClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetDBClusterParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_774 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_775) = &input.db_cluster_parameter_group_name {
        scope_774.string(var_775);
    }
    #[allow(unused_mut)]
    let mut scope_776 = writer.prefix("ResetAllParameters");
    if input.reset_all_parameters {
        scope_776.boolean(input.reset_all_parameters);
    }
    #[allow(unused_mut)]
    let mut scope_777 = writer.prefix("Parameters");
    if let Some(var_778) = &input.parameters {
        let mut list_780 = scope_777.start_list(false, Some("Parameter"));
        for item_779 in var_778 {
            #[allow(unused_mut)]
            let mut entry_781 = list_780.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_781, item_779);
        }
        list_780.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_db_parameter_group(
    input: &crate::input::ResetDbParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetDBParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_782 = writer.prefix("DBParameterGroupName");
    if let Some(var_783) = &input.db_parameter_group_name {
        scope_782.string(var_783);
    }
    #[allow(unused_mut)]
    let mut scope_784 = writer.prefix("ResetAllParameters");
    if input.reset_all_parameters {
        scope_784.boolean(input.reset_all_parameters);
    }
    #[allow(unused_mut)]
    let mut scope_785 = writer.prefix("Parameters");
    if let Some(var_786) = &input.parameters {
        let mut list_788 = scope_785.start_list(false, Some("Parameter"));
        for item_787 in var_786 {
            #[allow(unused_mut)]
            let mut entry_789 = list_788.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_789, item_787);
        }
        list_788.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_db_cluster_from_snapshot(
    input: &crate::input::RestoreDbClusterFromSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreDBClusterFromSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_790 = writer.prefix("AvailabilityZones");
    if let Some(var_791) = &input.availability_zones {
        let mut list_793 = scope_790.start_list(false, Some("AvailabilityZone"));
        for item_792 in var_791 {
            #[allow(unused_mut)]
            let mut entry_794 = list_793.entry();
            entry_794.string(item_792);
        }
        list_793.finish();
    }
    #[allow(unused_mut)]
    let mut scope_795 = writer.prefix("DBClusterIdentifier");
    if let Some(var_796) = &input.db_cluster_identifier {
        scope_795.string(var_796);
    }
    #[allow(unused_mut)]
    let mut scope_797 = writer.prefix("SnapshotIdentifier");
    if let Some(var_798) = &input.snapshot_identifier {
        scope_797.string(var_798);
    }
    #[allow(unused_mut)]
    let mut scope_799 = writer.prefix("Engine");
    if let Some(var_800) = &input.engine {
        scope_799.string(var_800);
    }
    #[allow(unused_mut)]
    let mut scope_801 = writer.prefix("EngineVersion");
    if let Some(var_802) = &input.engine_version {
        scope_801.string(var_802);
    }
    #[allow(unused_mut)]
    let mut scope_803 = writer.prefix("Port");
    if let Some(var_804) = &input.port {
        scope_803.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_804).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_805 = writer.prefix("DBSubnetGroupName");
    if let Some(var_806) = &input.db_subnet_group_name {
        scope_805.string(var_806);
    }
    #[allow(unused_mut)]
    let mut scope_807 = writer.prefix("DatabaseName");
    if let Some(var_808) = &input.database_name {
        scope_807.string(var_808);
    }
    #[allow(unused_mut)]
    let mut scope_809 = writer.prefix("OptionGroupName");
    if let Some(var_810) = &input.option_group_name {
        scope_809.string(var_810);
    }
    #[allow(unused_mut)]
    let mut scope_811 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_812) = &input.vpc_security_group_ids {
        let mut list_814 = scope_811.start_list(false, Some("VpcSecurityGroupId"));
        for item_813 in var_812 {
            #[allow(unused_mut)]
            let mut entry_815 = list_814.entry();
            entry_815.string(item_813);
        }
        list_814.finish();
    }
    #[allow(unused_mut)]
    let mut scope_816 = writer.prefix("Tags");
    if let Some(var_817) = &input.tags {
        let mut list_819 = scope_816.start_list(false, Some("Tag"));
        for item_818 in var_817 {
            #[allow(unused_mut)]
            let mut entry_820 = list_819.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_820, item_818);
        }
        list_819.finish();
    }
    #[allow(unused_mut)]
    let mut scope_821 = writer.prefix("KmsKeyId");
    if let Some(var_822) = &input.kms_key_id {
        scope_821.string(var_822);
    }
    #[allow(unused_mut)]
    let mut scope_823 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_824) = &input.enable_iam_database_authentication {
        scope_823.boolean(*var_824);
    }
    #[allow(unused_mut)]
    let mut scope_825 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_826) = &input.enable_cloudwatch_logs_exports {
        let mut list_828 = scope_825.start_list(false, None);
        for item_827 in var_826 {
            #[allow(unused_mut)]
            let mut entry_829 = list_828.entry();
            entry_829.string(item_827);
        }
        list_828.finish();
    }
    #[allow(unused_mut)]
    let mut scope_830 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_831) = &input.db_cluster_parameter_group_name {
        scope_830.string(var_831);
    }
    #[allow(unused_mut)]
    let mut scope_832 = writer.prefix("DeletionProtection");
    if let Some(var_833) = &input.deletion_protection {
        scope_832.boolean(*var_833);
    }
    #[allow(unused_mut)]
    let mut scope_834 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_835) = &input.copy_tags_to_snapshot {
        scope_834.boolean(*var_835);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_db_cluster_to_point_in_time(
    input: &crate::input::RestoreDbClusterToPointInTimeInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreDBClusterToPointInTime", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_836 = writer.prefix("DBClusterIdentifier");
    if let Some(var_837) = &input.db_cluster_identifier {
        scope_836.string(var_837);
    }
    #[allow(unused_mut)]
    let mut scope_838 = writer.prefix("RestoreType");
    if let Some(var_839) = &input.restore_type {
        scope_838.string(var_839);
    }
    #[allow(unused_mut)]
    let mut scope_840 = writer.prefix("SourceDBClusterIdentifier");
    if let Some(var_841) = &input.source_db_cluster_identifier {
        scope_840.string(var_841);
    }
    #[allow(unused_mut)]
    let mut scope_842 = writer.prefix("RestoreToTime");
    if let Some(var_843) = &input.restore_to_time {
        scope_842.instant(var_843, aws_smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_844 = writer.prefix("UseLatestRestorableTime");
    if input.use_latest_restorable_time {
        scope_844.boolean(input.use_latest_restorable_time);
    }
    #[allow(unused_mut)]
    let mut scope_845 = writer.prefix("Port");
    if let Some(var_846) = &input.port {
        scope_845.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_846).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_847 = writer.prefix("DBSubnetGroupName");
    if let Some(var_848) = &input.db_subnet_group_name {
        scope_847.string(var_848);
    }
    #[allow(unused_mut)]
    let mut scope_849 = writer.prefix("OptionGroupName");
    if let Some(var_850) = &input.option_group_name {
        scope_849.string(var_850);
    }
    #[allow(unused_mut)]
    let mut scope_851 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_852) = &input.vpc_security_group_ids {
        let mut list_854 = scope_851.start_list(false, Some("VpcSecurityGroupId"));
        for item_853 in var_852 {
            #[allow(unused_mut)]
            let mut entry_855 = list_854.entry();
            entry_855.string(item_853);
        }
        list_854.finish();
    }
    #[allow(unused_mut)]
    let mut scope_856 = writer.prefix("Tags");
    if let Some(var_857) = &input.tags {
        let mut list_859 = scope_856.start_list(false, Some("Tag"));
        for item_858 in var_857 {
            #[allow(unused_mut)]
            let mut entry_860 = list_859.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_860, item_858);
        }
        list_859.finish();
    }
    #[allow(unused_mut)]
    let mut scope_861 = writer.prefix("KmsKeyId");
    if let Some(var_862) = &input.kms_key_id {
        scope_861.string(var_862);
    }
    #[allow(unused_mut)]
    let mut scope_863 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_864) = &input.enable_iam_database_authentication {
        scope_863.boolean(*var_864);
    }
    #[allow(unused_mut)]
    let mut scope_865 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_866) = &input.enable_cloudwatch_logs_exports {
        let mut list_868 = scope_865.start_list(false, None);
        for item_867 in var_866 {
            #[allow(unused_mut)]
            let mut entry_869 = list_868.entry();
            entry_869.string(item_867);
        }
        list_868.finish();
    }
    #[allow(unused_mut)]
    let mut scope_870 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_871) = &input.db_cluster_parameter_group_name {
        scope_870.string(var_871);
    }
    #[allow(unused_mut)]
    let mut scope_872 = writer.prefix("DeletionProtection");
    if let Some(var_873) = &input.deletion_protection {
        scope_872.boolean(*var_873);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_db_cluster(
    input: &crate::input::StartDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StartDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_874 = writer.prefix("DBClusterIdentifier");
    if let Some(var_875) = &input.db_cluster_identifier {
        scope_874.string(var_875);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_stop_db_cluster(
    input: &crate::input::StopDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StopDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_876 = writer.prefix("DBClusterIdentifier");
    if let Some(var_877) = &input.db_cluster_identifier {
        scope_876.string(var_877);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
