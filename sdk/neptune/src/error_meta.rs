// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>Specified CIDRIP or EC2 security group is not authorized for the specified DB security group.</p>
    /// <p>Neptune may not also be authorized via IAM to perform necessary actions on your behalf.</p>
    AuthorizationNotFoundFault(crate::error::AuthorizationNotFoundFault),
    /// <p> <i>CertificateIdentifier</i> does not refer to an existing certificate.</p>
    CertificateNotFoundFault(crate::error::CertificateNotFoundFault),
    /// <p>User already has a DB cluster with the given identifier.</p>
    DbClusterAlreadyExistsFault(crate::error::DbClusterAlreadyExistsFault),
    /// <p>The specified custom endpoint cannot be created because it already exists.</p>
    DbClusterEndpointAlreadyExistsFault(crate::error::DbClusterEndpointAlreadyExistsFault),
    /// <p>The specified custom endpoint doesn't exist.</p>
    DbClusterEndpointNotFoundFault(crate::error::DbClusterEndpointNotFoundFault),
    /// <p>The cluster already has the maximum number of custom endpoints.</p>
    DbClusterEndpointQuotaExceededFault(crate::error::DbClusterEndpointQuotaExceededFault),
    /// <p> <i>DBClusterIdentifier</i> does not refer to an existing DB cluster.</p>
    DbClusterNotFoundFault(crate::error::DbClusterNotFoundFault),
    /// <p> <i>DBClusterParameterGroupName</i> does not refer to an existing DB Cluster parameter group.</p>
    DbClusterParameterGroupNotFoundFault(crate::error::DbClusterParameterGroupNotFoundFault),
    /// <p>User attempted to create a new DB cluster and the user has already reached the maximum allowed DB cluster quota.</p>
    DbClusterQuotaExceededFault(crate::error::DbClusterQuotaExceededFault),
    /// <p>The specified IAM role Amazon Resource Name (ARN) is already associated with the specified DB cluster.</p>
    DbClusterRoleAlreadyExistsFault(crate::error::DbClusterRoleAlreadyExistsFault),
    /// <p>The specified IAM role Amazon Resource Name (ARN) is not associated with the specified DB cluster.</p>
    DbClusterRoleNotFoundFault(crate::error::DbClusterRoleNotFoundFault),
    /// <p>You have exceeded the maximum number of IAM roles that can be associated with the specified DB cluster.</p>
    DbClusterRoleQuotaExceededFault(crate::error::DbClusterRoleQuotaExceededFault),
    /// <p>User already has a DB cluster snapshot with the given identifier.</p>
    DbClusterSnapshotAlreadyExistsFault(crate::error::DbClusterSnapshotAlreadyExistsFault),
    /// <p> <i>DBClusterSnapshotIdentifier</i> does not refer to an existing DB cluster snapshot.</p>
    DbClusterSnapshotNotFoundFault(crate::error::DbClusterSnapshotNotFoundFault),
    /// <p>User already has a DB instance with the given identifier.</p>
    DbInstanceAlreadyExistsFault(crate::error::DbInstanceAlreadyExistsFault),
    /// <p> <i>DBInstanceIdentifier</i> does not refer to an existing DB instance.</p>
    DbInstanceNotFoundFault(crate::error::DbInstanceNotFoundFault),
    /// <p>A DB parameter group with the same name exists.</p>
    DbParameterGroupAlreadyExistsFault(crate::error::DbParameterGroupAlreadyExistsFault),
    /// <p> <i>DBParameterGroupName</i> does not refer to an existing DB parameter group.</p>
    DbParameterGroupNotFoundFault(crate::error::DbParameterGroupNotFoundFault),
    /// <p>Request would result in user exceeding the allowed number of DB parameter groups.</p>
    DbParameterGroupQuotaExceededFault(crate::error::DbParameterGroupQuotaExceededFault),
    /// <p> <i>DBSecurityGroupName</i> does not refer to an existing DB security group.</p>
    DbSecurityGroupNotFoundFault(crate::error::DbSecurityGroupNotFoundFault),
    /// <p> <i>DBSnapshotIdentifier</i> is already used by an existing snapshot.</p>
    DbSnapshotAlreadyExistsFault(crate::error::DbSnapshotAlreadyExistsFault),
    /// <p> <i>DBSnapshotIdentifier</i> does not refer to an existing DB snapshot.</p>
    DbSnapshotNotFoundFault(crate::error::DbSnapshotNotFoundFault),
    /// <p> <i>DBSubnetGroupName</i> is already used by an existing DB subnet group.</p>
    DbSubnetGroupAlreadyExistsFault(crate::error::DbSubnetGroupAlreadyExistsFault),
    /// <p>Subnets in the DB subnet group should cover at least two Availability Zones unless there is only one Availability Zone.</p>
    DbSubnetGroupDoesNotCoverEnoughAZs(crate::error::DbSubnetGroupDoesNotCoverEnoughAZs),
    /// <p> <i>DBSubnetGroupName</i> does not refer to an existing DB subnet group.</p>
    DbSubnetGroupNotFoundFault(crate::error::DbSubnetGroupNotFoundFault),
    /// <p>Request would result in user exceeding the allowed number of DB subnet groups.</p>
    DbSubnetGroupQuotaExceededFault(crate::error::DbSubnetGroupQuotaExceededFault),
    /// <p>Request would result in user exceeding the allowed number of subnets in a DB subnet groups.</p>
    DbSubnetQuotaExceededFault(crate::error::DbSubnetQuotaExceededFault),
    /// <p>The DB upgrade failed because a resource the DB depends on could not be modified.</p>
    DbUpgradeDependencyFailureFault(crate::error::DbUpgradeDependencyFailureFault),
    /// <p> <i>Domain</i> does not refer to an existing Active Directory Domain.</p>
    DomainNotFoundFault(crate::error::DomainNotFoundFault),
    /// <p>You have exceeded the number of events you can subscribe to.</p>
    EventSubscriptionQuotaExceededFault(crate::error::EventSubscriptionQuotaExceededFault),
    /// <p>The <code>GlobalClusterIdentifier</code> already exists. Choose a new global database identifier (unique name) to create a new global database cluster.</p>
    GlobalClusterAlreadyExistsFault(crate::error::GlobalClusterAlreadyExistsFault),
    /// <p>The <code>GlobalClusterIdentifier</code> doesn't refer to an existing global database cluster. </p>
    GlobalClusterNotFoundFault(crate::error::GlobalClusterNotFoundFault),
    /// <p>The number of global database clusters for this account is already at the maximum allowed.</p>
    GlobalClusterQuotaExceededFault(crate::error::GlobalClusterQuotaExceededFault),
    /// <p>Request would result in user exceeding the allowed number of DB instances.</p>
    InstanceQuotaExceededFault(crate::error::InstanceQuotaExceededFault),
    /// <p>The DB cluster does not have enough capacity for the current operation.</p>
    InsufficientDbClusterCapacityFault(crate::error::InsufficientDbClusterCapacityFault),
    /// <p>Specified DB instance class is not available in the specified Availability Zone.</p>
    InsufficientDbInstanceCapacityFault(crate::error::InsufficientDbInstanceCapacityFault),
    /// <p>There is insufficient storage available for the current action. You may be able to resolve this error by updating your subnet group to use different Availability Zones that have more storage available.</p>
    InsufficientStorageClusterCapacityFault(crate::error::InsufficientStorageClusterCapacityFault),
    /// <p>The requested operation cannot be performed on the endpoint while the endpoint is in this state.</p>
    InvalidDbClusterEndpointStateFault(crate::error::InvalidDbClusterEndpointStateFault),
    /// <p>The supplied value is not a valid DB cluster snapshot state.</p>
    InvalidDbClusterSnapshotStateFault(crate::error::InvalidDbClusterSnapshotStateFault),
    /// <p>The DB cluster is not in a valid state.</p>
    InvalidDbClusterStateFault(crate::error::InvalidDbClusterStateFault),
    /// <p>The specified DB instance is not in the <i>available</i> state.</p>
    InvalidDbInstanceStateFault(crate::error::InvalidDbInstanceStateFault),
    /// <p>The DB parameter group is in use or is in an invalid state. If you are attempting to delete the parameter group, you cannot delete it when the parameter group is in this state.</p>
    InvalidDbParameterGroupStateFault(crate::error::InvalidDbParameterGroupStateFault),
    /// <p>The state of the DB security group does not allow deletion.</p>
    InvalidDbSecurityGroupStateFault(crate::error::InvalidDbSecurityGroupStateFault),
    /// <p>The state of the DB snapshot does not allow deletion.</p>
    InvalidDbSnapshotStateFault(crate::error::InvalidDbSnapshotStateFault),
    /// <p>The DB subnet group cannot be deleted because it is in use.</p>
    InvalidDbSubnetGroupStateFault(crate::error::InvalidDbSubnetGroupStateFault),
    /// <p>The DB subnet is not in the <i>available</i> state.</p>
    InvalidDbSubnetStateFault(crate::error::InvalidDbSubnetStateFault),
    /// <p>The event subscription is in an invalid state.</p>
    InvalidEventSubscriptionStateFault(crate::error::InvalidEventSubscriptionStateFault),
    /// <p>The global cluster is in an invalid state and can't perform the requested operation. </p>
    InvalidGlobalClusterStateFault(crate::error::InvalidGlobalClusterStateFault),
    /// <p>Cannot restore from vpc backup to non-vpc DB instance.</p>
    InvalidRestoreFault(crate::error::InvalidRestoreFault),
    /// <p>The requested subnet is invalid, or multiple subnets were requested that are not all in a common VPC.</p>
    InvalidSubnet(crate::error::InvalidSubnet),
    /// <p>DB subnet group does not cover all Availability Zones after it is created because users' change.</p>
    InvalidVpcNetworkStateFault(crate::error::InvalidVpcNetworkStateFault),
    /// <p>Error accessing KMS key.</p>
    KmsKeyNotAccessibleFault(crate::error::KmsKeyNotAccessibleFault),
    /// <p>The designated option group could not be found.</p>
    OptionGroupNotFoundFault(crate::error::OptionGroupNotFoundFault),
    /// <p>Provisioned IOPS not available in the specified Availability Zone.</p>
    ProvisionedIopsNotAvailableInAzFault(crate::error::ProvisionedIopsNotAvailableInAzFault),
    /// <p>The specified resource ID was not found.</p>
    ResourceNotFoundFault(crate::error::ResourceNotFoundFault),
    /// <p>The SNS topic is invalid.</p>
    SnsInvalidTopicFault(crate::error::SnsInvalidTopicFault),
    /// <p>There is no SNS authorization.</p>
    SnsNoAuthorizationFault(crate::error::SnsNoAuthorizationFault),
    /// <p>The ARN of the SNS topic could not be found.</p>
    SnsTopicArnNotFoundFault(crate::error::SnsTopicArnNotFoundFault),
    /// <p>You have exceeded the maximum number of accounts that you can share a manual DB snapshot with.</p>
    SharedSnapshotQuotaExceededFault(crate::error::SharedSnapshotQuotaExceededFault),
    /// <p>Request would result in user exceeding the allowed number of DB snapshots.</p>
    SnapshotQuotaExceededFault(crate::error::SnapshotQuotaExceededFault),
    /// <p>The source could not be found.</p>
    SourceNotFoundFault(crate::error::SourceNotFoundFault),
    /// <p>Request would result in user exceeding the allowed amount of storage available across all DB instances.</p>
    StorageQuotaExceededFault(crate::error::StorageQuotaExceededFault),
    /// <p> <i>StorageType</i> specified cannot be associated with the DB Instance.</p>
    StorageTypeNotSupportedFault(crate::error::StorageTypeNotSupportedFault),
    /// <p>The DB subnet is already in use in the Availability Zone.</p>
    SubnetAlreadyInUse(crate::error::SubnetAlreadyInUse),
    /// <p>This subscription already exists.</p>
    SubscriptionAlreadyExistFault(crate::error::SubscriptionAlreadyExistFault),
    /// <p>The designated subscription category could not be found.</p>
    SubscriptionCategoryNotFoundFault(crate::error::SubscriptionCategoryNotFoundFault),
    /// <p>The designated subscription could not be found.</p>
    SubscriptionNotFoundFault(crate::error::SubscriptionNotFoundFault),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AuthorizationNotFoundFault(inner) => inner.fmt(f),
            Error::CertificateNotFoundFault(inner) => inner.fmt(f),
            Error::DbClusterAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DbClusterEndpointAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DbClusterEndpointNotFoundFault(inner) => inner.fmt(f),
            Error::DbClusterEndpointQuotaExceededFault(inner) => inner.fmt(f),
            Error::DbClusterNotFoundFault(inner) => inner.fmt(f),
            Error::DbClusterParameterGroupNotFoundFault(inner) => inner.fmt(f),
            Error::DbClusterQuotaExceededFault(inner) => inner.fmt(f),
            Error::DbClusterRoleAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DbClusterRoleNotFoundFault(inner) => inner.fmt(f),
            Error::DbClusterRoleQuotaExceededFault(inner) => inner.fmt(f),
            Error::DbClusterSnapshotAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DbClusterSnapshotNotFoundFault(inner) => inner.fmt(f),
            Error::DbInstanceAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DbInstanceNotFoundFault(inner) => inner.fmt(f),
            Error::DbParameterGroupAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DbParameterGroupNotFoundFault(inner) => inner.fmt(f),
            Error::DbParameterGroupQuotaExceededFault(inner) => inner.fmt(f),
            Error::DbSecurityGroupNotFoundFault(inner) => inner.fmt(f),
            Error::DbSnapshotAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DbSnapshotNotFoundFault(inner) => inner.fmt(f),
            Error::DbSubnetGroupAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DbSubnetGroupDoesNotCoverEnoughAZs(inner) => inner.fmt(f),
            Error::DbSubnetGroupNotFoundFault(inner) => inner.fmt(f),
            Error::DbSubnetGroupQuotaExceededFault(inner) => inner.fmt(f),
            Error::DbSubnetQuotaExceededFault(inner) => inner.fmt(f),
            Error::DbUpgradeDependencyFailureFault(inner) => inner.fmt(f),
            Error::DomainNotFoundFault(inner) => inner.fmt(f),
            Error::EventSubscriptionQuotaExceededFault(inner) => inner.fmt(f),
            Error::GlobalClusterAlreadyExistsFault(inner) => inner.fmt(f),
            Error::GlobalClusterNotFoundFault(inner) => inner.fmt(f),
            Error::GlobalClusterQuotaExceededFault(inner) => inner.fmt(f),
            Error::InstanceQuotaExceededFault(inner) => inner.fmt(f),
            Error::InsufficientDbClusterCapacityFault(inner) => inner.fmt(f),
            Error::InsufficientDbInstanceCapacityFault(inner) => inner.fmt(f),
            Error::InsufficientStorageClusterCapacityFault(inner) => inner.fmt(f),
            Error::InvalidDbClusterEndpointStateFault(inner) => inner.fmt(f),
            Error::InvalidDbClusterSnapshotStateFault(inner) => inner.fmt(f),
            Error::InvalidDbClusterStateFault(inner) => inner.fmt(f),
            Error::InvalidDbInstanceStateFault(inner) => inner.fmt(f),
            Error::InvalidDbParameterGroupStateFault(inner) => inner.fmt(f),
            Error::InvalidDbSecurityGroupStateFault(inner) => inner.fmt(f),
            Error::InvalidDbSnapshotStateFault(inner) => inner.fmt(f),
            Error::InvalidDbSubnetGroupStateFault(inner) => inner.fmt(f),
            Error::InvalidDbSubnetStateFault(inner) => inner.fmt(f),
            Error::InvalidEventSubscriptionStateFault(inner) => inner.fmt(f),
            Error::InvalidGlobalClusterStateFault(inner) => inner.fmt(f),
            Error::InvalidRestoreFault(inner) => inner.fmt(f),
            Error::InvalidSubnet(inner) => inner.fmt(f),
            Error::InvalidVpcNetworkStateFault(inner) => inner.fmt(f),
            Error::KmsKeyNotAccessibleFault(inner) => inner.fmt(f),
            Error::OptionGroupNotFoundFault(inner) => inner.fmt(f),
            Error::ProvisionedIopsNotAvailableInAzFault(inner) => inner.fmt(f),
            Error::ResourceNotFoundFault(inner) => inner.fmt(f),
            Error::SnsInvalidTopicFault(inner) => inner.fmt(f),
            Error::SnsNoAuthorizationFault(inner) => inner.fmt(f),
            Error::SnsTopicArnNotFoundFault(inner) => inner.fmt(f),
            Error::SharedSnapshotQuotaExceededFault(inner) => inner.fmt(f),
            Error::SnapshotQuotaExceededFault(inner) => inner.fmt(f),
            Error::SourceNotFoundFault(inner) => inner.fmt(f),
            Error::StorageQuotaExceededFault(inner) => inner.fmt(f),
            Error::StorageTypeNotSupportedFault(inner) => inner.fmt(f),
            Error::SubnetAlreadyInUse(inner) => inner.fmt(f),
            Error::SubscriptionAlreadyExistFault(inner) => inner.fmt(f),
            Error::SubscriptionCategoryNotFoundFault(inner) => inner.fmt(f),
            Error::SubscriptionNotFoundFault(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AddRoleToDBClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AddRoleToDBClusterError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AddRoleToDBClusterError> for Error {
    fn from(err: crate::error::AddRoleToDBClusterError) -> Self {
        match err {
            crate::error::AddRoleToDBClusterError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::AddRoleToDBClusterError::DbClusterRoleAlreadyExistsFault(inner) => {
                Error::DbClusterRoleAlreadyExistsFault(inner)
            }
            crate::error::AddRoleToDBClusterError::DbClusterRoleQuotaExceededFault(inner) => {
                Error::DbClusterRoleQuotaExceededFault(inner)
            }
            crate::error::AddRoleToDBClusterError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::AddRoleToDBClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::AddSourceIdentifierToSubscriptionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::AddSourceIdentifierToSubscriptionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AddSourceIdentifierToSubscriptionError> for Error {
    fn from(err: crate::error::AddSourceIdentifierToSubscriptionError) -> Self {
        match err {
            crate::error::AddSourceIdentifierToSubscriptionError::SourceNotFoundFault(inner) => {
                Error::SourceNotFoundFault(inner)
            }
            crate::error::AddSourceIdentifierToSubscriptionError::SubscriptionNotFoundFault(
                inner,
            ) => Error::SubscriptionNotFoundFault(inner),
            crate::error::AddSourceIdentifierToSubscriptionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AddTagsToResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AddTagsToResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AddTagsToResourceError> for Error {
    fn from(err: crate::error::AddTagsToResourceError) -> Self {
        match err {
            crate::error::AddTagsToResourceError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::AddTagsToResourceError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::AddTagsToResourceError::DbSnapshotNotFoundFault(inner) => {
                Error::DbSnapshotNotFoundFault(inner)
            }
            crate::error::AddTagsToResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ApplyPendingMaintenanceActionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ApplyPendingMaintenanceActionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ApplyPendingMaintenanceActionError> for Error {
    fn from(err: crate::error::ApplyPendingMaintenanceActionError) -> Self {
        match err {
            crate::error::ApplyPendingMaintenanceActionError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::ApplyPendingMaintenanceActionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CopyDBClusterParameterGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CopyDBClusterParameterGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CopyDBClusterParameterGroupError> for Error {
    fn from(err: crate::error::CopyDBClusterParameterGroupError) -> Self {
        match err {
            crate::error::CopyDBClusterParameterGroupError::DbParameterGroupAlreadyExistsFault(
                inner,
            ) => Error::DbParameterGroupAlreadyExistsFault(inner),
            crate::error::CopyDBClusterParameterGroupError::DbParameterGroupNotFoundFault(
                inner,
            ) => Error::DbParameterGroupNotFoundFault(inner),
            crate::error::CopyDBClusterParameterGroupError::DbParameterGroupQuotaExceededFault(
                inner,
            ) => Error::DbParameterGroupQuotaExceededFault(inner),
            crate::error::CopyDBClusterParameterGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CopyDBClusterSnapshotError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CopyDBClusterSnapshotError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CopyDBClusterSnapshotError> for Error {
    fn from(err: crate::error::CopyDBClusterSnapshotError) -> Self {
        match err {
            crate::error::CopyDBClusterSnapshotError::DbClusterSnapshotAlreadyExistsFault(
                inner,
            ) => Error::DbClusterSnapshotAlreadyExistsFault(inner),
            crate::error::CopyDBClusterSnapshotError::DbClusterSnapshotNotFoundFault(inner) => {
                Error::DbClusterSnapshotNotFoundFault(inner)
            }
            crate::error::CopyDBClusterSnapshotError::InvalidDbClusterSnapshotStateFault(inner) => {
                Error::InvalidDbClusterSnapshotStateFault(inner)
            }
            crate::error::CopyDBClusterSnapshotError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::CopyDBClusterSnapshotError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::error::CopyDBClusterSnapshotError::SnapshotQuotaExceededFault(inner) => {
                Error::SnapshotQuotaExceededFault(inner)
            }
            crate::error::CopyDBClusterSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CopyDBParameterGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CopyDBParameterGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CopyDBParameterGroupError> for Error {
    fn from(err: crate::error::CopyDBParameterGroupError) -> Self {
        match err {
            crate::error::CopyDBParameterGroupError::DbParameterGroupAlreadyExistsFault(inner) => {
                Error::DbParameterGroupAlreadyExistsFault(inner)
            }
            crate::error::CopyDBParameterGroupError::DbParameterGroupNotFoundFault(inner) => {
                Error::DbParameterGroupNotFoundFault(inner)
            }
            crate::error::CopyDBParameterGroupError::DbParameterGroupQuotaExceededFault(inner) => {
                Error::DbParameterGroupQuotaExceededFault(inner)
            }
            crate::error::CopyDBParameterGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDBClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateDBClusterError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDBClusterError> for Error {
    fn from(err: crate::error::CreateDBClusterError) -> Self {
        match err {
            crate::error::CreateDBClusterError::DbClusterAlreadyExistsFault(inner) => {
                Error::DbClusterAlreadyExistsFault(inner)
            }
            crate::error::CreateDBClusterError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::CreateDBClusterError::DbClusterParameterGroupNotFoundFault(inner) => {
                Error::DbClusterParameterGroupNotFoundFault(inner)
            }
            crate::error::CreateDBClusterError::DbClusterQuotaExceededFault(inner) => {
                Error::DbClusterQuotaExceededFault(inner)
            }
            crate::error::CreateDBClusterError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::CreateDBClusterError::DbSubnetGroupDoesNotCoverEnoughAZs(inner) => {
                Error::DbSubnetGroupDoesNotCoverEnoughAZs(inner)
            }
            crate::error::CreateDBClusterError::DbSubnetGroupNotFoundFault(inner) => {
                Error::DbSubnetGroupNotFoundFault(inner)
            }
            crate::error::CreateDBClusterError::GlobalClusterNotFoundFault(inner) => {
                Error::GlobalClusterNotFoundFault(inner)
            }
            crate::error::CreateDBClusterError::InsufficientStorageClusterCapacityFault(inner) => {
                Error::InsufficientStorageClusterCapacityFault(inner)
            }
            crate::error::CreateDBClusterError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::CreateDBClusterError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::CreateDBClusterError::InvalidDbSubnetGroupStateFault(inner) => {
                Error::InvalidDbSubnetGroupStateFault(inner)
            }
            crate::error::CreateDBClusterError::InvalidGlobalClusterStateFault(inner) => {
                Error::InvalidGlobalClusterStateFault(inner)
            }
            crate::error::CreateDBClusterError::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
            crate::error::CreateDBClusterError::InvalidVpcNetworkStateFault(inner) => {
                Error::InvalidVpcNetworkStateFault(inner)
            }
            crate::error::CreateDBClusterError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::error::CreateDBClusterError::StorageQuotaExceededFault(inner) => {
                Error::StorageQuotaExceededFault(inner)
            }
            crate::error::CreateDBClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDBClusterEndpointError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDBClusterEndpointError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDBClusterEndpointError> for Error {
    fn from(err: crate::error::CreateDBClusterEndpointError) -> Self {
        match err {
            crate::error::CreateDBClusterEndpointError::DbClusterEndpointAlreadyExistsFault(
                inner,
            ) => Error::DbClusterEndpointAlreadyExistsFault(inner),
            crate::error::CreateDBClusterEndpointError::DbClusterEndpointQuotaExceededFault(
                inner,
            ) => Error::DbClusterEndpointQuotaExceededFault(inner),
            crate::error::CreateDBClusterEndpointError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::CreateDBClusterEndpointError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::CreateDBClusterEndpointError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::CreateDBClusterEndpointError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::CreateDBClusterEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDBClusterParameterGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDBClusterParameterGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDBClusterParameterGroupError> for Error {
    fn from(err: crate::error::CreateDBClusterParameterGroupError) -> Self {
        match err {
            crate::error::CreateDBClusterParameterGroupError::DbParameterGroupAlreadyExistsFault(inner) => Error::DbParameterGroupAlreadyExistsFault(inner),
            crate::error::CreateDBClusterParameterGroupError::DbParameterGroupQuotaExceededFault(inner) => Error::DbParameterGroupQuotaExceededFault(inner),
            crate::error::CreateDBClusterParameterGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDBClusterSnapshotError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDBClusterSnapshotError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDBClusterSnapshotError> for Error {
    fn from(err: crate::error::CreateDBClusterSnapshotError) -> Self {
        match err {
            crate::error::CreateDBClusterSnapshotError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::CreateDBClusterSnapshotError::DbClusterSnapshotAlreadyExistsFault(
                inner,
            ) => Error::DbClusterSnapshotAlreadyExistsFault(inner),
            crate::error::CreateDBClusterSnapshotError::InvalidDbClusterSnapshotStateFault(
                inner,
            ) => Error::InvalidDbClusterSnapshotStateFault(inner),
            crate::error::CreateDBClusterSnapshotError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::CreateDBClusterSnapshotError::SnapshotQuotaExceededFault(inner) => {
                Error::SnapshotQuotaExceededFault(inner)
            }
            crate::error::CreateDBClusterSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDBInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDBInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDBInstanceError> for Error {
    fn from(err: crate::error::CreateDBInstanceError) -> Self {
        match err {
            crate::error::CreateDBInstanceError::AuthorizationNotFoundFault(inner) => {
                Error::AuthorizationNotFoundFault(inner)
            }
            crate::error::CreateDBInstanceError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::CreateDBInstanceError::DbInstanceAlreadyExistsFault(inner) => {
                Error::DbInstanceAlreadyExistsFault(inner)
            }
            crate::error::CreateDBInstanceError::DbParameterGroupNotFoundFault(inner) => {
                Error::DbParameterGroupNotFoundFault(inner)
            }
            crate::error::CreateDBInstanceError::DbSecurityGroupNotFoundFault(inner) => {
                Error::DbSecurityGroupNotFoundFault(inner)
            }
            crate::error::CreateDBInstanceError::DbSubnetGroupDoesNotCoverEnoughAZs(inner) => {
                Error::DbSubnetGroupDoesNotCoverEnoughAZs(inner)
            }
            crate::error::CreateDBInstanceError::DbSubnetGroupNotFoundFault(inner) => {
                Error::DbSubnetGroupNotFoundFault(inner)
            }
            crate::error::CreateDBInstanceError::DomainNotFoundFault(inner) => {
                Error::DomainNotFoundFault(inner)
            }
            crate::error::CreateDBInstanceError::InstanceQuotaExceededFault(inner) => {
                Error::InstanceQuotaExceededFault(inner)
            }
            crate::error::CreateDBInstanceError::InsufficientDbInstanceCapacityFault(inner) => {
                Error::InsufficientDbInstanceCapacityFault(inner)
            }
            crate::error::CreateDBInstanceError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::CreateDBInstanceError::InvalidSubnet(inner) => {
                Error::InvalidSubnet(inner)
            }
            crate::error::CreateDBInstanceError::InvalidVpcNetworkStateFault(inner) => {
                Error::InvalidVpcNetworkStateFault(inner)
            }
            crate::error::CreateDBInstanceError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::error::CreateDBInstanceError::OptionGroupNotFoundFault(inner) => {
                Error::OptionGroupNotFoundFault(inner)
            }
            crate::error::CreateDBInstanceError::ProvisionedIopsNotAvailableInAzFault(inner) => {
                Error::ProvisionedIopsNotAvailableInAzFault(inner)
            }
            crate::error::CreateDBInstanceError::StorageQuotaExceededFault(inner) => {
                Error::StorageQuotaExceededFault(inner)
            }
            crate::error::CreateDBInstanceError::StorageTypeNotSupportedFault(inner) => {
                Error::StorageTypeNotSupportedFault(inner)
            }
            crate::error::CreateDBInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDBParameterGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDBParameterGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDBParameterGroupError> for Error {
    fn from(err: crate::error::CreateDBParameterGroupError) -> Self {
        match err {
            crate::error::CreateDBParameterGroupError::DbParameterGroupAlreadyExistsFault(
                inner,
            ) => Error::DbParameterGroupAlreadyExistsFault(inner),
            crate::error::CreateDBParameterGroupError::DbParameterGroupQuotaExceededFault(
                inner,
            ) => Error::DbParameterGroupQuotaExceededFault(inner),
            crate::error::CreateDBParameterGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDBSubnetGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDBSubnetGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDBSubnetGroupError> for Error {
    fn from(err: crate::error::CreateDBSubnetGroupError) -> Self {
        match err {
            crate::error::CreateDBSubnetGroupError::DbSubnetGroupAlreadyExistsFault(inner) => {
                Error::DbSubnetGroupAlreadyExistsFault(inner)
            }
            crate::error::CreateDBSubnetGroupError::DbSubnetGroupDoesNotCoverEnoughAZs(inner) => {
                Error::DbSubnetGroupDoesNotCoverEnoughAZs(inner)
            }
            crate::error::CreateDBSubnetGroupError::DbSubnetGroupQuotaExceededFault(inner) => {
                Error::DbSubnetGroupQuotaExceededFault(inner)
            }
            crate::error::CreateDBSubnetGroupError::DbSubnetQuotaExceededFault(inner) => {
                Error::DbSubnetQuotaExceededFault(inner)
            }
            crate::error::CreateDBSubnetGroupError::InvalidSubnet(inner) => {
                Error::InvalidSubnet(inner)
            }
            crate::error::CreateDBSubnetGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateEventSubscriptionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateEventSubscriptionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateEventSubscriptionError> for Error {
    fn from(err: crate::error::CreateEventSubscriptionError) -> Self {
        match err {
            crate::error::CreateEventSubscriptionError::EventSubscriptionQuotaExceededFault(
                inner,
            ) => Error::EventSubscriptionQuotaExceededFault(inner),
            crate::error::CreateEventSubscriptionError::SnsInvalidTopicFault(inner) => {
                Error::SnsInvalidTopicFault(inner)
            }
            crate::error::CreateEventSubscriptionError::SnsNoAuthorizationFault(inner) => {
                Error::SnsNoAuthorizationFault(inner)
            }
            crate::error::CreateEventSubscriptionError::SnsTopicArnNotFoundFault(inner) => {
                Error::SnsTopicArnNotFoundFault(inner)
            }
            crate::error::CreateEventSubscriptionError::SourceNotFoundFault(inner) => {
                Error::SourceNotFoundFault(inner)
            }
            crate::error::CreateEventSubscriptionError::SubscriptionAlreadyExistFault(inner) => {
                Error::SubscriptionAlreadyExistFault(inner)
            }
            crate::error::CreateEventSubscriptionError::SubscriptionCategoryNotFoundFault(
                inner,
            ) => Error::SubscriptionCategoryNotFoundFault(inner),
            crate::error::CreateEventSubscriptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateGlobalClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateGlobalClusterError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateGlobalClusterError> for Error {
    fn from(err: crate::error::CreateGlobalClusterError) -> Self {
        match err {
            crate::error::CreateGlobalClusterError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::CreateGlobalClusterError::GlobalClusterAlreadyExistsFault(inner) => {
                Error::GlobalClusterAlreadyExistsFault(inner)
            }
            crate::error::CreateGlobalClusterError::GlobalClusterQuotaExceededFault(inner) => {
                Error::GlobalClusterQuotaExceededFault(inner)
            }
            crate::error::CreateGlobalClusterError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::CreateGlobalClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDBClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteDBClusterError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDBClusterError> for Error {
    fn from(err: crate::error::DeleteDBClusterError) -> Self {
        match err {
            crate::error::DeleteDBClusterError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::DeleteDBClusterError::DbClusterSnapshotAlreadyExistsFault(inner) => {
                Error::DbClusterSnapshotAlreadyExistsFault(inner)
            }
            crate::error::DeleteDBClusterError::InvalidDbClusterSnapshotStateFault(inner) => {
                Error::InvalidDbClusterSnapshotStateFault(inner)
            }
            crate::error::DeleteDBClusterError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::DeleteDBClusterError::SnapshotQuotaExceededFault(inner) => {
                Error::SnapshotQuotaExceededFault(inner)
            }
            crate::error::DeleteDBClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDBClusterEndpointError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteDBClusterEndpointError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDBClusterEndpointError> for Error {
    fn from(err: crate::error::DeleteDBClusterEndpointError) -> Self {
        match err {
            crate::error::DeleteDBClusterEndpointError::DbClusterEndpointNotFoundFault(inner) => {
                Error::DbClusterEndpointNotFoundFault(inner)
            }
            crate::error::DeleteDBClusterEndpointError::InvalidDbClusterEndpointStateFault(
                inner,
            ) => Error::InvalidDbClusterEndpointStateFault(inner),
            crate::error::DeleteDBClusterEndpointError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::DeleteDBClusterEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDBClusterParameterGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteDBClusterParameterGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDBClusterParameterGroupError> for Error {
    fn from(err: crate::error::DeleteDBClusterParameterGroupError) -> Self {
        match err {
            crate::error::DeleteDBClusterParameterGroupError::DbParameterGroupNotFoundFault(
                inner,
            ) => Error::DbParameterGroupNotFoundFault(inner),
            crate::error::DeleteDBClusterParameterGroupError::InvalidDbParameterGroupStateFault(
                inner,
            ) => Error::InvalidDbParameterGroupStateFault(inner),
            crate::error::DeleteDBClusterParameterGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDBClusterSnapshotError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteDBClusterSnapshotError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDBClusterSnapshotError> for Error {
    fn from(err: crate::error::DeleteDBClusterSnapshotError) -> Self {
        match err {
            crate::error::DeleteDBClusterSnapshotError::DbClusterSnapshotNotFoundFault(inner) => {
                Error::DbClusterSnapshotNotFoundFault(inner)
            }
            crate::error::DeleteDBClusterSnapshotError::InvalidDbClusterSnapshotStateFault(
                inner,
            ) => Error::InvalidDbClusterSnapshotStateFault(inner),
            crate::error::DeleteDBClusterSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDBInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteDBInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDBInstanceError> for Error {
    fn from(err: crate::error::DeleteDBInstanceError) -> Self {
        match err {
            crate::error::DeleteDBInstanceError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::DeleteDBInstanceError::DbSnapshotAlreadyExistsFault(inner) => {
                Error::DbSnapshotAlreadyExistsFault(inner)
            }
            crate::error::DeleteDBInstanceError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::DeleteDBInstanceError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::DeleteDBInstanceError::SnapshotQuotaExceededFault(inner) => {
                Error::SnapshotQuotaExceededFault(inner)
            }
            crate::error::DeleteDBInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDBParameterGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteDBParameterGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDBParameterGroupError> for Error {
    fn from(err: crate::error::DeleteDBParameterGroupError) -> Self {
        match err {
            crate::error::DeleteDBParameterGroupError::DbParameterGroupNotFoundFault(inner) => {
                Error::DbParameterGroupNotFoundFault(inner)
            }
            crate::error::DeleteDBParameterGroupError::InvalidDbParameterGroupStateFault(inner) => {
                Error::InvalidDbParameterGroupStateFault(inner)
            }
            crate::error::DeleteDBParameterGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDBSubnetGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteDBSubnetGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDBSubnetGroupError> for Error {
    fn from(err: crate::error::DeleteDBSubnetGroupError) -> Self {
        match err {
            crate::error::DeleteDBSubnetGroupError::DbSubnetGroupNotFoundFault(inner) => {
                Error::DbSubnetGroupNotFoundFault(inner)
            }
            crate::error::DeleteDBSubnetGroupError::InvalidDbSubnetGroupStateFault(inner) => {
                Error::InvalidDbSubnetGroupStateFault(inner)
            }
            crate::error::DeleteDBSubnetGroupError::InvalidDbSubnetStateFault(inner) => {
                Error::InvalidDbSubnetStateFault(inner)
            }
            crate::error::DeleteDBSubnetGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteEventSubscriptionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteEventSubscriptionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteEventSubscriptionError> for Error {
    fn from(err: crate::error::DeleteEventSubscriptionError) -> Self {
        match err {
            crate::error::DeleteEventSubscriptionError::InvalidEventSubscriptionStateFault(
                inner,
            ) => Error::InvalidEventSubscriptionStateFault(inner),
            crate::error::DeleteEventSubscriptionError::SubscriptionNotFoundFault(inner) => {
                Error::SubscriptionNotFoundFault(inner)
            }
            crate::error::DeleteEventSubscriptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteGlobalClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteGlobalClusterError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteGlobalClusterError> for Error {
    fn from(err: crate::error::DeleteGlobalClusterError) -> Self {
        match err {
            crate::error::DeleteGlobalClusterError::GlobalClusterNotFoundFault(inner) => {
                Error::GlobalClusterNotFoundFault(inner)
            }
            crate::error::DeleteGlobalClusterError::InvalidGlobalClusterStateFault(inner) => {
                Error::InvalidGlobalClusterStateFault(inner)
            }
            crate::error::DeleteGlobalClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDBClusterEndpointsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDBClusterEndpointsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDBClusterEndpointsError> for Error {
    fn from(err: crate::error::DescribeDBClusterEndpointsError) -> Self {
        match err {
            crate::error::DescribeDBClusterEndpointsError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::DescribeDBClusterEndpointsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeDBClusterParameterGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeDBClusterParameterGroupsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDBClusterParameterGroupsError> for Error {
    fn from(err: crate::error::DescribeDBClusterParameterGroupsError) -> Self {
        match err {
            crate::error::DescribeDBClusterParameterGroupsError::DbParameterGroupNotFoundFault(
                inner,
            ) => Error::DbParameterGroupNotFoundFault(inner),
            crate::error::DescribeDBClusterParameterGroupsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDBClusterParametersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDBClusterParametersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDBClusterParametersError> for Error {
    fn from(err: crate::error::DescribeDBClusterParametersError) -> Self {
        match err {
            crate::error::DescribeDBClusterParametersError::DbParameterGroupNotFoundFault(
                inner,
            ) => Error::DbParameterGroupNotFoundFault(inner),
            crate::error::DescribeDBClusterParametersError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDBClustersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDBClustersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDBClustersError> for Error {
    fn from(err: crate::error::DescribeDBClustersError) -> Self {
        match err {
            crate::error::DescribeDBClustersError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::DescribeDBClustersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeDBClusterSnapshotAttributesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeDBClusterSnapshotAttributesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDBClusterSnapshotAttributesError> for Error {
    fn from(err: crate::error::DescribeDBClusterSnapshotAttributesError) -> Self {
        match err {
            crate::error::DescribeDBClusterSnapshotAttributesError::DbClusterSnapshotNotFoundFault(inner) => Error::DbClusterSnapshotNotFoundFault(inner),
            crate::error::DescribeDBClusterSnapshotAttributesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDBClusterSnapshotsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDBClusterSnapshotsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDBClusterSnapshotsError> for Error {
    fn from(err: crate::error::DescribeDBClusterSnapshotsError) -> Self {
        match err {
            crate::error::DescribeDBClusterSnapshotsError::DbClusterSnapshotNotFoundFault(
                inner,
            ) => Error::DbClusterSnapshotNotFoundFault(inner),
            crate::error::DescribeDBClusterSnapshotsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDBEngineVersionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDBEngineVersionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDBEngineVersionsError> for Error {
    fn from(err: crate::error::DescribeDBEngineVersionsError) -> Self {
        match err {
            crate::error::DescribeDBEngineVersionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDBInstancesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDBInstancesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDBInstancesError> for Error {
    fn from(err: crate::error::DescribeDBInstancesError) -> Self {
        match err {
            crate::error::DescribeDBInstancesError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::DescribeDBInstancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDBParameterGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDBParameterGroupsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDBParameterGroupsError> for Error {
    fn from(err: crate::error::DescribeDBParameterGroupsError) -> Self {
        match err {
            crate::error::DescribeDBParameterGroupsError::DbParameterGroupNotFoundFault(inner) => {
                Error::DbParameterGroupNotFoundFault(inner)
            }
            crate::error::DescribeDBParameterGroupsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDBParametersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDBParametersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDBParametersError> for Error {
    fn from(err: crate::error::DescribeDBParametersError) -> Self {
        match err {
            crate::error::DescribeDBParametersError::DbParameterGroupNotFoundFault(inner) => {
                Error::DbParameterGroupNotFoundFault(inner)
            }
            crate::error::DescribeDBParametersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDBSubnetGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDBSubnetGroupsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDBSubnetGroupsError> for Error {
    fn from(err: crate::error::DescribeDBSubnetGroupsError) -> Self {
        match err {
            crate::error::DescribeDBSubnetGroupsError::DbSubnetGroupNotFoundFault(inner) => {
                Error::DbSubnetGroupNotFoundFault(inner)
            }
            crate::error::DescribeDBSubnetGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeEngineDefaultClusterParametersError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeEngineDefaultClusterParametersError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeEngineDefaultClusterParametersError> for Error {
    fn from(err: crate::error::DescribeEngineDefaultClusterParametersError) -> Self {
        match err {
            crate::error::DescribeEngineDefaultClusterParametersError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeEngineDefaultParametersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeEngineDefaultParametersError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeEngineDefaultParametersError> for Error {
    fn from(err: crate::error::DescribeEngineDefaultParametersError) -> Self {
        match err {
            crate::error::DescribeEngineDefaultParametersError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeEventCategoriesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeEventCategoriesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeEventCategoriesError> for Error {
    fn from(err: crate::error::DescribeEventCategoriesError) -> Self {
        match err {
            crate::error::DescribeEventCategoriesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeEventsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeEventsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeEventsError> for Error {
    fn from(err: crate::error::DescribeEventsError) -> Self {
        match err {
            crate::error::DescribeEventsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeEventSubscriptionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeEventSubscriptionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeEventSubscriptionsError> for Error {
    fn from(err: crate::error::DescribeEventSubscriptionsError) -> Self {
        match err {
            crate::error::DescribeEventSubscriptionsError::SubscriptionNotFoundFault(inner) => {
                Error::SubscriptionNotFoundFault(inner)
            }
            crate::error::DescribeEventSubscriptionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeGlobalClustersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeGlobalClustersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeGlobalClustersError> for Error {
    fn from(err: crate::error::DescribeGlobalClustersError) -> Self {
        match err {
            crate::error::DescribeGlobalClustersError::GlobalClusterNotFoundFault(inner) => {
                Error::GlobalClusterNotFoundFault(inner)
            }
            crate::error::DescribeGlobalClustersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::DescribeOrderableDBInstanceOptionsError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeOrderableDBInstanceOptionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeOrderableDBInstanceOptionsError> for Error {
    fn from(err: crate::error::DescribeOrderableDBInstanceOptionsError) -> Self {
        match err {
            crate::error::DescribeOrderableDBInstanceOptionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribePendingMaintenanceActionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribePendingMaintenanceActionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribePendingMaintenanceActionsError> for Error {
    fn from(err: crate::error::DescribePendingMaintenanceActionsError) -> Self {
        match err {
            crate::error::DescribePendingMaintenanceActionsError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::DescribePendingMaintenanceActionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeValidDBInstanceModificationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeValidDBInstanceModificationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeValidDBInstanceModificationsError> for Error {
    fn from(err: crate::error::DescribeValidDBInstanceModificationsError) -> Self {
        match err {
            crate::error::DescribeValidDBInstanceModificationsError::DbInstanceNotFoundFault(inner) => Error::DbInstanceNotFoundFault(inner),
            crate::error::DescribeValidDBInstanceModificationsError::InvalidDbInstanceStateFault(inner) => Error::InvalidDbInstanceStateFault(inner),
            crate::error::DescribeValidDBInstanceModificationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::FailoverDBClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::FailoverDBClusterError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::FailoverDBClusterError> for Error {
    fn from(err: crate::error::FailoverDBClusterError) -> Self {
        match err {
            crate::error::FailoverDBClusterError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::FailoverDBClusterError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::FailoverDBClusterError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::FailoverDBClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::FailoverGlobalClusterError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::FailoverGlobalClusterError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::FailoverGlobalClusterError> for Error {
    fn from(err: crate::error::FailoverGlobalClusterError) -> Self {
        match err {
            crate::error::FailoverGlobalClusterError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::FailoverGlobalClusterError::GlobalClusterNotFoundFault(inner) => {
                Error::GlobalClusterNotFoundFault(inner)
            }
            crate::error::FailoverGlobalClusterError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::FailoverGlobalClusterError::InvalidGlobalClusterStateFault(inner) => {
                Error::InvalidGlobalClusterStateFault(inner)
            }
            crate::error::FailoverGlobalClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::ListTagsForResourceError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::ListTagsForResourceError::DbSnapshotNotFoundFault(inner) => {
                Error::DbSnapshotNotFoundFault(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyDBClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ModifyDBClusterError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyDBClusterError> for Error {
    fn from(err: crate::error::ModifyDBClusterError) -> Self {
        match err {
            crate::error::ModifyDBClusterError::DbClusterAlreadyExistsFault(inner) => {
                Error::DbClusterAlreadyExistsFault(inner)
            }
            crate::error::ModifyDBClusterError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::ModifyDBClusterError::DbClusterParameterGroupNotFoundFault(inner) => {
                Error::DbClusterParameterGroupNotFoundFault(inner)
            }
            crate::error::ModifyDBClusterError::DbSubnetGroupNotFoundFault(inner) => {
                Error::DbSubnetGroupNotFoundFault(inner)
            }
            crate::error::ModifyDBClusterError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::ModifyDBClusterError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::ModifyDBClusterError::InvalidDbSecurityGroupStateFault(inner) => {
                Error::InvalidDbSecurityGroupStateFault(inner)
            }
            crate::error::ModifyDBClusterError::InvalidDbSubnetGroupStateFault(inner) => {
                Error::InvalidDbSubnetGroupStateFault(inner)
            }
            crate::error::ModifyDBClusterError::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
            crate::error::ModifyDBClusterError::InvalidVpcNetworkStateFault(inner) => {
                Error::InvalidVpcNetworkStateFault(inner)
            }
            crate::error::ModifyDBClusterError::StorageQuotaExceededFault(inner) => {
                Error::StorageQuotaExceededFault(inner)
            }
            crate::error::ModifyDBClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyDBClusterEndpointError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyDBClusterEndpointError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyDBClusterEndpointError> for Error {
    fn from(err: crate::error::ModifyDBClusterEndpointError) -> Self {
        match err {
            crate::error::ModifyDBClusterEndpointError::DbClusterEndpointNotFoundFault(inner) => {
                Error::DbClusterEndpointNotFoundFault(inner)
            }
            crate::error::ModifyDBClusterEndpointError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::ModifyDBClusterEndpointError::InvalidDbClusterEndpointStateFault(
                inner,
            ) => Error::InvalidDbClusterEndpointStateFault(inner),
            crate::error::ModifyDBClusterEndpointError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::ModifyDBClusterEndpointError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::ModifyDBClusterEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyDBClusterParameterGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyDBClusterParameterGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyDBClusterParameterGroupError> for Error {
    fn from(err: crate::error::ModifyDBClusterParameterGroupError) -> Self {
        match err {
            crate::error::ModifyDBClusterParameterGroupError::DbParameterGroupNotFoundFault(
                inner,
            ) => Error::DbParameterGroupNotFoundFault(inner),
            crate::error::ModifyDBClusterParameterGroupError::InvalidDbParameterGroupStateFault(
                inner,
            ) => Error::InvalidDbParameterGroupStateFault(inner),
            crate::error::ModifyDBClusterParameterGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ModifyDBClusterSnapshotAttributeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ModifyDBClusterSnapshotAttributeError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyDBClusterSnapshotAttributeError> for Error {
    fn from(err: crate::error::ModifyDBClusterSnapshotAttributeError) -> Self {
        match err {
            crate::error::ModifyDBClusterSnapshotAttributeError::DbClusterSnapshotNotFoundFault(inner) => Error::DbClusterSnapshotNotFoundFault(inner),
            crate::error::ModifyDBClusterSnapshotAttributeError::InvalidDbClusterSnapshotStateFault(inner) => Error::InvalidDbClusterSnapshotStateFault(inner),
            crate::error::ModifyDBClusterSnapshotAttributeError::SharedSnapshotQuotaExceededFault(inner) => Error::SharedSnapshotQuotaExceededFault(inner),
            crate::error::ModifyDBClusterSnapshotAttributeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyDBInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyDBInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyDBInstanceError> for Error {
    fn from(err: crate::error::ModifyDBInstanceError) -> Self {
        match err {
            crate::error::ModifyDBInstanceError::AuthorizationNotFoundFault(inner) => {
                Error::AuthorizationNotFoundFault(inner)
            }
            crate::error::ModifyDBInstanceError::CertificateNotFoundFault(inner) => {
                Error::CertificateNotFoundFault(inner)
            }
            crate::error::ModifyDBInstanceError::DbInstanceAlreadyExistsFault(inner) => {
                Error::DbInstanceAlreadyExistsFault(inner)
            }
            crate::error::ModifyDBInstanceError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::ModifyDBInstanceError::DbParameterGroupNotFoundFault(inner) => {
                Error::DbParameterGroupNotFoundFault(inner)
            }
            crate::error::ModifyDBInstanceError::DbSecurityGroupNotFoundFault(inner) => {
                Error::DbSecurityGroupNotFoundFault(inner)
            }
            crate::error::ModifyDBInstanceError::DbUpgradeDependencyFailureFault(inner) => {
                Error::DbUpgradeDependencyFailureFault(inner)
            }
            crate::error::ModifyDBInstanceError::DomainNotFoundFault(inner) => {
                Error::DomainNotFoundFault(inner)
            }
            crate::error::ModifyDBInstanceError::InsufficientDbInstanceCapacityFault(inner) => {
                Error::InsufficientDbInstanceCapacityFault(inner)
            }
            crate::error::ModifyDBInstanceError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::ModifyDBInstanceError::InvalidDbSecurityGroupStateFault(inner) => {
                Error::InvalidDbSecurityGroupStateFault(inner)
            }
            crate::error::ModifyDBInstanceError::InvalidVpcNetworkStateFault(inner) => {
                Error::InvalidVpcNetworkStateFault(inner)
            }
            crate::error::ModifyDBInstanceError::OptionGroupNotFoundFault(inner) => {
                Error::OptionGroupNotFoundFault(inner)
            }
            crate::error::ModifyDBInstanceError::ProvisionedIopsNotAvailableInAzFault(inner) => {
                Error::ProvisionedIopsNotAvailableInAzFault(inner)
            }
            crate::error::ModifyDBInstanceError::StorageQuotaExceededFault(inner) => {
                Error::StorageQuotaExceededFault(inner)
            }
            crate::error::ModifyDBInstanceError::StorageTypeNotSupportedFault(inner) => {
                Error::StorageTypeNotSupportedFault(inner)
            }
            crate::error::ModifyDBInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyDBParameterGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyDBParameterGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyDBParameterGroupError> for Error {
    fn from(err: crate::error::ModifyDBParameterGroupError) -> Self {
        match err {
            crate::error::ModifyDBParameterGroupError::DbParameterGroupNotFoundFault(inner) => {
                Error::DbParameterGroupNotFoundFault(inner)
            }
            crate::error::ModifyDBParameterGroupError::InvalidDbParameterGroupStateFault(inner) => {
                Error::InvalidDbParameterGroupStateFault(inner)
            }
            crate::error::ModifyDBParameterGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyDBSubnetGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyDBSubnetGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyDBSubnetGroupError> for Error {
    fn from(err: crate::error::ModifyDBSubnetGroupError) -> Self {
        match err {
            crate::error::ModifyDBSubnetGroupError::DbSubnetGroupDoesNotCoverEnoughAZs(inner) => {
                Error::DbSubnetGroupDoesNotCoverEnoughAZs(inner)
            }
            crate::error::ModifyDBSubnetGroupError::DbSubnetGroupNotFoundFault(inner) => {
                Error::DbSubnetGroupNotFoundFault(inner)
            }
            crate::error::ModifyDBSubnetGroupError::DbSubnetQuotaExceededFault(inner) => {
                Error::DbSubnetQuotaExceededFault(inner)
            }
            crate::error::ModifyDBSubnetGroupError::InvalidSubnet(inner) => {
                Error::InvalidSubnet(inner)
            }
            crate::error::ModifyDBSubnetGroupError::SubnetAlreadyInUse(inner) => {
                Error::SubnetAlreadyInUse(inner)
            }
            crate::error::ModifyDBSubnetGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyEventSubscriptionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyEventSubscriptionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyEventSubscriptionError> for Error {
    fn from(err: crate::error::ModifyEventSubscriptionError) -> Self {
        match err {
            crate::error::ModifyEventSubscriptionError::EventSubscriptionQuotaExceededFault(
                inner,
            ) => Error::EventSubscriptionQuotaExceededFault(inner),
            crate::error::ModifyEventSubscriptionError::SnsInvalidTopicFault(inner) => {
                Error::SnsInvalidTopicFault(inner)
            }
            crate::error::ModifyEventSubscriptionError::SnsNoAuthorizationFault(inner) => {
                Error::SnsNoAuthorizationFault(inner)
            }
            crate::error::ModifyEventSubscriptionError::SnsTopicArnNotFoundFault(inner) => {
                Error::SnsTopicArnNotFoundFault(inner)
            }
            crate::error::ModifyEventSubscriptionError::SubscriptionCategoryNotFoundFault(
                inner,
            ) => Error::SubscriptionCategoryNotFoundFault(inner),
            crate::error::ModifyEventSubscriptionError::SubscriptionNotFoundFault(inner) => {
                Error::SubscriptionNotFoundFault(inner)
            }
            crate::error::ModifyEventSubscriptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyGlobalClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyGlobalClusterError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyGlobalClusterError> for Error {
    fn from(err: crate::error::ModifyGlobalClusterError) -> Self {
        match err {
            crate::error::ModifyGlobalClusterError::GlobalClusterNotFoundFault(inner) => {
                Error::GlobalClusterNotFoundFault(inner)
            }
            crate::error::ModifyGlobalClusterError::InvalidGlobalClusterStateFault(inner) => {
                Error::InvalidGlobalClusterStateFault(inner)
            }
            crate::error::ModifyGlobalClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PromoteReadReplicaDBClusterError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PromoteReadReplicaDBClusterError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PromoteReadReplicaDBClusterError> for Error {
    fn from(err: crate::error::PromoteReadReplicaDBClusterError) -> Self {
        match err {
            crate::error::PromoteReadReplicaDBClusterError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::PromoteReadReplicaDBClusterError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::PromoteReadReplicaDBClusterError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RebootDBInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RebootDBInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RebootDBInstanceError> for Error {
    fn from(err: crate::error::RebootDBInstanceError) -> Self {
        match err {
            crate::error::RebootDBInstanceError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::RebootDBInstanceError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::RebootDBInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RemoveFromGlobalClusterError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RemoveFromGlobalClusterError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RemoveFromGlobalClusterError> for Error {
    fn from(err: crate::error::RemoveFromGlobalClusterError) -> Self {
        match err {
            crate::error::RemoveFromGlobalClusterError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::RemoveFromGlobalClusterError::GlobalClusterNotFoundFault(inner) => {
                Error::GlobalClusterNotFoundFault(inner)
            }
            crate::error::RemoveFromGlobalClusterError::InvalidGlobalClusterStateFault(inner) => {
                Error::InvalidGlobalClusterStateFault(inner)
            }
            crate::error::RemoveFromGlobalClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RemoveRoleFromDBClusterError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RemoveRoleFromDBClusterError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RemoveRoleFromDBClusterError> for Error {
    fn from(err: crate::error::RemoveRoleFromDBClusterError) -> Self {
        match err {
            crate::error::RemoveRoleFromDBClusterError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::RemoveRoleFromDBClusterError::DbClusterRoleNotFoundFault(inner) => {
                Error::DbClusterRoleNotFoundFault(inner)
            }
            crate::error::RemoveRoleFromDBClusterError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::RemoveRoleFromDBClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::RemoveSourceIdentifierFromSubscriptionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::RemoveSourceIdentifierFromSubscriptionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RemoveSourceIdentifierFromSubscriptionError> for Error {
    fn from(err: crate::error::RemoveSourceIdentifierFromSubscriptionError) -> Self {
        match err {
            crate::error::RemoveSourceIdentifierFromSubscriptionError::SourceNotFoundFault(inner) => Error::SourceNotFoundFault(inner),
            crate::error::RemoveSourceIdentifierFromSubscriptionError::SubscriptionNotFoundFault(inner) => Error::SubscriptionNotFoundFault(inner),
            crate::error::RemoveSourceIdentifierFromSubscriptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RemoveTagsFromResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RemoveTagsFromResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RemoveTagsFromResourceError> for Error {
    fn from(err: crate::error::RemoveTagsFromResourceError) -> Self {
        match err {
            crate::error::RemoveTagsFromResourceError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::RemoveTagsFromResourceError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::RemoveTagsFromResourceError::DbSnapshotNotFoundFault(inner) => {
                Error::DbSnapshotNotFoundFault(inner)
            }
            crate::error::RemoveTagsFromResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ResetDBClusterParameterGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ResetDBClusterParameterGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ResetDBClusterParameterGroupError> for Error {
    fn from(err: crate::error::ResetDBClusterParameterGroupError) -> Self {
        match err {
            crate::error::ResetDBClusterParameterGroupError::DbParameterGroupNotFoundFault(
                inner,
            ) => Error::DbParameterGroupNotFoundFault(inner),
            crate::error::ResetDBClusterParameterGroupError::InvalidDbParameterGroupStateFault(
                inner,
            ) => Error::InvalidDbParameterGroupStateFault(inner),
            crate::error::ResetDBClusterParameterGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ResetDBParameterGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ResetDBParameterGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ResetDBParameterGroupError> for Error {
    fn from(err: crate::error::ResetDBParameterGroupError) -> Self {
        match err {
            crate::error::ResetDBParameterGroupError::DbParameterGroupNotFoundFault(inner) => {
                Error::DbParameterGroupNotFoundFault(inner)
            }
            crate::error::ResetDBParameterGroupError::InvalidDbParameterGroupStateFault(inner) => {
                Error::InvalidDbParameterGroupStateFault(inner)
            }
            crate::error::ResetDBParameterGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RestoreDBClusterFromSnapshotError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RestoreDBClusterFromSnapshotError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RestoreDBClusterFromSnapshotError> for Error {
    fn from(err: crate::error::RestoreDBClusterFromSnapshotError) -> Self {
        match err {
            crate::error::RestoreDBClusterFromSnapshotError::DbClusterAlreadyExistsFault(inner) => Error::DbClusterAlreadyExistsFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::DbClusterParameterGroupNotFoundFault(inner) => Error::DbClusterParameterGroupNotFoundFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::DbClusterQuotaExceededFault(inner) => Error::DbClusterQuotaExceededFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::DbClusterSnapshotNotFoundFault(inner) => Error::DbClusterSnapshotNotFoundFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::DbSnapshotNotFoundFault(inner) => Error::DbSnapshotNotFoundFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::DbSubnetGroupNotFoundFault(inner) => Error::DbSubnetGroupNotFoundFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::InsufficientDbClusterCapacityFault(inner) => Error::InsufficientDbClusterCapacityFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::InsufficientStorageClusterCapacityFault(inner) => Error::InsufficientStorageClusterCapacityFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::InvalidDbClusterSnapshotStateFault(inner) => Error::InvalidDbClusterSnapshotStateFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::InvalidDbSnapshotStateFault(inner) => Error::InvalidDbSnapshotStateFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::InvalidRestoreFault(inner) => Error::InvalidRestoreFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
            crate::error::RestoreDBClusterFromSnapshotError::InvalidVpcNetworkStateFault(inner) => Error::InvalidVpcNetworkStateFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::KmsKeyNotAccessibleFault(inner) => Error::KmsKeyNotAccessibleFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::OptionGroupNotFoundFault(inner) => Error::OptionGroupNotFoundFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::StorageQuotaExceededFault(inner) => Error::StorageQuotaExceededFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RestoreDBClusterToPointInTimeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RestoreDBClusterToPointInTimeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RestoreDBClusterToPointInTimeError> for Error {
    fn from(err: crate::error::RestoreDBClusterToPointInTimeError) -> Self {
        match err {
            crate::error::RestoreDBClusterToPointInTimeError::DbClusterAlreadyExistsFault(inner) => Error::DbClusterAlreadyExistsFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::DbClusterNotFoundFault(inner) => Error::DbClusterNotFoundFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::DbClusterParameterGroupNotFoundFault(inner) => Error::DbClusterParameterGroupNotFoundFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::DbClusterQuotaExceededFault(inner) => Error::DbClusterQuotaExceededFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::DbClusterSnapshotNotFoundFault(inner) => Error::DbClusterSnapshotNotFoundFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::DbSubnetGroupNotFoundFault(inner) => Error::DbSubnetGroupNotFoundFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::InsufficientDbClusterCapacityFault(inner) => Error::InsufficientDbClusterCapacityFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::InsufficientStorageClusterCapacityFault(inner) => Error::InsufficientStorageClusterCapacityFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::InvalidDbClusterSnapshotStateFault(inner) => Error::InvalidDbClusterSnapshotStateFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::InvalidDbClusterStateFault(inner) => Error::InvalidDbClusterStateFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::InvalidDbSnapshotStateFault(inner) => Error::InvalidDbSnapshotStateFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::InvalidRestoreFault(inner) => Error::InvalidRestoreFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
            crate::error::RestoreDBClusterToPointInTimeError::InvalidVpcNetworkStateFault(inner) => Error::InvalidVpcNetworkStateFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::KmsKeyNotAccessibleFault(inner) => Error::KmsKeyNotAccessibleFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::OptionGroupNotFoundFault(inner) => Error::OptionGroupNotFoundFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::StorageQuotaExceededFault(inner) => Error::StorageQuotaExceededFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartDBClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StartDBClusterError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartDBClusterError> for Error {
    fn from(err: crate::error::StartDBClusterError) -> Self {
        match err {
            crate::error::StartDBClusterError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::StartDBClusterError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::StartDBClusterError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::StartDBClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopDBClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StopDBClusterError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopDBClusterError> for Error {
    fn from(err: crate::error::StopDBClusterError) -> Self {
        match err {
            crate::error::StopDBClusterError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::StopDBClusterError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::StopDBClusterError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::StopDBClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AuthorizationNotFoundFault(e) => e.request_id(),
            Self::CertificateNotFoundFault(e) => e.request_id(),
            Self::DbClusterAlreadyExistsFault(e) => e.request_id(),
            Self::DbClusterEndpointAlreadyExistsFault(e) => e.request_id(),
            Self::DbClusterEndpointNotFoundFault(e) => e.request_id(),
            Self::DbClusterEndpointQuotaExceededFault(e) => e.request_id(),
            Self::DbClusterNotFoundFault(e) => e.request_id(),
            Self::DbClusterParameterGroupNotFoundFault(e) => e.request_id(),
            Self::DbClusterQuotaExceededFault(e) => e.request_id(),
            Self::DbClusterRoleAlreadyExistsFault(e) => e.request_id(),
            Self::DbClusterRoleNotFoundFault(e) => e.request_id(),
            Self::DbClusterRoleQuotaExceededFault(e) => e.request_id(),
            Self::DbClusterSnapshotAlreadyExistsFault(e) => e.request_id(),
            Self::DbClusterSnapshotNotFoundFault(e) => e.request_id(),
            Self::DbInstanceAlreadyExistsFault(e) => e.request_id(),
            Self::DbInstanceNotFoundFault(e) => e.request_id(),
            Self::DbParameterGroupAlreadyExistsFault(e) => e.request_id(),
            Self::DbParameterGroupNotFoundFault(e) => e.request_id(),
            Self::DbParameterGroupQuotaExceededFault(e) => e.request_id(),
            Self::DbSecurityGroupNotFoundFault(e) => e.request_id(),
            Self::DbSnapshotAlreadyExistsFault(e) => e.request_id(),
            Self::DbSnapshotNotFoundFault(e) => e.request_id(),
            Self::DbSubnetGroupAlreadyExistsFault(e) => e.request_id(),
            Self::DbSubnetGroupDoesNotCoverEnoughAZs(e) => e.request_id(),
            Self::DbSubnetGroupNotFoundFault(e) => e.request_id(),
            Self::DbSubnetGroupQuotaExceededFault(e) => e.request_id(),
            Self::DbSubnetQuotaExceededFault(e) => e.request_id(),
            Self::DbUpgradeDependencyFailureFault(e) => e.request_id(),
            Self::DomainNotFoundFault(e) => e.request_id(),
            Self::EventSubscriptionQuotaExceededFault(e) => e.request_id(),
            Self::GlobalClusterAlreadyExistsFault(e) => e.request_id(),
            Self::GlobalClusterNotFoundFault(e) => e.request_id(),
            Self::GlobalClusterQuotaExceededFault(e) => e.request_id(),
            Self::InstanceQuotaExceededFault(e) => e.request_id(),
            Self::InsufficientDbClusterCapacityFault(e) => e.request_id(),
            Self::InsufficientDbInstanceCapacityFault(e) => e.request_id(),
            Self::InsufficientStorageClusterCapacityFault(e) => e.request_id(),
            Self::InvalidDbClusterEndpointStateFault(e) => e.request_id(),
            Self::InvalidDbClusterSnapshotStateFault(e) => e.request_id(),
            Self::InvalidDbClusterStateFault(e) => e.request_id(),
            Self::InvalidDbInstanceStateFault(e) => e.request_id(),
            Self::InvalidDbParameterGroupStateFault(e) => e.request_id(),
            Self::InvalidDbSecurityGroupStateFault(e) => e.request_id(),
            Self::InvalidDbSnapshotStateFault(e) => e.request_id(),
            Self::InvalidDbSubnetGroupStateFault(e) => e.request_id(),
            Self::InvalidDbSubnetStateFault(e) => e.request_id(),
            Self::InvalidEventSubscriptionStateFault(e) => e.request_id(),
            Self::InvalidGlobalClusterStateFault(e) => e.request_id(),
            Self::InvalidRestoreFault(e) => e.request_id(),
            Self::InvalidSubnet(e) => e.request_id(),
            Self::InvalidVpcNetworkStateFault(e) => e.request_id(),
            Self::KmsKeyNotAccessibleFault(e) => e.request_id(),
            Self::OptionGroupNotFoundFault(e) => e.request_id(),
            Self::ProvisionedIopsNotAvailableInAzFault(e) => e.request_id(),
            Self::ResourceNotFoundFault(e) => e.request_id(),
            Self::SnsInvalidTopicFault(e) => e.request_id(),
            Self::SnsNoAuthorizationFault(e) => e.request_id(),
            Self::SnsTopicArnNotFoundFault(e) => e.request_id(),
            Self::SharedSnapshotQuotaExceededFault(e) => e.request_id(),
            Self::SnapshotQuotaExceededFault(e) => e.request_id(),
            Self::SourceNotFoundFault(e) => e.request_id(),
            Self::StorageQuotaExceededFault(e) => e.request_id(),
            Self::StorageTypeNotSupportedFault(e) => e.request_id(),
            Self::SubnetAlreadyInUse(e) => e.request_id(),
            Self::SubscriptionAlreadyExistFault(e) => e.request_id(),
            Self::SubscriptionCategoryNotFoundFault(e) => e.request_id(),
            Self::SubscriptionNotFoundFault(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
