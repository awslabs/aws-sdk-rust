#![allow(clippy::module_inception)]
#![allow(clippy::upper_case_acronyms)]
#![allow(clippy::large_enum_variant)]
#![allow(clippy::wrong_self_convention)]
#![allow(clippy::should_implement_trait)]
#![allow(clippy::blacklisted_name)]
#![allow(clippy::vec_init_then_push)]
#![allow(rustdoc::bare_urls)]
//! <fullname>Amazon Neptune</fullname>
//! <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it
//! easy to build and run applications that work with highly connected datasets. The core of
//! Amazon Neptune is a purpose-built, high-performance graph database engine optimized for
//! storing billions of relationships and querying the graph with milliseconds latency. Amazon
//! Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query
//! languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that
//! efficiently navigate highly connected datasets. Neptune powers graph use cases such as
//! recommendation engines, fraud detection, knowledge graphs, drug discovery, and network
//! security.</p>
//! <p>This interface reference for Amazon Neptune contains documentation for a programming or
//! command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is
//! asynchronous, which means that some interfaces might require techniques such as polling or
//! callback functions to determine when a command has been applied. In this reference, the
//! parameter descriptions indicate whether a command is applied immediately, on the next instance
//! reboot, or during the maintenance window. The reference structure is as follows, and we list
//! following some related topics from the user guide.</p>

// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use error_meta::Error;

pub use config::Config;

mod aws_endpoint;
#[cfg(feature = "client")]
pub mod client;
pub mod config;
pub mod error;
mod error_meta;
pub mod input;
pub mod model;
mod no_credentials;
pub mod operation;
mod operation_deser;
mod operation_ser;
pub mod output;
mod query_ser;
mod rest_xml_wrapped_errors;
mod xml_deser;
pub static PKG_VERSION: &str = env!("CARGO_PKG_VERSION");
pub use smithy_http::byte_stream::ByteStream;
pub use smithy_http::result::SdkError;
pub use smithy_types::Blob;
static API_METADATA: aws_http::user_agent::ApiMetadata =
    aws_http::user_agent::ApiMetadata::new("neptune", PKG_VERSION);
pub use aws_types::region::Region;
pub use aws_types::Credentials;
#[cfg(feature = "client")]
pub use client::Client;
pub use smithy_http::endpoint::Endpoint;
