// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn parse_http_generic_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<smithy_types::Error, smithy_xml::decode::XmlError> {
    crate::rest_xml_wrapped_errors::parse_generic_error(response.body().as_ref())
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_db_cluster_not_found_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::db_cluster_not_found_fault::Builder,
) -> Result<crate::error::db_cluster_not_found_fault::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#DBClusterNotFoundFault$message */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_1);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_db_cluster_role_already_exists_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::db_cluster_role_already_exists_fault::Builder,
) -> Result<crate::error::db_cluster_role_already_exists_fault::Builder, smithy_xml::decode::XmlError>
{
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#DBClusterRoleAlreadyExistsFault$message */ =>  {
                let var_2 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_2);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_db_cluster_role_quota_exceeded_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::db_cluster_role_quota_exceeded_fault::Builder,
) -> Result<crate::error::db_cluster_role_quota_exceeded_fault::Builder, smithy_xml::decode::XmlError>
{
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#DBClusterRoleQuotaExceededFault$message */ =>  {
                let var_3 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_3);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_invalid_db_cluster_state_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::invalid_db_cluster_state_fault::Builder,
) -> Result<crate::error::invalid_db_cluster_state_fault::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#InvalidDBClusterStateFault$message */ =>  {
                let var_4 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_4);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_source_not_found_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::source_not_found_fault::Builder,
) -> Result<crate::error::source_not_found_fault::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#SourceNotFoundFault$message */ =>  {
                let var_5 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_5);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_subscription_not_found_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::subscription_not_found_fault::Builder,
) -> Result<crate::error::subscription_not_found_fault::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#SubscriptionNotFoundFault$message */ =>  {
                let var_6 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_6);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_add_source_identifier_to_subscription(
    inp: &[u8],
    mut builder: crate::output::add_source_identifier_to_subscription_output::Builder,
) -> Result<
    crate::output::add_source_identifier_to_subscription_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("AddSourceIdentifierToSubscriptionResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected AddSourceIdentifierToSubscriptionResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("AddSourceIdentifierToSubscriptionResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected AddSourceIdentifierToSubscriptionResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("EventSubscription") /* EventSubscription com.amazonaws.neptune.synthetic#AddSourceIdentifierToSubscriptionOutput$EventSubscription */ =>  {
                let var_7 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_event_subscription(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_event_subscription(var_7);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected AddSourceIdentifierToSubscriptionResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_db_instance_not_found_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::db_instance_not_found_fault::Builder,
) -> Result<crate::error::db_instance_not_found_fault::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#DBInstanceNotFoundFault$message */ =>  {
                let var_8 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_8);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_db_snapshot_not_found_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::db_snapshot_not_found_fault::Builder,
) -> Result<crate::error::db_snapshot_not_found_fault::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#DBSnapshotNotFoundFault$message */ =>  {
                let var_9 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_9);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_resource_not_found_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::resource_not_found_fault::Builder,
) -> Result<crate::error::resource_not_found_fault::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#ResourceNotFoundFault$message */ =>  {
                let var_10 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_10);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_apply_pending_maintenance_action(
    inp: &[u8],
    mut builder: crate::output::apply_pending_maintenance_action_output::Builder,
) -> Result<
    crate::output::apply_pending_maintenance_action_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ApplyPendingMaintenanceActionResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ApplyPendingMaintenanceActionResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("ApplyPendingMaintenanceActionResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected ApplyPendingMaintenanceActionResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("ResourcePendingMaintenanceActions") /* ResourcePendingMaintenanceActions com.amazonaws.neptune.synthetic#ApplyPendingMaintenanceActionOutput$ResourcePendingMaintenanceActions */ =>  {
                let var_11 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_resource_pending_maintenance_actions(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_resource_pending_maintenance_actions(var_11);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected ApplyPendingMaintenanceActionResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_db_parameter_group_already_exists_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::db_parameter_group_already_exists_fault::Builder,
) -> Result<
    crate::error::db_parameter_group_already_exists_fault::Builder,
    smithy_xml::decode::XmlError,
> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#DBParameterGroupAlreadyExistsFault$message */ =>  {
                let var_12 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_12);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_db_parameter_group_not_found_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::db_parameter_group_not_found_fault::Builder,
) -> Result<crate::error::db_parameter_group_not_found_fault::Builder, smithy_xml::decode::XmlError>
{
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#DBParameterGroupNotFoundFault$message */ =>  {
                let var_13 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_13);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_db_parameter_group_quota_exceeded_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::db_parameter_group_quota_exceeded_fault::Builder,
) -> Result<
    crate::error::db_parameter_group_quota_exceeded_fault::Builder,
    smithy_xml::decode::XmlError,
> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#DBParameterGroupQuotaExceededFault$message */ =>  {
                let var_14 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_14);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_copy_db_cluster_parameter_group(
    inp: &[u8],
    mut builder: crate::output::copy_db_cluster_parameter_group_output::Builder,
) -> Result<
    crate::output::copy_db_cluster_parameter_group_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CopyDBClusterParameterGroupResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CopyDBClusterParameterGroupResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("CopyDBClusterParameterGroupResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected CopyDBClusterParameterGroupResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("DBClusterParameterGroup") /* DBClusterParameterGroup com.amazonaws.neptune.synthetic#CopyDBClusterParameterGroupOutput$DBClusterParameterGroup */ =>  {
                let var_15 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_db_cluster_parameter_group(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_db_cluster_parameter_group(var_15);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected CopyDBClusterParameterGroupResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_db_cluster_snapshot_already_exists_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::db_cluster_snapshot_already_exists_fault::Builder,
) -> Result<
    crate::error::db_cluster_snapshot_already_exists_fault::Builder,
    smithy_xml::decode::XmlError,
> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#DBClusterSnapshotAlreadyExistsFault$message */ =>  {
                let var_16 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_16);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_db_cluster_snapshot_not_found_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::db_cluster_snapshot_not_found_fault::Builder,
) -> Result<crate::error::db_cluster_snapshot_not_found_fault::Builder, smithy_xml::decode::XmlError>
{
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#DBClusterSnapshotNotFoundFault$message */ =>  {
                let var_17 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_17);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_invalid_db_cluster_snapshot_state_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::invalid_db_cluster_snapshot_state_fault::Builder,
) -> Result<
    crate::error::invalid_db_cluster_snapshot_state_fault::Builder,
    smithy_xml::decode::XmlError,
> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#InvalidDBClusterSnapshotStateFault$message */ =>  {
                let var_18 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_18);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_kms_key_not_accessible_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::kms_key_not_accessible_fault::Builder,
) -> Result<crate::error::kms_key_not_accessible_fault::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#KMSKeyNotAccessibleFault$message */ =>  {
                let var_19 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_19);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_snapshot_quota_exceeded_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::snapshot_quota_exceeded_fault::Builder,
) -> Result<crate::error::snapshot_quota_exceeded_fault::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#SnapshotQuotaExceededFault$message */ =>  {
                let var_20 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_20);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_copy_db_cluster_snapshot(
    inp: &[u8],
    mut builder: crate::output::copy_db_cluster_snapshot_output::Builder,
) -> Result<crate::output::copy_db_cluster_snapshot_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CopyDBClusterSnapshotResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CopyDBClusterSnapshotResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("CopyDBClusterSnapshotResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected CopyDBClusterSnapshotResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("DBClusterSnapshot") /* DBClusterSnapshot com.amazonaws.neptune.synthetic#CopyDBClusterSnapshotOutput$DBClusterSnapshot */ =>  {
                let var_21 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_db_cluster_snapshot(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_db_cluster_snapshot(var_21);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected CopyDBClusterSnapshotResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_copy_db_parameter_group(
    inp: &[u8],
    mut builder: crate::output::copy_db_parameter_group_output::Builder,
) -> Result<crate::output::copy_db_parameter_group_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CopyDBParameterGroupResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CopyDBParameterGroupResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("CopyDBParameterGroupResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected CopyDBParameterGroupResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("DBParameterGroup") /* DBParameterGroup com.amazonaws.neptune.synthetic#CopyDBParameterGroupOutput$DBParameterGroup */ =>  {
                let var_22 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_db_parameter_group(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_db_parameter_group(var_22);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected CopyDBParameterGroupResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_db_cluster_already_exists_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::db_cluster_already_exists_fault::Builder,
) -> Result<crate::error::db_cluster_already_exists_fault::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#DBClusterAlreadyExistsFault$message */ =>  {
                let var_23 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_23);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_db_cluster_parameter_group_not_found_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::db_cluster_parameter_group_not_found_fault::Builder,
) -> Result<
    crate::error::db_cluster_parameter_group_not_found_fault::Builder,
    smithy_xml::decode::XmlError,
> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#DBClusterParameterGroupNotFoundFault$message */ =>  {
                let var_24 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_24);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_db_cluster_quota_exceeded_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::db_cluster_quota_exceeded_fault::Builder,
) -> Result<crate::error::db_cluster_quota_exceeded_fault::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#DBClusterQuotaExceededFault$message */ =>  {
                let var_25 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_25);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_db_subnet_group_does_not_cover_enough_a_zs_xml_err(
    inp: &[u8],
    mut builder: crate::error::db_subnet_group_does_not_cover_enough_a_zs::Builder,
) -> Result<
    crate::error::db_subnet_group_does_not_cover_enough_a_zs::Builder,
    smithy_xml::decode::XmlError,
> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#DBSubnetGroupDoesNotCoverEnoughAZs$message */ =>  {
                let var_26 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_26);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_db_subnet_group_not_found_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::db_subnet_group_not_found_fault::Builder,
) -> Result<crate::error::db_subnet_group_not_found_fault::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#DBSubnetGroupNotFoundFault$message */ =>  {
                let var_27 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_27);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_insufficient_storage_cluster_capacity_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::insufficient_storage_cluster_capacity_fault::Builder,
) -> Result<
    crate::error::insufficient_storage_cluster_capacity_fault::Builder,
    smithy_xml::decode::XmlError,
> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#InsufficientStorageClusterCapacityFault$message */ =>  {
                let var_28 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_28);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_invalid_db_instance_state_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::invalid_db_instance_state_fault::Builder,
) -> Result<crate::error::invalid_db_instance_state_fault::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#InvalidDBInstanceStateFault$message */ =>  {
                let var_29 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_29);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_invalid_db_subnet_group_state_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::invalid_db_subnet_group_state_fault::Builder,
) -> Result<crate::error::invalid_db_subnet_group_state_fault::Builder, smithy_xml::decode::XmlError>
{
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#InvalidDBSubnetGroupStateFault$message */ =>  {
                let var_30 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_30);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_invalid_subnet_xml_err(
    inp: &[u8],
    mut builder: crate::error::invalid_subnet::Builder,
) -> Result<crate::error::invalid_subnet::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#InvalidSubnet$message */ =>  {
                let var_31 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_31);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_invalid_vpc_network_state_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::invalid_vpc_network_state_fault::Builder,
) -> Result<crate::error::invalid_vpc_network_state_fault::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#InvalidVPCNetworkStateFault$message */ =>  {
                let var_32 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_32);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_storage_quota_exceeded_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::storage_quota_exceeded_fault::Builder,
) -> Result<crate::error::storage_quota_exceeded_fault::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#StorageQuotaExceededFault$message */ =>  {
                let var_33 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_33);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_db_cluster(
    inp: &[u8],
    mut builder: crate::output::create_db_cluster_output::Builder,
) -> Result<crate::output::create_db_cluster_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateDBClusterResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateDBClusterResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("CreateDBClusterResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected CreateDBClusterResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("DBCluster") /* DBCluster com.amazonaws.neptune.synthetic#CreateDBClusterOutput$DBCluster */ =>  {
                let var_34 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_db_cluster(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_db_cluster(var_34);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected CreateDBClusterResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_db_cluster_endpoint_already_exists_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::db_cluster_endpoint_already_exists_fault::Builder,
) -> Result<
    crate::error::db_cluster_endpoint_already_exists_fault::Builder,
    smithy_xml::decode::XmlError,
> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#DBClusterEndpointAlreadyExistsFault$message */ =>  {
                let var_35 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_35);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_db_cluster_endpoint_quota_exceeded_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::db_cluster_endpoint_quota_exceeded_fault::Builder,
) -> Result<
    crate::error::db_cluster_endpoint_quota_exceeded_fault::Builder,
    smithy_xml::decode::XmlError,
> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#DBClusterEndpointQuotaExceededFault$message */ =>  {
                let var_36 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_36);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_db_cluster_endpoint(
    inp: &[u8],
    mut builder: crate::output::create_db_cluster_endpoint_output::Builder,
) -> Result<crate::output::create_db_cluster_endpoint_output::Builder, smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateDBClusterEndpointResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateDBClusterEndpointResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("CreateDBClusterEndpointResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected CreateDBClusterEndpointResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("DBClusterEndpointIdentifier") /* DBClusterEndpointIdentifier com.amazonaws.neptune.synthetic#CreateDBClusterEndpointOutput$DBClusterEndpointIdentifier */ =>  {
                let var_37 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_cluster_endpoint_identifier(var_37);
            }
            ,
            s if s.matches("DBClusterIdentifier") /* DBClusterIdentifier com.amazonaws.neptune.synthetic#CreateDBClusterEndpointOutput$DBClusterIdentifier */ =>  {
                let var_38 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_cluster_identifier(var_38);
            }
            ,
            s if s.matches("DBClusterEndpointResourceIdentifier") /* DBClusterEndpointResourceIdentifier com.amazonaws.neptune.synthetic#CreateDBClusterEndpointOutput$DBClusterEndpointResourceIdentifier */ =>  {
                let var_39 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_cluster_endpoint_resource_identifier(var_39);
            }
            ,
            s if s.matches("Endpoint") /* Endpoint com.amazonaws.neptune.synthetic#CreateDBClusterEndpointOutput$Endpoint */ =>  {
                let var_40 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_endpoint(var_40);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.neptune.synthetic#CreateDBClusterEndpointOutput$Status */ =>  {
                let var_41 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_41);
            }
            ,
            s if s.matches("EndpointType") /* EndpointType com.amazonaws.neptune.synthetic#CreateDBClusterEndpointOutput$EndpointType */ =>  {
                let var_42 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_endpoint_type(var_42);
            }
            ,
            s if s.matches("CustomEndpointType") /* CustomEndpointType com.amazonaws.neptune.synthetic#CreateDBClusterEndpointOutput$CustomEndpointType */ =>  {
                let var_43 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_custom_endpoint_type(var_43);
            }
            ,
            s if s.matches("StaticMembers") /* StaticMembers com.amazonaws.neptune.synthetic#CreateDBClusterEndpointOutput$StaticMembers */ =>  {
                let var_44 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_static_members(var_44);
            }
            ,
            s if s.matches("ExcludedMembers") /* ExcludedMembers com.amazonaws.neptune.synthetic#CreateDBClusterEndpointOutput$ExcludedMembers */ =>  {
                let var_45 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_excluded_members(var_45);
            }
            ,
            s if s.matches("DBClusterEndpointArn") /* DBClusterEndpointArn com.amazonaws.neptune.synthetic#CreateDBClusterEndpointOutput$DBClusterEndpointArn */ =>  {
                let var_46 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_cluster_endpoint_arn(var_46);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected CreateDBClusterEndpointResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_db_cluster_parameter_group(
    inp: &[u8],
    mut builder: crate::output::create_db_cluster_parameter_group_output::Builder,
) -> Result<
    crate::output::create_db_cluster_parameter_group_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateDBClusterParameterGroupResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateDBClusterParameterGroupResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("CreateDBClusterParameterGroupResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected CreateDBClusterParameterGroupResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("DBClusterParameterGroup") /* DBClusterParameterGroup com.amazonaws.neptune.synthetic#CreateDBClusterParameterGroupOutput$DBClusterParameterGroup */ =>  {
                let var_47 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_db_cluster_parameter_group(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_db_cluster_parameter_group(var_47);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected CreateDBClusterParameterGroupResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_db_cluster_snapshot(
    inp: &[u8],
    mut builder: crate::output::create_db_cluster_snapshot_output::Builder,
) -> Result<crate::output::create_db_cluster_snapshot_output::Builder, smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateDBClusterSnapshotResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateDBClusterSnapshotResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("CreateDBClusterSnapshotResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected CreateDBClusterSnapshotResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("DBClusterSnapshot") /* DBClusterSnapshot com.amazonaws.neptune.synthetic#CreateDBClusterSnapshotOutput$DBClusterSnapshot */ =>  {
                let var_48 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_db_cluster_snapshot(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_db_cluster_snapshot(var_48);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected CreateDBClusterSnapshotResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_authorization_not_found_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::authorization_not_found_fault::Builder,
) -> Result<crate::error::authorization_not_found_fault::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#AuthorizationNotFoundFault$message */ =>  {
                let var_49 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_49);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_db_instance_already_exists_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::db_instance_already_exists_fault::Builder,
) -> Result<crate::error::db_instance_already_exists_fault::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#DBInstanceAlreadyExistsFault$message */ =>  {
                let var_50 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_50);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_db_security_group_not_found_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::db_security_group_not_found_fault::Builder,
) -> Result<crate::error::db_security_group_not_found_fault::Builder, smithy_xml::decode::XmlError>
{
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#DBSecurityGroupNotFoundFault$message */ =>  {
                let var_51 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_51);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_domain_not_found_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::domain_not_found_fault::Builder,
) -> Result<crate::error::domain_not_found_fault::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#DomainNotFoundFault$message */ =>  {
                let var_52 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_52);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_instance_quota_exceeded_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::instance_quota_exceeded_fault::Builder,
) -> Result<crate::error::instance_quota_exceeded_fault::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#InstanceQuotaExceededFault$message */ =>  {
                let var_53 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_53);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_insufficient_db_instance_capacity_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::insufficient_db_instance_capacity_fault::Builder,
) -> Result<
    crate::error::insufficient_db_instance_capacity_fault::Builder,
    smithy_xml::decode::XmlError,
> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#InsufficientDBInstanceCapacityFault$message */ =>  {
                let var_54 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_54);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_option_group_not_found_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::option_group_not_found_fault::Builder,
) -> Result<crate::error::option_group_not_found_fault::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#OptionGroupNotFoundFault$message */ =>  {
                let var_55 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_55);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_provisioned_iops_not_available_in_az_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::provisioned_iops_not_available_in_az_fault::Builder,
) -> Result<
    crate::error::provisioned_iops_not_available_in_az_fault::Builder,
    smithy_xml::decode::XmlError,
> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#ProvisionedIopsNotAvailableInAZFault$message */ =>  {
                let var_56 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_56);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_storage_type_not_supported_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::storage_type_not_supported_fault::Builder,
) -> Result<crate::error::storage_type_not_supported_fault::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#StorageTypeNotSupportedFault$message */ =>  {
                let var_57 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_57);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_db_instance(
    inp: &[u8],
    mut builder: crate::output::create_db_instance_output::Builder,
) -> Result<crate::output::create_db_instance_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateDBInstanceResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateDBInstanceResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("CreateDBInstanceResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected CreateDBInstanceResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("DBInstance") /* DBInstance com.amazonaws.neptune.synthetic#CreateDBInstanceOutput$DBInstance */ =>  {
                let var_58 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_db_instance(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_db_instance(var_58);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected CreateDBInstanceResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_db_parameter_group(
    inp: &[u8],
    mut builder: crate::output::create_db_parameter_group_output::Builder,
) -> Result<crate::output::create_db_parameter_group_output::Builder, smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateDBParameterGroupResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateDBParameterGroupResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("CreateDBParameterGroupResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected CreateDBParameterGroupResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("DBParameterGroup") /* DBParameterGroup com.amazonaws.neptune.synthetic#CreateDBParameterGroupOutput$DBParameterGroup */ =>  {
                let var_59 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_db_parameter_group(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_db_parameter_group(var_59);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected CreateDBParameterGroupResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_db_subnet_group_already_exists_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::db_subnet_group_already_exists_fault::Builder,
) -> Result<crate::error::db_subnet_group_already_exists_fault::Builder, smithy_xml::decode::XmlError>
{
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#DBSubnetGroupAlreadyExistsFault$message */ =>  {
                let var_60 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_60);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_db_subnet_group_quota_exceeded_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::db_subnet_group_quota_exceeded_fault::Builder,
) -> Result<crate::error::db_subnet_group_quota_exceeded_fault::Builder, smithy_xml::decode::XmlError>
{
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#DBSubnetGroupQuotaExceededFault$message */ =>  {
                let var_61 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_61);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_db_subnet_quota_exceeded_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::db_subnet_quota_exceeded_fault::Builder,
) -> Result<crate::error::db_subnet_quota_exceeded_fault::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#DBSubnetQuotaExceededFault$message */ =>  {
                let var_62 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_62);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_db_subnet_group(
    inp: &[u8],
    mut builder: crate::output::create_db_subnet_group_output::Builder,
) -> Result<crate::output::create_db_subnet_group_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateDBSubnetGroupResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateDBSubnetGroupResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("CreateDBSubnetGroupResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected CreateDBSubnetGroupResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("DBSubnetGroup") /* DBSubnetGroup com.amazonaws.neptune.synthetic#CreateDBSubnetGroupOutput$DBSubnetGroup */ =>  {
                let var_63 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_db_subnet_group(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_db_subnet_group(var_63);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected CreateDBSubnetGroupResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_event_subscription_quota_exceeded_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::event_subscription_quota_exceeded_fault::Builder,
) -> Result<
    crate::error::event_subscription_quota_exceeded_fault::Builder,
    smithy_xml::decode::XmlError,
> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#EventSubscriptionQuotaExceededFault$message */ =>  {
                let var_64 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_64);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_sns_invalid_topic_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::sns_invalid_topic_fault::Builder,
) -> Result<crate::error::sns_invalid_topic_fault::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#SNSInvalidTopicFault$message */ =>  {
                let var_65 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_65);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_sns_no_authorization_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::sns_no_authorization_fault::Builder,
) -> Result<crate::error::sns_no_authorization_fault::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#SNSNoAuthorizationFault$message */ =>  {
                let var_66 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_66);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_sns_topic_arn_not_found_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::sns_topic_arn_not_found_fault::Builder,
) -> Result<crate::error::sns_topic_arn_not_found_fault::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#SNSTopicArnNotFoundFault$message */ =>  {
                let var_67 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_67);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_subscription_already_exist_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::subscription_already_exist_fault::Builder,
) -> Result<crate::error::subscription_already_exist_fault::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#SubscriptionAlreadyExistFault$message */ =>  {
                let var_68 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_68);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_subscription_category_not_found_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::subscription_category_not_found_fault::Builder,
) -> Result<
    crate::error::subscription_category_not_found_fault::Builder,
    smithy_xml::decode::XmlError,
> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#SubscriptionCategoryNotFoundFault$message */ =>  {
                let var_69 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_69);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_event_subscription(
    inp: &[u8],
    mut builder: crate::output::create_event_subscription_output::Builder,
) -> Result<crate::output::create_event_subscription_output::Builder, smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateEventSubscriptionResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateEventSubscriptionResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("CreateEventSubscriptionResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected CreateEventSubscriptionResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("EventSubscription") /* EventSubscription com.amazonaws.neptune.synthetic#CreateEventSubscriptionOutput$EventSubscription */ =>  {
                let var_70 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_event_subscription(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_event_subscription(var_70);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected CreateEventSubscriptionResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_db_cluster(
    inp: &[u8],
    mut builder: crate::output::delete_db_cluster_output::Builder,
) -> Result<crate::output::delete_db_cluster_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteDBClusterResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteDBClusterResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DeleteDBClusterResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DeleteDBClusterResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("DBCluster") /* DBCluster com.amazonaws.neptune.synthetic#DeleteDBClusterOutput$DBCluster */ =>  {
                let var_71 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_db_cluster(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_db_cluster(var_71);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DeleteDBClusterResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_db_cluster_endpoint_not_found_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::db_cluster_endpoint_not_found_fault::Builder,
) -> Result<crate::error::db_cluster_endpoint_not_found_fault::Builder, smithy_xml::decode::XmlError>
{
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#DBClusterEndpointNotFoundFault$message */ =>  {
                let var_72 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_72);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_invalid_db_cluster_endpoint_state_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::invalid_db_cluster_endpoint_state_fault::Builder,
) -> Result<
    crate::error::invalid_db_cluster_endpoint_state_fault::Builder,
    smithy_xml::decode::XmlError,
> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#InvalidDBClusterEndpointStateFault$message */ =>  {
                let var_73 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_73);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_db_cluster_endpoint(
    inp: &[u8],
    mut builder: crate::output::delete_db_cluster_endpoint_output::Builder,
) -> Result<crate::output::delete_db_cluster_endpoint_output::Builder, smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteDBClusterEndpointResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteDBClusterEndpointResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DeleteDBClusterEndpointResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DeleteDBClusterEndpointResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("DBClusterEndpointIdentifier") /* DBClusterEndpointIdentifier com.amazonaws.neptune.synthetic#DeleteDBClusterEndpointOutput$DBClusterEndpointIdentifier */ =>  {
                let var_74 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_cluster_endpoint_identifier(var_74);
            }
            ,
            s if s.matches("DBClusterIdentifier") /* DBClusterIdentifier com.amazonaws.neptune.synthetic#DeleteDBClusterEndpointOutput$DBClusterIdentifier */ =>  {
                let var_75 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_cluster_identifier(var_75);
            }
            ,
            s if s.matches("DBClusterEndpointResourceIdentifier") /* DBClusterEndpointResourceIdentifier com.amazonaws.neptune.synthetic#DeleteDBClusterEndpointOutput$DBClusterEndpointResourceIdentifier */ =>  {
                let var_76 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_cluster_endpoint_resource_identifier(var_76);
            }
            ,
            s if s.matches("Endpoint") /* Endpoint com.amazonaws.neptune.synthetic#DeleteDBClusterEndpointOutput$Endpoint */ =>  {
                let var_77 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_endpoint(var_77);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.neptune.synthetic#DeleteDBClusterEndpointOutput$Status */ =>  {
                let var_78 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_78);
            }
            ,
            s if s.matches("EndpointType") /* EndpointType com.amazonaws.neptune.synthetic#DeleteDBClusterEndpointOutput$EndpointType */ =>  {
                let var_79 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_endpoint_type(var_79);
            }
            ,
            s if s.matches("CustomEndpointType") /* CustomEndpointType com.amazonaws.neptune.synthetic#DeleteDBClusterEndpointOutput$CustomEndpointType */ =>  {
                let var_80 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_custom_endpoint_type(var_80);
            }
            ,
            s if s.matches("StaticMembers") /* StaticMembers com.amazonaws.neptune.synthetic#DeleteDBClusterEndpointOutput$StaticMembers */ =>  {
                let var_81 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_static_members(var_81);
            }
            ,
            s if s.matches("ExcludedMembers") /* ExcludedMembers com.amazonaws.neptune.synthetic#DeleteDBClusterEndpointOutput$ExcludedMembers */ =>  {
                let var_82 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_excluded_members(var_82);
            }
            ,
            s if s.matches("DBClusterEndpointArn") /* DBClusterEndpointArn com.amazonaws.neptune.synthetic#DeleteDBClusterEndpointOutput$DBClusterEndpointArn */ =>  {
                let var_83 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_cluster_endpoint_arn(var_83);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DeleteDBClusterEndpointResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_invalid_db_parameter_group_state_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::invalid_db_parameter_group_state_fault::Builder,
) -> Result<
    crate::error::invalid_db_parameter_group_state_fault::Builder,
    smithy_xml::decode::XmlError,
> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#InvalidDBParameterGroupStateFault$message */ =>  {
                let var_84 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_84);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_db_cluster_snapshot(
    inp: &[u8],
    mut builder: crate::output::delete_db_cluster_snapshot_output::Builder,
) -> Result<crate::output::delete_db_cluster_snapshot_output::Builder, smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteDBClusterSnapshotResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteDBClusterSnapshotResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DeleteDBClusterSnapshotResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DeleteDBClusterSnapshotResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("DBClusterSnapshot") /* DBClusterSnapshot com.amazonaws.neptune.synthetic#DeleteDBClusterSnapshotOutput$DBClusterSnapshot */ =>  {
                let var_85 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_db_cluster_snapshot(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_db_cluster_snapshot(var_85);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DeleteDBClusterSnapshotResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_db_snapshot_already_exists_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::db_snapshot_already_exists_fault::Builder,
) -> Result<crate::error::db_snapshot_already_exists_fault::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#DBSnapshotAlreadyExistsFault$message */ =>  {
                let var_86 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_86);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_db_instance(
    inp: &[u8],
    mut builder: crate::output::delete_db_instance_output::Builder,
) -> Result<crate::output::delete_db_instance_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteDBInstanceResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteDBInstanceResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DeleteDBInstanceResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DeleteDBInstanceResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("DBInstance") /* DBInstance com.amazonaws.neptune.synthetic#DeleteDBInstanceOutput$DBInstance */ =>  {
                let var_87 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_db_instance(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_db_instance(var_87);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DeleteDBInstanceResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_invalid_db_subnet_state_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::invalid_db_subnet_state_fault::Builder,
) -> Result<crate::error::invalid_db_subnet_state_fault::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#InvalidDBSubnetStateFault$message */ =>  {
                let var_88 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_88);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_invalid_event_subscription_state_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::invalid_event_subscription_state_fault::Builder,
) -> Result<
    crate::error::invalid_event_subscription_state_fault::Builder,
    smithy_xml::decode::XmlError,
> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#InvalidEventSubscriptionStateFault$message */ =>  {
                let var_89 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_89);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_event_subscription(
    inp: &[u8],
    mut builder: crate::output::delete_event_subscription_output::Builder,
) -> Result<crate::output::delete_event_subscription_output::Builder, smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteEventSubscriptionResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteEventSubscriptionResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DeleteEventSubscriptionResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DeleteEventSubscriptionResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("EventSubscription") /* EventSubscription com.amazonaws.neptune.synthetic#DeleteEventSubscriptionOutput$EventSubscription */ =>  {
                let var_90 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_event_subscription(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_event_subscription(var_90);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DeleteEventSubscriptionResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_db_cluster_endpoints(
    inp: &[u8],
    mut builder: crate::output::describe_db_cluster_endpoints_output::Builder,
) -> Result<
    crate::output::describe_db_cluster_endpoints_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeDBClusterEndpointsResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeDBClusterEndpointsResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DescribeDBClusterEndpointsResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DescribeDBClusterEndpointsResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("Marker") /* Marker com.amazonaws.neptune.synthetic#DescribeDBClusterEndpointsOutput$Marker */ =>  {
                let var_91 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_marker(var_91);
            }
            ,
            s if s.matches("DBClusterEndpoints") /* DBClusterEndpoints com.amazonaws.neptune.synthetic#DescribeDBClusterEndpointsOutput$DBClusterEndpoints */ =>  {
                let var_92 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_db_cluster_endpoint_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_db_cluster_endpoints(var_92);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DescribeDBClusterEndpointsResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_db_cluster_parameter_groups(
    inp: &[u8],
    mut builder: crate::output::describe_db_cluster_parameter_groups_output::Builder,
) -> Result<
    crate::output::describe_db_cluster_parameter_groups_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeDBClusterParameterGroupsResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeDBClusterParameterGroupsResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DescribeDBClusterParameterGroupsResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DescribeDBClusterParameterGroupsResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("Marker") /* Marker com.amazonaws.neptune.synthetic#DescribeDBClusterParameterGroupsOutput$Marker */ =>  {
                let var_93 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_marker(var_93);
            }
            ,
            s if s.matches("DBClusterParameterGroups") /* DBClusterParameterGroups com.amazonaws.neptune.synthetic#DescribeDBClusterParameterGroupsOutput$DBClusterParameterGroups */ =>  {
                let var_94 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_db_cluster_parameter_group_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_db_cluster_parameter_groups(var_94);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DescribeDBClusterParameterGroupsResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_db_cluster_parameters(
    inp: &[u8],
    mut builder: crate::output::describe_db_cluster_parameters_output::Builder,
) -> Result<
    crate::output::describe_db_cluster_parameters_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeDBClusterParametersResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeDBClusterParametersResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DescribeDBClusterParametersResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DescribeDBClusterParametersResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("Parameters") /* Parameters com.amazonaws.neptune.synthetic#DescribeDBClusterParametersOutput$Parameters */ =>  {
                let var_95 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_parameters_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_parameters(var_95);
            }
            ,
            s if s.matches("Marker") /* Marker com.amazonaws.neptune.synthetic#DescribeDBClusterParametersOutput$Marker */ =>  {
                let var_96 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_marker(var_96);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DescribeDBClusterParametersResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_db_clusters(
    inp: &[u8],
    mut builder: crate::output::describe_db_clusters_output::Builder,
) -> Result<crate::output::describe_db_clusters_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeDBClustersResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeDBClustersResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DescribeDBClustersResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DescribeDBClustersResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("Marker") /* Marker com.amazonaws.neptune.synthetic#DescribeDBClustersOutput$Marker */ =>  {
                let var_97 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_marker(var_97);
            }
            ,
            s if s.matches("DBClusters") /* DBClusters com.amazonaws.neptune.synthetic#DescribeDBClustersOutput$DBClusters */ =>  {
                let var_98 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_db_cluster_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_db_clusters(var_98);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DescribeDBClustersResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_db_cluster_snapshot_attributes(
    inp: &[u8],
    mut builder: crate::output::describe_db_cluster_snapshot_attributes_output::Builder,
) -> Result<
    crate::output::describe_db_cluster_snapshot_attributes_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeDBClusterSnapshotAttributesResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeDBClusterSnapshotAttributesResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DescribeDBClusterSnapshotAttributesResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DescribeDBClusterSnapshotAttributesResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("DBClusterSnapshotAttributesResult") /* DBClusterSnapshotAttributesResult com.amazonaws.neptune.synthetic#DescribeDBClusterSnapshotAttributesOutput$DBClusterSnapshotAttributesResult */ =>  {
                let var_99 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_db_cluster_snapshot_attributes_result(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_db_cluster_snapshot_attributes_result(var_99);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DescribeDBClusterSnapshotAttributesResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_db_cluster_snapshots(
    inp: &[u8],
    mut builder: crate::output::describe_db_cluster_snapshots_output::Builder,
) -> Result<
    crate::output::describe_db_cluster_snapshots_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeDBClusterSnapshotsResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeDBClusterSnapshotsResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DescribeDBClusterSnapshotsResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DescribeDBClusterSnapshotsResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("Marker") /* Marker com.amazonaws.neptune.synthetic#DescribeDBClusterSnapshotsOutput$Marker */ =>  {
                let var_100 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_marker(var_100);
            }
            ,
            s if s.matches("DBClusterSnapshots") /* DBClusterSnapshots com.amazonaws.neptune.synthetic#DescribeDBClusterSnapshotsOutput$DBClusterSnapshots */ =>  {
                let var_101 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_db_cluster_snapshot_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_db_cluster_snapshots(var_101);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DescribeDBClusterSnapshotsResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_db_engine_versions(
    inp: &[u8],
    mut builder: crate::output::describe_db_engine_versions_output::Builder,
) -> Result<crate::output::describe_db_engine_versions_output::Builder, smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeDBEngineVersionsResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeDBEngineVersionsResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DescribeDBEngineVersionsResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DescribeDBEngineVersionsResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("Marker") /* Marker com.amazonaws.neptune.synthetic#DescribeDBEngineVersionsOutput$Marker */ =>  {
                let var_102 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_marker(var_102);
            }
            ,
            s if s.matches("DBEngineVersions") /* DBEngineVersions com.amazonaws.neptune.synthetic#DescribeDBEngineVersionsOutput$DBEngineVersions */ =>  {
                let var_103 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_db_engine_version_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_db_engine_versions(var_103);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DescribeDBEngineVersionsResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_db_instances(
    inp: &[u8],
    mut builder: crate::output::describe_db_instances_output::Builder,
) -> Result<crate::output::describe_db_instances_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeDBInstancesResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeDBInstancesResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DescribeDBInstancesResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DescribeDBInstancesResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("Marker") /* Marker com.amazonaws.neptune.synthetic#DescribeDBInstancesOutput$Marker */ =>  {
                let var_104 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_marker(var_104);
            }
            ,
            s if s.matches("DBInstances") /* DBInstances com.amazonaws.neptune.synthetic#DescribeDBInstancesOutput$DBInstances */ =>  {
                let var_105 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_db_instance_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_db_instances(var_105);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DescribeDBInstancesResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_db_parameter_groups(
    inp: &[u8],
    mut builder: crate::output::describe_db_parameter_groups_output::Builder,
) -> Result<crate::output::describe_db_parameter_groups_output::Builder, smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeDBParameterGroupsResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeDBParameterGroupsResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DescribeDBParameterGroupsResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DescribeDBParameterGroupsResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("Marker") /* Marker com.amazonaws.neptune.synthetic#DescribeDBParameterGroupsOutput$Marker */ =>  {
                let var_106 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_marker(var_106);
            }
            ,
            s if s.matches("DBParameterGroups") /* DBParameterGroups com.amazonaws.neptune.synthetic#DescribeDBParameterGroupsOutput$DBParameterGroups */ =>  {
                let var_107 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_db_parameter_group_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_db_parameter_groups(var_107);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DescribeDBParameterGroupsResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_db_parameters(
    inp: &[u8],
    mut builder: crate::output::describe_db_parameters_output::Builder,
) -> Result<crate::output::describe_db_parameters_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeDBParametersResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeDBParametersResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DescribeDBParametersResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DescribeDBParametersResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("Parameters") /* Parameters com.amazonaws.neptune.synthetic#DescribeDBParametersOutput$Parameters */ =>  {
                let var_108 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_parameters_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_parameters(var_108);
            }
            ,
            s if s.matches("Marker") /* Marker com.amazonaws.neptune.synthetic#DescribeDBParametersOutput$Marker */ =>  {
                let var_109 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_marker(var_109);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DescribeDBParametersResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_db_subnet_groups(
    inp: &[u8],
    mut builder: crate::output::describe_db_subnet_groups_output::Builder,
) -> Result<crate::output::describe_db_subnet_groups_output::Builder, smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeDBSubnetGroupsResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeDBSubnetGroupsResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DescribeDBSubnetGroupsResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DescribeDBSubnetGroupsResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("Marker") /* Marker com.amazonaws.neptune.synthetic#DescribeDBSubnetGroupsOutput$Marker */ =>  {
                let var_110 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_marker(var_110);
            }
            ,
            s if s.matches("DBSubnetGroups") /* DBSubnetGroups com.amazonaws.neptune.synthetic#DescribeDBSubnetGroupsOutput$DBSubnetGroups */ =>  {
                let var_111 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_db_subnet_groups(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_db_subnet_groups(var_111);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DescribeDBSubnetGroupsResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_engine_default_cluster_parameters(
    inp: &[u8],
    mut builder: crate::output::describe_engine_default_cluster_parameters_output::Builder,
) -> Result<
    crate::output::describe_engine_default_cluster_parameters_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeEngineDefaultClusterParametersResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeEngineDefaultClusterParametersResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DescribeEngineDefaultClusterParametersResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DescribeEngineDefaultClusterParametersResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("EngineDefaults") /* EngineDefaults com.amazonaws.neptune.synthetic#DescribeEngineDefaultClusterParametersOutput$EngineDefaults */ =>  {
                let var_112 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_engine_defaults(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_engine_defaults(var_112);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DescribeEngineDefaultClusterParametersResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_engine_default_parameters(
    inp: &[u8],
    mut builder: crate::output::describe_engine_default_parameters_output::Builder,
) -> Result<
    crate::output::describe_engine_default_parameters_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeEngineDefaultParametersResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeEngineDefaultParametersResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DescribeEngineDefaultParametersResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DescribeEngineDefaultParametersResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("EngineDefaults") /* EngineDefaults com.amazonaws.neptune.synthetic#DescribeEngineDefaultParametersOutput$EngineDefaults */ =>  {
                let var_113 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_engine_defaults(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_engine_defaults(var_113);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DescribeEngineDefaultParametersResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_event_categories(
    inp: &[u8],
    mut builder: crate::output::describe_event_categories_output::Builder,
) -> Result<crate::output::describe_event_categories_output::Builder, smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeEventCategoriesResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeEventCategoriesResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DescribeEventCategoriesResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DescribeEventCategoriesResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("EventCategoriesMapList") /* EventCategoriesMapList com.amazonaws.neptune.synthetic#DescribeEventCategoriesOutput$EventCategoriesMapList */ =>  {
                let var_114 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_event_categories_map_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_event_categories_map_list(var_114);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DescribeEventCategoriesResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_events(
    inp: &[u8],
    mut builder: crate::output::describe_events_output::Builder,
) -> Result<crate::output::describe_events_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeEventsResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeEventsResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DescribeEventsResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DescribeEventsResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("Marker") /* Marker com.amazonaws.neptune.synthetic#DescribeEventsOutput$Marker */ =>  {
                let var_115 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_marker(var_115);
            }
            ,
            s if s.matches("Events") /* Events com.amazonaws.neptune.synthetic#DescribeEventsOutput$Events */ =>  {
                let var_116 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_event_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_events(var_116);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DescribeEventsResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_event_subscriptions(
    inp: &[u8],
    mut builder: crate::output::describe_event_subscriptions_output::Builder,
) -> Result<crate::output::describe_event_subscriptions_output::Builder, smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeEventSubscriptionsResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeEventSubscriptionsResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DescribeEventSubscriptionsResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DescribeEventSubscriptionsResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("Marker") /* Marker com.amazonaws.neptune.synthetic#DescribeEventSubscriptionsOutput$Marker */ =>  {
                let var_117 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_marker(var_117);
            }
            ,
            s if s.matches("EventSubscriptionsList") /* EventSubscriptionsList com.amazonaws.neptune.synthetic#DescribeEventSubscriptionsOutput$EventSubscriptionsList */ =>  {
                let var_118 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_event_subscriptions_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_event_subscriptions_list(var_118);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DescribeEventSubscriptionsResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_orderable_db_instance_options(
    inp: &[u8],
    mut builder: crate::output::describe_orderable_db_instance_options_output::Builder,
) -> Result<
    crate::output::describe_orderable_db_instance_options_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeOrderableDBInstanceOptionsResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeOrderableDBInstanceOptionsResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DescribeOrderableDBInstanceOptionsResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DescribeOrderableDBInstanceOptionsResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("OrderableDBInstanceOptions") /* OrderableDBInstanceOptions com.amazonaws.neptune.synthetic#DescribeOrderableDBInstanceOptionsOutput$OrderableDBInstanceOptions */ =>  {
                let var_119 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_orderable_db_instance_options_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_orderable_db_instance_options(var_119);
            }
            ,
            s if s.matches("Marker") /* Marker com.amazonaws.neptune.synthetic#DescribeOrderableDBInstanceOptionsOutput$Marker */ =>  {
                let var_120 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_marker(var_120);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DescribeOrderableDBInstanceOptionsResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_pending_maintenance_actions(
    inp: &[u8],
    mut builder: crate::output::describe_pending_maintenance_actions_output::Builder,
) -> Result<
    crate::output::describe_pending_maintenance_actions_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribePendingMaintenanceActionsResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribePendingMaintenanceActionsResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DescribePendingMaintenanceActionsResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DescribePendingMaintenanceActionsResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("PendingMaintenanceActions") /* PendingMaintenanceActions com.amazonaws.neptune.synthetic#DescribePendingMaintenanceActionsOutput$PendingMaintenanceActions */ =>  {
                let var_121 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_pending_maintenance_actions(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_pending_maintenance_actions(var_121);
            }
            ,
            s if s.matches("Marker") /* Marker com.amazonaws.neptune.synthetic#DescribePendingMaintenanceActionsOutput$Marker */ =>  {
                let var_122 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_marker(var_122);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DescribePendingMaintenanceActionsResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_valid_db_instance_modifications(
    inp: &[u8],
    mut builder: crate::output::describe_valid_db_instance_modifications_output::Builder,
) -> Result<
    crate::output::describe_valid_db_instance_modifications_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeValidDBInstanceModificationsResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeValidDBInstanceModificationsResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DescribeValidDBInstanceModificationsResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DescribeValidDBInstanceModificationsResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("ValidDBInstanceModificationsMessage") /* ValidDBInstanceModificationsMessage com.amazonaws.neptune.synthetic#DescribeValidDBInstanceModificationsOutput$ValidDBInstanceModificationsMessage */ =>  {
                let var_123 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_valid_db_instance_modifications_message(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_valid_db_instance_modifications_message(var_123);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DescribeValidDBInstanceModificationsResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_failover_db_cluster(
    inp: &[u8],
    mut builder: crate::output::failover_db_cluster_output::Builder,
) -> Result<crate::output::failover_db_cluster_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("FailoverDBClusterResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected FailoverDBClusterResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("FailoverDBClusterResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected FailoverDBClusterResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("DBCluster") /* DBCluster com.amazonaws.neptune.synthetic#FailoverDBClusterOutput$DBCluster */ =>  {
                let var_124 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_db_cluster(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_db_cluster(var_124);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected FailoverDBClusterResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_list_tags_for_resource(
    inp: &[u8],
    mut builder: crate::output::list_tags_for_resource_output::Builder,
) -> Result<crate::output::list_tags_for_resource_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ListTagsForResourceResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ListTagsForResourceResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("ListTagsForResourceResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected ListTagsForResourceResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("TagList") /* TagList com.amazonaws.neptune.synthetic#ListTagsForResourceOutput$TagList */ =>  {
                let var_125 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tag_list(var_125);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected ListTagsForResourceResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_invalid_db_security_group_state_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::invalid_db_security_group_state_fault::Builder,
) -> Result<
    crate::error::invalid_db_security_group_state_fault::Builder,
    smithy_xml::decode::XmlError,
> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#InvalidDBSecurityGroupStateFault$message */ =>  {
                let var_126 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_126);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_db_cluster(
    inp: &[u8],
    mut builder: crate::output::modify_db_cluster_output::Builder,
) -> Result<crate::output::modify_db_cluster_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyDBClusterResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyDBClusterResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("ModifyDBClusterResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected ModifyDBClusterResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("DBCluster") /* DBCluster com.amazonaws.neptune.synthetic#ModifyDBClusterOutput$DBCluster */ =>  {
                let var_127 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_db_cluster(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_db_cluster(var_127);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected ModifyDBClusterResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_db_cluster_endpoint(
    inp: &[u8],
    mut builder: crate::output::modify_db_cluster_endpoint_output::Builder,
) -> Result<crate::output::modify_db_cluster_endpoint_output::Builder, smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyDBClusterEndpointResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyDBClusterEndpointResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("ModifyDBClusterEndpointResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected ModifyDBClusterEndpointResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("DBClusterEndpointIdentifier") /* DBClusterEndpointIdentifier com.amazonaws.neptune.synthetic#ModifyDBClusterEndpointOutput$DBClusterEndpointIdentifier */ =>  {
                let var_128 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_cluster_endpoint_identifier(var_128);
            }
            ,
            s if s.matches("DBClusterIdentifier") /* DBClusterIdentifier com.amazonaws.neptune.synthetic#ModifyDBClusterEndpointOutput$DBClusterIdentifier */ =>  {
                let var_129 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_cluster_identifier(var_129);
            }
            ,
            s if s.matches("DBClusterEndpointResourceIdentifier") /* DBClusterEndpointResourceIdentifier com.amazonaws.neptune.synthetic#ModifyDBClusterEndpointOutput$DBClusterEndpointResourceIdentifier */ =>  {
                let var_130 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_cluster_endpoint_resource_identifier(var_130);
            }
            ,
            s if s.matches("Endpoint") /* Endpoint com.amazonaws.neptune.synthetic#ModifyDBClusterEndpointOutput$Endpoint */ =>  {
                let var_131 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_endpoint(var_131);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.neptune.synthetic#ModifyDBClusterEndpointOutput$Status */ =>  {
                let var_132 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_132);
            }
            ,
            s if s.matches("EndpointType") /* EndpointType com.amazonaws.neptune.synthetic#ModifyDBClusterEndpointOutput$EndpointType */ =>  {
                let var_133 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_endpoint_type(var_133);
            }
            ,
            s if s.matches("CustomEndpointType") /* CustomEndpointType com.amazonaws.neptune.synthetic#ModifyDBClusterEndpointOutput$CustomEndpointType */ =>  {
                let var_134 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_custom_endpoint_type(var_134);
            }
            ,
            s if s.matches("StaticMembers") /* StaticMembers com.amazonaws.neptune.synthetic#ModifyDBClusterEndpointOutput$StaticMembers */ =>  {
                let var_135 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_static_members(var_135);
            }
            ,
            s if s.matches("ExcludedMembers") /* ExcludedMembers com.amazonaws.neptune.synthetic#ModifyDBClusterEndpointOutput$ExcludedMembers */ =>  {
                let var_136 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_excluded_members(var_136);
            }
            ,
            s if s.matches("DBClusterEndpointArn") /* DBClusterEndpointArn com.amazonaws.neptune.synthetic#ModifyDBClusterEndpointOutput$DBClusterEndpointArn */ =>  {
                let var_137 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_cluster_endpoint_arn(var_137);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected ModifyDBClusterEndpointResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_db_cluster_parameter_group(
    inp: &[u8],
    mut builder: crate::output::modify_db_cluster_parameter_group_output::Builder,
) -> Result<
    crate::output::modify_db_cluster_parameter_group_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyDBClusterParameterGroupResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyDBClusterParameterGroupResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("ModifyDBClusterParameterGroupResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected ModifyDBClusterParameterGroupResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("DBClusterParameterGroupName") /* DBClusterParameterGroupName com.amazonaws.neptune.synthetic#ModifyDBClusterParameterGroupOutput$DBClusterParameterGroupName */ =>  {
                let var_138 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_cluster_parameter_group_name(var_138);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected ModifyDBClusterParameterGroupResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_shared_snapshot_quota_exceeded_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::shared_snapshot_quota_exceeded_fault::Builder,
) -> Result<crate::error::shared_snapshot_quota_exceeded_fault::Builder, smithy_xml::decode::XmlError>
{
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#SharedSnapshotQuotaExceededFault$message */ =>  {
                let var_139 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_139);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_db_cluster_snapshot_attribute(
    inp: &[u8],
    mut builder: crate::output::modify_db_cluster_snapshot_attribute_output::Builder,
) -> Result<
    crate::output::modify_db_cluster_snapshot_attribute_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyDBClusterSnapshotAttributeResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyDBClusterSnapshotAttributeResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("ModifyDBClusterSnapshotAttributeResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected ModifyDBClusterSnapshotAttributeResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("DBClusterSnapshotAttributesResult") /* DBClusterSnapshotAttributesResult com.amazonaws.neptune.synthetic#ModifyDBClusterSnapshotAttributeOutput$DBClusterSnapshotAttributesResult */ =>  {
                let var_140 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_db_cluster_snapshot_attributes_result(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_db_cluster_snapshot_attributes_result(var_140);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected ModifyDBClusterSnapshotAttributeResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_certificate_not_found_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::certificate_not_found_fault::Builder,
) -> Result<crate::error::certificate_not_found_fault::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#CertificateNotFoundFault$message */ =>  {
                let var_141 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_141);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_db_upgrade_dependency_failure_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::db_upgrade_dependency_failure_fault::Builder,
) -> Result<crate::error::db_upgrade_dependency_failure_fault::Builder, smithy_xml::decode::XmlError>
{
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#DBUpgradeDependencyFailureFault$message */ =>  {
                let var_142 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_142);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_db_instance(
    inp: &[u8],
    mut builder: crate::output::modify_db_instance_output::Builder,
) -> Result<crate::output::modify_db_instance_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyDBInstanceResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyDBInstanceResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("ModifyDBInstanceResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected ModifyDBInstanceResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("DBInstance") /* DBInstance com.amazonaws.neptune.synthetic#ModifyDBInstanceOutput$DBInstance */ =>  {
                let var_143 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_db_instance(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_db_instance(var_143);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected ModifyDBInstanceResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_db_parameter_group(
    inp: &[u8],
    mut builder: crate::output::modify_db_parameter_group_output::Builder,
) -> Result<crate::output::modify_db_parameter_group_output::Builder, smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyDBParameterGroupResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyDBParameterGroupResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("ModifyDBParameterGroupResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected ModifyDBParameterGroupResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("DBParameterGroupName") /* DBParameterGroupName com.amazonaws.neptune.synthetic#ModifyDBParameterGroupOutput$DBParameterGroupName */ =>  {
                let var_144 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_parameter_group_name(var_144);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected ModifyDBParameterGroupResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_subnet_already_in_use_xml_err(
    inp: &[u8],
    mut builder: crate::error::subnet_already_in_use::Builder,
) -> Result<crate::error::subnet_already_in_use::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#SubnetAlreadyInUse$message */ =>  {
                let var_145 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_145);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_db_subnet_group(
    inp: &[u8],
    mut builder: crate::output::modify_db_subnet_group_output::Builder,
) -> Result<crate::output::modify_db_subnet_group_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyDBSubnetGroupResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyDBSubnetGroupResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("ModifyDBSubnetGroupResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected ModifyDBSubnetGroupResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("DBSubnetGroup") /* DBSubnetGroup com.amazonaws.neptune.synthetic#ModifyDBSubnetGroupOutput$DBSubnetGroup */ =>  {
                let var_146 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_db_subnet_group(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_db_subnet_group(var_146);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected ModifyDBSubnetGroupResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_event_subscription(
    inp: &[u8],
    mut builder: crate::output::modify_event_subscription_output::Builder,
) -> Result<crate::output::modify_event_subscription_output::Builder, smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyEventSubscriptionResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyEventSubscriptionResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("ModifyEventSubscriptionResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected ModifyEventSubscriptionResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("EventSubscription") /* EventSubscription com.amazonaws.neptune.synthetic#ModifyEventSubscriptionOutput$EventSubscription */ =>  {
                let var_147 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_event_subscription(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_event_subscription(var_147);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected ModifyEventSubscriptionResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_promote_read_replica_db_cluster(
    inp: &[u8],
    mut builder: crate::output::promote_read_replica_db_cluster_output::Builder,
) -> Result<
    crate::output::promote_read_replica_db_cluster_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("PromoteReadReplicaDBClusterResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected PromoteReadReplicaDBClusterResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("PromoteReadReplicaDBClusterResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected PromoteReadReplicaDBClusterResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("DBCluster") /* DBCluster com.amazonaws.neptune.synthetic#PromoteReadReplicaDBClusterOutput$DBCluster */ =>  {
                let var_148 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_db_cluster(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_db_cluster(var_148);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected PromoteReadReplicaDBClusterResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_reboot_db_instance(
    inp: &[u8],
    mut builder: crate::output::reboot_db_instance_output::Builder,
) -> Result<crate::output::reboot_db_instance_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("RebootDBInstanceResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected RebootDBInstanceResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("RebootDBInstanceResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected RebootDBInstanceResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("DBInstance") /* DBInstance com.amazonaws.neptune.synthetic#RebootDBInstanceOutput$DBInstance */ =>  {
                let var_149 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_db_instance(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_db_instance(var_149);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected RebootDBInstanceResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_db_cluster_role_not_found_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::db_cluster_role_not_found_fault::Builder,
) -> Result<crate::error::db_cluster_role_not_found_fault::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#DBClusterRoleNotFoundFault$message */ =>  {
                let var_150 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_150);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_remove_source_identifier_from_subscription(
    inp: &[u8],
    mut builder: crate::output::remove_source_identifier_from_subscription_output::Builder,
) -> Result<
    crate::output::remove_source_identifier_from_subscription_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("RemoveSourceIdentifierFromSubscriptionResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected RemoveSourceIdentifierFromSubscriptionResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("RemoveSourceIdentifierFromSubscriptionResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected RemoveSourceIdentifierFromSubscriptionResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("EventSubscription") /* EventSubscription com.amazonaws.neptune.synthetic#RemoveSourceIdentifierFromSubscriptionOutput$EventSubscription */ =>  {
                let var_151 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_event_subscription(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_event_subscription(var_151);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected RemoveSourceIdentifierFromSubscriptionResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_reset_db_cluster_parameter_group(
    inp: &[u8],
    mut builder: crate::output::reset_db_cluster_parameter_group_output::Builder,
) -> Result<
    crate::output::reset_db_cluster_parameter_group_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ResetDBClusterParameterGroupResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ResetDBClusterParameterGroupResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("ResetDBClusterParameterGroupResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected ResetDBClusterParameterGroupResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("DBClusterParameterGroupName") /* DBClusterParameterGroupName com.amazonaws.neptune.synthetic#ResetDBClusterParameterGroupOutput$DBClusterParameterGroupName */ =>  {
                let var_152 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_cluster_parameter_group_name(var_152);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected ResetDBClusterParameterGroupResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_reset_db_parameter_group(
    inp: &[u8],
    mut builder: crate::output::reset_db_parameter_group_output::Builder,
) -> Result<crate::output::reset_db_parameter_group_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ResetDBParameterGroupResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ResetDBParameterGroupResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("ResetDBParameterGroupResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected ResetDBParameterGroupResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("DBParameterGroupName") /* DBParameterGroupName com.amazonaws.neptune.synthetic#ResetDBParameterGroupOutput$DBParameterGroupName */ =>  {
                let var_153 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_parameter_group_name(var_153);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected ResetDBParameterGroupResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_insufficient_db_cluster_capacity_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::insufficient_db_cluster_capacity_fault::Builder,
) -> Result<
    crate::error::insufficient_db_cluster_capacity_fault::Builder,
    smithy_xml::decode::XmlError,
> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#InsufficientDBClusterCapacityFault$message */ =>  {
                let var_154 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_154);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_invalid_db_snapshot_state_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::invalid_db_snapshot_state_fault::Builder,
) -> Result<crate::error::invalid_db_snapshot_state_fault::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#InvalidDBSnapshotStateFault$message */ =>  {
                let var_155 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_155);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_crate_error_invalid_restore_fault_xml_err(
    inp: &[u8],
    mut builder: crate::error::invalid_restore_fault::Builder,
) -> Result<crate::error::invalid_restore_fault::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.neptune#InvalidRestoreFault$message */ =>  {
                let var_156 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_156);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_restore_db_cluster_from_snapshot(
    inp: &[u8],
    mut builder: crate::output::restore_db_cluster_from_snapshot_output::Builder,
) -> Result<
    crate::output::restore_db_cluster_from_snapshot_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("RestoreDBClusterFromSnapshotResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected RestoreDBClusterFromSnapshotResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("RestoreDBClusterFromSnapshotResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected RestoreDBClusterFromSnapshotResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("DBCluster") /* DBCluster com.amazonaws.neptune.synthetic#RestoreDBClusterFromSnapshotOutput$DBCluster */ =>  {
                let var_157 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_db_cluster(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_db_cluster(var_157);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected RestoreDBClusterFromSnapshotResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_restore_db_cluster_to_point_in_time(
    inp: &[u8],
    mut builder: crate::output::restore_db_cluster_to_point_in_time_output::Builder,
) -> Result<
    crate::output::restore_db_cluster_to_point_in_time_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("RestoreDBClusterToPointInTimeResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected RestoreDBClusterToPointInTimeResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("RestoreDBClusterToPointInTimeResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected RestoreDBClusterToPointInTimeResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("DBCluster") /* DBCluster com.amazonaws.neptune.synthetic#RestoreDBClusterToPointInTimeOutput$DBCluster */ =>  {
                let var_158 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_db_cluster(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_db_cluster(var_158);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected RestoreDBClusterToPointInTimeResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_start_db_cluster(
    inp: &[u8],
    mut builder: crate::output::start_db_cluster_output::Builder,
) -> Result<crate::output::start_db_cluster_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("StartDBClusterResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected StartDBClusterResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("StartDBClusterResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected StartDBClusterResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("DBCluster") /* DBCluster com.amazonaws.neptune.synthetic#StartDBClusterOutput$DBCluster */ =>  {
                let var_159 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_db_cluster(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_db_cluster(var_159);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected StartDBClusterResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_stop_db_cluster(
    inp: &[u8],
    mut builder: crate::output::stop_db_cluster_output::Builder,
) -> Result<crate::output::stop_db_cluster_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("StopDBClusterResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected StopDBClusterResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("StopDBClusterResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected StopDBClusterResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("DBCluster") /* DBCluster com.amazonaws.neptune.synthetic#StopDBClusterOutput$DBCluster */ =>  {
                let var_160 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_db_cluster(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_db_cluster(var_160);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected StopDBClusterResult tag",
        ));
    };
    Ok(builder)
}

pub fn deser_structure_crate_model_event_subscription(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::EventSubscription, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::EventSubscription::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("CustomerAwsId") /* CustomerAwsId com.amazonaws.neptune#EventSubscription$CustomerAwsId */ =>  {
                let var_161 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_customer_aws_id(var_161);
            }
            ,
            s if s.matches("CustSubscriptionId") /* CustSubscriptionId com.amazonaws.neptune#EventSubscription$CustSubscriptionId */ =>  {
                let var_162 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_cust_subscription_id(var_162);
            }
            ,
            s if s.matches("SnsTopicArn") /* SnsTopicArn com.amazonaws.neptune#EventSubscription$SnsTopicArn */ =>  {
                let var_163 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_sns_topic_arn(var_163);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.neptune#EventSubscription$Status */ =>  {
                let var_164 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_164);
            }
            ,
            s if s.matches("SubscriptionCreationTime") /* SubscriptionCreationTime com.amazonaws.neptune#EventSubscription$SubscriptionCreationTime */ =>  {
                let var_165 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_subscription_creation_time(var_165);
            }
            ,
            s if s.matches("SourceType") /* SourceType com.amazonaws.neptune#EventSubscription$SourceType */ =>  {
                let var_166 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_source_type(var_166);
            }
            ,
            s if s.matches("SourceIdsList") /* SourceIdsList com.amazonaws.neptune#EventSubscription$SourceIdsList */ =>  {
                let var_167 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_source_ids_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_source_ids_list(var_167);
            }
            ,
            s if s.matches("EventCategoriesList") /* EventCategoriesList com.amazonaws.neptune#EventSubscription$EventCategoriesList */ =>  {
                let var_168 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_event_categories_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_event_categories_list(var_168);
            }
            ,
            s if s.matches("Enabled") /* Enabled com.amazonaws.neptune#EventSubscription$Enabled */ =>  {
                let var_169 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.neptune#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_enabled(var_169);
            }
            ,
            s if s.matches("EventSubscriptionArn") /* EventSubscriptionArn com.amazonaws.neptune#EventSubscription$EventSubscriptionArn */ =>  {
                let var_170 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_event_subscription_arn(var_170);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_resource_pending_maintenance_actions(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ResourcePendingMaintenanceActions, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ResourcePendingMaintenanceActions::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ResourceIdentifier") /* ResourceIdentifier com.amazonaws.neptune#ResourcePendingMaintenanceActions$ResourceIdentifier */ =>  {
                let var_171 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_identifier(var_171);
            }
            ,
            s if s.matches("PendingMaintenanceActionDetails") /* PendingMaintenanceActionDetails com.amazonaws.neptune#ResourcePendingMaintenanceActions$PendingMaintenanceActionDetails */ =>  {
                let var_172 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_pending_maintenance_action_details(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_pending_maintenance_action_details(var_172);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_db_cluster_parameter_group(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DbClusterParameterGroup, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DbClusterParameterGroup::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DBClusterParameterGroupName") /* DBClusterParameterGroupName com.amazonaws.neptune#DBClusterParameterGroup$DBClusterParameterGroupName */ =>  {
                let var_173 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_cluster_parameter_group_name(var_173);
            }
            ,
            s if s.matches("DBParameterGroupFamily") /* DBParameterGroupFamily com.amazonaws.neptune#DBClusterParameterGroup$DBParameterGroupFamily */ =>  {
                let var_174 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_parameter_group_family(var_174);
            }
            ,
            s if s.matches("Description") /* Description com.amazonaws.neptune#DBClusterParameterGroup$Description */ =>  {
                let var_175 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_175);
            }
            ,
            s if s.matches("DBClusterParameterGroupArn") /* DBClusterParameterGroupArn com.amazonaws.neptune#DBClusterParameterGroup$DBClusterParameterGroupArn */ =>  {
                let var_176 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_cluster_parameter_group_arn(var_176);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_db_cluster_snapshot(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DbClusterSnapshot, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DbClusterSnapshot::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("AvailabilityZones") /* AvailabilityZones com.amazonaws.neptune#DBClusterSnapshot$AvailabilityZones */ =>  {
                let var_177 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_availability_zones(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_availability_zones(var_177);
            }
            ,
            s if s.matches("DBClusterSnapshotIdentifier") /* DBClusterSnapshotIdentifier com.amazonaws.neptune#DBClusterSnapshot$DBClusterSnapshotIdentifier */ =>  {
                let var_178 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_cluster_snapshot_identifier(var_178);
            }
            ,
            s if s.matches("DBClusterIdentifier") /* DBClusterIdentifier com.amazonaws.neptune#DBClusterSnapshot$DBClusterIdentifier */ =>  {
                let var_179 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_cluster_identifier(var_179);
            }
            ,
            s if s.matches("SnapshotCreateTime") /* SnapshotCreateTime com.amazonaws.neptune#DBClusterSnapshot$SnapshotCreateTime */ =>  {
                let var_180 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.neptune#TStamp`)"))
                        ?
                    )
                ;
                builder = builder.set_snapshot_create_time(var_180);
            }
            ,
            s if s.matches("Engine") /* Engine com.amazonaws.neptune#DBClusterSnapshot$Engine */ =>  {
                let var_181 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_engine(var_181);
            }
            ,
            s if s.matches("AllocatedStorage") /* AllocatedStorage com.amazonaws.neptune#DBClusterSnapshot$AllocatedStorage */ =>  {
                let var_182 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.neptune#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_allocated_storage(var_182);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.neptune#DBClusterSnapshot$Status */ =>  {
                let var_183 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_183);
            }
            ,
            s if s.matches("Port") /* Port com.amazonaws.neptune#DBClusterSnapshot$Port */ =>  {
                let var_184 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.neptune#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_port(var_184);
            }
            ,
            s if s.matches("VpcId") /* VpcId com.amazonaws.neptune#DBClusterSnapshot$VpcId */ =>  {
                let var_185 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_185);
            }
            ,
            s if s.matches("ClusterCreateTime") /* ClusterCreateTime com.amazonaws.neptune#DBClusterSnapshot$ClusterCreateTime */ =>  {
                let var_186 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.neptune#TStamp`)"))
                        ?
                    )
                ;
                builder = builder.set_cluster_create_time(var_186);
            }
            ,
            s if s.matches("MasterUsername") /* MasterUsername com.amazonaws.neptune#DBClusterSnapshot$MasterUsername */ =>  {
                let var_187 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_master_username(var_187);
            }
            ,
            s if s.matches("EngineVersion") /* EngineVersion com.amazonaws.neptune#DBClusterSnapshot$EngineVersion */ =>  {
                let var_188 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_engine_version(var_188);
            }
            ,
            s if s.matches("LicenseModel") /* LicenseModel com.amazonaws.neptune#DBClusterSnapshot$LicenseModel */ =>  {
                let var_189 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_license_model(var_189);
            }
            ,
            s if s.matches("SnapshotType") /* SnapshotType com.amazonaws.neptune#DBClusterSnapshot$SnapshotType */ =>  {
                let var_190 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_snapshot_type(var_190);
            }
            ,
            s if s.matches("PercentProgress") /* PercentProgress com.amazonaws.neptune#DBClusterSnapshot$PercentProgress */ =>  {
                let var_191 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.neptune#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_percent_progress(var_191);
            }
            ,
            s if s.matches("StorageEncrypted") /* StorageEncrypted com.amazonaws.neptune#DBClusterSnapshot$StorageEncrypted */ =>  {
                let var_192 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.neptune#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_storage_encrypted(var_192);
            }
            ,
            s if s.matches("KmsKeyId") /* KmsKeyId com.amazonaws.neptune#DBClusterSnapshot$KmsKeyId */ =>  {
                let var_193 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_kms_key_id(var_193);
            }
            ,
            s if s.matches("DBClusterSnapshotArn") /* DBClusterSnapshotArn com.amazonaws.neptune#DBClusterSnapshot$DBClusterSnapshotArn */ =>  {
                let var_194 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_cluster_snapshot_arn(var_194);
            }
            ,
            s if s.matches("SourceDBClusterSnapshotArn") /* SourceDBClusterSnapshotArn com.amazonaws.neptune#DBClusterSnapshot$SourceDBClusterSnapshotArn */ =>  {
                let var_195 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_source_db_cluster_snapshot_arn(var_195);
            }
            ,
            s if s.matches("IAMDatabaseAuthenticationEnabled") /* IAMDatabaseAuthenticationEnabled com.amazonaws.neptune#DBClusterSnapshot$IAMDatabaseAuthenticationEnabled */ =>  {
                let var_196 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.neptune#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_iam_database_authentication_enabled(var_196);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_db_parameter_group(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DbParameterGroup, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DbParameterGroup::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DBParameterGroupName") /* DBParameterGroupName com.amazonaws.neptune#DBParameterGroup$DBParameterGroupName */ =>  {
                let var_197 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_parameter_group_name(var_197);
            }
            ,
            s if s.matches("DBParameterGroupFamily") /* DBParameterGroupFamily com.amazonaws.neptune#DBParameterGroup$DBParameterGroupFamily */ =>  {
                let var_198 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_parameter_group_family(var_198);
            }
            ,
            s if s.matches("Description") /* Description com.amazonaws.neptune#DBParameterGroup$Description */ =>  {
                let var_199 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_199);
            }
            ,
            s if s.matches("DBParameterGroupArn") /* DBParameterGroupArn com.amazonaws.neptune#DBParameterGroup$DBParameterGroupArn */ =>  {
                let var_200 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_parameter_group_arn(var_200);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_db_cluster(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DbCluster, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DbCluster::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("AllocatedStorage") /* AllocatedStorage com.amazonaws.neptune#DBCluster$AllocatedStorage */ =>  {
                let var_201 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.neptune#IntegerOptional`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_allocated_storage(var_201);
            }
            ,
            s if s.matches("AvailabilityZones") /* AvailabilityZones com.amazonaws.neptune#DBCluster$AvailabilityZones */ =>  {
                let var_202 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_availability_zones(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_availability_zones(var_202);
            }
            ,
            s if s.matches("BackupRetentionPeriod") /* BackupRetentionPeriod com.amazonaws.neptune#DBCluster$BackupRetentionPeriod */ =>  {
                let var_203 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.neptune#IntegerOptional`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_backup_retention_period(var_203);
            }
            ,
            s if s.matches("CharacterSetName") /* CharacterSetName com.amazonaws.neptune#DBCluster$CharacterSetName */ =>  {
                let var_204 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_character_set_name(var_204);
            }
            ,
            s if s.matches("DatabaseName") /* DatabaseName com.amazonaws.neptune#DBCluster$DatabaseName */ =>  {
                let var_205 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_database_name(var_205);
            }
            ,
            s if s.matches("DBClusterIdentifier") /* DBClusterIdentifier com.amazonaws.neptune#DBCluster$DBClusterIdentifier */ =>  {
                let var_206 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_cluster_identifier(var_206);
            }
            ,
            s if s.matches("DBClusterParameterGroup") /* DBClusterParameterGroup com.amazonaws.neptune#DBCluster$DBClusterParameterGroup */ =>  {
                let var_207 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_cluster_parameter_group(var_207);
            }
            ,
            s if s.matches("DBSubnetGroup") /* DBSubnetGroup com.amazonaws.neptune#DBCluster$DBSubnetGroup */ =>  {
                let var_208 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_subnet_group(var_208);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.neptune#DBCluster$Status */ =>  {
                let var_209 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_209);
            }
            ,
            s if s.matches("PercentProgress") /* PercentProgress com.amazonaws.neptune#DBCluster$PercentProgress */ =>  {
                let var_210 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_percent_progress(var_210);
            }
            ,
            s if s.matches("EarliestRestorableTime") /* EarliestRestorableTime com.amazonaws.neptune#DBCluster$EarliestRestorableTime */ =>  {
                let var_211 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.neptune#TStamp`)"))
                        ?
                    )
                ;
                builder = builder.set_earliest_restorable_time(var_211);
            }
            ,
            s if s.matches("Endpoint") /* Endpoint com.amazonaws.neptune#DBCluster$Endpoint */ =>  {
                let var_212 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_endpoint(var_212);
            }
            ,
            s if s.matches("ReaderEndpoint") /* ReaderEndpoint com.amazonaws.neptune#DBCluster$ReaderEndpoint */ =>  {
                let var_213 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_reader_endpoint(var_213);
            }
            ,
            s if s.matches("MultiAZ") /* MultiAZ com.amazonaws.neptune#DBCluster$MultiAZ */ =>  {
                let var_214 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.neptune#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_multi_az(var_214);
            }
            ,
            s if s.matches("Engine") /* Engine com.amazonaws.neptune#DBCluster$Engine */ =>  {
                let var_215 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_engine(var_215);
            }
            ,
            s if s.matches("EngineVersion") /* EngineVersion com.amazonaws.neptune#DBCluster$EngineVersion */ =>  {
                let var_216 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_engine_version(var_216);
            }
            ,
            s if s.matches("LatestRestorableTime") /* LatestRestorableTime com.amazonaws.neptune#DBCluster$LatestRestorableTime */ =>  {
                let var_217 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.neptune#TStamp`)"))
                        ?
                    )
                ;
                builder = builder.set_latest_restorable_time(var_217);
            }
            ,
            s if s.matches("Port") /* Port com.amazonaws.neptune#DBCluster$Port */ =>  {
                let var_218 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.neptune#IntegerOptional`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_port(var_218);
            }
            ,
            s if s.matches("MasterUsername") /* MasterUsername com.amazonaws.neptune#DBCluster$MasterUsername */ =>  {
                let var_219 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_master_username(var_219);
            }
            ,
            s if s.matches("DBClusterOptionGroupMemberships") /* DBClusterOptionGroupMemberships com.amazonaws.neptune#DBCluster$DBClusterOptionGroupMemberships */ =>  {
                let var_220 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_db_cluster_option_group_memberships(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_db_cluster_option_group_memberships(var_220);
            }
            ,
            s if s.matches("PreferredBackupWindow") /* PreferredBackupWindow com.amazonaws.neptune#DBCluster$PreferredBackupWindow */ =>  {
                let var_221 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_preferred_backup_window(var_221);
            }
            ,
            s if s.matches("PreferredMaintenanceWindow") /* PreferredMaintenanceWindow com.amazonaws.neptune#DBCluster$PreferredMaintenanceWindow */ =>  {
                let var_222 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_preferred_maintenance_window(var_222);
            }
            ,
            s if s.matches("ReplicationSourceIdentifier") /* ReplicationSourceIdentifier com.amazonaws.neptune#DBCluster$ReplicationSourceIdentifier */ =>  {
                let var_223 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_replication_source_identifier(var_223);
            }
            ,
            s if s.matches("ReadReplicaIdentifiers") /* ReadReplicaIdentifiers com.amazonaws.neptune#DBCluster$ReadReplicaIdentifiers */ =>  {
                let var_224 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_read_replica_identifier_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_read_replica_identifiers(var_224);
            }
            ,
            s if s.matches("DBClusterMembers") /* DBClusterMembers com.amazonaws.neptune#DBCluster$DBClusterMembers */ =>  {
                let var_225 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_db_cluster_member_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_db_cluster_members(var_225);
            }
            ,
            s if s.matches("VpcSecurityGroups") /* VpcSecurityGroups com.amazonaws.neptune#DBCluster$VpcSecurityGroups */ =>  {
                let var_226 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_vpc_security_group_membership_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_vpc_security_groups(var_226);
            }
            ,
            s if s.matches("HostedZoneId") /* HostedZoneId com.amazonaws.neptune#DBCluster$HostedZoneId */ =>  {
                let var_227 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_hosted_zone_id(var_227);
            }
            ,
            s if s.matches("StorageEncrypted") /* StorageEncrypted com.amazonaws.neptune#DBCluster$StorageEncrypted */ =>  {
                let var_228 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.neptune#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_storage_encrypted(var_228);
            }
            ,
            s if s.matches("KmsKeyId") /* KmsKeyId com.amazonaws.neptune#DBCluster$KmsKeyId */ =>  {
                let var_229 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_kms_key_id(var_229);
            }
            ,
            s if s.matches("DbClusterResourceId") /* DbClusterResourceId com.amazonaws.neptune#DBCluster$DbClusterResourceId */ =>  {
                let var_230 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_cluster_resource_id(var_230);
            }
            ,
            s if s.matches("DBClusterArn") /* DBClusterArn com.amazonaws.neptune#DBCluster$DBClusterArn */ =>  {
                let var_231 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_cluster_arn(var_231);
            }
            ,
            s if s.matches("AssociatedRoles") /* AssociatedRoles com.amazonaws.neptune#DBCluster$AssociatedRoles */ =>  {
                let var_232 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_db_cluster_roles(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_associated_roles(var_232);
            }
            ,
            s if s.matches("IAMDatabaseAuthenticationEnabled") /* IAMDatabaseAuthenticationEnabled com.amazonaws.neptune#DBCluster$IAMDatabaseAuthenticationEnabled */ =>  {
                let var_233 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.neptune#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_iam_database_authentication_enabled(var_233);
            }
            ,
            s if s.matches("CloneGroupId") /* CloneGroupId com.amazonaws.neptune#DBCluster$CloneGroupId */ =>  {
                let var_234 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_clone_group_id(var_234);
            }
            ,
            s if s.matches("ClusterCreateTime") /* ClusterCreateTime com.amazonaws.neptune#DBCluster$ClusterCreateTime */ =>  {
                let var_235 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.neptune#TStamp`)"))
                        ?
                    )
                ;
                builder = builder.set_cluster_create_time(var_235);
            }
            ,
            s if s.matches("CopyTagsToSnapshot") /* CopyTagsToSnapshot com.amazonaws.neptune#DBCluster$CopyTagsToSnapshot */ =>  {
                let var_236 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.neptune#BooleanOptional`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_copy_tags_to_snapshot(var_236);
            }
            ,
            s if s.matches("EnabledCloudwatchLogsExports") /* EnabledCloudwatchLogsExports com.amazonaws.neptune#DBCluster$EnabledCloudwatchLogsExports */ =>  {
                let var_237 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_log_type_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_enabled_cloudwatch_logs_exports(var_237);
            }
            ,
            s if s.matches("DeletionProtection") /* DeletionProtection com.amazonaws.neptune#DBCluster$DeletionProtection */ =>  {
                let var_238 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.neptune#BooleanOptional`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_deletion_protection(var_238);
            }
            ,
            s if s.matches("CrossAccountClone") /* CrossAccountClone com.amazonaws.neptune#DBCluster$CrossAccountClone */ =>  {
                let var_239 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.neptune#BooleanOptional`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_cross_account_clone(var_239);
            }
            ,
            s if s.matches("AutomaticRestartTime") /* AutomaticRestartTime com.amazonaws.neptune#DBCluster$AutomaticRestartTime */ =>  {
                let var_240 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.neptune#TStamp`)"))
                        ?
                    )
                ;
                builder = builder.set_automatic_restart_time(var_240);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_neptune_string_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.neptune#StringList$member */ =>  {
                out.push(
                    Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                        smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_db_instance(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DbInstance, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DbInstance::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DBInstanceIdentifier") /* DBInstanceIdentifier com.amazonaws.neptune#DBInstance$DBInstanceIdentifier */ =>  {
                let var_241 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_instance_identifier(var_241);
            }
            ,
            s if s.matches("DBInstanceClass") /* DBInstanceClass com.amazonaws.neptune#DBInstance$DBInstanceClass */ =>  {
                let var_242 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_instance_class(var_242);
            }
            ,
            s if s.matches("Engine") /* Engine com.amazonaws.neptune#DBInstance$Engine */ =>  {
                let var_243 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_engine(var_243);
            }
            ,
            s if s.matches("DBInstanceStatus") /* DBInstanceStatus com.amazonaws.neptune#DBInstance$DBInstanceStatus */ =>  {
                let var_244 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_instance_status(var_244);
            }
            ,
            s if s.matches("MasterUsername") /* MasterUsername com.amazonaws.neptune#DBInstance$MasterUsername */ =>  {
                let var_245 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_master_username(var_245);
            }
            ,
            s if s.matches("DBName") /* DBName com.amazonaws.neptune#DBInstance$DBName */ =>  {
                let var_246 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_name(var_246);
            }
            ,
            s if s.matches("Endpoint") /* Endpoint com.amazonaws.neptune#DBInstance$Endpoint */ =>  {
                let var_247 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_endpoint(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_endpoint(var_247);
            }
            ,
            s if s.matches("AllocatedStorage") /* AllocatedStorage com.amazonaws.neptune#DBInstance$AllocatedStorage */ =>  {
                let var_248 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.neptune#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_allocated_storage(var_248);
            }
            ,
            s if s.matches("InstanceCreateTime") /* InstanceCreateTime com.amazonaws.neptune#DBInstance$InstanceCreateTime */ =>  {
                let var_249 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.neptune#TStamp`)"))
                        ?
                    )
                ;
                builder = builder.set_instance_create_time(var_249);
            }
            ,
            s if s.matches("PreferredBackupWindow") /* PreferredBackupWindow com.amazonaws.neptune#DBInstance$PreferredBackupWindow */ =>  {
                let var_250 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_preferred_backup_window(var_250);
            }
            ,
            s if s.matches("BackupRetentionPeriod") /* BackupRetentionPeriod com.amazonaws.neptune#DBInstance$BackupRetentionPeriod */ =>  {
                let var_251 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.neptune#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_backup_retention_period(var_251);
            }
            ,
            s if s.matches("DBSecurityGroups") /* DBSecurityGroups com.amazonaws.neptune#DBInstance$DBSecurityGroups */ =>  {
                let var_252 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_db_security_group_membership_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_db_security_groups(var_252);
            }
            ,
            s if s.matches("VpcSecurityGroups") /* VpcSecurityGroups com.amazonaws.neptune#DBInstance$VpcSecurityGroups */ =>  {
                let var_253 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_vpc_security_group_membership_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_vpc_security_groups(var_253);
            }
            ,
            s if s.matches("DBParameterGroups") /* DBParameterGroups com.amazonaws.neptune#DBInstance$DBParameterGroups */ =>  {
                let var_254 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_db_parameter_group_status_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_db_parameter_groups(var_254);
            }
            ,
            s if s.matches("AvailabilityZone") /* AvailabilityZone com.amazonaws.neptune#DBInstance$AvailabilityZone */ =>  {
                let var_255 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone(var_255);
            }
            ,
            s if s.matches("DBSubnetGroup") /* DBSubnetGroup com.amazonaws.neptune#DBInstance$DBSubnetGroup */ =>  {
                let var_256 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_db_subnet_group(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_db_subnet_group(var_256);
            }
            ,
            s if s.matches("PreferredMaintenanceWindow") /* PreferredMaintenanceWindow com.amazonaws.neptune#DBInstance$PreferredMaintenanceWindow */ =>  {
                let var_257 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_preferred_maintenance_window(var_257);
            }
            ,
            s if s.matches("PendingModifiedValues") /* PendingModifiedValues com.amazonaws.neptune#DBInstance$PendingModifiedValues */ =>  {
                let var_258 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_pending_modified_values(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_pending_modified_values(var_258);
            }
            ,
            s if s.matches("LatestRestorableTime") /* LatestRestorableTime com.amazonaws.neptune#DBInstance$LatestRestorableTime */ =>  {
                let var_259 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.neptune#TStamp`)"))
                        ?
                    )
                ;
                builder = builder.set_latest_restorable_time(var_259);
            }
            ,
            s if s.matches("MultiAZ") /* MultiAZ com.amazonaws.neptune#DBInstance$MultiAZ */ =>  {
                let var_260 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.neptune#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_multi_az(var_260);
            }
            ,
            s if s.matches("EngineVersion") /* EngineVersion com.amazonaws.neptune#DBInstance$EngineVersion */ =>  {
                let var_261 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_engine_version(var_261);
            }
            ,
            s if s.matches("AutoMinorVersionUpgrade") /* AutoMinorVersionUpgrade com.amazonaws.neptune#DBInstance$AutoMinorVersionUpgrade */ =>  {
                let var_262 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.neptune#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_auto_minor_version_upgrade(var_262);
            }
            ,
            s if s.matches("ReadReplicaSourceDBInstanceIdentifier") /* ReadReplicaSourceDBInstanceIdentifier com.amazonaws.neptune#DBInstance$ReadReplicaSourceDBInstanceIdentifier */ =>  {
                let var_263 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_read_replica_source_db_instance_identifier(var_263);
            }
            ,
            s if s.matches("ReadReplicaDBInstanceIdentifiers") /* ReadReplicaDBInstanceIdentifiers com.amazonaws.neptune#DBInstance$ReadReplicaDBInstanceIdentifiers */ =>  {
                let var_264 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_read_replica_db_instance_identifier_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_read_replica_db_instance_identifiers(var_264);
            }
            ,
            s if s.matches("ReadReplicaDBClusterIdentifiers") /* ReadReplicaDBClusterIdentifiers com.amazonaws.neptune#DBInstance$ReadReplicaDBClusterIdentifiers */ =>  {
                let var_265 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_read_replica_db_cluster_identifier_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_read_replica_db_cluster_identifiers(var_265);
            }
            ,
            s if s.matches("LicenseModel") /* LicenseModel com.amazonaws.neptune#DBInstance$LicenseModel */ =>  {
                let var_266 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_license_model(var_266);
            }
            ,
            s if s.matches("Iops") /* Iops com.amazonaws.neptune#DBInstance$Iops */ =>  {
                let var_267 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.neptune#IntegerOptional`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_iops(var_267);
            }
            ,
            s if s.matches("OptionGroupMemberships") /* OptionGroupMemberships com.amazonaws.neptune#DBInstance$OptionGroupMemberships */ =>  {
                let var_268 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_option_group_membership_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_option_group_memberships(var_268);
            }
            ,
            s if s.matches("CharacterSetName") /* CharacterSetName com.amazonaws.neptune#DBInstance$CharacterSetName */ =>  {
                let var_269 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_character_set_name(var_269);
            }
            ,
            s if s.matches("SecondaryAvailabilityZone") /* SecondaryAvailabilityZone com.amazonaws.neptune#DBInstance$SecondaryAvailabilityZone */ =>  {
                let var_270 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_secondary_availability_zone(var_270);
            }
            ,
            s if s.matches("PubliclyAccessible") /* PubliclyAccessible com.amazonaws.neptune#DBInstance$PubliclyAccessible */ =>  {
                let var_271 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.neptune#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_publicly_accessible(var_271);
            }
            ,
            s if s.matches("StatusInfos") /* StatusInfos com.amazonaws.neptune#DBInstance$StatusInfos */ =>  {
                let var_272 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_db_instance_status_info_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_status_infos(var_272);
            }
            ,
            s if s.matches("StorageType") /* StorageType com.amazonaws.neptune#DBInstance$StorageType */ =>  {
                let var_273 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_storage_type(var_273);
            }
            ,
            s if s.matches("TdeCredentialArn") /* TdeCredentialArn com.amazonaws.neptune#DBInstance$TdeCredentialArn */ =>  {
                let var_274 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_tde_credential_arn(var_274);
            }
            ,
            s if s.matches("DbInstancePort") /* DbInstancePort com.amazonaws.neptune#DBInstance$DbInstancePort */ =>  {
                let var_275 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.neptune#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_db_instance_port(var_275);
            }
            ,
            s if s.matches("DBClusterIdentifier") /* DBClusterIdentifier com.amazonaws.neptune#DBInstance$DBClusterIdentifier */ =>  {
                let var_276 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_cluster_identifier(var_276);
            }
            ,
            s if s.matches("StorageEncrypted") /* StorageEncrypted com.amazonaws.neptune#DBInstance$StorageEncrypted */ =>  {
                let var_277 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.neptune#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_storage_encrypted(var_277);
            }
            ,
            s if s.matches("KmsKeyId") /* KmsKeyId com.amazonaws.neptune#DBInstance$KmsKeyId */ =>  {
                let var_278 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_kms_key_id(var_278);
            }
            ,
            s if s.matches("DbiResourceId") /* DbiResourceId com.amazonaws.neptune#DBInstance$DbiResourceId */ =>  {
                let var_279 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_dbi_resource_id(var_279);
            }
            ,
            s if s.matches("CACertificateIdentifier") /* CACertificateIdentifier com.amazonaws.neptune#DBInstance$CACertificateIdentifier */ =>  {
                let var_280 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ca_certificate_identifier(var_280);
            }
            ,
            s if s.matches("DomainMemberships") /* DomainMemberships com.amazonaws.neptune#DBInstance$DomainMemberships */ =>  {
                let var_281 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_domain_membership_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_domain_memberships(var_281);
            }
            ,
            s if s.matches("CopyTagsToSnapshot") /* CopyTagsToSnapshot com.amazonaws.neptune#DBInstance$CopyTagsToSnapshot */ =>  {
                let var_282 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.neptune#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_copy_tags_to_snapshot(var_282);
            }
            ,
            s if s.matches("MonitoringInterval") /* MonitoringInterval com.amazonaws.neptune#DBInstance$MonitoringInterval */ =>  {
                let var_283 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.neptune#IntegerOptional`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_monitoring_interval(var_283);
            }
            ,
            s if s.matches("EnhancedMonitoringResourceArn") /* EnhancedMonitoringResourceArn com.amazonaws.neptune#DBInstance$EnhancedMonitoringResourceArn */ =>  {
                let var_284 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_enhanced_monitoring_resource_arn(var_284);
            }
            ,
            s if s.matches("MonitoringRoleArn") /* MonitoringRoleArn com.amazonaws.neptune#DBInstance$MonitoringRoleArn */ =>  {
                let var_285 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_monitoring_role_arn(var_285);
            }
            ,
            s if s.matches("PromotionTier") /* PromotionTier com.amazonaws.neptune#DBInstance$PromotionTier */ =>  {
                let var_286 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.neptune#IntegerOptional`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_promotion_tier(var_286);
            }
            ,
            s if s.matches("DBInstanceArn") /* DBInstanceArn com.amazonaws.neptune#DBInstance$DBInstanceArn */ =>  {
                let var_287 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_instance_arn(var_287);
            }
            ,
            s if s.matches("Timezone") /* Timezone com.amazonaws.neptune#DBInstance$Timezone */ =>  {
                let var_288 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_timezone(var_288);
            }
            ,
            s if s.matches("IAMDatabaseAuthenticationEnabled") /* IAMDatabaseAuthenticationEnabled com.amazonaws.neptune#DBInstance$IAMDatabaseAuthenticationEnabled */ =>  {
                let var_289 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.neptune#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_iam_database_authentication_enabled(var_289);
            }
            ,
            s if s.matches("PerformanceInsightsEnabled") /* PerformanceInsightsEnabled com.amazonaws.neptune#DBInstance$PerformanceInsightsEnabled */ =>  {
                let var_290 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.neptune#BooleanOptional`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_performance_insights_enabled(var_290);
            }
            ,
            s if s.matches("PerformanceInsightsKMSKeyId") /* PerformanceInsightsKMSKeyId com.amazonaws.neptune#DBInstance$PerformanceInsightsKMSKeyId */ =>  {
                let var_291 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_performance_insights_kms_key_id(var_291);
            }
            ,
            s if s.matches("EnabledCloudwatchLogsExports") /* EnabledCloudwatchLogsExports com.amazonaws.neptune#DBInstance$EnabledCloudwatchLogsExports */ =>  {
                let var_292 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_log_type_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_enabled_cloudwatch_logs_exports(var_292);
            }
            ,
            s if s.matches("DeletionProtection") /* DeletionProtection com.amazonaws.neptune#DBInstance$DeletionProtection */ =>  {
                let var_293 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.neptune#BooleanOptional`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_deletion_protection(var_293);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_db_subnet_group(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DbSubnetGroup, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DbSubnetGroup::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DBSubnetGroupName") /* DBSubnetGroupName com.amazonaws.neptune#DBSubnetGroup$DBSubnetGroupName */ =>  {
                let var_294 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_subnet_group_name(var_294);
            }
            ,
            s if s.matches("DBSubnetGroupDescription") /* DBSubnetGroupDescription com.amazonaws.neptune#DBSubnetGroup$DBSubnetGroupDescription */ =>  {
                let var_295 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_subnet_group_description(var_295);
            }
            ,
            s if s.matches("VpcId") /* VpcId com.amazonaws.neptune#DBSubnetGroup$VpcId */ =>  {
                let var_296 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_296);
            }
            ,
            s if s.matches("SubnetGroupStatus") /* SubnetGroupStatus com.amazonaws.neptune#DBSubnetGroup$SubnetGroupStatus */ =>  {
                let var_297 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_subnet_group_status(var_297);
            }
            ,
            s if s.matches("Subnets") /* Subnets com.amazonaws.neptune#DBSubnetGroup$Subnets */ =>  {
                let var_298 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_subnet_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_subnets(var_298);
            }
            ,
            s if s.matches("DBSubnetGroupArn") /* DBSubnetGroupArn com.amazonaws.neptune#DBSubnetGroup$DBSubnetGroupArn */ =>  {
                let var_299 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_subnet_group_arn(var_299);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_neptune_db_cluster_endpoint_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::DbClusterEndpoint>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DBClusterEndpointList") /* member com.amazonaws.neptune#DBClusterEndpointList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_db_cluster_endpoint(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_neptune_db_cluster_parameter_group_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::DbClusterParameterGroup>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DBClusterParameterGroup") /* member com.amazonaws.neptune#DBClusterParameterGroupList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_db_cluster_parameter_group(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_neptune_parameters_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::Parameter>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Parameter") /* member com.amazonaws.neptune#ParametersList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_parameter(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_neptune_db_cluster_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::DbCluster>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DBCluster") /* member com.amazonaws.neptune#DBClusterList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_db_cluster(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_db_cluster_snapshot_attributes_result(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DbClusterSnapshotAttributesResult, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DbClusterSnapshotAttributesResult::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DBClusterSnapshotIdentifier") /* DBClusterSnapshotIdentifier com.amazonaws.neptune#DBClusterSnapshotAttributesResult$DBClusterSnapshotIdentifier */ =>  {
                let var_300 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_cluster_snapshot_identifier(var_300);
            }
            ,
            s if s.matches("DBClusterSnapshotAttributes") /* DBClusterSnapshotAttributes com.amazonaws.neptune#DBClusterSnapshotAttributesResult$DBClusterSnapshotAttributes */ =>  {
                let var_301 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_db_cluster_snapshot_attribute_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_db_cluster_snapshot_attributes(var_301);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_neptune_db_cluster_snapshot_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::DbClusterSnapshot>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DBClusterSnapshot") /* member com.amazonaws.neptune#DBClusterSnapshotList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_db_cluster_snapshot(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_neptune_db_engine_version_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::DbEngineVersion>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DBEngineVersion") /* member com.amazonaws.neptune#DBEngineVersionList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_db_engine_version(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_neptune_db_instance_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::DbInstance>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DBInstance") /* member com.amazonaws.neptune#DBInstanceList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_db_instance(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_neptune_db_parameter_group_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::DbParameterGroup>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DBParameterGroup") /* member com.amazonaws.neptune#DBParameterGroupList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_db_parameter_group(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_neptune_db_subnet_groups(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::DbSubnetGroup>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DBSubnetGroup") /* member com.amazonaws.neptune#DBSubnetGroups$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_db_subnet_group(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_engine_defaults(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::EngineDefaults, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::EngineDefaults::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DBParameterGroupFamily") /* DBParameterGroupFamily com.amazonaws.neptune#EngineDefaults$DBParameterGroupFamily */ =>  {
                let var_302 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_parameter_group_family(var_302);
            }
            ,
            s if s.matches("Marker") /* Marker com.amazonaws.neptune#EngineDefaults$Marker */ =>  {
                let var_303 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_marker(var_303);
            }
            ,
            s if s.matches("Parameters") /* Parameters com.amazonaws.neptune#EngineDefaults$Parameters */ =>  {
                let var_304 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_parameters_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_parameters(var_304);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_neptune_event_categories_map_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::EventCategoriesMap>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("EventCategoriesMap") /* member com.amazonaws.neptune#EventCategoriesMapList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_event_categories_map(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_neptune_event_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::Event>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Event") /* member com.amazonaws.neptune#EventList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_event(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_neptune_event_subscriptions_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::EventSubscription>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("EventSubscription") /* member com.amazonaws.neptune#EventSubscriptionsList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_event_subscription(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_neptune_orderable_db_instance_options_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::OrderableDbInstanceOption>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("OrderableDBInstanceOption") /* member com.amazonaws.neptune#OrderableDBInstanceOptionsList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_orderable_db_instance_option(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_neptune_pending_maintenance_actions(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::ResourcePendingMaintenanceActions>,
    smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ResourcePendingMaintenanceActions") /* member com.amazonaws.neptune#PendingMaintenanceActions$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_resource_pending_maintenance_actions(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_valid_db_instance_modifications_message(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ValidDbInstanceModificationsMessage, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ValidDbInstanceModificationsMessage::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Storage") /* Storage com.amazonaws.neptune#ValidDBInstanceModificationsMessage$Storage */ =>  {
                let var_305 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_valid_storage_options_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_storage(var_305);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_neptune_tag_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::Tag>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Tag") /* member com.amazonaws.neptune#TagList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_tag(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_neptune_source_ids_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("SourceId") /* member com.amazonaws.neptune#SourceIdsList$member */ =>  {
                out.push(
                    Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                        smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_neptune_event_categories_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("EventCategory") /* member com.amazonaws.neptune#EventCategoriesList$member */ =>  {
                out.push(
                    Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                        smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_neptune_pending_maintenance_action_details(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::PendingMaintenanceAction>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("PendingMaintenanceAction") /* member com.amazonaws.neptune#PendingMaintenanceActionDetails$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_pending_maintenance_action(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_neptune_availability_zones(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("AvailabilityZone") /* member com.amazonaws.neptune#AvailabilityZones$member */ =>  {
                out.push(
                    Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                        smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_neptune_db_cluster_option_group_memberships(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::DbClusterOptionGroupStatus>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DBClusterOptionGroup") /* member com.amazonaws.neptune#DBClusterOptionGroupMemberships$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_db_cluster_option_group_status(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_neptune_read_replica_identifier_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ReadReplicaIdentifier") /* member com.amazonaws.neptune#ReadReplicaIdentifierList$member */ =>  {
                out.push(
                    Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                        smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_neptune_db_cluster_member_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::DbClusterMember>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DBClusterMember") /* member com.amazonaws.neptune#DBClusterMemberList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_db_cluster_member(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_neptune_vpc_security_group_membership_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::VpcSecurityGroupMembership>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("VpcSecurityGroupMembership") /* member com.amazonaws.neptune#VpcSecurityGroupMembershipList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_vpc_security_group_membership(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_neptune_db_cluster_roles(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::DbClusterRole>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DBClusterRole") /* member com.amazonaws.neptune#DBClusterRoles$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_db_cluster_role(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_neptune_log_type_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.neptune#LogTypeList$member */ =>  {
                out.push(
                    Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                        smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_endpoint(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Endpoint, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Endpoint::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Address") /* Address com.amazonaws.neptune#Endpoint$Address */ =>  {
                let var_306 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_address(var_306);
            }
            ,
            s if s.matches("Port") /* Port com.amazonaws.neptune#Endpoint$Port */ =>  {
                let var_307 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.neptune#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_port(var_307);
            }
            ,
            s if s.matches("HostedZoneId") /* HostedZoneId com.amazonaws.neptune#Endpoint$HostedZoneId */ =>  {
                let var_308 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_hosted_zone_id(var_308);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_neptune_db_security_group_membership_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::DbSecurityGroupMembership>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DBSecurityGroup") /* member com.amazonaws.neptune#DBSecurityGroupMembershipList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_db_security_group_membership(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_neptune_db_parameter_group_status_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::DbParameterGroupStatus>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DBParameterGroup") /* member com.amazonaws.neptune#DBParameterGroupStatusList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_db_parameter_group_status(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_pending_modified_values(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::PendingModifiedValues, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::PendingModifiedValues::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DBInstanceClass") /* DBInstanceClass com.amazonaws.neptune#PendingModifiedValues$DBInstanceClass */ =>  {
                let var_309 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_instance_class(var_309);
            }
            ,
            s if s.matches("AllocatedStorage") /* AllocatedStorage com.amazonaws.neptune#PendingModifiedValues$AllocatedStorage */ =>  {
                let var_310 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.neptune#IntegerOptional`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_allocated_storage(var_310);
            }
            ,
            s if s.matches("MasterUserPassword") /* MasterUserPassword com.amazonaws.neptune#PendingModifiedValues$MasterUserPassword */ =>  {
                let var_311 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_master_user_password(var_311);
            }
            ,
            s if s.matches("Port") /* Port com.amazonaws.neptune#PendingModifiedValues$Port */ =>  {
                let var_312 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.neptune#IntegerOptional`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_port(var_312);
            }
            ,
            s if s.matches("BackupRetentionPeriod") /* BackupRetentionPeriod com.amazonaws.neptune#PendingModifiedValues$BackupRetentionPeriod */ =>  {
                let var_313 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.neptune#IntegerOptional`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_backup_retention_period(var_313);
            }
            ,
            s if s.matches("MultiAZ") /* MultiAZ com.amazonaws.neptune#PendingModifiedValues$MultiAZ */ =>  {
                let var_314 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.neptune#BooleanOptional`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_multi_az(var_314);
            }
            ,
            s if s.matches("EngineVersion") /* EngineVersion com.amazonaws.neptune#PendingModifiedValues$EngineVersion */ =>  {
                let var_315 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_engine_version(var_315);
            }
            ,
            s if s.matches("LicenseModel") /* LicenseModel com.amazonaws.neptune#PendingModifiedValues$LicenseModel */ =>  {
                let var_316 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_license_model(var_316);
            }
            ,
            s if s.matches("Iops") /* Iops com.amazonaws.neptune#PendingModifiedValues$Iops */ =>  {
                let var_317 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.neptune#IntegerOptional`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_iops(var_317);
            }
            ,
            s if s.matches("DBInstanceIdentifier") /* DBInstanceIdentifier com.amazonaws.neptune#PendingModifiedValues$DBInstanceIdentifier */ =>  {
                let var_318 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_instance_identifier(var_318);
            }
            ,
            s if s.matches("StorageType") /* StorageType com.amazonaws.neptune#PendingModifiedValues$StorageType */ =>  {
                let var_319 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_storage_type(var_319);
            }
            ,
            s if s.matches("CACertificateIdentifier") /* CACertificateIdentifier com.amazonaws.neptune#PendingModifiedValues$CACertificateIdentifier */ =>  {
                let var_320 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ca_certificate_identifier(var_320);
            }
            ,
            s if s.matches("DBSubnetGroupName") /* DBSubnetGroupName com.amazonaws.neptune#PendingModifiedValues$DBSubnetGroupName */ =>  {
                let var_321 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_subnet_group_name(var_321);
            }
            ,
            s if s.matches("PendingCloudwatchLogsExports") /* PendingCloudwatchLogsExports com.amazonaws.neptune#PendingModifiedValues$PendingCloudwatchLogsExports */ =>  {
                let var_322 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_pending_cloudwatch_logs_exports(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_pending_cloudwatch_logs_exports(var_322);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_neptune_read_replica_db_instance_identifier_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ReadReplicaDBInstanceIdentifier") /* member com.amazonaws.neptune#ReadReplicaDBInstanceIdentifierList$member */ =>  {
                out.push(
                    Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                        smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_neptune_read_replica_db_cluster_identifier_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ReadReplicaDBClusterIdentifier") /* member com.amazonaws.neptune#ReadReplicaDBClusterIdentifierList$member */ =>  {
                out.push(
                    Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                        smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_neptune_option_group_membership_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::OptionGroupMembership>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("OptionGroupMembership") /* member com.amazonaws.neptune#OptionGroupMembershipList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_option_group_membership(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_neptune_db_instance_status_info_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::DbInstanceStatusInfo>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DBInstanceStatusInfo") /* member com.amazonaws.neptune#DBInstanceStatusInfoList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_db_instance_status_info(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_neptune_domain_membership_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::DomainMembership>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DomainMembership") /* member com.amazonaws.neptune#DomainMembershipList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_domain_membership(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_neptune_subnet_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::Subnet>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Subnet") /* member com.amazonaws.neptune#SubnetList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_subnet(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_db_cluster_endpoint(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DbClusterEndpoint, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DbClusterEndpoint::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DBClusterEndpointIdentifier") /* DBClusterEndpointIdentifier com.amazonaws.neptune#DBClusterEndpoint$DBClusterEndpointIdentifier */ =>  {
                let var_323 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_cluster_endpoint_identifier(var_323);
            }
            ,
            s if s.matches("DBClusterIdentifier") /* DBClusterIdentifier com.amazonaws.neptune#DBClusterEndpoint$DBClusterIdentifier */ =>  {
                let var_324 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_cluster_identifier(var_324);
            }
            ,
            s if s.matches("DBClusterEndpointResourceIdentifier") /* DBClusterEndpointResourceIdentifier com.amazonaws.neptune#DBClusterEndpoint$DBClusterEndpointResourceIdentifier */ =>  {
                let var_325 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_cluster_endpoint_resource_identifier(var_325);
            }
            ,
            s if s.matches("Endpoint") /* Endpoint com.amazonaws.neptune#DBClusterEndpoint$Endpoint */ =>  {
                let var_326 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_endpoint(var_326);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.neptune#DBClusterEndpoint$Status */ =>  {
                let var_327 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_327);
            }
            ,
            s if s.matches("EndpointType") /* EndpointType com.amazonaws.neptune#DBClusterEndpoint$EndpointType */ =>  {
                let var_328 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_endpoint_type(var_328);
            }
            ,
            s if s.matches("CustomEndpointType") /* CustomEndpointType com.amazonaws.neptune#DBClusterEndpoint$CustomEndpointType */ =>  {
                let var_329 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_custom_endpoint_type(var_329);
            }
            ,
            s if s.matches("StaticMembers") /* StaticMembers com.amazonaws.neptune#DBClusterEndpoint$StaticMembers */ =>  {
                let var_330 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_static_members(var_330);
            }
            ,
            s if s.matches("ExcludedMembers") /* ExcludedMembers com.amazonaws.neptune#DBClusterEndpoint$ExcludedMembers */ =>  {
                let var_331 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_excluded_members(var_331);
            }
            ,
            s if s.matches("DBClusterEndpointArn") /* DBClusterEndpointArn com.amazonaws.neptune#DBClusterEndpoint$DBClusterEndpointArn */ =>  {
                let var_332 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_cluster_endpoint_arn(var_332);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_parameter(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Parameter, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Parameter::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ParameterName") /* ParameterName com.amazonaws.neptune#Parameter$ParameterName */ =>  {
                let var_333 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_parameter_name(var_333);
            }
            ,
            s if s.matches("ParameterValue") /* ParameterValue com.amazonaws.neptune#Parameter$ParameterValue */ =>  {
                let var_334 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_parameter_value(var_334);
            }
            ,
            s if s.matches("Description") /* Description com.amazonaws.neptune#Parameter$Description */ =>  {
                let var_335 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_335);
            }
            ,
            s if s.matches("Source") /* Source com.amazonaws.neptune#Parameter$Source */ =>  {
                let var_336 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_source(var_336);
            }
            ,
            s if s.matches("ApplyType") /* ApplyType com.amazonaws.neptune#Parameter$ApplyType */ =>  {
                let var_337 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_apply_type(var_337);
            }
            ,
            s if s.matches("DataType") /* DataType com.amazonaws.neptune#Parameter$DataType */ =>  {
                let var_338 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_data_type(var_338);
            }
            ,
            s if s.matches("AllowedValues") /* AllowedValues com.amazonaws.neptune#Parameter$AllowedValues */ =>  {
                let var_339 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_allowed_values(var_339);
            }
            ,
            s if s.matches("IsModifiable") /* IsModifiable com.amazonaws.neptune#Parameter$IsModifiable */ =>  {
                let var_340 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.neptune#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_is_modifiable(var_340);
            }
            ,
            s if s.matches("MinimumEngineVersion") /* MinimumEngineVersion com.amazonaws.neptune#Parameter$MinimumEngineVersion */ =>  {
                let var_341 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_minimum_engine_version(var_341);
            }
            ,
            s if s.matches("ApplyMethod") /* ApplyMethod com.amazonaws.neptune#Parameter$ApplyMethod */ =>  {
                let var_342 =
                    Some(
                        Result::<crate::model::ApplyMethod, smithy_xml::decode::XmlError>::Ok(
                            crate::model::ApplyMethod::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_apply_method(var_342);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_neptune_db_cluster_snapshot_attribute_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::DbClusterSnapshotAttribute>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DBClusterSnapshotAttribute") /* member com.amazonaws.neptune#DBClusterSnapshotAttributeList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_db_cluster_snapshot_attribute(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_db_engine_version(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DbEngineVersion, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DbEngineVersion::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Engine") /* Engine com.amazonaws.neptune#DBEngineVersion$Engine */ =>  {
                let var_343 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_engine(var_343);
            }
            ,
            s if s.matches("EngineVersion") /* EngineVersion com.amazonaws.neptune#DBEngineVersion$EngineVersion */ =>  {
                let var_344 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_engine_version(var_344);
            }
            ,
            s if s.matches("DBParameterGroupFamily") /* DBParameterGroupFamily com.amazonaws.neptune#DBEngineVersion$DBParameterGroupFamily */ =>  {
                let var_345 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_parameter_group_family(var_345);
            }
            ,
            s if s.matches("DBEngineDescription") /* DBEngineDescription com.amazonaws.neptune#DBEngineVersion$DBEngineDescription */ =>  {
                let var_346 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_engine_description(var_346);
            }
            ,
            s if s.matches("DBEngineVersionDescription") /* DBEngineVersionDescription com.amazonaws.neptune#DBEngineVersion$DBEngineVersionDescription */ =>  {
                let var_347 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_engine_version_description(var_347);
            }
            ,
            s if s.matches("DefaultCharacterSet") /* DefaultCharacterSet com.amazonaws.neptune#DBEngineVersion$DefaultCharacterSet */ =>  {
                let var_348 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_character_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_default_character_set(var_348);
            }
            ,
            s if s.matches("SupportedCharacterSets") /* SupportedCharacterSets com.amazonaws.neptune#DBEngineVersion$SupportedCharacterSets */ =>  {
                let var_349 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_supported_character_sets_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_supported_character_sets(var_349);
            }
            ,
            s if s.matches("ValidUpgradeTarget") /* ValidUpgradeTarget com.amazonaws.neptune#DBEngineVersion$ValidUpgradeTarget */ =>  {
                let var_350 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_valid_upgrade_target_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_valid_upgrade_target(var_350);
            }
            ,
            s if s.matches("SupportedTimezones") /* SupportedTimezones com.amazonaws.neptune#DBEngineVersion$SupportedTimezones */ =>  {
                let var_351 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_supported_timezones_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_supported_timezones(var_351);
            }
            ,
            s if s.matches("ExportableLogTypes") /* ExportableLogTypes com.amazonaws.neptune#DBEngineVersion$ExportableLogTypes */ =>  {
                let var_352 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_log_type_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_exportable_log_types(var_352);
            }
            ,
            s if s.matches("SupportsLogExportsToCloudwatchLogs") /* SupportsLogExportsToCloudwatchLogs com.amazonaws.neptune#DBEngineVersion$SupportsLogExportsToCloudwatchLogs */ =>  {
                let var_353 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.neptune#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_supports_log_exports_to_cloudwatch_logs(var_353);
            }
            ,
            s if s.matches("SupportsReadReplica") /* SupportsReadReplica com.amazonaws.neptune#DBEngineVersion$SupportsReadReplica */ =>  {
                let var_354 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.neptune#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_supports_read_replica(var_354);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_event_categories_map(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::EventCategoriesMap, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::EventCategoriesMap::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("SourceType") /* SourceType com.amazonaws.neptune#EventCategoriesMap$SourceType */ =>  {
                let var_355 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_source_type(var_355);
            }
            ,
            s if s.matches("EventCategories") /* EventCategories com.amazonaws.neptune#EventCategoriesMap$EventCategories */ =>  {
                let var_356 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_event_categories_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_event_categories(var_356);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_event(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Event, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Event::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("SourceIdentifier") /* SourceIdentifier com.amazonaws.neptune#Event$SourceIdentifier */ =>  {
                let var_357 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_source_identifier(var_357);
            }
            ,
            s if s.matches("SourceType") /* SourceType com.amazonaws.neptune#Event$SourceType */ =>  {
                let var_358 =
                    Some(
                        Result::<crate::model::SourceType, smithy_xml::decode::XmlError>::Ok(
                            crate::model::SourceType::from(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_source_type(var_358);
            }
            ,
            s if s.matches("Message") /* Message com.amazonaws.neptune#Event$Message */ =>  {
                let var_359 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_359);
            }
            ,
            s if s.matches("EventCategories") /* EventCategories com.amazonaws.neptune#Event$EventCategories */ =>  {
                let var_360 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_event_categories_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_event_categories(var_360);
            }
            ,
            s if s.matches("Date") /* Date com.amazonaws.neptune#Event$Date */ =>  {
                let var_361 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.neptune#TStamp`)"))
                        ?
                    )
                ;
                builder = builder.set_date(var_361);
            }
            ,
            s if s.matches("SourceArn") /* SourceArn com.amazonaws.neptune#Event$SourceArn */ =>  {
                let var_362 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_source_arn(var_362);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_orderable_db_instance_option(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::OrderableDbInstanceOption, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::OrderableDbInstanceOption::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Engine") /* Engine com.amazonaws.neptune#OrderableDBInstanceOption$Engine */ =>  {
                let var_363 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_engine(var_363);
            }
            ,
            s if s.matches("EngineVersion") /* EngineVersion com.amazonaws.neptune#OrderableDBInstanceOption$EngineVersion */ =>  {
                let var_364 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_engine_version(var_364);
            }
            ,
            s if s.matches("DBInstanceClass") /* DBInstanceClass com.amazonaws.neptune#OrderableDBInstanceOption$DBInstanceClass */ =>  {
                let var_365 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_instance_class(var_365);
            }
            ,
            s if s.matches("LicenseModel") /* LicenseModel com.amazonaws.neptune#OrderableDBInstanceOption$LicenseModel */ =>  {
                let var_366 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_license_model(var_366);
            }
            ,
            s if s.matches("AvailabilityZones") /* AvailabilityZones com.amazonaws.neptune#OrderableDBInstanceOption$AvailabilityZones */ =>  {
                let var_367 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_availability_zone_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_availability_zones(var_367);
            }
            ,
            s if s.matches("MultiAZCapable") /* MultiAZCapable com.amazonaws.neptune#OrderableDBInstanceOption$MultiAZCapable */ =>  {
                let var_368 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.neptune#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_multi_az_capable(var_368);
            }
            ,
            s if s.matches("ReadReplicaCapable") /* ReadReplicaCapable com.amazonaws.neptune#OrderableDBInstanceOption$ReadReplicaCapable */ =>  {
                let var_369 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.neptune#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_read_replica_capable(var_369);
            }
            ,
            s if s.matches("Vpc") /* Vpc com.amazonaws.neptune#OrderableDBInstanceOption$Vpc */ =>  {
                let var_370 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.neptune#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_vpc(var_370);
            }
            ,
            s if s.matches("SupportsStorageEncryption") /* SupportsStorageEncryption com.amazonaws.neptune#OrderableDBInstanceOption$SupportsStorageEncryption */ =>  {
                let var_371 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.neptune#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_supports_storage_encryption(var_371);
            }
            ,
            s if s.matches("StorageType") /* StorageType com.amazonaws.neptune#OrderableDBInstanceOption$StorageType */ =>  {
                let var_372 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_storage_type(var_372);
            }
            ,
            s if s.matches("SupportsIops") /* SupportsIops com.amazonaws.neptune#OrderableDBInstanceOption$SupportsIops */ =>  {
                let var_373 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.neptune#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_supports_iops(var_373);
            }
            ,
            s if s.matches("SupportsEnhancedMonitoring") /* SupportsEnhancedMonitoring com.amazonaws.neptune#OrderableDBInstanceOption$SupportsEnhancedMonitoring */ =>  {
                let var_374 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.neptune#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_supports_enhanced_monitoring(var_374);
            }
            ,
            s if s.matches("SupportsIAMDatabaseAuthentication") /* SupportsIAMDatabaseAuthentication com.amazonaws.neptune#OrderableDBInstanceOption$SupportsIAMDatabaseAuthentication */ =>  {
                let var_375 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.neptune#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_supports_iam_database_authentication(var_375);
            }
            ,
            s if s.matches("SupportsPerformanceInsights") /* SupportsPerformanceInsights com.amazonaws.neptune#OrderableDBInstanceOption$SupportsPerformanceInsights */ =>  {
                let var_376 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.neptune#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_supports_performance_insights(var_376);
            }
            ,
            s if s.matches("MinStorageSize") /* MinStorageSize com.amazonaws.neptune#OrderableDBInstanceOption$MinStorageSize */ =>  {
                let var_377 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.neptune#IntegerOptional`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_min_storage_size(var_377);
            }
            ,
            s if s.matches("MaxStorageSize") /* MaxStorageSize com.amazonaws.neptune#OrderableDBInstanceOption$MaxStorageSize */ =>  {
                let var_378 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.neptune#IntegerOptional`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max_storage_size(var_378);
            }
            ,
            s if s.matches("MinIopsPerDbInstance") /* MinIopsPerDbInstance com.amazonaws.neptune#OrderableDBInstanceOption$MinIopsPerDbInstance */ =>  {
                let var_379 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.neptune#IntegerOptional`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_min_iops_per_db_instance(var_379);
            }
            ,
            s if s.matches("MaxIopsPerDbInstance") /* MaxIopsPerDbInstance com.amazonaws.neptune#OrderableDBInstanceOption$MaxIopsPerDbInstance */ =>  {
                let var_380 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.neptune#IntegerOptional`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max_iops_per_db_instance(var_380);
            }
            ,
            s if s.matches("MinIopsPerGib") /* MinIopsPerGib com.amazonaws.neptune#OrderableDBInstanceOption$MinIopsPerGib */ =>  {
                let var_381 =
                    Some(
                         {
                            <f64 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (double: `com.amazonaws.neptune#DoubleOptional`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_min_iops_per_gib(var_381);
            }
            ,
            s if s.matches("MaxIopsPerGib") /* MaxIopsPerGib com.amazonaws.neptune#OrderableDBInstanceOption$MaxIopsPerGib */ =>  {
                let var_382 =
                    Some(
                         {
                            <f64 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (double: `com.amazonaws.neptune#DoubleOptional`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max_iops_per_gib(var_382);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_neptune_valid_storage_options_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ValidStorageOptions>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ValidStorageOptions") /* member com.amazonaws.neptune#ValidStorageOptionsList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_valid_storage_options(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_tag(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Tag, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Tag::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Key") /* Key com.amazonaws.neptune#Tag$Key */ =>  {
                let var_383 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_key(var_383);
            }
            ,
            s if s.matches("Value") /* Value com.amazonaws.neptune#Tag$Value */ =>  {
                let var_384 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_value(var_384);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_pending_maintenance_action(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::PendingMaintenanceAction, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::PendingMaintenanceAction::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Action") /* Action com.amazonaws.neptune#PendingMaintenanceAction$Action */ =>  {
                let var_385 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_action(var_385);
            }
            ,
            s if s.matches("AutoAppliedAfterDate") /* AutoAppliedAfterDate com.amazonaws.neptune#PendingMaintenanceAction$AutoAppliedAfterDate */ =>  {
                let var_386 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.neptune#TStamp`)"))
                        ?
                    )
                ;
                builder = builder.set_auto_applied_after_date(var_386);
            }
            ,
            s if s.matches("ForcedApplyDate") /* ForcedApplyDate com.amazonaws.neptune#PendingMaintenanceAction$ForcedApplyDate */ =>  {
                let var_387 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.neptune#TStamp`)"))
                        ?
                    )
                ;
                builder = builder.set_forced_apply_date(var_387);
            }
            ,
            s if s.matches("OptInStatus") /* OptInStatus com.amazonaws.neptune#PendingMaintenanceAction$OptInStatus */ =>  {
                let var_388 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_opt_in_status(var_388);
            }
            ,
            s if s.matches("CurrentApplyDate") /* CurrentApplyDate com.amazonaws.neptune#PendingMaintenanceAction$CurrentApplyDate */ =>  {
                let var_389 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.neptune#TStamp`)"))
                        ?
                    )
                ;
                builder = builder.set_current_apply_date(var_389);
            }
            ,
            s if s.matches("Description") /* Description com.amazonaws.neptune#PendingMaintenanceAction$Description */ =>  {
                let var_390 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_390);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_db_cluster_option_group_status(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DbClusterOptionGroupStatus, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DbClusterOptionGroupStatus::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DBClusterOptionGroupName") /* DBClusterOptionGroupName com.amazonaws.neptune#DBClusterOptionGroupStatus$DBClusterOptionGroupName */ =>  {
                let var_391 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_cluster_option_group_name(var_391);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.neptune#DBClusterOptionGroupStatus$Status */ =>  {
                let var_392 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_392);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_db_cluster_member(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DbClusterMember, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DbClusterMember::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DBInstanceIdentifier") /* DBInstanceIdentifier com.amazonaws.neptune#DBClusterMember$DBInstanceIdentifier */ =>  {
                let var_393 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_instance_identifier(var_393);
            }
            ,
            s if s.matches("IsClusterWriter") /* IsClusterWriter com.amazonaws.neptune#DBClusterMember$IsClusterWriter */ =>  {
                let var_394 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.neptune#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_is_cluster_writer(var_394);
            }
            ,
            s if s.matches("DBClusterParameterGroupStatus") /* DBClusterParameterGroupStatus com.amazonaws.neptune#DBClusterMember$DBClusterParameterGroupStatus */ =>  {
                let var_395 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_cluster_parameter_group_status(var_395);
            }
            ,
            s if s.matches("PromotionTier") /* PromotionTier com.amazonaws.neptune#DBClusterMember$PromotionTier */ =>  {
                let var_396 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.neptune#IntegerOptional`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_promotion_tier(var_396);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_vpc_security_group_membership(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::VpcSecurityGroupMembership, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::VpcSecurityGroupMembership::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("VpcSecurityGroupId") /* VpcSecurityGroupId com.amazonaws.neptune#VpcSecurityGroupMembership$VpcSecurityGroupId */ =>  {
                let var_397 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_security_group_id(var_397);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.neptune#VpcSecurityGroupMembership$Status */ =>  {
                let var_398 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_398);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_db_cluster_role(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DbClusterRole, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DbClusterRole::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("RoleArn") /* RoleArn com.amazonaws.neptune#DBClusterRole$RoleArn */ =>  {
                let var_399 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_role_arn(var_399);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.neptune#DBClusterRole$Status */ =>  {
                let var_400 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_400);
            }
            ,
            s if s.matches("FeatureName") /* FeatureName com.amazonaws.neptune#DBClusterRole$FeatureName */ =>  {
                let var_401 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_feature_name(var_401);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_db_security_group_membership(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DbSecurityGroupMembership, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DbSecurityGroupMembership::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DBSecurityGroupName") /* DBSecurityGroupName com.amazonaws.neptune#DBSecurityGroupMembership$DBSecurityGroupName */ =>  {
                let var_402 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_security_group_name(var_402);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.neptune#DBSecurityGroupMembership$Status */ =>  {
                let var_403 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_403);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_db_parameter_group_status(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DbParameterGroupStatus, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DbParameterGroupStatus::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DBParameterGroupName") /* DBParameterGroupName com.amazonaws.neptune#DBParameterGroupStatus$DBParameterGroupName */ =>  {
                let var_404 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_parameter_group_name(var_404);
            }
            ,
            s if s.matches("ParameterApplyStatus") /* ParameterApplyStatus com.amazonaws.neptune#DBParameterGroupStatus$ParameterApplyStatus */ =>  {
                let var_405 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_parameter_apply_status(var_405);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_pending_cloudwatch_logs_exports(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::PendingCloudwatchLogsExports, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::PendingCloudwatchLogsExports::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("LogTypesToEnable") /* LogTypesToEnable com.amazonaws.neptune#PendingCloudwatchLogsExports$LogTypesToEnable */ =>  {
                let var_406 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_log_type_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_log_types_to_enable(var_406);
            }
            ,
            s if s.matches("LogTypesToDisable") /* LogTypesToDisable com.amazonaws.neptune#PendingCloudwatchLogsExports$LogTypesToDisable */ =>  {
                let var_407 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_log_type_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_log_types_to_disable(var_407);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_option_group_membership(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::OptionGroupMembership, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::OptionGroupMembership::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("OptionGroupName") /* OptionGroupName com.amazonaws.neptune#OptionGroupMembership$OptionGroupName */ =>  {
                let var_408 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_option_group_name(var_408);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.neptune#OptionGroupMembership$Status */ =>  {
                let var_409 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_409);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_db_instance_status_info(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DbInstanceStatusInfo, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DbInstanceStatusInfo::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("StatusType") /* StatusType com.amazonaws.neptune#DBInstanceStatusInfo$StatusType */ =>  {
                let var_410 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status_type(var_410);
            }
            ,
            s if s.matches("Normal") /* Normal com.amazonaws.neptune#DBInstanceStatusInfo$Normal */ =>  {
                let var_411 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.neptune#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_normal(var_411);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.neptune#DBInstanceStatusInfo$Status */ =>  {
                let var_412 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_412);
            }
            ,
            s if s.matches("Message") /* Message com.amazonaws.neptune#DBInstanceStatusInfo$Message */ =>  {
                let var_413 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_413);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_domain_membership(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DomainMembership, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DomainMembership::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Domain") /* Domain com.amazonaws.neptune#DomainMembership$Domain */ =>  {
                let var_414 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_domain(var_414);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.neptune#DomainMembership$Status */ =>  {
                let var_415 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_415);
            }
            ,
            s if s.matches("FQDN") /* FQDN com.amazonaws.neptune#DomainMembership$FQDN */ =>  {
                let var_416 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_fqdn(var_416);
            }
            ,
            s if s.matches("IAMRoleName") /* IAMRoleName com.amazonaws.neptune#DomainMembership$IAMRoleName */ =>  {
                let var_417 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_iam_role_name(var_417);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_subnet(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Subnet, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Subnet::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("SubnetIdentifier") /* SubnetIdentifier com.amazonaws.neptune#Subnet$SubnetIdentifier */ =>  {
                let var_418 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_subnet_identifier(var_418);
            }
            ,
            s if s.matches("SubnetAvailabilityZone") /* SubnetAvailabilityZone com.amazonaws.neptune#Subnet$SubnetAvailabilityZone */ =>  {
                let var_419 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_availability_zone(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_subnet_availability_zone(var_419);
            }
            ,
            s if s.matches("SubnetStatus") /* SubnetStatus com.amazonaws.neptune#Subnet$SubnetStatus */ =>  {
                let var_420 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_subnet_status(var_420);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_db_cluster_snapshot_attribute(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DbClusterSnapshotAttribute, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DbClusterSnapshotAttribute::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("AttributeName") /* AttributeName com.amazonaws.neptune#DBClusterSnapshotAttribute$AttributeName */ =>  {
                let var_421 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_attribute_name(var_421);
            }
            ,
            s if s.matches("AttributeValues") /* AttributeValues com.amazonaws.neptune#DBClusterSnapshotAttribute$AttributeValues */ =>  {
                let var_422 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_attribute_value_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_attribute_values(var_422);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_character_set(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::CharacterSet, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::CharacterSet::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("CharacterSetName") /* CharacterSetName com.amazonaws.neptune#CharacterSet$CharacterSetName */ =>  {
                let var_423 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_character_set_name(var_423);
            }
            ,
            s if s.matches("CharacterSetDescription") /* CharacterSetDescription com.amazonaws.neptune#CharacterSet$CharacterSetDescription */ =>  {
                let var_424 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_character_set_description(var_424);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_neptune_supported_character_sets_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::CharacterSet>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("CharacterSet") /* member com.amazonaws.neptune#SupportedCharacterSetsList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_character_set(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_neptune_valid_upgrade_target_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::UpgradeTarget>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("UpgradeTarget") /* member com.amazonaws.neptune#ValidUpgradeTargetList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_upgrade_target(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_neptune_supported_timezones_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::Timezone>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Timezone") /* member com.amazonaws.neptune#SupportedTimezonesList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_timezone(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_neptune_availability_zone_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::AvailabilityZone>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("AvailabilityZone") /* member com.amazonaws.neptune#AvailabilityZoneList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_availability_zone(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_valid_storage_options(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ValidStorageOptions, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ValidStorageOptions::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("StorageType") /* StorageType com.amazonaws.neptune#ValidStorageOptions$StorageType */ =>  {
                let var_425 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_storage_type(var_425);
            }
            ,
            s if s.matches("StorageSize") /* StorageSize com.amazonaws.neptune#ValidStorageOptions$StorageSize */ =>  {
                let var_426 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_range_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_storage_size(var_426);
            }
            ,
            s if s.matches("ProvisionedIops") /* ProvisionedIops com.amazonaws.neptune#ValidStorageOptions$ProvisionedIops */ =>  {
                let var_427 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_range_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_provisioned_iops(var_427);
            }
            ,
            s if s.matches("IopsToStorageRatio") /* IopsToStorageRatio com.amazonaws.neptune#ValidStorageOptions$IopsToStorageRatio */ =>  {
                let var_428 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_neptune_double_range_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_iops_to_storage_ratio(var_428);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_availability_zone(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AvailabilityZone, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AvailabilityZone::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Name") /* Name com.amazonaws.neptune#AvailabilityZone$Name */ =>  {
                let var_429 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_429);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_neptune_attribute_value_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("AttributeValue") /* member com.amazonaws.neptune#AttributeValueList$member */ =>  {
                out.push(
                    Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                        smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_upgrade_target(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::UpgradeTarget, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::UpgradeTarget::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Engine") /* Engine com.amazonaws.neptune#UpgradeTarget$Engine */ =>  {
                let var_430 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_engine(var_430);
            }
            ,
            s if s.matches("EngineVersion") /* EngineVersion com.amazonaws.neptune#UpgradeTarget$EngineVersion */ =>  {
                let var_431 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_engine_version(var_431);
            }
            ,
            s if s.matches("Description") /* Description com.amazonaws.neptune#UpgradeTarget$Description */ =>  {
                let var_432 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_432);
            }
            ,
            s if s.matches("AutoUpgrade") /* AutoUpgrade com.amazonaws.neptune#UpgradeTarget$AutoUpgrade */ =>  {
                let var_433 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.neptune#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_auto_upgrade(var_433);
            }
            ,
            s if s.matches("IsMajorVersionUpgrade") /* IsMajorVersionUpgrade com.amazonaws.neptune#UpgradeTarget$IsMajorVersionUpgrade */ =>  {
                let var_434 =
                    Some(
                         {
                            <bool as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.neptune#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_is_major_version_upgrade(var_434);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_timezone(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Timezone, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Timezone::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("TimezoneName") /* TimezoneName com.amazonaws.neptune#Timezone$TimezoneName */ =>  {
                let var_435 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_timezone_name(var_435);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_neptune_range_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::Range>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Range") /* member com.amazonaws.neptune#RangeList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_range(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_neptune_double_range_list(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::DoubleRange>, smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DoubleRange") /* member com.amazonaws.neptune#DoubleRangeList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_double_range(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_range(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Range, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Range::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("From") /* From com.amazonaws.neptune#Range$From */ =>  {
                let var_436 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.neptune#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_from(var_436);
            }
            ,
            s if s.matches("To") /* To com.amazonaws.neptune#Range$To */ =>  {
                let var_437 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.neptune#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_to(var_437);
            }
            ,
            s if s.matches("Step") /* Step com.amazonaws.neptune#Range$Step */ =>  {
                let var_438 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.neptune#IntegerOptional`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_step(var_438);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_double_range(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DoubleRange, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DoubleRange::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("From") /* From com.amazonaws.neptune#DoubleRange$From */ =>  {
                let var_439 =
                    Some(
                         {
                            <f64 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (double: `com.amazonaws.neptune#Double`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_from(var_439);
            }
            ,
            s if s.matches("To") /* To com.amazonaws.neptune#DoubleRange$To */ =>  {
                let var_440 =
                    Some(
                         {
                            <f64 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (double: `com.amazonaws.neptune#Double`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_to(var_440);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
