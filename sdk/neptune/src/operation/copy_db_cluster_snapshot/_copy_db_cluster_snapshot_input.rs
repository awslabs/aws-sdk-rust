// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CopyDbClusterSnapshotInput {
    /// <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li>
    /// <li> <p>Specify a valid DB snapshot identifier.</p> </li>
    /// </ul>
    /// <p>Example: <code>my-cluster-snapshot1</code> </p>
    #[doc(hidden)]
    pub source_db_cluster_snapshot_identifier: std::option::Option<std::string::String>,
    /// <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// </ul>
    /// <p>Example: <code>my-cluster-snapshot2</code> </p>
    #[doc(hidden)]
    pub target_db_cluster_snapshot_identifier: std::option::Option<std::string::String>,
    /// <p>The Amazon Amazon KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p>
    /// <p>If you copy an encrypted DB cluster snapshot from your Amazon account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot.</p>
    /// <p>If you copy an encrypted DB cluster snapshot that is shared from another Amazon account, then you must specify a value for <code>KmsKeyId</code>.</p>
    /// <p> KMS encryption keys are specific to the Amazon Region that they are created in, and you can't use encryption keys from one Amazon Region in another Amazon Region.</p>
    /// <p>You cannot encrypt an unencrypted DB cluster snapshot when you copy it. If you try to copy an unencrypted DB cluster snapshot and specify a value for the KmsKeyId parameter, an error is returned.</p>
    #[doc(hidden)]
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>Not currently supported.</p>
    #[doc(hidden)]
    pub pre_signed_url: std::option::Option<std::string::String>,
    /// <p>True to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot, and otherwise false. The default is false.</p>
    #[doc(hidden)]
    pub copy_tags: std::option::Option<bool>,
    /// <p>The tags to assign to the new DB cluster snapshot copy.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CopyDbClusterSnapshotInput {
    /// <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li>
    /// <li> <p>Specify a valid DB snapshot identifier.</p> </li>
    /// </ul>
    /// <p>Example: <code>my-cluster-snapshot1</code> </p>
    pub fn source_db_cluster_snapshot_identifier(&self) -> std::option::Option<&str> {
        self.source_db_cluster_snapshot_identifier.as_deref()
    }
    /// <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// </ul>
    /// <p>Example: <code>my-cluster-snapshot2</code> </p>
    pub fn target_db_cluster_snapshot_identifier(&self) -> std::option::Option<&str> {
        self.target_db_cluster_snapshot_identifier.as_deref()
    }
    /// <p>The Amazon Amazon KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p>
    /// <p>If you copy an encrypted DB cluster snapshot from your Amazon account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot.</p>
    /// <p>If you copy an encrypted DB cluster snapshot that is shared from another Amazon account, then you must specify a value for <code>KmsKeyId</code>.</p>
    /// <p> KMS encryption keys are specific to the Amazon Region that they are created in, and you can't use encryption keys from one Amazon Region in another Amazon Region.</p>
    /// <p>You cannot encrypt an unencrypted DB cluster snapshot when you copy it. If you try to copy an unencrypted DB cluster snapshot and specify a value for the KmsKeyId parameter, an error is returned.</p>
    pub fn kms_key_id(&self) -> std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>Not currently supported.</p>
    pub fn pre_signed_url(&self) -> std::option::Option<&str> {
        self.pre_signed_url.as_deref()
    }
    /// <p>True to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot, and otherwise false. The default is false.</p>
    pub fn copy_tags(&self) -> std::option::Option<bool> {
        self.copy_tags
    }
    /// <p>The tags to assign to the new DB cluster snapshot copy.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl CopyDbClusterSnapshotInput {
    /// Creates a new builder-style object to manufacture [`CopyDbClusterSnapshotInput`](crate::operation::copy_db_cluster_snapshot::CopyDbClusterSnapshotInput).
    pub fn builder(
    ) -> crate::operation::copy_db_cluster_snapshot::builders::CopyDbClusterSnapshotInputBuilder
    {
        crate::operation::copy_db_cluster_snapshot::builders::CopyDbClusterSnapshotInputBuilder::default()
    }
}

/// A builder for [`CopyDbClusterSnapshotInput`](crate::operation::copy_db_cluster_snapshot::CopyDbClusterSnapshotInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CopyDbClusterSnapshotInputBuilder {
    pub(crate) source_db_cluster_snapshot_identifier: std::option::Option<std::string::String>,
    pub(crate) target_db_cluster_snapshot_identifier: std::option::Option<std::string::String>,
    pub(crate) kms_key_id: std::option::Option<std::string::String>,
    pub(crate) pre_signed_url: std::option::Option<std::string::String>,
    pub(crate) copy_tags: std::option::Option<bool>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CopyDbClusterSnapshotInputBuilder {
    /// <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li>
    /// <li> <p>Specify a valid DB snapshot identifier.</p> </li>
    /// </ul>
    /// <p>Example: <code>my-cluster-snapshot1</code> </p>
    pub fn source_db_cluster_snapshot_identifier(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.source_db_cluster_snapshot_identifier = Some(input.into());
        self
    }
    /// <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li>
    /// <li> <p>Specify a valid DB snapshot identifier.</p> </li>
    /// </ul>
    /// <p>Example: <code>my-cluster-snapshot1</code> </p>
    pub fn set_source_db_cluster_snapshot_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_db_cluster_snapshot_identifier = input;
        self
    }
    /// <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// </ul>
    /// <p>Example: <code>my-cluster-snapshot2</code> </p>
    pub fn target_db_cluster_snapshot_identifier(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.target_db_cluster_snapshot_identifier = Some(input.into());
        self
    }
    /// <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// </ul>
    /// <p>Example: <code>my-cluster-snapshot2</code> </p>
    pub fn set_target_db_cluster_snapshot_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.target_db_cluster_snapshot_identifier = input;
        self
    }
    /// <p>The Amazon Amazon KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p>
    /// <p>If you copy an encrypted DB cluster snapshot from your Amazon account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot.</p>
    /// <p>If you copy an encrypted DB cluster snapshot that is shared from another Amazon account, then you must specify a value for <code>KmsKeyId</code>.</p>
    /// <p> KMS encryption keys are specific to the Amazon Region that they are created in, and you can't use encryption keys from one Amazon Region in another Amazon Region.</p>
    /// <p>You cannot encrypt an unencrypted DB cluster snapshot when you copy it. If you try to copy an unencrypted DB cluster snapshot and specify a value for the KmsKeyId parameter, an error is returned.</p>
    pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.kms_key_id = Some(input.into());
        self
    }
    /// <p>The Amazon Amazon KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p>
    /// <p>If you copy an encrypted DB cluster snapshot from your Amazon account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot.</p>
    /// <p>If you copy an encrypted DB cluster snapshot that is shared from another Amazon account, then you must specify a value for <code>KmsKeyId</code>.</p>
    /// <p> KMS encryption keys are specific to the Amazon Region that they are created in, and you can't use encryption keys from one Amazon Region in another Amazon Region.</p>
    /// <p>You cannot encrypt an unencrypted DB cluster snapshot when you copy it. If you try to copy an unencrypted DB cluster snapshot and specify a value for the KmsKeyId parameter, an error is returned.</p>
    pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>Not currently supported.</p>
    pub fn pre_signed_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.pre_signed_url = Some(input.into());
        self
    }
    /// <p>Not currently supported.</p>
    pub fn set_pre_signed_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.pre_signed_url = input;
        self
    }
    /// <p>True to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot, and otherwise false. The default is false.</p>
    pub fn copy_tags(mut self, input: bool) -> Self {
        self.copy_tags = Some(input);
        self
    }
    /// <p>True to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot, and otherwise false. The default is false.</p>
    pub fn set_copy_tags(mut self, input: std::option::Option<bool>) -> Self {
        self.copy_tags = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to assign to the new DB cluster snapshot copy.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>The tags to assign to the new DB cluster snapshot copy.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`CopyDbClusterSnapshotInput`](crate::operation::copy_db_cluster_snapshot::CopyDbClusterSnapshotInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::copy_db_cluster_snapshot::CopyDbClusterSnapshotInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::copy_db_cluster_snapshot::CopyDbClusterSnapshotInput {
                source_db_cluster_snapshot_identifier: self.source_db_cluster_snapshot_identifier,
                target_db_cluster_snapshot_identifier: self.target_db_cluster_snapshot_identifier,
                kms_key_id: self.kms_key_id,
                pre_signed_url: self.pre_signed_url,
                copy_tags: self.copy_tags,
                tags: self.tags,
            },
        )
    }
}
