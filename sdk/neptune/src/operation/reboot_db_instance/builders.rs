// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::reboot_db_instance::_reboot_db_instance_output::RebootDbInstanceOutputBuilder;

pub use crate::operation::reboot_db_instance::_reboot_db_instance_input::RebootDbInstanceInputBuilder;

/// Fluent builder constructing a request to `RebootDBInstance`.
///
/// <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.</p>
/// <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct RebootDBInstanceFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::reboot_db_instance::builders::RebootDbInstanceInputBuilder,
}
impl RebootDBInstanceFluentBuilder {
    /// Creates a new `RebootDBInstance`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::reboot_db_instance::RebootDBInstance,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::reboot_db_instance::RebootDBInstanceError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::reboot_db_instance::RebootDbInstanceOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::reboot_db_instance::RebootDBInstanceError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The DB instance identifier. This parameter is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must match the identifier of an existing DBInstance.</p> </li>
    /// </ul>
    pub fn db_instance_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.db_instance_identifier(input.into());
        self
    }
    /// <p>The DB instance identifier. This parameter is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must match the identifier of an existing DBInstance.</p> </li>
    /// </ul>
    pub fn set_db_instance_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_db_instance_identifier(input);
        self
    }
    /// <p> When <code>true</code>, the reboot is conducted through a MultiAZ failover.</p>
    /// <p>Constraint: You can't specify <code>true</code> if the instance is not configured for MultiAZ.</p>
    pub fn force_failover(mut self, input: bool) -> Self {
        self.inner = self.inner.force_failover(input);
        self
    }
    /// <p> When <code>true</code>, the reboot is conducted through a MultiAZ failover.</p>
    /// <p>Constraint: You can't specify <code>true</code> if the instance is not configured for MultiAZ.</p>
    pub fn set_force_failover(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_force_failover(input);
        self
    }
}
