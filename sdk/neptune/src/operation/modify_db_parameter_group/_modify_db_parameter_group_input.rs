// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyDbParameterGroupInput {
    /// <p>The name of the DB parameter group.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub db_parameter_group_name: std::option::Option<std::string::String>,
    /// <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p>
    /// <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note>
    /// <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p>
    /// </note>
    #[doc(hidden)]
    pub parameters: std::option::Option<std::vec::Vec<crate::types::Parameter>>,
}
impl ModifyDbParameterGroupInput {
    /// <p>The name of the DB parameter group.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li>
    /// </ul>
    pub fn db_parameter_group_name(&self) -> std::option::Option<&str> {
        self.db_parameter_group_name.as_deref()
    }
    /// <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p>
    /// <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note>
    /// <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p>
    /// </note>
    pub fn parameters(&self) -> std::option::Option<&[crate::types::Parameter]> {
        self.parameters.as_deref()
    }
}
impl ModifyDbParameterGroupInput {
    /// Creates a new builder-style object to manufacture [`ModifyDbParameterGroupInput`](crate::operation::modify_db_parameter_group::ModifyDbParameterGroupInput).
    pub fn builder(
    ) -> crate::operation::modify_db_parameter_group::builders::ModifyDbParameterGroupInputBuilder
    {
        crate::operation::modify_db_parameter_group::builders::ModifyDbParameterGroupInputBuilder::default()
    }
}

/// A builder for [`ModifyDbParameterGroupInput`](crate::operation::modify_db_parameter_group::ModifyDbParameterGroupInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ModifyDbParameterGroupInputBuilder {
    pub(crate) db_parameter_group_name: std::option::Option<std::string::String>,
    pub(crate) parameters: std::option::Option<std::vec::Vec<crate::types::Parameter>>,
}
impl ModifyDbParameterGroupInputBuilder {
    /// <p>The name of the DB parameter group.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li>
    /// </ul>
    pub fn db_parameter_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.db_parameter_group_name = Some(input.into());
        self
    }
    /// <p>The name of the DB parameter group.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li>
    /// </ul>
    pub fn set_db_parameter_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.db_parameter_group_name = input;
        self
    }
    /// Appends an item to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p>
    /// <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note>
    /// <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p>
    /// </note>
    pub fn parameters(mut self, input: crate::types::Parameter) -> Self {
        let mut v = self.parameters.unwrap_or_default();
        v.push(input);
        self.parameters = Some(v);
        self
    }
    /// <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p>
    /// <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note>
    /// <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p>
    /// </note>
    pub fn set_parameters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Parameter>>,
    ) -> Self {
        self.parameters = input;
        self
    }
    /// Consumes the builder and constructs a [`ModifyDbParameterGroupInput`](crate::operation::modify_db_parameter_group::ModifyDbParameterGroupInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::modify_db_parameter_group::ModifyDbParameterGroupInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::modify_db_parameter_group::ModifyDbParameterGroupInput {
                db_parameter_group_name: self.db_parameter_group_name,
                parameters: self.parameters,
            },
        )
    }
}
