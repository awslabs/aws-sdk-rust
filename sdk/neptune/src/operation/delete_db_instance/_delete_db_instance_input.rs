// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteDbInstanceInput {
    /// <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must match the name of an existing DB instance.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub db_instance_identifier: std::option::Option<std::string::String>,
    /// <p> Determines whether a final DB snapshot is created before the DB instance is deleted. If <code>true</code> is specified, no DBSnapshot is created. If <code>false</code> is specified, a DB snapshot is created before the DB instance is deleted.</p>
    /// <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when the SkipFinalSnapshot parameter is set to "true".</p>
    /// <p>Specify <code>true</code> when deleting a Read Replica.</p> <note>
    /// <p>The FinalDBSnapshotIdentifier parameter must be specified if SkipFinalSnapshot is <code>false</code>.</p>
    /// </note>
    /// <p>Default: <code>false</code> </p>
    #[doc(hidden)]
    pub skip_final_snapshot: bool,
    /// <p> The DBSnapshotIdentifier of the new DBSnapshot created when SkipFinalSnapshot is set to <code>false</code>.</p> <note>
    /// <p>Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.</p>
    /// </note>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be 1 to 255 letters or numbers.</p> </li>
    /// <li> <p>First character must be a letter</p> </li>
    /// <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li>
    /// <li> <p>Cannot be specified when deleting a Read Replica.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub final_db_snapshot_identifier: std::option::Option<std::string::String>,
}
impl DeleteDbInstanceInput {
    /// <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must match the name of an existing DB instance.</p> </li>
    /// </ul>
    pub fn db_instance_identifier(&self) -> std::option::Option<&str> {
        self.db_instance_identifier.as_deref()
    }
    /// <p> Determines whether a final DB snapshot is created before the DB instance is deleted. If <code>true</code> is specified, no DBSnapshot is created. If <code>false</code> is specified, a DB snapshot is created before the DB instance is deleted.</p>
    /// <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when the SkipFinalSnapshot parameter is set to "true".</p>
    /// <p>Specify <code>true</code> when deleting a Read Replica.</p> <note>
    /// <p>The FinalDBSnapshotIdentifier parameter must be specified if SkipFinalSnapshot is <code>false</code>.</p>
    /// </note>
    /// <p>Default: <code>false</code> </p>
    pub fn skip_final_snapshot(&self) -> bool {
        self.skip_final_snapshot
    }
    /// <p> The DBSnapshotIdentifier of the new DBSnapshot created when SkipFinalSnapshot is set to <code>false</code>.</p> <note>
    /// <p>Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.</p>
    /// </note>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be 1 to 255 letters or numbers.</p> </li>
    /// <li> <p>First character must be a letter</p> </li>
    /// <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li>
    /// <li> <p>Cannot be specified when deleting a Read Replica.</p> </li>
    /// </ul>
    pub fn final_db_snapshot_identifier(&self) -> std::option::Option<&str> {
        self.final_db_snapshot_identifier.as_deref()
    }
}
impl DeleteDbInstanceInput {
    /// Creates a new builder-style object to manufacture [`DeleteDbInstanceInput`](crate::operation::delete_db_instance::DeleteDbInstanceInput).
    pub fn builder() -> crate::operation::delete_db_instance::builders::DeleteDbInstanceInputBuilder
    {
        crate::operation::delete_db_instance::builders::DeleteDbInstanceInputBuilder::default()
    }
}

/// A builder for [`DeleteDbInstanceInput`](crate::operation::delete_db_instance::DeleteDbInstanceInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteDbInstanceInputBuilder {
    pub(crate) db_instance_identifier: std::option::Option<std::string::String>,
    pub(crate) skip_final_snapshot: std::option::Option<bool>,
    pub(crate) final_db_snapshot_identifier: std::option::Option<std::string::String>,
}
impl DeleteDbInstanceInputBuilder {
    /// <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must match the name of an existing DB instance.</p> </li>
    /// </ul>
    pub fn db_instance_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.db_instance_identifier = Some(input.into());
        self
    }
    /// <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must match the name of an existing DB instance.</p> </li>
    /// </ul>
    pub fn set_db_instance_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.db_instance_identifier = input;
        self
    }
    /// <p> Determines whether a final DB snapshot is created before the DB instance is deleted. If <code>true</code> is specified, no DBSnapshot is created. If <code>false</code> is specified, a DB snapshot is created before the DB instance is deleted.</p>
    /// <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when the SkipFinalSnapshot parameter is set to "true".</p>
    /// <p>Specify <code>true</code> when deleting a Read Replica.</p> <note>
    /// <p>The FinalDBSnapshotIdentifier parameter must be specified if SkipFinalSnapshot is <code>false</code>.</p>
    /// </note>
    /// <p>Default: <code>false</code> </p>
    pub fn skip_final_snapshot(mut self, input: bool) -> Self {
        self.skip_final_snapshot = Some(input);
        self
    }
    /// <p> Determines whether a final DB snapshot is created before the DB instance is deleted. If <code>true</code> is specified, no DBSnapshot is created. If <code>false</code> is specified, a DB snapshot is created before the DB instance is deleted.</p>
    /// <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when the SkipFinalSnapshot parameter is set to "true".</p>
    /// <p>Specify <code>true</code> when deleting a Read Replica.</p> <note>
    /// <p>The FinalDBSnapshotIdentifier parameter must be specified if SkipFinalSnapshot is <code>false</code>.</p>
    /// </note>
    /// <p>Default: <code>false</code> </p>
    pub fn set_skip_final_snapshot(mut self, input: std::option::Option<bool>) -> Self {
        self.skip_final_snapshot = input;
        self
    }
    /// <p> The DBSnapshotIdentifier of the new DBSnapshot created when SkipFinalSnapshot is set to <code>false</code>.</p> <note>
    /// <p>Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.</p>
    /// </note>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be 1 to 255 letters or numbers.</p> </li>
    /// <li> <p>First character must be a letter</p> </li>
    /// <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li>
    /// <li> <p>Cannot be specified when deleting a Read Replica.</p> </li>
    /// </ul>
    pub fn final_db_snapshot_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.final_db_snapshot_identifier = Some(input.into());
        self
    }
    /// <p> The DBSnapshotIdentifier of the new DBSnapshot created when SkipFinalSnapshot is set to <code>false</code>.</p> <note>
    /// <p>Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.</p>
    /// </note>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be 1 to 255 letters or numbers.</p> </li>
    /// <li> <p>First character must be a letter</p> </li>
    /// <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li>
    /// <li> <p>Cannot be specified when deleting a Read Replica.</p> </li>
    /// </ul>
    pub fn set_final_db_snapshot_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.final_db_snapshot_identifier = input;
        self
    }
    /// Consumes the builder and constructs a [`DeleteDbInstanceInput`](crate::operation::delete_db_instance::DeleteDbInstanceInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::delete_db_instance::DeleteDbInstanceInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::delete_db_instance::DeleteDbInstanceInput {
                db_instance_identifier: self.db_instance_identifier,
                skip_final_snapshot: self.skip_final_snapshot.unwrap_or_default(),
                final_db_snapshot_identifier: self.final_db_snapshot_identifier,
            },
        )
    }
}
