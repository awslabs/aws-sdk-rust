// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the pending maintenance actions for a resource.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResourcePendingMaintenanceActions {
    /// <p>The ARN of the resource that has pending maintenance actions.</p>
    pub resource_identifier: ::std::option::Option<::std::string::String>,
    /// <p>A list that provides details about the pending maintenance actions for the resource.</p>
    pub pending_maintenance_action_details: ::std::option::Option<::std::vec::Vec<crate::types::PendingMaintenanceAction>>,
}
impl ResourcePendingMaintenanceActions {
    /// <p>The ARN of the resource that has pending maintenance actions.</p>
    pub fn resource_identifier(&self) -> ::std::option::Option<&str> {
        self.resource_identifier.as_deref()
    }
    /// <p>A list that provides details about the pending maintenance actions for the resource.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.pending_maintenance_action_details.is_none()`.
    pub fn pending_maintenance_action_details(&self) -> &[crate::types::PendingMaintenanceAction] {
        self.pending_maintenance_action_details.as_deref().unwrap_or_default()
    }
}
impl ResourcePendingMaintenanceActions {
    /// Creates a new builder-style object to manufacture [`ResourcePendingMaintenanceActions`](crate::types::ResourcePendingMaintenanceActions).
    pub fn builder() -> crate::types::builders::ResourcePendingMaintenanceActionsBuilder {
        crate::types::builders::ResourcePendingMaintenanceActionsBuilder::default()
    }
}

/// A builder for [`ResourcePendingMaintenanceActions`](crate::types::ResourcePendingMaintenanceActions).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ResourcePendingMaintenanceActionsBuilder {
    pub(crate) resource_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) pending_maintenance_action_details: ::std::option::Option<::std::vec::Vec<crate::types::PendingMaintenanceAction>>,
}
impl ResourcePendingMaintenanceActionsBuilder {
    /// <p>The ARN of the resource that has pending maintenance actions.</p>
    pub fn resource_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the resource that has pending maintenance actions.</p>
    pub fn set_resource_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_identifier = input;
        self
    }
    /// <p>The ARN of the resource that has pending maintenance actions.</p>
    pub fn get_resource_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_identifier
    }
    /// Appends an item to `pending_maintenance_action_details`.
    ///
    /// To override the contents of this collection use [`set_pending_maintenance_action_details`](Self::set_pending_maintenance_action_details).
    ///
    /// <p>A list that provides details about the pending maintenance actions for the resource.</p>
    pub fn pending_maintenance_action_details(mut self, input: crate::types::PendingMaintenanceAction) -> Self {
        let mut v = self.pending_maintenance_action_details.unwrap_or_default();
        v.push(input);
        self.pending_maintenance_action_details = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list that provides details about the pending maintenance actions for the resource.</p>
    pub fn set_pending_maintenance_action_details(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::PendingMaintenanceAction>>,
    ) -> Self {
        self.pending_maintenance_action_details = input;
        self
    }
    /// <p>A list that provides details about the pending maintenance actions for the resource.</p>
    pub fn get_pending_maintenance_action_details(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PendingMaintenanceAction>> {
        &self.pending_maintenance_action_details
    }
    /// Consumes the builder and constructs a [`ResourcePendingMaintenanceActions`](crate::types::ResourcePendingMaintenanceActions).
    pub fn build(self) -> crate::types::ResourcePendingMaintenanceActions {
        crate::types::ResourcePendingMaintenanceActions {
            resource_identifier: self.resource_identifier,
            pending_maintenance_action_details: self.pending_maintenance_action_details,
        }
    }
}
