// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about valid modifications that you can make to your DB instance. Contains the result of a successful call to the <code>DescribeValidDBInstanceModifications</code> action. You can use this information when you call <code>ModifyDBInstance</code>. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ValidDbInstanceModificationsMessage {
    /// <p>Valid storage options for your DB instance.</p>
    #[doc(hidden)]
    pub storage: std::option::Option<std::vec::Vec<crate::types::ValidStorageOptions>>,
}
impl ValidDbInstanceModificationsMessage {
    /// <p>Valid storage options for your DB instance.</p>
    pub fn storage(&self) -> std::option::Option<&[crate::types::ValidStorageOptions]> {
        self.storage.as_deref()
    }
}
impl ValidDbInstanceModificationsMessage {
    /// Creates a new builder-style object to manufacture [`ValidDbInstanceModificationsMessage`](crate::types::ValidDbInstanceModificationsMessage).
    pub fn builder() -> crate::types::builders::ValidDbInstanceModificationsMessageBuilder {
        crate::types::builders::ValidDbInstanceModificationsMessageBuilder::default()
    }
}

/// A builder for [`ValidDbInstanceModificationsMessage`](crate::types::ValidDbInstanceModificationsMessage).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ValidDbInstanceModificationsMessageBuilder {
    pub(crate) storage: std::option::Option<std::vec::Vec<crate::types::ValidStorageOptions>>,
}
impl ValidDbInstanceModificationsMessageBuilder {
    /// Appends an item to `storage`.
    ///
    /// To override the contents of this collection use [`set_storage`](Self::set_storage).
    ///
    /// <p>Valid storage options for your DB instance.</p>
    pub fn storage(mut self, input: crate::types::ValidStorageOptions) -> Self {
        let mut v = self.storage.unwrap_or_default();
        v.push(input);
        self.storage = Some(v);
        self
    }
    /// <p>Valid storage options for your DB instance.</p>
    pub fn set_storage(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ValidStorageOptions>>,
    ) -> Self {
        self.storage = input;
        self
    }
    /// Consumes the builder and constructs a [`ValidDbInstanceModificationsMessage`](crate::types::ValidDbInstanceModificationsMessage).
    pub fn build(self) -> crate::types::ValidDbInstanceModificationsMessage {
        crate::types::ValidDbInstanceModificationsMessage {
            storage: self.storage,
        }
    }
}
