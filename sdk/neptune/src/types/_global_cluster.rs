// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the details of an Amazon Neptune global database.</p>
/// <p>This data type is used as a response element for the <code>CreateGlobalCluster</code>, <code>DescribeGlobalClusters</code>, <code>ModifyGlobalCluster</code>, <code>DeleteGlobalCluster</code>, <code>FailoverGlobalCluster</code>, and <code>RemoveFromGlobalCluster</code> actions.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GlobalCluster {
    /// <p>Contains a user-supplied global database cluster identifier. This identifier is the unique key that identifies a global database.</p>
    pub global_cluster_identifier: ::std::option::Option<::std::string::String>,
    /// <p>An immutable identifier for the global database that is unique within in all regions. This identifier is found in CloudTrail log entries whenever the KMS key for the DB cluster is accessed.</p>
    pub global_cluster_resource_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) for the global database.</p>
    pub global_cluster_arn: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the current state of this global database.</p>
    pub status: ::std::option::Option<::std::string::String>,
    /// <p>The Neptune database engine used by the global database (<code>"neptune"</code>).</p>
    pub engine: ::std::option::Option<::std::string::String>,
    /// <p>The Neptune engine version used by the global database.</p>
    pub engine_version: ::std::option::Option<::std::string::String>,
    /// <p>The storage encryption setting for the global database.</p>
    pub storage_encrypted: ::std::option::Option<bool>,
    /// <p>The deletion protection setting for the global database.</p>
    pub deletion_protection: ::std::option::Option<bool>,
    /// <p>A list of cluster ARNs and instance ARNs for all the DB clusters that are part of the global database.</p>
    pub global_cluster_members: ::std::option::Option<::std::vec::Vec<crate::types::GlobalClusterMember>>,
}
impl GlobalCluster {
    /// <p>Contains a user-supplied global database cluster identifier. This identifier is the unique key that identifies a global database.</p>
    pub fn global_cluster_identifier(&self) -> ::std::option::Option<&str> {
        self.global_cluster_identifier.as_deref()
    }
    /// <p>An immutable identifier for the global database that is unique within in all regions. This identifier is found in CloudTrail log entries whenever the KMS key for the DB cluster is accessed.</p>
    pub fn global_cluster_resource_id(&self) -> ::std::option::Option<&str> {
        self.global_cluster_resource_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) for the global database.</p>
    pub fn global_cluster_arn(&self) -> ::std::option::Option<&str> {
        self.global_cluster_arn.as_deref()
    }
    /// <p>Specifies the current state of this global database.</p>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>The Neptune database engine used by the global database (<code>"neptune"</code>).</p>
    pub fn engine(&self) -> ::std::option::Option<&str> {
        self.engine.as_deref()
    }
    /// <p>The Neptune engine version used by the global database.</p>
    pub fn engine_version(&self) -> ::std::option::Option<&str> {
        self.engine_version.as_deref()
    }
    /// <p>The storage encryption setting for the global database.</p>
    pub fn storage_encrypted(&self) -> ::std::option::Option<bool> {
        self.storage_encrypted
    }
    /// <p>The deletion protection setting for the global database.</p>
    pub fn deletion_protection(&self) -> ::std::option::Option<bool> {
        self.deletion_protection
    }
    /// <p>A list of cluster ARNs and instance ARNs for all the DB clusters that are part of the global database.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.global_cluster_members.is_none()`.
    pub fn global_cluster_members(&self) -> &[crate::types::GlobalClusterMember] {
        self.global_cluster_members.as_deref().unwrap_or_default()
    }
}
impl GlobalCluster {
    /// Creates a new builder-style object to manufacture [`GlobalCluster`](crate::types::GlobalCluster).
    pub fn builder() -> crate::types::builders::GlobalClusterBuilder {
        crate::types::builders::GlobalClusterBuilder::default()
    }
}

/// A builder for [`GlobalCluster`](crate::types::GlobalCluster).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GlobalClusterBuilder {
    pub(crate) global_cluster_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) global_cluster_resource_id: ::std::option::Option<::std::string::String>,
    pub(crate) global_cluster_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) engine: ::std::option::Option<::std::string::String>,
    pub(crate) engine_version: ::std::option::Option<::std::string::String>,
    pub(crate) storage_encrypted: ::std::option::Option<bool>,
    pub(crate) deletion_protection: ::std::option::Option<bool>,
    pub(crate) global_cluster_members: ::std::option::Option<::std::vec::Vec<crate::types::GlobalClusterMember>>,
}
impl GlobalClusterBuilder {
    /// <p>Contains a user-supplied global database cluster identifier. This identifier is the unique key that identifies a global database.</p>
    pub fn global_cluster_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.global_cluster_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Contains a user-supplied global database cluster identifier. This identifier is the unique key that identifies a global database.</p>
    pub fn set_global_cluster_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.global_cluster_identifier = input;
        self
    }
    /// <p>Contains a user-supplied global database cluster identifier. This identifier is the unique key that identifies a global database.</p>
    pub fn get_global_cluster_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.global_cluster_identifier
    }
    /// <p>An immutable identifier for the global database that is unique within in all regions. This identifier is found in CloudTrail log entries whenever the KMS key for the DB cluster is accessed.</p>
    pub fn global_cluster_resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.global_cluster_resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An immutable identifier for the global database that is unique within in all regions. This identifier is found in CloudTrail log entries whenever the KMS key for the DB cluster is accessed.</p>
    pub fn set_global_cluster_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.global_cluster_resource_id = input;
        self
    }
    /// <p>An immutable identifier for the global database that is unique within in all regions. This identifier is found in CloudTrail log entries whenever the KMS key for the DB cluster is accessed.</p>
    pub fn get_global_cluster_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.global_cluster_resource_id
    }
    /// <p>The Amazon Resource Name (ARN) for the global database.</p>
    pub fn global_cluster_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.global_cluster_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the global database.</p>
    pub fn set_global_cluster_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.global_cluster_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the global database.</p>
    pub fn get_global_cluster_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.global_cluster_arn
    }
    /// <p>Specifies the current state of this global database.</p>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the current state of this global database.</p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>Specifies the current state of this global database.</p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>The Neptune database engine used by the global database (<code>"neptune"</code>).</p>
    pub fn engine(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Neptune database engine used by the global database (<code>"neptune"</code>).</p>
    pub fn set_engine(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine = input;
        self
    }
    /// <p>The Neptune database engine used by the global database (<code>"neptune"</code>).</p>
    pub fn get_engine(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine
    }
    /// <p>The Neptune engine version used by the global database.</p>
    pub fn engine_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Neptune engine version used by the global database.</p>
    pub fn set_engine_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine_version = input;
        self
    }
    /// <p>The Neptune engine version used by the global database.</p>
    pub fn get_engine_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine_version
    }
    /// <p>The storage encryption setting for the global database.</p>
    pub fn storage_encrypted(mut self, input: bool) -> Self {
        self.storage_encrypted = ::std::option::Option::Some(input);
        self
    }
    /// <p>The storage encryption setting for the global database.</p>
    pub fn set_storage_encrypted(mut self, input: ::std::option::Option<bool>) -> Self {
        self.storage_encrypted = input;
        self
    }
    /// <p>The storage encryption setting for the global database.</p>
    pub fn get_storage_encrypted(&self) -> &::std::option::Option<bool> {
        &self.storage_encrypted
    }
    /// <p>The deletion protection setting for the global database.</p>
    pub fn deletion_protection(mut self, input: bool) -> Self {
        self.deletion_protection = ::std::option::Option::Some(input);
        self
    }
    /// <p>The deletion protection setting for the global database.</p>
    pub fn set_deletion_protection(mut self, input: ::std::option::Option<bool>) -> Self {
        self.deletion_protection = input;
        self
    }
    /// <p>The deletion protection setting for the global database.</p>
    pub fn get_deletion_protection(&self) -> &::std::option::Option<bool> {
        &self.deletion_protection
    }
    /// Appends an item to `global_cluster_members`.
    ///
    /// To override the contents of this collection use [`set_global_cluster_members`](Self::set_global_cluster_members).
    ///
    /// <p>A list of cluster ARNs and instance ARNs for all the DB clusters that are part of the global database.</p>
    pub fn global_cluster_members(mut self, input: crate::types::GlobalClusterMember) -> Self {
        let mut v = self.global_cluster_members.unwrap_or_default();
        v.push(input);
        self.global_cluster_members = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of cluster ARNs and instance ARNs for all the DB clusters that are part of the global database.</p>
    pub fn set_global_cluster_members(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GlobalClusterMember>>) -> Self {
        self.global_cluster_members = input;
        self
    }
    /// <p>A list of cluster ARNs and instance ARNs for all the DB clusters that are part of the global database.</p>
    pub fn get_global_cluster_members(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GlobalClusterMember>> {
        &self.global_cluster_members
    }
    /// Consumes the builder and constructs a [`GlobalCluster`](crate::types::GlobalCluster).
    pub fn build(self) -> crate::types::GlobalCluster {
        crate::types::GlobalCluster {
            global_cluster_identifier: self.global_cluster_identifier,
            global_cluster_resource_id: self.global_cluster_resource_id,
            global_cluster_arn: self.global_cluster_arn,
            status: self.status,
            engine: self.engine,
            engine_version: self.engine_version,
            storage_encrypted: self.storage_encrypted,
            deletion_protection: self.deletion_protection,
            global_cluster_members: self.global_cluster_members,
        }
    }
}
