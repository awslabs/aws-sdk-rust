// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Associates an Identity and Access Management (IAM) role from an
/// Neptune DB cluster.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AddRoleToDBCluster {
    _private: (),
}
impl AddRoleToDBCluster {
    /// Creates a new builder-style object to manufacture [`AddRoleToDbClusterInput`](crate::input::AddRoleToDbClusterInput)
    pub fn builder() -> crate::input::add_role_to_db_cluster_input::Builder {
        crate::input::add_role_to_db_cluster_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AddRoleToDBCluster {
    type Output = std::result::Result<
        crate::output::AddRoleToDbClusterOutput,
        crate::error::AddRoleToDBClusterError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_add_role_to_db_cluster_error(response)
        } else {
            crate::operation_deser::parse_add_role_to_db_cluster_response(response)
        }
    }
}

/// <p>Adds a source identifier to an existing event notification subscription.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AddSourceIdentifierToSubscription {
    _private: (),
}
impl AddSourceIdentifierToSubscription {
    /// Creates a new builder-style object to manufacture [`AddSourceIdentifierToSubscriptionInput`](crate::input::AddSourceIdentifierToSubscriptionInput)
    pub fn builder() -> crate::input::add_source_identifier_to_subscription_input::Builder {
        crate::input::add_source_identifier_to_subscription_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AddSourceIdentifierToSubscription {
    type Output = std::result::Result<
        crate::output::AddSourceIdentifierToSubscriptionOutput,
        crate::error::AddSourceIdentifierToSubscriptionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_add_source_identifier_to_subscription_error(response)
        } else {
            crate::operation_deser::parse_add_source_identifier_to_subscription_response(response)
        }
    }
}

/// <p>Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost
/// allocation reporting to track cost associated with Amazon Neptune resources, or used in a
/// Condition statement in an IAM policy for Amazon Neptune.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AddTagsToResource {
    _private: (),
}
impl AddTagsToResource {
    /// Creates a new builder-style object to manufacture [`AddTagsToResourceInput`](crate::input::AddTagsToResourceInput)
    pub fn builder() -> crate::input::add_tags_to_resource_input::Builder {
        crate::input::add_tags_to_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AddTagsToResource {
    type Output = std::result::Result<
        crate::output::AddTagsToResourceOutput,
        crate::error::AddTagsToResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_add_tags_to_resource_error(response)
        } else {
            crate::operation_deser::parse_add_tags_to_resource_response(response)
        }
    }
}

/// <p>Applies a pending maintenance action to a resource (for example, to a DB instance).</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ApplyPendingMaintenanceAction {
    _private: (),
}
impl ApplyPendingMaintenanceAction {
    /// Creates a new builder-style object to manufacture [`ApplyPendingMaintenanceActionInput`](crate::input::ApplyPendingMaintenanceActionInput)
    pub fn builder() -> crate::input::apply_pending_maintenance_action_input::Builder {
        crate::input::apply_pending_maintenance_action_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ApplyPendingMaintenanceAction {
    type Output = std::result::Result<
        crate::output::ApplyPendingMaintenanceActionOutput,
        crate::error::ApplyPendingMaintenanceActionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_apply_pending_maintenance_action_error(response)
        } else {
            crate::operation_deser::parse_apply_pending_maintenance_action_response(response)
        }
    }
}

/// <p>Copies the specified DB cluster parameter group.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CopyDBClusterParameterGroup {
    _private: (),
}
impl CopyDBClusterParameterGroup {
    /// Creates a new builder-style object to manufacture [`CopyDbClusterParameterGroupInput`](crate::input::CopyDbClusterParameterGroupInput)
    pub fn builder() -> crate::input::copy_db_cluster_parameter_group_input::Builder {
        crate::input::copy_db_cluster_parameter_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CopyDBClusterParameterGroup {
    type Output = std::result::Result<
        crate::output::CopyDbClusterParameterGroupOutput,
        crate::error::CopyDBClusterParameterGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_copy_db_cluster_parameter_group_error(response)
        } else {
            crate::operation_deser::parse_copy_db_cluster_parameter_group_response(response)
        }
    }
}

/// <p>Copies a snapshot of a DB cluster.</p>
/// <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot,
/// <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the
/// shared DB cluster snapshot.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CopyDBClusterSnapshot {
    _private: (),
}
impl CopyDBClusterSnapshot {
    /// Creates a new builder-style object to manufacture [`CopyDbClusterSnapshotInput`](crate::input::CopyDbClusterSnapshotInput)
    pub fn builder() -> crate::input::copy_db_cluster_snapshot_input::Builder {
        crate::input::copy_db_cluster_snapshot_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CopyDBClusterSnapshot {
    type Output = std::result::Result<
        crate::output::CopyDbClusterSnapshotOutput,
        crate::error::CopyDBClusterSnapshotError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_copy_db_cluster_snapshot_error(response)
        } else {
            crate::operation_deser::parse_copy_db_cluster_snapshot_response(response)
        }
    }
}

/// <p>Copies the specified DB parameter group.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CopyDBParameterGroup {
    _private: (),
}
impl CopyDBParameterGroup {
    /// Creates a new builder-style object to manufacture [`CopyDbParameterGroupInput`](crate::input::CopyDbParameterGroupInput)
    pub fn builder() -> crate::input::copy_db_parameter_group_input::Builder {
        crate::input::copy_db_parameter_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CopyDBParameterGroup {
    type Output = std::result::Result<
        crate::output::CopyDbParameterGroupOutput,
        crate::error::CopyDBParameterGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_copy_db_parameter_group_error(response)
        } else {
            crate::operation_deser::parse_copy_db_parameter_group_response(response)
        }
    }
}

/// <p>Creates a new Amazon Neptune DB cluster.</p>
/// <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB
/// cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.</p>
/// <p>Note that when you create a new cluster using <code>CreateDBCluster</code> directly,
/// deletion protection is disabled by default (when you create a new production cluster in
/// the console, deletion protection is enabled by default). You can only delete a DB
/// cluster if its <code>DeletionProtection</code> field is set to <code>false</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDBCluster {
    _private: (),
}
impl CreateDBCluster {
    /// Creates a new builder-style object to manufacture [`CreateDbClusterInput`](crate::input::CreateDbClusterInput)
    pub fn builder() -> crate::input::create_db_cluster_input::Builder {
        crate::input::create_db_cluster_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDBCluster {
    type Output = std::result::Result<
        crate::output::CreateDbClusterOutput,
        crate::error::CreateDBClusterError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_db_cluster_error(response)
        } else {
            crate::operation_deser::parse_create_db_cluster_response(response)
        }
    }
}

/// <p>Creates a new custom endpoint and associates it with an Amazon Neptune DB cluster.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDBClusterEndpoint {
    _private: (),
}
impl CreateDBClusterEndpoint {
    /// Creates a new builder-style object to manufacture [`CreateDbClusterEndpointInput`](crate::input::CreateDbClusterEndpointInput)
    pub fn builder() -> crate::input::create_db_cluster_endpoint_input::Builder {
        crate::input::create_db_cluster_endpoint_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDBClusterEndpoint {
    type Output = std::result::Result<
        crate::output::CreateDbClusterEndpointOutput,
        crate::error::CreateDBClusterEndpointError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_db_cluster_endpoint_error(response)
        } else {
            crate::operation_deser::parse_create_db_cluster_endpoint_response(response)
        }
    }
}

/// <p>Creates a new DB cluster parameter group.</p>
/// <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB
/// cluster.</p>
/// <p> A DB cluster parameter group is initially created with the default
/// parameters for the database engine used by instances in the DB cluster.
/// To provide custom values for any of the parameters, you must modify the
/// group after creating it using <a>ModifyDBClusterParameterGroup</a>.
/// Once you've created a DB cluster parameter group, you need to associate it
/// with your DB cluster using <a>ModifyDBCluster</a>.
/// When you associate a new DB cluster parameter group with a running DB cluster,
/// you need to reboot the DB instances in the DB cluster without failover for the
/// new DB cluster parameter group and associated settings to take effect.</p>
/// <important>
/// <p>After you create a DB cluster parameter group, you should wait at least
/// 5 minutes before creating your first DB cluster that uses that DB cluster
/// parameter group as the default parameter group. This allows Amazon Neptune
/// to fully complete the create action before the DB cluster parameter group
/// is used as the default for a new DB cluster. This is especially important for
/// parameters that are critical when creating the default database for a DB
/// cluster, such as the character set for the default database defined by the
/// <code>character_set_database</code> parameter. You can use the <i>Parameter
/// Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon Neptune
/// console</a> or the <a>DescribeDBClusterParameters</a>
/// command to verify that your DB cluster parameter group has been created or modified.</p>
/// </important>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDBClusterParameterGroup {
    _private: (),
}
impl CreateDBClusterParameterGroup {
    /// Creates a new builder-style object to manufacture [`CreateDbClusterParameterGroupInput`](crate::input::CreateDbClusterParameterGroupInput)
    pub fn builder() -> crate::input::create_db_cluster_parameter_group_input::Builder {
        crate::input::create_db_cluster_parameter_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDBClusterParameterGroup {
    type Output = std::result::Result<
        crate::output::CreateDbClusterParameterGroupOutput,
        crate::error::CreateDBClusterParameterGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_db_cluster_parameter_group_error(response)
        } else {
            crate::operation_deser::parse_create_db_cluster_parameter_group_response(response)
        }
    }
}

/// <p>Creates a snapshot of a DB cluster.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDBClusterSnapshot {
    _private: (),
}
impl CreateDBClusterSnapshot {
    /// Creates a new builder-style object to manufacture [`CreateDbClusterSnapshotInput`](crate::input::CreateDbClusterSnapshotInput)
    pub fn builder() -> crate::input::create_db_cluster_snapshot_input::Builder {
        crate::input::create_db_cluster_snapshot_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDBClusterSnapshot {
    type Output = std::result::Result<
        crate::output::CreateDbClusterSnapshotOutput,
        crate::error::CreateDBClusterSnapshotError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_db_cluster_snapshot_error(response)
        } else {
            crate::operation_deser::parse_create_db_cluster_snapshot_response(response)
        }
    }
}

/// <p>Creates a new DB instance.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDBInstance {
    _private: (),
}
impl CreateDBInstance {
    /// Creates a new builder-style object to manufacture [`CreateDbInstanceInput`](crate::input::CreateDbInstanceInput)
    pub fn builder() -> crate::input::create_db_instance_input::Builder {
        crate::input::create_db_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDBInstance {
    type Output = std::result::Result<
        crate::output::CreateDbInstanceOutput,
        crate::error::CreateDBInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_db_instance_error(response)
        } else {
            crate::operation_deser::parse_create_db_instance_response(response)
        }
    }
}

/// <p>Creates a new DB parameter group.</p>
/// <p>A DB parameter group is initially created with the default parameters for the database
/// engine used by the DB instance. To provide custom values for any of the parameters, you must
/// modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once
/// you've created a DB parameter group, you need to associate it with your DB instance using
/// <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a
/// running DB instance, you need to reboot the DB instance without failover for the new DB
/// parameter group and associated settings to take effect.</p>
/// <important>
/// <p>After you create a DB parameter group, you should wait at least 5 minutes before
/// creating your first DB instance that uses that DB parameter group as the default parameter
/// group. This allows Amazon Neptune to fully complete the create action before the parameter
/// group is used as the default for a new DB instance. This is especially important for
/// parameters that are critical when creating the default database for a DB instance, such as
/// the character set for the default database defined by the
/// <code>character_set_database</code> parameter. You can use the <i>Parameter
/// Groups</i> option of the Amazon Neptune console or the
/// <i>DescribeDBParameters</i> command to verify that your DB parameter group has
/// been created or modified.</p>
/// </important>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDBParameterGroup {
    _private: (),
}
impl CreateDBParameterGroup {
    /// Creates a new builder-style object to manufacture [`CreateDbParameterGroupInput`](crate::input::CreateDbParameterGroupInput)
    pub fn builder() -> crate::input::create_db_parameter_group_input::Builder {
        crate::input::create_db_parameter_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDBParameterGroup {
    type Output = std::result::Result<
        crate::output::CreateDbParameterGroupOutput,
        crate::error::CreateDBParameterGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_db_parameter_group_error(response)
        } else {
            crate::operation_deser::parse_create_db_parameter_group_response(response)
        }
    }
}

/// <p>Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at
/// least two AZs in the Amazon Region.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDBSubnetGroup {
    _private: (),
}
impl CreateDBSubnetGroup {
    /// Creates a new builder-style object to manufacture [`CreateDbSubnetGroupInput`](crate::input::CreateDbSubnetGroupInput)
    pub fn builder() -> crate::input::create_db_subnet_group_input::Builder {
        crate::input::create_db_subnet_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDBSubnetGroup {
    type Output = std::result::Result<
        crate::output::CreateDbSubnetGroupOutput,
        crate::error::CreateDBSubnetGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_db_subnet_group_error(response)
        } else {
            crate::operation_deser::parse_create_db_subnet_group_response(response)
        }
    }
}

/// <p>Creates an event notification subscription. This action requires a topic ARN (Amazon
/// Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To
/// obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The
/// ARN is displayed in the SNS console.</p>
/// <p>You can specify the type of source (SourceType) you want to be notified of, provide a list
/// of Neptune sources (SourceIds) that triggers the events, and provide a list of event
/// categories (EventCategories) for events you want to be notified of. For example, you can
/// specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories
/// = Availability, Backup.</p>
/// <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and
/// SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the
/// specified source. If you specify a SourceType but do not specify a SourceIdentifier, you
/// receive notice of the events for that source type for all your Neptune sources. If you do not
/// specify either the SourceType nor the SourceIdentifier, you are notified of events generated
/// from all Neptune sources belonging to your customer account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateEventSubscription {
    _private: (),
}
impl CreateEventSubscription {
    /// Creates a new builder-style object to manufacture [`CreateEventSubscriptionInput`](crate::input::CreateEventSubscriptionInput)
    pub fn builder() -> crate::input::create_event_subscription_input::Builder {
        crate::input::create_event_subscription_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateEventSubscription {
    type Output = std::result::Result<
        crate::output::CreateEventSubscriptionOutput,
        crate::error::CreateEventSubscriptionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_event_subscription_error(response)
        } else {
            crate::operation_deser::parse_create_event_subscription_response(response)
        }
    }
}

/// <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a
/// DB cluster, all automated backups for that DB cluster are deleted and can't be recovered.
/// Manual DB cluster snapshots of the specified DB cluster are not deleted.</p>
/// <p>Note that the DB Cluster cannot be deleted if deletion protection is enabled.  To
/// delete it, you must first set its <code>DeletionProtection</code> field to
/// <code>False</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDBCluster {
    _private: (),
}
impl DeleteDBCluster {
    /// Creates a new builder-style object to manufacture [`DeleteDbClusterInput`](crate::input::DeleteDbClusterInput)
    pub fn builder() -> crate::input::delete_db_cluster_input::Builder {
        crate::input::delete_db_cluster_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteDBCluster {
    type Output = std::result::Result<
        crate::output::DeleteDbClusterOutput,
        crate::error::DeleteDBClusterError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_db_cluster_error(response)
        } else {
            crate::operation_deser::parse_delete_db_cluster_response(response)
        }
    }
}

/// <p>Deletes a custom endpoint and removes it from an Amazon Neptune DB cluster.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDBClusterEndpoint {
    _private: (),
}
impl DeleteDBClusterEndpoint {
    /// Creates a new builder-style object to manufacture [`DeleteDbClusterEndpointInput`](crate::input::DeleteDbClusterEndpointInput)
    pub fn builder() -> crate::input::delete_db_cluster_endpoint_input::Builder {
        crate::input::delete_db_cluster_endpoint_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteDBClusterEndpoint {
    type Output = std::result::Result<
        crate::output::DeleteDbClusterEndpointOutput,
        crate::error::DeleteDBClusterEndpointError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_db_cluster_endpoint_error(response)
        } else {
            crate::operation_deser::parse_delete_db_cluster_endpoint_response(response)
        }
    }
}

/// <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be
/// deleted can't be associated with any DB clusters.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDBClusterParameterGroup {
    _private: (),
}
impl DeleteDBClusterParameterGroup {
    /// Creates a new builder-style object to manufacture [`DeleteDbClusterParameterGroupInput`](crate::input::DeleteDbClusterParameterGroupInput)
    pub fn builder() -> crate::input::delete_db_cluster_parameter_group_input::Builder {
        crate::input::delete_db_cluster_parameter_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteDBClusterParameterGroup {
    type Output = std::result::Result<
        crate::output::DeleteDbClusterParameterGroupOutput,
        crate::error::DeleteDBClusterParameterGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_db_cluster_parameter_group_error(response)
        } else {
            crate::operation_deser::parse_delete_db_cluster_parameter_group_response(response)
        }
    }
}

/// <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is
/// terminated.</p>
/// <note>
/// <p>The DB cluster snapshot must be in the <code>available</code> state to be
/// deleted.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDBClusterSnapshot {
    _private: (),
}
impl DeleteDBClusterSnapshot {
    /// Creates a new builder-style object to manufacture [`DeleteDbClusterSnapshotInput`](crate::input::DeleteDbClusterSnapshotInput)
    pub fn builder() -> crate::input::delete_db_cluster_snapshot_input::Builder {
        crate::input::delete_db_cluster_snapshot_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteDBClusterSnapshot {
    type Output = std::result::Result<
        crate::output::DeleteDbClusterSnapshotOutput,
        crate::error::DeleteDBClusterSnapshotError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_db_cluster_snapshot_error(response)
        } else {
            crate::operation_deser::parse_delete_db_cluster_snapshot_response(response)
        }
    }
}

/// <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete
/// a DB instance, all automated backups for that instance are deleted and can't be recovered.
/// Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not
/// deleted.</p>
/// <p> If you request a final DB snapshot the status of the Amazon Neptune DB instance is
/// <code>deleting</code> until the DB snapshot is created. The API action
/// <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action
/// can't be canceled or reverted once submitted.</p>
/// <p>Note that when a DB instance is in a failure state and has a status of
/// <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>,
/// you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to
/// <code>true</code>.</p>
/// <p>You can't delete a DB instance if it is the only instance in the DB cluster, or
/// if it has deletion protection enabled.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDBInstance {
    _private: (),
}
impl DeleteDBInstance {
    /// Creates a new builder-style object to manufacture [`DeleteDbInstanceInput`](crate::input::DeleteDbInstanceInput)
    pub fn builder() -> crate::input::delete_db_instance_input::Builder {
        crate::input::delete_db_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteDBInstance {
    type Output = std::result::Result<
        crate::output::DeleteDbInstanceOutput,
        crate::error::DeleteDBInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_db_instance_error(response)
        } else {
            crate::operation_deser::parse_delete_db_instance_response(response)
        }
    }
}

/// <p>Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't be
/// associated with any DB instances.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDBParameterGroup {
    _private: (),
}
impl DeleteDBParameterGroup {
    /// Creates a new builder-style object to manufacture [`DeleteDbParameterGroupInput`](crate::input::DeleteDbParameterGroupInput)
    pub fn builder() -> crate::input::delete_db_parameter_group_input::Builder {
        crate::input::delete_db_parameter_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteDBParameterGroup {
    type Output = std::result::Result<
        crate::output::DeleteDbParameterGroupOutput,
        crate::error::DeleteDBParameterGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_db_parameter_group_error(response)
        } else {
            crate::operation_deser::parse_delete_db_parameter_group_response(response)
        }
    }
}

/// <p>Deletes a DB subnet group.</p>
/// <note>
/// <p>The specified database subnet group must not be associated with any DB instances.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDBSubnetGroup {
    _private: (),
}
impl DeleteDBSubnetGroup {
    /// Creates a new builder-style object to manufacture [`DeleteDbSubnetGroupInput`](crate::input::DeleteDbSubnetGroupInput)
    pub fn builder() -> crate::input::delete_db_subnet_group_input::Builder {
        crate::input::delete_db_subnet_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteDBSubnetGroup {
    type Output = std::result::Result<
        crate::output::DeleteDbSubnetGroupOutput,
        crate::error::DeleteDBSubnetGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_db_subnet_group_error(response)
        } else {
            crate::operation_deser::parse_delete_db_subnet_group_response(response)
        }
    }
}

/// <p>Deletes an event notification subscription.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteEventSubscription {
    _private: (),
}
impl DeleteEventSubscription {
    /// Creates a new builder-style object to manufacture [`DeleteEventSubscriptionInput`](crate::input::DeleteEventSubscriptionInput)
    pub fn builder() -> crate::input::delete_event_subscription_input::Builder {
        crate::input::delete_event_subscription_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteEventSubscription {
    type Output = std::result::Result<
        crate::output::DeleteEventSubscriptionOutput,
        crate::error::DeleteEventSubscriptionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_event_subscription_error(response)
        } else {
            crate::operation_deser::parse_delete_event_subscription_response(response)
        }
    }
}

/// <p>Returns information about endpoints for an Amazon Neptune DB cluster.</p>
/// <note>
/// <p>This operation can also return information for Amazon RDS clusters
/// and Amazon DocDB clusters.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDBClusterEndpoints {
    _private: (),
}
impl DescribeDBClusterEndpoints {
    /// Creates a new builder-style object to manufacture [`DescribeDbClusterEndpointsInput`](crate::input::DescribeDbClusterEndpointsInput)
    pub fn builder() -> crate::input::describe_db_cluster_endpoints_input::Builder {
        crate::input::describe_db_cluster_endpoints_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDBClusterEndpoints {
    type Output = std::result::Result<
        crate::output::DescribeDbClusterEndpointsOutput,
        crate::error::DescribeDBClusterEndpointsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_db_cluster_endpoints_error(response)
        } else {
            crate::operation_deser::parse_describe_db_cluster_endpoints_response(response)
        }
    }
}

/// <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a
/// <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only
/// the description of the specified DB cluster parameter group.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDBClusterParameterGroups {
    _private: (),
}
impl DescribeDBClusterParameterGroups {
    /// Creates a new builder-style object to manufacture [`DescribeDbClusterParameterGroupsInput`](crate::input::DescribeDbClusterParameterGroupsInput)
    pub fn builder() -> crate::input::describe_db_cluster_parameter_groups_input::Builder {
        crate::input::describe_db_cluster_parameter_groups_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDBClusterParameterGroups {
    type Output = std::result::Result<
        crate::output::DescribeDbClusterParameterGroupsOutput,
        crate::error::DescribeDBClusterParameterGroupsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_db_cluster_parameter_groups_error(response)
        } else {
            crate::operation_deser::parse_describe_db_cluster_parameter_groups_response(response)
        }
    }
}

/// <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDBClusterParameters {
    _private: (),
}
impl DescribeDBClusterParameters {
    /// Creates a new builder-style object to manufacture [`DescribeDbClusterParametersInput`](crate::input::DescribeDbClusterParametersInput)
    pub fn builder() -> crate::input::describe_db_cluster_parameters_input::Builder {
        crate::input::describe_db_cluster_parameters_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDBClusterParameters {
    type Output = std::result::Result<
        crate::output::DescribeDbClusterParametersOutput,
        crate::error::DescribeDBClusterParametersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_db_cluster_parameters_error(response)
        } else {
            crate::operation_deser::parse_describe_db_cluster_parameters_response(response)
        }
    }
}

/// <p>Returns information about provisioned DB clusters, and supports
/// pagination.</p>
/// <note>
/// <p>This operation can also return information for Amazon RDS clusters
/// and Amazon DocDB clusters.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDBClusters {
    _private: (),
}
impl DescribeDBClusters {
    /// Creates a new builder-style object to manufacture [`DescribeDbClustersInput`](crate::input::DescribeDbClustersInput)
    pub fn builder() -> crate::input::describe_db_clusters_input::Builder {
        crate::input::describe_db_clusters_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDBClusters {
    type Output = std::result::Result<
        crate::output::DescribeDbClustersOutput,
        crate::error::DescribeDBClustersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_db_clusters_error(response)
        } else {
            crate::operation_deser::parse_describe_db_clusters_response(response)
        }
    }
}

/// <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster
/// snapshot.</p>
/// <p>When sharing snapshots with other Amazon accounts,
/// <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute
/// and a list of IDs for the Amazon accounts that are authorized to copy or restore the manual DB
/// cluster snapshot. If <code>all</code> is included in the list of values for the
/// <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be
/// copied or restored by all Amazon accounts.</p>
/// <p>To add or remove access for an Amazon account to copy or restore a manual DB cluster
/// snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDBClusterSnapshotAttributes {
    _private: (),
}
impl DescribeDBClusterSnapshotAttributes {
    /// Creates a new builder-style object to manufacture [`DescribeDbClusterSnapshotAttributesInput`](crate::input::DescribeDbClusterSnapshotAttributesInput)
    pub fn builder() -> crate::input::describe_db_cluster_snapshot_attributes_input::Builder {
        crate::input::describe_db_cluster_snapshot_attributes_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDBClusterSnapshotAttributes {
    type Output = std::result::Result<
        crate::output::DescribeDbClusterSnapshotAttributesOutput,
        crate::error::DescribeDBClusterSnapshotAttributesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_db_cluster_snapshot_attributes_error(response)
        } else {
            crate::operation_deser::parse_describe_db_cluster_snapshot_attributes_response(response)
        }
    }
}

/// <p>Returns information about DB cluster snapshots. This API action supports
/// pagination.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDBClusterSnapshots {
    _private: (),
}
impl DescribeDBClusterSnapshots {
    /// Creates a new builder-style object to manufacture [`DescribeDbClusterSnapshotsInput`](crate::input::DescribeDbClusterSnapshotsInput)
    pub fn builder() -> crate::input::describe_db_cluster_snapshots_input::Builder {
        crate::input::describe_db_cluster_snapshots_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDBClusterSnapshots {
    type Output = std::result::Result<
        crate::output::DescribeDbClusterSnapshotsOutput,
        crate::error::DescribeDBClusterSnapshotsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_db_cluster_snapshots_error(response)
        } else {
            crate::operation_deser::parse_describe_db_cluster_snapshots_response(response)
        }
    }
}

/// <p>Returns a list of the available DB engines.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDBEngineVersions {
    _private: (),
}
impl DescribeDBEngineVersions {
    /// Creates a new builder-style object to manufacture [`DescribeDbEngineVersionsInput`](crate::input::DescribeDbEngineVersionsInput)
    pub fn builder() -> crate::input::describe_db_engine_versions_input::Builder {
        crate::input::describe_db_engine_versions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDBEngineVersions {
    type Output = std::result::Result<
        crate::output::DescribeDbEngineVersionsOutput,
        crate::error::DescribeDBEngineVersionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_db_engine_versions_error(response)
        } else {
            crate::operation_deser::parse_describe_db_engine_versions_response(response)
        }
    }
}

/// <p>Returns information about provisioned instances, and supports pagination.</p>
/// <note>
/// <p>This operation can also return information for Amazon RDS instances
/// and Amazon DocDB instances.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDBInstances {
    _private: (),
}
impl DescribeDBInstances {
    /// Creates a new builder-style object to manufacture [`DescribeDbInstancesInput`](crate::input::DescribeDbInstancesInput)
    pub fn builder() -> crate::input::describe_db_instances_input::Builder {
        crate::input::describe_db_instances_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDBInstances {
    type Output = std::result::Result<
        crate::output::DescribeDbInstancesOutput,
        crate::error::DescribeDBInstancesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_db_instances_error(response)
        } else {
            crate::operation_deser::parse_describe_db_instances_response(response)
        }
    }
}

/// <p>Returns a list of <code>DBParameterGroup</code> descriptions. If a
/// <code>DBParameterGroupName</code> is specified, the list will contain only the description of
/// the specified DB parameter group.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDBParameterGroups {
    _private: (),
}
impl DescribeDBParameterGroups {
    /// Creates a new builder-style object to manufacture [`DescribeDbParameterGroupsInput`](crate::input::DescribeDbParameterGroupsInput)
    pub fn builder() -> crate::input::describe_db_parameter_groups_input::Builder {
        crate::input::describe_db_parameter_groups_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDBParameterGroups {
    type Output = std::result::Result<
        crate::output::DescribeDbParameterGroupsOutput,
        crate::error::DescribeDBParameterGroupsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_db_parameter_groups_error(response)
        } else {
            crate::operation_deser::parse_describe_db_parameter_groups_response(response)
        }
    }
}

/// <p>Returns the detailed parameter list for a particular DB parameter group.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDBParameters {
    _private: (),
}
impl DescribeDBParameters {
    /// Creates a new builder-style object to manufacture [`DescribeDbParametersInput`](crate::input::DescribeDbParametersInput)
    pub fn builder() -> crate::input::describe_db_parameters_input::Builder {
        crate::input::describe_db_parameters_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDBParameters {
    type Output = std::result::Result<
        crate::output::DescribeDbParametersOutput,
        crate::error::DescribeDBParametersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_db_parameters_error(response)
        } else {
            crate::operation_deser::parse_describe_db_parameters_response(response)
        }
    }
}

/// <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the
/// list will contain only the descriptions of the specified DBSubnetGroup.</p>
/// <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDBSubnetGroups {
    _private: (),
}
impl DescribeDBSubnetGroups {
    /// Creates a new builder-style object to manufacture [`DescribeDbSubnetGroupsInput`](crate::input::DescribeDbSubnetGroupsInput)
    pub fn builder() -> crate::input::describe_db_subnet_groups_input::Builder {
        crate::input::describe_db_subnet_groups_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDBSubnetGroups {
    type Output = std::result::Result<
        crate::output::DescribeDbSubnetGroupsOutput,
        crate::error::DescribeDBSubnetGroupsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_db_subnet_groups_error(response)
        } else {
            crate::operation_deser::parse_describe_db_subnet_groups_response(response)
        }
    }
}

/// <p>Returns the default engine and system parameter information for the cluster database
/// engine.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeEngineDefaultClusterParameters {
    _private: (),
}
impl DescribeEngineDefaultClusterParameters {
    /// Creates a new builder-style object to manufacture [`DescribeEngineDefaultClusterParametersInput`](crate::input::DescribeEngineDefaultClusterParametersInput)
    pub fn builder() -> crate::input::describe_engine_default_cluster_parameters_input::Builder {
        crate::input::describe_engine_default_cluster_parameters_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeEngineDefaultClusterParameters {
    type Output = std::result::Result<
        crate::output::DescribeEngineDefaultClusterParametersOutput,
        crate::error::DescribeEngineDefaultClusterParametersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_engine_default_cluster_parameters_error(response)
        } else {
            crate::operation_deser::parse_describe_engine_default_cluster_parameters_response(
                response,
            )
        }
    }
}

/// <p>Returns the default engine and system parameter information for the specified database
/// engine.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeEngineDefaultParameters {
    _private: (),
}
impl DescribeEngineDefaultParameters {
    /// Creates a new builder-style object to manufacture [`DescribeEngineDefaultParametersInput`](crate::input::DescribeEngineDefaultParametersInput)
    pub fn builder() -> crate::input::describe_engine_default_parameters_input::Builder {
        crate::input::describe_engine_default_parameters_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeEngineDefaultParameters {
    type Output = std::result::Result<
        crate::output::DescribeEngineDefaultParametersOutput,
        crate::error::DescribeEngineDefaultParametersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_engine_default_parameters_error(response)
        } else {
            crate::operation_deser::parse_describe_engine_default_parameters_response(response)
        }
    }
}

/// <p>Displays a list of categories for all event source types, or, if specified, for a
/// specified source type.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeEventCategories {
    _private: (),
}
impl DescribeEventCategories {
    /// Creates a new builder-style object to manufacture [`DescribeEventCategoriesInput`](crate::input::DescribeEventCategoriesInput)
    pub fn builder() -> crate::input::describe_event_categories_input::Builder {
        crate::input::describe_event_categories_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeEventCategories {
    type Output = std::result::Result<
        crate::output::DescribeEventCategoriesOutput,
        crate::error::DescribeEventCategoriesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_event_categories_error(response)
        } else {
            crate::operation_deser::parse_describe_event_categories_response(response)
        }
    }
}

/// <p>Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter
/// groups for the past 14 days. Events specific to a particular DB instance, DB security group,
/// database snapshot, or DB parameter group can be obtained by providing the name as a parameter.
/// By default, the past hour of events are returned.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeEvents {
    _private: (),
}
impl DescribeEvents {
    /// Creates a new builder-style object to manufacture [`DescribeEventsInput`](crate::input::DescribeEventsInput)
    pub fn builder() -> crate::input::describe_events_input::Builder {
        crate::input::describe_events_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeEvents {
    type Output =
        std::result::Result<crate::output::DescribeEventsOutput, crate::error::DescribeEventsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_events_error(response)
        } else {
            crate::operation_deser::parse_describe_events_response(response)
        }
    }
}

/// <p>Lists all the subscription descriptions for a customer account. The description for a
/// subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID,
/// CreationTime, and Status.</p>
/// <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeEventSubscriptions {
    _private: (),
}
impl DescribeEventSubscriptions {
    /// Creates a new builder-style object to manufacture [`DescribeEventSubscriptionsInput`](crate::input::DescribeEventSubscriptionsInput)
    pub fn builder() -> crate::input::describe_event_subscriptions_input::Builder {
        crate::input::describe_event_subscriptions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeEventSubscriptions {
    type Output = std::result::Result<
        crate::output::DescribeEventSubscriptionsOutput,
        crate::error::DescribeEventSubscriptionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_event_subscriptions_error(response)
        } else {
            crate::operation_deser::parse_describe_event_subscriptions_response(response)
        }
    }
}

/// <p>Returns a list of orderable DB instance options for the specified engine.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeOrderableDBInstanceOptions {
    _private: (),
}
impl DescribeOrderableDBInstanceOptions {
    /// Creates a new builder-style object to manufacture [`DescribeOrderableDbInstanceOptionsInput`](crate::input::DescribeOrderableDbInstanceOptionsInput)
    pub fn builder() -> crate::input::describe_orderable_db_instance_options_input::Builder {
        crate::input::describe_orderable_db_instance_options_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeOrderableDBInstanceOptions {
    type Output = std::result::Result<
        crate::output::DescribeOrderableDbInstanceOptionsOutput,
        crate::error::DescribeOrderableDBInstanceOptionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_orderable_db_instance_options_error(response)
        } else {
            crate::operation_deser::parse_describe_orderable_db_instance_options_response(response)
        }
    }
}

/// <p>Returns a list of resources (for example, DB instances) that have at least one pending
/// maintenance action.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribePendingMaintenanceActions {
    _private: (),
}
impl DescribePendingMaintenanceActions {
    /// Creates a new builder-style object to manufacture [`DescribePendingMaintenanceActionsInput`](crate::input::DescribePendingMaintenanceActionsInput)
    pub fn builder() -> crate::input::describe_pending_maintenance_actions_input::Builder {
        crate::input::describe_pending_maintenance_actions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribePendingMaintenanceActions {
    type Output = std::result::Result<
        crate::output::DescribePendingMaintenanceActionsOutput,
        crate::error::DescribePendingMaintenanceActionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_pending_maintenance_actions_error(response)
        } else {
            crate::operation_deser::parse_describe_pending_maintenance_actions_response(response)
        }
    }
}

/// <p>You can call <a>DescribeValidDBInstanceModifications</a>
/// to learn what modifications you can make to your DB instance. You can use this
/// information when you call <a>ModifyDBInstance</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeValidDBInstanceModifications {
    _private: (),
}
impl DescribeValidDBInstanceModifications {
    /// Creates a new builder-style object to manufacture [`DescribeValidDbInstanceModificationsInput`](crate::input::DescribeValidDbInstanceModificationsInput)
    pub fn builder() -> crate::input::describe_valid_db_instance_modifications_input::Builder {
        crate::input::describe_valid_db_instance_modifications_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeValidDBInstanceModifications {
    type Output = std::result::Result<
        crate::output::DescribeValidDbInstanceModificationsOutput,
        crate::error::DescribeValidDBInstanceModificationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_valid_db_instance_modifications_error(response)
        } else {
            crate::operation_deser::parse_describe_valid_db_instance_modifications_response(
                response,
            )
        }
    }
}

/// <p>Forces a failover for a DB cluster.</p>
/// <p>A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the
/// DB cluster to be the primary instance (the cluster writer).</p>
/// <p>Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the
/// primary instance fails. You can force a failover when you want to simulate a failure of a
/// primary instance for testing. Because each instance in a DB cluster has its own endpoint
/// address, you will need to clean up and re-establish any existing connections that use those
/// endpoint addresses when the failover is complete.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct FailoverDBCluster {
    _private: (),
}
impl FailoverDBCluster {
    /// Creates a new builder-style object to manufacture [`FailoverDbClusterInput`](crate::input::FailoverDbClusterInput)
    pub fn builder() -> crate::input::failover_db_cluster_input::Builder {
        crate::input::failover_db_cluster_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for FailoverDBCluster {
    type Output = std::result::Result<
        crate::output::FailoverDbClusterOutput,
        crate::error::FailoverDBClusterError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_failover_db_cluster_error(response)
        } else {
            crate::operation_deser::parse_failover_db_cluster_response(response)
        }
    }
}

/// <p>Lists all tags on an Amazon Neptune resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput)
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// <p>Modify a setting for a DB cluster. You can change one or more database configuration
/// parameters by specifying these parameters and the new values in the request.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyDBCluster {
    _private: (),
}
impl ModifyDBCluster {
    /// Creates a new builder-style object to manufacture [`ModifyDbClusterInput`](crate::input::ModifyDbClusterInput)
    pub fn builder() -> crate::input::modify_db_cluster_input::Builder {
        crate::input::modify_db_cluster_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyDBCluster {
    type Output = std::result::Result<
        crate::output::ModifyDbClusterOutput,
        crate::error::ModifyDBClusterError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_db_cluster_error(response)
        } else {
            crate::operation_deser::parse_modify_db_cluster_response(response)
        }
    }
}

/// <p>Modifies the properties of an endpoint in an Amazon Neptune DB cluster.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyDBClusterEndpoint {
    _private: (),
}
impl ModifyDBClusterEndpoint {
    /// Creates a new builder-style object to manufacture [`ModifyDbClusterEndpointInput`](crate::input::ModifyDbClusterEndpointInput)
    pub fn builder() -> crate::input::modify_db_cluster_endpoint_input::Builder {
        crate::input::modify_db_cluster_endpoint_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyDBClusterEndpoint {
    type Output = std::result::Result<
        crate::output::ModifyDbClusterEndpointOutput,
        crate::error::ModifyDBClusterEndpointError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_db_cluster_endpoint_error(response)
        } else {
            crate::operation_deser::parse_modify_db_cluster_endpoint_response(response)
        }
    }
}

/// <p> Modifies the parameters of a DB cluster parameter group. To modify more than one
/// parameter, submit a list of the following: <code>ParameterName</code>,
/// <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be
/// modified in a single request.</p>
/// <note>
/// <p>Changes to dynamic parameters are applied immediately. Changes to static parameters
/// require a reboot without failover to the DB cluster associated with the parameter group
/// before the change can take effect.</p>
/// </note>
/// <important>
/// <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before
/// creating your first DB cluster that uses that DB cluster parameter group as the default
/// parameter group. This allows Amazon Neptune to fully complete the create action before the
/// parameter group is used as the default for a new DB cluster. This is especially important
/// for parameters that are critical when creating the default database for a DB cluster, such
/// as the character set for the default database defined by the
/// <code>character_set_database</code> parameter. You can use the <i>Parameter
/// Groups</i> option of the Amazon Neptune console or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter
/// group has been created or modified.</p>
/// </important>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyDBClusterParameterGroup {
    _private: (),
}
impl ModifyDBClusterParameterGroup {
    /// Creates a new builder-style object to manufacture [`ModifyDbClusterParameterGroupInput`](crate::input::ModifyDbClusterParameterGroupInput)
    pub fn builder() -> crate::input::modify_db_cluster_parameter_group_input::Builder {
        crate::input::modify_db_cluster_parameter_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyDBClusterParameterGroup {
    type Output = std::result::Result<
        crate::output::ModifyDbClusterParameterGroupOutput,
        crate::error::ModifyDBClusterParameterGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_db_cluster_parameter_group_error(response)
        } else {
            crate::operation_deser::parse_modify_db_cluster_parameter_group_response(response)
        }
    }
}

/// <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB
/// cluster snapshot.</p>
/// <p>To share a manual DB cluster snapshot with other Amazon accounts, specify
/// <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code>
/// parameter to add a list of IDs of the Amazon accounts that are authorized to restore the manual
/// DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot
/// public, which means that it can be copied or restored by all Amazon accounts. Do not add the
/// <code>all</code> value for any manual DB cluster snapshots that contain private information
/// that you don't want available to all Amazon accounts. If a manual DB cluster snapshot is
/// encrypted, it can be shared, but only by specifying a list of authorized Amazon account IDs for
/// the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that
/// parameter in this case.</p>
/// <p>To view which Amazon accounts have access to copy or restore a manual DB cluster snapshot, or
/// whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyDBClusterSnapshotAttribute {
    _private: (),
}
impl ModifyDBClusterSnapshotAttribute {
    /// Creates a new builder-style object to manufacture [`ModifyDbClusterSnapshotAttributeInput`](crate::input::ModifyDbClusterSnapshotAttributeInput)
    pub fn builder() -> crate::input::modify_db_cluster_snapshot_attribute_input::Builder {
        crate::input::modify_db_cluster_snapshot_attribute_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyDBClusterSnapshotAttribute {
    type Output = std::result::Result<
        crate::output::ModifyDbClusterSnapshotAttributeOutput,
        crate::error::ModifyDBClusterSnapshotAttributeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_db_cluster_snapshot_attribute_error(response)
        } else {
            crate::operation_deser::parse_modify_db_cluster_snapshot_attribute_response(response)
        }
    }
}

/// <p>Modifies settings for a DB instance. You can change one or more database configuration
/// parameters by specifying these parameters and the new values in the request. To learn what
/// modifications you can make to your DB instance, call <a>DescribeValidDBInstanceModifications</a> before you call <a>ModifyDBInstance</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyDBInstance {
    _private: (),
}
impl ModifyDBInstance {
    /// Creates a new builder-style object to manufacture [`ModifyDbInstanceInput`](crate::input::ModifyDbInstanceInput)
    pub fn builder() -> crate::input::modify_db_instance_input::Builder {
        crate::input::modify_db_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyDBInstance {
    type Output = std::result::Result<
        crate::output::ModifyDbInstanceOutput,
        crate::error::ModifyDBInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_db_instance_error(response)
        } else {
            crate::operation_deser::parse_modify_db_instance_response(response)
        }
    }
}

/// <p>Modifies the parameters of a DB parameter group. To modify more than one parameter,
/// submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and
/// <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p>
/// <note>
/// <p>Changes to dynamic parameters are applied immediately. Changes to static parameters
/// require a reboot without failover to the DB instance associated with the parameter group
/// before the change can take effect.</p>
/// </note>
/// <important>
/// <p>After you modify a DB parameter group, you should wait at least 5 minutes before
/// creating your first DB instance that uses that DB parameter group as the default parameter
/// group. This allows Amazon Neptune to fully complete the modify action before the parameter
/// group is used as the default for a new DB instance. This is especially important for
/// parameters that are critical when creating the default database for a DB instance, such as
/// the character set for the default database defined by the
/// <code>character_set_database</code> parameter. You can use the <i>Parameter
/// Groups</i> option of the Amazon Neptune console or the
/// <i>DescribeDBParameters</i> command to verify that your DB parameter group has
/// been created or modified.</p>
/// </important>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyDBParameterGroup {
    _private: (),
}
impl ModifyDBParameterGroup {
    /// Creates a new builder-style object to manufacture [`ModifyDbParameterGroupInput`](crate::input::ModifyDbParameterGroupInput)
    pub fn builder() -> crate::input::modify_db_parameter_group_input::Builder {
        crate::input::modify_db_parameter_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyDBParameterGroup {
    type Output = std::result::Result<
        crate::output::ModifyDbParameterGroupOutput,
        crate::error::ModifyDBParameterGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_db_parameter_group_error(response)
        } else {
            crate::operation_deser::parse_modify_db_parameter_group_response(response)
        }
    }
}

/// <p>Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in
/// at least two AZs in the Amazon Region.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyDBSubnetGroup {
    _private: (),
}
impl ModifyDBSubnetGroup {
    /// Creates a new builder-style object to manufacture [`ModifyDbSubnetGroupInput`](crate::input::ModifyDbSubnetGroupInput)
    pub fn builder() -> crate::input::modify_db_subnet_group_input::Builder {
        crate::input::modify_db_subnet_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyDBSubnetGroup {
    type Output = std::result::Result<
        crate::output::ModifyDbSubnetGroupOutput,
        crate::error::ModifyDBSubnetGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_db_subnet_group_error(response)
        } else {
            crate::operation_deser::parse_modify_db_subnet_group_response(response)
        }
    }
}

/// <p>Modifies an existing event notification subscription. Note that you can't modify the
/// source identifiers using this call; to change source identifiers for a subscription, use the
/// <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p>
/// <p>You can see a list of the event categories for a given SourceType
/// by using the <b>DescribeEventCategories</b> action.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyEventSubscription {
    _private: (),
}
impl ModifyEventSubscription {
    /// Creates a new builder-style object to manufacture [`ModifyEventSubscriptionInput`](crate::input::ModifyEventSubscriptionInput)
    pub fn builder() -> crate::input::modify_event_subscription_input::Builder {
        crate::input::modify_event_subscription_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyEventSubscription {
    type Output = std::result::Result<
        crate::output::ModifyEventSubscriptionOutput,
        crate::error::ModifyEventSubscriptionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_event_subscription_error(response)
        } else {
            crate::operation_deser::parse_modify_event_subscription_response(response)
        }
    }
}

/// <p>Not supported.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PromoteReadReplicaDBCluster {
    _private: (),
}
impl PromoteReadReplicaDBCluster {
    /// Creates a new builder-style object to manufacture [`PromoteReadReplicaDbClusterInput`](crate::input::PromoteReadReplicaDbClusterInput)
    pub fn builder() -> crate::input::promote_read_replica_db_cluster_input::Builder {
        crate::input::promote_read_replica_db_cluster_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PromoteReadReplicaDBCluster {
    type Output = std::result::Result<
        crate::output::PromoteReadReplicaDbClusterOutput,
        crate::error::PromoteReadReplicaDBClusterError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_promote_read_replica_db_cluster_error(response)
        } else {
            crate::operation_deser::parse_promote_read_replica_db_cluster_response(response)
        }
    }
}

/// <p>You might need to reboot your DB instance, usually for maintenance reasons. For example,
/// if you make certain modifications, or if you change the DB parameter group associated with the
/// DB instance, you must reboot the instance for the changes to take effect.</p>
/// <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance
/// results in a momentary outage, during which the DB instance status is set to rebooting.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RebootDBInstance {
    _private: (),
}
impl RebootDBInstance {
    /// Creates a new builder-style object to manufacture [`RebootDbInstanceInput`](crate::input::RebootDbInstanceInput)
    pub fn builder() -> crate::input::reboot_db_instance_input::Builder {
        crate::input::reboot_db_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RebootDBInstance {
    type Output = std::result::Result<
        crate::output::RebootDbInstanceOutput,
        crate::error::RebootDBInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_reboot_db_instance_error(response)
        } else {
            crate::operation_deser::parse_reboot_db_instance_response(response)
        }
    }
}

/// <p>Disassociates an Identity and Access Management (IAM) role from a DB cluster.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RemoveRoleFromDBCluster {
    _private: (),
}
impl RemoveRoleFromDBCluster {
    /// Creates a new builder-style object to manufacture [`RemoveRoleFromDbClusterInput`](crate::input::RemoveRoleFromDbClusterInput)
    pub fn builder() -> crate::input::remove_role_from_db_cluster_input::Builder {
        crate::input::remove_role_from_db_cluster_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RemoveRoleFromDBCluster {
    type Output = std::result::Result<
        crate::output::RemoveRoleFromDbClusterOutput,
        crate::error::RemoveRoleFromDBClusterError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_remove_role_from_db_cluster_error(response)
        } else {
            crate::operation_deser::parse_remove_role_from_db_cluster_response(response)
        }
    }
}

/// <p>Removes a source identifier from an existing event notification subscription.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RemoveSourceIdentifierFromSubscription {
    _private: (),
}
impl RemoveSourceIdentifierFromSubscription {
    /// Creates a new builder-style object to manufacture [`RemoveSourceIdentifierFromSubscriptionInput`](crate::input::RemoveSourceIdentifierFromSubscriptionInput)
    pub fn builder() -> crate::input::remove_source_identifier_from_subscription_input::Builder {
        crate::input::remove_source_identifier_from_subscription_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RemoveSourceIdentifierFromSubscription {
    type Output = std::result::Result<
        crate::output::RemoveSourceIdentifierFromSubscriptionOutput,
        crate::error::RemoveSourceIdentifierFromSubscriptionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_remove_source_identifier_from_subscription_error(response)
        } else {
            crate::operation_deser::parse_remove_source_identifier_from_subscription_response(
                response,
            )
        }
    }
}

/// <p>Removes metadata tags from an Amazon Neptune resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RemoveTagsFromResource {
    _private: (),
}
impl RemoveTagsFromResource {
    /// Creates a new builder-style object to manufacture [`RemoveTagsFromResourceInput`](crate::input::RemoveTagsFromResourceInput)
    pub fn builder() -> crate::input::remove_tags_from_resource_input::Builder {
        crate::input::remove_tags_from_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RemoveTagsFromResource {
    type Output = std::result::Result<
        crate::output::RemoveTagsFromResourceOutput,
        crate::error::RemoveTagsFromResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_remove_tags_from_resource_error(response)
        } else {
            crate::operation_deser::parse_remove_tags_from_resource_response(response)
        }
    }
}

/// <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset
/// specific parameters submit a list of the following: <code>ParameterName</code> and
/// <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the
/// <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters.</p>
/// <p> When resetting the entire group, dynamic parameters are updated immediately and static
/// parameters are set to <code>pending-reboot</code> to take effect on the next DB instance
/// restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster
/// that you want the updated static parameter to apply to.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ResetDBClusterParameterGroup {
    _private: (),
}
impl ResetDBClusterParameterGroup {
    /// Creates a new builder-style object to manufacture [`ResetDbClusterParameterGroupInput`](crate::input::ResetDbClusterParameterGroupInput)
    pub fn builder() -> crate::input::reset_db_cluster_parameter_group_input::Builder {
        crate::input::reset_db_cluster_parameter_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ResetDBClusterParameterGroup {
    type Output = std::result::Result<
        crate::output::ResetDbClusterParameterGroupOutput,
        crate::error::ResetDBClusterParameterGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_reset_db_cluster_parameter_group_error(response)
        } else {
            crate::operation_deser::parse_reset_db_cluster_parameter_group_response(response)
        }
    }
}

/// <p>Modifies the parameters of a DB parameter group to the engine/system default value. To
/// reset specific parameters, provide a list of the following: <code>ParameterName</code> and
/// <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the
/// <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When
/// resetting the entire group, dynamic parameters are updated immediately and static parameters
/// are set to <code>pending-reboot</code> to take effect on the next DB instance restart or
/// <code>RebootDBInstance</code> request.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ResetDBParameterGroup {
    _private: (),
}
impl ResetDBParameterGroup {
    /// Creates a new builder-style object to manufacture [`ResetDbParameterGroupInput`](crate::input::ResetDbParameterGroupInput)
    pub fn builder() -> crate::input::reset_db_parameter_group_input::Builder {
        crate::input::reset_db_parameter_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ResetDBParameterGroup {
    type Output = std::result::Result<
        crate::output::ResetDbParameterGroupOutput,
        crate::error::ResetDBParameterGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_reset_db_parameter_group_error(response)
        } else {
            crate::operation_deser::parse_reset_db_parameter_group_response(response)
        }
    }
}

/// <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p>
/// <p>If a DB snapshot is specified, the target DB cluster is created from the source DB
/// snapshot with a default configuration and default security group.</p>
/// <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB
/// cluster restore point with the same configuration as the original source DB cluster, except
/// that the new DB cluster is created with the default security group.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RestoreDBClusterFromSnapshot {
    _private: (),
}
impl RestoreDBClusterFromSnapshot {
    /// Creates a new builder-style object to manufacture [`RestoreDbClusterFromSnapshotInput`](crate::input::RestoreDbClusterFromSnapshotInput)
    pub fn builder() -> crate::input::restore_db_cluster_from_snapshot_input::Builder {
        crate::input::restore_db_cluster_from_snapshot_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RestoreDBClusterFromSnapshot {
    type Output = std::result::Result<
        crate::output::RestoreDbClusterFromSnapshotOutput,
        crate::error::RestoreDBClusterFromSnapshotError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_restore_db_cluster_from_snapshot_error(response)
        } else {
            crate::operation_deser::parse_restore_db_cluster_from_snapshot_response(response)
        }
    }
}

/// <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in
/// time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code>
/// days. The target DB cluster is created from the source DB cluster with the same configuration
/// as the original DB cluster, except that the new DB cluster is created with the default DB
/// security group.</p>
/// <note>
/// <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You
/// must invoke the <a>CreateDBInstance</a> action to create DB instances for the
/// restored DB cluster, specifying the identifier of the restored DB cluster in
/// <code>DBClusterIdentifier</code>. You can create DB instances only after the
/// <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is
/// available.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RestoreDBClusterToPointInTime {
    _private: (),
}
impl RestoreDBClusterToPointInTime {
    /// Creates a new builder-style object to manufacture [`RestoreDbClusterToPointInTimeInput`](crate::input::RestoreDbClusterToPointInTimeInput)
    pub fn builder() -> crate::input::restore_db_cluster_to_point_in_time_input::Builder {
        crate::input::restore_db_cluster_to_point_in_time_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RestoreDBClusterToPointInTime {
    type Output = std::result::Result<
        crate::output::RestoreDbClusterToPointInTimeOutput,
        crate::error::RestoreDBClusterToPointInTimeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_restore_db_cluster_to_point_in_time_error(response)
        } else {
            crate::operation_deser::parse_restore_db_cluster_to_point_in_time_response(response)
        }
    }
}

/// <p>Starts an Amazon Neptune  DB cluster that was stopped using the AWS
/// console, the Amazon CLI stop-db-cluster command, or the StopDBCluster API.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartDBCluster {
    _private: (),
}
impl StartDBCluster {
    /// Creates a new builder-style object to manufacture [`StartDbClusterInput`](crate::input::StartDbClusterInput)
    pub fn builder() -> crate::input::start_db_cluster_input::Builder {
        crate::input::start_db_cluster_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartDBCluster {
    type Output =
        std::result::Result<crate::output::StartDbClusterOutput, crate::error::StartDBClusterError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_db_cluster_error(response)
        } else {
            crate::operation_deser::parse_start_db_cluster_response(response)
        }
    }
}

/// <p>Stops an Amazon Neptune DB cluster. When you stop a DB cluster, Neptune
/// retains the DB cluster's metadata, including its endpoints and DB parameter
/// groups.</p>
/// <p>Neptune also retains the transaction logs so you can do a point-in-time
/// restore if necessary.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StopDBCluster {
    _private: (),
}
impl StopDBCluster {
    /// Creates a new builder-style object to manufacture [`StopDbClusterInput`](crate::input::StopDbClusterInput)
    pub fn builder() -> crate::input::stop_db_cluster_input::Builder {
        crate::input::stop_db_cluster_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StopDBCluster {
    type Output =
        std::result::Result<crate::output::StopDbClusterOutput, crate::error::StopDBClusterError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_stop_db_cluster_error(response)
        } else {
            crate::operation_deser::parse_stop_db_cluster_response(response)
        }
    }
}
