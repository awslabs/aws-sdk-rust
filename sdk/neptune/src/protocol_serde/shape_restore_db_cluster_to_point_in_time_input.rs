// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_restore_db_cluster_to_point_in_time_input_input(
    input: &crate::operation::restore_db_cluster_to_point_in_time::RestoreDbClusterToPointInTimeInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "RestoreDBClusterToPointInTime", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("DBClusterIdentifier");
    if let Some(var_2) = &input.db_cluster_identifier {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("RestoreType");
    if let Some(var_4) = &input.restore_type {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("SourceDBClusterIdentifier");
    if let Some(var_6) = &input.source_db_cluster_identifier {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("RestoreToTime");
    if let Some(var_8) = &input.restore_to_time {
        scope_7.date_time(var_8, ::aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("UseLatestRestorableTime");
    if let Some(var_10) = &input.use_latest_restorable_time {
        scope_9.boolean(*var_10);
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("Port");
    if let Some(var_12) = &input.port {
        scope_11.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_12).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("DBSubnetGroupName");
    if let Some(var_14) = &input.db_subnet_group_name {
        scope_13.string(var_14);
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("OptionGroupName");
    if let Some(var_16) = &input.option_group_name {
        scope_15.string(var_16);
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_18) = &input.vpc_security_group_ids {
        let mut list_20 = scope_17.start_list(false, Some("VpcSecurityGroupId"));
        for item_19 in var_18 {
            #[allow(unused_mut)]
            let mut entry_21 = list_20.entry();
            entry_21.string(item_19);
        }
        list_20.finish();
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("Tags");
    if let Some(var_23) = &input.tags {
        let mut list_25 = scope_22.start_list(false, Some("Tag"));
        for item_24 in var_23 {
            #[allow(unused_mut)]
            let mut entry_26 = list_25.entry();
            crate::protocol_serde::shape_tag::ser_tag(entry_26, item_24)?;
        }
        list_25.finish();
    }
    #[allow(unused_mut)]
    let mut scope_27 = writer.prefix("KmsKeyId");
    if let Some(var_28) = &input.kms_key_id {
        scope_27.string(var_28);
    }
    #[allow(unused_mut)]
    let mut scope_29 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_30) = &input.enable_iam_database_authentication {
        scope_29.boolean(*var_30);
    }
    #[allow(unused_mut)]
    let mut scope_31 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_32) = &input.enable_cloudwatch_logs_exports {
        let mut list_34 = scope_31.start_list(false, None);
        for item_33 in var_32 {
            #[allow(unused_mut)]
            let mut entry_35 = list_34.entry();
            entry_35.string(item_33);
        }
        list_34.finish();
    }
    #[allow(unused_mut)]
    let mut scope_36 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_37) = &input.db_cluster_parameter_group_name {
        scope_36.string(var_37);
    }
    #[allow(unused_mut)]
    let mut scope_38 = writer.prefix("DeletionProtection");
    if let Some(var_39) = &input.deletion_protection {
        scope_38.boolean(*var_39);
    }
    #[allow(unused_mut)]
    let mut scope_40 = writer.prefix("ServerlessV2ScalingConfiguration");
    if let Some(var_41) = &input.serverless_v2_scaling_configuration {
        crate::protocol_serde::shape_serverless_v2_scaling_configuration::ser_serverless_v2_scaling_configuration(scope_40, var_41)?;
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
