// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_db_cluster(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::DbCluster, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::DbCluster::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("AllocatedStorage") /* AllocatedStorage com.amazonaws.neptune#DBCluster$AllocatedStorage */ =>  {
                let var_1 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.neptune#IntegerOptional`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_allocated_storage(var_1);
            }
            ,
            s if s.matches("AvailabilityZones") /* AvailabilityZones com.amazonaws.neptune#DBCluster$AvailabilityZones */ =>  {
                let var_2 =
                    Some(
                        crate::protocol_serde::shape_availability_zones::de_availability_zones(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_availability_zones(var_2);
            }
            ,
            s if s.matches("BackupRetentionPeriod") /* BackupRetentionPeriod com.amazonaws.neptune#DBCluster$BackupRetentionPeriod */ =>  {
                let var_3 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.neptune#IntegerOptional`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_backup_retention_period(var_3);
            }
            ,
            s if s.matches("CharacterSetName") /* CharacterSetName com.amazonaws.neptune#DBCluster$CharacterSetName */ =>  {
                let var_4 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_character_set_name(var_4);
            }
            ,
            s if s.matches("DatabaseName") /* DatabaseName com.amazonaws.neptune#DBCluster$DatabaseName */ =>  {
                let var_5 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_database_name(var_5);
            }
            ,
            s if s.matches("DBClusterIdentifier") /* DBClusterIdentifier com.amazonaws.neptune#DBCluster$DBClusterIdentifier */ =>  {
                let var_6 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_cluster_identifier(var_6);
            }
            ,
            s if s.matches("DBClusterParameterGroup") /* DBClusterParameterGroup com.amazonaws.neptune#DBCluster$DBClusterParameterGroup */ =>  {
                let var_7 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_cluster_parameter_group(var_7);
            }
            ,
            s if s.matches("DBSubnetGroup") /* DBSubnetGroup com.amazonaws.neptune#DBCluster$DBSubnetGroup */ =>  {
                let var_8 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_subnet_group(var_8);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.neptune#DBCluster$Status */ =>  {
                let var_9 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_9);
            }
            ,
            s if s.matches("PercentProgress") /* PercentProgress com.amazonaws.neptune#DBCluster$PercentProgress */ =>  {
                let var_10 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_percent_progress(var_10);
            }
            ,
            s if s.matches("EarliestRestorableTime") /* EarliestRestorableTime com.amazonaws.neptune#DBCluster$EarliestRestorableTime */ =>  {
                let var_11 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.neptune#TStamp`)"))
                        ?
                    )
                ;
                builder = builder.set_earliest_restorable_time(var_11);
            }
            ,
            s if s.matches("Endpoint") /* Endpoint com.amazonaws.neptune#DBCluster$Endpoint */ =>  {
                let var_12 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_endpoint(var_12);
            }
            ,
            s if s.matches("ReaderEndpoint") /* ReaderEndpoint com.amazonaws.neptune#DBCluster$ReaderEndpoint */ =>  {
                let var_13 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_reader_endpoint(var_13);
            }
            ,
            s if s.matches("MultiAZ") /* MultiAZ com.amazonaws.neptune#DBCluster$MultiAZ */ =>  {
                let var_14 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.neptune#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_multi_az(var_14);
            }
            ,
            s if s.matches("Engine") /* Engine com.amazonaws.neptune#DBCluster$Engine */ =>  {
                let var_15 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_engine(var_15);
            }
            ,
            s if s.matches("EngineVersion") /* EngineVersion com.amazonaws.neptune#DBCluster$EngineVersion */ =>  {
                let var_16 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_engine_version(var_16);
            }
            ,
            s if s.matches("LatestRestorableTime") /* LatestRestorableTime com.amazonaws.neptune#DBCluster$LatestRestorableTime */ =>  {
                let var_17 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.neptune#TStamp`)"))
                        ?
                    )
                ;
                builder = builder.set_latest_restorable_time(var_17);
            }
            ,
            s if s.matches("Port") /* Port com.amazonaws.neptune#DBCluster$Port */ =>  {
                let var_18 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.neptune#IntegerOptional`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_port(var_18);
            }
            ,
            s if s.matches("MasterUsername") /* MasterUsername com.amazonaws.neptune#DBCluster$MasterUsername */ =>  {
                let var_19 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_master_username(var_19);
            }
            ,
            s if s.matches("DBClusterOptionGroupMemberships") /* DBClusterOptionGroupMemberships com.amazonaws.neptune#DBCluster$DBClusterOptionGroupMemberships */ =>  {
                let var_20 =
                    Some(
                        crate::protocol_serde::shape_db_cluster_option_group_memberships::de_db_cluster_option_group_memberships(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_db_cluster_option_group_memberships(var_20);
            }
            ,
            s if s.matches("PreferredBackupWindow") /* PreferredBackupWindow com.amazonaws.neptune#DBCluster$PreferredBackupWindow */ =>  {
                let var_21 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_preferred_backup_window(var_21);
            }
            ,
            s if s.matches("PreferredMaintenanceWindow") /* PreferredMaintenanceWindow com.amazonaws.neptune#DBCluster$PreferredMaintenanceWindow */ =>  {
                let var_22 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_preferred_maintenance_window(var_22);
            }
            ,
            s if s.matches("ReplicationSourceIdentifier") /* ReplicationSourceIdentifier com.amazonaws.neptune#DBCluster$ReplicationSourceIdentifier */ =>  {
                let var_23 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_replication_source_identifier(var_23);
            }
            ,
            s if s.matches("ReadReplicaIdentifiers") /* ReadReplicaIdentifiers com.amazonaws.neptune#DBCluster$ReadReplicaIdentifiers */ =>  {
                let var_24 =
                    Some(
                        crate::protocol_serde::shape_read_replica_identifier_list::de_read_replica_identifier_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_read_replica_identifiers(var_24);
            }
            ,
            s if s.matches("DBClusterMembers") /* DBClusterMembers com.amazonaws.neptune#DBCluster$DBClusterMembers */ =>  {
                let var_25 =
                    Some(
                        crate::protocol_serde::shape_db_cluster_member_list::de_db_cluster_member_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_db_cluster_members(var_25);
            }
            ,
            s if s.matches("VpcSecurityGroups") /* VpcSecurityGroups com.amazonaws.neptune#DBCluster$VpcSecurityGroups */ =>  {
                let var_26 =
                    Some(
                        crate::protocol_serde::shape_vpc_security_group_membership_list::de_vpc_security_group_membership_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_vpc_security_groups(var_26);
            }
            ,
            s if s.matches("HostedZoneId") /* HostedZoneId com.amazonaws.neptune#DBCluster$HostedZoneId */ =>  {
                let var_27 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_hosted_zone_id(var_27);
            }
            ,
            s if s.matches("StorageEncrypted") /* StorageEncrypted com.amazonaws.neptune#DBCluster$StorageEncrypted */ =>  {
                let var_28 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.neptune#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_storage_encrypted(var_28);
            }
            ,
            s if s.matches("KmsKeyId") /* KmsKeyId com.amazonaws.neptune#DBCluster$KmsKeyId */ =>  {
                let var_29 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_kms_key_id(var_29);
            }
            ,
            s if s.matches("DbClusterResourceId") /* DbClusterResourceId com.amazonaws.neptune#DBCluster$DbClusterResourceId */ =>  {
                let var_30 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_cluster_resource_id(var_30);
            }
            ,
            s if s.matches("DBClusterArn") /* DBClusterArn com.amazonaws.neptune#DBCluster$DBClusterArn */ =>  {
                let var_31 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_cluster_arn(var_31);
            }
            ,
            s if s.matches("AssociatedRoles") /* AssociatedRoles com.amazonaws.neptune#DBCluster$AssociatedRoles */ =>  {
                let var_32 =
                    Some(
                        crate::protocol_serde::shape_db_cluster_roles::de_db_cluster_roles(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_associated_roles(var_32);
            }
            ,
            s if s.matches("IAMDatabaseAuthenticationEnabled") /* IAMDatabaseAuthenticationEnabled com.amazonaws.neptune#DBCluster$IAMDatabaseAuthenticationEnabled */ =>  {
                let var_33 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.neptune#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_iam_database_authentication_enabled(var_33);
            }
            ,
            s if s.matches("CloneGroupId") /* CloneGroupId com.amazonaws.neptune#DBCluster$CloneGroupId */ =>  {
                let var_34 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_clone_group_id(var_34);
            }
            ,
            s if s.matches("ClusterCreateTime") /* ClusterCreateTime com.amazonaws.neptune#DBCluster$ClusterCreateTime */ =>  {
                let var_35 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.neptune#TStamp`)"))
                        ?
                    )
                ;
                builder = builder.set_cluster_create_time(var_35);
            }
            ,
            s if s.matches("CopyTagsToSnapshot") /* CopyTagsToSnapshot com.amazonaws.neptune#DBCluster$CopyTagsToSnapshot */ =>  {
                let var_36 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.neptune#BooleanOptional`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_copy_tags_to_snapshot(var_36);
            }
            ,
            s if s.matches("EnabledCloudwatchLogsExports") /* EnabledCloudwatchLogsExports com.amazonaws.neptune#DBCluster$EnabledCloudwatchLogsExports */ =>  {
                let var_37 =
                    Some(
                        crate::protocol_serde::shape_log_type_list::de_log_type_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_enabled_cloudwatch_logs_exports(var_37);
            }
            ,
            s if s.matches("DeletionProtection") /* DeletionProtection com.amazonaws.neptune#DBCluster$DeletionProtection */ =>  {
                let var_38 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.neptune#BooleanOptional`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_deletion_protection(var_38);
            }
            ,
            s if s.matches("CrossAccountClone") /* CrossAccountClone com.amazonaws.neptune#DBCluster$CrossAccountClone */ =>  {
                let var_39 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.neptune#BooleanOptional`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_cross_account_clone(var_39);
            }
            ,
            s if s.matches("AutomaticRestartTime") /* AutomaticRestartTime com.amazonaws.neptune#DBCluster$AutomaticRestartTime */ =>  {
                let var_40 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.neptune#TStamp`)"))
                        ?
                    )
                ;
                builder = builder.set_automatic_restart_time(var_40);
            }
            ,
            s if s.matches("ServerlessV2ScalingConfiguration") /* ServerlessV2ScalingConfiguration com.amazonaws.neptune#DBCluster$ServerlessV2ScalingConfiguration */ =>  {
                let var_41 =
                    Some(
                        crate::protocol_serde::shape_serverless_v2_scaling_configuration_info::de_serverless_v2_scaling_configuration_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_serverless_v2_scaling_configuration(var_41);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
