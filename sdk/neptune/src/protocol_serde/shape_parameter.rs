// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn ser_parameter(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::types::Parameter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("ParameterName");
    if let Some(var_2) = &input.parameter_name {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("ParameterValue");
    if let Some(var_4) = &input.parameter_value {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("Description");
    if let Some(var_6) = &input.description {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("Source");
    if let Some(var_8) = &input.source {
        scope_7.string(var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("ApplyType");
    if let Some(var_10) = &input.apply_type {
        scope_9.string(var_10);
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("DataType");
    if let Some(var_12) = &input.data_type {
        scope_11.string(var_12);
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("AllowedValues");
    if let Some(var_14) = &input.allowed_values {
        scope_13.string(var_14);
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("IsModifiable");
    if input.is_modifiable {
        scope_15.boolean(input.is_modifiable);
    }
    #[allow(unused_mut)]
    let mut scope_16 = writer.prefix("MinimumEngineVersion");
    if let Some(var_17) = &input.minimum_engine_version {
        scope_16.string(var_17);
    }
    #[allow(unused_mut)]
    let mut scope_18 = writer.prefix("ApplyMethod");
    if let Some(var_19) = &input.apply_method {
        scope_18.string(var_19.as_str());
    }
    Ok(())
}

pub fn de_parameter(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::Parameter, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::Parameter::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ParameterName") /* ParameterName com.amazonaws.neptune#Parameter$ParameterName */ =>  {
                let var_20 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_parameter_name(var_20);
            }
            ,
            s if s.matches("ParameterValue") /* ParameterValue com.amazonaws.neptune#Parameter$ParameterValue */ =>  {
                let var_21 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_parameter_value(var_21);
            }
            ,
            s if s.matches("Description") /* Description com.amazonaws.neptune#Parameter$Description */ =>  {
                let var_22 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_22);
            }
            ,
            s if s.matches("Source") /* Source com.amazonaws.neptune#Parameter$Source */ =>  {
                let var_23 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_source(var_23);
            }
            ,
            s if s.matches("ApplyType") /* ApplyType com.amazonaws.neptune#Parameter$ApplyType */ =>  {
                let var_24 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_apply_type(var_24);
            }
            ,
            s if s.matches("DataType") /* DataType com.amazonaws.neptune#Parameter$DataType */ =>  {
                let var_25 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_data_type(var_25);
            }
            ,
            s if s.matches("AllowedValues") /* AllowedValues com.amazonaws.neptune#Parameter$AllowedValues */ =>  {
                let var_26 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_allowed_values(var_26);
            }
            ,
            s if s.matches("IsModifiable") /* IsModifiable com.amazonaws.neptune#Parameter$IsModifiable */ =>  {
                let var_27 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.neptune#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_is_modifiable(var_27);
            }
            ,
            s if s.matches("MinimumEngineVersion") /* MinimumEngineVersion com.amazonaws.neptune#Parameter$MinimumEngineVersion */ =>  {
                let var_28 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_minimum_engine_version(var_28);
            }
            ,
            s if s.matches("ApplyMethod") /* ApplyMethod com.amazonaws.neptune#Parameter$ApplyMethod */ =>  {
                let var_29 =
                    Some(
                        Result::<crate::types::ApplyMethod, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::ApplyMethod::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_apply_method(var_29);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
