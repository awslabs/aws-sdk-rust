// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_describe_orderable_db_instance_options_input_input(
    input: &crate::operation::describe_orderable_db_instance_options::DescribeOrderableDbInstanceOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeOrderableDBInstanceOptions",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("Engine");
    if let Some(var_2) = &input.engine {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("EngineVersion");
    if let Some(var_4) = &input.engine_version {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("DBInstanceClass");
    if let Some(var_6) = &input.db_instance_class {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("LicenseModel");
    if let Some(var_8) = &input.license_model {
        scope_7.string(var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("Vpc");
    if let Some(var_10) = &input.vpc {
        scope_9.boolean(*var_10);
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("Filters");
    if let Some(var_12) = &input.filters {
        let mut list_14 = scope_11.start_list(false, Some("Filter"));
        for item_13 in var_12 {
            #[allow(unused_mut)]
            let mut entry_15 = list_14.entry();
            crate::protocol_serde::shape_filter::ser_filter(entry_15, item_13)?;
        }
        list_14.finish();
    }
    #[allow(unused_mut)]
    let mut scope_16 = writer.prefix("MaxRecords");
    if let Some(var_17) = &input.max_records {
        scope_16.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_17).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_18 = writer.prefix("Marker");
    if let Some(var_19) = &input.marker {
        scope_18.string(var_19);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
