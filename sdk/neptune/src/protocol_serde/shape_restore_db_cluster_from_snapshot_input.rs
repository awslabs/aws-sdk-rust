// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_restore_db_cluster_from_snapshot_input_input(
    input: &crate::operation::restore_db_cluster_from_snapshot::RestoreDbClusterFromSnapshotInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "RestoreDBClusterFromSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("AvailabilityZones");
    if let Some(var_2) = &input.availability_zones {
        let mut list_4 = scope_1.start_list(false, Some("AvailabilityZone"));
        for item_3 in var_2 {
            #[allow(unused_mut)]
            let mut entry_5 = list_4.entry();
            entry_5.string(item_3);
        }
        list_4.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6 = writer.prefix("DBClusterIdentifier");
    if let Some(var_7) = &input.db_cluster_identifier {
        scope_6.string(var_7);
    }
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("SnapshotIdentifier");
    if let Some(var_9) = &input.snapshot_identifier {
        scope_8.string(var_9);
    }
    #[allow(unused_mut)]
    let mut scope_10 = writer.prefix("Engine");
    if let Some(var_11) = &input.engine {
        scope_10.string(var_11);
    }
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("EngineVersion");
    if let Some(var_13) = &input.engine_version {
        scope_12.string(var_13);
    }
    #[allow(unused_mut)]
    let mut scope_14 = writer.prefix("Port");
    if let Some(var_15) = &input.port {
        scope_14.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_15).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_16 = writer.prefix("DBSubnetGroupName");
    if let Some(var_17) = &input.db_subnet_group_name {
        scope_16.string(var_17);
    }
    #[allow(unused_mut)]
    let mut scope_18 = writer.prefix("DatabaseName");
    if let Some(var_19) = &input.database_name {
        scope_18.string(var_19);
    }
    #[allow(unused_mut)]
    let mut scope_20 = writer.prefix("OptionGroupName");
    if let Some(var_21) = &input.option_group_name {
        scope_20.string(var_21);
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_23) = &input.vpc_security_group_ids {
        let mut list_25 = scope_22.start_list(false, Some("VpcSecurityGroupId"));
        for item_24 in var_23 {
            #[allow(unused_mut)]
            let mut entry_26 = list_25.entry();
            entry_26.string(item_24);
        }
        list_25.finish();
    }
    #[allow(unused_mut)]
    let mut scope_27 = writer.prefix("Tags");
    if let Some(var_28) = &input.tags {
        let mut list_30 = scope_27.start_list(false, Some("Tag"));
        for item_29 in var_28 {
            #[allow(unused_mut)]
            let mut entry_31 = list_30.entry();
            crate::protocol_serde::shape_tag::ser_tag(entry_31, item_29)?;
        }
        list_30.finish();
    }
    #[allow(unused_mut)]
    let mut scope_32 = writer.prefix("KmsKeyId");
    if let Some(var_33) = &input.kms_key_id {
        scope_32.string(var_33);
    }
    #[allow(unused_mut)]
    let mut scope_34 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_35) = &input.enable_iam_database_authentication {
        scope_34.boolean(*var_35);
    }
    #[allow(unused_mut)]
    let mut scope_36 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_37) = &input.enable_cloudwatch_logs_exports {
        let mut list_39 = scope_36.start_list(false, None);
        for item_38 in var_37 {
            #[allow(unused_mut)]
            let mut entry_40 = list_39.entry();
            entry_40.string(item_38);
        }
        list_39.finish();
    }
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_42) = &input.db_cluster_parameter_group_name {
        scope_41.string(var_42);
    }
    #[allow(unused_mut)]
    let mut scope_43 = writer.prefix("DeletionProtection");
    if let Some(var_44) = &input.deletion_protection {
        scope_43.boolean(*var_44);
    }
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_46) = &input.copy_tags_to_snapshot {
        scope_45.boolean(*var_46);
    }
    #[allow(unused_mut)]
    let mut scope_47 = writer.prefix("ServerlessV2ScalingConfiguration");
    if let Some(var_48) = &input.serverless_v2_scaling_configuration {
        crate::protocol_serde::shape_serverless_v2_scaling_configuration::ser_serverless_v2_scaling_configuration(scope_47, var_48)?;
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
