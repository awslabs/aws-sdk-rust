// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateDBInstance`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`db_name(impl Into<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::db_name) / [`set_db_name(Option<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_db_name): <p>Not supported.</p>
    ///   - [`db_instance_identifier(impl Into<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::db_instance_identifier) / [`set_db_instance_identifier(Option<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_db_instance_identifier): <p>The DB instance identifier. This parameter is stored as a lowercase string.</p>  <p>Constraints:</p>  <ul>   <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li>   <li> <p>First character must be a letter.</p> </li>   <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li>  </ul>  <p>Example: <code>mydbinstance</code> </p>
    ///   - [`allocated_storage(i32)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::allocated_storage) / [`set_allocated_storage(Option<i32>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_allocated_storage): <p>Not supported by Neptune.</p>
    ///   - [`db_instance_class(impl Into<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::db_instance_class) / [`set_db_instance_class(Option<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_db_instance_class): <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all Amazon Regions.</p>
    ///   - [`engine(impl Into<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::engine) / [`set_engine(Option<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_engine): <p>The name of the database engine to be used for this instance.</p>  <p>Valid Values: <code>neptune</code> </p>
    ///   - [`master_username(impl Into<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::master_username) / [`set_master_username(Option<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_master_username): <p>Not supported by Neptune.</p>
    ///   - [`master_user_password(impl Into<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::master_user_password) / [`set_master_user_password(Option<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_master_user_password): <p>Not supported by Neptune.</p>
    ///   - [`db_security_groups(Vec<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::db_security_groups) / [`set_db_security_groups(Option<Vec<String>>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_db_security_groups): <p>A list of DB security groups to associate with this DB instance.</p>  <p>Default: The default DB security group for the database engine.</p>
    ///   - [`vpc_security_group_ids(Vec<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::vpc_security_group_ids) / [`set_vpc_security_group_ids(Option<Vec<String>>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_vpc_security_group_ids): <p>A list of EC2 VPC security groups to associate with this DB instance.</p>  <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>  <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
    ///   - [`availability_zone(impl Into<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::availability_zone) / [`set_availability_zone(Option<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_availability_zone): <p> The EC2 Availability Zone that the DB instance is created in</p>  <p>Default: A random, system-chosen Availability Zone in the endpoint's Amazon Region.</p>  <p> Example: <code>us-east-1d</code> </p>  <p> Constraint: The AvailabilityZone parameter can't be specified if the MultiAZ parameter is set to <code>true</code>. The specified Availability Zone must be in the same Amazon Region as the current endpoint.</p>
    ///   - [`db_subnet_group_name(impl Into<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::db_subnet_group_name) / [`set_db_subnet_group_name(Option<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_db_subnet_group_name): <p>A DB subnet group to associate with this DB instance.</p>  <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
    ///   - [`preferred_maintenance_window(impl Into<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::preferred_maintenance_window) / [`set_preferred_maintenance_window(Option<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_preferred_maintenance_window): <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>  <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p>  <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Region, occurring on a random day of the week.</p>  <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p>  <p>Constraints: Minimum 30-minute window.</p>
    ///   - [`db_parameter_group_name(impl Into<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::db_parameter_group_name) / [`set_db_parameter_group_name(Option<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_db_parameter_group_name): <p>The name of the DB parameter group to associate with this DB instance. If this argument is omitted, the default DBParameterGroup for the specified engine is used.</p>  <p>Constraints:</p>  <ul>   <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li>   <li> <p>First character must be a letter</p> </li>   <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li>  </ul>
    ///   - [`backup_retention_period(i32)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::backup_retention_period) / [`set_backup_retention_period(Option<i32>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_backup_retention_period): <p>The number of days for which automated backups are retained.</p>  <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>  <p>Default: 1</p>  <p>Constraints:</p>  <ul>   <li> <p>Must be a value from 0 to 35</p> </li>   <li> <p>Cannot be set to 0 if the DB instance is a source to Read Replicas</p> </li>  </ul>
    ///   - [`preferred_backup_window(impl Into<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::preferred_backup_window) / [`set_preferred_backup_window(Option<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_preferred_backup_window): <p> The daily time range during which automated backups are created.</p>  <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
    ///   - [`port(i32)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::port) / [`set_port(Option<i32>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_port): <p>The port number on which the database accepts connections.</p>  <p>Not applicable. The port is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>  <p> Default: <code>8182</code> </p>  <p>Type: Integer</p>
    ///   - [`multi_az(bool)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::multi_az) / [`set_multi_az(Option<bool>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_multi_az): <p>Specifies if the DB instance is a Multi-AZ deployment. You can't set the AvailabilityZone parameter if the MultiAZ parameter is set to true.</p>
    ///   - [`engine_version(impl Into<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::engine_version) / [`set_engine_version(Option<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_engine_version): <p>The version number of the database engine to use. Currently, setting this parameter has no effect.</p>
    ///   - [`auto_minor_version_upgrade(bool)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::auto_minor_version_upgrade) / [`set_auto_minor_version_upgrade(Option<bool>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_auto_minor_version_upgrade): <p>Indicates that minor engine upgrades are applied automatically to the DB instance during the maintenance window.</p>  <p>Default: <code>true</code> </p>
    ///   - [`license_model(impl Into<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::license_model) / [`set_license_model(Option<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_license_model): <p>License model information for this DB instance.</p>  <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
    ///   - [`iops(i32)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::iops) / [`set_iops(Option<i32>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_iops): <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p>
    ///   - [`option_group_name(impl Into<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::option_group_name) / [`set_option_group_name(Option<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_option_group_name): <p> <i>(Not supported by Neptune)</i> </p>
    ///   - [`character_set_name(impl Into<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::character_set_name) / [`set_character_set_name(Option<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_character_set_name): <p> <i>(Not supported by Neptune)</i> </p>
    ///   - [`publicly_accessible(bool)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::publicly_accessible) / [`set_publicly_accessible(Option<bool>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_publicly_accessible): <p>This flag should no longer be used.</p>
    ///   - [`tags(Vec<Tag>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_tags): <p>The tags to assign to the new instance.</p>
    ///   - [`db_cluster_identifier(impl Into<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::db_cluster_identifier) / [`set_db_cluster_identifier(Option<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_db_cluster_identifier): <p>The identifier of the DB cluster that the instance will belong to.</p>  <p>For information on creating a DB cluster, see <code>CreateDBCluster</code>.</p>  <p>Type: String</p>
    ///   - [`storage_type(impl Into<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::storage_type) / [`set_storage_type(Option<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_storage_type): <p>Specifies the storage type to be associated with the DB instance.</p>  <p>Not applicable. Storage is managed by the DB Cluster.</p>
    ///   - [`tde_credential_arn(impl Into<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::tde_credential_arn) / [`set_tde_credential_arn(Option<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_tde_credential_arn): <p>The ARN from the key store with which to associate the instance for TDE encryption.</p>
    ///   - [`tde_credential_password(impl Into<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::tde_credential_password) / [`set_tde_credential_password(Option<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_tde_credential_password): <p>The password for the given ARN from the key store in order to access the device.</p>
    ///   - [`storage_encrypted(bool)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::storage_encrypted) / [`set_storage_encrypted(Option<bool>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_storage_encrypted): <p>Specifies whether the DB instance is encrypted.</p>  <p>Not applicable. The encryption for DB instances is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>  <p>Default: false</p>
    ///   - [`kms_key_id(impl Into<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::kms_key_id) / [`set_kms_key_id(Option<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_kms_key_id): <p>The Amazon KMS key identifier for an encrypted DB instance.</p>  <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same Amazon account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p>  <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>  <p>If the <code>StorageEncrypted</code> parameter is true, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon Neptune will use your default encryption key. Amazon KMS creates the default encryption key for your Amazon account. Your Amazon account has a different default encryption key for each Amazon Region.</p>
    ///   - [`domain(impl Into<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::domain) / [`set_domain(Option<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_domain): <p>Specify the Active Directory Domain to create the instance in.</p>
    ///   - [`copy_tags_to_snapshot(bool)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::copy_tags_to_snapshot) / [`set_copy_tags_to_snapshot(Option<bool>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_copy_tags_to_snapshot): <p>True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.</p>
    ///   - [`monitoring_interval(i32)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::monitoring_interval) / [`set_monitoring_interval(Option<i32>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_monitoring_interval): <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p>  <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p>  <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
    ///   - [`monitoring_role_arn(impl Into<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::monitoring_role_arn) / [`set_monitoring_role_arn(Option<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_monitoring_role_arn): <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p>  <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
    ///   - [`domain_iam_role_name(impl Into<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::domain_iam_role_name) / [`set_domain_iam_role_name(Option<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_domain_iam_role_name): <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
    ///   - [`promotion_tier(i32)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::promotion_tier) / [`set_promotion_tier(Option<i32>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_promotion_tier): <p>A value that specifies the order in which an Read Replica is promoted to the primary instance after a failure of the existing primary instance. </p>  <p>Default: 1</p>  <p>Valid Values: 0 - 15</p>
    ///   - [`timezone(impl Into<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::timezone) / [`set_timezone(Option<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_timezone): <p>The time zone of the DB instance.</p>
    ///   - [`enable_iam_database_authentication(bool)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::enable_iam_database_authentication) / [`set_enable_iam_database_authentication(Option<bool>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_enable_iam_database_authentication): <p>Not supported by Neptune (ignored).</p>
    ///   - [`enable_performance_insights(bool)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::enable_performance_insights) / [`set_enable_performance_insights(Option<bool>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_enable_performance_insights): <p> <i>(Not supported by Neptune)</i> </p>
    ///   - [`performance_insights_kms_key_id(impl Into<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::performance_insights_kms_key_id) / [`set_performance_insights_kms_key_id(Option<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_performance_insights_kms_key_id): <p> <i>(Not supported by Neptune)</i> </p>
    ///   - [`enable_cloudwatch_logs_exports(Vec<String>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::enable_cloudwatch_logs_exports) / [`set_enable_cloudwatch_logs_exports(Option<Vec<String>>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_enable_cloudwatch_logs_exports): <p>The list of log types that need to be enabled for exporting to CloudWatch Logs.</p>
    ///   - [`deletion_protection(bool)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::deletion_protection) / [`set_deletion_protection(Option<bool>)`](crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::set_deletion_protection): <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. See <a href="https://docs.aws.amazon.com/neptune/latest/userguide/manage-console-instances-delete.html">Deleting a DB Instance</a>.</p>  <p>DB instances in a DB cluster can be deleted even when deletion protection is enabled in their parent DB cluster.</p>
    /// - On success, responds with [`CreateDbInstanceOutput`](crate::operation::create_db_instance::CreateDbInstanceOutput) with field(s):
    ///   - [`db_instance(Option<DbInstance>)`](crate::operation::create_db_instance::CreateDbInstanceOutput::db_instance): <p>Contains the details of an Amazon Neptune DB instance.</p>  <p>This data type is used as a response element in the <code>DescribeDBInstances</code> action.</p>
    /// - On failure, responds with [`SdkError<CreateDBInstanceError>`](crate::operation::create_db_instance::CreateDBInstanceError)
    pub fn create_db_instance(
        &self,
    ) -> crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder {
        crate::operation::create_db_instance::builders::CreateDBInstanceFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
