// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DescribeDBInstances`](crate::operation::describe_db_instances::builders::DescribeDBInstancesFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::describe_db_instances::builders::DescribeDBInstancesFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`db_instance_identifier(impl Into<String>)`](crate::operation::describe_db_instances::builders::DescribeDBInstancesFluentBuilder::db_instance_identifier) / [`set_db_instance_identifier(Option<String>)`](crate::operation::describe_db_instances::builders::DescribeDBInstancesFluentBuilder::set_db_instance_identifier):<br>required: **false**<br><p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p>  <p>Constraints:</p>  <ul>   <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li>  </ul><br>
    ///   - [`filters(Filter)`](crate::operation::describe_db_instances::builders::DescribeDBInstancesFluentBuilder::filters) / [`set_filters(Option<Vec::<Filter>>)`](crate::operation::describe_db_instances::builders::DescribeDBInstancesFluentBuilder::set_filters):<br>required: **false**<br><p>A filter that specifies one or more DB instances to describe.</p>  <p>Supported filters:</p>  <ul>   <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li>   <li> <p> <code>engine</code> - Accepts an engine name (such as <code>neptune</code>), and restricts the results list to DB instances created by that engine.</p> </li>  </ul>  <p>For example, to invoke this API from the Amazon CLI and filter so that only Neptune DB instances are returned, you could use the following command:</p><br>
    ///   - [`max_records(i32)`](crate::operation::describe_db_instances::builders::DescribeDBInstancesFluentBuilder::max_records) / [`set_max_records(Option<i32>)`](crate::operation::describe_db_instances::builders::DescribeDBInstancesFluentBuilder::set_max_records):<br>required: **false**<br><p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p>  <p>Default: 100</p>  <p>Constraints: Minimum 20, maximum 100.</p><br>
    ///   - [`marker(impl Into<String>)`](crate::operation::describe_db_instances::builders::DescribeDBInstancesFluentBuilder::marker) / [`set_marker(Option<String>)`](crate::operation::describe_db_instances::builders::DescribeDBInstancesFluentBuilder::set_marker):<br>required: **false**<br><p> An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p><br>
    /// - On success, responds with [`DescribeDbInstancesOutput`](crate::operation::describe_db_instances::DescribeDbInstancesOutput) with field(s):
    ///   - [`marker(Option<String>)`](crate::operation::describe_db_instances::DescribeDbInstancesOutput::marker): <p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .</p>
    ///   - [`db_instances(Option<Vec::<DbInstance>>)`](crate::operation::describe_db_instances::DescribeDbInstancesOutput::db_instances): <p> A list of <code>DBInstance</code> instances.</p>
    /// - On failure, responds with [`SdkError<DescribeDBInstancesError>`](crate::operation::describe_db_instances::DescribeDBInstancesError)
    pub fn describe_db_instances(&self) -> crate::operation::describe_db_instances::builders::DescribeDBInstancesFluentBuilder {
        crate::operation::describe_db_instances::builders::DescribeDBInstancesFluentBuilder::new(self.handle.clone())
    }
}
