// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_cancel_resource_request_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelResourceRequestInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.request_token {
        object.key("RequestToken").string(var_1);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2) = &input.type_name {
        object.key("TypeName").string(var_2);
    }
    if let Some(var_3) = &input.type_version_id {
        object.key("TypeVersionId").string(var_3);
    }
    if let Some(var_4) = &input.role_arn {
        object.key("RoleArn").string(var_4);
    }
    if let Some(var_5) = &input.client_token {
        object.key("ClientToken").string(var_5);
    }
    if let Some(var_6) = &input.desired_state {
        object.key("DesiredState").string(var_6);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_7) = &input.type_name {
        object.key("TypeName").string(var_7);
    }
    if let Some(var_8) = &input.type_version_id {
        object.key("TypeVersionId").string(var_8);
    }
    if let Some(var_9) = &input.role_arn {
        object.key("RoleArn").string(var_9);
    }
    if let Some(var_10) = &input.client_token {
        object.key("ClientToken").string(var_10);
    }
    if let Some(var_11) = &input.identifier {
        object.key("Identifier").string(var_11);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_12) = &input.type_name {
        object.key("TypeName").string(var_12);
    }
    if let Some(var_13) = &input.type_version_id {
        object.key("TypeVersionId").string(var_13);
    }
    if let Some(var_14) = &input.role_arn {
        object.key("RoleArn").string(var_14);
    }
    if let Some(var_15) = &input.identifier {
        object.key("Identifier").string(var_15);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_resource_request_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetResourceRequestStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_16) = &input.request_token {
        object.key("RequestToken").string(var_16);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_resource_requests_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListResourceRequestsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_17) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_17).into()),
        );
    }
    if let Some(var_18) = &input.next_token {
        object.key("NextToken").string(var_18);
    }
    if let Some(var_19) = &input.resource_request_status_filter {
        let mut object_20 = object.key("ResourceRequestStatusFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_request_status_filter(
            &mut object_20,
            var_19,
        )?;
        object_20.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_resources_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListResourcesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_21) = &input.type_name {
        object.key("TypeName").string(var_21);
    }
    if let Some(var_22) = &input.type_version_id {
        object.key("TypeVersionId").string(var_22);
    }
    if let Some(var_23) = &input.role_arn {
        object.key("RoleArn").string(var_23);
    }
    if let Some(var_24) = &input.next_token {
        object.key("NextToken").string(var_24);
    }
    if let Some(var_25) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_25).into()),
        );
    }
    if let Some(var_26) = &input.resource_model {
        object.key("ResourceModel").string(var_26);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_27) = &input.type_name {
        object.key("TypeName").string(var_27);
    }
    if let Some(var_28) = &input.type_version_id {
        object.key("TypeVersionId").string(var_28);
    }
    if let Some(var_29) = &input.role_arn {
        object.key("RoleArn").string(var_29);
    }
    if let Some(var_30) = &input.client_token {
        object.key("ClientToken").string(var_30);
    }
    if let Some(var_31) = &input.identifier {
        object.key("Identifier").string(var_31);
    }
    if let Some(var_32) = &input.patch_document {
        object.key("PatchDocument").string(var_32);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_request_status_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceRequestStatusFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_33) = &input.operations {
        let mut array_34 = object.key("Operations").start_array();
        for item_35 in var_33 {
            {
                array_34.value().string(item_35.as_str());
            }
        }
        array_34.finish();
    }
    if let Some(var_36) = &input.operation_statuses {
        let mut array_37 = object.key("OperationStatuses").start_array();
        for item_38 in var_36 {
            {
                array_37.value().string(item_38.as_str());
            }
        }
        array_37.finish();
    }
    Ok(())
}
