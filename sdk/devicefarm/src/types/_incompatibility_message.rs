// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents information about incompatibility.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct IncompatibilityMessage {
    /// <p>A message about the incompatibility.</p>
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
    /// <p>The type of incompatibility.</p>
    /// <p>Allowed values include:</p>
    /// <ul>
    /// <li> <p>ARN</p> </li>
    /// <li> <p>FORM_FACTOR (for example, phone or tablet)</p> </li>
    /// <li> <p>MANUFACTURER</p> </li>
    /// <li> <p>PLATFORM (for example, Android or iOS)</p> </li>
    /// <li> <p>REMOTE_ACCESS_ENABLED</p> </li>
    /// <li> <p>APPIUM_VERSION</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::DeviceAttribute>,
}
impl IncompatibilityMessage {
    /// <p>A message about the incompatibility.</p>
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>The type of incompatibility.</p>
    /// <p>Allowed values include:</p>
    /// <ul>
    /// <li> <p>ARN</p> </li>
    /// <li> <p>FORM_FACTOR (for example, phone or tablet)</p> </li>
    /// <li> <p>MANUFACTURER</p> </li>
    /// <li> <p>PLATFORM (for example, Android or iOS)</p> </li>
    /// <li> <p>REMOTE_ACCESS_ENABLED</p> </li>
    /// <li> <p>APPIUM_VERSION</p> </li>
    /// </ul>
    pub fn r#type(&self) -> std::option::Option<&crate::types::DeviceAttribute> {
        self.r#type.as_ref()
    }
}
impl IncompatibilityMessage {
    /// Creates a new builder-style object to manufacture [`IncompatibilityMessage`](crate::types::IncompatibilityMessage).
    pub fn builder() -> crate::types::builders::IncompatibilityMessageBuilder {
        crate::types::builders::IncompatibilityMessageBuilder::default()
    }
}

/// A builder for [`IncompatibilityMessage`](crate::types::IncompatibilityMessage).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct IncompatibilityMessageBuilder {
    pub(crate) message: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::DeviceAttribute>,
}
impl IncompatibilityMessageBuilder {
    /// <p>A message about the incompatibility.</p>
    pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
        self.message = Some(input.into());
        self
    }
    /// <p>A message about the incompatibility.</p>
    pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>The type of incompatibility.</p>
    /// <p>Allowed values include:</p>
    /// <ul>
    /// <li> <p>ARN</p> </li>
    /// <li> <p>FORM_FACTOR (for example, phone or tablet)</p> </li>
    /// <li> <p>MANUFACTURER</p> </li>
    /// <li> <p>PLATFORM (for example, Android or iOS)</p> </li>
    /// <li> <p>REMOTE_ACCESS_ENABLED</p> </li>
    /// <li> <p>APPIUM_VERSION</p> </li>
    /// </ul>
    pub fn r#type(mut self, input: crate::types::DeviceAttribute) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of incompatibility.</p>
    /// <p>Allowed values include:</p>
    /// <ul>
    /// <li> <p>ARN</p> </li>
    /// <li> <p>FORM_FACTOR (for example, phone or tablet)</p> </li>
    /// <li> <p>MANUFACTURER</p> </li>
    /// <li> <p>PLATFORM (for example, Android or iOS)</p> </li>
    /// <li> <p>REMOTE_ACCESS_ENABLED</p> </li>
    /// <li> <p>APPIUM_VERSION</p> </li>
    /// </ul>
    pub fn set_type(mut self, input: std::option::Option<crate::types::DeviceAttribute>) -> Self {
        self.r#type = input;
        self
    }
    /// Consumes the builder and constructs a [`IncompatibilityMessage`](crate::types::IncompatibilityMessage).
    pub fn build(self) -> crate::types::IncompatibilityMessage {
        crate::types::IncompatibilityMessage {
            message: self.message,
            r#type: self.r#type,
        }
    }
}
