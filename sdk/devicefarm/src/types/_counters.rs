// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents entity counters.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Counters {
    /// <p>The total number of entities.</p>
    #[doc(hidden)]
    pub total: std::option::Option<i32>,
    /// <p>The number of passed entities.</p>
    #[doc(hidden)]
    pub passed: std::option::Option<i32>,
    /// <p>The number of failed entities.</p>
    #[doc(hidden)]
    pub failed: std::option::Option<i32>,
    /// <p>The number of warned entities.</p>
    #[doc(hidden)]
    pub warned: std::option::Option<i32>,
    /// <p>The number of errored entities.</p>
    #[doc(hidden)]
    pub errored: std::option::Option<i32>,
    /// <p>The number of stopped entities.</p>
    #[doc(hidden)]
    pub stopped: std::option::Option<i32>,
    /// <p>The number of skipped entities.</p>
    #[doc(hidden)]
    pub skipped: std::option::Option<i32>,
}
impl Counters {
    /// <p>The total number of entities.</p>
    pub fn total(&self) -> std::option::Option<i32> {
        self.total
    }
    /// <p>The number of passed entities.</p>
    pub fn passed(&self) -> std::option::Option<i32> {
        self.passed
    }
    /// <p>The number of failed entities.</p>
    pub fn failed(&self) -> std::option::Option<i32> {
        self.failed
    }
    /// <p>The number of warned entities.</p>
    pub fn warned(&self) -> std::option::Option<i32> {
        self.warned
    }
    /// <p>The number of errored entities.</p>
    pub fn errored(&self) -> std::option::Option<i32> {
        self.errored
    }
    /// <p>The number of stopped entities.</p>
    pub fn stopped(&self) -> std::option::Option<i32> {
        self.stopped
    }
    /// <p>The number of skipped entities.</p>
    pub fn skipped(&self) -> std::option::Option<i32> {
        self.skipped
    }
}
impl Counters {
    /// Creates a new builder-style object to manufacture [`Counters`](crate::types::Counters).
    pub fn builder() -> crate::types::builders::CountersBuilder {
        crate::types::builders::CountersBuilder::default()
    }
}

/// A builder for [`Counters`](crate::types::Counters).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CountersBuilder {
    pub(crate) total: std::option::Option<i32>,
    pub(crate) passed: std::option::Option<i32>,
    pub(crate) failed: std::option::Option<i32>,
    pub(crate) warned: std::option::Option<i32>,
    pub(crate) errored: std::option::Option<i32>,
    pub(crate) stopped: std::option::Option<i32>,
    pub(crate) skipped: std::option::Option<i32>,
}
impl CountersBuilder {
    /// <p>The total number of entities.</p>
    pub fn total(mut self, input: i32) -> Self {
        self.total = Some(input);
        self
    }
    /// <p>The total number of entities.</p>
    pub fn set_total(mut self, input: std::option::Option<i32>) -> Self {
        self.total = input;
        self
    }
    /// <p>The number of passed entities.</p>
    pub fn passed(mut self, input: i32) -> Self {
        self.passed = Some(input);
        self
    }
    /// <p>The number of passed entities.</p>
    pub fn set_passed(mut self, input: std::option::Option<i32>) -> Self {
        self.passed = input;
        self
    }
    /// <p>The number of failed entities.</p>
    pub fn failed(mut self, input: i32) -> Self {
        self.failed = Some(input);
        self
    }
    /// <p>The number of failed entities.</p>
    pub fn set_failed(mut self, input: std::option::Option<i32>) -> Self {
        self.failed = input;
        self
    }
    /// <p>The number of warned entities.</p>
    pub fn warned(mut self, input: i32) -> Self {
        self.warned = Some(input);
        self
    }
    /// <p>The number of warned entities.</p>
    pub fn set_warned(mut self, input: std::option::Option<i32>) -> Self {
        self.warned = input;
        self
    }
    /// <p>The number of errored entities.</p>
    pub fn errored(mut self, input: i32) -> Self {
        self.errored = Some(input);
        self
    }
    /// <p>The number of errored entities.</p>
    pub fn set_errored(mut self, input: std::option::Option<i32>) -> Self {
        self.errored = input;
        self
    }
    /// <p>The number of stopped entities.</p>
    pub fn stopped(mut self, input: i32) -> Self {
        self.stopped = Some(input);
        self
    }
    /// <p>The number of stopped entities.</p>
    pub fn set_stopped(mut self, input: std::option::Option<i32>) -> Self {
        self.stopped = input;
        self
    }
    /// <p>The number of skipped entities.</p>
    pub fn skipped(mut self, input: i32) -> Self {
        self.skipped = Some(input);
        self
    }
    /// <p>The number of skipped entities.</p>
    pub fn set_skipped(mut self, input: std::option::Option<i32>) -> Self {
        self.skipped = input;
        self
    }
    /// Consumes the builder and constructs a [`Counters`](crate::types::Counters).
    pub fn build(self) -> crate::types::Counters {
        crate::types::Counters {
            total: self.total,
            passed: self.passed,
            failed: self.failed,
            warned: self.warned,
            errored: self.errored,
            stopped: self.stopped,
            skipped: self.skipped,
        }
    }
}
