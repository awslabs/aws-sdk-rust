// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the metadata of an offering transaction.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct OfferingTransaction {
    /// <p>The status of an offering transaction.</p>
    #[doc(hidden)]
    pub offering_status: std::option::Option<crate::types::OfferingStatus>,
    /// <p>The transaction ID of the offering transaction.</p>
    #[doc(hidden)]
    pub transaction_id: std::option::Option<std::string::String>,
    /// <p>The ID that corresponds to a device offering promotion.</p>
    #[doc(hidden)]
    pub offering_promotion_id: std::option::Option<std::string::String>,
    /// <p>The date on which an offering transaction was created.</p>
    #[doc(hidden)]
    pub created_on: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The cost of an offering transaction.</p>
    #[doc(hidden)]
    pub cost: std::option::Option<crate::types::MonetaryAmount>,
}
impl OfferingTransaction {
    /// <p>The status of an offering transaction.</p>
    pub fn offering_status(&self) -> std::option::Option<&crate::types::OfferingStatus> {
        self.offering_status.as_ref()
    }
    /// <p>The transaction ID of the offering transaction.</p>
    pub fn transaction_id(&self) -> std::option::Option<&str> {
        self.transaction_id.as_deref()
    }
    /// <p>The ID that corresponds to a device offering promotion.</p>
    pub fn offering_promotion_id(&self) -> std::option::Option<&str> {
        self.offering_promotion_id.as_deref()
    }
    /// <p>The date on which an offering transaction was created.</p>
    pub fn created_on(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_on.as_ref()
    }
    /// <p>The cost of an offering transaction.</p>
    pub fn cost(&self) -> std::option::Option<&crate::types::MonetaryAmount> {
        self.cost.as_ref()
    }
}
impl OfferingTransaction {
    /// Creates a new builder-style object to manufacture [`OfferingTransaction`](crate::types::OfferingTransaction).
    pub fn builder() -> crate::types::builders::OfferingTransactionBuilder {
        crate::types::builders::OfferingTransactionBuilder::default()
    }
}

/// A builder for [`OfferingTransaction`](crate::types::OfferingTransaction).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct OfferingTransactionBuilder {
    pub(crate) offering_status: std::option::Option<crate::types::OfferingStatus>,
    pub(crate) transaction_id: std::option::Option<std::string::String>,
    pub(crate) offering_promotion_id: std::option::Option<std::string::String>,
    pub(crate) created_on: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) cost: std::option::Option<crate::types::MonetaryAmount>,
}
impl OfferingTransactionBuilder {
    /// <p>The status of an offering transaction.</p>
    pub fn offering_status(mut self, input: crate::types::OfferingStatus) -> Self {
        self.offering_status = Some(input);
        self
    }
    /// <p>The status of an offering transaction.</p>
    pub fn set_offering_status(
        mut self,
        input: std::option::Option<crate::types::OfferingStatus>,
    ) -> Self {
        self.offering_status = input;
        self
    }
    /// <p>The transaction ID of the offering transaction.</p>
    pub fn transaction_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.transaction_id = Some(input.into());
        self
    }
    /// <p>The transaction ID of the offering transaction.</p>
    pub fn set_transaction_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.transaction_id = input;
        self
    }
    /// <p>The ID that corresponds to a device offering promotion.</p>
    pub fn offering_promotion_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.offering_promotion_id = Some(input.into());
        self
    }
    /// <p>The ID that corresponds to a device offering promotion.</p>
    pub fn set_offering_promotion_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.offering_promotion_id = input;
        self
    }
    /// <p>The date on which an offering transaction was created.</p>
    pub fn created_on(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_on = Some(input);
        self
    }
    /// <p>The date on which an offering transaction was created.</p>
    pub fn set_created_on(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_on = input;
        self
    }
    /// <p>The cost of an offering transaction.</p>
    pub fn cost(mut self, input: crate::types::MonetaryAmount) -> Self {
        self.cost = Some(input);
        self
    }
    /// <p>The cost of an offering transaction.</p>
    pub fn set_cost(mut self, input: std::option::Option<crate::types::MonetaryAmount>) -> Self {
        self.cost = input;
        self
    }
    /// Consumes the builder and constructs a [`OfferingTransaction`](crate::types::OfferingTransaction).
    pub fn build(self) -> crate::types::OfferingTransaction {
        crate::types::OfferingTransaction {
            offering_status: self.offering_status,
            transaction_id: self.transaction_id,
            offering_promotion_id: self.offering_promotion_id,
            created_on: self.created_on,
            cost: self.cost,
        }
    }
}
