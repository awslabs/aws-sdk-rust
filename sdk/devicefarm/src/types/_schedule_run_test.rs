// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents test settings. This data structure is passed in as the test parameter to ScheduleRun. For an example of the JSON request syntax, see <code>ScheduleRun</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ScheduleRunTest {
    /// <p>The test's type.</p>
    /// <p>Must be one of the following values:</p>
    /// <ul>
    /// <li> <p>BUILTIN_FUZZ</p> </li>
    /// <li> <p>BUILTIN_EXPLORER. For Android, an app explorer that traverses an Android app, interacting with it and capturing screenshots at the same time.</p> </li>
    /// <li> <p>APPIUM_JAVA_JUNIT</p> </li>
    /// <li> <p>APPIUM_JAVA_TESTNG</p> </li>
    /// <li> <p>APPIUM_PYTHON</p> </li>
    /// <li> <p>APPIUM_NODE</p> </li>
    /// <li> <p>APPIUM_RUBY</p> </li>
    /// <li> <p>APPIUM_WEB_JAVA_JUNIT</p> </li>
    /// <li> <p>APPIUM_WEB_JAVA_TESTNG</p> </li>
    /// <li> <p>APPIUM_WEB_PYTHON</p> </li>
    /// <li> <p>APPIUM_WEB_NODE</p> </li>
    /// <li> <p>APPIUM_WEB_RUBY</p> </li>
    /// <li> <p>CALABASH</p> </li>
    /// <li> <p>INSTRUMENTATION</p> </li>
    /// <li> <p>UIAUTOMATION</p> </li>
    /// <li> <p>UIAUTOMATOR</p> </li>
    /// <li> <p>XCTEST</p> </li>
    /// <li> <p>XCTEST_UI</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::TestType>,
    /// <p>The ARN of the uploaded test to be run.</p>
    #[doc(hidden)]
    pub test_package_arn: std::option::Option<std::string::String>,
    /// <p>The ARN of the YAML-formatted test specification.</p>
    #[doc(hidden)]
    pub test_spec_arn: std::option::Option<std::string::String>,
    /// <p>The test's filter.</p>
    #[doc(hidden)]
    pub filter: std::option::Option<std::string::String>,
    /// <p>The test's parameters, such as test framework parameters and fixture settings. Parameters are represented by name-value pairs of strings.</p>
    /// <p>For all tests:</p>
    /// <ul>
    /// <li> <p> <code>app_performance_monitoring</code>: Performance monitoring is enabled by default. Set this parameter to false to disable it.</p> </li>
    /// </ul>
    /// <p>For Calabash tests:</p>
    /// <ul>
    /// <li> <p>profile: A cucumber profile (for example, <code>my_profile_name</code>).</p> </li>
    /// <li> <p>tags: You can limit execution to features or scenarios that have (or don't have) certain tags (for example, @smoke or @smoke,~@wip).</p> </li>
    /// </ul>
    /// <p>For Appium tests (all types):</p>
    /// <ul>
    /// <li> <p>appium_version: The Appium version. Currently supported values are 1.6.5 (and later), latest, and default.</p>
    /// <ul>
    /// <li> <p>latest runs the latest Appium version supported by Device Farm (1.9.1).</p> </li>
    /// <li> <p>For default, Device Farm selects a compatible version of Appium for the device. The current behavior is to run 1.7.2 on Android devices and iOS 9 and earlier and 1.7.2 for iOS 10 and later.</p> </li>
    /// <li> <p>This behavior is subject to change.</p> </li>
    /// </ul> </li>
    /// </ul>
    /// <p>For fuzz tests (Android only):</p>
    /// <ul>
    /// <li> <p>event_count: The number of events, between 1 and 10000, that the UI fuzz test should perform.</p> </li>
    /// <li> <p>throttle: The time, in ms, between 0 and 1000, that the UI fuzz test should wait between events.</p> </li>
    /// <li> <p>seed: A seed to use for randomizing the UI fuzz test. Using the same seed value between tests ensures identical event sequences.</p> </li>
    /// </ul>
    /// <p>For Explorer tests:</p>
    /// <ul>
    /// <li> <p>username: A user name to use if the Explorer encounters a login form. If not supplied, no user name is inserted.</p> </li>
    /// <li> <p>password: A password to use if the Explorer encounters a login form. If not supplied, no password is inserted.</p> </li>
    /// </ul>
    /// <p>For Instrumentation:</p>
    /// <ul>
    /// <li> <p>filter: A test filter string. Examples:</p>
    /// <ul>
    /// <li> <p>Running a single test case: <code>com.android.abc.Test1</code> </p> </li>
    /// <li> <p>Running a single test: <code>com.android.abc.Test1#smoke</code> </p> </li>
    /// <li> <p>Running multiple tests: <code>com.android.abc.Test1,com.android.abc.Test2</code> </p> </li>
    /// </ul> </li>
    /// </ul>
    /// <p>For XCTest and XCTestUI:</p>
    /// <ul>
    /// <li> <p>filter: A test filter string. Examples:</p>
    /// <ul>
    /// <li> <p>Running a single test class: <code>LoginTests</code> </p> </li>
    /// <li> <p>Running a multiple test classes: <code>LoginTests,SmokeTests</code> </p> </li>
    /// <li> <p>Running a single test: <code>LoginTests/testValid</code> </p> </li>
    /// <li> <p>Running multiple tests: <code>LoginTests/testValid,LoginTests/testInvalid</code> </p> </li>
    /// </ul> </li>
    /// </ul>
    /// <p>For UIAutomator:</p>
    /// <ul>
    /// <li> <p>filter: A test filter string. Examples:</p>
    /// <ul>
    /// <li> <p>Running a single test case: <code>com.android.abc.Test1</code> </p> </li>
    /// <li> <p>Running a single test: <code>com.android.abc.Test1#smoke</code> </p> </li>
    /// <li> <p>Running multiple tests: <code>com.android.abc.Test1,com.android.abc.Test2</code> </p> </li>
    /// </ul> </li>
    /// </ul>
    #[doc(hidden)]
    pub parameters:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl ScheduleRunTest {
    /// <p>The test's type.</p>
    /// <p>Must be one of the following values:</p>
    /// <ul>
    /// <li> <p>BUILTIN_FUZZ</p> </li>
    /// <li> <p>BUILTIN_EXPLORER. For Android, an app explorer that traverses an Android app, interacting with it and capturing screenshots at the same time.</p> </li>
    /// <li> <p>APPIUM_JAVA_JUNIT</p> </li>
    /// <li> <p>APPIUM_JAVA_TESTNG</p> </li>
    /// <li> <p>APPIUM_PYTHON</p> </li>
    /// <li> <p>APPIUM_NODE</p> </li>
    /// <li> <p>APPIUM_RUBY</p> </li>
    /// <li> <p>APPIUM_WEB_JAVA_JUNIT</p> </li>
    /// <li> <p>APPIUM_WEB_JAVA_TESTNG</p> </li>
    /// <li> <p>APPIUM_WEB_PYTHON</p> </li>
    /// <li> <p>APPIUM_WEB_NODE</p> </li>
    /// <li> <p>APPIUM_WEB_RUBY</p> </li>
    /// <li> <p>CALABASH</p> </li>
    /// <li> <p>INSTRUMENTATION</p> </li>
    /// <li> <p>UIAUTOMATION</p> </li>
    /// <li> <p>UIAUTOMATOR</p> </li>
    /// <li> <p>XCTEST</p> </li>
    /// <li> <p>XCTEST_UI</p> </li>
    /// </ul>
    pub fn r#type(&self) -> std::option::Option<&crate::types::TestType> {
        self.r#type.as_ref()
    }
    /// <p>The ARN of the uploaded test to be run.</p>
    pub fn test_package_arn(&self) -> std::option::Option<&str> {
        self.test_package_arn.as_deref()
    }
    /// <p>The ARN of the YAML-formatted test specification.</p>
    pub fn test_spec_arn(&self) -> std::option::Option<&str> {
        self.test_spec_arn.as_deref()
    }
    /// <p>The test's filter.</p>
    pub fn filter(&self) -> std::option::Option<&str> {
        self.filter.as_deref()
    }
    /// <p>The test's parameters, such as test framework parameters and fixture settings. Parameters are represented by name-value pairs of strings.</p>
    /// <p>For all tests:</p>
    /// <ul>
    /// <li> <p> <code>app_performance_monitoring</code>: Performance monitoring is enabled by default. Set this parameter to false to disable it.</p> </li>
    /// </ul>
    /// <p>For Calabash tests:</p>
    /// <ul>
    /// <li> <p>profile: A cucumber profile (for example, <code>my_profile_name</code>).</p> </li>
    /// <li> <p>tags: You can limit execution to features or scenarios that have (or don't have) certain tags (for example, @smoke or @smoke,~@wip).</p> </li>
    /// </ul>
    /// <p>For Appium tests (all types):</p>
    /// <ul>
    /// <li> <p>appium_version: The Appium version. Currently supported values are 1.6.5 (and later), latest, and default.</p>
    /// <ul>
    /// <li> <p>latest runs the latest Appium version supported by Device Farm (1.9.1).</p> </li>
    /// <li> <p>For default, Device Farm selects a compatible version of Appium for the device. The current behavior is to run 1.7.2 on Android devices and iOS 9 and earlier and 1.7.2 for iOS 10 and later.</p> </li>
    /// <li> <p>This behavior is subject to change.</p> </li>
    /// </ul> </li>
    /// </ul>
    /// <p>For fuzz tests (Android only):</p>
    /// <ul>
    /// <li> <p>event_count: The number of events, between 1 and 10000, that the UI fuzz test should perform.</p> </li>
    /// <li> <p>throttle: The time, in ms, between 0 and 1000, that the UI fuzz test should wait between events.</p> </li>
    /// <li> <p>seed: A seed to use for randomizing the UI fuzz test. Using the same seed value between tests ensures identical event sequences.</p> </li>
    /// </ul>
    /// <p>For Explorer tests:</p>
    /// <ul>
    /// <li> <p>username: A user name to use if the Explorer encounters a login form. If not supplied, no user name is inserted.</p> </li>
    /// <li> <p>password: A password to use if the Explorer encounters a login form. If not supplied, no password is inserted.</p> </li>
    /// </ul>
    /// <p>For Instrumentation:</p>
    /// <ul>
    /// <li> <p>filter: A test filter string. Examples:</p>
    /// <ul>
    /// <li> <p>Running a single test case: <code>com.android.abc.Test1</code> </p> </li>
    /// <li> <p>Running a single test: <code>com.android.abc.Test1#smoke</code> </p> </li>
    /// <li> <p>Running multiple tests: <code>com.android.abc.Test1,com.android.abc.Test2</code> </p> </li>
    /// </ul> </li>
    /// </ul>
    /// <p>For XCTest and XCTestUI:</p>
    /// <ul>
    /// <li> <p>filter: A test filter string. Examples:</p>
    /// <ul>
    /// <li> <p>Running a single test class: <code>LoginTests</code> </p> </li>
    /// <li> <p>Running a multiple test classes: <code>LoginTests,SmokeTests</code> </p> </li>
    /// <li> <p>Running a single test: <code>LoginTests/testValid</code> </p> </li>
    /// <li> <p>Running multiple tests: <code>LoginTests/testValid,LoginTests/testInvalid</code> </p> </li>
    /// </ul> </li>
    /// </ul>
    /// <p>For UIAutomator:</p>
    /// <ul>
    /// <li> <p>filter: A test filter string. Examples:</p>
    /// <ul>
    /// <li> <p>Running a single test case: <code>com.android.abc.Test1</code> </p> </li>
    /// <li> <p>Running a single test: <code>com.android.abc.Test1#smoke</code> </p> </li>
    /// <li> <p>Running multiple tests: <code>com.android.abc.Test1,com.android.abc.Test2</code> </p> </li>
    /// </ul> </li>
    /// </ul>
    pub fn parameters(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.parameters.as_ref()
    }
}
impl ScheduleRunTest {
    /// Creates a new builder-style object to manufacture [`ScheduleRunTest`](crate::types::ScheduleRunTest).
    pub fn builder() -> crate::types::builders::ScheduleRunTestBuilder {
        crate::types::builders::ScheduleRunTestBuilder::default()
    }
}

/// A builder for [`ScheduleRunTest`](crate::types::ScheduleRunTest).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ScheduleRunTestBuilder {
    pub(crate) r#type: std::option::Option<crate::types::TestType>,
    pub(crate) test_package_arn: std::option::Option<std::string::String>,
    pub(crate) test_spec_arn: std::option::Option<std::string::String>,
    pub(crate) filter: std::option::Option<std::string::String>,
    pub(crate) parameters:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl ScheduleRunTestBuilder {
    /// <p>The test's type.</p>
    /// <p>Must be one of the following values:</p>
    /// <ul>
    /// <li> <p>BUILTIN_FUZZ</p> </li>
    /// <li> <p>BUILTIN_EXPLORER. For Android, an app explorer that traverses an Android app, interacting with it and capturing screenshots at the same time.</p> </li>
    /// <li> <p>APPIUM_JAVA_JUNIT</p> </li>
    /// <li> <p>APPIUM_JAVA_TESTNG</p> </li>
    /// <li> <p>APPIUM_PYTHON</p> </li>
    /// <li> <p>APPIUM_NODE</p> </li>
    /// <li> <p>APPIUM_RUBY</p> </li>
    /// <li> <p>APPIUM_WEB_JAVA_JUNIT</p> </li>
    /// <li> <p>APPIUM_WEB_JAVA_TESTNG</p> </li>
    /// <li> <p>APPIUM_WEB_PYTHON</p> </li>
    /// <li> <p>APPIUM_WEB_NODE</p> </li>
    /// <li> <p>APPIUM_WEB_RUBY</p> </li>
    /// <li> <p>CALABASH</p> </li>
    /// <li> <p>INSTRUMENTATION</p> </li>
    /// <li> <p>UIAUTOMATION</p> </li>
    /// <li> <p>UIAUTOMATOR</p> </li>
    /// <li> <p>XCTEST</p> </li>
    /// <li> <p>XCTEST_UI</p> </li>
    /// </ul>
    pub fn r#type(mut self, input: crate::types::TestType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The test's type.</p>
    /// <p>Must be one of the following values:</p>
    /// <ul>
    /// <li> <p>BUILTIN_FUZZ</p> </li>
    /// <li> <p>BUILTIN_EXPLORER. For Android, an app explorer that traverses an Android app, interacting with it and capturing screenshots at the same time.</p> </li>
    /// <li> <p>APPIUM_JAVA_JUNIT</p> </li>
    /// <li> <p>APPIUM_JAVA_TESTNG</p> </li>
    /// <li> <p>APPIUM_PYTHON</p> </li>
    /// <li> <p>APPIUM_NODE</p> </li>
    /// <li> <p>APPIUM_RUBY</p> </li>
    /// <li> <p>APPIUM_WEB_JAVA_JUNIT</p> </li>
    /// <li> <p>APPIUM_WEB_JAVA_TESTNG</p> </li>
    /// <li> <p>APPIUM_WEB_PYTHON</p> </li>
    /// <li> <p>APPIUM_WEB_NODE</p> </li>
    /// <li> <p>APPIUM_WEB_RUBY</p> </li>
    /// <li> <p>CALABASH</p> </li>
    /// <li> <p>INSTRUMENTATION</p> </li>
    /// <li> <p>UIAUTOMATION</p> </li>
    /// <li> <p>UIAUTOMATOR</p> </li>
    /// <li> <p>XCTEST</p> </li>
    /// <li> <p>XCTEST_UI</p> </li>
    /// </ul>
    pub fn set_type(mut self, input: std::option::Option<crate::types::TestType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The ARN of the uploaded test to be run.</p>
    pub fn test_package_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.test_package_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the uploaded test to be run.</p>
    pub fn set_test_package_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.test_package_arn = input;
        self
    }
    /// <p>The ARN of the YAML-formatted test specification.</p>
    pub fn test_spec_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.test_spec_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the YAML-formatted test specification.</p>
    pub fn set_test_spec_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.test_spec_arn = input;
        self
    }
    /// <p>The test's filter.</p>
    pub fn filter(mut self, input: impl Into<std::string::String>) -> Self {
        self.filter = Some(input.into());
        self
    }
    /// <p>The test's filter.</p>
    pub fn set_filter(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.filter = input;
        self
    }
    /// Adds a key-value pair to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>The test's parameters, such as test framework parameters and fixture settings. Parameters are represented by name-value pairs of strings.</p>
    /// <p>For all tests:</p>
    /// <ul>
    /// <li> <p> <code>app_performance_monitoring</code>: Performance monitoring is enabled by default. Set this parameter to false to disable it.</p> </li>
    /// </ul>
    /// <p>For Calabash tests:</p>
    /// <ul>
    /// <li> <p>profile: A cucumber profile (for example, <code>my_profile_name</code>).</p> </li>
    /// <li> <p>tags: You can limit execution to features or scenarios that have (or don't have) certain tags (for example, @smoke or @smoke,~@wip).</p> </li>
    /// </ul>
    /// <p>For Appium tests (all types):</p>
    /// <ul>
    /// <li> <p>appium_version: The Appium version. Currently supported values are 1.6.5 (and later), latest, and default.</p>
    /// <ul>
    /// <li> <p>latest runs the latest Appium version supported by Device Farm (1.9.1).</p> </li>
    /// <li> <p>For default, Device Farm selects a compatible version of Appium for the device. The current behavior is to run 1.7.2 on Android devices and iOS 9 and earlier and 1.7.2 for iOS 10 and later.</p> </li>
    /// <li> <p>This behavior is subject to change.</p> </li>
    /// </ul> </li>
    /// </ul>
    /// <p>For fuzz tests (Android only):</p>
    /// <ul>
    /// <li> <p>event_count: The number of events, between 1 and 10000, that the UI fuzz test should perform.</p> </li>
    /// <li> <p>throttle: The time, in ms, between 0 and 1000, that the UI fuzz test should wait between events.</p> </li>
    /// <li> <p>seed: A seed to use for randomizing the UI fuzz test. Using the same seed value between tests ensures identical event sequences.</p> </li>
    /// </ul>
    /// <p>For Explorer tests:</p>
    /// <ul>
    /// <li> <p>username: A user name to use if the Explorer encounters a login form. If not supplied, no user name is inserted.</p> </li>
    /// <li> <p>password: A password to use if the Explorer encounters a login form. If not supplied, no password is inserted.</p> </li>
    /// </ul>
    /// <p>For Instrumentation:</p>
    /// <ul>
    /// <li> <p>filter: A test filter string. Examples:</p>
    /// <ul>
    /// <li> <p>Running a single test case: <code>com.android.abc.Test1</code> </p> </li>
    /// <li> <p>Running a single test: <code>com.android.abc.Test1#smoke</code> </p> </li>
    /// <li> <p>Running multiple tests: <code>com.android.abc.Test1,com.android.abc.Test2</code> </p> </li>
    /// </ul> </li>
    /// </ul>
    /// <p>For XCTest and XCTestUI:</p>
    /// <ul>
    /// <li> <p>filter: A test filter string. Examples:</p>
    /// <ul>
    /// <li> <p>Running a single test class: <code>LoginTests</code> </p> </li>
    /// <li> <p>Running a multiple test classes: <code>LoginTests,SmokeTests</code> </p> </li>
    /// <li> <p>Running a single test: <code>LoginTests/testValid</code> </p> </li>
    /// <li> <p>Running multiple tests: <code>LoginTests/testValid,LoginTests/testInvalid</code> </p> </li>
    /// </ul> </li>
    /// </ul>
    /// <p>For UIAutomator:</p>
    /// <ul>
    /// <li> <p>filter: A test filter string. Examples:</p>
    /// <ul>
    /// <li> <p>Running a single test case: <code>com.android.abc.Test1</code> </p> </li>
    /// <li> <p>Running a single test: <code>com.android.abc.Test1#smoke</code> </p> </li>
    /// <li> <p>Running multiple tests: <code>com.android.abc.Test1,com.android.abc.Test2</code> </p> </li>
    /// </ul> </li>
    /// </ul>
    pub fn parameters(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.parameters.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.parameters = Some(hash_map);
        self
    }
    /// <p>The test's parameters, such as test framework parameters and fixture settings. Parameters are represented by name-value pairs of strings.</p>
    /// <p>For all tests:</p>
    /// <ul>
    /// <li> <p> <code>app_performance_monitoring</code>: Performance monitoring is enabled by default. Set this parameter to false to disable it.</p> </li>
    /// </ul>
    /// <p>For Calabash tests:</p>
    /// <ul>
    /// <li> <p>profile: A cucumber profile (for example, <code>my_profile_name</code>).</p> </li>
    /// <li> <p>tags: You can limit execution to features or scenarios that have (or don't have) certain tags (for example, @smoke or @smoke,~@wip).</p> </li>
    /// </ul>
    /// <p>For Appium tests (all types):</p>
    /// <ul>
    /// <li> <p>appium_version: The Appium version. Currently supported values are 1.6.5 (and later), latest, and default.</p>
    /// <ul>
    /// <li> <p>latest runs the latest Appium version supported by Device Farm (1.9.1).</p> </li>
    /// <li> <p>For default, Device Farm selects a compatible version of Appium for the device. The current behavior is to run 1.7.2 on Android devices and iOS 9 and earlier and 1.7.2 for iOS 10 and later.</p> </li>
    /// <li> <p>This behavior is subject to change.</p> </li>
    /// </ul> </li>
    /// </ul>
    /// <p>For fuzz tests (Android only):</p>
    /// <ul>
    /// <li> <p>event_count: The number of events, between 1 and 10000, that the UI fuzz test should perform.</p> </li>
    /// <li> <p>throttle: The time, in ms, between 0 and 1000, that the UI fuzz test should wait between events.</p> </li>
    /// <li> <p>seed: A seed to use for randomizing the UI fuzz test. Using the same seed value between tests ensures identical event sequences.</p> </li>
    /// </ul>
    /// <p>For Explorer tests:</p>
    /// <ul>
    /// <li> <p>username: A user name to use if the Explorer encounters a login form. If not supplied, no user name is inserted.</p> </li>
    /// <li> <p>password: A password to use if the Explorer encounters a login form. If not supplied, no password is inserted.</p> </li>
    /// </ul>
    /// <p>For Instrumentation:</p>
    /// <ul>
    /// <li> <p>filter: A test filter string. Examples:</p>
    /// <ul>
    /// <li> <p>Running a single test case: <code>com.android.abc.Test1</code> </p> </li>
    /// <li> <p>Running a single test: <code>com.android.abc.Test1#smoke</code> </p> </li>
    /// <li> <p>Running multiple tests: <code>com.android.abc.Test1,com.android.abc.Test2</code> </p> </li>
    /// </ul> </li>
    /// </ul>
    /// <p>For XCTest and XCTestUI:</p>
    /// <ul>
    /// <li> <p>filter: A test filter string. Examples:</p>
    /// <ul>
    /// <li> <p>Running a single test class: <code>LoginTests</code> </p> </li>
    /// <li> <p>Running a multiple test classes: <code>LoginTests,SmokeTests</code> </p> </li>
    /// <li> <p>Running a single test: <code>LoginTests/testValid</code> </p> </li>
    /// <li> <p>Running multiple tests: <code>LoginTests/testValid,LoginTests/testInvalid</code> </p> </li>
    /// </ul> </li>
    /// </ul>
    /// <p>For UIAutomator:</p>
    /// <ul>
    /// <li> <p>filter: A test filter string. Examples:</p>
    /// <ul>
    /// <li> <p>Running a single test case: <code>com.android.abc.Test1</code> </p> </li>
    /// <li> <p>Running a single test: <code>com.android.abc.Test1#smoke</code> </p> </li>
    /// <li> <p>Running multiple tests: <code>com.android.abc.Test1,com.android.abc.Test2</code> </p> </li>
    /// </ul> </li>
    /// </ul>
    pub fn set_parameters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.parameters = input;
        self
    }
    /// Consumes the builder and constructs a [`ScheduleRunTest`](crate::types::ScheduleRunTest).
    pub fn build(self) -> crate::types::ScheduleRunTest {
        crate::types::ScheduleRunTest {
            r#type: self.r#type,
            test_package_arn: self.test_package_arn,
            test_spec_arn: self.test_spec_arn,
            filter: self.filter,
            parameters: self.parameters,
        }
    }
}
