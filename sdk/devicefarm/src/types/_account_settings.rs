// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A container for account-level settings in AWS Device Farm.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AccountSettings {
    /// <p>The AWS account number specified in the <code>AccountSettings</code> container.</p>
    #[doc(hidden)]
    pub aws_account_number: std::option::Option<std::string::String>,
    /// <p>Returns the unmetered devices you have purchased or want to purchase.</p>
    #[doc(hidden)]
    pub unmetered_devices:
        std::option::Option<std::collections::HashMap<crate::types::DevicePlatform, i32>>,
    /// <p>Returns the unmetered remote access devices you have purchased or want to purchase.</p>
    #[doc(hidden)]
    pub unmetered_remote_access_devices:
        std::option::Option<std::collections::HashMap<crate::types::DevicePlatform, i32>>,
    /// <p>The maximum number of minutes a test run executes before it times out.</p>
    #[doc(hidden)]
    pub max_job_timeout_minutes: std::option::Option<i32>,
    /// <p>Information about an AWS account's usage of free trial device minutes.</p>
    #[doc(hidden)]
    pub trial_minutes: std::option::Option<crate::types::TrialMinutes>,
    /// <p>The maximum number of device slots that the AWS account can purchase. Each maximum is expressed as an <code>offering-id:number</code> pair, where the <code>offering-id</code> represents one of the IDs returned by the <code>ListOfferings</code> command.</p>
    #[doc(hidden)]
    pub max_slots: std::option::Option<std::collections::HashMap<std::string::String, i32>>,
    /// <p>The default number of minutes (at the account level) a test run executes before it times out. The default value is 150 minutes.</p>
    #[doc(hidden)]
    pub default_job_timeout_minutes: std::option::Option<i32>,
    /// <p>When set to <code>true</code>, for private devices, Device Farm does not sign your app again. For public devices, Device Farm always signs your apps again.</p>
    /// <p>For more information about how Device Farm re-signs your apps, see <a href="http://aws.amazon.com/device-farm/faqs/">Do you modify my app?</a> in the <i>AWS Device Farm FAQs</i>.</p>
    #[doc(hidden)]
    pub skip_app_resign: std::option::Option<bool>,
}
impl AccountSettings {
    /// <p>The AWS account number specified in the <code>AccountSettings</code> container.</p>
    pub fn aws_account_number(&self) -> std::option::Option<&str> {
        self.aws_account_number.as_deref()
    }
    /// <p>Returns the unmetered devices you have purchased or want to purchase.</p>
    pub fn unmetered_devices(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<crate::types::DevicePlatform, i32>> {
        self.unmetered_devices.as_ref()
    }
    /// <p>Returns the unmetered remote access devices you have purchased or want to purchase.</p>
    pub fn unmetered_remote_access_devices(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<crate::types::DevicePlatform, i32>> {
        self.unmetered_remote_access_devices.as_ref()
    }
    /// <p>The maximum number of minutes a test run executes before it times out.</p>
    pub fn max_job_timeout_minutes(&self) -> std::option::Option<i32> {
        self.max_job_timeout_minutes
    }
    /// <p>Information about an AWS account's usage of free trial device minutes.</p>
    pub fn trial_minutes(&self) -> std::option::Option<&crate::types::TrialMinutes> {
        self.trial_minutes.as_ref()
    }
    /// <p>The maximum number of device slots that the AWS account can purchase. Each maximum is expressed as an <code>offering-id:number</code> pair, where the <code>offering-id</code> represents one of the IDs returned by the <code>ListOfferings</code> command.</p>
    pub fn max_slots(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, i32>> {
        self.max_slots.as_ref()
    }
    /// <p>The default number of minutes (at the account level) a test run executes before it times out. The default value is 150 minutes.</p>
    pub fn default_job_timeout_minutes(&self) -> std::option::Option<i32> {
        self.default_job_timeout_minutes
    }
    /// <p>When set to <code>true</code>, for private devices, Device Farm does not sign your app again. For public devices, Device Farm always signs your apps again.</p>
    /// <p>For more information about how Device Farm re-signs your apps, see <a href="http://aws.amazon.com/device-farm/faqs/">Do you modify my app?</a> in the <i>AWS Device Farm FAQs</i>.</p>
    pub fn skip_app_resign(&self) -> std::option::Option<bool> {
        self.skip_app_resign
    }
}
impl AccountSettings {
    /// Creates a new builder-style object to manufacture [`AccountSettings`](crate::types::AccountSettings).
    pub fn builder() -> crate::types::builders::AccountSettingsBuilder {
        crate::types::builders::AccountSettingsBuilder::default()
    }
}

/// A builder for [`AccountSettings`](crate::types::AccountSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AccountSettingsBuilder {
    pub(crate) aws_account_number: std::option::Option<std::string::String>,
    pub(crate) unmetered_devices:
        std::option::Option<std::collections::HashMap<crate::types::DevicePlatform, i32>>,
    pub(crate) unmetered_remote_access_devices:
        std::option::Option<std::collections::HashMap<crate::types::DevicePlatform, i32>>,
    pub(crate) max_job_timeout_minutes: std::option::Option<i32>,
    pub(crate) trial_minutes: std::option::Option<crate::types::TrialMinutes>,
    pub(crate) max_slots: std::option::Option<std::collections::HashMap<std::string::String, i32>>,
    pub(crate) default_job_timeout_minutes: std::option::Option<i32>,
    pub(crate) skip_app_resign: std::option::Option<bool>,
}
impl AccountSettingsBuilder {
    /// <p>The AWS account number specified in the <code>AccountSettings</code> container.</p>
    pub fn aws_account_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.aws_account_number = Some(input.into());
        self
    }
    /// <p>The AWS account number specified in the <code>AccountSettings</code> container.</p>
    pub fn set_aws_account_number(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.aws_account_number = input;
        self
    }
    /// Adds a key-value pair to `unmetered_devices`.
    ///
    /// To override the contents of this collection use [`set_unmetered_devices`](Self::set_unmetered_devices).
    ///
    /// <p>Returns the unmetered devices you have purchased or want to purchase.</p>
    pub fn unmetered_devices(mut self, k: crate::types::DevicePlatform, v: i32) -> Self {
        let mut hash_map = self.unmetered_devices.unwrap_or_default();
        hash_map.insert(k, v);
        self.unmetered_devices = Some(hash_map);
        self
    }
    /// <p>Returns the unmetered devices you have purchased or want to purchase.</p>
    pub fn set_unmetered_devices(
        mut self,
        input: std::option::Option<std::collections::HashMap<crate::types::DevicePlatform, i32>>,
    ) -> Self {
        self.unmetered_devices = input;
        self
    }
    /// Adds a key-value pair to `unmetered_remote_access_devices`.
    ///
    /// To override the contents of this collection use [`set_unmetered_remote_access_devices`](Self::set_unmetered_remote_access_devices).
    ///
    /// <p>Returns the unmetered remote access devices you have purchased or want to purchase.</p>
    pub fn unmetered_remote_access_devices(
        mut self,
        k: crate::types::DevicePlatform,
        v: i32,
    ) -> Self {
        let mut hash_map = self.unmetered_remote_access_devices.unwrap_or_default();
        hash_map.insert(k, v);
        self.unmetered_remote_access_devices = Some(hash_map);
        self
    }
    /// <p>Returns the unmetered remote access devices you have purchased or want to purchase.</p>
    pub fn set_unmetered_remote_access_devices(
        mut self,
        input: std::option::Option<std::collections::HashMap<crate::types::DevicePlatform, i32>>,
    ) -> Self {
        self.unmetered_remote_access_devices = input;
        self
    }
    /// <p>The maximum number of minutes a test run executes before it times out.</p>
    pub fn max_job_timeout_minutes(mut self, input: i32) -> Self {
        self.max_job_timeout_minutes = Some(input);
        self
    }
    /// <p>The maximum number of minutes a test run executes before it times out.</p>
    pub fn set_max_job_timeout_minutes(mut self, input: std::option::Option<i32>) -> Self {
        self.max_job_timeout_minutes = input;
        self
    }
    /// <p>Information about an AWS account's usage of free trial device minutes.</p>
    pub fn trial_minutes(mut self, input: crate::types::TrialMinutes) -> Self {
        self.trial_minutes = Some(input);
        self
    }
    /// <p>Information about an AWS account's usage of free trial device minutes.</p>
    pub fn set_trial_minutes(
        mut self,
        input: std::option::Option<crate::types::TrialMinutes>,
    ) -> Self {
        self.trial_minutes = input;
        self
    }
    /// Adds a key-value pair to `max_slots`.
    ///
    /// To override the contents of this collection use [`set_max_slots`](Self::set_max_slots).
    ///
    /// <p>The maximum number of device slots that the AWS account can purchase. Each maximum is expressed as an <code>offering-id:number</code> pair, where the <code>offering-id</code> represents one of the IDs returned by the <code>ListOfferings</code> command.</p>
    pub fn max_slots(mut self, k: impl Into<std::string::String>, v: i32) -> Self {
        let mut hash_map = self.max_slots.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.max_slots = Some(hash_map);
        self
    }
    /// <p>The maximum number of device slots that the AWS account can purchase. Each maximum is expressed as an <code>offering-id:number</code> pair, where the <code>offering-id</code> represents one of the IDs returned by the <code>ListOfferings</code> command.</p>
    pub fn set_max_slots(
        mut self,
        input: std::option::Option<std::collections::HashMap<std::string::String, i32>>,
    ) -> Self {
        self.max_slots = input;
        self
    }
    /// <p>The default number of minutes (at the account level) a test run executes before it times out. The default value is 150 minutes.</p>
    pub fn default_job_timeout_minutes(mut self, input: i32) -> Self {
        self.default_job_timeout_minutes = Some(input);
        self
    }
    /// <p>The default number of minutes (at the account level) a test run executes before it times out. The default value is 150 minutes.</p>
    pub fn set_default_job_timeout_minutes(mut self, input: std::option::Option<i32>) -> Self {
        self.default_job_timeout_minutes = input;
        self
    }
    /// <p>When set to <code>true</code>, for private devices, Device Farm does not sign your app again. For public devices, Device Farm always signs your apps again.</p>
    /// <p>For more information about how Device Farm re-signs your apps, see <a href="http://aws.amazon.com/device-farm/faqs/">Do you modify my app?</a> in the <i>AWS Device Farm FAQs</i>.</p>
    pub fn skip_app_resign(mut self, input: bool) -> Self {
        self.skip_app_resign = Some(input);
        self
    }
    /// <p>When set to <code>true</code>, for private devices, Device Farm does not sign your app again. For public devices, Device Farm always signs your apps again.</p>
    /// <p>For more information about how Device Farm re-signs your apps, see <a href="http://aws.amazon.com/device-farm/faqs/">Do you modify my app?</a> in the <i>AWS Device Farm FAQs</i>.</p>
    pub fn set_skip_app_resign(mut self, input: std::option::Option<bool>) -> Self {
        self.skip_app_resign = input;
        self
    }
    /// Consumes the builder and constructs a [`AccountSettings`](crate::types::AccountSettings).
    pub fn build(self) -> crate::types::AccountSettings {
        crate::types::AccountSettings {
            aws_account_number: self.aws_account_number,
            unmetered_devices: self.unmetered_devices,
            unmetered_remote_access_devices: self.unmetered_remote_access_devices,
            max_job_timeout_minutes: self.max_job_timeout_minutes,
            trial_minutes: self.trial_minutes,
            max_slots: self.max_slots,
            default_job_timeout_minutes: self.default_job_timeout_minutes,
            skip_app_resign: self.skip_app_resign,
        }
    }
}
