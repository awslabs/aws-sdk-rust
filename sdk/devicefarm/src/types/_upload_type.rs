// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `UploadType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let uploadtype = unimplemented!();
/// match uploadtype {
///     UploadType::AndroidApp => { /* ... */ },
///     UploadType::AppiumJavaJunitTestPackage => { /* ... */ },
///     UploadType::AppiumJavaJunitTestSpec => { /* ... */ },
///     UploadType::AppiumJavaTestngTestPackage => { /* ... */ },
///     UploadType::AppiumJavaTestngTestSpec => { /* ... */ },
///     UploadType::AppiumNodeTestPackage => { /* ... */ },
///     UploadType::AppiumNodeTestSpec => { /* ... */ },
///     UploadType::AppiumPythonTestPackage => { /* ... */ },
///     UploadType::AppiumPythonTestSpec => { /* ... */ },
///     UploadType::AppiumRubyTestPackage => { /* ... */ },
///     UploadType::AppiumRubyTestSpec => { /* ... */ },
///     UploadType::AppiumWebJavaJunitTestPackage => { /* ... */ },
///     UploadType::AppiumWebJavaJunitTestSpec => { /* ... */ },
///     UploadType::AppiumWebJavaTestngTestPackage => { /* ... */ },
///     UploadType::AppiumWebJavaTestngTestSpec => { /* ... */ },
///     UploadType::AppiumWebNodeTestPackage => { /* ... */ },
///     UploadType::AppiumWebNodeTestSpec => { /* ... */ },
///     UploadType::AppiumWebPythonTestPackage => { /* ... */ },
///     UploadType::AppiumWebPythonTestSpec => { /* ... */ },
///     UploadType::AppiumWebRubyTestPackage => { /* ... */ },
///     UploadType::AppiumWebRubyTestSpec => { /* ... */ },
///     UploadType::CalabashTestPackage => { /* ... */ },
///     UploadType::ExternalData => { /* ... */ },
///     UploadType::InstrumentationTestPackage => { /* ... */ },
///     UploadType::InstrumentationTestSpec => { /* ... */ },
///     UploadType::IosApp => { /* ... */ },
///     UploadType::UiautomationTestPackage => { /* ... */ },
///     UploadType::UiautomatorTestPackage => { /* ... */ },
///     UploadType::WebApp => { /* ... */ },
///     UploadType::XctestTestPackage => { /* ... */ },
///     UploadType::XctestUiTestPackage => { /* ... */ },
///     UploadType::XctestUiTestSpec => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `uploadtype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `UploadType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `UploadType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `UploadType::NewFeature` is defined.
/// Specifically, when `uploadtype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `UploadType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum UploadType {
    #[allow(missing_docs)] // documentation missing in model
    AndroidApp,
    #[allow(missing_docs)] // documentation missing in model
    AppiumJavaJunitTestPackage,
    #[allow(missing_docs)] // documentation missing in model
    AppiumJavaJunitTestSpec,
    #[allow(missing_docs)] // documentation missing in model
    AppiumJavaTestngTestPackage,
    #[allow(missing_docs)] // documentation missing in model
    AppiumJavaTestngTestSpec,
    #[allow(missing_docs)] // documentation missing in model
    AppiumNodeTestPackage,
    #[allow(missing_docs)] // documentation missing in model
    AppiumNodeTestSpec,
    #[allow(missing_docs)] // documentation missing in model
    AppiumPythonTestPackage,
    #[allow(missing_docs)] // documentation missing in model
    AppiumPythonTestSpec,
    #[allow(missing_docs)] // documentation missing in model
    AppiumRubyTestPackage,
    #[allow(missing_docs)] // documentation missing in model
    AppiumRubyTestSpec,
    #[allow(missing_docs)] // documentation missing in model
    AppiumWebJavaJunitTestPackage,
    #[allow(missing_docs)] // documentation missing in model
    AppiumWebJavaJunitTestSpec,
    #[allow(missing_docs)] // documentation missing in model
    AppiumWebJavaTestngTestPackage,
    #[allow(missing_docs)] // documentation missing in model
    AppiumWebJavaTestngTestSpec,
    #[allow(missing_docs)] // documentation missing in model
    AppiumWebNodeTestPackage,
    #[allow(missing_docs)] // documentation missing in model
    AppiumWebNodeTestSpec,
    #[allow(missing_docs)] // documentation missing in model
    AppiumWebPythonTestPackage,
    #[allow(missing_docs)] // documentation missing in model
    AppiumWebPythonTestSpec,
    #[allow(missing_docs)] // documentation missing in model
    AppiumWebRubyTestPackage,
    #[allow(missing_docs)] // documentation missing in model
    AppiumWebRubyTestSpec,
    #[allow(missing_docs)] // documentation missing in model
    CalabashTestPackage,
    #[allow(missing_docs)] // documentation missing in model
    ExternalData,
    #[allow(missing_docs)] // documentation missing in model
    InstrumentationTestPackage,
    #[allow(missing_docs)] // documentation missing in model
    InstrumentationTestSpec,
    #[allow(missing_docs)] // documentation missing in model
    IosApp,
    #[allow(missing_docs)] // documentation missing in model
    UiautomationTestPackage,
    #[allow(missing_docs)] // documentation missing in model
    UiautomatorTestPackage,
    #[allow(missing_docs)] // documentation missing in model
    WebApp,
    #[allow(missing_docs)] // documentation missing in model
    XctestTestPackage,
    #[allow(missing_docs)] // documentation missing in model
    XctestUiTestPackage,
    #[allow(missing_docs)] // documentation missing in model
    XctestUiTestSpec,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for UploadType {
    fn from(s: &str) -> Self {
        match s {
            "ANDROID_APP" => UploadType::AndroidApp,
            "APPIUM_JAVA_JUNIT_TEST_PACKAGE" => UploadType::AppiumJavaJunitTestPackage,
            "APPIUM_JAVA_JUNIT_TEST_SPEC" => UploadType::AppiumJavaJunitTestSpec,
            "APPIUM_JAVA_TESTNG_TEST_PACKAGE" => UploadType::AppiumJavaTestngTestPackage,
            "APPIUM_JAVA_TESTNG_TEST_SPEC" => UploadType::AppiumJavaTestngTestSpec,
            "APPIUM_NODE_TEST_PACKAGE" => UploadType::AppiumNodeTestPackage,
            "APPIUM_NODE_TEST_SPEC" => UploadType::AppiumNodeTestSpec,
            "APPIUM_PYTHON_TEST_PACKAGE" => UploadType::AppiumPythonTestPackage,
            "APPIUM_PYTHON_TEST_SPEC" => UploadType::AppiumPythonTestSpec,
            "APPIUM_RUBY_TEST_PACKAGE" => UploadType::AppiumRubyTestPackage,
            "APPIUM_RUBY_TEST_SPEC" => UploadType::AppiumRubyTestSpec,
            "APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE" => UploadType::AppiumWebJavaJunitTestPackage,
            "APPIUM_WEB_JAVA_JUNIT_TEST_SPEC" => UploadType::AppiumWebJavaJunitTestSpec,
            "APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE" => UploadType::AppiumWebJavaTestngTestPackage,
            "APPIUM_WEB_JAVA_TESTNG_TEST_SPEC" => UploadType::AppiumWebJavaTestngTestSpec,
            "APPIUM_WEB_NODE_TEST_PACKAGE" => UploadType::AppiumWebNodeTestPackage,
            "APPIUM_WEB_NODE_TEST_SPEC" => UploadType::AppiumWebNodeTestSpec,
            "APPIUM_WEB_PYTHON_TEST_PACKAGE" => UploadType::AppiumWebPythonTestPackage,
            "APPIUM_WEB_PYTHON_TEST_SPEC" => UploadType::AppiumWebPythonTestSpec,
            "APPIUM_WEB_RUBY_TEST_PACKAGE" => UploadType::AppiumWebRubyTestPackage,
            "APPIUM_WEB_RUBY_TEST_SPEC" => UploadType::AppiumWebRubyTestSpec,
            "CALABASH_TEST_PACKAGE" => UploadType::CalabashTestPackage,
            "EXTERNAL_DATA" => UploadType::ExternalData,
            "INSTRUMENTATION_TEST_PACKAGE" => UploadType::InstrumentationTestPackage,
            "INSTRUMENTATION_TEST_SPEC" => UploadType::InstrumentationTestSpec,
            "IOS_APP" => UploadType::IosApp,
            "UIAUTOMATION_TEST_PACKAGE" => UploadType::UiautomationTestPackage,
            "UIAUTOMATOR_TEST_PACKAGE" => UploadType::UiautomatorTestPackage,
            "WEB_APP" => UploadType::WebApp,
            "XCTEST_TEST_PACKAGE" => UploadType::XctestTestPackage,
            "XCTEST_UI_TEST_PACKAGE" => UploadType::XctestUiTestPackage,
            "XCTEST_UI_TEST_SPEC" => UploadType::XctestUiTestSpec,
            other => UploadType::Unknown(crate::primitives::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for UploadType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(UploadType::from(s))
    }
}
impl UploadType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            UploadType::AndroidApp => "ANDROID_APP",
            UploadType::AppiumJavaJunitTestPackage => "APPIUM_JAVA_JUNIT_TEST_PACKAGE",
            UploadType::AppiumJavaJunitTestSpec => "APPIUM_JAVA_JUNIT_TEST_SPEC",
            UploadType::AppiumJavaTestngTestPackage => "APPIUM_JAVA_TESTNG_TEST_PACKAGE",
            UploadType::AppiumJavaTestngTestSpec => "APPIUM_JAVA_TESTNG_TEST_SPEC",
            UploadType::AppiumNodeTestPackage => "APPIUM_NODE_TEST_PACKAGE",
            UploadType::AppiumNodeTestSpec => "APPIUM_NODE_TEST_SPEC",
            UploadType::AppiumPythonTestPackage => "APPIUM_PYTHON_TEST_PACKAGE",
            UploadType::AppiumPythonTestSpec => "APPIUM_PYTHON_TEST_SPEC",
            UploadType::AppiumRubyTestPackage => "APPIUM_RUBY_TEST_PACKAGE",
            UploadType::AppiumRubyTestSpec => "APPIUM_RUBY_TEST_SPEC",
            UploadType::AppiumWebJavaJunitTestPackage => "APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE",
            UploadType::AppiumWebJavaJunitTestSpec => "APPIUM_WEB_JAVA_JUNIT_TEST_SPEC",
            UploadType::AppiumWebJavaTestngTestPackage => "APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE",
            UploadType::AppiumWebJavaTestngTestSpec => "APPIUM_WEB_JAVA_TESTNG_TEST_SPEC",
            UploadType::AppiumWebNodeTestPackage => "APPIUM_WEB_NODE_TEST_PACKAGE",
            UploadType::AppiumWebNodeTestSpec => "APPIUM_WEB_NODE_TEST_SPEC",
            UploadType::AppiumWebPythonTestPackage => "APPIUM_WEB_PYTHON_TEST_PACKAGE",
            UploadType::AppiumWebPythonTestSpec => "APPIUM_WEB_PYTHON_TEST_SPEC",
            UploadType::AppiumWebRubyTestPackage => "APPIUM_WEB_RUBY_TEST_PACKAGE",
            UploadType::AppiumWebRubyTestSpec => "APPIUM_WEB_RUBY_TEST_SPEC",
            UploadType::CalabashTestPackage => "CALABASH_TEST_PACKAGE",
            UploadType::ExternalData => "EXTERNAL_DATA",
            UploadType::InstrumentationTestPackage => "INSTRUMENTATION_TEST_PACKAGE",
            UploadType::InstrumentationTestSpec => "INSTRUMENTATION_TEST_SPEC",
            UploadType::IosApp => "IOS_APP",
            UploadType::UiautomationTestPackage => "UIAUTOMATION_TEST_PACKAGE",
            UploadType::UiautomatorTestPackage => "UIAUTOMATOR_TEST_PACKAGE",
            UploadType::WebApp => "WEB_APP",
            UploadType::XctestTestPackage => "XCTEST_TEST_PACKAGE",
            UploadType::XctestUiTestPackage => "XCTEST_UI_TEST_PACKAGE",
            UploadType::XctestUiTestSpec => "XCTEST_UI_TEST_SPEC",
            UploadType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ANDROID_APP",
            "APPIUM_JAVA_JUNIT_TEST_PACKAGE",
            "APPIUM_JAVA_JUNIT_TEST_SPEC",
            "APPIUM_JAVA_TESTNG_TEST_PACKAGE",
            "APPIUM_JAVA_TESTNG_TEST_SPEC",
            "APPIUM_NODE_TEST_PACKAGE",
            "APPIUM_NODE_TEST_SPEC",
            "APPIUM_PYTHON_TEST_PACKAGE",
            "APPIUM_PYTHON_TEST_SPEC",
            "APPIUM_RUBY_TEST_PACKAGE",
            "APPIUM_RUBY_TEST_SPEC",
            "APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE",
            "APPIUM_WEB_JAVA_JUNIT_TEST_SPEC",
            "APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE",
            "APPIUM_WEB_JAVA_TESTNG_TEST_SPEC",
            "APPIUM_WEB_NODE_TEST_PACKAGE",
            "APPIUM_WEB_NODE_TEST_SPEC",
            "APPIUM_WEB_PYTHON_TEST_PACKAGE",
            "APPIUM_WEB_PYTHON_TEST_SPEC",
            "APPIUM_WEB_RUBY_TEST_PACKAGE",
            "APPIUM_WEB_RUBY_TEST_SPEC",
            "CALABASH_TEST_PACKAGE",
            "EXTERNAL_DATA",
            "INSTRUMENTATION_TEST_PACKAGE",
            "INSTRUMENTATION_TEST_SPEC",
            "IOS_APP",
            "UIAUTOMATION_TEST_PACKAGE",
            "UIAUTOMATOR_TEST_PACKAGE",
            "WEB_APP",
            "XCTEST_TEST_PACKAGE",
            "XCTEST_UI_TEST_PACKAGE",
            "XCTEST_UI_TEST_SPEC",
        ]
    }
}
impl AsRef<str> for UploadType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
