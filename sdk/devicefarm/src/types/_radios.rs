// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the set of radios and their states on a device. Examples of radios include Wi-Fi, GPS, Bluetooth, and NFC.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Radios {
    /// <p>True if Wi-Fi is enabled at the beginning of the test. Otherwise, false.</p>
    #[doc(hidden)]
    pub wifi: std::option::Option<bool>,
    /// <p>True if Bluetooth is enabled at the beginning of the test. Otherwise, false.</p>
    #[doc(hidden)]
    pub bluetooth: std::option::Option<bool>,
    /// <p>True if NFC is enabled at the beginning of the test. Otherwise, false.</p>
    #[doc(hidden)]
    pub nfc: std::option::Option<bool>,
    /// <p>True if GPS is enabled at the beginning of the test. Otherwise, false.</p>
    #[doc(hidden)]
    pub gps: std::option::Option<bool>,
}
impl Radios {
    /// <p>True if Wi-Fi is enabled at the beginning of the test. Otherwise, false.</p>
    pub fn wifi(&self) -> std::option::Option<bool> {
        self.wifi
    }
    /// <p>True if Bluetooth is enabled at the beginning of the test. Otherwise, false.</p>
    pub fn bluetooth(&self) -> std::option::Option<bool> {
        self.bluetooth
    }
    /// <p>True if NFC is enabled at the beginning of the test. Otherwise, false.</p>
    pub fn nfc(&self) -> std::option::Option<bool> {
        self.nfc
    }
    /// <p>True if GPS is enabled at the beginning of the test. Otherwise, false.</p>
    pub fn gps(&self) -> std::option::Option<bool> {
        self.gps
    }
}
impl Radios {
    /// Creates a new builder-style object to manufacture [`Radios`](crate::types::Radios).
    pub fn builder() -> crate::types::builders::RadiosBuilder {
        crate::types::builders::RadiosBuilder::default()
    }
}

/// A builder for [`Radios`](crate::types::Radios).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RadiosBuilder {
    pub(crate) wifi: std::option::Option<bool>,
    pub(crate) bluetooth: std::option::Option<bool>,
    pub(crate) nfc: std::option::Option<bool>,
    pub(crate) gps: std::option::Option<bool>,
}
impl RadiosBuilder {
    /// <p>True if Wi-Fi is enabled at the beginning of the test. Otherwise, false.</p>
    pub fn wifi(mut self, input: bool) -> Self {
        self.wifi = Some(input);
        self
    }
    /// <p>True if Wi-Fi is enabled at the beginning of the test. Otherwise, false.</p>
    pub fn set_wifi(mut self, input: std::option::Option<bool>) -> Self {
        self.wifi = input;
        self
    }
    /// <p>True if Bluetooth is enabled at the beginning of the test. Otherwise, false.</p>
    pub fn bluetooth(mut self, input: bool) -> Self {
        self.bluetooth = Some(input);
        self
    }
    /// <p>True if Bluetooth is enabled at the beginning of the test. Otherwise, false.</p>
    pub fn set_bluetooth(mut self, input: std::option::Option<bool>) -> Self {
        self.bluetooth = input;
        self
    }
    /// <p>True if NFC is enabled at the beginning of the test. Otherwise, false.</p>
    pub fn nfc(mut self, input: bool) -> Self {
        self.nfc = Some(input);
        self
    }
    /// <p>True if NFC is enabled at the beginning of the test. Otherwise, false.</p>
    pub fn set_nfc(mut self, input: std::option::Option<bool>) -> Self {
        self.nfc = input;
        self
    }
    /// <p>True if GPS is enabled at the beginning of the test. Otherwise, false.</p>
    pub fn gps(mut self, input: bool) -> Self {
        self.gps = Some(input);
        self
    }
    /// <p>True if GPS is enabled at the beginning of the test. Otherwise, false.</p>
    pub fn set_gps(mut self, input: std::option::Option<bool>) -> Self {
        self.gps = input;
        self
    }
    /// Consumes the builder and constructs a [`Radios`](crate::types::Radios).
    pub fn build(self) -> crate::types::Radios {
        crate::types::Radios {
            wifi: self.wifi,
            bluetooth: self.bluetooth,
            nfc: self.nfc,
            gps: self.gps,
        }
    }
}
