// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The status of the offering.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct OfferingStatus {
    /// <p>The type specified for the offering status.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::OfferingTransactionType>,
    /// <p>Represents the metadata of an offering status.</p>
    #[doc(hidden)]
    pub offering: std::option::Option<crate::types::Offering>,
    /// <p>The number of available devices in the offering.</p>
    #[doc(hidden)]
    pub quantity: std::option::Option<i32>,
    /// <p>The date on which the offering is effective.</p>
    #[doc(hidden)]
    pub effective_on: std::option::Option<aws_smithy_types::DateTime>,
}
impl OfferingStatus {
    /// <p>The type specified for the offering status.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::OfferingTransactionType> {
        self.r#type.as_ref()
    }
    /// <p>Represents the metadata of an offering status.</p>
    pub fn offering(&self) -> std::option::Option<&crate::types::Offering> {
        self.offering.as_ref()
    }
    /// <p>The number of available devices in the offering.</p>
    pub fn quantity(&self) -> std::option::Option<i32> {
        self.quantity
    }
    /// <p>The date on which the offering is effective.</p>
    pub fn effective_on(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.effective_on.as_ref()
    }
}
impl OfferingStatus {
    /// Creates a new builder-style object to manufacture [`OfferingStatus`](crate::types::OfferingStatus).
    pub fn builder() -> crate::types::builders::OfferingStatusBuilder {
        crate::types::builders::OfferingStatusBuilder::default()
    }
}

/// A builder for [`OfferingStatus`](crate::types::OfferingStatus).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct OfferingStatusBuilder {
    pub(crate) r#type: std::option::Option<crate::types::OfferingTransactionType>,
    pub(crate) offering: std::option::Option<crate::types::Offering>,
    pub(crate) quantity: std::option::Option<i32>,
    pub(crate) effective_on: std::option::Option<aws_smithy_types::DateTime>,
}
impl OfferingStatusBuilder {
    /// <p>The type specified for the offering status.</p>
    pub fn r#type(mut self, input: crate::types::OfferingTransactionType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type specified for the offering status.</p>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::types::OfferingTransactionType>,
    ) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Represents the metadata of an offering status.</p>
    pub fn offering(mut self, input: crate::types::Offering) -> Self {
        self.offering = Some(input);
        self
    }
    /// <p>Represents the metadata of an offering status.</p>
    pub fn set_offering(mut self, input: std::option::Option<crate::types::Offering>) -> Self {
        self.offering = input;
        self
    }
    /// <p>The number of available devices in the offering.</p>
    pub fn quantity(mut self, input: i32) -> Self {
        self.quantity = Some(input);
        self
    }
    /// <p>The number of available devices in the offering.</p>
    pub fn set_quantity(mut self, input: std::option::Option<i32>) -> Self {
        self.quantity = input;
        self
    }
    /// <p>The date on which the offering is effective.</p>
    pub fn effective_on(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.effective_on = Some(input);
        self
    }
    /// <p>The date on which the offering is effective.</p>
    pub fn set_effective_on(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.effective_on = input;
        self
    }
    /// Consumes the builder and constructs a [`OfferingStatus`](crate::types::OfferingStatus).
    pub fn build(self) -> crate::types::OfferingStatus {
        crate::types::OfferingStatus {
            r#type: self.r#type,
            offering: self.offering,
            quantity: self.quantity,
            effective_on: self.effective_on,
        }
    }
}
