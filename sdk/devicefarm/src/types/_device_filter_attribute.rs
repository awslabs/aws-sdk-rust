// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `DeviceFilterAttribute`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let devicefilterattribute = unimplemented!();
/// match devicefilterattribute {
///     DeviceFilterAttribute::Arn => { /* ... */ },
///     DeviceFilterAttribute::Availability => { /* ... */ },
///     DeviceFilterAttribute::FleetType => { /* ... */ },
///     DeviceFilterAttribute::FormFactor => { /* ... */ },
///     DeviceFilterAttribute::InstanceArn => { /* ... */ },
///     DeviceFilterAttribute::InstanceLabels => { /* ... */ },
///     DeviceFilterAttribute::Manufacturer => { /* ... */ },
///     DeviceFilterAttribute::Model => { /* ... */ },
///     DeviceFilterAttribute::OsVersion => { /* ... */ },
///     DeviceFilterAttribute::Platform => { /* ... */ },
///     DeviceFilterAttribute::RemoteAccessEnabled => { /* ... */ },
///     DeviceFilterAttribute::RemoteDebugEnabled => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `devicefilterattribute` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `DeviceFilterAttribute::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `DeviceFilterAttribute::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `DeviceFilterAttribute::NewFeature` is defined.
/// Specifically, when `devicefilterattribute` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `DeviceFilterAttribute::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum DeviceFilterAttribute {
    #[allow(missing_docs)] // documentation missing in model
    Arn,
    #[allow(missing_docs)] // documentation missing in model
    Availability,
    #[allow(missing_docs)] // documentation missing in model
    FleetType,
    #[allow(missing_docs)] // documentation missing in model
    FormFactor,
    #[allow(missing_docs)] // documentation missing in model
    InstanceArn,
    #[allow(missing_docs)] // documentation missing in model
    InstanceLabels,
    #[allow(missing_docs)] // documentation missing in model
    Manufacturer,
    #[allow(missing_docs)] // documentation missing in model
    Model,
    #[allow(missing_docs)] // documentation missing in model
    OsVersion,
    #[allow(missing_docs)] // documentation missing in model
    Platform,
    #[allow(missing_docs)] // documentation missing in model
    RemoteAccessEnabled,
    #[allow(missing_docs)] // documentation missing in model
    RemoteDebugEnabled,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for DeviceFilterAttribute {
    fn from(s: &str) -> Self {
        match s {
            "ARN" => DeviceFilterAttribute::Arn,
            "AVAILABILITY" => DeviceFilterAttribute::Availability,
            "FLEET_TYPE" => DeviceFilterAttribute::FleetType,
            "FORM_FACTOR" => DeviceFilterAttribute::FormFactor,
            "INSTANCE_ARN" => DeviceFilterAttribute::InstanceArn,
            "INSTANCE_LABELS" => DeviceFilterAttribute::InstanceLabels,
            "MANUFACTURER" => DeviceFilterAttribute::Manufacturer,
            "MODEL" => DeviceFilterAttribute::Model,
            "OS_VERSION" => DeviceFilterAttribute::OsVersion,
            "PLATFORM" => DeviceFilterAttribute::Platform,
            "REMOTE_ACCESS_ENABLED" => DeviceFilterAttribute::RemoteAccessEnabled,
            "REMOTE_DEBUG_ENABLED" => DeviceFilterAttribute::RemoteDebugEnabled,
            other => DeviceFilterAttribute::Unknown(crate::primitives::UnknownVariantValue(
                other.to_owned(),
            )),
        }
    }
}
impl std::str::FromStr for DeviceFilterAttribute {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(DeviceFilterAttribute::from(s))
    }
}
impl DeviceFilterAttribute {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            DeviceFilterAttribute::Arn => "ARN",
            DeviceFilterAttribute::Availability => "AVAILABILITY",
            DeviceFilterAttribute::FleetType => "FLEET_TYPE",
            DeviceFilterAttribute::FormFactor => "FORM_FACTOR",
            DeviceFilterAttribute::InstanceArn => "INSTANCE_ARN",
            DeviceFilterAttribute::InstanceLabels => "INSTANCE_LABELS",
            DeviceFilterAttribute::Manufacturer => "MANUFACTURER",
            DeviceFilterAttribute::Model => "MODEL",
            DeviceFilterAttribute::OsVersion => "OS_VERSION",
            DeviceFilterAttribute::Platform => "PLATFORM",
            DeviceFilterAttribute::RemoteAccessEnabled => "REMOTE_ACCESS_ENABLED",
            DeviceFilterAttribute::RemoteDebugEnabled => "REMOTE_DEBUG_ENABLED",
            DeviceFilterAttribute::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ARN",
            "AVAILABILITY",
            "FLEET_TYPE",
            "FORM_FACTOR",
            "INSTANCE_ARN",
            "INSTANCE_LABELS",
            "MANUFACTURER",
            "MODEL",
            "OS_VERSION",
            "PLATFORM",
            "REMOTE_ACCESS_ENABLED",
            "REMOTE_DEBUG_ENABLED",
        ]
    }
}
impl AsRef<str> for DeviceFilterAttribute {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
