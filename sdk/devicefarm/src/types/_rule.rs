// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a condition for a device pool.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Rule {
    /// <p>The rule's stringified attribute. For example, specify the value as <code>"\"abc\""</code>.</p>
    /// <p>The supported operators for each attribute are provided in the following list.</p>
    /// <dl>
    /// <dt>
    /// APPIUM_VERSION
    /// </dt>
    /// <dd>
    /// <p>The Appium version for the test.</p>
    /// <p>Supported operators: <code>CONTAINS</code> </p>
    /// </dd>
    /// <dt>
    /// ARN
    /// </dt>
    /// <dd>
    /// <p>The Amazon Resource Name (ARN) of the device (for example, <code>arn:aws:devicefarm:us-west-2::device:12345Example</code>.</p>
    /// <p>Supported operators: <code>EQUALS</code>, <code>IN</code>, <code>NOT_IN</code> </p>
    /// </dd>
    /// <dt>
    /// AVAILABILITY
    /// </dt>
    /// <dd>
    /// <p>The current availability of the device. Valid values are AVAILABLE, HIGHLY_AVAILABLE, BUSY, or TEMPORARY_NOT_AVAILABLE.</p>
    /// <p>Supported operators: <code>EQUALS</code> </p>
    /// </dd>
    /// <dt>
    /// FLEET_TYPE
    /// </dt>
    /// <dd>
    /// <p>The fleet type. Valid values are PUBLIC or PRIVATE.</p>
    /// <p>Supported operators: <code>EQUALS</code> </p>
    /// </dd>
    /// <dt>
    /// FORM_FACTOR
    /// </dt>
    /// <dd>
    /// <p>The device form factor. Valid values are PHONE or TABLET.</p>
    /// <p>Supported operators: <code>EQUALS</code>, <code>IN</code>, <code>NOT_IN</code> </p>
    /// </dd>
    /// <dt>
    /// INSTANCE_ARN
    /// </dt>
    /// <dd>
    /// <p>The Amazon Resource Name (ARN) of the device instance.</p>
    /// <p>Supported operators: <code>IN</code>, <code>NOT_IN</code> </p>
    /// </dd>
    /// <dt>
    /// INSTANCE_LABELS
    /// </dt>
    /// <dd>
    /// <p>The label of the device instance.</p>
    /// <p>Supported operators: <code>CONTAINS</code> </p>
    /// </dd>
    /// <dt>
    /// MANUFACTURER
    /// </dt>
    /// <dd>
    /// <p>The device manufacturer (for example, Apple).</p>
    /// <p>Supported operators: <code>EQUALS</code>, <code>IN</code>, <code>NOT_IN</code> </p>
    /// </dd>
    /// <dt>
    /// MODEL
    /// </dt>
    /// <dd>
    /// <p>The device model, such as Apple iPad Air 2 or Google Pixel.</p>
    /// <p>Supported operators: <code>CONTAINS</code>, <code>EQUALS</code>, <code>IN</code>, <code>NOT_IN</code> </p>
    /// </dd>
    /// <dt>
    /// OS_VERSION
    /// </dt>
    /// <dd>
    /// <p>The operating system version (for example, 10.3.2).</p>
    /// <p>Supported operators: <code>EQUALS</code>, <code>GREATER_THAN</code>, <code>GREATER_THAN_OR_EQUALS</code>, <code>IN</code>, <code>LESS_THAN</code>, <code>LESS_THAN_OR_EQUALS</code>, <code>NOT_IN</code> </p>
    /// </dd>
    /// <dt>
    /// PLATFORM
    /// </dt>
    /// <dd>
    /// <p>The device platform. Valid values are ANDROID or IOS.</p>
    /// <p>Supported operators: <code>EQUALS</code>, <code>IN</code>, <code>NOT_IN</code> </p>
    /// </dd>
    /// <dt>
    /// REMOTE_ACCESS_ENABLED
    /// </dt>
    /// <dd>
    /// <p>Whether the device is enabled for remote access. Valid values are TRUE or FALSE.</p>
    /// <p>Supported operators: <code>EQUALS</code> </p>
    /// </dd>
    /// <dt>
    /// REMOTE_DEBUG_ENABLED
    /// </dt>
    /// <dd>
    /// <p>Whether the device is enabled for remote debugging. Valid values are TRUE or FALSE.</p>
    /// <p>Supported operators: <code>EQUALS</code> </p>
    /// <p>Because remote debugging is <a href="https://docs.aws.amazon.com/devicefarm/latest/developerguide/history.html">no longer supported</a>, this filter is ignored.</p>
    /// </dd>
    /// </dl>
    #[doc(hidden)]
    pub attribute: std::option::Option<crate::types::DeviceAttribute>,
    /// <p>Specifies how Device Farm compares the rule's attribute to the value. For the operators that are supported by each attribute, see the attribute descriptions.</p>
    #[doc(hidden)]
    pub operator: std::option::Option<crate::types::RuleOperator>,
    /// <p>The rule's value.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
}
impl Rule {
    /// <p>The rule's stringified attribute. For example, specify the value as <code>"\"abc\""</code>.</p>
    /// <p>The supported operators for each attribute are provided in the following list.</p>
    /// <dl>
    /// <dt>
    /// APPIUM_VERSION
    /// </dt>
    /// <dd>
    /// <p>The Appium version for the test.</p>
    /// <p>Supported operators: <code>CONTAINS</code> </p>
    /// </dd>
    /// <dt>
    /// ARN
    /// </dt>
    /// <dd>
    /// <p>The Amazon Resource Name (ARN) of the device (for example, <code>arn:aws:devicefarm:us-west-2::device:12345Example</code>.</p>
    /// <p>Supported operators: <code>EQUALS</code>, <code>IN</code>, <code>NOT_IN</code> </p>
    /// </dd>
    /// <dt>
    /// AVAILABILITY
    /// </dt>
    /// <dd>
    /// <p>The current availability of the device. Valid values are AVAILABLE, HIGHLY_AVAILABLE, BUSY, or TEMPORARY_NOT_AVAILABLE.</p>
    /// <p>Supported operators: <code>EQUALS</code> </p>
    /// </dd>
    /// <dt>
    /// FLEET_TYPE
    /// </dt>
    /// <dd>
    /// <p>The fleet type. Valid values are PUBLIC or PRIVATE.</p>
    /// <p>Supported operators: <code>EQUALS</code> </p>
    /// </dd>
    /// <dt>
    /// FORM_FACTOR
    /// </dt>
    /// <dd>
    /// <p>The device form factor. Valid values are PHONE or TABLET.</p>
    /// <p>Supported operators: <code>EQUALS</code>, <code>IN</code>, <code>NOT_IN</code> </p>
    /// </dd>
    /// <dt>
    /// INSTANCE_ARN
    /// </dt>
    /// <dd>
    /// <p>The Amazon Resource Name (ARN) of the device instance.</p>
    /// <p>Supported operators: <code>IN</code>, <code>NOT_IN</code> </p>
    /// </dd>
    /// <dt>
    /// INSTANCE_LABELS
    /// </dt>
    /// <dd>
    /// <p>The label of the device instance.</p>
    /// <p>Supported operators: <code>CONTAINS</code> </p>
    /// </dd>
    /// <dt>
    /// MANUFACTURER
    /// </dt>
    /// <dd>
    /// <p>The device manufacturer (for example, Apple).</p>
    /// <p>Supported operators: <code>EQUALS</code>, <code>IN</code>, <code>NOT_IN</code> </p>
    /// </dd>
    /// <dt>
    /// MODEL
    /// </dt>
    /// <dd>
    /// <p>The device model, such as Apple iPad Air 2 or Google Pixel.</p>
    /// <p>Supported operators: <code>CONTAINS</code>, <code>EQUALS</code>, <code>IN</code>, <code>NOT_IN</code> </p>
    /// </dd>
    /// <dt>
    /// OS_VERSION
    /// </dt>
    /// <dd>
    /// <p>The operating system version (for example, 10.3.2).</p>
    /// <p>Supported operators: <code>EQUALS</code>, <code>GREATER_THAN</code>, <code>GREATER_THAN_OR_EQUALS</code>, <code>IN</code>, <code>LESS_THAN</code>, <code>LESS_THAN_OR_EQUALS</code>, <code>NOT_IN</code> </p>
    /// </dd>
    /// <dt>
    /// PLATFORM
    /// </dt>
    /// <dd>
    /// <p>The device platform. Valid values are ANDROID or IOS.</p>
    /// <p>Supported operators: <code>EQUALS</code>, <code>IN</code>, <code>NOT_IN</code> </p>
    /// </dd>
    /// <dt>
    /// REMOTE_ACCESS_ENABLED
    /// </dt>
    /// <dd>
    /// <p>Whether the device is enabled for remote access. Valid values are TRUE or FALSE.</p>
    /// <p>Supported operators: <code>EQUALS</code> </p>
    /// </dd>
    /// <dt>
    /// REMOTE_DEBUG_ENABLED
    /// </dt>
    /// <dd>
    /// <p>Whether the device is enabled for remote debugging. Valid values are TRUE or FALSE.</p>
    /// <p>Supported operators: <code>EQUALS</code> </p>
    /// <p>Because remote debugging is <a href="https://docs.aws.amazon.com/devicefarm/latest/developerguide/history.html">no longer supported</a>, this filter is ignored.</p>
    /// </dd>
    /// </dl>
    pub fn attribute(&self) -> std::option::Option<&crate::types::DeviceAttribute> {
        self.attribute.as_ref()
    }
    /// <p>Specifies how Device Farm compares the rule's attribute to the value. For the operators that are supported by each attribute, see the attribute descriptions.</p>
    pub fn operator(&self) -> std::option::Option<&crate::types::RuleOperator> {
        self.operator.as_ref()
    }
    /// <p>The rule's value.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl Rule {
    /// Creates a new builder-style object to manufacture [`Rule`](crate::types::Rule).
    pub fn builder() -> crate::types::builders::RuleBuilder {
        crate::types::builders::RuleBuilder::default()
    }
}

/// A builder for [`Rule`](crate::types::Rule).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RuleBuilder {
    pub(crate) attribute: std::option::Option<crate::types::DeviceAttribute>,
    pub(crate) operator: std::option::Option<crate::types::RuleOperator>,
    pub(crate) value: std::option::Option<std::string::String>,
}
impl RuleBuilder {
    /// <p>The rule's stringified attribute. For example, specify the value as <code>"\"abc\""</code>.</p>
    /// <p>The supported operators for each attribute are provided in the following list.</p>
    /// <dl>
    /// <dt>
    /// APPIUM_VERSION
    /// </dt>
    /// <dd>
    /// <p>The Appium version for the test.</p>
    /// <p>Supported operators: <code>CONTAINS</code> </p>
    /// </dd>
    /// <dt>
    /// ARN
    /// </dt>
    /// <dd>
    /// <p>The Amazon Resource Name (ARN) of the device (for example, <code>arn:aws:devicefarm:us-west-2::device:12345Example</code>.</p>
    /// <p>Supported operators: <code>EQUALS</code>, <code>IN</code>, <code>NOT_IN</code> </p>
    /// </dd>
    /// <dt>
    /// AVAILABILITY
    /// </dt>
    /// <dd>
    /// <p>The current availability of the device. Valid values are AVAILABLE, HIGHLY_AVAILABLE, BUSY, or TEMPORARY_NOT_AVAILABLE.</p>
    /// <p>Supported operators: <code>EQUALS</code> </p>
    /// </dd>
    /// <dt>
    /// FLEET_TYPE
    /// </dt>
    /// <dd>
    /// <p>The fleet type. Valid values are PUBLIC or PRIVATE.</p>
    /// <p>Supported operators: <code>EQUALS</code> </p>
    /// </dd>
    /// <dt>
    /// FORM_FACTOR
    /// </dt>
    /// <dd>
    /// <p>The device form factor. Valid values are PHONE or TABLET.</p>
    /// <p>Supported operators: <code>EQUALS</code>, <code>IN</code>, <code>NOT_IN</code> </p>
    /// </dd>
    /// <dt>
    /// INSTANCE_ARN
    /// </dt>
    /// <dd>
    /// <p>The Amazon Resource Name (ARN) of the device instance.</p>
    /// <p>Supported operators: <code>IN</code>, <code>NOT_IN</code> </p>
    /// </dd>
    /// <dt>
    /// INSTANCE_LABELS
    /// </dt>
    /// <dd>
    /// <p>The label of the device instance.</p>
    /// <p>Supported operators: <code>CONTAINS</code> </p>
    /// </dd>
    /// <dt>
    /// MANUFACTURER
    /// </dt>
    /// <dd>
    /// <p>The device manufacturer (for example, Apple).</p>
    /// <p>Supported operators: <code>EQUALS</code>, <code>IN</code>, <code>NOT_IN</code> </p>
    /// </dd>
    /// <dt>
    /// MODEL
    /// </dt>
    /// <dd>
    /// <p>The device model, such as Apple iPad Air 2 or Google Pixel.</p>
    /// <p>Supported operators: <code>CONTAINS</code>, <code>EQUALS</code>, <code>IN</code>, <code>NOT_IN</code> </p>
    /// </dd>
    /// <dt>
    /// OS_VERSION
    /// </dt>
    /// <dd>
    /// <p>The operating system version (for example, 10.3.2).</p>
    /// <p>Supported operators: <code>EQUALS</code>, <code>GREATER_THAN</code>, <code>GREATER_THAN_OR_EQUALS</code>, <code>IN</code>, <code>LESS_THAN</code>, <code>LESS_THAN_OR_EQUALS</code>, <code>NOT_IN</code> </p>
    /// </dd>
    /// <dt>
    /// PLATFORM
    /// </dt>
    /// <dd>
    /// <p>The device platform. Valid values are ANDROID or IOS.</p>
    /// <p>Supported operators: <code>EQUALS</code>, <code>IN</code>, <code>NOT_IN</code> </p>
    /// </dd>
    /// <dt>
    /// REMOTE_ACCESS_ENABLED
    /// </dt>
    /// <dd>
    /// <p>Whether the device is enabled for remote access. Valid values are TRUE or FALSE.</p>
    /// <p>Supported operators: <code>EQUALS</code> </p>
    /// </dd>
    /// <dt>
    /// REMOTE_DEBUG_ENABLED
    /// </dt>
    /// <dd>
    /// <p>Whether the device is enabled for remote debugging. Valid values are TRUE or FALSE.</p>
    /// <p>Supported operators: <code>EQUALS</code> </p>
    /// <p>Because remote debugging is <a href="https://docs.aws.amazon.com/devicefarm/latest/developerguide/history.html">no longer supported</a>, this filter is ignored.</p>
    /// </dd>
    /// </dl>
    pub fn attribute(mut self, input: crate::types::DeviceAttribute) -> Self {
        self.attribute = Some(input);
        self
    }
    /// <p>The rule's stringified attribute. For example, specify the value as <code>"\"abc\""</code>.</p>
    /// <p>The supported operators for each attribute are provided in the following list.</p>
    /// <dl>
    /// <dt>
    /// APPIUM_VERSION
    /// </dt>
    /// <dd>
    /// <p>The Appium version for the test.</p>
    /// <p>Supported operators: <code>CONTAINS</code> </p>
    /// </dd>
    /// <dt>
    /// ARN
    /// </dt>
    /// <dd>
    /// <p>The Amazon Resource Name (ARN) of the device (for example, <code>arn:aws:devicefarm:us-west-2::device:12345Example</code>.</p>
    /// <p>Supported operators: <code>EQUALS</code>, <code>IN</code>, <code>NOT_IN</code> </p>
    /// </dd>
    /// <dt>
    /// AVAILABILITY
    /// </dt>
    /// <dd>
    /// <p>The current availability of the device. Valid values are AVAILABLE, HIGHLY_AVAILABLE, BUSY, or TEMPORARY_NOT_AVAILABLE.</p>
    /// <p>Supported operators: <code>EQUALS</code> </p>
    /// </dd>
    /// <dt>
    /// FLEET_TYPE
    /// </dt>
    /// <dd>
    /// <p>The fleet type. Valid values are PUBLIC or PRIVATE.</p>
    /// <p>Supported operators: <code>EQUALS</code> </p>
    /// </dd>
    /// <dt>
    /// FORM_FACTOR
    /// </dt>
    /// <dd>
    /// <p>The device form factor. Valid values are PHONE or TABLET.</p>
    /// <p>Supported operators: <code>EQUALS</code>, <code>IN</code>, <code>NOT_IN</code> </p>
    /// </dd>
    /// <dt>
    /// INSTANCE_ARN
    /// </dt>
    /// <dd>
    /// <p>The Amazon Resource Name (ARN) of the device instance.</p>
    /// <p>Supported operators: <code>IN</code>, <code>NOT_IN</code> </p>
    /// </dd>
    /// <dt>
    /// INSTANCE_LABELS
    /// </dt>
    /// <dd>
    /// <p>The label of the device instance.</p>
    /// <p>Supported operators: <code>CONTAINS</code> </p>
    /// </dd>
    /// <dt>
    /// MANUFACTURER
    /// </dt>
    /// <dd>
    /// <p>The device manufacturer (for example, Apple).</p>
    /// <p>Supported operators: <code>EQUALS</code>, <code>IN</code>, <code>NOT_IN</code> </p>
    /// </dd>
    /// <dt>
    /// MODEL
    /// </dt>
    /// <dd>
    /// <p>The device model, such as Apple iPad Air 2 or Google Pixel.</p>
    /// <p>Supported operators: <code>CONTAINS</code>, <code>EQUALS</code>, <code>IN</code>, <code>NOT_IN</code> </p>
    /// </dd>
    /// <dt>
    /// OS_VERSION
    /// </dt>
    /// <dd>
    /// <p>The operating system version (for example, 10.3.2).</p>
    /// <p>Supported operators: <code>EQUALS</code>, <code>GREATER_THAN</code>, <code>GREATER_THAN_OR_EQUALS</code>, <code>IN</code>, <code>LESS_THAN</code>, <code>LESS_THAN_OR_EQUALS</code>, <code>NOT_IN</code> </p>
    /// </dd>
    /// <dt>
    /// PLATFORM
    /// </dt>
    /// <dd>
    /// <p>The device platform. Valid values are ANDROID or IOS.</p>
    /// <p>Supported operators: <code>EQUALS</code>, <code>IN</code>, <code>NOT_IN</code> </p>
    /// </dd>
    /// <dt>
    /// REMOTE_ACCESS_ENABLED
    /// </dt>
    /// <dd>
    /// <p>Whether the device is enabled for remote access. Valid values are TRUE or FALSE.</p>
    /// <p>Supported operators: <code>EQUALS</code> </p>
    /// </dd>
    /// <dt>
    /// REMOTE_DEBUG_ENABLED
    /// </dt>
    /// <dd>
    /// <p>Whether the device is enabled for remote debugging. Valid values are TRUE or FALSE.</p>
    /// <p>Supported operators: <code>EQUALS</code> </p>
    /// <p>Because remote debugging is <a href="https://docs.aws.amazon.com/devicefarm/latest/developerguide/history.html">no longer supported</a>, this filter is ignored.</p>
    /// </dd>
    /// </dl>
    pub fn set_attribute(
        mut self,
        input: std::option::Option<crate::types::DeviceAttribute>,
    ) -> Self {
        self.attribute = input;
        self
    }
    /// <p>Specifies how Device Farm compares the rule's attribute to the value. For the operators that are supported by each attribute, see the attribute descriptions.</p>
    pub fn operator(mut self, input: crate::types::RuleOperator) -> Self {
        self.operator = Some(input);
        self
    }
    /// <p>Specifies how Device Farm compares the rule's attribute to the value. For the operators that are supported by each attribute, see the attribute descriptions.</p>
    pub fn set_operator(mut self, input: std::option::Option<crate::types::RuleOperator>) -> Self {
        self.operator = input;
        self
    }
    /// <p>The rule's value.</p>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// <p>The rule's value.</p>
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// Consumes the builder and constructs a [`Rule`](crate::types::Rule).
    pub fn build(self) -> crate::types::Rule {
        crate::types::Rule {
            attribute: self.attribute,
            operator: self.operator,
            value: self.value,
        }
    }
}
