// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a device pool compatibility result.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DevicePoolCompatibilityResult {
    /// <p>The device (phone or tablet) to return information about.</p>
    pub device: ::std::option::Option<crate::types::Device>,
    /// <p>Whether the result was compatible with the device pool.</p>
    pub compatible: ::std::option::Option<bool>,
    /// <p>Information about the compatibility.</p>
    pub incompatibility_messages: ::std::option::Option<::std::vec::Vec<crate::types::IncompatibilityMessage>>,
}
impl DevicePoolCompatibilityResult {
    /// <p>The device (phone or tablet) to return information about.</p>
    pub fn device(&self) -> ::std::option::Option<&crate::types::Device> {
        self.device.as_ref()
    }
    /// <p>Whether the result was compatible with the device pool.</p>
    pub fn compatible(&self) -> ::std::option::Option<bool> {
        self.compatible
    }
    /// <p>Information about the compatibility.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.incompatibility_messages.is_none()`.
    pub fn incompatibility_messages(&self) -> &[crate::types::IncompatibilityMessage] {
        self.incompatibility_messages.as_deref().unwrap_or_default()
    }
}
impl DevicePoolCompatibilityResult {
    /// Creates a new builder-style object to manufacture [`DevicePoolCompatibilityResult`](crate::types::DevicePoolCompatibilityResult).
    pub fn builder() -> crate::types::builders::DevicePoolCompatibilityResultBuilder {
        crate::types::builders::DevicePoolCompatibilityResultBuilder::default()
    }
}

/// A builder for [`DevicePoolCompatibilityResult`](crate::types::DevicePoolCompatibilityResult).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DevicePoolCompatibilityResultBuilder {
    pub(crate) device: ::std::option::Option<crate::types::Device>,
    pub(crate) compatible: ::std::option::Option<bool>,
    pub(crate) incompatibility_messages: ::std::option::Option<::std::vec::Vec<crate::types::IncompatibilityMessage>>,
}
impl DevicePoolCompatibilityResultBuilder {
    /// <p>The device (phone or tablet) to return information about.</p>
    pub fn device(mut self, input: crate::types::Device) -> Self {
        self.device = ::std::option::Option::Some(input);
        self
    }
    /// <p>The device (phone or tablet) to return information about.</p>
    pub fn set_device(mut self, input: ::std::option::Option<crate::types::Device>) -> Self {
        self.device = input;
        self
    }
    /// <p>The device (phone or tablet) to return information about.</p>
    pub fn get_device(&self) -> &::std::option::Option<crate::types::Device> {
        &self.device
    }
    /// <p>Whether the result was compatible with the device pool.</p>
    pub fn compatible(mut self, input: bool) -> Self {
        self.compatible = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the result was compatible with the device pool.</p>
    pub fn set_compatible(mut self, input: ::std::option::Option<bool>) -> Self {
        self.compatible = input;
        self
    }
    /// <p>Whether the result was compatible with the device pool.</p>
    pub fn get_compatible(&self) -> &::std::option::Option<bool> {
        &self.compatible
    }
    /// Appends an item to `incompatibility_messages`.
    ///
    /// To override the contents of this collection use [`set_incompatibility_messages`](Self::set_incompatibility_messages).
    ///
    /// <p>Information about the compatibility.</p>
    pub fn incompatibility_messages(mut self, input: crate::types::IncompatibilityMessage) -> Self {
        let mut v = self.incompatibility_messages.unwrap_or_default();
        v.push(input);
        self.incompatibility_messages = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the compatibility.</p>
    pub fn set_incompatibility_messages(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::IncompatibilityMessage>>) -> Self {
        self.incompatibility_messages = input;
        self
    }
    /// <p>Information about the compatibility.</p>
    pub fn get_incompatibility_messages(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IncompatibilityMessage>> {
        &self.incompatibility_messages
    }
    /// Consumes the builder and constructs a [`DevicePoolCompatibilityResult`](crate::types::DevicePoolCompatibilityResult).
    pub fn build(self) -> crate::types::DevicePoolCompatibilityResult {
        crate::types::DevicePoolCompatibilityResult {
            device: self.device,
            compatible: self.compatible,
            incompatibility_messages: self.incompatibility_messages,
        }
    }
}
