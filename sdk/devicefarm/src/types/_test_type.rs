// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `TestType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let testtype = unimplemented!();
/// match testtype {
///     TestType::AppiumJavaJunit => { /* ... */ },
///     TestType::AppiumJavaTestng => { /* ... */ },
///     TestType::AppiumNode => { /* ... */ },
///     TestType::AppiumPython => { /* ... */ },
///     TestType::AppiumRuby => { /* ... */ },
///     TestType::AppiumWebJavaJunit => { /* ... */ },
///     TestType::AppiumWebJavaTestng => { /* ... */ },
///     TestType::AppiumWebNode => { /* ... */ },
///     TestType::AppiumWebPython => { /* ... */ },
///     TestType::AppiumWebRuby => { /* ... */ },
///     TestType::BuiltinExplorer => { /* ... */ },
///     TestType::BuiltinFuzz => { /* ... */ },
///     TestType::Calabash => { /* ... */ },
///     TestType::Instrumentation => { /* ... */ },
///     TestType::RemoteAccessRecord => { /* ... */ },
///     TestType::RemoteAccessReplay => { /* ... */ },
///     TestType::Uiautomation => { /* ... */ },
///     TestType::Uiautomator => { /* ... */ },
///     TestType::WebPerformanceProfile => { /* ... */ },
///     TestType::Xctest => { /* ... */ },
///     TestType::XctestUi => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `testtype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `TestType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `TestType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `TestType::NewFeature` is defined.
/// Specifically, when `testtype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `TestType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum TestType {
    #[allow(missing_docs)] // documentation missing in model
    AppiumJavaJunit,
    #[allow(missing_docs)] // documentation missing in model
    AppiumJavaTestng,
    #[allow(missing_docs)] // documentation missing in model
    AppiumNode,
    #[allow(missing_docs)] // documentation missing in model
    AppiumPython,
    #[allow(missing_docs)] // documentation missing in model
    AppiumRuby,
    #[allow(missing_docs)] // documentation missing in model
    AppiumWebJavaJunit,
    #[allow(missing_docs)] // documentation missing in model
    AppiumWebJavaTestng,
    #[allow(missing_docs)] // documentation missing in model
    AppiumWebNode,
    #[allow(missing_docs)] // documentation missing in model
    AppiumWebPython,
    #[allow(missing_docs)] // documentation missing in model
    AppiumWebRuby,
    #[allow(missing_docs)] // documentation missing in model
    BuiltinExplorer,
    #[allow(missing_docs)] // documentation missing in model
    BuiltinFuzz,
    #[allow(missing_docs)] // documentation missing in model
    Calabash,
    #[allow(missing_docs)] // documentation missing in model
    Instrumentation,
    #[allow(missing_docs)] // documentation missing in model
    RemoteAccessRecord,
    #[allow(missing_docs)] // documentation missing in model
    RemoteAccessReplay,
    #[allow(missing_docs)] // documentation missing in model
    Uiautomation,
    #[allow(missing_docs)] // documentation missing in model
    Uiautomator,
    #[allow(missing_docs)] // documentation missing in model
    WebPerformanceProfile,
    #[allow(missing_docs)] // documentation missing in model
    Xctest,
    #[allow(missing_docs)] // documentation missing in model
    XctestUi,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for TestType {
    fn from(s: &str) -> Self {
        match s {
            "APPIUM_JAVA_JUNIT" => TestType::AppiumJavaJunit,
            "APPIUM_JAVA_TESTNG" => TestType::AppiumJavaTestng,
            "APPIUM_NODE" => TestType::AppiumNode,
            "APPIUM_PYTHON" => TestType::AppiumPython,
            "APPIUM_RUBY" => TestType::AppiumRuby,
            "APPIUM_WEB_JAVA_JUNIT" => TestType::AppiumWebJavaJunit,
            "APPIUM_WEB_JAVA_TESTNG" => TestType::AppiumWebJavaTestng,
            "APPIUM_WEB_NODE" => TestType::AppiumWebNode,
            "APPIUM_WEB_PYTHON" => TestType::AppiumWebPython,
            "APPIUM_WEB_RUBY" => TestType::AppiumWebRuby,
            "BUILTIN_EXPLORER" => TestType::BuiltinExplorer,
            "BUILTIN_FUZZ" => TestType::BuiltinFuzz,
            "CALABASH" => TestType::Calabash,
            "INSTRUMENTATION" => TestType::Instrumentation,
            "REMOTE_ACCESS_RECORD" => TestType::RemoteAccessRecord,
            "REMOTE_ACCESS_REPLAY" => TestType::RemoteAccessReplay,
            "UIAUTOMATION" => TestType::Uiautomation,
            "UIAUTOMATOR" => TestType::Uiautomator,
            "WEB_PERFORMANCE_PROFILE" => TestType::WebPerformanceProfile,
            "XCTEST" => TestType::Xctest,
            "XCTEST_UI" => TestType::XctestUi,
            other => TestType::Unknown(crate::primitives::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for TestType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(TestType::from(s))
    }
}
impl TestType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            TestType::AppiumJavaJunit => "APPIUM_JAVA_JUNIT",
            TestType::AppiumJavaTestng => "APPIUM_JAVA_TESTNG",
            TestType::AppiumNode => "APPIUM_NODE",
            TestType::AppiumPython => "APPIUM_PYTHON",
            TestType::AppiumRuby => "APPIUM_RUBY",
            TestType::AppiumWebJavaJunit => "APPIUM_WEB_JAVA_JUNIT",
            TestType::AppiumWebJavaTestng => "APPIUM_WEB_JAVA_TESTNG",
            TestType::AppiumWebNode => "APPIUM_WEB_NODE",
            TestType::AppiumWebPython => "APPIUM_WEB_PYTHON",
            TestType::AppiumWebRuby => "APPIUM_WEB_RUBY",
            TestType::BuiltinExplorer => "BUILTIN_EXPLORER",
            TestType::BuiltinFuzz => "BUILTIN_FUZZ",
            TestType::Calabash => "CALABASH",
            TestType::Instrumentation => "INSTRUMENTATION",
            TestType::RemoteAccessRecord => "REMOTE_ACCESS_RECORD",
            TestType::RemoteAccessReplay => "REMOTE_ACCESS_REPLAY",
            TestType::Uiautomation => "UIAUTOMATION",
            TestType::Uiautomator => "UIAUTOMATOR",
            TestType::WebPerformanceProfile => "WEB_PERFORMANCE_PROFILE",
            TestType::Xctest => "XCTEST",
            TestType::XctestUi => "XCTEST_UI",
            TestType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "APPIUM_JAVA_JUNIT",
            "APPIUM_JAVA_TESTNG",
            "APPIUM_NODE",
            "APPIUM_PYTHON",
            "APPIUM_RUBY",
            "APPIUM_WEB_JAVA_JUNIT",
            "APPIUM_WEB_JAVA_TESTNG",
            "APPIUM_WEB_NODE",
            "APPIUM_WEB_PYTHON",
            "APPIUM_WEB_RUBY",
            "BUILTIN_EXPLORER",
            "BUILTIN_FUZZ",
            "CALABASH",
            "INSTRUMENTATION",
            "REMOTE_ACCESS_RECORD",
            "REMOTE_ACCESS_REPLAY",
            "UIAUTOMATION",
            "UIAUTOMATOR",
            "WEB_PERFORMANCE_PROFILE",
            "XCTEST",
            "XCTEST_UI",
        ]
    }
}
impl AsRef<str> for TestType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
