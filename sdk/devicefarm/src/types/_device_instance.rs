// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the device instance.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeviceInstance {
    /// <p>The Amazon Resource Name (ARN) of the device instance.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The ARN of the device.</p>
    #[doc(hidden)]
    pub device_arn: std::option::Option<std::string::String>,
    /// <p>An array of strings that describe the device instance.</p>
    #[doc(hidden)]
    pub labels: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The status of the device instance. Valid values are listed here.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::InstanceStatus>,
    /// <p>Unique device identifier for the device instance.</p>
    #[doc(hidden)]
    pub udid: std::option::Option<std::string::String>,
    /// <p>A object that contains information about the instance profile.</p>
    #[doc(hidden)]
    pub instance_profile: std::option::Option<crate::types::InstanceProfile>,
}
impl DeviceInstance {
    /// <p>The Amazon Resource Name (ARN) of the device instance.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The ARN of the device.</p>
    pub fn device_arn(&self) -> std::option::Option<&str> {
        self.device_arn.as_deref()
    }
    /// <p>An array of strings that describe the device instance.</p>
    pub fn labels(&self) -> std::option::Option<&[std::string::String]> {
        self.labels.as_deref()
    }
    /// <p>The status of the device instance. Valid values are listed here.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::InstanceStatus> {
        self.status.as_ref()
    }
    /// <p>Unique device identifier for the device instance.</p>
    pub fn udid(&self) -> std::option::Option<&str> {
        self.udid.as_deref()
    }
    /// <p>A object that contains information about the instance profile.</p>
    pub fn instance_profile(&self) -> std::option::Option<&crate::types::InstanceProfile> {
        self.instance_profile.as_ref()
    }
}
impl DeviceInstance {
    /// Creates a new builder-style object to manufacture [`DeviceInstance`](crate::types::DeviceInstance).
    pub fn builder() -> crate::types::builders::DeviceInstanceBuilder {
        crate::types::builders::DeviceInstanceBuilder::default()
    }
}

/// A builder for [`DeviceInstance`](crate::types::DeviceInstance).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeviceInstanceBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) device_arn: std::option::Option<std::string::String>,
    pub(crate) labels: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) status: std::option::Option<crate::types::InstanceStatus>,
    pub(crate) udid: std::option::Option<std::string::String>,
    pub(crate) instance_profile: std::option::Option<crate::types::InstanceProfile>,
}
impl DeviceInstanceBuilder {
    /// <p>The Amazon Resource Name (ARN) of the device instance.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the device instance.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the device.</p>
    pub fn device_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the device.</p>
    pub fn set_device_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.device_arn = input;
        self
    }
    /// Appends an item to `labels`.
    ///
    /// To override the contents of this collection use [`set_labels`](Self::set_labels).
    ///
    /// <p>An array of strings that describe the device instance.</p>
    pub fn labels(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.labels.unwrap_or_default();
        v.push(input.into());
        self.labels = Some(v);
        self
    }
    /// <p>An array of strings that describe the device instance.</p>
    pub fn set_labels(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.labels = input;
        self
    }
    /// <p>The status of the device instance. Valid values are listed here.</p>
    pub fn status(mut self, input: crate::types::InstanceStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the device instance. Valid values are listed here.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::InstanceStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Unique device identifier for the device instance.</p>
    pub fn udid(mut self, input: impl Into<std::string::String>) -> Self {
        self.udid = Some(input.into());
        self
    }
    /// <p>Unique device identifier for the device instance.</p>
    pub fn set_udid(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.udid = input;
        self
    }
    /// <p>A object that contains information about the instance profile.</p>
    pub fn instance_profile(mut self, input: crate::types::InstanceProfile) -> Self {
        self.instance_profile = Some(input);
        self
    }
    /// <p>A object that contains information about the instance profile.</p>
    pub fn set_instance_profile(
        mut self,
        input: std::option::Option<crate::types::InstanceProfile>,
    ) -> Self {
        self.instance_profile = input;
        self
    }
    /// Consumes the builder and constructs a [`DeviceInstance`](crate::types::DeviceInstance).
    pub fn build(self) -> crate::types::DeviceInstance {
        crate::types::DeviceInstance {
            arn: self.arn,
            device_arn: self.device_arn,
            labels: self.labels,
            status: self.status,
            udid: self.udid,
            instance_profile: self.instance_profile,
        }
    }
}
