// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A <code>TestGridSession</code> is a single instance of a browser launched from the URL provided by a call to <code>CreateTestGridUrl</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TestGridSession {
    /// <p>The ARN of the session.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The state of the session.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::TestGridSessionStatus>,
    /// <p>The time that the session was started.</p>
    #[doc(hidden)]
    pub created: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time the session ended.</p>
    #[doc(hidden)]
    pub ended: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The number of billed minutes that were used for this session. </p>
    #[doc(hidden)]
    pub billing_minutes: std::option::Option<f64>,
    /// <p>A JSON object of options and parameters passed to the Selenium WebDriver.</p>
    #[doc(hidden)]
    pub selenium_properties: std::option::Option<std::string::String>,
}
impl TestGridSession {
    /// <p>The ARN of the session.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The state of the session.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::TestGridSessionStatus> {
        self.status.as_ref()
    }
    /// <p>The time that the session was started.</p>
    pub fn created(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created.as_ref()
    }
    /// <p>The time the session ended.</p>
    pub fn ended(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.ended.as_ref()
    }
    /// <p>The number of billed minutes that were used for this session. </p>
    pub fn billing_minutes(&self) -> std::option::Option<f64> {
        self.billing_minutes
    }
    /// <p>A JSON object of options and parameters passed to the Selenium WebDriver.</p>
    pub fn selenium_properties(&self) -> std::option::Option<&str> {
        self.selenium_properties.as_deref()
    }
}
impl TestGridSession {
    /// Creates a new builder-style object to manufacture [`TestGridSession`](crate::types::TestGridSession).
    pub fn builder() -> crate::types::builders::TestGridSessionBuilder {
        crate::types::builders::TestGridSessionBuilder::default()
    }
}

/// A builder for [`TestGridSession`](crate::types::TestGridSession).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TestGridSessionBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::TestGridSessionStatus>,
    pub(crate) created: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) ended: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) billing_minutes: std::option::Option<f64>,
    pub(crate) selenium_properties: std::option::Option<std::string::String>,
}
impl TestGridSessionBuilder {
    /// <p>The ARN of the session.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The ARN of the session.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The state of the session.</p>
    pub fn status(mut self, input: crate::types::TestGridSessionStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The state of the session.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::TestGridSessionStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The time that the session was started.</p>
    pub fn created(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created = Some(input);
        self
    }
    /// <p>The time that the session was started.</p>
    pub fn set_created(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.created = input;
        self
    }
    /// <p>The time the session ended.</p>
    pub fn ended(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.ended = Some(input);
        self
    }
    /// <p>The time the session ended.</p>
    pub fn set_ended(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.ended = input;
        self
    }
    /// <p>The number of billed minutes that were used for this session. </p>
    pub fn billing_minutes(mut self, input: f64) -> Self {
        self.billing_minutes = Some(input);
        self
    }
    /// <p>The number of billed minutes that were used for this session. </p>
    pub fn set_billing_minutes(mut self, input: std::option::Option<f64>) -> Self {
        self.billing_minutes = input;
        self
    }
    /// <p>A JSON object of options and parameters passed to the Selenium WebDriver.</p>
    pub fn selenium_properties(mut self, input: impl Into<std::string::String>) -> Self {
        self.selenium_properties = Some(input.into());
        self
    }
    /// <p>A JSON object of options and parameters passed to the Selenium WebDriver.</p>
    pub fn set_selenium_properties(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.selenium_properties = input;
        self
    }
    /// Consumes the builder and constructs a [`TestGridSession`](crate::types::TestGridSession).
    pub fn build(self) -> crate::types::TestGridSession {
        crate::types::TestGridSession {
            arn: self.arn,
            status: self.status,
            created: self.created,
            ended: self.ended,
            billing_minutes: self.billing_minutes,
            selenium_properties: self.selenium_properties,
        }
    }
}
