// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A JSON object that specifies the paths where the artifacts generated by the customer's tests, on the device or in the test environment, are pulled from.</p>
/// <p>Specify <code>deviceHostPaths</code> and optionally specify either <code>iosPaths</code> or <code>androidPaths</code>.</p>
/// <p>For web app tests, you can specify both <code>iosPaths</code> and <code>androidPaths</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CustomerArtifactPaths {
    /// <p>Comma-separated list of paths on the iOS device where the artifacts generated by the customer's tests are pulled from.</p>
    #[doc(hidden)]
    pub ios_paths: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Comma-separated list of paths on the Android device where the artifacts generated by the customer's tests are pulled from.</p>
    #[doc(hidden)]
    pub android_paths: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Comma-separated list of paths in the test execution environment where the artifacts generated by the customer's tests are pulled from.</p>
    #[doc(hidden)]
    pub device_host_paths: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl CustomerArtifactPaths {
    /// <p>Comma-separated list of paths on the iOS device where the artifacts generated by the customer's tests are pulled from.</p>
    pub fn ios_paths(&self) -> std::option::Option<&[std::string::String]> {
        self.ios_paths.as_deref()
    }
    /// <p>Comma-separated list of paths on the Android device where the artifacts generated by the customer's tests are pulled from.</p>
    pub fn android_paths(&self) -> std::option::Option<&[std::string::String]> {
        self.android_paths.as_deref()
    }
    /// <p>Comma-separated list of paths in the test execution environment where the artifacts generated by the customer's tests are pulled from.</p>
    pub fn device_host_paths(&self) -> std::option::Option<&[std::string::String]> {
        self.device_host_paths.as_deref()
    }
}
impl CustomerArtifactPaths {
    /// Creates a new builder-style object to manufacture [`CustomerArtifactPaths`](crate::types::CustomerArtifactPaths).
    pub fn builder() -> crate::types::builders::CustomerArtifactPathsBuilder {
        crate::types::builders::CustomerArtifactPathsBuilder::default()
    }
}

/// A builder for [`CustomerArtifactPaths`](crate::types::CustomerArtifactPaths).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CustomerArtifactPathsBuilder {
    pub(crate) ios_paths: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) android_paths: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) device_host_paths: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl CustomerArtifactPathsBuilder {
    /// Appends an item to `ios_paths`.
    ///
    /// To override the contents of this collection use [`set_ios_paths`](Self::set_ios_paths).
    ///
    /// <p>Comma-separated list of paths on the iOS device where the artifacts generated by the customer's tests are pulled from.</p>
    pub fn ios_paths(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.ios_paths.unwrap_or_default();
        v.push(input.into());
        self.ios_paths = Some(v);
        self
    }
    /// <p>Comma-separated list of paths on the iOS device where the artifacts generated by the customer's tests are pulled from.</p>
    pub fn set_ios_paths(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.ios_paths = input;
        self
    }
    /// Appends an item to `android_paths`.
    ///
    /// To override the contents of this collection use [`set_android_paths`](Self::set_android_paths).
    ///
    /// <p>Comma-separated list of paths on the Android device where the artifacts generated by the customer's tests are pulled from.</p>
    pub fn android_paths(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.android_paths.unwrap_or_default();
        v.push(input.into());
        self.android_paths = Some(v);
        self
    }
    /// <p>Comma-separated list of paths on the Android device where the artifacts generated by the customer's tests are pulled from.</p>
    pub fn set_android_paths(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.android_paths = input;
        self
    }
    /// Appends an item to `device_host_paths`.
    ///
    /// To override the contents of this collection use [`set_device_host_paths`](Self::set_device_host_paths).
    ///
    /// <p>Comma-separated list of paths in the test execution environment where the artifacts generated by the customer's tests are pulled from.</p>
    pub fn device_host_paths(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.device_host_paths.unwrap_or_default();
        v.push(input.into());
        self.device_host_paths = Some(v);
        self
    }
    /// <p>Comma-separated list of paths in the test execution environment where the artifacts generated by the customer's tests are pulled from.</p>
    pub fn set_device_host_paths(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.device_host_paths = input;
        self
    }
    /// Consumes the builder and constructs a [`CustomerArtifactPaths`](crate::types::CustomerArtifactPaths).
    pub fn build(self) -> crate::types::CustomerArtifactPaths {
        crate::types::CustomerArtifactPaths {
            ios_paths: self.ios_paths,
            android_paths: self.android_paths,
            device_host_paths: self.device_host_paths,
        }
    }
}
