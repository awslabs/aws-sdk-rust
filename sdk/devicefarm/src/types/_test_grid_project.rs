// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A Selenium testing project. Projects are used to collect and collate sessions.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TestGridProject {
    /// <p>The ARN for the project.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>A human-readable name for the project.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A human-readable description for the project.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The VPC security groups and subnets that are attached to a project.</p>
    #[doc(hidden)]
    pub vpc_config: std::option::Option<crate::types::TestGridVpcConfig>,
    /// <p>When the project was created.</p>
    #[doc(hidden)]
    pub created: std::option::Option<aws_smithy_types::DateTime>,
}
impl TestGridProject {
    /// <p>The ARN for the project.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>A human-readable name for the project.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A human-readable description for the project.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The VPC security groups and subnets that are attached to a project.</p>
    pub fn vpc_config(&self) -> std::option::Option<&crate::types::TestGridVpcConfig> {
        self.vpc_config.as_ref()
    }
    /// <p>When the project was created.</p>
    pub fn created(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created.as_ref()
    }
}
impl TestGridProject {
    /// Creates a new builder-style object to manufacture [`TestGridProject`](crate::types::TestGridProject).
    pub fn builder() -> crate::types::builders::TestGridProjectBuilder {
        crate::types::builders::TestGridProjectBuilder::default()
    }
}

/// A builder for [`TestGridProject`](crate::types::TestGridProject).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TestGridProjectBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) vpc_config: std::option::Option<crate::types::TestGridVpcConfig>,
    pub(crate) created: std::option::Option<aws_smithy_types::DateTime>,
}
impl TestGridProjectBuilder {
    /// <p>The ARN for the project.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The ARN for the project.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>A human-readable name for the project.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>A human-readable name for the project.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A human-readable description for the project.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A human-readable description for the project.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The VPC security groups and subnets that are attached to a project.</p>
    pub fn vpc_config(mut self, input: crate::types::TestGridVpcConfig) -> Self {
        self.vpc_config = Some(input);
        self
    }
    /// <p>The VPC security groups and subnets that are attached to a project.</p>
    pub fn set_vpc_config(
        mut self,
        input: std::option::Option<crate::types::TestGridVpcConfig>,
    ) -> Self {
        self.vpc_config = input;
        self
    }
    /// <p>When the project was created.</p>
    pub fn created(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created = Some(input);
        self
    }
    /// <p>When the project was created.</p>
    pub fn set_created(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.created = input;
        self
    }
    /// Consumes the builder and constructs a [`TestGridProject`](crate::types::TestGridProject).
    pub fn build(self) -> crate::types::TestGridProject {
        crate::types::TestGridProject {
            arn: self.arn,
            name: self.name,
            description: self.description,
            vpc_config: self.vpc_config,
            created: self.created,
        }
    }
}
