// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A collection of one or more problems, grouped by their result.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UniqueProblem {
    /// <p>A message about the unique problems' result.</p>
    pub message: ::std::option::Option<::std::string::String>,
    /// <p>Information about the problems.</p>
    pub problems: ::std::option::Option<::std::vec::Vec<crate::types::Problem>>,
}
impl UniqueProblem {
    /// <p>A message about the unique problems' result.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>Information about the problems.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.problems.is_none()`.
    pub fn problems(&self) -> &[crate::types::Problem] {
        self.problems.as_deref().unwrap_or_default()
    }
}
impl UniqueProblem {
    /// Creates a new builder-style object to manufacture [`UniqueProblem`](crate::types::UniqueProblem).
    pub fn builder() -> crate::types::builders::UniqueProblemBuilder {
        crate::types::builders::UniqueProblemBuilder::default()
    }
}

/// A builder for [`UniqueProblem`](crate::types::UniqueProblem).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UniqueProblemBuilder {
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) problems: ::std::option::Option<::std::vec::Vec<crate::types::Problem>>,
}
impl UniqueProblemBuilder {
    /// <p>A message about the unique problems' result.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A message about the unique problems' result.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>A message about the unique problems' result.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// Appends an item to `problems`.
    ///
    /// To override the contents of this collection use [`set_problems`](Self::set_problems).
    ///
    /// <p>Information about the problems.</p>
    pub fn problems(mut self, input: crate::types::Problem) -> Self {
        let mut v = self.problems.unwrap_or_default();
        v.push(input);
        self.problems = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the problems.</p>
    pub fn set_problems(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Problem>>) -> Self {
        self.problems = input;
        self
    }
    /// <p>Information about the problems.</p>
    pub fn get_problems(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Problem>> {
        &self.problems
    }
    /// Consumes the builder and constructs a [`UniqueProblem`](crate::types::UniqueProblem).
    pub fn build(self) -> crate::types::UniqueProblem {
        crate::types::UniqueProblem {
            message: self.message,
            problems: self.problems,
        }
    }
}
