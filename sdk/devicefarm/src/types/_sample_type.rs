// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `SampleType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let sampletype = unimplemented!();
/// match sampletype {
///     SampleType::Cpu => { /* ... */ },
///     SampleType::Memory => { /* ... */ },
///     SampleType::NativeAvgDrawtime => { /* ... */ },
///     SampleType::NativeFps => { /* ... */ },
///     SampleType::NativeFrames => { /* ... */ },
///     SampleType::NativeMaxDrawtime => { /* ... */ },
///     SampleType::NativeMinDrawtime => { /* ... */ },
///     SampleType::OpenglAvgDrawtime => { /* ... */ },
///     SampleType::OpenglFps => { /* ... */ },
///     SampleType::OpenglFrames => { /* ... */ },
///     SampleType::OpenglMaxDrawtime => { /* ... */ },
///     SampleType::OpenglMinDrawtime => { /* ... */ },
///     SampleType::Rx => { /* ... */ },
///     SampleType::RxRate => { /* ... */ },
///     SampleType::Threads => { /* ... */ },
///     SampleType::Tx => { /* ... */ },
///     SampleType::TxRate => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `sampletype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `SampleType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `SampleType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `SampleType::NewFeature` is defined.
/// Specifically, when `sampletype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `SampleType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum SampleType {
    #[allow(missing_docs)] // documentation missing in model
    Cpu,
    #[allow(missing_docs)] // documentation missing in model
    Memory,
    #[allow(missing_docs)] // documentation missing in model
    NativeAvgDrawtime,
    #[allow(missing_docs)] // documentation missing in model
    NativeFps,
    #[allow(missing_docs)] // documentation missing in model
    NativeFrames,
    #[allow(missing_docs)] // documentation missing in model
    NativeMaxDrawtime,
    #[allow(missing_docs)] // documentation missing in model
    NativeMinDrawtime,
    #[allow(missing_docs)] // documentation missing in model
    OpenglAvgDrawtime,
    #[allow(missing_docs)] // documentation missing in model
    OpenglFps,
    #[allow(missing_docs)] // documentation missing in model
    OpenglFrames,
    #[allow(missing_docs)] // documentation missing in model
    OpenglMaxDrawtime,
    #[allow(missing_docs)] // documentation missing in model
    OpenglMinDrawtime,
    #[allow(missing_docs)] // documentation missing in model
    Rx,
    #[allow(missing_docs)] // documentation missing in model
    RxRate,
    #[allow(missing_docs)] // documentation missing in model
    Threads,
    #[allow(missing_docs)] // documentation missing in model
    Tx,
    #[allow(missing_docs)] // documentation missing in model
    TxRate,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for SampleType {
    fn from(s: &str) -> Self {
        match s {
            "CPU" => SampleType::Cpu,
            "MEMORY" => SampleType::Memory,
            "NATIVE_AVG_DRAWTIME" => SampleType::NativeAvgDrawtime,
            "NATIVE_FPS" => SampleType::NativeFps,
            "NATIVE_FRAMES" => SampleType::NativeFrames,
            "NATIVE_MAX_DRAWTIME" => SampleType::NativeMaxDrawtime,
            "NATIVE_MIN_DRAWTIME" => SampleType::NativeMinDrawtime,
            "OPENGL_AVG_DRAWTIME" => SampleType::OpenglAvgDrawtime,
            "OPENGL_FPS" => SampleType::OpenglFps,
            "OPENGL_FRAMES" => SampleType::OpenglFrames,
            "OPENGL_MAX_DRAWTIME" => SampleType::OpenglMaxDrawtime,
            "OPENGL_MIN_DRAWTIME" => SampleType::OpenglMinDrawtime,
            "RX" => SampleType::Rx,
            "RX_RATE" => SampleType::RxRate,
            "THREADS" => SampleType::Threads,
            "TX" => SampleType::Tx,
            "TX_RATE" => SampleType::TxRate,
            other => SampleType::Unknown(crate::primitives::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for SampleType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(SampleType::from(s))
    }
}
impl SampleType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            SampleType::Cpu => "CPU",
            SampleType::Memory => "MEMORY",
            SampleType::NativeAvgDrawtime => "NATIVE_AVG_DRAWTIME",
            SampleType::NativeFps => "NATIVE_FPS",
            SampleType::NativeFrames => "NATIVE_FRAMES",
            SampleType::NativeMaxDrawtime => "NATIVE_MAX_DRAWTIME",
            SampleType::NativeMinDrawtime => "NATIVE_MIN_DRAWTIME",
            SampleType::OpenglAvgDrawtime => "OPENGL_AVG_DRAWTIME",
            SampleType::OpenglFps => "OPENGL_FPS",
            SampleType::OpenglFrames => "OPENGL_FRAMES",
            SampleType::OpenglMaxDrawtime => "OPENGL_MAX_DRAWTIME",
            SampleType::OpenglMinDrawtime => "OPENGL_MIN_DRAWTIME",
            SampleType::Rx => "RX",
            SampleType::RxRate => "RX_RATE",
            SampleType::Threads => "THREADS",
            SampleType::Tx => "TX",
            SampleType::TxRate => "TX_RATE",
            SampleType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "CPU",
            "MEMORY",
            "NATIVE_AVG_DRAWTIME",
            "NATIVE_FPS",
            "NATIVE_FRAMES",
            "NATIVE_MAX_DRAWTIME",
            "NATIVE_MIN_DRAWTIME",
            "OPENGL_AVG_DRAWTIME",
            "OPENGL_FPS",
            "OPENGL_FRAMES",
            "OPENGL_MAX_DRAWTIME",
            "OPENGL_MIN_DRAWTIME",
            "RX",
            "RX_RATE",
            "THREADS",
            "TX",
            "TX_RATE",
        ]
    }
}
impl AsRef<str> for SampleType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
