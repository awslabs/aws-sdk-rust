// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An action taken by a <code>TestGridSession</code> browser instance.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TestGridSessionAction {
    /// <p>The action taken by the session.</p>
    #[doc(hidden)]
    pub action: std::option::Option<std::string::String>,
    /// <p>The time that the session invoked the action.</p>
    #[doc(hidden)]
    pub started: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time, in milliseconds, that the action took to complete in the browser.</p>
    #[doc(hidden)]
    pub duration: std::option::Option<i64>,
    /// <p>HTTP status code returned to the browser when the action was taken.</p>
    #[doc(hidden)]
    pub status_code: std::option::Option<std::string::String>,
    /// <p>HTTP method that the browser used to make the request.</p>
    #[doc(hidden)]
    pub request_method: std::option::Option<std::string::String>,
}
impl TestGridSessionAction {
    /// <p>The action taken by the session.</p>
    pub fn action(&self) -> std::option::Option<&str> {
        self.action.as_deref()
    }
    /// <p>The time that the session invoked the action.</p>
    pub fn started(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.started.as_ref()
    }
    /// <p>The time, in milliseconds, that the action took to complete in the browser.</p>
    pub fn duration(&self) -> std::option::Option<i64> {
        self.duration
    }
    /// <p>HTTP status code returned to the browser when the action was taken.</p>
    pub fn status_code(&self) -> std::option::Option<&str> {
        self.status_code.as_deref()
    }
    /// <p>HTTP method that the browser used to make the request.</p>
    pub fn request_method(&self) -> std::option::Option<&str> {
        self.request_method.as_deref()
    }
}
impl TestGridSessionAction {
    /// Creates a new builder-style object to manufacture [`TestGridSessionAction`](crate::types::TestGridSessionAction).
    pub fn builder() -> crate::types::builders::TestGridSessionActionBuilder {
        crate::types::builders::TestGridSessionActionBuilder::default()
    }
}

/// A builder for [`TestGridSessionAction`](crate::types::TestGridSessionAction).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TestGridSessionActionBuilder {
    pub(crate) action: std::option::Option<std::string::String>,
    pub(crate) started: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) duration: std::option::Option<i64>,
    pub(crate) status_code: std::option::Option<std::string::String>,
    pub(crate) request_method: std::option::Option<std::string::String>,
}
impl TestGridSessionActionBuilder {
    /// <p>The action taken by the session.</p>
    pub fn action(mut self, input: impl Into<std::string::String>) -> Self {
        self.action = Some(input.into());
        self
    }
    /// <p>The action taken by the session.</p>
    pub fn set_action(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.action = input;
        self
    }
    /// <p>The time that the session invoked the action.</p>
    pub fn started(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.started = Some(input);
        self
    }
    /// <p>The time that the session invoked the action.</p>
    pub fn set_started(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.started = input;
        self
    }
    /// <p>The time, in milliseconds, that the action took to complete in the browser.</p>
    pub fn duration(mut self, input: i64) -> Self {
        self.duration = Some(input);
        self
    }
    /// <p>The time, in milliseconds, that the action took to complete in the browser.</p>
    pub fn set_duration(mut self, input: std::option::Option<i64>) -> Self {
        self.duration = input;
        self
    }
    /// <p>HTTP status code returned to the browser when the action was taken.</p>
    pub fn status_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_code = Some(input.into());
        self
    }
    /// <p>HTTP status code returned to the browser when the action was taken.</p>
    pub fn set_status_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_code = input;
        self
    }
    /// <p>HTTP method that the browser used to make the request.</p>
    pub fn request_method(mut self, input: impl Into<std::string::String>) -> Self {
        self.request_method = Some(input.into());
        self
    }
    /// <p>HTTP method that the browser used to make the request.</p>
    pub fn set_request_method(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.request_method = input;
        self
    }
    /// Consumes the builder and constructs a [`TestGridSessionAction`](crate::types::TestGridSessionAction).
    pub fn build(self) -> crate::types::TestGridSessionAction {
        crate::types::TestGridSessionAction {
            action: self.action,
            started: self.started,
            duration: self.duration,
            status_code: self.status_code,
            request_method: self.request_method,
        }
    }
}
