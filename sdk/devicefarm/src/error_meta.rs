// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>An invalid argument was specified.</p>
    ArgumentException(crate::error::ArgumentException),
    /// <p>The requested object could not be deleted.</p>
    CannotDeleteException(crate::error::CannotDeleteException),
    /// <p>An entity with the same name already exists.</p>
    IdempotencyException(crate::error::IdempotencyException),
    /// <p>An internal exception was raised in the service. Contact <a href="mailto:aws-devicefarm-support@amazon.com">aws-devicefarm-support@amazon.com</a> if you see this error. </p>
    InternalServiceException(crate::error::InternalServiceException),
    /// <p>There was an error with the update request, or you do not have sufficient permissions to update this VPC endpoint configuration.</p>
    InvalidOperationException(crate::error::InvalidOperationException),
    /// <p>A limit was exceeded.</p>
    LimitExceededException(crate::error::LimitExceededException),
    /// <p>Exception gets thrown when a user is not eligible to perform the specified transaction.</p>
    NotEligibleException(crate::error::NotEligibleException),
    /// <p>The specified entity was not found.</p>
    NotFoundException(crate::error::NotFoundException),
    /// <p>There was a problem with the service account.</p>
    ServiceAccountException(crate::error::ServiceAccountException),
    /// <p>The operation was not successful. Try again.</p>
    TagOperationException(crate::error::TagOperationException),
    /// <p>The request doesn't comply with the AWS Identity and Access Management (IAM) tag policy. Correct your request and then retry it.</p>
    TagPolicyException(crate::error::TagPolicyException),
    /// <p>The list of tags on the repository is over the limit. The maximum number of tags that can be applied to a repository is 50. </p>
    TooManyTagsException(crate::error::TooManyTagsException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ArgumentException(inner) => inner.fmt(f),
            Error::CannotDeleteException(inner) => inner.fmt(f),
            Error::IdempotencyException(inner) => inner.fmt(f),
            Error::InternalServiceException(inner) => inner.fmt(f),
            Error::InvalidOperationException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::NotEligibleException(inner) => inner.fmt(f),
            Error::NotFoundException(inner) => inner.fmt(f),
            Error::ServiceAccountException(inner) => inner.fmt(f),
            Error::TagOperationException(inner) => inner.fmt(f),
            Error::TagPolicyException(inner) => inner.fmt(f),
            Error::TooManyTagsException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDevicePoolError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDevicePoolError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDevicePoolError> for Error {
    fn from(err: crate::error::CreateDevicePoolError) -> Self {
        match err {
            crate::error::CreateDevicePoolError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::CreateDevicePoolError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateDevicePoolError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateDevicePoolError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::CreateDevicePoolError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateInstanceProfileError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateInstanceProfileError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateInstanceProfileError> for Error {
    fn from(err: crate::error::CreateInstanceProfileError) -> Self {
        match err {
            crate::error::CreateInstanceProfileError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::CreateInstanceProfileError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateInstanceProfileError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateInstanceProfileError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::CreateInstanceProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateNetworkProfileError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateNetworkProfileError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateNetworkProfileError> for Error {
    fn from(err: crate::error::CreateNetworkProfileError) -> Self {
        match err {
            crate::error::CreateNetworkProfileError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::CreateNetworkProfileError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateNetworkProfileError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateNetworkProfileError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::CreateNetworkProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateProjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateProjectError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateProjectError> for Error {
    fn from(err: crate::error::CreateProjectError) -> Self {
        match err {
            crate::error::CreateProjectError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::CreateProjectError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateProjectError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateProjectError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::CreateProjectError::TagOperationException(inner) => {
                Error::TagOperationException(inner)
            }
            crate::error::CreateProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateRemoteAccessSessionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateRemoteAccessSessionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateRemoteAccessSessionError> for Error {
    fn from(err: crate::error::CreateRemoteAccessSessionError) -> Self {
        match err {
            crate::error::CreateRemoteAccessSessionError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::CreateRemoteAccessSessionError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateRemoteAccessSessionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateRemoteAccessSessionError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::CreateRemoteAccessSessionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateTestGridProjectError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateTestGridProjectError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateTestGridProjectError> for Error {
    fn from(err: crate::error::CreateTestGridProjectError) -> Self {
        match err {
            crate::error::CreateTestGridProjectError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::CreateTestGridProjectError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CreateTestGridProjectError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateTestGridProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateTestGridUrlError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateTestGridUrlError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateTestGridUrlError> for Error {
    fn from(err: crate::error::CreateTestGridUrlError) -> Self {
        match err {
            crate::error::CreateTestGridUrlError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::CreateTestGridUrlError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CreateTestGridUrlError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateTestGridUrlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateUploadError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateUploadError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateUploadError> for Error {
    fn from(err: crate::error::CreateUploadError) -> Self {
        match err {
            crate::error::CreateUploadError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::CreateUploadError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateUploadError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateUploadError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::CreateUploadError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateVPCEConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateVPCEConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateVPCEConfigurationError> for Error {
    fn from(err: crate::error::CreateVPCEConfigurationError) -> Self {
        match err {
            crate::error::CreateVPCEConfigurationError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::CreateVPCEConfigurationError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateVPCEConfigurationError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::CreateVPCEConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDevicePoolError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteDevicePoolError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDevicePoolError> for Error {
    fn from(err: crate::error::DeleteDevicePoolError) -> Self {
        match err {
            crate::error::DeleteDevicePoolError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::DeleteDevicePoolError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteDevicePoolError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteDevicePoolError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::DeleteDevicePoolError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteInstanceProfileError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteInstanceProfileError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteInstanceProfileError> for Error {
    fn from(err: crate::error::DeleteInstanceProfileError) -> Self {
        match err {
            crate::error::DeleteInstanceProfileError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::DeleteInstanceProfileError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteInstanceProfileError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteInstanceProfileError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::DeleteInstanceProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteNetworkProfileError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteNetworkProfileError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteNetworkProfileError> for Error {
    fn from(err: crate::error::DeleteNetworkProfileError) -> Self {
        match err {
            crate::error::DeleteNetworkProfileError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::DeleteNetworkProfileError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteNetworkProfileError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteNetworkProfileError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::DeleteNetworkProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteProjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteProjectError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteProjectError> for Error {
    fn from(err: crate::error::DeleteProjectError) -> Self {
        match err {
            crate::error::DeleteProjectError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::DeleteProjectError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteProjectError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteProjectError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::DeleteProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteRemoteAccessSessionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteRemoteAccessSessionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteRemoteAccessSessionError> for Error {
    fn from(err: crate::error::DeleteRemoteAccessSessionError) -> Self {
        match err {
            crate::error::DeleteRemoteAccessSessionError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::DeleteRemoteAccessSessionError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteRemoteAccessSessionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteRemoteAccessSessionError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::DeleteRemoteAccessSessionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteRunError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteRunError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteRunError> for Error {
    fn from(err: crate::error::DeleteRunError) -> Self {
        match err {
            crate::error::DeleteRunError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::DeleteRunError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteRunError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteRunError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::DeleteRunError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteTestGridProjectError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteTestGridProjectError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteTestGridProjectError> for Error {
    fn from(err: crate::error::DeleteTestGridProjectError) -> Self {
        match err {
            crate::error::DeleteTestGridProjectError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::DeleteTestGridProjectError::CannotDeleteException(inner) => {
                Error::CannotDeleteException(inner)
            }
            crate::error::DeleteTestGridProjectError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DeleteTestGridProjectError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteTestGridProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteUploadError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteUploadError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteUploadError> for Error {
    fn from(err: crate::error::DeleteUploadError) -> Self {
        match err {
            crate::error::DeleteUploadError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::DeleteUploadError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteUploadError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteUploadError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::DeleteUploadError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteVPCEConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteVPCEConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteVPCEConfigurationError> for Error {
    fn from(err: crate::error::DeleteVPCEConfigurationError) -> Self {
        match err {
            crate::error::DeleteVPCEConfigurationError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::DeleteVPCEConfigurationError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::error::DeleteVPCEConfigurationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteVPCEConfigurationError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::DeleteVPCEConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAccountSettingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetAccountSettingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAccountSettingsError> for Error {
    fn from(err: crate::error::GetAccountSettingsError) -> Self {
        match err {
            crate::error::GetAccountSettingsError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::GetAccountSettingsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetAccountSettingsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetAccountSettingsError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::GetAccountSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDeviceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetDeviceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDeviceError> for Error {
    fn from(err: crate::error::GetDeviceError) -> Self {
        match err {
            crate::error::GetDeviceError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::GetDeviceError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetDeviceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetDeviceError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::GetDeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDeviceInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetDeviceInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDeviceInstanceError> for Error {
    fn from(err: crate::error::GetDeviceInstanceError) -> Self {
        match err {
            crate::error::GetDeviceInstanceError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::GetDeviceInstanceError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetDeviceInstanceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetDeviceInstanceError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::GetDeviceInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDevicePoolError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetDevicePoolError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDevicePoolError> for Error {
    fn from(err: crate::error::GetDevicePoolError) -> Self {
        match err {
            crate::error::GetDevicePoolError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::GetDevicePoolError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetDevicePoolError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetDevicePoolError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::GetDevicePoolError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDevicePoolCompatibilityError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetDevicePoolCompatibilityError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDevicePoolCompatibilityError> for Error {
    fn from(err: crate::error::GetDevicePoolCompatibilityError) -> Self {
        match err {
            crate::error::GetDevicePoolCompatibilityError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::GetDevicePoolCompatibilityError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetDevicePoolCompatibilityError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetDevicePoolCompatibilityError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::GetDevicePoolCompatibilityError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetInstanceProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetInstanceProfileError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetInstanceProfileError> for Error {
    fn from(err: crate::error::GetInstanceProfileError) -> Self {
        match err {
            crate::error::GetInstanceProfileError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::GetInstanceProfileError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetInstanceProfileError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetInstanceProfileError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::GetInstanceProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetJobError> for Error {
    fn from(err: crate::error::GetJobError) -> Self {
        match err {
            crate::error::GetJobError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::error::GetJobError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetJobError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetJobError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::GetJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetNetworkProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetNetworkProfileError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetNetworkProfileError> for Error {
    fn from(err: crate::error::GetNetworkProfileError) -> Self {
        match err {
            crate::error::GetNetworkProfileError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::GetNetworkProfileError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetNetworkProfileError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetNetworkProfileError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::GetNetworkProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetOfferingStatusError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetOfferingStatusError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetOfferingStatusError> for Error {
    fn from(err: crate::error::GetOfferingStatusError) -> Self {
        match err {
            crate::error::GetOfferingStatusError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::GetOfferingStatusError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetOfferingStatusError::NotEligibleException(inner) => {
                Error::NotEligibleException(inner)
            }
            crate::error::GetOfferingStatusError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetOfferingStatusError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::GetOfferingStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetProjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetProjectError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetProjectError> for Error {
    fn from(err: crate::error::GetProjectError) -> Self {
        match err {
            crate::error::GetProjectError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::GetProjectError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetProjectError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetProjectError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::GetProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRemoteAccessSessionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetRemoteAccessSessionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRemoteAccessSessionError> for Error {
    fn from(err: crate::error::GetRemoteAccessSessionError) -> Self {
        match err {
            crate::error::GetRemoteAccessSessionError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::GetRemoteAccessSessionError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetRemoteAccessSessionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetRemoteAccessSessionError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::GetRemoteAccessSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRunError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetRunError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRunError> for Error {
    fn from(err: crate::error::GetRunError) -> Self {
        match err {
            crate::error::GetRunError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::error::GetRunError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetRunError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetRunError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::GetRunError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSuiteError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetSuiteError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSuiteError> for Error {
    fn from(err: crate::error::GetSuiteError) -> Self {
        match err {
            crate::error::GetSuiteError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::GetSuiteError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetSuiteError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetSuiteError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::GetSuiteError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetTestError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetTestError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetTestError> for Error {
    fn from(err: crate::error::GetTestError) -> Self {
        match err {
            crate::error::GetTestError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::error::GetTestError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetTestError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetTestError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::GetTestError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetTestGridProjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetTestGridProjectError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetTestGridProjectError> for Error {
    fn from(err: crate::error::GetTestGridProjectError) -> Self {
        match err {
            crate::error::GetTestGridProjectError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::GetTestGridProjectError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::GetTestGridProjectError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetTestGridProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetTestGridSessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetTestGridSessionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetTestGridSessionError> for Error {
    fn from(err: crate::error::GetTestGridSessionError) -> Self {
        match err {
            crate::error::GetTestGridSessionError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::GetTestGridSessionError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::GetTestGridSessionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetTestGridSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetUploadError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetUploadError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetUploadError> for Error {
    fn from(err: crate::error::GetUploadError) -> Self {
        match err {
            crate::error::GetUploadError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::GetUploadError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetUploadError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetUploadError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::GetUploadError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetVPCEConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetVPCEConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetVPCEConfigurationError> for Error {
    fn from(err: crate::error::GetVPCEConfigurationError) -> Self {
        match err {
            crate::error::GetVPCEConfigurationError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::GetVPCEConfigurationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetVPCEConfigurationError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::GetVPCEConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::InstallToRemoteAccessSessionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::InstallToRemoteAccessSessionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::InstallToRemoteAccessSessionError> for Error {
    fn from(err: crate::error::InstallToRemoteAccessSessionError) -> Self {
        match err {
            crate::error::InstallToRemoteAccessSessionError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::InstallToRemoteAccessSessionError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::InstallToRemoteAccessSessionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::InstallToRemoteAccessSessionError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::InstallToRemoteAccessSessionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListArtifactsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListArtifactsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListArtifactsError> for Error {
    fn from(err: crate::error::ListArtifactsError) -> Self {
        match err {
            crate::error::ListArtifactsError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::ListArtifactsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ListArtifactsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListArtifactsError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::ListArtifactsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDeviceInstancesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListDeviceInstancesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDeviceInstancesError> for Error {
    fn from(err: crate::error::ListDeviceInstancesError) -> Self {
        match err {
            crate::error::ListDeviceInstancesError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::ListDeviceInstancesError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ListDeviceInstancesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListDeviceInstancesError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::ListDeviceInstancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDevicePoolsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListDevicePoolsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDevicePoolsError> for Error {
    fn from(err: crate::error::ListDevicePoolsError) -> Self {
        match err {
            crate::error::ListDevicePoolsError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::ListDevicePoolsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ListDevicePoolsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListDevicePoolsError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::ListDevicePoolsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDevicesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListDevicesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDevicesError> for Error {
    fn from(err: crate::error::ListDevicesError) -> Self {
        match err {
            crate::error::ListDevicesError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::ListDevicesError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ListDevicesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListDevicesError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::ListDevicesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListInstanceProfilesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListInstanceProfilesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListInstanceProfilesError> for Error {
    fn from(err: crate::error::ListInstanceProfilesError) -> Self {
        match err {
            crate::error::ListInstanceProfilesError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::ListInstanceProfilesError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ListInstanceProfilesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListInstanceProfilesError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::ListInstanceProfilesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListJobsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListJobsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListJobsError> for Error {
    fn from(err: crate::error::ListJobsError) -> Self {
        match err {
            crate::error::ListJobsError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::ListJobsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ListJobsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListJobsError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::ListJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListNetworkProfilesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListNetworkProfilesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListNetworkProfilesError> for Error {
    fn from(err: crate::error::ListNetworkProfilesError) -> Self {
        match err {
            crate::error::ListNetworkProfilesError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::ListNetworkProfilesError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ListNetworkProfilesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListNetworkProfilesError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::ListNetworkProfilesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListOfferingPromotionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListOfferingPromotionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListOfferingPromotionsError> for Error {
    fn from(err: crate::error::ListOfferingPromotionsError) -> Self {
        match err {
            crate::error::ListOfferingPromotionsError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::ListOfferingPromotionsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ListOfferingPromotionsError::NotEligibleException(inner) => {
                Error::NotEligibleException(inner)
            }
            crate::error::ListOfferingPromotionsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListOfferingPromotionsError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::ListOfferingPromotionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListOfferingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListOfferingsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListOfferingsError> for Error {
    fn from(err: crate::error::ListOfferingsError) -> Self {
        match err {
            crate::error::ListOfferingsError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::ListOfferingsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ListOfferingsError::NotEligibleException(inner) => {
                Error::NotEligibleException(inner)
            }
            crate::error::ListOfferingsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListOfferingsError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::ListOfferingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListOfferingTransactionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListOfferingTransactionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListOfferingTransactionsError> for Error {
    fn from(err: crate::error::ListOfferingTransactionsError) -> Self {
        match err {
            crate::error::ListOfferingTransactionsError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::ListOfferingTransactionsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ListOfferingTransactionsError::NotEligibleException(inner) => {
                Error::NotEligibleException(inner)
            }
            crate::error::ListOfferingTransactionsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListOfferingTransactionsError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::ListOfferingTransactionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListProjectsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListProjectsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListProjectsError> for Error {
    fn from(err: crate::error::ListProjectsError) -> Self {
        match err {
            crate::error::ListProjectsError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::ListProjectsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ListProjectsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListProjectsError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::ListProjectsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListRemoteAccessSessionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListRemoteAccessSessionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListRemoteAccessSessionsError> for Error {
    fn from(err: crate::error::ListRemoteAccessSessionsError) -> Self {
        match err {
            crate::error::ListRemoteAccessSessionsError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::ListRemoteAccessSessionsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ListRemoteAccessSessionsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListRemoteAccessSessionsError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::ListRemoteAccessSessionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListRunsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListRunsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListRunsError> for Error {
    fn from(err: crate::error::ListRunsError) -> Self {
        match err {
            crate::error::ListRunsError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::ListRunsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ListRunsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListRunsError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::ListRunsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListSamplesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListSamplesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListSamplesError> for Error {
    fn from(err: crate::error::ListSamplesError) -> Self {
        match err {
            crate::error::ListSamplesError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::ListSamplesError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ListSamplesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListSamplesError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::ListSamplesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListSuitesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListSuitesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListSuitesError> for Error {
    fn from(err: crate::error::ListSuitesError) -> Self {
        match err {
            crate::error::ListSuitesError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::ListSuitesError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ListSuitesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListSuitesError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::ListSuitesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::ListTagsForResourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListTagsForResourceError::TagOperationException(inner) => {
                Error::TagOperationException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTestGridProjectsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTestGridProjectsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTestGridProjectsError> for Error {
    fn from(err: crate::error::ListTestGridProjectsError) -> Self {
        match err {
            crate::error::ListTestGridProjectsError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::ListTestGridProjectsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListTestGridProjectsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTestGridSessionActionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTestGridSessionActionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTestGridSessionActionsError> for Error {
    fn from(err: crate::error::ListTestGridSessionActionsError) -> Self {
        match err {
            crate::error::ListTestGridSessionActionsError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::ListTestGridSessionActionsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListTestGridSessionActionsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListTestGridSessionActionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTestGridSessionArtifactsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTestGridSessionArtifactsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTestGridSessionArtifactsError> for Error {
    fn from(err: crate::error::ListTestGridSessionArtifactsError) -> Self {
        match err {
            crate::error::ListTestGridSessionArtifactsError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::ListTestGridSessionArtifactsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListTestGridSessionArtifactsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListTestGridSessionArtifactsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTestGridSessionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTestGridSessionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTestGridSessionsError> for Error {
    fn from(err: crate::error::ListTestGridSessionsError) -> Self {
        match err {
            crate::error::ListTestGridSessionsError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::ListTestGridSessionsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListTestGridSessionsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListTestGridSessionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTestsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListTestsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTestsError> for Error {
    fn from(err: crate::error::ListTestsError) -> Self {
        match err {
            crate::error::ListTestsError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::ListTestsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ListTestsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListTestsError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::ListTestsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListUniqueProblemsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListUniqueProblemsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListUniqueProblemsError> for Error {
    fn from(err: crate::error::ListUniqueProblemsError) -> Self {
        match err {
            crate::error::ListUniqueProblemsError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::ListUniqueProblemsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ListUniqueProblemsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListUniqueProblemsError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::ListUniqueProblemsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListUploadsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListUploadsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListUploadsError> for Error {
    fn from(err: crate::error::ListUploadsError) -> Self {
        match err {
            crate::error::ListUploadsError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::ListUploadsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ListUploadsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListUploadsError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::ListUploadsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListVPCEConfigurationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListVPCEConfigurationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListVPCEConfigurationsError> for Error {
    fn from(err: crate::error::ListVPCEConfigurationsError) -> Self {
        match err {
            crate::error::ListVPCEConfigurationsError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::ListVPCEConfigurationsError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::ListVPCEConfigurationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PurchaseOfferingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PurchaseOfferingError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PurchaseOfferingError> for Error {
    fn from(err: crate::error::PurchaseOfferingError) -> Self {
        match err {
            crate::error::PurchaseOfferingError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::PurchaseOfferingError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::PurchaseOfferingError::NotEligibleException(inner) => {
                Error::NotEligibleException(inner)
            }
            crate::error::PurchaseOfferingError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::PurchaseOfferingError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::PurchaseOfferingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RenewOfferingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::RenewOfferingError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RenewOfferingError> for Error {
    fn from(err: crate::error::RenewOfferingError) -> Self {
        match err {
            crate::error::RenewOfferingError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::RenewOfferingError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::RenewOfferingError::NotEligibleException(inner) => {
                Error::NotEligibleException(inner)
            }
            crate::error::RenewOfferingError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::RenewOfferingError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::RenewOfferingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ScheduleRunError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ScheduleRunError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ScheduleRunError> for Error {
    fn from(err: crate::error::ScheduleRunError) -> Self {
        match err {
            crate::error::ScheduleRunError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::ScheduleRunError::IdempotencyException(inner) => {
                Error::IdempotencyException(inner)
            }
            crate::error::ScheduleRunError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ScheduleRunError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ScheduleRunError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::ScheduleRunError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StopJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopJobError> for Error {
    fn from(err: crate::error::StopJobError) -> Self {
        match err {
            crate::error::StopJobError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::error::StopJobError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::StopJobError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::StopJobError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::StopJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopRemoteAccessSessionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StopRemoteAccessSessionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopRemoteAccessSessionError> for Error {
    fn from(err: crate::error::StopRemoteAccessSessionError) -> Self {
        match err {
            crate::error::StopRemoteAccessSessionError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::StopRemoteAccessSessionError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::StopRemoteAccessSessionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::StopRemoteAccessSessionError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::StopRemoteAccessSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopRunError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StopRunError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopRunError> for Error {
    fn from(err: crate::error::StopRunError) -> Self {
        match err {
            crate::error::StopRunError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::error::StopRunError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::StopRunError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::StopRunError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::StopRunError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::TagResourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::TagResourceError::TagOperationException(inner) => {
                Error::TagOperationException(inner)
            }
            crate::error::TagResourceError::TagPolicyException(inner) => {
                Error::TagPolicyException(inner)
            }
            crate::error::TagResourceError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::UntagResourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UntagResourceError::TagOperationException(inner) => {
                Error::TagOperationException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDeviceInstanceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateDeviceInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateDeviceInstanceError> for Error {
    fn from(err: crate::error::UpdateDeviceInstanceError) -> Self {
        match err {
            crate::error::UpdateDeviceInstanceError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::UpdateDeviceInstanceError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateDeviceInstanceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateDeviceInstanceError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::UpdateDeviceInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDevicePoolError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateDevicePoolError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateDevicePoolError> for Error {
    fn from(err: crate::error::UpdateDevicePoolError) -> Self {
        match err {
            crate::error::UpdateDevicePoolError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::UpdateDevicePoolError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateDevicePoolError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateDevicePoolError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::UpdateDevicePoolError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateInstanceProfileError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateInstanceProfileError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateInstanceProfileError> for Error {
    fn from(err: crate::error::UpdateInstanceProfileError) -> Self {
        match err {
            crate::error::UpdateInstanceProfileError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::UpdateInstanceProfileError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateInstanceProfileError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateInstanceProfileError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::UpdateInstanceProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateNetworkProfileError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateNetworkProfileError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateNetworkProfileError> for Error {
    fn from(err: crate::error::UpdateNetworkProfileError) -> Self {
        match err {
            crate::error::UpdateNetworkProfileError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::UpdateNetworkProfileError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateNetworkProfileError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateNetworkProfileError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::UpdateNetworkProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateProjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateProjectError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateProjectError> for Error {
    fn from(err: crate::error::UpdateProjectError) -> Self {
        match err {
            crate::error::UpdateProjectError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::UpdateProjectError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateProjectError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateProjectError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::UpdateProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateTestGridProjectError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateTestGridProjectError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateTestGridProjectError> for Error {
    fn from(err: crate::error::UpdateTestGridProjectError) -> Self {
        match err {
            crate::error::UpdateTestGridProjectError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::UpdateTestGridProjectError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateTestGridProjectError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateTestGridProjectError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateTestGridProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateUploadError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateUploadError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateUploadError> for Error {
    fn from(err: crate::error::UpdateUploadError) -> Self {
        match err {
            crate::error::UpdateUploadError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::UpdateUploadError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateUploadError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateUploadError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::UpdateUploadError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateVPCEConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateVPCEConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateVPCEConfigurationError> for Error {
    fn from(err: crate::error::UpdateVPCEConfigurationError) -> Self {
        match err {
            crate::error::UpdateVPCEConfigurationError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::error::UpdateVPCEConfigurationError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::error::UpdateVPCEConfigurationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateVPCEConfigurationError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::error::UpdateVPCEConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::ArgumentException(e) => e.request_id(),
            Self::CannotDeleteException(e) => e.request_id(),
            Self::IdempotencyException(e) => e.request_id(),
            Self::InternalServiceException(e) => e.request_id(),
            Self::InvalidOperationException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::NotEligibleException(e) => e.request_id(),
            Self::NotFoundException(e) => e.request_id(),
            Self::ServiceAccountException(e) => e.request_id(),
            Self::TagOperationException(e) => e.request_id(),
            Self::TagPolicyException(e) => e.request_id(),
            Self::TooManyTagsException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
