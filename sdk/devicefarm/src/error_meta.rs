// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    ArgumentException(crate::error::ArgumentException),
    CannotDeleteException(crate::error::CannotDeleteException),
    IdempotencyException(crate::error::IdempotencyException),
    InternalServiceException(crate::error::InternalServiceException),
    InvalidOperationException(crate::error::InvalidOperationException),
    LimitExceededException(crate::error::LimitExceededException),
    NotEligibleException(crate::error::NotEligibleException),
    NotFoundException(crate::error::NotFoundException),
    ServiceAccountException(crate::error::ServiceAccountException),
    TagOperationException(crate::error::TagOperationException),
    TagPolicyException(crate::error::TagPolicyException),
    TooManyTagsException(crate::error::TooManyTagsException),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ArgumentException(inner) => inner.fmt(f),
            Error::CannotDeleteException(inner) => inner.fmt(f),
            Error::IdempotencyException(inner) => inner.fmt(f),
            Error::InternalServiceException(inner) => inner.fmt(f),
            Error::InvalidOperationException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::NotEligibleException(inner) => inner.fmt(f),
            Error::NotFoundException(inner) => inner.fmt(f),
            Error::ServiceAccountException(inner) => inner.fmt(f),
            Error::TagOperationException(inner) => inner.fmt(f),
            Error::TagPolicyException(inner) => inner.fmt(f),
            Error::TooManyTagsException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateDevicePoolError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateDevicePoolError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateDevicePoolErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::CreateDevicePoolErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::CreateDevicePoolErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::CreateDevicePoolErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::CreateDevicePoolErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateInstanceProfileError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateInstanceProfileError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateInstanceProfileErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::CreateInstanceProfileErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::CreateInstanceProfileErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::CreateInstanceProfileErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::CreateInstanceProfileErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateNetworkProfileError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateNetworkProfileError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateNetworkProfileErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::CreateNetworkProfileErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::CreateNetworkProfileErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::CreateNetworkProfileErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::CreateNetworkProfileErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateProjectError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateProjectError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateProjectErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::CreateProjectErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::CreateProjectErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::CreateProjectErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::CreateProjectErrorKind::TagOperationException(inner) => {
                    Error::TagOperationException(inner)
                }
                crate::error::CreateProjectErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateRemoteAccessSessionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateRemoteAccessSessionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateRemoteAccessSessionErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::CreateRemoteAccessSessionErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::CreateRemoteAccessSessionErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::CreateRemoteAccessSessionErrorKind::ServiceAccountException(
                    inner,
                ) => Error::ServiceAccountException(inner),
                crate::error::CreateRemoteAccessSessionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateTestGridProjectError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateTestGridProjectError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateTestGridProjectErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::CreateTestGridProjectErrorKind::InternalServiceException(inner) => {
                    Error::InternalServiceException(inner)
                }
                crate::error::CreateTestGridProjectErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::CreateTestGridProjectErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateTestGridUrlError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateTestGridUrlError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateTestGridUrlErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::CreateTestGridUrlErrorKind::InternalServiceException(inner) => {
                    Error::InternalServiceException(inner)
                }
                crate::error::CreateTestGridUrlErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::CreateTestGridUrlErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateUploadError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateUploadError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateUploadErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::CreateUploadErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::CreateUploadErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::CreateUploadErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::CreateUploadErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateVPCEConfigurationError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateVPCEConfigurationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateVPCEConfigurationErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::CreateVPCEConfigurationErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::CreateVPCEConfigurationErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::CreateVPCEConfigurationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteDevicePoolError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteDevicePoolError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteDevicePoolErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::DeleteDevicePoolErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::DeleteDevicePoolErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::DeleteDevicePoolErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::DeleteDevicePoolErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteInstanceProfileError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteInstanceProfileError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteInstanceProfileErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::DeleteInstanceProfileErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::DeleteInstanceProfileErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::DeleteInstanceProfileErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::DeleteInstanceProfileErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteNetworkProfileError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteNetworkProfileError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteNetworkProfileErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::DeleteNetworkProfileErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::DeleteNetworkProfileErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::DeleteNetworkProfileErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::DeleteNetworkProfileErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteProjectError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteProjectError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteProjectErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::DeleteProjectErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::DeleteProjectErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::DeleteProjectErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::DeleteProjectErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteRemoteAccessSessionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteRemoteAccessSessionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteRemoteAccessSessionErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::DeleteRemoteAccessSessionErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::DeleteRemoteAccessSessionErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::DeleteRemoteAccessSessionErrorKind::ServiceAccountException(
                    inner,
                ) => Error::ServiceAccountException(inner),
                crate::error::DeleteRemoteAccessSessionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteRunError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteRunError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteRunErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::DeleteRunErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::DeleteRunErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::DeleteRunErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::DeleteRunErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteTestGridProjectError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteTestGridProjectError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteTestGridProjectErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::DeleteTestGridProjectErrorKind::CannotDeleteException(inner) => {
                    Error::CannotDeleteException(inner)
                }
                crate::error::DeleteTestGridProjectErrorKind::InternalServiceException(inner) => {
                    Error::InternalServiceException(inner)
                }
                crate::error::DeleteTestGridProjectErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::DeleteTestGridProjectErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteUploadError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteUploadError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteUploadErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::DeleteUploadErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::DeleteUploadErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::DeleteUploadErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::DeleteUploadErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteVPCEConfigurationError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteVPCEConfigurationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteVPCEConfigurationErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::DeleteVPCEConfigurationErrorKind::InvalidOperationException(
                    inner,
                ) => Error::InvalidOperationException(inner),
                crate::error::DeleteVPCEConfigurationErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::DeleteVPCEConfigurationErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::DeleteVPCEConfigurationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetAccountSettingsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetAccountSettingsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetAccountSettingsErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::GetAccountSettingsErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::GetAccountSettingsErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::GetAccountSettingsErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::GetAccountSettingsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetDeviceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetDeviceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetDeviceErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::GetDeviceErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::GetDeviceErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::GetDeviceErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::GetDeviceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetDeviceInstanceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetDeviceInstanceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetDeviceInstanceErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::GetDeviceInstanceErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::GetDeviceInstanceErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::GetDeviceInstanceErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::GetDeviceInstanceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetDevicePoolError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetDevicePoolError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetDevicePoolErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::GetDevicePoolErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::GetDevicePoolErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::GetDevicePoolErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::GetDevicePoolErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetDevicePoolCompatibilityError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetDevicePoolCompatibilityError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetDevicePoolCompatibilityErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::GetDevicePoolCompatibilityErrorKind::LimitExceededException(
                    inner,
                ) => Error::LimitExceededException(inner),
                crate::error::GetDevicePoolCompatibilityErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::GetDevicePoolCompatibilityErrorKind::ServiceAccountException(
                    inner,
                ) => Error::ServiceAccountException(inner),
                crate::error::GetDevicePoolCompatibilityErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetInstanceProfileError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetInstanceProfileError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetInstanceProfileErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::GetInstanceProfileErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::GetInstanceProfileErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::GetInstanceProfileErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::GetInstanceProfileErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetJobError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetJobError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetJobErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::GetJobErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::GetJobErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::GetJobErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::GetJobErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetNetworkProfileError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetNetworkProfileError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetNetworkProfileErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::GetNetworkProfileErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::GetNetworkProfileErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::GetNetworkProfileErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::GetNetworkProfileErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetOfferingStatusError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetOfferingStatusError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetOfferingStatusErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::GetOfferingStatusErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::GetOfferingStatusErrorKind::NotEligibleException(inner) => {
                    Error::NotEligibleException(inner)
                }
                crate::error::GetOfferingStatusErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::GetOfferingStatusErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::GetOfferingStatusErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetProjectError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetProjectError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetProjectErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::GetProjectErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::GetProjectErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::GetProjectErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::GetProjectErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetRemoteAccessSessionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetRemoteAccessSessionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetRemoteAccessSessionErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::GetRemoteAccessSessionErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::GetRemoteAccessSessionErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::GetRemoteAccessSessionErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::GetRemoteAccessSessionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetRunError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetRunError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetRunErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::GetRunErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::GetRunErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::GetRunErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::GetRunErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetSuiteError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetSuiteError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetSuiteErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::GetSuiteErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::GetSuiteErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::GetSuiteErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::GetSuiteErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetTestError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetTestError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetTestErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::GetTestErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::GetTestErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::GetTestErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::GetTestErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetTestGridProjectError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetTestGridProjectError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetTestGridProjectErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::GetTestGridProjectErrorKind::InternalServiceException(inner) => {
                    Error::InternalServiceException(inner)
                }
                crate::error::GetTestGridProjectErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::GetTestGridProjectErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetTestGridSessionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetTestGridSessionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetTestGridSessionErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::GetTestGridSessionErrorKind::InternalServiceException(inner) => {
                    Error::InternalServiceException(inner)
                }
                crate::error::GetTestGridSessionErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::GetTestGridSessionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetUploadError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetUploadError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetUploadErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::GetUploadErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::GetUploadErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::GetUploadErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::GetUploadErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetVPCEConfigurationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetVPCEConfigurationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetVPCEConfigurationErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::GetVPCEConfigurationErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::GetVPCEConfigurationErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::GetVPCEConfigurationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::InstallToRemoteAccessSessionError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::InstallToRemoteAccessSessionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::InstallToRemoteAccessSessionErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::InstallToRemoteAccessSessionErrorKind::LimitExceededException(
                    inner,
                ) => Error::LimitExceededException(inner),
                crate::error::InstallToRemoteAccessSessionErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::InstallToRemoteAccessSessionErrorKind::ServiceAccountException(
                    inner,
                ) => Error::ServiceAccountException(inner),
                crate::error::InstallToRemoteAccessSessionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListArtifactsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListArtifactsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListArtifactsErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::ListArtifactsErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::ListArtifactsErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::ListArtifactsErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::ListArtifactsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListDeviceInstancesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListDeviceInstancesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListDeviceInstancesErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::ListDeviceInstancesErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::ListDeviceInstancesErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::ListDeviceInstancesErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::ListDeviceInstancesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListDevicePoolsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListDevicePoolsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListDevicePoolsErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::ListDevicePoolsErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::ListDevicePoolsErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::ListDevicePoolsErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::ListDevicePoolsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListDevicesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListDevicesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListDevicesErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::ListDevicesErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::ListDevicesErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::ListDevicesErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::ListDevicesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListInstanceProfilesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListInstanceProfilesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListInstanceProfilesErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::ListInstanceProfilesErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::ListInstanceProfilesErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::ListInstanceProfilesErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::ListInstanceProfilesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListJobsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListJobsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListJobsErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::ListJobsErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::ListJobsErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::ListJobsErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::ListJobsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListNetworkProfilesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListNetworkProfilesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListNetworkProfilesErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::ListNetworkProfilesErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::ListNetworkProfilesErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::ListNetworkProfilesErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::ListNetworkProfilesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListOfferingPromotionsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListOfferingPromotionsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListOfferingPromotionsErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::ListOfferingPromotionsErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::ListOfferingPromotionsErrorKind::NotEligibleException(inner) => {
                    Error::NotEligibleException(inner)
                }
                crate::error::ListOfferingPromotionsErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::ListOfferingPromotionsErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::ListOfferingPromotionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListOfferingsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListOfferingsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListOfferingsErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::ListOfferingsErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::ListOfferingsErrorKind::NotEligibleException(inner) => {
                    Error::NotEligibleException(inner)
                }
                crate::error::ListOfferingsErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::ListOfferingsErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::ListOfferingsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListOfferingTransactionsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListOfferingTransactionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListOfferingTransactionsErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::ListOfferingTransactionsErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::ListOfferingTransactionsErrorKind::NotEligibleException(inner) => {
                    Error::NotEligibleException(inner)
                }
                crate::error::ListOfferingTransactionsErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::ListOfferingTransactionsErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::ListOfferingTransactionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListProjectsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListProjectsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListProjectsErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::ListProjectsErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::ListProjectsErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::ListProjectsErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::ListProjectsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListRemoteAccessSessionsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListRemoteAccessSessionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListRemoteAccessSessionsErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::ListRemoteAccessSessionsErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::ListRemoteAccessSessionsErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::ListRemoteAccessSessionsErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::ListRemoteAccessSessionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListRunsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListRunsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListRunsErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::ListRunsErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::ListRunsErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::ListRunsErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::ListRunsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListSamplesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListSamplesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListSamplesErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::ListSamplesErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::ListSamplesErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::ListSamplesErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::ListSamplesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListSuitesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListSuitesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListSuitesErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::ListSuitesErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::ListSuitesErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::ListSuitesErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::ListSuitesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTagsForResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTagsForResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTagsForResourceErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::ListTagsForResourceErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::ListTagsForResourceErrorKind::TagOperationException(inner) => {
                    Error::TagOperationException(inner)
                }
                crate::error::ListTagsForResourceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTestGridProjectsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTestGridProjectsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTestGridProjectsErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::ListTestGridProjectsErrorKind::InternalServiceException(inner) => {
                    Error::InternalServiceException(inner)
                }
                crate::error::ListTestGridProjectsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTestGridSessionActionsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListTestGridSessionActionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTestGridSessionActionsErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::ListTestGridSessionActionsErrorKind::InternalServiceException(
                    inner,
                ) => Error::InternalServiceException(inner),
                crate::error::ListTestGridSessionActionsErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::ListTestGridSessionActionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTestGridSessionArtifactsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListTestGridSessionArtifactsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTestGridSessionArtifactsErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::ListTestGridSessionArtifactsErrorKind::InternalServiceException(
                    inner,
                ) => Error::InternalServiceException(inner),
                crate::error::ListTestGridSessionArtifactsErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::ListTestGridSessionArtifactsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTestGridSessionsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTestGridSessionsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTestGridSessionsErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::ListTestGridSessionsErrorKind::InternalServiceException(inner) => {
                    Error::InternalServiceException(inner)
                }
                crate::error::ListTestGridSessionsErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::ListTestGridSessionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTestsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTestsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTestsErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::ListTestsErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::ListTestsErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::ListTestsErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::ListTestsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListUniqueProblemsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListUniqueProblemsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListUniqueProblemsErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::ListUniqueProblemsErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::ListUniqueProblemsErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::ListUniqueProblemsErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::ListUniqueProblemsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListUploadsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListUploadsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListUploadsErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::ListUploadsErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::ListUploadsErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::ListUploadsErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::ListUploadsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListVPCEConfigurationsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListVPCEConfigurationsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListVPCEConfigurationsErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::ListVPCEConfigurationsErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::ListVPCEConfigurationsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PurchaseOfferingError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PurchaseOfferingError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PurchaseOfferingErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::PurchaseOfferingErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::PurchaseOfferingErrorKind::NotEligibleException(inner) => {
                    Error::NotEligibleException(inner)
                }
                crate::error::PurchaseOfferingErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::PurchaseOfferingErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::PurchaseOfferingErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RenewOfferingError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RenewOfferingError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RenewOfferingErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::RenewOfferingErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::RenewOfferingErrorKind::NotEligibleException(inner) => {
                    Error::NotEligibleException(inner)
                }
                crate::error::RenewOfferingErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::RenewOfferingErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::RenewOfferingErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ScheduleRunError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ScheduleRunError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ScheduleRunErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::ScheduleRunErrorKind::IdempotencyException(inner) => {
                    Error::IdempotencyException(inner)
                }
                crate::error::ScheduleRunErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::ScheduleRunErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::ScheduleRunErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::ScheduleRunErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StopJobError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StopJobError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StopJobErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::StopJobErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::StopJobErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::StopJobErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::StopJobErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StopRemoteAccessSessionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::StopRemoteAccessSessionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StopRemoteAccessSessionErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::StopRemoteAccessSessionErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::StopRemoteAccessSessionErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::StopRemoteAccessSessionErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::StopRemoteAccessSessionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StopRunError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StopRunError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StopRunErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::StopRunErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::StopRunErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::StopRunErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::StopRunErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TagResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::TagResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TagResourceErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::TagResourceErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::TagResourceErrorKind::TagOperationException(inner) => {
                    Error::TagOperationException(inner)
                }
                crate::error::TagResourceErrorKind::TagPolicyException(inner) => {
                    Error::TagPolicyException(inner)
                }
                crate::error::TagResourceErrorKind::TooManyTagsException(inner) => {
                    Error::TooManyTagsException(inner)
                }
                crate::error::TagResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UntagResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UntagResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UntagResourceErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::UntagResourceErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::UntagResourceErrorKind::TagOperationException(inner) => {
                    Error::TagOperationException(inner)
                }
                crate::error::UntagResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateDeviceInstanceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateDeviceInstanceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateDeviceInstanceErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::UpdateDeviceInstanceErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::UpdateDeviceInstanceErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::UpdateDeviceInstanceErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::UpdateDeviceInstanceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateDevicePoolError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateDevicePoolError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateDevicePoolErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::UpdateDevicePoolErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::UpdateDevicePoolErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::UpdateDevicePoolErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::UpdateDevicePoolErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateInstanceProfileError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateInstanceProfileError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateInstanceProfileErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::UpdateInstanceProfileErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::UpdateInstanceProfileErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::UpdateInstanceProfileErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::UpdateInstanceProfileErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateNetworkProfileError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateNetworkProfileError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateNetworkProfileErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::UpdateNetworkProfileErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::UpdateNetworkProfileErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::UpdateNetworkProfileErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::UpdateNetworkProfileErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateProjectError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateProjectError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateProjectErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::UpdateProjectErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::UpdateProjectErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::UpdateProjectErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::UpdateProjectErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateTestGridProjectError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateTestGridProjectError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateTestGridProjectErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::UpdateTestGridProjectErrorKind::InternalServiceException(inner) => {
                    Error::InternalServiceException(inner)
                }
                crate::error::UpdateTestGridProjectErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::UpdateTestGridProjectErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::UpdateTestGridProjectErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateUploadError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateUploadError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateUploadErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::UpdateUploadErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::UpdateUploadErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::UpdateUploadErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::UpdateUploadErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateVPCEConfigurationError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateVPCEConfigurationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateVPCEConfigurationErrorKind::ArgumentException(inner) => {
                    Error::ArgumentException(inner)
                }
                crate::error::UpdateVPCEConfigurationErrorKind::InvalidOperationException(
                    inner,
                ) => Error::InvalidOperationException(inner),
                crate::error::UpdateVPCEConfigurationErrorKind::NotFoundException(inner) => {
                    Error::NotFoundException(inner)
                }
                crate::error::UpdateVPCEConfigurationErrorKind::ServiceAccountException(inner) => {
                    Error::ServiceAccountException(inner)
                }
                crate::error::UpdateVPCEConfigurationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
