// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>An invalid argument was specified.</p>
    ArgumentException(crate::types::error::ArgumentException),
    /// <p>The requested object could not be deleted.</p>
    CannotDeleteException(crate::types::error::CannotDeleteException),
    /// <p>An entity with the same name already exists.</p>
    IdempotencyException(crate::types::error::IdempotencyException),
    /// <p>An internal exception was raised in the service. Contact <a href="mailto:aws-devicefarm-support@amazon.com">aws-devicefarm-support@amazon.com</a> if you see this error. </p>
    InternalServiceException(crate::types::error::InternalServiceException),
    /// <p>There was an error with the update request, or you do not have sufficient permissions to update this VPC endpoint configuration.</p>
    InvalidOperationException(crate::types::error::InvalidOperationException),
    /// <p>A limit was exceeded.</p>
    LimitExceededException(crate::types::error::LimitExceededException),
    /// <p>Exception gets thrown when a user is not eligible to perform the specified transaction.</p>
    NotEligibleException(crate::types::error::NotEligibleException),
    /// <p>The specified entity was not found.</p>
    NotFoundException(crate::types::error::NotFoundException),
    /// <p>There was a problem with the service account.</p>
    ServiceAccountException(crate::types::error::ServiceAccountException),
    /// <p>The operation was not successful. Try again.</p>
    TagOperationException(crate::types::error::TagOperationException),
    /// <p>The request doesn't comply with the AWS Identity and Access Management (IAM) tag policy. Correct your request and then retry it.</p>
    TagPolicyException(crate::types::error::TagPolicyException),
    /// <p>The list of tags on the repository is over the limit. The maximum number of tags that can be applied to a repository is 50. </p>
    TooManyTagsException(crate::types::error::TooManyTagsException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(::aws_smithy_types::error::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ArgumentException(inner) => inner.fmt(f),
            Error::CannotDeleteException(inner) => inner.fmt(f),
            Error::IdempotencyException(inner) => inner.fmt(f),
            Error::InternalServiceException(inner) => inner.fmt(f),
            Error::InvalidOperationException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::NotEligibleException(inner) => inner.fmt(f),
            Error::NotFoundException(inner) => inner.fmt(f),
            Error::ServiceAccountException(inner) => inner.fmt(f),
            Error::TagOperationException(inner) => inner.fmt(f),
            Error::TagPolicyException(inner) => inner.fmt(f),
            Error::TooManyTagsException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_device_pool::CreateDevicePoolError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_device_pool::CreateDevicePoolError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_device_pool::CreateDevicePoolError> for Error {
    fn from(err: crate::operation::create_device_pool::CreateDevicePoolError) -> Self {
        match err {
            crate::operation::create_device_pool::CreateDevicePoolError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::create_device_pool::CreateDevicePoolError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_device_pool::CreateDevicePoolError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_device_pool::CreateDevicePoolError::ServiceAccountException(inner) => Error::ServiceAccountException(inner),
            crate::operation::create_device_pool::CreateDevicePoolError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_instance_profile::CreateInstanceProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_instance_profile::CreateInstanceProfileError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_instance_profile::CreateInstanceProfileError> for Error {
    fn from(err: crate::operation::create_instance_profile::CreateInstanceProfileError) -> Self {
        match err {
            crate::operation::create_instance_profile::CreateInstanceProfileError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::create_instance_profile::CreateInstanceProfileError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::create_instance_profile::CreateInstanceProfileError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_instance_profile::CreateInstanceProfileError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::operation::create_instance_profile::CreateInstanceProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_network_profile::CreateNetworkProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_network_profile::CreateNetworkProfileError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_network_profile::CreateNetworkProfileError> for Error {
    fn from(err: crate::operation::create_network_profile::CreateNetworkProfileError) -> Self {
        match err {
            crate::operation::create_network_profile::CreateNetworkProfileError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::create_network_profile::CreateNetworkProfileError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::create_network_profile::CreateNetworkProfileError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_network_profile::CreateNetworkProfileError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::operation::create_network_profile::CreateNetworkProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_project::CreateProjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_project::CreateProjectError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_project::CreateProjectError> for Error {
    fn from(err: crate::operation::create_project::CreateProjectError) -> Self {
        match err {
            crate::operation::create_project::CreateProjectError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::create_project::CreateProjectError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_project::CreateProjectError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_project::CreateProjectError::ServiceAccountException(inner) => Error::ServiceAccountException(inner),
            crate::operation::create_project::CreateProjectError::TagOperationException(inner) => Error::TagOperationException(inner),
            crate::operation::create_project::CreateProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_remote_access_session::CreateRemoteAccessSessionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_remote_access_session::CreateRemoteAccessSessionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_remote_access_session::CreateRemoteAccessSessionError> for Error {
    fn from(err: crate::operation::create_remote_access_session::CreateRemoteAccessSessionError) -> Self {
        match err {
            crate::operation::create_remote_access_session::CreateRemoteAccessSessionError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::operation::create_remote_access_session::CreateRemoteAccessSessionError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::create_remote_access_session::CreateRemoteAccessSessionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::create_remote_access_session::CreateRemoteAccessSessionError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::operation::create_remote_access_session::CreateRemoteAccessSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_test_grid_project::CreateTestGridProjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_test_grid_project::CreateTestGridProjectError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_test_grid_project::CreateTestGridProjectError> for Error {
    fn from(err: crate::operation::create_test_grid_project::CreateTestGridProjectError) -> Self {
        match err {
            crate::operation::create_test_grid_project::CreateTestGridProjectError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::create_test_grid_project::CreateTestGridProjectError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::create_test_grid_project::CreateTestGridProjectError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::create_test_grid_project::CreateTestGridProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_test_grid_url::CreateTestGridUrlError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_test_grid_url::CreateTestGridUrlError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_test_grid_url::CreateTestGridUrlError> for Error {
    fn from(err: crate::operation::create_test_grid_url::CreateTestGridUrlError) -> Self {
        match err {
            crate::operation::create_test_grid_url::CreateTestGridUrlError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::create_test_grid_url::CreateTestGridUrlError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::create_test_grid_url::CreateTestGridUrlError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_test_grid_url::CreateTestGridUrlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_upload::CreateUploadError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_upload::CreateUploadError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_upload::CreateUploadError> for Error {
    fn from(err: crate::operation::create_upload::CreateUploadError) -> Self {
        match err {
            crate::operation::create_upload::CreateUploadError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::create_upload::CreateUploadError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_upload::CreateUploadError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_upload::CreateUploadError::ServiceAccountException(inner) => Error::ServiceAccountException(inner),
            crate::operation::create_upload::CreateUploadError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_vpce_configuration::CreateVPCEConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_vpce_configuration::CreateVPCEConfigurationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_vpce_configuration::CreateVPCEConfigurationError> for Error {
    fn from(err: crate::operation::create_vpce_configuration::CreateVPCEConfigurationError) -> Self {
        match err {
            crate::operation::create_vpce_configuration::CreateVPCEConfigurationError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::create_vpce_configuration::CreateVPCEConfigurationError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::create_vpce_configuration::CreateVPCEConfigurationError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::operation::create_vpce_configuration::CreateVPCEConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_device_pool::DeleteDevicePoolError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_device_pool::DeleteDevicePoolError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_device_pool::DeleteDevicePoolError> for Error {
    fn from(err: crate::operation::delete_device_pool::DeleteDevicePoolError) -> Self {
        match err {
            crate::operation::delete_device_pool::DeleteDevicePoolError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::delete_device_pool::DeleteDevicePoolError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::delete_device_pool::DeleteDevicePoolError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_device_pool::DeleteDevicePoolError::ServiceAccountException(inner) => Error::ServiceAccountException(inner),
            crate::operation::delete_device_pool::DeleteDevicePoolError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_instance_profile::DeleteInstanceProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_instance_profile::DeleteInstanceProfileError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_instance_profile::DeleteInstanceProfileError> for Error {
    fn from(err: crate::operation::delete_instance_profile::DeleteInstanceProfileError) -> Self {
        match err {
            crate::operation::delete_instance_profile::DeleteInstanceProfileError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::delete_instance_profile::DeleteInstanceProfileError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::delete_instance_profile::DeleteInstanceProfileError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_instance_profile::DeleteInstanceProfileError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::operation::delete_instance_profile::DeleteInstanceProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_network_profile::DeleteNetworkProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_network_profile::DeleteNetworkProfileError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_network_profile::DeleteNetworkProfileError> for Error {
    fn from(err: crate::operation::delete_network_profile::DeleteNetworkProfileError) -> Self {
        match err {
            crate::operation::delete_network_profile::DeleteNetworkProfileError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::delete_network_profile::DeleteNetworkProfileError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::delete_network_profile::DeleteNetworkProfileError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_network_profile::DeleteNetworkProfileError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::operation::delete_network_profile::DeleteNetworkProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_project::DeleteProjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_project::DeleteProjectError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_project::DeleteProjectError> for Error {
    fn from(err: crate::operation::delete_project::DeleteProjectError) -> Self {
        match err {
            crate::operation::delete_project::DeleteProjectError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::delete_project::DeleteProjectError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::delete_project::DeleteProjectError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_project::DeleteProjectError::ServiceAccountException(inner) => Error::ServiceAccountException(inner),
            crate::operation::delete_project::DeleteProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_remote_access_session::DeleteRemoteAccessSessionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_remote_access_session::DeleteRemoteAccessSessionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_remote_access_session::DeleteRemoteAccessSessionError> for Error {
    fn from(err: crate::operation::delete_remote_access_session::DeleteRemoteAccessSessionError) -> Self {
        match err {
            crate::operation::delete_remote_access_session::DeleteRemoteAccessSessionError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::operation::delete_remote_access_session::DeleteRemoteAccessSessionError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::delete_remote_access_session::DeleteRemoteAccessSessionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::delete_remote_access_session::DeleteRemoteAccessSessionError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::operation::delete_remote_access_session::DeleteRemoteAccessSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_run::DeleteRunError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_run::DeleteRunError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_run::DeleteRunError> for Error {
    fn from(err: crate::operation::delete_run::DeleteRunError) -> Self {
        match err {
            crate::operation::delete_run::DeleteRunError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::delete_run::DeleteRunError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::delete_run::DeleteRunError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_run::DeleteRunError::ServiceAccountException(inner) => Error::ServiceAccountException(inner),
            crate::operation::delete_run::DeleteRunError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_test_grid_project::DeleteTestGridProjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_test_grid_project::DeleteTestGridProjectError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_test_grid_project::DeleteTestGridProjectError> for Error {
    fn from(err: crate::operation::delete_test_grid_project::DeleteTestGridProjectError) -> Self {
        match err {
            crate::operation::delete_test_grid_project::DeleteTestGridProjectError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::delete_test_grid_project::DeleteTestGridProjectError::CannotDeleteException(inner) => {
                Error::CannotDeleteException(inner)
            }
            crate::operation::delete_test_grid_project::DeleteTestGridProjectError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::delete_test_grid_project::DeleteTestGridProjectError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_test_grid_project::DeleteTestGridProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_upload::DeleteUploadError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_upload::DeleteUploadError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_upload::DeleteUploadError> for Error {
    fn from(err: crate::operation::delete_upload::DeleteUploadError) -> Self {
        match err {
            crate::operation::delete_upload::DeleteUploadError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::delete_upload::DeleteUploadError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::delete_upload::DeleteUploadError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_upload::DeleteUploadError::ServiceAccountException(inner) => Error::ServiceAccountException(inner),
            crate::operation::delete_upload::DeleteUploadError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_vpce_configuration::DeleteVPCEConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_vpce_configuration::DeleteVPCEConfigurationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_vpce_configuration::DeleteVPCEConfigurationError> for Error {
    fn from(err: crate::operation::delete_vpce_configuration::DeleteVPCEConfigurationError) -> Self {
        match err {
            crate::operation::delete_vpce_configuration::DeleteVPCEConfigurationError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::delete_vpce_configuration::DeleteVPCEConfigurationError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::operation::delete_vpce_configuration::DeleteVPCEConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_vpce_configuration::DeleteVPCEConfigurationError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::operation::delete_vpce_configuration::DeleteVPCEConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_account_settings::GetAccountSettingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_account_settings::GetAccountSettingsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_account_settings::GetAccountSettingsError> for Error {
    fn from(err: crate::operation::get_account_settings::GetAccountSettingsError) -> Self {
        match err {
            crate::operation::get_account_settings::GetAccountSettingsError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::get_account_settings::GetAccountSettingsError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::get_account_settings::GetAccountSettingsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_account_settings::GetAccountSettingsError::ServiceAccountException(inner) => Error::ServiceAccountException(inner),
            crate::operation::get_account_settings::GetAccountSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_device::GetDeviceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_device::GetDeviceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_device::GetDeviceError> for Error {
    fn from(err: crate::operation::get_device::GetDeviceError) -> Self {
        match err {
            crate::operation::get_device::GetDeviceError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::get_device::GetDeviceError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::get_device::GetDeviceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_device::GetDeviceError::ServiceAccountException(inner) => Error::ServiceAccountException(inner),
            crate::operation::get_device::GetDeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_device_instance::GetDeviceInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_device_instance::GetDeviceInstanceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_device_instance::GetDeviceInstanceError> for Error {
    fn from(err: crate::operation::get_device_instance::GetDeviceInstanceError) -> Self {
        match err {
            crate::operation::get_device_instance::GetDeviceInstanceError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::get_device_instance::GetDeviceInstanceError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::get_device_instance::GetDeviceInstanceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_device_instance::GetDeviceInstanceError::ServiceAccountException(inner) => Error::ServiceAccountException(inner),
            crate::operation::get_device_instance::GetDeviceInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_device_pool::GetDevicePoolError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_device_pool::GetDevicePoolError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_device_pool::GetDevicePoolError> for Error {
    fn from(err: crate::operation::get_device_pool::GetDevicePoolError) -> Self {
        match err {
            crate::operation::get_device_pool::GetDevicePoolError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::get_device_pool::GetDevicePoolError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::get_device_pool::GetDevicePoolError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_device_pool::GetDevicePoolError::ServiceAccountException(inner) => Error::ServiceAccountException(inner),
            crate::operation::get_device_pool::GetDevicePoolError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_device_pool_compatibility::GetDevicePoolCompatibilityError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_device_pool_compatibility::GetDevicePoolCompatibilityError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_device_pool_compatibility::GetDevicePoolCompatibilityError> for Error {
    fn from(err: crate::operation::get_device_pool_compatibility::GetDevicePoolCompatibilityError) -> Self {
        match err {
            crate::operation::get_device_pool_compatibility::GetDevicePoolCompatibilityError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::operation::get_device_pool_compatibility::GetDevicePoolCompatibilityError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::get_device_pool_compatibility::GetDevicePoolCompatibilityError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::get_device_pool_compatibility::GetDevicePoolCompatibilityError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::operation::get_device_pool_compatibility::GetDevicePoolCompatibilityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_instance_profile::GetInstanceProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_instance_profile::GetInstanceProfileError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_instance_profile::GetInstanceProfileError> for Error {
    fn from(err: crate::operation::get_instance_profile::GetInstanceProfileError) -> Self {
        match err {
            crate::operation::get_instance_profile::GetInstanceProfileError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::get_instance_profile::GetInstanceProfileError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::get_instance_profile::GetInstanceProfileError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_instance_profile::GetInstanceProfileError::ServiceAccountException(inner) => Error::ServiceAccountException(inner),
            crate::operation::get_instance_profile::GetInstanceProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_job::GetJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_job::GetJobError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_job::GetJobError> for Error {
    fn from(err: crate::operation::get_job::GetJobError) -> Self {
        match err {
            crate::operation::get_job::GetJobError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::get_job::GetJobError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::get_job::GetJobError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_job::GetJobError::ServiceAccountException(inner) => Error::ServiceAccountException(inner),
            crate::operation::get_job::GetJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_network_profile::GetNetworkProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_network_profile::GetNetworkProfileError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_network_profile::GetNetworkProfileError> for Error {
    fn from(err: crate::operation::get_network_profile::GetNetworkProfileError) -> Self {
        match err {
            crate::operation::get_network_profile::GetNetworkProfileError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::get_network_profile::GetNetworkProfileError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::get_network_profile::GetNetworkProfileError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_network_profile::GetNetworkProfileError::ServiceAccountException(inner) => Error::ServiceAccountException(inner),
            crate::operation::get_network_profile::GetNetworkProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_offering_status::GetOfferingStatusError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_offering_status::GetOfferingStatusError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_offering_status::GetOfferingStatusError> for Error {
    fn from(err: crate::operation::get_offering_status::GetOfferingStatusError) -> Self {
        match err {
            crate::operation::get_offering_status::GetOfferingStatusError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::get_offering_status::GetOfferingStatusError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::get_offering_status::GetOfferingStatusError::NotEligibleException(inner) => Error::NotEligibleException(inner),
            crate::operation::get_offering_status::GetOfferingStatusError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_offering_status::GetOfferingStatusError::ServiceAccountException(inner) => Error::ServiceAccountException(inner),
            crate::operation::get_offering_status::GetOfferingStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_project::GetProjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_project::GetProjectError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_project::GetProjectError> for Error {
    fn from(err: crate::operation::get_project::GetProjectError) -> Self {
        match err {
            crate::operation::get_project::GetProjectError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::get_project::GetProjectError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::get_project::GetProjectError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_project::GetProjectError::ServiceAccountException(inner) => Error::ServiceAccountException(inner),
            crate::operation::get_project::GetProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_remote_access_session::GetRemoteAccessSessionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_remote_access_session::GetRemoteAccessSessionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_remote_access_session::GetRemoteAccessSessionError> for Error {
    fn from(err: crate::operation::get_remote_access_session::GetRemoteAccessSessionError) -> Self {
        match err {
            crate::operation::get_remote_access_session::GetRemoteAccessSessionError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::get_remote_access_session::GetRemoteAccessSessionError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::get_remote_access_session::GetRemoteAccessSessionError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_remote_access_session::GetRemoteAccessSessionError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::operation::get_remote_access_session::GetRemoteAccessSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_run::GetRunError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_run::GetRunError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_run::GetRunError> for Error {
    fn from(err: crate::operation::get_run::GetRunError) -> Self {
        match err {
            crate::operation::get_run::GetRunError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::get_run::GetRunError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::get_run::GetRunError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_run::GetRunError::ServiceAccountException(inner) => Error::ServiceAccountException(inner),
            crate::operation::get_run::GetRunError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_suite::GetSuiteError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_suite::GetSuiteError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_suite::GetSuiteError> for Error {
    fn from(err: crate::operation::get_suite::GetSuiteError) -> Self {
        match err {
            crate::operation::get_suite::GetSuiteError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::get_suite::GetSuiteError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::get_suite::GetSuiteError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_suite::GetSuiteError::ServiceAccountException(inner) => Error::ServiceAccountException(inner),
            crate::operation::get_suite::GetSuiteError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_test::GetTestError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_test::GetTestError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_test::GetTestError> for Error {
    fn from(err: crate::operation::get_test::GetTestError) -> Self {
        match err {
            crate::operation::get_test::GetTestError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::get_test::GetTestError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::get_test::GetTestError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_test::GetTestError::ServiceAccountException(inner) => Error::ServiceAccountException(inner),
            crate::operation::get_test::GetTestError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_test_grid_project::GetTestGridProjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_test_grid_project::GetTestGridProjectError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_test_grid_project::GetTestGridProjectError> for Error {
    fn from(err: crate::operation::get_test_grid_project::GetTestGridProjectError) -> Self {
        match err {
            crate::operation::get_test_grid_project::GetTestGridProjectError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::get_test_grid_project::GetTestGridProjectError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::get_test_grid_project::GetTestGridProjectError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_test_grid_project::GetTestGridProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_test_grid_session::GetTestGridSessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_test_grid_session::GetTestGridSessionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_test_grid_session::GetTestGridSessionError> for Error {
    fn from(err: crate::operation::get_test_grid_session::GetTestGridSessionError) -> Self {
        match err {
            crate::operation::get_test_grid_session::GetTestGridSessionError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::get_test_grid_session::GetTestGridSessionError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::get_test_grid_session::GetTestGridSessionError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_test_grid_session::GetTestGridSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_upload::GetUploadError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_upload::GetUploadError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_upload::GetUploadError> for Error {
    fn from(err: crate::operation::get_upload::GetUploadError) -> Self {
        match err {
            crate::operation::get_upload::GetUploadError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::get_upload::GetUploadError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::get_upload::GetUploadError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_upload::GetUploadError::ServiceAccountException(inner) => Error::ServiceAccountException(inner),
            crate::operation::get_upload::GetUploadError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_vpce_configuration::GetVPCEConfigurationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_vpce_configuration::GetVPCEConfigurationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_vpce_configuration::GetVPCEConfigurationError> for Error {
    fn from(err: crate::operation::get_vpce_configuration::GetVPCEConfigurationError) -> Self {
        match err {
            crate::operation::get_vpce_configuration::GetVPCEConfigurationError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::get_vpce_configuration::GetVPCEConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_vpce_configuration::GetVPCEConfigurationError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::operation::get_vpce_configuration::GetVPCEConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::install_to_remote_access_session::InstallToRemoteAccessSessionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::install_to_remote_access_session::InstallToRemoteAccessSessionError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::install_to_remote_access_session::InstallToRemoteAccessSessionError> for Error {
    fn from(err: crate::operation::install_to_remote_access_session::InstallToRemoteAccessSessionError) -> Self {
        match err {
            crate::operation::install_to_remote_access_session::InstallToRemoteAccessSessionError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::operation::install_to_remote_access_session::InstallToRemoteAccessSessionError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::install_to_remote_access_session::InstallToRemoteAccessSessionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::install_to_remote_access_session::InstallToRemoteAccessSessionError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::operation::install_to_remote_access_session::InstallToRemoteAccessSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_artifacts::ListArtifactsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_artifacts::ListArtifactsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_artifacts::ListArtifactsError> for Error {
    fn from(err: crate::operation::list_artifacts::ListArtifactsError) -> Self {
        match err {
            crate::operation::list_artifacts::ListArtifactsError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::list_artifacts::ListArtifactsError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::list_artifacts::ListArtifactsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_artifacts::ListArtifactsError::ServiceAccountException(inner) => Error::ServiceAccountException(inner),
            crate::operation::list_artifacts::ListArtifactsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_device_instances::ListDeviceInstancesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_device_instances::ListDeviceInstancesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_device_instances::ListDeviceInstancesError> for Error {
    fn from(err: crate::operation::list_device_instances::ListDeviceInstancesError) -> Self {
        match err {
            crate::operation::list_device_instances::ListDeviceInstancesError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::list_device_instances::ListDeviceInstancesError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::list_device_instances::ListDeviceInstancesError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_device_instances::ListDeviceInstancesError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::operation::list_device_instances::ListDeviceInstancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_device_pools::ListDevicePoolsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_device_pools::ListDevicePoolsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_device_pools::ListDevicePoolsError> for Error {
    fn from(err: crate::operation::list_device_pools::ListDevicePoolsError) -> Self {
        match err {
            crate::operation::list_device_pools::ListDevicePoolsError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::list_device_pools::ListDevicePoolsError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::list_device_pools::ListDevicePoolsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_device_pools::ListDevicePoolsError::ServiceAccountException(inner) => Error::ServiceAccountException(inner),
            crate::operation::list_device_pools::ListDevicePoolsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_devices::ListDevicesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_devices::ListDevicesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_devices::ListDevicesError> for Error {
    fn from(err: crate::operation::list_devices::ListDevicesError) -> Self {
        match err {
            crate::operation::list_devices::ListDevicesError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::list_devices::ListDevicesError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::list_devices::ListDevicesError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_devices::ListDevicesError::ServiceAccountException(inner) => Error::ServiceAccountException(inner),
            crate::operation::list_devices::ListDevicesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_instance_profiles::ListInstanceProfilesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_instance_profiles::ListInstanceProfilesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_instance_profiles::ListInstanceProfilesError> for Error {
    fn from(err: crate::operation::list_instance_profiles::ListInstanceProfilesError) -> Self {
        match err {
            crate::operation::list_instance_profiles::ListInstanceProfilesError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::list_instance_profiles::ListInstanceProfilesError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::list_instance_profiles::ListInstanceProfilesError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_instance_profiles::ListInstanceProfilesError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::operation::list_instance_profiles::ListInstanceProfilesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_jobs::ListJobsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_jobs::ListJobsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_jobs::ListJobsError> for Error {
    fn from(err: crate::operation::list_jobs::ListJobsError) -> Self {
        match err {
            crate::operation::list_jobs::ListJobsError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::list_jobs::ListJobsError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::list_jobs::ListJobsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_jobs::ListJobsError::ServiceAccountException(inner) => Error::ServiceAccountException(inner),
            crate::operation::list_jobs::ListJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_network_profiles::ListNetworkProfilesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_network_profiles::ListNetworkProfilesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_network_profiles::ListNetworkProfilesError> for Error {
    fn from(err: crate::operation::list_network_profiles::ListNetworkProfilesError) -> Self {
        match err {
            crate::operation::list_network_profiles::ListNetworkProfilesError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::list_network_profiles::ListNetworkProfilesError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::list_network_profiles::ListNetworkProfilesError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_network_profiles::ListNetworkProfilesError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::operation::list_network_profiles::ListNetworkProfilesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_offering_promotions::ListOfferingPromotionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_offering_promotions::ListOfferingPromotionsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_offering_promotions::ListOfferingPromotionsError> for Error {
    fn from(err: crate::operation::list_offering_promotions::ListOfferingPromotionsError) -> Self {
        match err {
            crate::operation::list_offering_promotions::ListOfferingPromotionsError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::list_offering_promotions::ListOfferingPromotionsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::list_offering_promotions::ListOfferingPromotionsError::NotEligibleException(inner) => {
                Error::NotEligibleException(inner)
            }
            crate::operation::list_offering_promotions::ListOfferingPromotionsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_offering_promotions::ListOfferingPromotionsError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::operation::list_offering_promotions::ListOfferingPromotionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_offerings::ListOfferingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_offerings::ListOfferingsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_offerings::ListOfferingsError> for Error {
    fn from(err: crate::operation::list_offerings::ListOfferingsError) -> Self {
        match err {
            crate::operation::list_offerings::ListOfferingsError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::list_offerings::ListOfferingsError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::list_offerings::ListOfferingsError::NotEligibleException(inner) => Error::NotEligibleException(inner),
            crate::operation::list_offerings::ListOfferingsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_offerings::ListOfferingsError::ServiceAccountException(inner) => Error::ServiceAccountException(inner),
            crate::operation::list_offerings::ListOfferingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_offering_transactions::ListOfferingTransactionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_offering_transactions::ListOfferingTransactionsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_offering_transactions::ListOfferingTransactionsError> for Error {
    fn from(err: crate::operation::list_offering_transactions::ListOfferingTransactionsError) -> Self {
        match err {
            crate::operation::list_offering_transactions::ListOfferingTransactionsError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::list_offering_transactions::ListOfferingTransactionsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::list_offering_transactions::ListOfferingTransactionsError::NotEligibleException(inner) => {
                Error::NotEligibleException(inner)
            }
            crate::operation::list_offering_transactions::ListOfferingTransactionsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_offering_transactions::ListOfferingTransactionsError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::operation::list_offering_transactions::ListOfferingTransactionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_projects::ListProjectsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_projects::ListProjectsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_projects::ListProjectsError> for Error {
    fn from(err: crate::operation::list_projects::ListProjectsError) -> Self {
        match err {
            crate::operation::list_projects::ListProjectsError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::list_projects::ListProjectsError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::list_projects::ListProjectsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_projects::ListProjectsError::ServiceAccountException(inner) => Error::ServiceAccountException(inner),
            crate::operation::list_projects::ListProjectsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_remote_access_sessions::ListRemoteAccessSessionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_remote_access_sessions::ListRemoteAccessSessionsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_remote_access_sessions::ListRemoteAccessSessionsError> for Error {
    fn from(err: crate::operation::list_remote_access_sessions::ListRemoteAccessSessionsError) -> Self {
        match err {
            crate::operation::list_remote_access_sessions::ListRemoteAccessSessionsError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::list_remote_access_sessions::ListRemoteAccessSessionsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::list_remote_access_sessions::ListRemoteAccessSessionsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_remote_access_sessions::ListRemoteAccessSessionsError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::operation::list_remote_access_sessions::ListRemoteAccessSessionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_runs::ListRunsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_runs::ListRunsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_runs::ListRunsError> for Error {
    fn from(err: crate::operation::list_runs::ListRunsError) -> Self {
        match err {
            crate::operation::list_runs::ListRunsError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::list_runs::ListRunsError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::list_runs::ListRunsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_runs::ListRunsError::ServiceAccountException(inner) => Error::ServiceAccountException(inner),
            crate::operation::list_runs::ListRunsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_samples::ListSamplesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_samples::ListSamplesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_samples::ListSamplesError> for Error {
    fn from(err: crate::operation::list_samples::ListSamplesError) -> Self {
        match err {
            crate::operation::list_samples::ListSamplesError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::list_samples::ListSamplesError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::list_samples::ListSamplesError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_samples::ListSamplesError::ServiceAccountException(inner) => Error::ServiceAccountException(inner),
            crate::operation::list_samples::ListSamplesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_suites::ListSuitesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_suites::ListSuitesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_suites::ListSuitesError> for Error {
    fn from(err: crate::operation::list_suites::ListSuitesError) -> Self {
        match err {
            crate::operation::list_suites::ListSuitesError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::list_suites::ListSuitesError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::list_suites::ListSuitesError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_suites::ListSuitesError::ServiceAccountException(inner) => Error::ServiceAccountException(inner),
            crate::operation::list_suites::ListSuitesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::TagOperationException(inner) => Error::TagOperationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_test_grid_projects::ListTestGridProjectsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_test_grid_projects::ListTestGridProjectsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_test_grid_projects::ListTestGridProjectsError> for Error {
    fn from(err: crate::operation::list_test_grid_projects::ListTestGridProjectsError) -> Self {
        match err {
            crate::operation::list_test_grid_projects::ListTestGridProjectsError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::list_test_grid_projects::ListTestGridProjectsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::list_test_grid_projects::ListTestGridProjectsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_test_grid_session_actions::ListTestGridSessionActionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_test_grid_session_actions::ListTestGridSessionActionsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_test_grid_session_actions::ListTestGridSessionActionsError> for Error {
    fn from(err: crate::operation::list_test_grid_session_actions::ListTestGridSessionActionsError) -> Self {
        match err {
            crate::operation::list_test_grid_session_actions::ListTestGridSessionActionsError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::operation::list_test_grid_session_actions::ListTestGridSessionActionsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::list_test_grid_session_actions::ListTestGridSessionActionsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::list_test_grid_session_actions::ListTestGridSessionActionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_test_grid_session_artifacts::ListTestGridSessionArtifactsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_test_grid_session_artifacts::ListTestGridSessionArtifactsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_test_grid_session_artifacts::ListTestGridSessionArtifactsError> for Error {
    fn from(err: crate::operation::list_test_grid_session_artifacts::ListTestGridSessionArtifactsError) -> Self {
        match err {
            crate::operation::list_test_grid_session_artifacts::ListTestGridSessionArtifactsError::ArgumentException(inner) => {
                Error::ArgumentException(inner)
            }
            crate::operation::list_test_grid_session_artifacts::ListTestGridSessionArtifactsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::list_test_grid_session_artifacts::ListTestGridSessionArtifactsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::list_test_grid_session_artifacts::ListTestGridSessionArtifactsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_test_grid_sessions::ListTestGridSessionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_test_grid_sessions::ListTestGridSessionsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_test_grid_sessions::ListTestGridSessionsError> for Error {
    fn from(err: crate::operation::list_test_grid_sessions::ListTestGridSessionsError) -> Self {
        match err {
            crate::operation::list_test_grid_sessions::ListTestGridSessionsError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::list_test_grid_sessions::ListTestGridSessionsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::list_test_grid_sessions::ListTestGridSessionsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_test_grid_sessions::ListTestGridSessionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tests::ListTestsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tests::ListTestsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tests::ListTestsError> for Error {
    fn from(err: crate::operation::list_tests::ListTestsError) -> Self {
        match err {
            crate::operation::list_tests::ListTestsError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::list_tests::ListTestsError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::list_tests::ListTestsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_tests::ListTestsError::ServiceAccountException(inner) => Error::ServiceAccountException(inner),
            crate::operation::list_tests::ListTestsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_unique_problems::ListUniqueProblemsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_unique_problems::ListUniqueProblemsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_unique_problems::ListUniqueProblemsError> for Error {
    fn from(err: crate::operation::list_unique_problems::ListUniqueProblemsError) -> Self {
        match err {
            crate::operation::list_unique_problems::ListUniqueProblemsError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::list_unique_problems::ListUniqueProblemsError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::list_unique_problems::ListUniqueProblemsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_unique_problems::ListUniqueProblemsError::ServiceAccountException(inner) => Error::ServiceAccountException(inner),
            crate::operation::list_unique_problems::ListUniqueProblemsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_uploads::ListUploadsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_uploads::ListUploadsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_uploads::ListUploadsError> for Error {
    fn from(err: crate::operation::list_uploads::ListUploadsError) -> Self {
        match err {
            crate::operation::list_uploads::ListUploadsError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::list_uploads::ListUploadsError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::list_uploads::ListUploadsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_uploads::ListUploadsError::ServiceAccountException(inner) => Error::ServiceAccountException(inner),
            crate::operation::list_uploads::ListUploadsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_vpce_configurations::ListVPCEConfigurationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_vpce_configurations::ListVPCEConfigurationsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_vpce_configurations::ListVPCEConfigurationsError> for Error {
    fn from(err: crate::operation::list_vpce_configurations::ListVPCEConfigurationsError) -> Self {
        match err {
            crate::operation::list_vpce_configurations::ListVPCEConfigurationsError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::list_vpce_configurations::ListVPCEConfigurationsError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::operation::list_vpce_configurations::ListVPCEConfigurationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::purchase_offering::PurchaseOfferingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::purchase_offering::PurchaseOfferingError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::purchase_offering::PurchaseOfferingError> for Error {
    fn from(err: crate::operation::purchase_offering::PurchaseOfferingError) -> Self {
        match err {
            crate::operation::purchase_offering::PurchaseOfferingError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::purchase_offering::PurchaseOfferingError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::purchase_offering::PurchaseOfferingError::NotEligibleException(inner) => Error::NotEligibleException(inner),
            crate::operation::purchase_offering::PurchaseOfferingError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::purchase_offering::PurchaseOfferingError::ServiceAccountException(inner) => Error::ServiceAccountException(inner),
            crate::operation::purchase_offering::PurchaseOfferingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::renew_offering::RenewOfferingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::renew_offering::RenewOfferingError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::renew_offering::RenewOfferingError> for Error {
    fn from(err: crate::operation::renew_offering::RenewOfferingError) -> Self {
        match err {
            crate::operation::renew_offering::RenewOfferingError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::renew_offering::RenewOfferingError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::renew_offering::RenewOfferingError::NotEligibleException(inner) => Error::NotEligibleException(inner),
            crate::operation::renew_offering::RenewOfferingError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::renew_offering::RenewOfferingError::ServiceAccountException(inner) => Error::ServiceAccountException(inner),
            crate::operation::renew_offering::RenewOfferingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::schedule_run::ScheduleRunError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::schedule_run::ScheduleRunError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::schedule_run::ScheduleRunError> for Error {
    fn from(err: crate::operation::schedule_run::ScheduleRunError) -> Self {
        match err {
            crate::operation::schedule_run::ScheduleRunError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::schedule_run::ScheduleRunError::IdempotencyException(inner) => Error::IdempotencyException(inner),
            crate::operation::schedule_run::ScheduleRunError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::schedule_run::ScheduleRunError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::schedule_run::ScheduleRunError::ServiceAccountException(inner) => Error::ServiceAccountException(inner),
            crate::operation::schedule_run::ScheduleRunError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_job::StopJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_job::StopJobError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_job::StopJobError> for Error {
    fn from(err: crate::operation::stop_job::StopJobError) -> Self {
        match err {
            crate::operation::stop_job::StopJobError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::stop_job::StopJobError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::stop_job::StopJobError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::stop_job::StopJobError::ServiceAccountException(inner) => Error::ServiceAccountException(inner),
            crate::operation::stop_job::StopJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_remote_access_session::StopRemoteAccessSessionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_remote_access_session::StopRemoteAccessSessionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_remote_access_session::StopRemoteAccessSessionError> for Error {
    fn from(err: crate::operation::stop_remote_access_session::StopRemoteAccessSessionError) -> Self {
        match err {
            crate::operation::stop_remote_access_session::StopRemoteAccessSessionError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::stop_remote_access_session::StopRemoteAccessSessionError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::stop_remote_access_session::StopRemoteAccessSessionError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::stop_remote_access_session::StopRemoteAccessSessionError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::operation::stop_remote_access_session::StopRemoteAccessSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_run::StopRunError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_run::StopRunError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_run::StopRunError> for Error {
    fn from(err: crate::operation::stop_run::StopRunError) -> Self {
        match err {
            crate::operation::stop_run::StopRunError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::stop_run::StopRunError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::stop_run::StopRunError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::stop_run::StopRunError::ServiceAccountException(inner) => Error::ServiceAccountException(inner),
            crate::operation::stop_run::StopRunError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::tag_resource::TagResourceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::TagOperationException(inner) => Error::TagOperationException(inner),
            crate::operation::tag_resource::TagResourceError::TagPolicyException(inner) => Error::TagPolicyException(inner),
            crate::operation::tag_resource::TagResourceError::TooManyTagsException(inner) => Error::TooManyTagsException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::untag_resource::UntagResourceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::TagOperationException(inner) => Error::TagOperationException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_device_instance::UpdateDeviceInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_device_instance::UpdateDeviceInstanceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_device_instance::UpdateDeviceInstanceError> for Error {
    fn from(err: crate::operation::update_device_instance::UpdateDeviceInstanceError) -> Self {
        match err {
            crate::operation::update_device_instance::UpdateDeviceInstanceError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::update_device_instance::UpdateDeviceInstanceError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::update_device_instance::UpdateDeviceInstanceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_device_instance::UpdateDeviceInstanceError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::operation::update_device_instance::UpdateDeviceInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_device_pool::UpdateDevicePoolError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_device_pool::UpdateDevicePoolError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_device_pool::UpdateDevicePoolError> for Error {
    fn from(err: crate::operation::update_device_pool::UpdateDevicePoolError) -> Self {
        match err {
            crate::operation::update_device_pool::UpdateDevicePoolError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::update_device_pool::UpdateDevicePoolError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::update_device_pool::UpdateDevicePoolError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_device_pool::UpdateDevicePoolError::ServiceAccountException(inner) => Error::ServiceAccountException(inner),
            crate::operation::update_device_pool::UpdateDevicePoolError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_instance_profile::UpdateInstanceProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_instance_profile::UpdateInstanceProfileError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_instance_profile::UpdateInstanceProfileError> for Error {
    fn from(err: crate::operation::update_instance_profile::UpdateInstanceProfileError) -> Self {
        match err {
            crate::operation::update_instance_profile::UpdateInstanceProfileError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::update_instance_profile::UpdateInstanceProfileError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::update_instance_profile::UpdateInstanceProfileError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_instance_profile::UpdateInstanceProfileError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::operation::update_instance_profile::UpdateInstanceProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_network_profile::UpdateNetworkProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_network_profile::UpdateNetworkProfileError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_network_profile::UpdateNetworkProfileError> for Error {
    fn from(err: crate::operation::update_network_profile::UpdateNetworkProfileError) -> Self {
        match err {
            crate::operation::update_network_profile::UpdateNetworkProfileError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::update_network_profile::UpdateNetworkProfileError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::update_network_profile::UpdateNetworkProfileError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_network_profile::UpdateNetworkProfileError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::operation::update_network_profile::UpdateNetworkProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_project::UpdateProjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_project::UpdateProjectError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_project::UpdateProjectError> for Error {
    fn from(err: crate::operation::update_project::UpdateProjectError) -> Self {
        match err {
            crate::operation::update_project::UpdateProjectError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::update_project::UpdateProjectError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::update_project::UpdateProjectError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_project::UpdateProjectError::ServiceAccountException(inner) => Error::ServiceAccountException(inner),
            crate::operation::update_project::UpdateProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_test_grid_project::UpdateTestGridProjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_test_grid_project::UpdateTestGridProjectError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_test_grid_project::UpdateTestGridProjectError> for Error {
    fn from(err: crate::operation::update_test_grid_project::UpdateTestGridProjectError) -> Self {
        match err {
            crate::operation::update_test_grid_project::UpdateTestGridProjectError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::update_test_grid_project::UpdateTestGridProjectError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::update_test_grid_project::UpdateTestGridProjectError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::update_test_grid_project::UpdateTestGridProjectError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_test_grid_project::UpdateTestGridProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_upload::UpdateUploadError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_upload::UpdateUploadError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_upload::UpdateUploadError> for Error {
    fn from(err: crate::operation::update_upload::UpdateUploadError) -> Self {
        match err {
            crate::operation::update_upload::UpdateUploadError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::update_upload::UpdateUploadError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::update_upload::UpdateUploadError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_upload::UpdateUploadError::ServiceAccountException(inner) => Error::ServiceAccountException(inner),
            crate::operation::update_upload::UpdateUploadError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_vpce_configuration::UpdateVPCEConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_vpce_configuration::UpdateVPCEConfigurationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_vpce_configuration::UpdateVPCEConfigurationError> for Error {
    fn from(err: crate::operation::update_vpce_configuration::UpdateVPCEConfigurationError) -> Self {
        match err {
            crate::operation::update_vpce_configuration::UpdateVPCEConfigurationError::ArgumentException(inner) => Error::ArgumentException(inner),
            crate::operation::update_vpce_configuration::UpdateVPCEConfigurationError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::operation::update_vpce_configuration::UpdateVPCEConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_vpce_configuration::UpdateVPCEConfigurationError::ServiceAccountException(inner) => {
                Error::ServiceAccountException(inner)
            }
            crate::operation::update_vpce_configuration::UpdateVPCEConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::ArgumentException(inner) => inner.source(),
            Error::CannotDeleteException(inner) => inner.source(),
            Error::IdempotencyException(inner) => inner.source(),
            Error::InternalServiceException(inner) => inner.source(),
            Error::InvalidOperationException(inner) => inner.source(),
            Error::LimitExceededException(inner) => inner.source(),
            Error::NotEligibleException(inner) => inner.source(),
            Error::NotFoundException(inner) => inner.source(),
            Error::ServiceAccountException(inner) => inner.source(),
            Error::TagOperationException(inner) => inner.source(),
            Error::TagPolicyException(inner) => inner.source(),
            Error::TooManyTagsException(inner) => inner.source(),
            Error::Unhandled(inner) => inner.source(),
        }
    }
}
impl ::aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::ArgumentException(e) => e.request_id(),
            Self::CannotDeleteException(e) => e.request_id(),
            Self::IdempotencyException(e) => e.request_id(),
            Self::InternalServiceException(e) => e.request_id(),
            Self::InvalidOperationException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::NotEligibleException(e) => e.request_id(),
            Self::NotFoundException(e) => e.request_id(),
            Self::ServiceAccountException(e) => e.request_id(),
            Self::TagOperationException(e) => e.request_id(),
            Self::TagPolicyException(e) => e.request_id(),
            Self::TooManyTagsException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
