// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_schedule_run_configuration(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ScheduleRunConfiguration,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.extra_data_package_arn {
        object.key("extraDataPackageArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.network_profile_arn {
        object.key("networkProfileArn").string(var_2.as_str());
    }
    if let Some(var_3) = &input.locale {
        object.key("locale").string(var_3.as_str());
    }
    if let Some(var_4) = &input.location {
        #[allow(unused_mut)]
        let mut object_5 = object.key("location").start_object();
        crate::protocol_serde::shape_location::ser_location(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.vpce_configuration_arns {
        let mut array_7 = object.key("vpceConfigurationArns").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.customer_artifact_paths {
        #[allow(unused_mut)]
        let mut object_10 = object.key("customerArtifactPaths").start_object();
        crate::protocol_serde::shape_customer_artifact_paths::ser_customer_artifact_paths(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.radios {
        #[allow(unused_mut)]
        let mut object_12 = object.key("radios").start_object();
        crate::protocol_serde::shape_radios::ser_radios(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.auxiliary_apps {
        let mut array_14 = object.key("auxiliaryApps").start_array();
        for item_15 in var_13 {
            {
                array_14.value().string(item_15.as_str());
            }
        }
        array_14.finish();
    }
    if let Some(var_16) = &input.billing_method {
        object.key("billingMethod").string(var_16.as_str());
    }
    Ok(())
}
