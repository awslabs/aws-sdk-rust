// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_device_pool_compatibility::_get_device_pool_compatibility_output::GetDevicePoolCompatibilityOutputBuilder;

pub use crate::operation::get_device_pool_compatibility::_get_device_pool_compatibility_input::GetDevicePoolCompatibilityInputBuilder;

/// Fluent builder constructing a request to `GetDevicePoolCompatibility`.
///
/// <p>Gets information about compatibility with a device pool.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetDevicePoolCompatibilityFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::get_device_pool_compatibility::builders::GetDevicePoolCompatibilityInputBuilder
            }
impl GetDevicePoolCompatibilityFluentBuilder {
    /// Creates a new `GetDevicePoolCompatibility`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::get_device_pool_compatibility::GetDevicePoolCompatibility,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::get_device_pool_compatibility::GetDevicePoolCompatibilityError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::get_device_pool_compatibility::GetDevicePoolCompatibilityOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::get_device_pool_compatibility::GetDevicePoolCompatibilityError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The device pool's ARN.</p>
    pub fn device_pool_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.device_pool_arn(input.into());
        self
    }
    /// <p>The device pool's ARN.</p>
    pub fn set_device_pool_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_device_pool_arn(input);
        self
    }
    /// <p>The ARN of the app that is associated with the specified device pool.</p>
    pub fn app_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.app_arn(input.into());
        self
    }
    /// <p>The ARN of the app that is associated with the specified device pool.</p>
    pub fn set_app_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_app_arn(input);
        self
    }
    /// <p>The test type for the specified device pool.</p>
    /// <p>Allowed values include the following:</p>
    /// <ul>
    /// <li> <p>BUILTIN_FUZZ.</p> </li>
    /// <li> <p>BUILTIN_EXPLORER. For Android, an app explorer that traverses an Android app, interacting with it and capturing screenshots at the same time.</p> </li>
    /// <li> <p>APPIUM_JAVA_JUNIT.</p> </li>
    /// <li> <p>APPIUM_JAVA_TESTNG.</p> </li>
    /// <li> <p>APPIUM_PYTHON.</p> </li>
    /// <li> <p>APPIUM_NODE.</p> </li>
    /// <li> <p>APPIUM_RUBY.</p> </li>
    /// <li> <p>APPIUM_WEB_JAVA_JUNIT.</p> </li>
    /// <li> <p>APPIUM_WEB_JAVA_TESTNG.</p> </li>
    /// <li> <p>APPIUM_WEB_PYTHON.</p> </li>
    /// <li> <p>APPIUM_WEB_NODE.</p> </li>
    /// <li> <p>APPIUM_WEB_RUBY.</p> </li>
    /// <li> <p>CALABASH.</p> </li>
    /// <li> <p>INSTRUMENTATION.</p> </li>
    /// <li> <p>UIAUTOMATION.</p> </li>
    /// <li> <p>UIAUTOMATOR.</p> </li>
    /// <li> <p>XCTEST.</p> </li>
    /// <li> <p>XCTEST_UI.</p> </li>
    /// </ul>
    pub fn test_type(mut self, input: crate::types::TestType) -> Self {
        self.inner = self.inner.test_type(input);
        self
    }
    /// <p>The test type for the specified device pool.</p>
    /// <p>Allowed values include the following:</p>
    /// <ul>
    /// <li> <p>BUILTIN_FUZZ.</p> </li>
    /// <li> <p>BUILTIN_EXPLORER. For Android, an app explorer that traverses an Android app, interacting with it and capturing screenshots at the same time.</p> </li>
    /// <li> <p>APPIUM_JAVA_JUNIT.</p> </li>
    /// <li> <p>APPIUM_JAVA_TESTNG.</p> </li>
    /// <li> <p>APPIUM_PYTHON.</p> </li>
    /// <li> <p>APPIUM_NODE.</p> </li>
    /// <li> <p>APPIUM_RUBY.</p> </li>
    /// <li> <p>APPIUM_WEB_JAVA_JUNIT.</p> </li>
    /// <li> <p>APPIUM_WEB_JAVA_TESTNG.</p> </li>
    /// <li> <p>APPIUM_WEB_PYTHON.</p> </li>
    /// <li> <p>APPIUM_WEB_NODE.</p> </li>
    /// <li> <p>APPIUM_WEB_RUBY.</p> </li>
    /// <li> <p>CALABASH.</p> </li>
    /// <li> <p>INSTRUMENTATION.</p> </li>
    /// <li> <p>UIAUTOMATION.</p> </li>
    /// <li> <p>UIAUTOMATOR.</p> </li>
    /// <li> <p>XCTEST.</p> </li>
    /// <li> <p>XCTEST_UI.</p> </li>
    /// </ul>
    pub fn set_test_type(mut self, input: std::option::Option<crate::types::TestType>) -> Self {
        self.inner = self.inner.set_test_type(input);
        self
    }
    /// <p>Information about the uploaded test to be run against the device pool.</p>
    pub fn test(mut self, input: crate::types::ScheduleRunTest) -> Self {
        self.inner = self.inner.test(input);
        self
    }
    /// <p>Information about the uploaded test to be run against the device pool.</p>
    pub fn set_test(mut self, input: std::option::Option<crate::types::ScheduleRunTest>) -> Self {
        self.inner = self.inner.set_test(input);
        self
    }
    /// <p>An object that contains information about the settings for a run.</p>
    pub fn configuration(mut self, input: crate::types::ScheduleRunConfiguration) -> Self {
        self.inner = self.inner.configuration(input);
        self
    }
    /// <p>An object that contains information about the settings for a run.</p>
    pub fn set_configuration(
        mut self,
        input: std::option::Option<crate::types::ScheduleRunConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_configuration(input);
        self
    }
}
