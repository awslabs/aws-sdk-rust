// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the result of describe device pool compatibility request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetDevicePoolCompatibilityOutput {
    /// <p>Information about compatible devices.</p>
    #[doc(hidden)]
    pub compatible_devices:
        std::option::Option<std::vec::Vec<crate::types::DevicePoolCompatibilityResult>>,
    /// <p>Information about incompatible devices.</p>
    #[doc(hidden)]
    pub incompatible_devices:
        std::option::Option<std::vec::Vec<crate::types::DevicePoolCompatibilityResult>>,
    _request_id: Option<String>,
}
impl GetDevicePoolCompatibilityOutput {
    /// <p>Information about compatible devices.</p>
    pub fn compatible_devices(
        &self,
    ) -> std::option::Option<&[crate::types::DevicePoolCompatibilityResult]> {
        self.compatible_devices.as_deref()
    }
    /// <p>Information about incompatible devices.</p>
    pub fn incompatible_devices(
        &self,
    ) -> std::option::Option<&[crate::types::DevicePoolCompatibilityResult]> {
        self.incompatible_devices.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetDevicePoolCompatibilityOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetDevicePoolCompatibilityOutput {
    /// Creates a new builder-style object to manufacture [`GetDevicePoolCompatibilityOutput`](crate::operation::get_device_pool_compatibility::GetDevicePoolCompatibilityOutput).
    pub fn builder() -> crate::operation::get_device_pool_compatibility::builders::GetDevicePoolCompatibilityOutputBuilder{
        crate::operation::get_device_pool_compatibility::builders::GetDevicePoolCompatibilityOutputBuilder::default()
    }
}

/// A builder for [`GetDevicePoolCompatibilityOutput`](crate::operation::get_device_pool_compatibility::GetDevicePoolCompatibilityOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetDevicePoolCompatibilityOutputBuilder {
    pub(crate) compatible_devices:
        std::option::Option<std::vec::Vec<crate::types::DevicePoolCompatibilityResult>>,
    pub(crate) incompatible_devices:
        std::option::Option<std::vec::Vec<crate::types::DevicePoolCompatibilityResult>>,
    _request_id: Option<String>,
}
impl GetDevicePoolCompatibilityOutputBuilder {
    /// Appends an item to `compatible_devices`.
    ///
    /// To override the contents of this collection use [`set_compatible_devices`](Self::set_compatible_devices).
    ///
    /// <p>Information about compatible devices.</p>
    pub fn compatible_devices(
        mut self,
        input: crate::types::DevicePoolCompatibilityResult,
    ) -> Self {
        let mut v = self.compatible_devices.unwrap_or_default();
        v.push(input);
        self.compatible_devices = Some(v);
        self
    }
    /// <p>Information about compatible devices.</p>
    pub fn set_compatible_devices(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DevicePoolCompatibilityResult>>,
    ) -> Self {
        self.compatible_devices = input;
        self
    }
    /// Appends an item to `incompatible_devices`.
    ///
    /// To override the contents of this collection use [`set_incompatible_devices`](Self::set_incompatible_devices).
    ///
    /// <p>Information about incompatible devices.</p>
    pub fn incompatible_devices(
        mut self,
        input: crate::types::DevicePoolCompatibilityResult,
    ) -> Self {
        let mut v = self.incompatible_devices.unwrap_or_default();
        v.push(input);
        self.incompatible_devices = Some(v);
        self
    }
    /// <p>Information about incompatible devices.</p>
    pub fn set_incompatible_devices(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DevicePoolCompatibilityResult>>,
    ) -> Self {
        self.incompatible_devices = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetDevicePoolCompatibilityOutput`](crate::operation::get_device_pool_compatibility::GetDevicePoolCompatibilityOutput).
    pub fn build(
        self,
    ) -> crate::operation::get_device_pool_compatibility::GetDevicePoolCompatibilityOutput {
        crate::operation::get_device_pool_compatibility::GetDevicePoolCompatibilityOutput {
            compatible_devices: self.compatible_devices,
            incompatible_devices: self.incompatible_devices,
            _request_id: self._request_id,
        }
    }
}
