// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the result of a list device pools request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListDevicePoolsInput {
    /// <p>The project ARN.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The device pools' type.</p>
    /// <p>Allowed values include:</p>
    /// <ul>
    /// <li> <p>CURATED: A device pool that is created and managed by AWS Device Farm.</p> </li>
    /// <li> <p>PRIVATE: A device pool that is created and managed by the device pool developer.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::DevicePoolType>,
    /// <p>An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListDevicePoolsInput {
    /// <p>The project ARN.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The device pools' type.</p>
    /// <p>Allowed values include:</p>
    /// <ul>
    /// <li> <p>CURATED: A device pool that is created and managed by AWS Device Farm.</p> </li>
    /// <li> <p>PRIVATE: A device pool that is created and managed by the device pool developer.</p> </li>
    /// </ul>
    pub fn r#type(&self) -> std::option::Option<&crate::types::DevicePoolType> {
        self.r#type.as_ref()
    }
    /// <p>An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListDevicePoolsInput {
    /// Creates a new builder-style object to manufacture [`ListDevicePoolsInput`](crate::operation::list_device_pools::ListDevicePoolsInput).
    pub fn builder() -> crate::operation::list_device_pools::builders::ListDevicePoolsInputBuilder {
        crate::operation::list_device_pools::builders::ListDevicePoolsInputBuilder::default()
    }
}

/// A builder for [`ListDevicePoolsInput`](crate::operation::list_device_pools::ListDevicePoolsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListDevicePoolsInputBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::DevicePoolType>,
    pub(crate) next_token: std::option::Option<std::string::String>,
}
impl ListDevicePoolsInputBuilder {
    /// <p>The project ARN.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The project ARN.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The device pools' type.</p>
    /// <p>Allowed values include:</p>
    /// <ul>
    /// <li> <p>CURATED: A device pool that is created and managed by AWS Device Farm.</p> </li>
    /// <li> <p>PRIVATE: A device pool that is created and managed by the device pool developer.</p> </li>
    /// </ul>
    pub fn r#type(mut self, input: crate::types::DevicePoolType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The device pools' type.</p>
    /// <p>Allowed values include:</p>
    /// <ul>
    /// <li> <p>CURATED: A device pool that is created and managed by AWS Device Farm.</p> </li>
    /// <li> <p>PRIVATE: A device pool that is created and managed by the device pool developer.</p> </li>
    /// </ul>
    pub fn set_type(mut self, input: std::option::Option<crate::types::DevicePoolType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Consumes the builder and constructs a [`ListDevicePoolsInput`](crate::operation::list_device_pools::ListDevicePoolsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_device_pools::ListDevicePoolsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_device_pools::ListDevicePoolsInput {
            arn: self.arn,
            r#type: self.r#type,
            next_token: self.next_token,
        })
    }
}
