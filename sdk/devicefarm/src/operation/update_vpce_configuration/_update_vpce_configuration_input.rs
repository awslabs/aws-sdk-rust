// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateVpceConfigurationInput {
    /// <p>The Amazon Resource Name (ARN) of the VPC endpoint configuration you want to update.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The friendly name you give to your VPC endpoint configuration to manage your configurations more easily.</p>
    pub vpce_configuration_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the VPC endpoint service running in your AWS account that you want Device Farm to test.</p>
    pub vpce_service_name: ::std::option::Option<::std::string::String>,
    /// <p>The DNS (domain) name used to connect to your private service in your VPC. The DNS name must not already be in use on the internet.</p>
    pub service_dns_name: ::std::option::Option<::std::string::String>,
    /// <p>An optional description that provides details about your VPC endpoint configuration.</p>
    pub vpce_configuration_description: ::std::option::Option<::std::string::String>,
}
impl UpdateVpceConfigurationInput {
    /// <p>The Amazon Resource Name (ARN) of the VPC endpoint configuration you want to update.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The friendly name you give to your VPC endpoint configuration to manage your configurations more easily.</p>
    pub fn vpce_configuration_name(&self) -> ::std::option::Option<&str> {
        self.vpce_configuration_name.as_deref()
    }
    /// <p>The name of the VPC endpoint service running in your AWS account that you want Device Farm to test.</p>
    pub fn vpce_service_name(&self) -> ::std::option::Option<&str> {
        self.vpce_service_name.as_deref()
    }
    /// <p>The DNS (domain) name used to connect to your private service in your VPC. The DNS name must not already be in use on the internet.</p>
    pub fn service_dns_name(&self) -> ::std::option::Option<&str> {
        self.service_dns_name.as_deref()
    }
    /// <p>An optional description that provides details about your VPC endpoint configuration.</p>
    pub fn vpce_configuration_description(&self) -> ::std::option::Option<&str> {
        self.vpce_configuration_description.as_deref()
    }
}
impl UpdateVpceConfigurationInput {
    /// Creates a new builder-style object to manufacture [`UpdateVpceConfigurationInput`](crate::operation::update_vpce_configuration::UpdateVpceConfigurationInput).
    pub fn builder() -> crate::operation::update_vpce_configuration::builders::UpdateVpceConfigurationInputBuilder {
        crate::operation::update_vpce_configuration::builders::UpdateVpceConfigurationInputBuilder::default()
    }
}

/// A builder for [`UpdateVpceConfigurationInput`](crate::operation::update_vpce_configuration::UpdateVpceConfigurationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateVpceConfigurationInputBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) vpce_configuration_name: ::std::option::Option<::std::string::String>,
    pub(crate) vpce_service_name: ::std::option::Option<::std::string::String>,
    pub(crate) service_dns_name: ::std::option::Option<::std::string::String>,
    pub(crate) vpce_configuration_description: ::std::option::Option<::std::string::String>,
}
impl UpdateVpceConfigurationInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the VPC endpoint configuration you want to update.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the VPC endpoint configuration you want to update.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the VPC endpoint configuration you want to update.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The friendly name you give to your VPC endpoint configuration to manage your configurations more easily.</p>
    pub fn vpce_configuration_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpce_configuration_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The friendly name you give to your VPC endpoint configuration to manage your configurations more easily.</p>
    pub fn set_vpce_configuration_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpce_configuration_name = input;
        self
    }
    /// <p>The friendly name you give to your VPC endpoint configuration to manage your configurations more easily.</p>
    pub fn get_vpce_configuration_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpce_configuration_name
    }
    /// <p>The name of the VPC endpoint service running in your AWS account that you want Device Farm to test.</p>
    pub fn vpce_service_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpce_service_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the VPC endpoint service running in your AWS account that you want Device Farm to test.</p>
    pub fn set_vpce_service_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpce_service_name = input;
        self
    }
    /// <p>The name of the VPC endpoint service running in your AWS account that you want Device Farm to test.</p>
    pub fn get_vpce_service_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpce_service_name
    }
    /// <p>The DNS (domain) name used to connect to your private service in your VPC. The DNS name must not already be in use on the internet.</p>
    pub fn service_dns_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_dns_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The DNS (domain) name used to connect to your private service in your VPC. The DNS name must not already be in use on the internet.</p>
    pub fn set_service_dns_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_dns_name = input;
        self
    }
    /// <p>The DNS (domain) name used to connect to your private service in your VPC. The DNS name must not already be in use on the internet.</p>
    pub fn get_service_dns_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_dns_name
    }
    /// <p>An optional description that provides details about your VPC endpoint configuration.</p>
    pub fn vpce_configuration_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpce_configuration_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An optional description that provides details about your VPC endpoint configuration.</p>
    pub fn set_vpce_configuration_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpce_configuration_description = input;
        self
    }
    /// <p>An optional description that provides details about your VPC endpoint configuration.</p>
    pub fn get_vpce_configuration_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpce_configuration_description
    }
    /// Consumes the builder and constructs a [`UpdateVpceConfigurationInput`](crate::operation::update_vpce_configuration::UpdateVpceConfigurationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_vpce_configuration::UpdateVpceConfigurationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_vpce_configuration::UpdateVpceConfigurationInput {
            arn: self.arn,
            vpce_configuration_name: self.vpce_configuration_name,
            vpce_service_name: self.vpce_service_name,
            service_dns_name: self.service_dns_name,
            vpce_configuration_description: self.vpce_configuration_description,
        })
    }
}
