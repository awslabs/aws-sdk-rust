// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetTestGridSessionInput {
    /// <p>The ARN for the project that this session belongs to. See <code>CreateTestGridProject</code> and <code>ListTestGridProjects</code>.</p>
    pub project_arn: ::std::option::Option<::std::string::String>,
    /// <p>An ID associated with this session.</p>
    pub session_id: ::std::option::Option<::std::string::String>,
    /// <p>An ARN that uniquely identifies a <code>TestGridSession</code>.</p>
    pub session_arn: ::std::option::Option<::std::string::String>,
}
impl GetTestGridSessionInput {
    /// <p>The ARN for the project that this session belongs to. See <code>CreateTestGridProject</code> and <code>ListTestGridProjects</code>.</p>
    pub fn project_arn(&self) -> ::std::option::Option<&str> {
        self.project_arn.as_deref()
    }
    /// <p>An ID associated with this session.</p>
    pub fn session_id(&self) -> ::std::option::Option<&str> {
        self.session_id.as_deref()
    }
    /// <p>An ARN that uniquely identifies a <code>TestGridSession</code>.</p>
    pub fn session_arn(&self) -> ::std::option::Option<&str> {
        self.session_arn.as_deref()
    }
}
impl GetTestGridSessionInput {
    /// Creates a new builder-style object to manufacture [`GetTestGridSessionInput`](crate::operation::get_test_grid_session::GetTestGridSessionInput).
    pub fn builder() -> crate::operation::get_test_grid_session::builders::GetTestGridSessionInputBuilder {
        crate::operation::get_test_grid_session::builders::GetTestGridSessionInputBuilder::default()
    }
}

/// A builder for [`GetTestGridSessionInput`](crate::operation::get_test_grid_session::GetTestGridSessionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetTestGridSessionInputBuilder {
    pub(crate) project_arn: ::std::option::Option<::std::string::String>,
    pub(crate) session_id: ::std::option::Option<::std::string::String>,
    pub(crate) session_arn: ::std::option::Option<::std::string::String>,
}
impl GetTestGridSessionInputBuilder {
    /// <p>The ARN for the project that this session belongs to. See <code>CreateTestGridProject</code> and <code>ListTestGridProjects</code>.</p>
    pub fn project_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN for the project that this session belongs to. See <code>CreateTestGridProject</code> and <code>ListTestGridProjects</code>.</p>
    pub fn set_project_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_arn = input;
        self
    }
    /// <p>The ARN for the project that this session belongs to. See <code>CreateTestGridProject</code> and <code>ListTestGridProjects</code>.</p>
    pub fn get_project_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_arn
    }
    /// <p>An ID associated with this session.</p>
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An ID associated with this session.</p>
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// <p>An ID associated with this session.</p>
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_id
    }
    /// <p>An ARN that uniquely identifies a <code>TestGridSession</code>.</p>
    pub fn session_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An ARN that uniquely identifies a <code>TestGridSession</code>.</p>
    pub fn set_session_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_arn = input;
        self
    }
    /// <p>An ARN that uniquely identifies a <code>TestGridSession</code>.</p>
    pub fn get_session_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_arn
    }
    /// Consumes the builder and constructs a [`GetTestGridSessionInput`](crate::operation::get_test_grid_session::GetTestGridSessionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_test_grid_session::GetTestGridSessionInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::get_test_grid_session::GetTestGridSessionInput {
            project_arn: self.project_arn,
            session_id: self.session_id,
            session_arn: self.session_arn,
        })
    }
}
