// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::schedule_run::_schedule_run_output::ScheduleRunOutputBuilder;

pub use crate::operation::schedule_run::_schedule_run_input::ScheduleRunInputBuilder;

/// Fluent builder constructing a request to `ScheduleRun`.
///
/// <p>Schedules a run.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ScheduleRunFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::schedule_run::builders::ScheduleRunInputBuilder,
}
impl ScheduleRunFluentBuilder {
    /// Creates a new `ScheduleRun`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::schedule_run::ScheduleRun,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::schedule_run::ScheduleRunError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::schedule_run::ScheduleRunOutput,
        aws_smithy_http::result::SdkError<crate::operation::schedule_run::ScheduleRunError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ARN of the project for the run to be scheduled.</p>
    pub fn project_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.project_arn(input.into());
        self
    }
    /// <p>The ARN of the project for the run to be scheduled.</p>
    pub fn set_project_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_project_arn(input);
        self
    }
    /// <p>The ARN of an application package to run tests against, created with <code>CreateUpload</code>. See <code>ListUploads</code>.</p>
    pub fn app_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.app_arn(input.into());
        self
    }
    /// <p>The ARN of an application package to run tests against, created with <code>CreateUpload</code>. See <code>ListUploads</code>.</p>
    pub fn set_app_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_app_arn(input);
        self
    }
    /// <p>The ARN of the device pool for the run to be scheduled.</p>
    pub fn device_pool_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.device_pool_arn(input.into());
        self
    }
    /// <p>The ARN of the device pool for the run to be scheduled.</p>
    pub fn set_device_pool_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_device_pool_arn(input);
        self
    }
    /// <p>The filter criteria used to dynamically select a set of devices for a test run and the maximum number of devices to be included in the run.</p>
    /// <p>Either <b> <code>devicePoolArn</code> </b> or <b> <code>deviceSelectionConfiguration</code> </b> is required in a request.</p>
    pub fn device_selection_configuration(
        mut self,
        input: crate::types::DeviceSelectionConfiguration,
    ) -> Self {
        self.inner = self.inner.device_selection_configuration(input);
        self
    }
    /// <p>The filter criteria used to dynamically select a set of devices for a test run and the maximum number of devices to be included in the run.</p>
    /// <p>Either <b> <code>devicePoolArn</code> </b> or <b> <code>deviceSelectionConfiguration</code> </b> is required in a request.</p>
    pub fn set_device_selection_configuration(
        mut self,
        input: std::option::Option<crate::types::DeviceSelectionConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_device_selection_configuration(input);
        self
    }
    /// <p>The name for the run to be scheduled.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name for the run to be scheduled.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>Information about the test for the run to be scheduled.</p>
    pub fn test(mut self, input: crate::types::ScheduleRunTest) -> Self {
        self.inner = self.inner.test(input);
        self
    }
    /// <p>Information about the test for the run to be scheduled.</p>
    pub fn set_test(mut self, input: std::option::Option<crate::types::ScheduleRunTest>) -> Self {
        self.inner = self.inner.set_test(input);
        self
    }
    /// <p>Information about the settings for the run to be scheduled.</p>
    pub fn configuration(mut self, input: crate::types::ScheduleRunConfiguration) -> Self {
        self.inner = self.inner.configuration(input);
        self
    }
    /// <p>Information about the settings for the run to be scheduled.</p>
    pub fn set_configuration(
        mut self,
        input: std::option::Option<crate::types::ScheduleRunConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_configuration(input);
        self
    }
    /// <p>Specifies configuration information about a test run, such as the execution timeout (in minutes).</p>
    pub fn execution_configuration(mut self, input: crate::types::ExecutionConfiguration) -> Self {
        self.inner = self.inner.execution_configuration(input);
        self
    }
    /// <p>Specifies configuration information about a test run, such as the execution timeout (in minutes).</p>
    pub fn set_execution_configuration(
        mut self,
        input: std::option::Option<crate::types::ExecutionConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_execution_configuration(input);
        self
    }
}
