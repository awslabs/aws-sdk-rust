// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateVpceConfigurationInput {
    /// <p>The friendly name you give to your VPC endpoint configuration, to manage your configurations more easily.</p>
    #[doc(hidden)]
    pub vpce_configuration_name: std::option::Option<std::string::String>,
    /// <p>The name of the VPC endpoint service running in your AWS account that you want Device Farm to test.</p>
    #[doc(hidden)]
    pub vpce_service_name: std::option::Option<std::string::String>,
    /// <p>The DNS name of the service running in your VPC that you want Device Farm to test.</p>
    #[doc(hidden)]
    pub service_dns_name: std::option::Option<std::string::String>,
    /// <p>An optional description that provides details about your VPC endpoint configuration.</p>
    #[doc(hidden)]
    pub vpce_configuration_description: std::option::Option<std::string::String>,
}
impl CreateVpceConfigurationInput {
    /// <p>The friendly name you give to your VPC endpoint configuration, to manage your configurations more easily.</p>
    pub fn vpce_configuration_name(&self) -> std::option::Option<&str> {
        self.vpce_configuration_name.as_deref()
    }
    /// <p>The name of the VPC endpoint service running in your AWS account that you want Device Farm to test.</p>
    pub fn vpce_service_name(&self) -> std::option::Option<&str> {
        self.vpce_service_name.as_deref()
    }
    /// <p>The DNS name of the service running in your VPC that you want Device Farm to test.</p>
    pub fn service_dns_name(&self) -> std::option::Option<&str> {
        self.service_dns_name.as_deref()
    }
    /// <p>An optional description that provides details about your VPC endpoint configuration.</p>
    pub fn vpce_configuration_description(&self) -> std::option::Option<&str> {
        self.vpce_configuration_description.as_deref()
    }
}
impl CreateVpceConfigurationInput {
    /// Creates a new builder-style object to manufacture [`CreateVpceConfigurationInput`](crate::operation::create_vpce_configuration::CreateVpceConfigurationInput).
    pub fn builder(
    ) -> crate::operation::create_vpce_configuration::builders::CreateVpceConfigurationInputBuilder
    {
        crate::operation::create_vpce_configuration::builders::CreateVpceConfigurationInputBuilder::default()
    }
}

/// A builder for [`CreateVpceConfigurationInput`](crate::operation::create_vpce_configuration::CreateVpceConfigurationInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateVpceConfigurationInputBuilder {
    pub(crate) vpce_configuration_name: std::option::Option<std::string::String>,
    pub(crate) vpce_service_name: std::option::Option<std::string::String>,
    pub(crate) service_dns_name: std::option::Option<std::string::String>,
    pub(crate) vpce_configuration_description: std::option::Option<std::string::String>,
}
impl CreateVpceConfigurationInputBuilder {
    /// <p>The friendly name you give to your VPC endpoint configuration, to manage your configurations more easily.</p>
    pub fn vpce_configuration_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.vpce_configuration_name = Some(input.into());
        self
    }
    /// <p>The friendly name you give to your VPC endpoint configuration, to manage your configurations more easily.</p>
    pub fn set_vpce_configuration_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.vpce_configuration_name = input;
        self
    }
    /// <p>The name of the VPC endpoint service running in your AWS account that you want Device Farm to test.</p>
    pub fn vpce_service_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.vpce_service_name = Some(input.into());
        self
    }
    /// <p>The name of the VPC endpoint service running in your AWS account that you want Device Farm to test.</p>
    pub fn set_vpce_service_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.vpce_service_name = input;
        self
    }
    /// <p>The DNS name of the service running in your VPC that you want Device Farm to test.</p>
    pub fn service_dns_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.service_dns_name = Some(input.into());
        self
    }
    /// <p>The DNS name of the service running in your VPC that you want Device Farm to test.</p>
    pub fn set_service_dns_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.service_dns_name = input;
        self
    }
    /// <p>An optional description that provides details about your VPC endpoint configuration.</p>
    pub fn vpce_configuration_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.vpce_configuration_description = Some(input.into());
        self
    }
    /// <p>An optional description that provides details about your VPC endpoint configuration.</p>
    pub fn set_vpce_configuration_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.vpce_configuration_description = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateVpceConfigurationInput`](crate::operation::create_vpce_configuration::CreateVpceConfigurationInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_vpce_configuration::CreateVpceConfigurationInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_vpce_configuration::CreateVpceConfigurationInput {
                vpce_configuration_name: self.vpce_configuration_name,
                vpce_service_name: self.vpce_service_name,
                service_dns_name: self.service_dns_name,
                vpce_configuration_description: self.vpce_configuration_description,
            },
        )
    }
}
