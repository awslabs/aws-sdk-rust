// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTestGridProjectsOutput {
    /// <p>The list of TestGridProjects, based on a <code>ListTestGridProjectsRequest</code>.</p>
    #[doc(hidden)]
    pub test_grid_projects: std::option::Option<std::vec::Vec<crate::types::TestGridProject>>,
    /// <p>Used for pagination. Pass into <code>ListTestGridProjects</code> to get more results in a paginated request.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListTestGridProjectsOutput {
    /// <p>The list of TestGridProjects, based on a <code>ListTestGridProjectsRequest</code>.</p>
    pub fn test_grid_projects(&self) -> std::option::Option<&[crate::types::TestGridProject]> {
        self.test_grid_projects.as_deref()
    }
    /// <p>Used for pagination. Pass into <code>ListTestGridProjects</code> to get more results in a paginated request.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListTestGridProjectsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListTestGridProjectsOutput {
    /// Creates a new builder-style object to manufacture [`ListTestGridProjectsOutput`](crate::operation::list_test_grid_projects::ListTestGridProjectsOutput).
    pub fn builder(
    ) -> crate::operation::list_test_grid_projects::builders::ListTestGridProjectsOutputBuilder
    {
        crate::operation::list_test_grid_projects::builders::ListTestGridProjectsOutputBuilder::default()
    }
}

/// A builder for [`ListTestGridProjectsOutput`](crate::operation::list_test_grid_projects::ListTestGridProjectsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListTestGridProjectsOutputBuilder {
    pub(crate) test_grid_projects:
        std::option::Option<std::vec::Vec<crate::types::TestGridProject>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListTestGridProjectsOutputBuilder {
    /// Appends an item to `test_grid_projects`.
    ///
    /// To override the contents of this collection use [`set_test_grid_projects`](Self::set_test_grid_projects).
    ///
    /// <p>The list of TestGridProjects, based on a <code>ListTestGridProjectsRequest</code>.</p>
    pub fn test_grid_projects(mut self, input: crate::types::TestGridProject) -> Self {
        let mut v = self.test_grid_projects.unwrap_or_default();
        v.push(input);
        self.test_grid_projects = Some(v);
        self
    }
    /// <p>The list of TestGridProjects, based on a <code>ListTestGridProjectsRequest</code>.</p>
    pub fn set_test_grid_projects(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TestGridProject>>,
    ) -> Self {
        self.test_grid_projects = input;
        self
    }
    /// <p>Used for pagination. Pass into <code>ListTestGridProjects</code> to get more results in a paginated request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>Used for pagination. Pass into <code>ListTestGridProjects</code> to get more results in a paginated request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListTestGridProjectsOutput`](crate::operation::list_test_grid_projects::ListTestGridProjectsOutput).
    pub fn build(self) -> crate::operation::list_test_grid_projects::ListTestGridProjectsOutput {
        crate::operation::list_test_grid_projects::ListTestGridProjectsOutput {
            test_grid_projects: self.test_grid_projects,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
