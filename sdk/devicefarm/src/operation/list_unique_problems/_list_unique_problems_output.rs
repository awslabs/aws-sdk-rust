// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the result of a list unique problems request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListUniqueProblemsOutput {
    /// <p>Information about the unique problems.</p>
    /// <p>Allowed values include:</p>
    /// <ul>
    /// <li> <p>PENDING</p> </li>
    /// <li> <p>PASSED</p> </li>
    /// <li> <p>WARNED</p> </li>
    /// <li> <p>FAILED</p> </li>
    /// <li> <p>SKIPPED</p> </li>
    /// <li> <p>ERRORED</p> </li>
    /// <li> <p>STOPPED</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub unique_problems: std::option::Option<
        std::collections::HashMap<
            crate::types::ExecutionResult,
            std::vec::Vec<crate::types::UniqueProblem>,
        >,
    >,
    /// <p>If the number of items that are returned is significantly large, this is an identifier that is also returned. It can be used in a subsequent call to this operation to return the next set of items in the list.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListUniqueProblemsOutput {
    /// <p>Information about the unique problems.</p>
    /// <p>Allowed values include:</p>
    /// <ul>
    /// <li> <p>PENDING</p> </li>
    /// <li> <p>PASSED</p> </li>
    /// <li> <p>WARNED</p> </li>
    /// <li> <p>FAILED</p> </li>
    /// <li> <p>SKIPPED</p> </li>
    /// <li> <p>ERRORED</p> </li>
    /// <li> <p>STOPPED</p> </li>
    /// </ul>
    pub fn unique_problems(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<
            crate::types::ExecutionResult,
            std::vec::Vec<crate::types::UniqueProblem>,
        >,
    > {
        self.unique_problems.as_ref()
    }
    /// <p>If the number of items that are returned is significantly large, this is an identifier that is also returned. It can be used in a subsequent call to this operation to return the next set of items in the list.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListUniqueProblemsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListUniqueProblemsOutput {
    /// Creates a new builder-style object to manufacture [`ListUniqueProblemsOutput`](crate::operation::list_unique_problems::ListUniqueProblemsOutput).
    pub fn builder(
    ) -> crate::operation::list_unique_problems::builders::ListUniqueProblemsOutputBuilder {
        crate::operation::list_unique_problems::builders::ListUniqueProblemsOutputBuilder::default()
    }
}

/// A builder for [`ListUniqueProblemsOutput`](crate::operation::list_unique_problems::ListUniqueProblemsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListUniqueProblemsOutputBuilder {
    pub(crate) unique_problems: std::option::Option<
        std::collections::HashMap<
            crate::types::ExecutionResult,
            std::vec::Vec<crate::types::UniqueProblem>,
        >,
    >,
    pub(crate) next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListUniqueProblemsOutputBuilder {
    /// Adds a key-value pair to `unique_problems`.
    ///
    /// To override the contents of this collection use [`set_unique_problems`](Self::set_unique_problems).
    ///
    /// <p>Information about the unique problems.</p>
    /// <p>Allowed values include:</p>
    /// <ul>
    /// <li> <p>PENDING</p> </li>
    /// <li> <p>PASSED</p> </li>
    /// <li> <p>WARNED</p> </li>
    /// <li> <p>FAILED</p> </li>
    /// <li> <p>SKIPPED</p> </li>
    /// <li> <p>ERRORED</p> </li>
    /// <li> <p>STOPPED</p> </li>
    /// </ul>
    pub fn unique_problems(
        mut self,
        k: crate::types::ExecutionResult,
        v: std::vec::Vec<crate::types::UniqueProblem>,
    ) -> Self {
        let mut hash_map = self.unique_problems.unwrap_or_default();
        hash_map.insert(k, v);
        self.unique_problems = Some(hash_map);
        self
    }
    /// <p>Information about the unique problems.</p>
    /// <p>Allowed values include:</p>
    /// <ul>
    /// <li> <p>PENDING</p> </li>
    /// <li> <p>PASSED</p> </li>
    /// <li> <p>WARNED</p> </li>
    /// <li> <p>FAILED</p> </li>
    /// <li> <p>SKIPPED</p> </li>
    /// <li> <p>ERRORED</p> </li>
    /// <li> <p>STOPPED</p> </li>
    /// </ul>
    pub fn set_unique_problems(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<
                crate::types::ExecutionResult,
                std::vec::Vec<crate::types::UniqueProblem>,
            >,
        >,
    ) -> Self {
        self.unique_problems = input;
        self
    }
    /// <p>If the number of items that are returned is significantly large, this is an identifier that is also returned. It can be used in a subsequent call to this operation to return the next set of items in the list.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>If the number of items that are returned is significantly large, this is an identifier that is also returned. It can be used in a subsequent call to this operation to return the next set of items in the list.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListUniqueProblemsOutput`](crate::operation::list_unique_problems::ListUniqueProblemsOutput).
    pub fn build(self) -> crate::operation::list_unique_problems::ListUniqueProblemsOutput {
        crate::operation::list_unique_problems::ListUniqueProblemsOutput {
            unique_problems: self.unique_problems,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
