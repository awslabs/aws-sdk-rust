// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateInstanceProfileInput {
    /// <p>The Amazon Resource Name (ARN) of the instance profile.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The updated name for your instance profile.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The updated description for your instance profile.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The updated choice for whether you want to specify package cleanup. The default value is <code>false</code> for private devices.</p>
    #[doc(hidden)]
    pub package_cleanup: std::option::Option<bool>,
    /// <p>An array of strings that specifies the list of app packages that should not be cleaned up from the device after a test run is over.</p>
    /// <p>The list of packages is only considered if you set <code>packageCleanup</code> to <code>true</code>.</p>
    #[doc(hidden)]
    pub exclude_app_packages_from_cleanup: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The updated choice for whether you want to reboot the device after use. The default value is <code>true</code>.</p>
    #[doc(hidden)]
    pub reboot_after_use: std::option::Option<bool>,
}
impl UpdateInstanceProfileInput {
    /// <p>The Amazon Resource Name (ARN) of the instance profile.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The updated name for your instance profile.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The updated description for your instance profile.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The updated choice for whether you want to specify package cleanup. The default value is <code>false</code> for private devices.</p>
    pub fn package_cleanup(&self) -> std::option::Option<bool> {
        self.package_cleanup
    }
    /// <p>An array of strings that specifies the list of app packages that should not be cleaned up from the device after a test run is over.</p>
    /// <p>The list of packages is only considered if you set <code>packageCleanup</code> to <code>true</code>.</p>
    pub fn exclude_app_packages_from_cleanup(&self) -> std::option::Option<&[std::string::String]> {
        self.exclude_app_packages_from_cleanup.as_deref()
    }
    /// <p>The updated choice for whether you want to reboot the device after use. The default value is <code>true</code>.</p>
    pub fn reboot_after_use(&self) -> std::option::Option<bool> {
        self.reboot_after_use
    }
}
impl UpdateInstanceProfileInput {
    /// Creates a new builder-style object to manufacture [`UpdateInstanceProfileInput`](crate::operation::update_instance_profile::UpdateInstanceProfileInput).
    pub fn builder(
    ) -> crate::operation::update_instance_profile::builders::UpdateInstanceProfileInputBuilder
    {
        crate::operation::update_instance_profile::builders::UpdateInstanceProfileInputBuilder::default()
    }
}

/// A builder for [`UpdateInstanceProfileInput`](crate::operation::update_instance_profile::UpdateInstanceProfileInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateInstanceProfileInputBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) package_cleanup: std::option::Option<bool>,
    pub(crate) exclude_app_packages_from_cleanup:
        std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) reboot_after_use: std::option::Option<bool>,
}
impl UpdateInstanceProfileInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the instance profile.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the instance profile.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The updated name for your instance profile.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The updated name for your instance profile.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The updated description for your instance profile.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The updated description for your instance profile.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The updated choice for whether you want to specify package cleanup. The default value is <code>false</code> for private devices.</p>
    pub fn package_cleanup(mut self, input: bool) -> Self {
        self.package_cleanup = Some(input);
        self
    }
    /// <p>The updated choice for whether you want to specify package cleanup. The default value is <code>false</code> for private devices.</p>
    pub fn set_package_cleanup(mut self, input: std::option::Option<bool>) -> Self {
        self.package_cleanup = input;
        self
    }
    /// Appends an item to `exclude_app_packages_from_cleanup`.
    ///
    /// To override the contents of this collection use [`set_exclude_app_packages_from_cleanup`](Self::set_exclude_app_packages_from_cleanup).
    ///
    /// <p>An array of strings that specifies the list of app packages that should not be cleaned up from the device after a test run is over.</p>
    /// <p>The list of packages is only considered if you set <code>packageCleanup</code> to <code>true</code>.</p>
    pub fn exclude_app_packages_from_cleanup(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        let mut v = self.exclude_app_packages_from_cleanup.unwrap_or_default();
        v.push(input.into());
        self.exclude_app_packages_from_cleanup = Some(v);
        self
    }
    /// <p>An array of strings that specifies the list of app packages that should not be cleaned up from the device after a test run is over.</p>
    /// <p>The list of packages is only considered if you set <code>packageCleanup</code> to <code>true</code>.</p>
    pub fn set_exclude_app_packages_from_cleanup(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.exclude_app_packages_from_cleanup = input;
        self
    }
    /// <p>The updated choice for whether you want to reboot the device after use. The default value is <code>true</code>.</p>
    pub fn reboot_after_use(mut self, input: bool) -> Self {
        self.reboot_after_use = Some(input);
        self
    }
    /// <p>The updated choice for whether you want to reboot the device after use. The default value is <code>true</code>.</p>
    pub fn set_reboot_after_use(mut self, input: std::option::Option<bool>) -> Self {
        self.reboot_after_use = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateInstanceProfileInput`](crate::operation::update_instance_profile::UpdateInstanceProfileInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_instance_profile::UpdateInstanceProfileInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_instance_profile::UpdateInstanceProfileInput {
                arn: self.arn,
                name: self.name,
                description: self.description,
                package_cleanup: self.package_cleanup,
                exclude_app_packages_from_cleanup: self.exclude_app_packages_from_cleanup,
                reboot_after_use: self.reboot_after_use,
            },
        )
    }
}
