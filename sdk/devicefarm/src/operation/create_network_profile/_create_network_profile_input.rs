// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateNetworkProfileInput {
    /// <p>The Amazon Resource Name (ARN) of the project for which you want to create a network profile.</p>
    pub project_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name for the new network profile.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the network profile.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The type of network profile to create. Valid values are listed here.</p>
    pub r#type: ::std::option::Option<crate::types::NetworkProfileType>,
    /// <p>The data throughput rate in bits per second, as an integer from 0 to 104857600.</p>
    pub uplink_bandwidth_bits: ::std::option::Option<i64>,
    /// <p>The data throughput rate in bits per second, as an integer from 0 to 104857600.</p>
    pub downlink_bandwidth_bits: ::std::option::Option<i64>,
    /// <p>Delay time for all packets to destination in milliseconds as an integer from 0 to 2000.</p>
    pub uplink_delay_ms: ::std::option::Option<i64>,
    /// <p>Delay time for all packets to destination in milliseconds as an integer from 0 to 2000.</p>
    pub downlink_delay_ms: ::std::option::Option<i64>,
    /// <p>Time variation in the delay of received packets in milliseconds as an integer from 0 to 2000.</p>
    pub uplink_jitter_ms: ::std::option::Option<i64>,
    /// <p>Time variation in the delay of received packets in milliseconds as an integer from 0 to 2000.</p>
    pub downlink_jitter_ms: ::std::option::Option<i64>,
    /// <p>Proportion of transmitted packets that fail to arrive from 0 to 100 percent.</p>
    pub uplink_loss_percent: ::std::option::Option<i32>,
    /// <p>Proportion of received packets that fail to arrive from 0 to 100 percent.</p>
    pub downlink_loss_percent: ::std::option::Option<i32>,
}
impl CreateNetworkProfileInput {
    /// <p>The Amazon Resource Name (ARN) of the project for which you want to create a network profile.</p>
    pub fn project_arn(&self) -> ::std::option::Option<&str> {
        self.project_arn.as_deref()
    }
    /// <p>The name for the new network profile.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the network profile.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The type of network profile to create. Valid values are listed here.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::NetworkProfileType> {
        self.r#type.as_ref()
    }
    /// <p>The data throughput rate in bits per second, as an integer from 0 to 104857600.</p>
    pub fn uplink_bandwidth_bits(&self) -> ::std::option::Option<i64> {
        self.uplink_bandwidth_bits
    }
    /// <p>The data throughput rate in bits per second, as an integer from 0 to 104857600.</p>
    pub fn downlink_bandwidth_bits(&self) -> ::std::option::Option<i64> {
        self.downlink_bandwidth_bits
    }
    /// <p>Delay time for all packets to destination in milliseconds as an integer from 0 to 2000.</p>
    pub fn uplink_delay_ms(&self) -> ::std::option::Option<i64> {
        self.uplink_delay_ms
    }
    /// <p>Delay time for all packets to destination in milliseconds as an integer from 0 to 2000.</p>
    pub fn downlink_delay_ms(&self) -> ::std::option::Option<i64> {
        self.downlink_delay_ms
    }
    /// <p>Time variation in the delay of received packets in milliseconds as an integer from 0 to 2000.</p>
    pub fn uplink_jitter_ms(&self) -> ::std::option::Option<i64> {
        self.uplink_jitter_ms
    }
    /// <p>Time variation in the delay of received packets in milliseconds as an integer from 0 to 2000.</p>
    pub fn downlink_jitter_ms(&self) -> ::std::option::Option<i64> {
        self.downlink_jitter_ms
    }
    /// <p>Proportion of transmitted packets that fail to arrive from 0 to 100 percent.</p>
    pub fn uplink_loss_percent(&self) -> ::std::option::Option<i32> {
        self.uplink_loss_percent
    }
    /// <p>Proportion of received packets that fail to arrive from 0 to 100 percent.</p>
    pub fn downlink_loss_percent(&self) -> ::std::option::Option<i32> {
        self.downlink_loss_percent
    }
}
impl CreateNetworkProfileInput {
    /// Creates a new builder-style object to manufacture [`CreateNetworkProfileInput`](crate::operation::create_network_profile::CreateNetworkProfileInput).
    pub fn builder() -> crate::operation::create_network_profile::builders::CreateNetworkProfileInputBuilder {
        crate::operation::create_network_profile::builders::CreateNetworkProfileInputBuilder::default()
    }
}

/// A builder for [`CreateNetworkProfileInput`](crate::operation::create_network_profile::CreateNetworkProfileInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateNetworkProfileInputBuilder {
    pub(crate) project_arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::NetworkProfileType>,
    pub(crate) uplink_bandwidth_bits: ::std::option::Option<i64>,
    pub(crate) downlink_bandwidth_bits: ::std::option::Option<i64>,
    pub(crate) uplink_delay_ms: ::std::option::Option<i64>,
    pub(crate) downlink_delay_ms: ::std::option::Option<i64>,
    pub(crate) uplink_jitter_ms: ::std::option::Option<i64>,
    pub(crate) downlink_jitter_ms: ::std::option::Option<i64>,
    pub(crate) uplink_loss_percent: ::std::option::Option<i32>,
    pub(crate) downlink_loss_percent: ::std::option::Option<i32>,
}
impl CreateNetworkProfileInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the project for which you want to create a network profile.</p>
    /// This field is required.
    pub fn project_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the project for which you want to create a network profile.</p>
    pub fn set_project_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the project for which you want to create a network profile.</p>
    pub fn get_project_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_arn
    }
    /// <p>The name for the new network profile.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name for the new network profile.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name for the new network profile.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the network profile.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the network profile.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the network profile.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The type of network profile to create. Valid values are listed here.</p>
    pub fn r#type(mut self, input: crate::types::NetworkProfileType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of network profile to create. Valid values are listed here.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::NetworkProfileType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of network profile to create. Valid values are listed here.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::NetworkProfileType> {
        &self.r#type
    }
    /// <p>The data throughput rate in bits per second, as an integer from 0 to 104857600.</p>
    pub fn uplink_bandwidth_bits(mut self, input: i64) -> Self {
        self.uplink_bandwidth_bits = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data throughput rate in bits per second, as an integer from 0 to 104857600.</p>
    pub fn set_uplink_bandwidth_bits(mut self, input: ::std::option::Option<i64>) -> Self {
        self.uplink_bandwidth_bits = input;
        self
    }
    /// <p>The data throughput rate in bits per second, as an integer from 0 to 104857600.</p>
    pub fn get_uplink_bandwidth_bits(&self) -> &::std::option::Option<i64> {
        &self.uplink_bandwidth_bits
    }
    /// <p>The data throughput rate in bits per second, as an integer from 0 to 104857600.</p>
    pub fn downlink_bandwidth_bits(mut self, input: i64) -> Self {
        self.downlink_bandwidth_bits = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data throughput rate in bits per second, as an integer from 0 to 104857600.</p>
    pub fn set_downlink_bandwidth_bits(mut self, input: ::std::option::Option<i64>) -> Self {
        self.downlink_bandwidth_bits = input;
        self
    }
    /// <p>The data throughput rate in bits per second, as an integer from 0 to 104857600.</p>
    pub fn get_downlink_bandwidth_bits(&self) -> &::std::option::Option<i64> {
        &self.downlink_bandwidth_bits
    }
    /// <p>Delay time for all packets to destination in milliseconds as an integer from 0 to 2000.</p>
    pub fn uplink_delay_ms(mut self, input: i64) -> Self {
        self.uplink_delay_ms = ::std::option::Option::Some(input);
        self
    }
    /// <p>Delay time for all packets to destination in milliseconds as an integer from 0 to 2000.</p>
    pub fn set_uplink_delay_ms(mut self, input: ::std::option::Option<i64>) -> Self {
        self.uplink_delay_ms = input;
        self
    }
    /// <p>Delay time for all packets to destination in milliseconds as an integer from 0 to 2000.</p>
    pub fn get_uplink_delay_ms(&self) -> &::std::option::Option<i64> {
        &self.uplink_delay_ms
    }
    /// <p>Delay time for all packets to destination in milliseconds as an integer from 0 to 2000.</p>
    pub fn downlink_delay_ms(mut self, input: i64) -> Self {
        self.downlink_delay_ms = ::std::option::Option::Some(input);
        self
    }
    /// <p>Delay time for all packets to destination in milliseconds as an integer from 0 to 2000.</p>
    pub fn set_downlink_delay_ms(mut self, input: ::std::option::Option<i64>) -> Self {
        self.downlink_delay_ms = input;
        self
    }
    /// <p>Delay time for all packets to destination in milliseconds as an integer from 0 to 2000.</p>
    pub fn get_downlink_delay_ms(&self) -> &::std::option::Option<i64> {
        &self.downlink_delay_ms
    }
    /// <p>Time variation in the delay of received packets in milliseconds as an integer from 0 to 2000.</p>
    pub fn uplink_jitter_ms(mut self, input: i64) -> Self {
        self.uplink_jitter_ms = ::std::option::Option::Some(input);
        self
    }
    /// <p>Time variation in the delay of received packets in milliseconds as an integer from 0 to 2000.</p>
    pub fn set_uplink_jitter_ms(mut self, input: ::std::option::Option<i64>) -> Self {
        self.uplink_jitter_ms = input;
        self
    }
    /// <p>Time variation in the delay of received packets in milliseconds as an integer from 0 to 2000.</p>
    pub fn get_uplink_jitter_ms(&self) -> &::std::option::Option<i64> {
        &self.uplink_jitter_ms
    }
    /// <p>Time variation in the delay of received packets in milliseconds as an integer from 0 to 2000.</p>
    pub fn downlink_jitter_ms(mut self, input: i64) -> Self {
        self.downlink_jitter_ms = ::std::option::Option::Some(input);
        self
    }
    /// <p>Time variation in the delay of received packets in milliseconds as an integer from 0 to 2000.</p>
    pub fn set_downlink_jitter_ms(mut self, input: ::std::option::Option<i64>) -> Self {
        self.downlink_jitter_ms = input;
        self
    }
    /// <p>Time variation in the delay of received packets in milliseconds as an integer from 0 to 2000.</p>
    pub fn get_downlink_jitter_ms(&self) -> &::std::option::Option<i64> {
        &self.downlink_jitter_ms
    }
    /// <p>Proportion of transmitted packets that fail to arrive from 0 to 100 percent.</p>
    pub fn uplink_loss_percent(mut self, input: i32) -> Self {
        self.uplink_loss_percent = ::std::option::Option::Some(input);
        self
    }
    /// <p>Proportion of transmitted packets that fail to arrive from 0 to 100 percent.</p>
    pub fn set_uplink_loss_percent(mut self, input: ::std::option::Option<i32>) -> Self {
        self.uplink_loss_percent = input;
        self
    }
    /// <p>Proportion of transmitted packets that fail to arrive from 0 to 100 percent.</p>
    pub fn get_uplink_loss_percent(&self) -> &::std::option::Option<i32> {
        &self.uplink_loss_percent
    }
    /// <p>Proportion of received packets that fail to arrive from 0 to 100 percent.</p>
    pub fn downlink_loss_percent(mut self, input: i32) -> Self {
        self.downlink_loss_percent = ::std::option::Option::Some(input);
        self
    }
    /// <p>Proportion of received packets that fail to arrive from 0 to 100 percent.</p>
    pub fn set_downlink_loss_percent(mut self, input: ::std::option::Option<i32>) -> Self {
        self.downlink_loss_percent = input;
        self
    }
    /// <p>Proportion of received packets that fail to arrive from 0 to 100 percent.</p>
    pub fn get_downlink_loss_percent(&self) -> &::std::option::Option<i32> {
        &self.downlink_loss_percent
    }
    /// Consumes the builder and constructs a [`CreateNetworkProfileInput`](crate::operation::create_network_profile::CreateNetworkProfileInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_network_profile::CreateNetworkProfileInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_network_profile::CreateNetworkProfileInput {
            project_arn: self.project_arn,
            name: self.name,
            description: self.description,
            r#type: self.r#type,
            uplink_bandwidth_bits: self.uplink_bandwidth_bits,
            downlink_bandwidth_bits: self.downlink_bandwidth_bits,
            uplink_delay_ms: self.uplink_delay_ms,
            downlink_delay_ms: self.downlink_delay_ms,
            uplink_jitter_ms: self.uplink_jitter_ms,
            downlink_jitter_ms: self.downlink_jitter_ms,
            uplink_loss_percent: self.uplink_loss_percent,
            downlink_loss_percent: self.downlink_loss_percent,
        })
    }
}
