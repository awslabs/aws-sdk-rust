// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateTestGridUrlOutput {
    /// <p>A signed URL, expiring in <code>CreateTestGridUrlRequest$expiresInSeconds</code> seconds, to be passed to a <code>RemoteWebDriver</code>. </p>
    #[doc(hidden)]
    pub url: std::option::Option<std::string::String>,
    /// <p>The number of seconds the URL from <code>CreateTestGridUrlResult$url</code> stays active.</p>
    #[doc(hidden)]
    pub expires: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl CreateTestGridUrlOutput {
    /// <p>A signed URL, expiring in <code>CreateTestGridUrlRequest$expiresInSeconds</code> seconds, to be passed to a <code>RemoteWebDriver</code>. </p>
    pub fn url(&self) -> std::option::Option<&str> {
        self.url.as_deref()
    }
    /// <p>The number of seconds the URL from <code>CreateTestGridUrlResult$url</code> stays active.</p>
    pub fn expires(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.expires.as_ref()
    }
}
impl std::fmt::Debug for CreateTestGridUrlOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateTestGridUrlOutput");
        formatter.field("url", &"*** Sensitive Data Redacted ***");
        formatter.field("expires", &self.expires);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl aws_http::request_id::RequestId for CreateTestGridUrlOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateTestGridUrlOutput {
    /// Creates a new builder-style object to manufacture [`CreateTestGridUrlOutput`](crate::operation::create_test_grid_url::CreateTestGridUrlOutput).
    pub fn builder(
    ) -> crate::operation::create_test_grid_url::builders::CreateTestGridUrlOutputBuilder {
        crate::operation::create_test_grid_url::builders::CreateTestGridUrlOutputBuilder::default()
    }
}

/// A builder for [`CreateTestGridUrlOutput`](crate::operation::create_test_grid_url::CreateTestGridUrlOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct CreateTestGridUrlOutputBuilder {
    pub(crate) url: std::option::Option<std::string::String>,
    pub(crate) expires: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl CreateTestGridUrlOutputBuilder {
    /// <p>A signed URL, expiring in <code>CreateTestGridUrlRequest$expiresInSeconds</code> seconds, to be passed to a <code>RemoteWebDriver</code>. </p>
    pub fn url(mut self, input: impl Into<std::string::String>) -> Self {
        self.url = Some(input.into());
        self
    }
    /// <p>A signed URL, expiring in <code>CreateTestGridUrlRequest$expiresInSeconds</code> seconds, to be passed to a <code>RemoteWebDriver</code>. </p>
    pub fn set_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// <p>The number of seconds the URL from <code>CreateTestGridUrlResult$url</code> stays active.</p>
    pub fn expires(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.expires = Some(input);
        self
    }
    /// <p>The number of seconds the URL from <code>CreateTestGridUrlResult$url</code> stays active.</p>
    pub fn set_expires(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.expires = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateTestGridUrlOutput`](crate::operation::create_test_grid_url::CreateTestGridUrlOutput).
    pub fn build(self) -> crate::operation::create_test_grid_url::CreateTestGridUrlOutput {
        crate::operation::create_test_grid_url::CreateTestGridUrlOutput {
            url: self.url,
            expires: self.expires,
            _request_id: self._request_id,
        }
    }
}
impl std::fmt::Debug for CreateTestGridUrlOutputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateTestGridUrlOutputBuilder");
        formatter.field("url", &"*** Sensitive Data Redacted ***");
        formatter.field("expires", &self.expires);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
