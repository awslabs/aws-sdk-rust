// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_get_offering_status_output_next_token(
    input: &crate::operation::get_offering_status::GetOfferingStatusOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_artifacts_output_next_token(
    input: &crate::operation::list_artifacts::ListArtifactsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_device_pools_output_next_token(
    input: &crate::operation::list_device_pools::ListDevicePoolsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_devices_output_next_token(
    input: &crate::operation::list_devices::ListDevicesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_jobs_output_next_token(
    input: &crate::operation::list_jobs::ListJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_offering_transactions_output_next_token(
    input: &crate::operation::list_offering_transactions::ListOfferingTransactionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_offerings_output_next_token(
    input: &crate::operation::list_offerings::ListOfferingsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_projects_output_next_token(
    input: &crate::operation::list_projects::ListProjectsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_runs_output_next_token(
    input: &crate::operation::list_runs::ListRunsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_samples_output_next_token(
    input: &crate::operation::list_samples::ListSamplesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_suites_output_next_token(
    input: &crate::operation::list_suites::ListSuitesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_test_grid_projects_output_next_token(
    input: &crate::operation::list_test_grid_projects::ListTestGridProjectsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_test_grid_session_actions_output_next_token(
    input: &crate::operation::list_test_grid_session_actions::ListTestGridSessionActionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_test_grid_session_artifacts_output_next_token(
    input: &crate::operation::list_test_grid_session_artifacts::ListTestGridSessionArtifactsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_test_grid_sessions_output_next_token(
    input: &crate::operation::list_test_grid_sessions::ListTestGridSessionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_tests_output_next_token(
    input: &crate::operation::list_tests::ListTestsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_unique_problems_output_next_token(
    input: &crate::operation::list_unique_problems::ListUniqueProblemsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_uploads_output_next_token(
    input: &crate::operation::list_uploads::ListUploadsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_artifacts_output_artifacts(
    input: crate::operation::list_artifacts::ListArtifactsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Artifact>> {
    let input = match input.artifacts {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_device_pools_output_device_pools(
    input: crate::operation::list_device_pools::ListDevicePoolsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::DevicePool>> {
    let input = match input.device_pools {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_devices_output_devices(
    input: crate::operation::list_devices::ListDevicesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Device>> {
    let input = match input.devices {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_jobs_output_jobs(
    input: crate::operation::list_jobs::ListJobsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Job>> {
    let input = match input.jobs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_offering_transactions_output_offering_transactions(
    input: crate::operation::list_offering_transactions::ListOfferingTransactionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::OfferingTransaction>> {
    let input = match input.offering_transactions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_offerings_output_offerings(
    input: crate::operation::list_offerings::ListOfferingsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Offering>> {
    let input = match input.offerings {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_projects_output_projects(
    input: crate::operation::list_projects::ListProjectsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Project>> {
    let input = match input.projects {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_runs_output_runs(
    input: crate::operation::list_runs::ListRunsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Run>> {
    let input = match input.runs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_samples_output_samples(
    input: crate::operation::list_samples::ListSamplesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Sample>> {
    let input = match input.samples {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_suites_output_suites(
    input: crate::operation::list_suites::ListSuitesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Suite>> {
    let input = match input.suites {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_tests_output_tests(
    input: crate::operation::list_tests::ListTestsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Test>> {
    let input = match input.tests {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_unique_problems_output_unique_problems(
    input: crate::operation::list_unique_problems::ListUniqueProblemsOutput,
) -> std::option::Option<
    std::collections::HashMap<
        crate::types::ExecutionResult,
        std::vec::Vec<crate::types::UniqueProblem>,
    >,
> {
    let input = match input.unique_problems {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_uploads_output_uploads(
    input: crate::operation::list_uploads::ListUploadsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Upload>> {
    let input = match input.uploads {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
