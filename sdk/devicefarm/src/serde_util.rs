// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn location_correct_errors(mut builder: crate::types::builders::LocationBuilder) -> crate::types::builders::LocationBuilder {
    if builder.latitude.is_none() {
        builder.latitude = Some(Default::default())
    }
    if builder.longitude.is_none() {
        builder.longitude = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn test_grid_vpc_config_correct_errors(
    mut builder: crate::types::builders::TestGridVpcConfigBuilder,
) -> crate::types::builders::TestGridVpcConfigBuilder {
    if builder.security_group_ids.is_none() {
        builder.security_group_ids = Some(Default::default())
    }
    if builder.subnet_ids.is_none() {
        builder.subnet_ids = Some(Default::default())
    }
    if builder.vpc_id.is_none() {
        builder.vpc_id = Some(Default::default())
    }
    builder
}

pub(crate) fn vpc_config_correct_errors(mut builder: crate::types::builders::VpcConfigBuilder) -> crate::types::builders::VpcConfigBuilder {
    if builder.security_group_ids.is_none() {
        builder.security_group_ids = Some(Default::default())
    }
    if builder.subnet_ids.is_none() {
        builder.subnet_ids = Some(Default::default())
    }
    if builder.vpc_id.is_none() {
        builder.vpc_id = Some(Default::default())
    }
    builder
}

pub(crate) fn device_filter_correct_errors(mut builder: crate::types::builders::DeviceFilterBuilder) -> crate::types::builders::DeviceFilterBuilder {
    if builder.attribute.is_none() {
        builder.attribute = "no value was set".parse::<crate::types::DeviceFilterAttribute>().ok()
    }
    if builder.operator.is_none() {
        builder.operator = "no value was set".parse::<crate::types::RuleOperator>().ok()
    }
    if builder.values.is_none() {
        builder.values = Some(Default::default())
    }
    builder
}
