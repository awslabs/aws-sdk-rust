// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListNetworkProfiles`](crate::client::fluent_builders::ListNetworkProfiles) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`arn(impl Into<String>)`](crate::client::fluent_builders::ListNetworkProfiles::arn) / [`set_arn(Option<String>)`](crate::client::fluent_builders::ListNetworkProfiles::set_arn): <p>The Amazon Resource Name (ARN) of the project for which you want to list network profiles.</p>
    ///   - [`r#type(NetworkProfileType)`](crate::client::fluent_builders::ListNetworkProfiles::type) / [`set_type(Option<NetworkProfileType>)`](crate::client::fluent_builders::ListNetworkProfiles::set_type): <p>The type of network profile to return information about. Valid values are listed here.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListNetworkProfiles::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListNetworkProfiles::set_next_token): <p>An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.</p>
    /// - On success, responds with [`ListNetworkProfilesOutput`](crate::output::ListNetworkProfilesOutput) with field(s):
    ///   - [`network_profiles(Option<Vec<NetworkProfile>>)`](crate::output::ListNetworkProfilesOutput::network_profiles): <p>A list of the available network profiles.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListNetworkProfilesOutput::next_token): <p>An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.</p>
    /// - On failure, responds with [`SdkError<ListNetworkProfilesError>`](crate::error::ListNetworkProfilesError)
    pub fn list_network_profiles(&self) -> crate::client::fluent_builders::ListNetworkProfiles {
        crate::client::fluent_builders::ListNetworkProfiles::new(self.handle.clone())
    }
}
