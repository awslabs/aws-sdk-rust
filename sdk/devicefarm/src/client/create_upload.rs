// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateUpload`](crate::operation::create_upload::builders::CreateUploadFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project_arn(impl Into<String>)`](crate::operation::create_upload::builders::CreateUploadFluentBuilder::project_arn) / [`set_project_arn(Option<String>)`](crate::operation::create_upload::builders::CreateUploadFluentBuilder::set_project_arn):<br>required: **true**<br><p>The ARN of the project for the upload.</p><br>
    ///   - [`name(impl Into<String>)`](crate::operation::create_upload::builders::CreateUploadFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::create_upload::builders::CreateUploadFluentBuilder::set_name):<br>required: **true**<br><p>The upload's file name. The name should not contain any forward slashes (<code>/</code>). If you are uploading an iOS app, the file name must end with the <code>.ipa</code> extension. If you are uploading an Android app, the file name must end with the <code>.apk</code> extension. For all others, the file name must end with the <code>.zip</code> file extension.</p><br>
    ///   - [`r#type(UploadType)`](crate::operation::create_upload::builders::CreateUploadFluentBuilder::type) / [`set_type(Option<UploadType>)`](crate::operation::create_upload::builders::CreateUploadFluentBuilder::set_type):<br>required: **true**<br><p>The upload's upload type.</p>  <p>Must be one of the following values:</p>  <ul>   <li> <p>ANDROID_APP</p> </li>   <li> <p>IOS_APP</p> </li>   <li> <p>WEB_APP</p> </li>   <li> <p>EXTERNAL_DATA</p> </li>   <li> <p>APPIUM_JAVA_JUNIT_TEST_PACKAGE</p> </li>   <li> <p>APPIUM_JAVA_TESTNG_TEST_PACKAGE</p> </li>   <li> <p>APPIUM_PYTHON_TEST_PACKAGE</p> </li>   <li> <p>APPIUM_NODE_TEST_PACKAGE</p> </li>   <li> <p>APPIUM_RUBY_TEST_PACKAGE</p> </li>   <li> <p>APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE</p> </li>   <li> <p>APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE</p> </li>   <li> <p>APPIUM_WEB_PYTHON_TEST_PACKAGE</p> </li>   <li> <p>APPIUM_WEB_NODE_TEST_PACKAGE</p> </li>   <li> <p>APPIUM_WEB_RUBY_TEST_PACKAGE</p> </li>   <li> <p>CALABASH_TEST_PACKAGE</p> </li>   <li> <p>INSTRUMENTATION_TEST_PACKAGE</p> </li>   <li> <p>UIAUTOMATION_TEST_PACKAGE</p> </li>   <li> <p>UIAUTOMATOR_TEST_PACKAGE</p> </li>   <li> <p>XCTEST_TEST_PACKAGE</p> </li>   <li> <p>XCTEST_UI_TEST_PACKAGE</p> </li>   <li> <p>APPIUM_JAVA_JUNIT_TEST_SPEC</p> </li>   <li> <p>APPIUM_JAVA_TESTNG_TEST_SPEC</p> </li>   <li> <p>APPIUM_PYTHON_TEST_SPEC</p> </li>   <li> <p>APPIUM_NODE_TEST_SPEC</p> </li>   <li> <p>APPIUM_RUBY_TEST_SPEC</p> </li>   <li> <p>APPIUM_WEB_JAVA_JUNIT_TEST_SPEC</p> </li>   <li> <p>APPIUM_WEB_JAVA_TESTNG_TEST_SPEC</p> </li>   <li> <p>APPIUM_WEB_PYTHON_TEST_SPEC</p> </li>   <li> <p>APPIUM_WEB_NODE_TEST_SPEC</p> </li>   <li> <p>APPIUM_WEB_RUBY_TEST_SPEC</p> </li>   <li> <p>INSTRUMENTATION_TEST_SPEC</p> </li>   <li> <p>XCTEST_UI_TEST_SPEC</p> </li>  </ul>  <p> If you call <code>CreateUpload</code> with <code>WEB_APP</code> specified, AWS Device Farm throws an <code>ArgumentException</code> error.</p><br>
    ///   - [`content_type(impl Into<String>)`](crate::operation::create_upload::builders::CreateUploadFluentBuilder::content_type) / [`set_content_type(Option<String>)`](crate::operation::create_upload::builders::CreateUploadFluentBuilder::set_content_type):<br>required: **false**<br><p>The upload's content type (for example, <code>application/octet-stream</code>).</p><br>
    /// - On success, responds with [`CreateUploadOutput`](crate::operation::create_upload::CreateUploadOutput) with field(s):
    ///   - [`upload(Option<Upload>)`](crate::operation::create_upload::CreateUploadOutput::upload): <p>The newly created upload.</p>
    /// - On failure, responds with [`SdkError<CreateUploadError>`](crate::operation::create_upload::CreateUploadError)
    pub fn create_upload(&self) -> crate::operation::create_upload::builders::CreateUploadFluentBuilder {
        crate::operation::create_upload::builders::CreateUploadFluentBuilder::new(self.handle.clone())
    }
}
