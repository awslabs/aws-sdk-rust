// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateDevicePool`](crate::operation::update_device_pool::builders::UpdateDevicePoolFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`arn(impl Into<String>)`](crate::operation::update_device_pool::builders::UpdateDevicePoolFluentBuilder::arn) / [`set_arn(Option<String>)`](crate::operation::update_device_pool::builders::UpdateDevicePoolFluentBuilder::set_arn): <p>The Amazon Resource Name (ARN) of the Device Farm device pool to update.</p>
    ///   - [`name(impl Into<String>)`](crate::operation::update_device_pool::builders::UpdateDevicePoolFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::update_device_pool::builders::UpdateDevicePoolFluentBuilder::set_name): <p>A string that represents the name of the device pool to update.</p>
    ///   - [`description(impl Into<String>)`](crate::operation::update_device_pool::builders::UpdateDevicePoolFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::update_device_pool::builders::UpdateDevicePoolFluentBuilder::set_description): <p>A description of the device pool to update.</p>
    ///   - [`rules(Vec<Rule>)`](crate::operation::update_device_pool::builders::UpdateDevicePoolFluentBuilder::rules) / [`set_rules(Option<Vec<Rule>>)`](crate::operation::update_device_pool::builders::UpdateDevicePoolFluentBuilder::set_rules): <p>Represents the rules to modify for the device pool. Updating rules is optional. If you update rules for your request, the update replaces the existing rules.</p>
    ///   - [`max_devices(i32)`](crate::operation::update_device_pool::builders::UpdateDevicePoolFluentBuilder::max_devices) / [`set_max_devices(Option<i32>)`](crate::operation::update_device_pool::builders::UpdateDevicePoolFluentBuilder::set_max_devices): <p>The number of devices that Device Farm can add to your device pool. Device Farm adds devices that are available and that meet the criteria that you assign for the <code>rules</code> parameter. Depending on how many devices meet these constraints, your device pool might contain fewer devices than the value for this parameter.</p>  <p>By specifying the maximum number of devices, you can control the costs that you incur by running tests.</p>  <p>If you use this parameter in your request, you cannot use the <code>clearMaxDevices</code> parameter in the same request.</p>
    ///   - [`clear_max_devices(bool)`](crate::operation::update_device_pool::builders::UpdateDevicePoolFluentBuilder::clear_max_devices) / [`set_clear_max_devices(Option<bool>)`](crate::operation::update_device_pool::builders::UpdateDevicePoolFluentBuilder::set_clear_max_devices): <p>Sets whether the <code>maxDevices</code> parameter applies to your device pool. If you set this parameter to <code>true</code>, the <code>maxDevices</code> parameter does not apply, and Device Farm does not limit the number of devices that it adds to your device pool. In this case, Device Farm adds all available devices that meet the criteria specified in the <code>rules</code> parameter.</p>  <p>If you use this parameter in your request, you cannot use the <code>maxDevices</code> parameter in the same request.</p>
    /// - On success, responds with [`UpdateDevicePoolOutput`](crate::operation::update_device_pool::UpdateDevicePoolOutput) with field(s):
    ///   - [`device_pool(Option<DevicePool>)`](crate::operation::update_device_pool::UpdateDevicePoolOutput::device_pool): <p>The device pool you just updated.</p>
    /// - On failure, responds with [`SdkError<UpdateDevicePoolError>`](crate::operation::update_device_pool::UpdateDevicePoolError)
    pub fn update_device_pool(
        &self,
    ) -> crate::operation::update_device_pool::builders::UpdateDevicePoolFluentBuilder {
        crate::operation::update_device_pool::builders::UpdateDevicePoolFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
