// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetDevicePoolCompatibility`](crate::operation::get_device_pool_compatibility::builders::GetDevicePoolCompatibilityFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`device_pool_arn(impl Into<String>)`](crate::operation::get_device_pool_compatibility::builders::GetDevicePoolCompatibilityFluentBuilder::device_pool_arn) / [`set_device_pool_arn(Option<String>)`](crate::operation::get_device_pool_compatibility::builders::GetDevicePoolCompatibilityFluentBuilder::set_device_pool_arn): <p>The device pool's ARN.</p>
    ///   - [`app_arn(impl Into<String>)`](crate::operation::get_device_pool_compatibility::builders::GetDevicePoolCompatibilityFluentBuilder::app_arn) / [`set_app_arn(Option<String>)`](crate::operation::get_device_pool_compatibility::builders::GetDevicePoolCompatibilityFluentBuilder::set_app_arn): <p>The ARN of the app that is associated with the specified device pool.</p>
    ///   - [`test_type(TestType)`](crate::operation::get_device_pool_compatibility::builders::GetDevicePoolCompatibilityFluentBuilder::test_type) / [`set_test_type(Option<TestType>)`](crate::operation::get_device_pool_compatibility::builders::GetDevicePoolCompatibilityFluentBuilder::set_test_type): <p>The test type for the specified device pool.</p>  <p>Allowed values include the following:</p>  <ul>   <li> <p>BUILTIN_FUZZ.</p> </li>   <li> <p>BUILTIN_EXPLORER. For Android, an app explorer that traverses an Android app, interacting with it and capturing screenshots at the same time.</p> </li>   <li> <p>APPIUM_JAVA_JUNIT.</p> </li>   <li> <p>APPIUM_JAVA_TESTNG.</p> </li>   <li> <p>APPIUM_PYTHON.</p> </li>   <li> <p>APPIUM_NODE.</p> </li>   <li> <p>APPIUM_RUBY.</p> </li>   <li> <p>APPIUM_WEB_JAVA_JUNIT.</p> </li>   <li> <p>APPIUM_WEB_JAVA_TESTNG.</p> </li>   <li> <p>APPIUM_WEB_PYTHON.</p> </li>   <li> <p>APPIUM_WEB_NODE.</p> </li>   <li> <p>APPIUM_WEB_RUBY.</p> </li>   <li> <p>CALABASH.</p> </li>   <li> <p>INSTRUMENTATION.</p> </li>   <li> <p>UIAUTOMATION.</p> </li>   <li> <p>UIAUTOMATOR.</p> </li>   <li> <p>XCTEST.</p> </li>   <li> <p>XCTEST_UI.</p> </li>  </ul>
    ///   - [`test(ScheduleRunTest)`](crate::operation::get_device_pool_compatibility::builders::GetDevicePoolCompatibilityFluentBuilder::test) / [`set_test(Option<ScheduleRunTest>)`](crate::operation::get_device_pool_compatibility::builders::GetDevicePoolCompatibilityFluentBuilder::set_test): <p>Information about the uploaded test to be run against the device pool.</p>
    ///   - [`configuration(ScheduleRunConfiguration)`](crate::operation::get_device_pool_compatibility::builders::GetDevicePoolCompatibilityFluentBuilder::configuration) / [`set_configuration(Option<ScheduleRunConfiguration>)`](crate::operation::get_device_pool_compatibility::builders::GetDevicePoolCompatibilityFluentBuilder::set_configuration): <p>An object that contains information about the settings for a run.</p>
    /// - On success, responds with [`GetDevicePoolCompatibilityOutput`](crate::operation::get_device_pool_compatibility::GetDevicePoolCompatibilityOutput) with field(s):
    ///   - [`compatible_devices(Option<Vec<DevicePoolCompatibilityResult>>)`](crate::operation::get_device_pool_compatibility::GetDevicePoolCompatibilityOutput::compatible_devices): <p>Information about compatible devices.</p>
    ///   - [`incompatible_devices(Option<Vec<DevicePoolCompatibilityResult>>)`](crate::operation::get_device_pool_compatibility::GetDevicePoolCompatibilityOutput::incompatible_devices): <p>Information about incompatible devices.</p>
    /// - On failure, responds with [`SdkError<GetDevicePoolCompatibilityError>`](crate::operation::get_device_pool_compatibility::GetDevicePoolCompatibilityError)
    pub fn get_device_pool_compatibility(&self) -> crate::operation::get_device_pool_compatibility::builders::GetDevicePoolCompatibilityFluentBuilder{
        crate::operation::get_device_pool_compatibility::builders::GetDevicePoolCompatibilityFluentBuilder::new(self.handle.clone())
    }
}
