// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartSuiteRunInput {
    /// <p>Suite definition ID of the test suite.</p>
    pub suite_definition_id: ::std::option::Option<::std::string::String>,
    /// <p>Suite definition version of the test suite.</p>
    pub suite_definition_version: ::std::option::Option<::std::string::String>,
    /// <p>Suite run configuration.</p>
    pub suite_run_configuration: ::std::option::Option<crate::types::SuiteRunConfiguration>,
    /// <p>The tags to be attached to the suite run.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl StartSuiteRunInput {
    /// <p>Suite definition ID of the test suite.</p>
    pub fn suite_definition_id(&self) -> ::std::option::Option<&str> {
        self.suite_definition_id.as_deref()
    }
    /// <p>Suite definition version of the test suite.</p>
    pub fn suite_definition_version(&self) -> ::std::option::Option<&str> {
        self.suite_definition_version.as_deref()
    }
    /// <p>Suite run configuration.</p>
    pub fn suite_run_configuration(&self) -> ::std::option::Option<&crate::types::SuiteRunConfiguration> {
        self.suite_run_configuration.as_ref()
    }
    /// <p>The tags to be attached to the suite run.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl StartSuiteRunInput {
    /// Creates a new builder-style object to manufacture [`StartSuiteRunInput`](crate::operation::start_suite_run::StartSuiteRunInput).
    pub fn builder() -> crate::operation::start_suite_run::builders::StartSuiteRunInputBuilder {
        crate::operation::start_suite_run::builders::StartSuiteRunInputBuilder::default()
    }
}

/// A builder for [`StartSuiteRunInput`](crate::operation::start_suite_run::StartSuiteRunInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StartSuiteRunInputBuilder {
    pub(crate) suite_definition_id: ::std::option::Option<::std::string::String>,
    pub(crate) suite_definition_version: ::std::option::Option<::std::string::String>,
    pub(crate) suite_run_configuration: ::std::option::Option<crate::types::SuiteRunConfiguration>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl StartSuiteRunInputBuilder {
    /// <p>Suite definition ID of the test suite.</p>
    /// This field is required.
    pub fn suite_definition_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.suite_definition_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Suite definition ID of the test suite.</p>
    pub fn set_suite_definition_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.suite_definition_id = input;
        self
    }
    /// <p>Suite definition ID of the test suite.</p>
    pub fn get_suite_definition_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.suite_definition_id
    }
    /// <p>Suite definition version of the test suite.</p>
    pub fn suite_definition_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.suite_definition_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Suite definition version of the test suite.</p>
    pub fn set_suite_definition_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.suite_definition_version = input;
        self
    }
    /// <p>Suite definition version of the test suite.</p>
    pub fn get_suite_definition_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.suite_definition_version
    }
    /// <p>Suite run configuration.</p>
    /// This field is required.
    pub fn suite_run_configuration(mut self, input: crate::types::SuiteRunConfiguration) -> Self {
        self.suite_run_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Suite run configuration.</p>
    pub fn set_suite_run_configuration(mut self, input: ::std::option::Option<crate::types::SuiteRunConfiguration>) -> Self {
        self.suite_run_configuration = input;
        self
    }
    /// <p>Suite run configuration.</p>
    pub fn get_suite_run_configuration(&self) -> &::std::option::Option<crate::types::SuiteRunConfiguration> {
        &self.suite_run_configuration
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to be attached to the suite run.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags to be attached to the suite run.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags to be attached to the suite run.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`StartSuiteRunInput`](crate::operation::start_suite_run::StartSuiteRunInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::start_suite_run::StartSuiteRunInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::start_suite_run::StartSuiteRunInput {
            suite_definition_id: self.suite_definition_id,
            suite_definition_version: self.suite_definition_version,
            suite_run_configuration: self.suite_run_configuration,
            tags: self.tags,
        })
    }
}
