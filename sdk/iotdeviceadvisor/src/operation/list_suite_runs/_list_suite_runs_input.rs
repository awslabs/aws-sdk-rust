// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListSuiteRunsInput {
    /// <p>Lists the test suite runs of the specified test suite based on suite definition ID.</p>
    #[doc(hidden)]
    pub suite_definition_id: std::option::Option<std::string::String>,
    /// <p>Must be passed along with <code>suiteDefinitionId</code>. Lists the test suite runs of the specified test suite based on suite definition version.</p>
    #[doc(hidden)]
    pub suite_definition_version: std::option::Option<std::string::String>,
    /// <p>The maximum number of results to return at once.</p>
    #[doc(hidden)]
    pub max_results: i32,
    /// <p>A token to retrieve the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListSuiteRunsInput {
    /// <p>Lists the test suite runs of the specified test suite based on suite definition ID.</p>
    pub fn suite_definition_id(&self) -> std::option::Option<&str> {
        self.suite_definition_id.as_deref()
    }
    /// <p>Must be passed along with <code>suiteDefinitionId</code>. Lists the test suite runs of the specified test suite based on suite definition version.</p>
    pub fn suite_definition_version(&self) -> std::option::Option<&str> {
        self.suite_definition_version.as_deref()
    }
    /// <p>The maximum number of results to return at once.</p>
    pub fn max_results(&self) -> i32 {
        self.max_results
    }
    /// <p>A token to retrieve the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListSuiteRunsInput {
    /// Creates a new builder-style object to manufacture [`ListSuiteRunsInput`](crate::operation::list_suite_runs::ListSuiteRunsInput).
    pub fn builder() -> crate::operation::list_suite_runs::builders::ListSuiteRunsInputBuilder {
        crate::operation::list_suite_runs::builders::ListSuiteRunsInputBuilder::default()
    }
}

/// A builder for [`ListSuiteRunsInput`](crate::operation::list_suite_runs::ListSuiteRunsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListSuiteRunsInputBuilder {
    pub(crate) suite_definition_id: std::option::Option<std::string::String>,
    pub(crate) suite_definition_version: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
}
impl ListSuiteRunsInputBuilder {
    /// <p>Lists the test suite runs of the specified test suite based on suite definition ID.</p>
    pub fn suite_definition_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.suite_definition_id = Some(input.into());
        self
    }
    /// <p>Lists the test suite runs of the specified test suite based on suite definition ID.</p>
    pub fn set_suite_definition_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.suite_definition_id = input;
        self
    }
    /// <p>Must be passed along with <code>suiteDefinitionId</code>. Lists the test suite runs of the specified test suite based on suite definition version.</p>
    pub fn suite_definition_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.suite_definition_version = Some(input.into());
        self
    }
    /// <p>Must be passed along with <code>suiteDefinitionId</code>. Lists the test suite runs of the specified test suite based on suite definition version.</p>
    pub fn set_suite_definition_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.suite_definition_version = input;
        self
    }
    /// <p>The maximum number of results to return at once.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of results to return at once.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>A token to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>A token to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Consumes the builder and constructs a [`ListSuiteRunsInput`](crate::operation::list_suite_runs::ListSuiteRunsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_suite_runs::ListSuiteRunsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_suite_runs::ListSuiteRunsInput {
            suite_definition_id: self.suite_definition_id,
            suite_definition_version: self.suite_definition_version,
            max_results: self.max_results.unwrap_or_default(),
            next_token: self.next_token,
        })
    }
}
