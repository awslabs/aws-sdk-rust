// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Show each group result.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TestResult {
    /// <p>Show each group of test results.</p>
    #[doc(hidden)]
    pub groups: std::option::Option<std::vec::Vec<crate::types::GroupResult>>,
}
impl TestResult {
    /// <p>Show each group of test results.</p>
    pub fn groups(&self) -> std::option::Option<&[crate::types::GroupResult]> {
        self.groups.as_deref()
    }
}
impl TestResult {
    /// Creates a new builder-style object to manufacture [`TestResult`](crate::types::TestResult).
    pub fn builder() -> crate::types::builders::TestResultBuilder {
        crate::types::builders::TestResultBuilder::default()
    }
}

/// A builder for [`TestResult`](crate::types::TestResult).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TestResultBuilder {
    pub(crate) groups: std::option::Option<std::vec::Vec<crate::types::GroupResult>>,
}
impl TestResultBuilder {
    /// Appends an item to `groups`.
    ///
    /// To override the contents of this collection use [`set_groups`](Self::set_groups).
    ///
    /// <p>Show each group of test results.</p>
    pub fn groups(mut self, input: crate::types::GroupResult) -> Self {
        let mut v = self.groups.unwrap_or_default();
        v.push(input);
        self.groups = Some(v);
        self
    }
    /// <p>Show each group of test results.</p>
    pub fn set_groups(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::GroupResult>>,
    ) -> Self {
        self.groups = input;
        self
    }
    /// Consumes the builder and constructs a [`TestResult`](crate::types::TestResult).
    pub fn build(self) -> crate::types::TestResult {
        crate::types::TestResult {
            groups: self.groups,
        }
    }
}
