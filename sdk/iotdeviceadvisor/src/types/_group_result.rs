// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Show Group Result.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GroupResult {
    /// <p>Group result ID.</p>
    #[doc(hidden)]
    pub group_id: std::option::Option<std::string::String>,
    /// <p>Group Result Name.</p>
    #[doc(hidden)]
    pub group_name: std::option::Option<std::string::String>,
    /// <p>Tests under Group Result.</p>
    #[doc(hidden)]
    pub tests: std::option::Option<std::vec::Vec<crate::types::TestCaseRun>>,
}
impl GroupResult {
    /// <p>Group result ID.</p>
    pub fn group_id(&self) -> std::option::Option<&str> {
        self.group_id.as_deref()
    }
    /// <p>Group Result Name.</p>
    pub fn group_name(&self) -> std::option::Option<&str> {
        self.group_name.as_deref()
    }
    /// <p>Tests under Group Result.</p>
    pub fn tests(&self) -> std::option::Option<&[crate::types::TestCaseRun]> {
        self.tests.as_deref()
    }
}
impl GroupResult {
    /// Creates a new builder-style object to manufacture [`GroupResult`](crate::types::GroupResult).
    pub fn builder() -> crate::types::builders::GroupResultBuilder {
        crate::types::builders::GroupResultBuilder::default()
    }
}

/// A builder for [`GroupResult`](crate::types::GroupResult).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GroupResultBuilder {
    pub(crate) group_id: std::option::Option<std::string::String>,
    pub(crate) group_name: std::option::Option<std::string::String>,
    pub(crate) tests: std::option::Option<std::vec::Vec<crate::types::TestCaseRun>>,
}
impl GroupResultBuilder {
    /// <p>Group result ID.</p>
    pub fn group_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.group_id = Some(input.into());
        self
    }
    /// <p>Group result ID.</p>
    pub fn set_group_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.group_id = input;
        self
    }
    /// <p>Group Result Name.</p>
    pub fn group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.group_name = Some(input.into());
        self
    }
    /// <p>Group Result Name.</p>
    pub fn set_group_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.group_name = input;
        self
    }
    /// Appends an item to `tests`.
    ///
    /// To override the contents of this collection use [`set_tests`](Self::set_tests).
    ///
    /// <p>Tests under Group Result.</p>
    pub fn tests(mut self, input: crate::types::TestCaseRun) -> Self {
        let mut v = self.tests.unwrap_or_default();
        v.push(input);
        self.tests = Some(v);
        self
    }
    /// <p>Tests under Group Result.</p>
    pub fn set_tests(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TestCaseRun>>,
    ) -> Self {
        self.tests = input;
        self
    }
    /// Consumes the builder and constructs a [`GroupResult`](crate::types::GroupResult).
    pub fn build(self) -> crate::types::GroupResult {
        crate::types::GroupResult {
            group_id: self.group_id,
            group_name: self.group_name,
            tests: self.tests,
        }
    }
}
