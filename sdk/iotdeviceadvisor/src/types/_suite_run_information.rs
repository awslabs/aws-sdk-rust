// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the suite run.</p>
/// <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">SuiteRunInformation</a> action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SuiteRunInformation {
    /// <p>Suite definition ID of the suite run.</p>
    #[doc(hidden)]
    pub suite_definition_id: std::option::Option<std::string::String>,
    /// <p>Suite definition version of the suite run.</p>
    #[doc(hidden)]
    pub suite_definition_version: std::option::Option<std::string::String>,
    /// <p>Suite definition name of the suite run.</p>
    #[doc(hidden)]
    pub suite_definition_name: std::option::Option<std::string::String>,
    /// <p>Suite run ID of the suite run.</p>
    #[doc(hidden)]
    pub suite_run_id: std::option::Option<std::string::String>,
    /// <p>Date (in Unix epoch time) when the suite run was created.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Date (in Unix epoch time) when the suite run was started.</p>
    #[doc(hidden)]
    pub started_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Date (in Unix epoch time) when the suite run ended.</p>
    #[doc(hidden)]
    pub end_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Status of the suite run.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::SuiteRunStatus>,
    /// <p>Number of test cases that passed in the suite run.</p>
    #[doc(hidden)]
    pub passed: i32,
    /// <p>Number of test cases that failed in the suite run.</p>
    #[doc(hidden)]
    pub failed: i32,
}
impl SuiteRunInformation {
    /// <p>Suite definition ID of the suite run.</p>
    pub fn suite_definition_id(&self) -> std::option::Option<&str> {
        self.suite_definition_id.as_deref()
    }
    /// <p>Suite definition version of the suite run.</p>
    pub fn suite_definition_version(&self) -> std::option::Option<&str> {
        self.suite_definition_version.as_deref()
    }
    /// <p>Suite definition name of the suite run.</p>
    pub fn suite_definition_name(&self) -> std::option::Option<&str> {
        self.suite_definition_name.as_deref()
    }
    /// <p>Suite run ID of the suite run.</p>
    pub fn suite_run_id(&self) -> std::option::Option<&str> {
        self.suite_run_id.as_deref()
    }
    /// <p>Date (in Unix epoch time) when the suite run was created.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>Date (in Unix epoch time) when the suite run was started.</p>
    pub fn started_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.started_at.as_ref()
    }
    /// <p>Date (in Unix epoch time) when the suite run ended.</p>
    pub fn end_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.end_at.as_ref()
    }
    /// <p>Status of the suite run.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::SuiteRunStatus> {
        self.status.as_ref()
    }
    /// <p>Number of test cases that passed in the suite run.</p>
    pub fn passed(&self) -> i32 {
        self.passed
    }
    /// <p>Number of test cases that failed in the suite run.</p>
    pub fn failed(&self) -> i32 {
        self.failed
    }
}
impl SuiteRunInformation {
    /// Creates a new builder-style object to manufacture [`SuiteRunInformation`](crate::types::SuiteRunInformation).
    pub fn builder() -> crate::types::builders::SuiteRunInformationBuilder {
        crate::types::builders::SuiteRunInformationBuilder::default()
    }
}

/// A builder for [`SuiteRunInformation`](crate::types::SuiteRunInformation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SuiteRunInformationBuilder {
    pub(crate) suite_definition_id: std::option::Option<std::string::String>,
    pub(crate) suite_definition_version: std::option::Option<std::string::String>,
    pub(crate) suite_definition_name: std::option::Option<std::string::String>,
    pub(crate) suite_run_id: std::option::Option<std::string::String>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) started_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) end_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) status: std::option::Option<crate::types::SuiteRunStatus>,
    pub(crate) passed: std::option::Option<i32>,
    pub(crate) failed: std::option::Option<i32>,
}
impl SuiteRunInformationBuilder {
    /// <p>Suite definition ID of the suite run.</p>
    pub fn suite_definition_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.suite_definition_id = Some(input.into());
        self
    }
    /// <p>Suite definition ID of the suite run.</p>
    pub fn set_suite_definition_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.suite_definition_id = input;
        self
    }
    /// <p>Suite definition version of the suite run.</p>
    pub fn suite_definition_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.suite_definition_version = Some(input.into());
        self
    }
    /// <p>Suite definition version of the suite run.</p>
    pub fn set_suite_definition_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.suite_definition_version = input;
        self
    }
    /// <p>Suite definition name of the suite run.</p>
    pub fn suite_definition_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.suite_definition_name = Some(input.into());
        self
    }
    /// <p>Suite definition name of the suite run.</p>
    pub fn set_suite_definition_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.suite_definition_name = input;
        self
    }
    /// <p>Suite run ID of the suite run.</p>
    pub fn suite_run_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.suite_run_id = Some(input.into());
        self
    }
    /// <p>Suite run ID of the suite run.</p>
    pub fn set_suite_run_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.suite_run_id = input;
        self
    }
    /// <p>Date (in Unix epoch time) when the suite run was created.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>Date (in Unix epoch time) when the suite run was created.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>Date (in Unix epoch time) when the suite run was started.</p>
    pub fn started_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.started_at = Some(input);
        self
    }
    /// <p>Date (in Unix epoch time) when the suite run was started.</p>
    pub fn set_started_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.started_at = input;
        self
    }
    /// <p>Date (in Unix epoch time) when the suite run ended.</p>
    pub fn end_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.end_at = Some(input);
        self
    }
    /// <p>Date (in Unix epoch time) when the suite run ended.</p>
    pub fn set_end_at(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.end_at = input;
        self
    }
    /// <p>Status of the suite run.</p>
    pub fn status(mut self, input: crate::types::SuiteRunStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>Status of the suite run.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::SuiteRunStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Number of test cases that passed in the suite run.</p>
    pub fn passed(mut self, input: i32) -> Self {
        self.passed = Some(input);
        self
    }
    /// <p>Number of test cases that passed in the suite run.</p>
    pub fn set_passed(mut self, input: std::option::Option<i32>) -> Self {
        self.passed = input;
        self
    }
    /// <p>Number of test cases that failed in the suite run.</p>
    pub fn failed(mut self, input: i32) -> Self {
        self.failed = Some(input);
        self
    }
    /// <p>Number of test cases that failed in the suite run.</p>
    pub fn set_failed(mut self, input: std::option::Option<i32>) -> Self {
        self.failed = input;
        self
    }
    /// Consumes the builder and constructs a [`SuiteRunInformation`](crate::types::SuiteRunInformation).
    pub fn build(self) -> crate::types::SuiteRunInformation {
        crate::types::SuiteRunInformation {
            suite_definition_id: self.suite_definition_id,
            suite_definition_version: self.suite_definition_version,
            suite_definition_name: self.suite_definition_name,
            suite_run_id: self.suite_run_id,
            created_at: self.created_at,
            started_at: self.started_at,
            end_at: self.end_at,
            status: self.status,
            passed: self.passed.unwrap_or_default(),
            failed: self.failed.unwrap_or_default(),
        }
    }
}
