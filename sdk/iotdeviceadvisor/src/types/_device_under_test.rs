// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information of a test device. A thing ARN or a certificate ARN is required.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeviceUnderTest {
    /// <p>Lists devices thing ARN.</p>
    #[doc(hidden)]
    pub thing_arn: std::option::Option<std::string::String>,
    /// <p>Lists devices certificate ARN.</p>
    #[doc(hidden)]
    pub certificate_arn: std::option::Option<std::string::String>,
}
impl DeviceUnderTest {
    /// <p>Lists devices thing ARN.</p>
    pub fn thing_arn(&self) -> std::option::Option<&str> {
        self.thing_arn.as_deref()
    }
    /// <p>Lists devices certificate ARN.</p>
    pub fn certificate_arn(&self) -> std::option::Option<&str> {
        self.certificate_arn.as_deref()
    }
}
impl DeviceUnderTest {
    /// Creates a new builder-style object to manufacture [`DeviceUnderTest`](crate::types::DeviceUnderTest).
    pub fn builder() -> crate::types::builders::DeviceUnderTestBuilder {
        crate::types::builders::DeviceUnderTestBuilder::default()
    }
}

/// A builder for [`DeviceUnderTest`](crate::types::DeviceUnderTest).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeviceUnderTestBuilder {
    pub(crate) thing_arn: std::option::Option<std::string::String>,
    pub(crate) certificate_arn: std::option::Option<std::string::String>,
}
impl DeviceUnderTestBuilder {
    /// <p>Lists devices thing ARN.</p>
    pub fn thing_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.thing_arn = Some(input.into());
        self
    }
    /// <p>Lists devices thing ARN.</p>
    pub fn set_thing_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.thing_arn = input;
        self
    }
    /// <p>Lists devices certificate ARN.</p>
    pub fn certificate_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.certificate_arn = Some(input.into());
        self
    }
    /// <p>Lists devices certificate ARN.</p>
    pub fn set_certificate_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.certificate_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`DeviceUnderTest`](crate::types::DeviceUnderTest).
    pub fn build(self) -> crate::types::DeviceUnderTest {
        crate::types::DeviceUnderTest {
            thing_arn: self.thing_arn,
            certificate_arn: self.certificate_arn,
        }
    }
}
