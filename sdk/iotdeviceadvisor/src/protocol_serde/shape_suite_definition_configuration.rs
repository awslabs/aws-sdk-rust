// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_suite_definition_configuration(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::SuiteDefinitionConfiguration,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.suite_definition_name {
        object.key("suiteDefinitionName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.devices {
        let mut array_3 = object.key("devices").start_array();
        for item_4 in var_2 {
            {
                #[allow(unused_mut)]
                let mut object_5 = array_3.value().start_object();
                crate::protocol_serde::shape_device_under_test::ser_device_under_test(&mut object_5, item_4)?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    if let Some(var_6) = &input.intended_for_qualification {
        object.key("intendedForQualification").boolean(*var_6);
    }
    if let Some(var_7) = &input.is_long_duration_test {
        object.key("isLongDurationTest").boolean(*var_7);
    }
    if let Some(var_8) = &input.root_group {
        object.key("rootGroup").string(var_8.as_str());
    }
    if let Some(var_9) = &input.device_permission_role_arn {
        object.key("devicePermissionRoleArn").string(var_9.as_str());
    }
    if let Some(var_10) = &input.protocol {
        object.key("protocol").string(var_10.as_str());
    }
    Ok(())
}

pub(crate) fn de_suite_definition_configuration<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::SuiteDefinitionConfiguration>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::SuiteDefinitionConfigurationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "suiteDefinitionName" => {
                            builder = builder.set_suite_definition_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "devices" => {
                            builder = builder.set_devices(crate::protocol_serde::shape_device_under_test_list::de_device_under_test_list(tokens)?);
                        }
                        "intendedForQualification" => {
                            builder =
                                builder.set_intended_for_qualification(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "isLongDurationTest" => {
                            builder = builder.set_is_long_duration_test(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "rootGroup" => {
                            builder = builder.set_root_group(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "devicePermissionRoleArn" => {
                            builder = builder.set_device_permission_role_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "protocol" => {
                            builder = builder.set_protocol(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Protocol::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::suite_definition_configuration_correct_errors(builder).build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
