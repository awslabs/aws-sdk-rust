// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_asn1_subject(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::Asn1Subject,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.country {
        object.key("Country").string(var_1.as_str());
    }
    if let Some(var_2) = &input.organization {
        object.key("Organization").string(var_2.as_str());
    }
    if let Some(var_3) = &input.organizational_unit {
        object.key("OrganizationalUnit").string(var_3.as_str());
    }
    if let Some(var_4) = &input.distinguished_name_qualifier {
        object.key("DistinguishedNameQualifier").string(var_4.as_str());
    }
    if let Some(var_5) = &input.state {
        object.key("State").string(var_5.as_str());
    }
    if let Some(var_6) = &input.common_name {
        object.key("CommonName").string(var_6.as_str());
    }
    if let Some(var_7) = &input.serial_number {
        object.key("SerialNumber").string(var_7.as_str());
    }
    if let Some(var_8) = &input.locality {
        object.key("Locality").string(var_8.as_str());
    }
    if let Some(var_9) = &input.title {
        object.key("Title").string(var_9.as_str());
    }
    if let Some(var_10) = &input.surname {
        object.key("Surname").string(var_10.as_str());
    }
    if let Some(var_11) = &input.given_name {
        object.key("GivenName").string(var_11.as_str());
    }
    if let Some(var_12) = &input.initials {
        object.key("Initials").string(var_12.as_str());
    }
    if let Some(var_13) = &input.pseudonym {
        object.key("Pseudonym").string(var_13.as_str());
    }
    if let Some(var_14) = &input.generation_qualifier {
        object.key("GenerationQualifier").string(var_14.as_str());
    }
    if let Some(var_15) = &input.custom_attributes {
        let mut array_16 = object.key("CustomAttributes").start_array();
        for item_17 in var_15 {
            {
                #[allow(unused_mut)]
                let mut object_18 = array_16.value().start_object();
                crate::protocol_serde::shape_custom_attribute::ser_custom_attribute(&mut object_18, item_17)?;
                object_18.finish();
            }
        }
        array_16.finish();
    }
    Ok(())
}

pub(crate) fn de_asn1_subject<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::Asn1Subject>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::Asn1SubjectBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "Country" => {
                            builder = builder.set_country(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Organization" => {
                            builder = builder.set_organization(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "OrganizationalUnit" => {
                            builder = builder.set_organizational_unit(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "DistinguishedNameQualifier" => {
                            builder = builder.set_distinguished_name_qualifier(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "State" => {
                            builder = builder.set_state(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "CommonName" => {
                            builder = builder.set_common_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "SerialNumber" => {
                            builder = builder.set_serial_number(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Locality" => {
                            builder = builder.set_locality(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Title" => {
                            builder = builder.set_title(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Surname" => {
                            builder = builder.set_surname(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "GivenName" => {
                            builder = builder.set_given_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Initials" => {
                            builder = builder.set_initials(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Pseudonym" => {
                            builder = builder.set_pseudonym(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "GenerationQualifier" => {
                            builder = builder.set_generation_qualifier(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "CustomAttributes" => {
                            builder =
                                builder.set_custom_attributes(crate::protocol_serde::shape_custom_attribute_list::de_custom_attribute_list(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
