// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_general_name(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::GeneralName,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.other_name {
        #[allow(unused_mut)]
        let mut object_2 = object.key("OtherName").start_object();
        crate::protocol_serde::shape_other_name::ser_other_name(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.rfc822_name {
        object.key("Rfc822Name").string(var_3.as_str());
    }
    if let Some(var_4) = &input.dns_name {
        object.key("DnsName").string(var_4.as_str());
    }
    if let Some(var_5) = &input.directory_name {
        #[allow(unused_mut)]
        let mut object_6 = object.key("DirectoryName").start_object();
        crate::protocol_serde::shape_asn1_subject::ser_asn1_subject(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.edi_party_name {
        #[allow(unused_mut)]
        let mut object_8 = object.key("EdiPartyName").start_object();
        crate::protocol_serde::shape_edi_party_name::ser_edi_party_name(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.uniform_resource_identifier {
        object
            .key("UniformResourceIdentifier")
            .string(var_9.as_str());
    }
    if let Some(var_10) = &input.ip_address {
        object.key("IpAddress").string(var_10.as_str());
    }
    if let Some(var_11) = &input.registered_id {
        object.key("RegisteredId").string(var_11.as_str());
    }
    Ok(())
}

pub(crate) fn de_general_name<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<Option<crate::types::GeneralName>, aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::GeneralNameBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "OtherName" => {
                                builder = builder.set_other_name(
                                    crate::protocol_serde::shape_other_name::de_other_name(tokens)?,
                                );
                            }
                            "Rfc822Name" => {
                                builder = builder.set_rfc822_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "DnsName" => {
                                builder = builder.set_dns_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "DirectoryName" => {
                                builder = builder.set_directory_name(
                                    crate::protocol_serde::shape_asn1_subject::de_asn1_subject(
                                        tokens,
                                    )?,
                                );
                            }
                            "EdiPartyName" => {
                                builder = builder.set_edi_party_name(
                                    crate::protocol_serde::shape_edi_party_name::de_edi_party_name(
                                        tokens,
                                    )?,
                                );
                            }
                            "UniformResourceIdentifier" => {
                                builder = builder.set_uniform_resource_identifier(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "IpAddress" => {
                                builder = builder.set_ip_address(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "RegisteredId" => {
                                builder = builder.set_registered_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
