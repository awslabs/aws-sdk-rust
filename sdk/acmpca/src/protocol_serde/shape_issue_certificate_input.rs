// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_issue_certificate_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::issue_certificate::IssueCertificateInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.api_passthrough {
        #[allow(unused_mut)]
        let mut object_2 = object.key("ApiPassthrough").start_object();
        crate::protocol_serde::shape_api_passthrough::ser_api_passthrough(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.certificate_authority_arn {
        object.key("CertificateAuthorityArn").string(var_3.as_str());
    }
    if let Some(var_4) = &input.csr {
        object.key("Csr").string_unchecked(&::aws_smithy_types::base64::encode(var_4));
    }
    if let Some(var_5) = &input.signing_algorithm {
        object.key("SigningAlgorithm").string(var_5.as_str());
    }
    if let Some(var_6) = &input.template_arn {
        object.key("TemplateArn").string(var_6.as_str());
    }
    if let Some(var_7) = &input.validity {
        #[allow(unused_mut)]
        let mut object_8 = object.key("Validity").start_object();
        crate::protocol_serde::shape_validity::ser_validity(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.validity_not_before {
        #[allow(unused_mut)]
        let mut object_10 = object.key("ValidityNotBefore").start_object();
        crate::protocol_serde::shape_validity::ser_validity(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_11.as_str());
    }
    Ok(())
}
