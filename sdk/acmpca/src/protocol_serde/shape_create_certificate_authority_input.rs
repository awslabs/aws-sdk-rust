// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_certificate_authority_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_certificate_authority::CreateCertificateAuthorityInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.certificate_authority_configuration {
        #[allow(unused_mut)]
        let mut object_2 = object
            .key("CertificateAuthorityConfiguration")
            .start_object();
        crate::protocol_serde::shape_certificate_authority_configuration::ser_certificate_authority_configuration(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.revocation_configuration {
        #[allow(unused_mut)]
        let mut object_4 = object.key("RevocationConfiguration").start_object();
        crate::protocol_serde::shape_revocation_configuration::ser_revocation_configuration(
            &mut object_4,
            var_3,
        )?;
        object_4.finish();
    }
    if let Some(var_5) = &input.certificate_authority_type {
        object
            .key("CertificateAuthorityType")
            .string(var_5.as_str());
    }
    if let Some(var_6) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_6.as_str());
    }
    if let Some(var_7) = &input.key_storage_security_standard {
        object
            .key("KeyStorageSecurityStandard")
            .string(var_7.as_str());
    }
    if let Some(var_8) = &input.tags {
        let mut array_9 = object.key("Tags").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.usage_mode {
        object.key("UsageMode").string(var_12.as_str());
    }
    Ok(())
}
