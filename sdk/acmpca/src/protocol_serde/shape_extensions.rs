// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_extensions(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::Extensions,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.certificate_policies {
        let mut array_2 = object.key("CertificatePolicies").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_policy_information::ser_policy_information(
                    &mut object_4,
                    item_3,
                )?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.extended_key_usage {
        let mut array_6 = object.key("ExtendedKeyUsage").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_extended_key_usage::ser_extended_key_usage(
                    &mut object_8,
                    item_7,
                )?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.key_usage {
        #[allow(unused_mut)]
        let mut object_10 = object.key("KeyUsage").start_object();
        crate::protocol_serde::shape_key_usage::ser_key_usage(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.subject_alternative_names {
        let mut array_12 = object.key("SubjectAlternativeNames").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_general_name::ser_general_name(
                    &mut object_14,
                    item_13,
                )?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    if let Some(var_15) = &input.custom_extensions {
        let mut array_16 = object.key("CustomExtensions").start_array();
        for item_17 in var_15 {
            {
                #[allow(unused_mut)]
                let mut object_18 = array_16.value().start_object();
                crate::protocol_serde::shape_custom_extension::ser_custom_extension(
                    &mut object_18,
                    item_17,
                )?;
                object_18.finish();
            }
        }
        array_16.finish();
    }
    Ok(())
}
