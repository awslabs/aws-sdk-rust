// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn certificate_authority_configuration_correct_errors(
    mut builder: crate::types::builders::CertificateAuthorityConfigurationBuilder,
) -> crate::types::builders::CertificateAuthorityConfigurationBuilder {
    if builder.key_algorithm.is_none() {
        builder.key_algorithm = "no value was set".parse::<crate::types::KeyAlgorithm>().ok()
    }
    if builder.signing_algorithm.is_none() {
        builder.signing_algorithm = "no value was set".parse::<crate::types::SigningAlgorithm>().ok()
    }
    if builder.subject.is_none() {
        builder.subject = {
            let builder = crate::types::builders::Asn1SubjectBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    builder
}

pub(crate) fn crl_configuration_correct_errors(
    mut builder: crate::types::builders::CrlConfigurationBuilder,
) -> crate::types::builders::CrlConfigurationBuilder {
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn ocsp_configuration_correct_errors(
    mut builder: crate::types::builders::OcspConfigurationBuilder,
) -> crate::types::builders::OcspConfigurationBuilder {
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn access_description_correct_errors(
    mut builder: crate::types::builders::AccessDescriptionBuilder,
) -> crate::types::builders::AccessDescriptionBuilder {
    if builder.access_method.is_none() {
        builder.access_method = {
            let builder = crate::types::builders::AccessMethodBuilder::default();
            Some(builder.build())
        }
    }
    if builder.access_location.is_none() {
        builder.access_location = {
            let builder = crate::types::builders::GeneralNameBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn custom_attribute_correct_errors(
    mut builder: crate::types::builders::CustomAttributeBuilder,
) -> crate::types::builders::CustomAttributeBuilder {
    if builder.object_identifier.is_none() {
        builder.object_identifier = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn edi_party_name_correct_errors(mut builder: crate::types::builders::EdiPartyNameBuilder) -> crate::types::builders::EdiPartyNameBuilder {
    if builder.party_name.is_none() {
        builder.party_name = Some(Default::default())
    }
    builder
}

pub(crate) fn other_name_correct_errors(mut builder: crate::types::builders::OtherNameBuilder) -> crate::types::builders::OtherNameBuilder {
    if builder.type_id.is_none() {
        builder.type_id = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}
