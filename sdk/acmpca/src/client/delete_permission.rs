// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeletePermission`](crate::operation::delete_permission::builders::DeletePermissionFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`certificate_authority_arn(impl Into<String>)`](crate::operation::delete_permission::builders::DeletePermissionFluentBuilder::certificate_authority_arn) / [`set_certificate_authority_arn(Option<String>)`](crate::operation::delete_permission::builders::DeletePermissionFluentBuilder::set_certificate_authority_arn): <p>The Amazon Resource Number (ARN) of the private CA that issued the permissions. You can find the CA's ARN by calling the <a href="https://docs.aws.amazon.com/privateca/latest/APIReference/API_ListCertificateAuthorities.html">ListCertificateAuthorities</a> action. This must have the following form: </p>  <p> <code>arn:aws:acm-pca:<i>region</i>:<i>account</i>:certificate-authority/<i>12345678-1234-1234-1234-123456789012</i> </code>. </p>
    ///   - [`principal(impl Into<String>)`](crate::operation::delete_permission::builders::DeletePermissionFluentBuilder::principal) / [`set_principal(Option<String>)`](crate::operation::delete_permission::builders::DeletePermissionFluentBuilder::set_principal): <p>The Amazon Web Services service or identity that will have its CA permissions revoked. At this time, the only valid service principal is <code>acm.amazonaws.com</code> </p>
    ///   - [`source_account(impl Into<String>)`](crate::operation::delete_permission::builders::DeletePermissionFluentBuilder::source_account) / [`set_source_account(Option<String>)`](crate::operation::delete_permission::builders::DeletePermissionFluentBuilder::set_source_account): <p>The Amazon Web Services account that calls this action.</p>
    /// - On success, responds with [`DeletePermissionOutput`](crate::operation::delete_permission::DeletePermissionOutput)
    /// - On failure, responds with [`SdkError<DeletePermissionError>`](crate::operation::delete_permission::DeletePermissionError)
    pub fn delete_permission(
        &self,
    ) -> crate::operation::delete_permission::builders::DeletePermissionFluentBuilder {
        crate::operation::delete_permission::builders::DeletePermissionFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
