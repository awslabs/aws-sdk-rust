// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_certificate_authorities::_list_certificate_authorities_output::ListCertificateAuthoritiesOutputBuilder;

pub use crate::operation::list_certificate_authorities::_list_certificate_authorities_input::ListCertificateAuthoritiesInputBuilder;

/// Fluent builder constructing a request to `ListCertificateAuthorities`.
///
/// <p>Lists the private certificate authorities that you created by using the <a href="https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthority.html">CreateCertificateAuthority</a> action.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListCertificateAuthoritiesFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::list_certificate_authorities::builders::ListCertificateAuthoritiesInputBuilder
            }
impl ListCertificateAuthoritiesFluentBuilder {
    /// Creates a new `ListCertificateAuthorities`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::list_certificate_authorities::ListCertificateAuthorities,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::list_certificate_authorities::ListCertificateAuthoritiesError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::list_certificate_authorities::ListCertificateAuthoritiesOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::list_certificate_authorities::ListCertificateAuthoritiesError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_certificate_authorities::paginator::ListCertificateAuthoritiesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::operation::list_certificate_authorities::paginator::ListCertificateAuthoritiesPaginator{
        crate::operation::list_certificate_authorities::paginator::ListCertificateAuthoritiesPaginator::new(self.handle, self.inner)
    }
    /// <p>Use this parameter when paginating results in a subsequent request after you receive a response with truncated results. Set it to the value of the <code>NextToken</code> parameter from the response you just received.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>Use this parameter when paginating results in a subsequent request after you receive a response with truncated results. Set it to the value of the <code>NextToken</code> parameter from the response you just received.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>Use this parameter when paginating results to specify the maximum number of items to return in the response on each page. If additional items exist beyond the number you specify, the <code>NextToken</code> element is sent in the response. Use this <code>NextToken</code> value in a subsequent request to retrieve additional items.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>Use this parameter when paginating results to specify the maximum number of items to return in the response on each page. If additional items exist beyond the number you specify, the <code>NextToken</code> element is sent in the response. Use this <code>NextToken</code> value in a subsequent request to retrieve additional items.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>Use this parameter to filter the returned set of certificate authorities based on their owner. The default is SELF.</p>
    pub fn resource_owner(mut self, input: crate::types::ResourceOwner) -> Self {
        self.inner = self.inner.resource_owner(input);
        self
    }
    /// <p>Use this parameter to filter the returned set of certificate authorities based on their owner. The default is SELF.</p>
    pub fn set_resource_owner(
        mut self,
        input: std::option::Option<crate::types::ResourceOwner>,
    ) -> Self {
        self.inner = self.inner.set_resource_owner(input);
        self
    }
}
