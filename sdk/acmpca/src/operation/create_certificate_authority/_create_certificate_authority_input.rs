// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateCertificateAuthorityInput {
    /// <p>Name and bit size of the private key algorithm, the name of the signing algorithm, and X.500 certificate subject information.</p>
    #[doc(hidden)]
    pub certificate_authority_configuration:
        std::option::Option<crate::types::CertificateAuthorityConfiguration>,
    /// <p>Contains information to enable Online Certificate Status Protocol (OCSP) support, to enable a certificate revocation list (CRL), to enable both, or to enable neither. The default is for both certificate validation mechanisms to be disabled. </p> <note>
    /// <p>The following requirements apply to revocation configurations.</p>
    /// <ul>
    /// <li> <p>A configuration disabling CRLs or OCSP must contain only the <code>Enabled=False</code> parameter, and will fail if other parameters such as <code>CustomCname</code> or <code>ExpirationInDays</code> are included.</p> </li>
    /// <li> <p>In a CRL configuration, the <code>S3BucketName</code> parameter must conform to <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html">Amazon S3 bucket naming rules</a>.</p> </li>
    /// <li> <p>A configuration containing a custom Canonical Name (CNAME) parameter for CRLs or OCSP must conform to <a href="https://www.ietf.org/rfc/rfc2396.txt">RFC2396</a> restrictions on the use of special characters in a CNAME. </p> </li>
    /// <li> <p>In a CRL or OCSP configuration, the value of a CNAME parameter must not include a protocol prefix such as "http://" or "https://".</p> </li>
    /// </ul>
    /// </note>
    /// <p> For more information, see the <a href="https://docs.aws.amazon.com/privateca/latest/APIReference/API_OcspConfiguration.html">OcspConfiguration</a> and <a href="https://docs.aws.amazon.com/privateca/latest/APIReference/API_CrlConfiguration.html">CrlConfiguration</a> types.</p>
    #[doc(hidden)]
    pub revocation_configuration: std::option::Option<crate::types::RevocationConfiguration>,
    /// <p>The type of the certificate authority.</p>
    #[doc(hidden)]
    pub certificate_authority_type: std::option::Option<crate::types::CertificateAuthorityType>,
    /// <p>Custom string that can be used to distinguish between calls to the <b>CreateCertificateAuthority</b> action. Idempotency tokens for <b>CreateCertificateAuthority</b> time out after five minutes. Therefore, if you call <b>CreateCertificateAuthority</b> multiple times with the same idempotency token within five minutes, Amazon Web Services Private CA recognizes that you are requesting only certificate authority and will issue only one. If you change the idempotency token for each call, Amazon Web Services Private CA recognizes that you are requesting multiple certificate authorities.</p>
    #[doc(hidden)]
    pub idempotency_token: std::option::Option<std::string::String>,
    /// <p>Specifies a cryptographic key management compliance standard used for handling CA keys.</p>
    /// <p>Default: FIPS_140_2_LEVEL_3_OR_HIGHER</p>
    /// <p> <i>Note:</i> <code>FIPS_140_2_LEVEL_3_OR_HIGHER</code> is not supported in the following Regions:</p>
    /// <ul>
    /// <li> <p>ap-northeast-3</p> </li>
    /// <li> <p>ap-southeast-3</p> </li>
    /// </ul>
    /// <p>When creating a CA in these Regions, you must provide <code>FIPS_140_2_LEVEL_2_OR_HIGHER</code> as the argument for <code>KeyStorageSecurityStandard</code>. Failure to do this results in an <code>InvalidArgsException</code> with the message, "A certificate authority cannot be created in this region with the specified security standard."</p>
    #[doc(hidden)]
    pub key_storage_security_standard:
        std::option::Option<crate::types::KeyStorageSecurityStandard>,
    /// <p>Key-value pairs that will be attached to the new private CA. You can associate up to 50 tags with a private CA. For information using tags with IAM to manage permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_iam-tags.html">Controlling Access Using IAM Tags</a>.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p>Specifies whether the CA issues general-purpose certificates that typically require a revocation mechanism, or short-lived certificates that may optionally omit revocation because they expire quickly. Short-lived certificate validity is limited to seven days.</p>
    /// <p>The default value is GENERAL_PURPOSE.</p>
    #[doc(hidden)]
    pub usage_mode: std::option::Option<crate::types::CertificateAuthorityUsageMode>,
}
impl CreateCertificateAuthorityInput {
    /// <p>Name and bit size of the private key algorithm, the name of the signing algorithm, and X.500 certificate subject information.</p>
    pub fn certificate_authority_configuration(
        &self,
    ) -> std::option::Option<&crate::types::CertificateAuthorityConfiguration> {
        self.certificate_authority_configuration.as_ref()
    }
    /// <p>Contains information to enable Online Certificate Status Protocol (OCSP) support, to enable a certificate revocation list (CRL), to enable both, or to enable neither. The default is for both certificate validation mechanisms to be disabled. </p> <note>
    /// <p>The following requirements apply to revocation configurations.</p>
    /// <ul>
    /// <li> <p>A configuration disabling CRLs or OCSP must contain only the <code>Enabled=False</code> parameter, and will fail if other parameters such as <code>CustomCname</code> or <code>ExpirationInDays</code> are included.</p> </li>
    /// <li> <p>In a CRL configuration, the <code>S3BucketName</code> parameter must conform to <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html">Amazon S3 bucket naming rules</a>.</p> </li>
    /// <li> <p>A configuration containing a custom Canonical Name (CNAME) parameter for CRLs or OCSP must conform to <a href="https://www.ietf.org/rfc/rfc2396.txt">RFC2396</a> restrictions on the use of special characters in a CNAME. </p> </li>
    /// <li> <p>In a CRL or OCSP configuration, the value of a CNAME parameter must not include a protocol prefix such as "http://" or "https://".</p> </li>
    /// </ul>
    /// </note>
    /// <p> For more information, see the <a href="https://docs.aws.amazon.com/privateca/latest/APIReference/API_OcspConfiguration.html">OcspConfiguration</a> and <a href="https://docs.aws.amazon.com/privateca/latest/APIReference/API_CrlConfiguration.html">CrlConfiguration</a> types.</p>
    pub fn revocation_configuration(
        &self,
    ) -> std::option::Option<&crate::types::RevocationConfiguration> {
        self.revocation_configuration.as_ref()
    }
    /// <p>The type of the certificate authority.</p>
    pub fn certificate_authority_type(
        &self,
    ) -> std::option::Option<&crate::types::CertificateAuthorityType> {
        self.certificate_authority_type.as_ref()
    }
    /// <p>Custom string that can be used to distinguish between calls to the <b>CreateCertificateAuthority</b> action. Idempotency tokens for <b>CreateCertificateAuthority</b> time out after five minutes. Therefore, if you call <b>CreateCertificateAuthority</b> multiple times with the same idempotency token within five minutes, Amazon Web Services Private CA recognizes that you are requesting only certificate authority and will issue only one. If you change the idempotency token for each call, Amazon Web Services Private CA recognizes that you are requesting multiple certificate authorities.</p>
    pub fn idempotency_token(&self) -> std::option::Option<&str> {
        self.idempotency_token.as_deref()
    }
    /// <p>Specifies a cryptographic key management compliance standard used for handling CA keys.</p>
    /// <p>Default: FIPS_140_2_LEVEL_3_OR_HIGHER</p>
    /// <p> <i>Note:</i> <code>FIPS_140_2_LEVEL_3_OR_HIGHER</code> is not supported in the following Regions:</p>
    /// <ul>
    /// <li> <p>ap-northeast-3</p> </li>
    /// <li> <p>ap-southeast-3</p> </li>
    /// </ul>
    /// <p>When creating a CA in these Regions, you must provide <code>FIPS_140_2_LEVEL_2_OR_HIGHER</code> as the argument for <code>KeyStorageSecurityStandard</code>. Failure to do this results in an <code>InvalidArgsException</code> with the message, "A certificate authority cannot be created in this region with the specified security standard."</p>
    pub fn key_storage_security_standard(
        &self,
    ) -> std::option::Option<&crate::types::KeyStorageSecurityStandard> {
        self.key_storage_security_standard.as_ref()
    }
    /// <p>Key-value pairs that will be attached to the new private CA. You can associate up to 50 tags with a private CA. For information using tags with IAM to manage permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_iam-tags.html">Controlling Access Using IAM Tags</a>.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
    /// <p>Specifies whether the CA issues general-purpose certificates that typically require a revocation mechanism, or short-lived certificates that may optionally omit revocation because they expire quickly. Short-lived certificate validity is limited to seven days.</p>
    /// <p>The default value is GENERAL_PURPOSE.</p>
    pub fn usage_mode(&self) -> std::option::Option<&crate::types::CertificateAuthorityUsageMode> {
        self.usage_mode.as_ref()
    }
}
impl CreateCertificateAuthorityInput {
    /// Creates a new builder-style object to manufacture [`CreateCertificateAuthorityInput`](crate::operation::create_certificate_authority::CreateCertificateAuthorityInput).
    pub fn builder() -> crate::operation::create_certificate_authority::builders::CreateCertificateAuthorityInputBuilder{
        crate::operation::create_certificate_authority::builders::CreateCertificateAuthorityInputBuilder::default()
    }
}

/// A builder for [`CreateCertificateAuthorityInput`](crate::operation::create_certificate_authority::CreateCertificateAuthorityInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateCertificateAuthorityInputBuilder {
    pub(crate) certificate_authority_configuration:
        std::option::Option<crate::types::CertificateAuthorityConfiguration>,
    pub(crate) revocation_configuration: std::option::Option<crate::types::RevocationConfiguration>,
    pub(crate) certificate_authority_type:
        std::option::Option<crate::types::CertificateAuthorityType>,
    pub(crate) idempotency_token: std::option::Option<std::string::String>,
    pub(crate) key_storage_security_standard:
        std::option::Option<crate::types::KeyStorageSecurityStandard>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) usage_mode: std::option::Option<crate::types::CertificateAuthorityUsageMode>,
}
impl CreateCertificateAuthorityInputBuilder {
    /// <p>Name and bit size of the private key algorithm, the name of the signing algorithm, and X.500 certificate subject information.</p>
    pub fn certificate_authority_configuration(
        mut self,
        input: crate::types::CertificateAuthorityConfiguration,
    ) -> Self {
        self.certificate_authority_configuration = Some(input);
        self
    }
    /// <p>Name and bit size of the private key algorithm, the name of the signing algorithm, and X.500 certificate subject information.</p>
    pub fn set_certificate_authority_configuration(
        mut self,
        input: std::option::Option<crate::types::CertificateAuthorityConfiguration>,
    ) -> Self {
        self.certificate_authority_configuration = input;
        self
    }
    /// <p>Contains information to enable Online Certificate Status Protocol (OCSP) support, to enable a certificate revocation list (CRL), to enable both, or to enable neither. The default is for both certificate validation mechanisms to be disabled. </p> <note>
    /// <p>The following requirements apply to revocation configurations.</p>
    /// <ul>
    /// <li> <p>A configuration disabling CRLs or OCSP must contain only the <code>Enabled=False</code> parameter, and will fail if other parameters such as <code>CustomCname</code> or <code>ExpirationInDays</code> are included.</p> </li>
    /// <li> <p>In a CRL configuration, the <code>S3BucketName</code> parameter must conform to <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html">Amazon S3 bucket naming rules</a>.</p> </li>
    /// <li> <p>A configuration containing a custom Canonical Name (CNAME) parameter for CRLs or OCSP must conform to <a href="https://www.ietf.org/rfc/rfc2396.txt">RFC2396</a> restrictions on the use of special characters in a CNAME. </p> </li>
    /// <li> <p>In a CRL or OCSP configuration, the value of a CNAME parameter must not include a protocol prefix such as "http://" or "https://".</p> </li>
    /// </ul>
    /// </note>
    /// <p> For more information, see the <a href="https://docs.aws.amazon.com/privateca/latest/APIReference/API_OcspConfiguration.html">OcspConfiguration</a> and <a href="https://docs.aws.amazon.com/privateca/latest/APIReference/API_CrlConfiguration.html">CrlConfiguration</a> types.</p>
    pub fn revocation_configuration(
        mut self,
        input: crate::types::RevocationConfiguration,
    ) -> Self {
        self.revocation_configuration = Some(input);
        self
    }
    /// <p>Contains information to enable Online Certificate Status Protocol (OCSP) support, to enable a certificate revocation list (CRL), to enable both, or to enable neither. The default is for both certificate validation mechanisms to be disabled. </p> <note>
    /// <p>The following requirements apply to revocation configurations.</p>
    /// <ul>
    /// <li> <p>A configuration disabling CRLs or OCSP must contain only the <code>Enabled=False</code> parameter, and will fail if other parameters such as <code>CustomCname</code> or <code>ExpirationInDays</code> are included.</p> </li>
    /// <li> <p>In a CRL configuration, the <code>S3BucketName</code> parameter must conform to <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html">Amazon S3 bucket naming rules</a>.</p> </li>
    /// <li> <p>A configuration containing a custom Canonical Name (CNAME) parameter for CRLs or OCSP must conform to <a href="https://www.ietf.org/rfc/rfc2396.txt">RFC2396</a> restrictions on the use of special characters in a CNAME. </p> </li>
    /// <li> <p>In a CRL or OCSP configuration, the value of a CNAME parameter must not include a protocol prefix such as "http://" or "https://".</p> </li>
    /// </ul>
    /// </note>
    /// <p> For more information, see the <a href="https://docs.aws.amazon.com/privateca/latest/APIReference/API_OcspConfiguration.html">OcspConfiguration</a> and <a href="https://docs.aws.amazon.com/privateca/latest/APIReference/API_CrlConfiguration.html">CrlConfiguration</a> types.</p>
    pub fn set_revocation_configuration(
        mut self,
        input: std::option::Option<crate::types::RevocationConfiguration>,
    ) -> Self {
        self.revocation_configuration = input;
        self
    }
    /// <p>The type of the certificate authority.</p>
    pub fn certificate_authority_type(
        mut self,
        input: crate::types::CertificateAuthorityType,
    ) -> Self {
        self.certificate_authority_type = Some(input);
        self
    }
    /// <p>The type of the certificate authority.</p>
    pub fn set_certificate_authority_type(
        mut self,
        input: std::option::Option<crate::types::CertificateAuthorityType>,
    ) -> Self {
        self.certificate_authority_type = input;
        self
    }
    /// <p>Custom string that can be used to distinguish between calls to the <b>CreateCertificateAuthority</b> action. Idempotency tokens for <b>CreateCertificateAuthority</b> time out after five minutes. Therefore, if you call <b>CreateCertificateAuthority</b> multiple times with the same idempotency token within five minutes, Amazon Web Services Private CA recognizes that you are requesting only certificate authority and will issue only one. If you change the idempotency token for each call, Amazon Web Services Private CA recognizes that you are requesting multiple certificate authorities.</p>
    pub fn idempotency_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.idempotency_token = Some(input.into());
        self
    }
    /// <p>Custom string that can be used to distinguish between calls to the <b>CreateCertificateAuthority</b> action. Idempotency tokens for <b>CreateCertificateAuthority</b> time out after five minutes. Therefore, if you call <b>CreateCertificateAuthority</b> multiple times with the same idempotency token within five minutes, Amazon Web Services Private CA recognizes that you are requesting only certificate authority and will issue only one. If you change the idempotency token for each call, Amazon Web Services Private CA recognizes that you are requesting multiple certificate authorities.</p>
    pub fn set_idempotency_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.idempotency_token = input;
        self
    }
    /// <p>Specifies a cryptographic key management compliance standard used for handling CA keys.</p>
    /// <p>Default: FIPS_140_2_LEVEL_3_OR_HIGHER</p>
    /// <p> <i>Note:</i> <code>FIPS_140_2_LEVEL_3_OR_HIGHER</code> is not supported in the following Regions:</p>
    /// <ul>
    /// <li> <p>ap-northeast-3</p> </li>
    /// <li> <p>ap-southeast-3</p> </li>
    /// </ul>
    /// <p>When creating a CA in these Regions, you must provide <code>FIPS_140_2_LEVEL_2_OR_HIGHER</code> as the argument for <code>KeyStorageSecurityStandard</code>. Failure to do this results in an <code>InvalidArgsException</code> with the message, "A certificate authority cannot be created in this region with the specified security standard."</p>
    pub fn key_storage_security_standard(
        mut self,
        input: crate::types::KeyStorageSecurityStandard,
    ) -> Self {
        self.key_storage_security_standard = Some(input);
        self
    }
    /// <p>Specifies a cryptographic key management compliance standard used for handling CA keys.</p>
    /// <p>Default: FIPS_140_2_LEVEL_3_OR_HIGHER</p>
    /// <p> <i>Note:</i> <code>FIPS_140_2_LEVEL_3_OR_HIGHER</code> is not supported in the following Regions:</p>
    /// <ul>
    /// <li> <p>ap-northeast-3</p> </li>
    /// <li> <p>ap-southeast-3</p> </li>
    /// </ul>
    /// <p>When creating a CA in these Regions, you must provide <code>FIPS_140_2_LEVEL_2_OR_HIGHER</code> as the argument for <code>KeyStorageSecurityStandard</code>. Failure to do this results in an <code>InvalidArgsException</code> with the message, "A certificate authority cannot be created in this region with the specified security standard."</p>
    pub fn set_key_storage_security_standard(
        mut self,
        input: std::option::Option<crate::types::KeyStorageSecurityStandard>,
    ) -> Self {
        self.key_storage_security_standard = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Key-value pairs that will be attached to the new private CA. You can associate up to 50 tags with a private CA. For information using tags with IAM to manage permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_iam-tags.html">Controlling Access Using IAM Tags</a>.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>Key-value pairs that will be attached to the new private CA. You can associate up to 50 tags with a private CA. For information using tags with IAM to manage permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_iam-tags.html">Controlling Access Using IAM Tags</a>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>Specifies whether the CA issues general-purpose certificates that typically require a revocation mechanism, or short-lived certificates that may optionally omit revocation because they expire quickly. Short-lived certificate validity is limited to seven days.</p>
    /// <p>The default value is GENERAL_PURPOSE.</p>
    pub fn usage_mode(mut self, input: crate::types::CertificateAuthorityUsageMode) -> Self {
        self.usage_mode = Some(input);
        self
    }
    /// <p>Specifies whether the CA issues general-purpose certificates that typically require a revocation mechanism, or short-lived certificates that may optionally omit revocation because they expire quickly. Short-lived certificate validity is limited to seven days.</p>
    /// <p>The default value is GENERAL_PURPOSE.</p>
    pub fn set_usage_mode(
        mut self,
        input: std::option::Option<crate::types::CertificateAuthorityUsageMode>,
    ) -> Self {
        self.usage_mode = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateCertificateAuthorityInput`](crate::operation::create_certificate_authority::CreateCertificateAuthorityInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_certificate_authority::CreateCertificateAuthorityInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_certificate_authority::CreateCertificateAuthorityInput {
                certificate_authority_configuration: self.certificate_authority_configuration,
                revocation_configuration: self.revocation_configuration,
                certificate_authority_type: self.certificate_authority_type,
                idempotency_token: self.idempotency_token,
                key_storage_security_standard: self.key_storage_security_standard,
                tags: self.tags,
                usage_mode: self.usage_mode,
            },
        )
    }
}
