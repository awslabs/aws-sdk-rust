// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    CertificateMismatchException(crate::error::CertificateMismatchException),
    ConcurrentModificationException(crate::error::ConcurrentModificationException),
    InvalidArgsException(crate::error::InvalidArgsException),
    InvalidArnException(crate::error::InvalidArnException),
    InvalidNextTokenException(crate::error::InvalidNextTokenException),
    InvalidPolicyException(crate::error::InvalidPolicyException),
    InvalidRequestException(crate::error::InvalidRequestException),
    InvalidStateException(crate::error::InvalidStateException),
    InvalidTagException(crate::error::InvalidTagException),
    LimitExceededException(crate::error::LimitExceededException),
    LockoutPreventedException(crate::error::LockoutPreventedException),
    MalformedCsrException(crate::error::MalformedCsrException),
    MalformedCertificateException(crate::error::MalformedCertificateException),
    PermissionAlreadyExistsException(crate::error::PermissionAlreadyExistsException),
    RequestAlreadyProcessedException(crate::error::RequestAlreadyProcessedException),
    RequestFailedException(crate::error::RequestFailedException),
    RequestInProgressException(crate::error::RequestInProgressException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    TooManyTagsException(crate::error::TooManyTagsException),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::CertificateMismatchException(inner) => inner.fmt(f),
            Error::ConcurrentModificationException(inner) => inner.fmt(f),
            Error::InvalidArgsException(inner) => inner.fmt(f),
            Error::InvalidArnException(inner) => inner.fmt(f),
            Error::InvalidNextTokenException(inner) => inner.fmt(f),
            Error::InvalidPolicyException(inner) => inner.fmt(f),
            Error::InvalidRequestException(inner) => inner.fmt(f),
            Error::InvalidStateException(inner) => inner.fmt(f),
            Error::InvalidTagException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::LockoutPreventedException(inner) => inner.fmt(f),
            Error::MalformedCsrException(inner) => inner.fmt(f),
            Error::MalformedCertificateException(inner) => inner.fmt(f),
            Error::PermissionAlreadyExistsException(inner) => inner.fmt(f),
            Error::RequestAlreadyProcessedException(inner) => inner.fmt(f),
            Error::RequestFailedException(inner) => inner.fmt(f),
            Error::RequestInProgressException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::TooManyTagsException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateCertificateAuthorityError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateCertificateAuthorityError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateCertificateAuthorityErrorKind::InvalidArgsException(inner) => {
                    Error::InvalidArgsException(inner)
                }
                crate::error::CreateCertificateAuthorityErrorKind::InvalidPolicyException(
                    inner,
                ) => Error::InvalidPolicyException(inner),
                crate::error::CreateCertificateAuthorityErrorKind::InvalidTagException(inner) => {
                    Error::InvalidTagException(inner)
                }
                crate::error::CreateCertificateAuthorityErrorKind::LimitExceededException(
                    inner,
                ) => Error::LimitExceededException(inner),
                crate::error::CreateCertificateAuthorityErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateCertificateAuthorityAuditReportError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::CreateCertificateAuthorityAuditReportError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateCertificateAuthorityAuditReportErrorKind::InvalidArgsException(inner) => Error::InvalidArgsException(inner),
                crate::error::CreateCertificateAuthorityAuditReportErrorKind::InvalidArnException(inner) => Error::InvalidArnException(inner),
                crate::error::CreateCertificateAuthorityAuditReportErrorKind::InvalidStateException(inner) => Error::InvalidStateException(inner),
                crate::error::CreateCertificateAuthorityAuditReportErrorKind::RequestFailedException(inner) => Error::RequestFailedException(inner),
                crate::error::CreateCertificateAuthorityAuditReportErrorKind::RequestInProgressException(inner) => Error::RequestInProgressException(inner),
                crate::error::CreateCertificateAuthorityAuditReportErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
                crate::error::CreateCertificateAuthorityAuditReportErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreatePermissionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreatePermissionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreatePermissionErrorKind::InvalidArnException(inner) => {
                    Error::InvalidArnException(inner)
                }
                crate::error::CreatePermissionErrorKind::InvalidStateException(inner) => {
                    Error::InvalidStateException(inner)
                }
                crate::error::CreatePermissionErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::CreatePermissionErrorKind::PermissionAlreadyExistsException(
                    inner,
                ) => Error::PermissionAlreadyExistsException(inner),
                crate::error::CreatePermissionErrorKind::RequestFailedException(inner) => {
                    Error::RequestFailedException(inner)
                }
                crate::error::CreatePermissionErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::CreatePermissionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteCertificateAuthorityError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteCertificateAuthorityError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DeleteCertificateAuthorityErrorKind::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
                crate::error::DeleteCertificateAuthorityErrorKind::InvalidArnException(inner) => Error::InvalidArnException(inner),
                crate::error::DeleteCertificateAuthorityErrorKind::InvalidStateException(inner) => Error::InvalidStateException(inner),
                crate::error::DeleteCertificateAuthorityErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
                crate::error::DeleteCertificateAuthorityErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeletePermissionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeletePermissionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeletePermissionErrorKind::InvalidArnException(inner) => {
                    Error::InvalidArnException(inner)
                }
                crate::error::DeletePermissionErrorKind::InvalidStateException(inner) => {
                    Error::InvalidStateException(inner)
                }
                crate::error::DeletePermissionErrorKind::RequestFailedException(inner) => {
                    Error::RequestFailedException(inner)
                }
                crate::error::DeletePermissionErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::DeletePermissionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeletePolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeletePolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeletePolicyErrorKind::ConcurrentModificationException(inner) => {
                    Error::ConcurrentModificationException(inner)
                }
                crate::error::DeletePolicyErrorKind::InvalidArnException(inner) => {
                    Error::InvalidArnException(inner)
                }
                crate::error::DeletePolicyErrorKind::InvalidStateException(inner) => {
                    Error::InvalidStateException(inner)
                }
                crate::error::DeletePolicyErrorKind::LockoutPreventedException(inner) => {
                    Error::LockoutPreventedException(inner)
                }
                crate::error::DeletePolicyErrorKind::RequestFailedException(inner) => {
                    Error::RequestFailedException(inner)
                }
                crate::error::DeletePolicyErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::DeletePolicyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeCertificateAuthorityError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeCertificateAuthorityError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeCertificateAuthorityErrorKind::InvalidArnException(inner) => {
                    Error::InvalidArnException(inner)
                }
                crate::error::DescribeCertificateAuthorityErrorKind::ResourceNotFoundException(
                    inner,
                ) => Error::ResourceNotFoundException(inner),
                crate::error::DescribeCertificateAuthorityErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeCertificateAuthorityAuditReportError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DescribeCertificateAuthorityAuditReportError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeCertificateAuthorityAuditReportErrorKind::InvalidArgsException(inner) => Error::InvalidArgsException(inner),
                crate::error::DescribeCertificateAuthorityAuditReportErrorKind::InvalidArnException(inner) => Error::InvalidArnException(inner),
                crate::error::DescribeCertificateAuthorityAuditReportErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
                crate::error::DescribeCertificateAuthorityAuditReportErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetCertificateError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetCertificateError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetCertificateErrorKind::InvalidArnException(inner) => {
                    Error::InvalidArnException(inner)
                }
                crate::error::GetCertificateErrorKind::InvalidStateException(inner) => {
                    Error::InvalidStateException(inner)
                }
                crate::error::GetCertificateErrorKind::RequestFailedException(inner) => {
                    Error::RequestFailedException(inner)
                }
                crate::error::GetCertificateErrorKind::RequestInProgressException(inner) => {
                    Error::RequestInProgressException(inner)
                }
                crate::error::GetCertificateErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::GetCertificateErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetCertificateAuthorityCertificateError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetCertificateAuthorityCertificateError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::GetCertificateAuthorityCertificateErrorKind::InvalidArnException(inner) => Error::InvalidArnException(inner),
                crate::error::GetCertificateAuthorityCertificateErrorKind::InvalidStateException(inner) => Error::InvalidStateException(inner),
                crate::error::GetCertificateAuthorityCertificateErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
                crate::error::GetCertificateAuthorityCertificateErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetCertificateAuthorityCsrError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetCertificateAuthorityCsrError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetCertificateAuthorityCsrErrorKind::InvalidArnException(inner) => {
                    Error::InvalidArnException(inner)
                }
                crate::error::GetCertificateAuthorityCsrErrorKind::InvalidStateException(inner) => {
                    Error::InvalidStateException(inner)
                }
                crate::error::GetCertificateAuthorityCsrErrorKind::RequestFailedException(
                    inner,
                ) => Error::RequestFailedException(inner),
                crate::error::GetCertificateAuthorityCsrErrorKind::RequestInProgressException(
                    inner,
                ) => Error::RequestInProgressException(inner),
                crate::error::GetCertificateAuthorityCsrErrorKind::ResourceNotFoundException(
                    inner,
                ) => Error::ResourceNotFoundException(inner),
                crate::error::GetCertificateAuthorityCsrErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetPolicyErrorKind::InvalidArnException(inner) => {
                    Error::InvalidArnException(inner)
                }
                crate::error::GetPolicyErrorKind::InvalidStateException(inner) => {
                    Error::InvalidStateException(inner)
                }
                crate::error::GetPolicyErrorKind::RequestFailedException(inner) => {
                    Error::RequestFailedException(inner)
                }
                crate::error::GetPolicyErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::GetPolicyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ImportCertificateAuthorityCertificateError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::ImportCertificateAuthorityCertificateError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ImportCertificateAuthorityCertificateErrorKind::CertificateMismatchException(inner) => Error::CertificateMismatchException(inner),
                crate::error::ImportCertificateAuthorityCertificateErrorKind::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
                crate::error::ImportCertificateAuthorityCertificateErrorKind::InvalidArnException(inner) => Error::InvalidArnException(inner),
                crate::error::ImportCertificateAuthorityCertificateErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
                crate::error::ImportCertificateAuthorityCertificateErrorKind::InvalidStateException(inner) => Error::InvalidStateException(inner),
                crate::error::ImportCertificateAuthorityCertificateErrorKind::MalformedCertificateException(inner) => Error::MalformedCertificateException(inner),
                crate::error::ImportCertificateAuthorityCertificateErrorKind::RequestFailedException(inner) => Error::RequestFailedException(inner),
                crate::error::ImportCertificateAuthorityCertificateErrorKind::RequestInProgressException(inner) => Error::RequestInProgressException(inner),
                crate::error::ImportCertificateAuthorityCertificateErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
                crate::error::ImportCertificateAuthorityCertificateErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::IssueCertificateError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::IssueCertificateError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::IssueCertificateErrorKind::InvalidArgsException(inner) => {
                    Error::InvalidArgsException(inner)
                }
                crate::error::IssueCertificateErrorKind::InvalidArnException(inner) => {
                    Error::InvalidArnException(inner)
                }
                crate::error::IssueCertificateErrorKind::InvalidStateException(inner) => {
                    Error::InvalidStateException(inner)
                }
                crate::error::IssueCertificateErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::IssueCertificateErrorKind::MalformedCsrException(inner) => {
                    Error::MalformedCsrException(inner)
                }
                crate::error::IssueCertificateErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::IssueCertificateErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListCertificateAuthoritiesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListCertificateAuthoritiesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListCertificateAuthoritiesErrorKind::InvalidNextTokenException(
                    inner,
                ) => Error::InvalidNextTokenException(inner),
                crate::error::ListCertificateAuthoritiesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListPermissionsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListPermissionsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListPermissionsErrorKind::InvalidArnException(inner) => {
                    Error::InvalidArnException(inner)
                }
                crate::error::ListPermissionsErrorKind::InvalidNextTokenException(inner) => {
                    Error::InvalidNextTokenException(inner)
                }
                crate::error::ListPermissionsErrorKind::InvalidStateException(inner) => {
                    Error::InvalidStateException(inner)
                }
                crate::error::ListPermissionsErrorKind::RequestFailedException(inner) => {
                    Error::RequestFailedException(inner)
                }
                crate::error::ListPermissionsErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::ListPermissionsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTagsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTagsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTagsErrorKind::InvalidArnException(inner) => {
                    Error::InvalidArnException(inner)
                }
                crate::error::ListTagsErrorKind::InvalidStateException(inner) => {
                    Error::InvalidStateException(inner)
                }
                crate::error::ListTagsErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::ListTagsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutPolicyErrorKind::ConcurrentModificationException(inner) => {
                    Error::ConcurrentModificationException(inner)
                }
                crate::error::PutPolicyErrorKind::InvalidArnException(inner) => {
                    Error::InvalidArnException(inner)
                }
                crate::error::PutPolicyErrorKind::InvalidPolicyException(inner) => {
                    Error::InvalidPolicyException(inner)
                }
                crate::error::PutPolicyErrorKind::InvalidStateException(inner) => {
                    Error::InvalidStateException(inner)
                }
                crate::error::PutPolicyErrorKind::LockoutPreventedException(inner) => {
                    Error::LockoutPreventedException(inner)
                }
                crate::error::PutPolicyErrorKind::RequestFailedException(inner) => {
                    Error::RequestFailedException(inner)
                }
                crate::error::PutPolicyErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::PutPolicyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RestoreCertificateAuthorityError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::RestoreCertificateAuthorityError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RestoreCertificateAuthorityErrorKind::InvalidArnException(inner) => {
                    Error::InvalidArnException(inner)
                }
                crate::error::RestoreCertificateAuthorityErrorKind::InvalidStateException(
                    inner,
                ) => Error::InvalidStateException(inner),
                crate::error::RestoreCertificateAuthorityErrorKind::ResourceNotFoundException(
                    inner,
                ) => Error::ResourceNotFoundException(inner),
                crate::error::RestoreCertificateAuthorityErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RevokeCertificateError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RevokeCertificateError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RevokeCertificateErrorKind::ConcurrentModificationException(
                    inner,
                ) => Error::ConcurrentModificationException(inner),
                crate::error::RevokeCertificateErrorKind::InvalidArnException(inner) => {
                    Error::InvalidArnException(inner)
                }
                crate::error::RevokeCertificateErrorKind::InvalidRequestException(inner) => {
                    Error::InvalidRequestException(inner)
                }
                crate::error::RevokeCertificateErrorKind::InvalidStateException(inner) => {
                    Error::InvalidStateException(inner)
                }
                crate::error::RevokeCertificateErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::RevokeCertificateErrorKind::RequestAlreadyProcessedException(
                    inner,
                ) => Error::RequestAlreadyProcessedException(inner),
                crate::error::RevokeCertificateErrorKind::RequestFailedException(inner) => {
                    Error::RequestFailedException(inner)
                }
                crate::error::RevokeCertificateErrorKind::RequestInProgressException(inner) => {
                    Error::RequestInProgressException(inner)
                }
                crate::error::RevokeCertificateErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::RevokeCertificateErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TagCertificateAuthorityError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::TagCertificateAuthorityError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TagCertificateAuthorityErrorKind::InvalidArnException(inner) => {
                    Error::InvalidArnException(inner)
                }
                crate::error::TagCertificateAuthorityErrorKind::InvalidStateException(inner) => {
                    Error::InvalidStateException(inner)
                }
                crate::error::TagCertificateAuthorityErrorKind::InvalidTagException(inner) => {
                    Error::InvalidTagException(inner)
                }
                crate::error::TagCertificateAuthorityErrorKind::ResourceNotFoundException(
                    inner,
                ) => Error::ResourceNotFoundException(inner),
                crate::error::TagCertificateAuthorityErrorKind::TooManyTagsException(inner) => {
                    Error::TooManyTagsException(inner)
                }
                crate::error::TagCertificateAuthorityErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UntagCertificateAuthorityError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UntagCertificateAuthorityError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UntagCertificateAuthorityErrorKind::InvalidArnException(inner) => {
                    Error::InvalidArnException(inner)
                }
                crate::error::UntagCertificateAuthorityErrorKind::InvalidStateException(inner) => {
                    Error::InvalidStateException(inner)
                }
                crate::error::UntagCertificateAuthorityErrorKind::InvalidTagException(inner) => {
                    Error::InvalidTagException(inner)
                }
                crate::error::UntagCertificateAuthorityErrorKind::ResourceNotFoundException(
                    inner,
                ) => Error::ResourceNotFoundException(inner),
                crate::error::UntagCertificateAuthorityErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateCertificateAuthorityError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateCertificateAuthorityError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::UpdateCertificateAuthorityErrorKind::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
                crate::error::UpdateCertificateAuthorityErrorKind::InvalidArgsException(inner) => Error::InvalidArgsException(inner),
                crate::error::UpdateCertificateAuthorityErrorKind::InvalidArnException(inner) => Error::InvalidArnException(inner),
                crate::error::UpdateCertificateAuthorityErrorKind::InvalidPolicyException(inner) => Error::InvalidPolicyException(inner),
                crate::error::UpdateCertificateAuthorityErrorKind::InvalidStateException(inner) => Error::InvalidStateException(inner),
                crate::error::UpdateCertificateAuthorityErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
                crate::error::UpdateCertificateAuthorityErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
