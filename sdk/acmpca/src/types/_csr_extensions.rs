// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the certificate extensions to be added to the certificate signing request (CSR).</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CsrExtensions {
    /// <p>Indicates the purpose of the certificate and of the key contained in the certificate.</p>
    #[doc(hidden)]
    pub key_usage: std::option::Option<crate::types::KeyUsage>,
    /// <p>For CA certificates, provides a path to additional information pertaining to the CA, such as revocation and policy. For more information, see <a href="https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.2.2">Subject Information Access</a> in RFC 5280.</p>
    #[doc(hidden)]
    pub subject_information_access:
        std::option::Option<std::vec::Vec<crate::types::AccessDescription>>,
}
impl CsrExtensions {
    /// <p>Indicates the purpose of the certificate and of the key contained in the certificate.</p>
    pub fn key_usage(&self) -> std::option::Option<&crate::types::KeyUsage> {
        self.key_usage.as_ref()
    }
    /// <p>For CA certificates, provides a path to additional information pertaining to the CA, such as revocation and policy. For more information, see <a href="https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.2.2">Subject Information Access</a> in RFC 5280.</p>
    pub fn subject_information_access(
        &self,
    ) -> std::option::Option<&[crate::types::AccessDescription]> {
        self.subject_information_access.as_deref()
    }
}
impl CsrExtensions {
    /// Creates a new builder-style object to manufacture [`CsrExtensions`](crate::types::CsrExtensions).
    pub fn builder() -> crate::types::builders::CsrExtensionsBuilder {
        crate::types::builders::CsrExtensionsBuilder::default()
    }
}

/// A builder for [`CsrExtensions`](crate::types::CsrExtensions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CsrExtensionsBuilder {
    pub(crate) key_usage: std::option::Option<crate::types::KeyUsage>,
    pub(crate) subject_information_access:
        std::option::Option<std::vec::Vec<crate::types::AccessDescription>>,
}
impl CsrExtensionsBuilder {
    /// <p>Indicates the purpose of the certificate and of the key contained in the certificate.</p>
    pub fn key_usage(mut self, input: crate::types::KeyUsage) -> Self {
        self.key_usage = Some(input);
        self
    }
    /// <p>Indicates the purpose of the certificate and of the key contained in the certificate.</p>
    pub fn set_key_usage(mut self, input: std::option::Option<crate::types::KeyUsage>) -> Self {
        self.key_usage = input;
        self
    }
    /// Appends an item to `subject_information_access`.
    ///
    /// To override the contents of this collection use [`set_subject_information_access`](Self::set_subject_information_access).
    ///
    /// <p>For CA certificates, provides a path to additional information pertaining to the CA, such as revocation and policy. For more information, see <a href="https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.2.2">Subject Information Access</a> in RFC 5280.</p>
    pub fn subject_information_access(mut self, input: crate::types::AccessDescription) -> Self {
        let mut v = self.subject_information_access.unwrap_or_default();
        v.push(input);
        self.subject_information_access = Some(v);
        self
    }
    /// <p>For CA certificates, provides a path to additional information pertaining to the CA, such as revocation and policy. For more information, see <a href="https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.2.2">Subject Information Access</a> in RFC 5280.</p>
    pub fn set_subject_information_access(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AccessDescription>>,
    ) -> Self {
        self.subject_information_access = input;
        self
    }
    /// Consumes the builder and constructs a [`CsrExtensions`](crate::types::CsrExtensions).
    pub fn build(self) -> crate::types::CsrExtensions {
        crate::types::CsrExtensions {
            key_usage: self.key_usage,
            subject_information_access: self.subject_information_access,
        }
    }
}
