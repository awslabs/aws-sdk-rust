// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains configuration information for your private certificate authority (CA). This includes information about the class of public key algorithm and the key pair that your private CA creates when it issues a certificate. It also includes the signature algorithm that it uses when issuing certificates, and its X.500 distinguished name. You must specify this information when you call the <a href="https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthority.html">CreateCertificateAuthority</a> action. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CertificateAuthorityConfiguration {
    /// <p>Type of the public key algorithm and size, in bits, of the key pair that your CA creates when it issues a certificate. When you create a subordinate CA, you must use a key algorithm supported by the parent CA.</p>
    pub key_algorithm: crate::types::KeyAlgorithm,
    /// <p>Name of the algorithm your private CA uses to sign certificate requests.</p>
    /// <p>This parameter should not be confused with the <code>SigningAlgorithm</code> parameter used to sign certificates when they are issued.</p>
    pub signing_algorithm: crate::types::SigningAlgorithm,
    /// <p>Structure that contains X.500 distinguished name information for your private CA.</p>
    pub subject: ::std::option::Option<crate::types::Asn1Subject>,
    /// <p>Specifies information to be added to the extension section of the certificate signing request (CSR).</p>
    pub csr_extensions: ::std::option::Option<crate::types::CsrExtensions>,
}
impl CertificateAuthorityConfiguration {
    /// <p>Type of the public key algorithm and size, in bits, of the key pair that your CA creates when it issues a certificate. When you create a subordinate CA, you must use a key algorithm supported by the parent CA.</p>
    pub fn key_algorithm(&self) -> &crate::types::KeyAlgorithm {
        &self.key_algorithm
    }
    /// <p>Name of the algorithm your private CA uses to sign certificate requests.</p>
    /// <p>This parameter should not be confused with the <code>SigningAlgorithm</code> parameter used to sign certificates when they are issued.</p>
    pub fn signing_algorithm(&self) -> &crate::types::SigningAlgorithm {
        &self.signing_algorithm
    }
    /// <p>Structure that contains X.500 distinguished name information for your private CA.</p>
    pub fn subject(&self) -> ::std::option::Option<&crate::types::Asn1Subject> {
        self.subject.as_ref()
    }
    /// <p>Specifies information to be added to the extension section of the certificate signing request (CSR).</p>
    pub fn csr_extensions(&self) -> ::std::option::Option<&crate::types::CsrExtensions> {
        self.csr_extensions.as_ref()
    }
}
impl CertificateAuthorityConfiguration {
    /// Creates a new builder-style object to manufacture [`CertificateAuthorityConfiguration`](crate::types::CertificateAuthorityConfiguration).
    pub fn builder() -> crate::types::builders::CertificateAuthorityConfigurationBuilder {
        crate::types::builders::CertificateAuthorityConfigurationBuilder::default()
    }
}

/// A builder for [`CertificateAuthorityConfiguration`](crate::types::CertificateAuthorityConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CertificateAuthorityConfigurationBuilder {
    pub(crate) key_algorithm: ::std::option::Option<crate::types::KeyAlgorithm>,
    pub(crate) signing_algorithm: ::std::option::Option<crate::types::SigningAlgorithm>,
    pub(crate) subject: ::std::option::Option<crate::types::Asn1Subject>,
    pub(crate) csr_extensions: ::std::option::Option<crate::types::CsrExtensions>,
}
impl CertificateAuthorityConfigurationBuilder {
    /// <p>Type of the public key algorithm and size, in bits, of the key pair that your CA creates when it issues a certificate. When you create a subordinate CA, you must use a key algorithm supported by the parent CA.</p>
    /// This field is required.
    pub fn key_algorithm(mut self, input: crate::types::KeyAlgorithm) -> Self {
        self.key_algorithm = ::std::option::Option::Some(input);
        self
    }
    /// <p>Type of the public key algorithm and size, in bits, of the key pair that your CA creates when it issues a certificate. When you create a subordinate CA, you must use a key algorithm supported by the parent CA.</p>
    pub fn set_key_algorithm(mut self, input: ::std::option::Option<crate::types::KeyAlgorithm>) -> Self {
        self.key_algorithm = input;
        self
    }
    /// <p>Type of the public key algorithm and size, in bits, of the key pair that your CA creates when it issues a certificate. When you create a subordinate CA, you must use a key algorithm supported by the parent CA.</p>
    pub fn get_key_algorithm(&self) -> &::std::option::Option<crate::types::KeyAlgorithm> {
        &self.key_algorithm
    }
    /// <p>Name of the algorithm your private CA uses to sign certificate requests.</p>
    /// <p>This parameter should not be confused with the <code>SigningAlgorithm</code> parameter used to sign certificates when they are issued.</p>
    /// This field is required.
    pub fn signing_algorithm(mut self, input: crate::types::SigningAlgorithm) -> Self {
        self.signing_algorithm = ::std::option::Option::Some(input);
        self
    }
    /// <p>Name of the algorithm your private CA uses to sign certificate requests.</p>
    /// <p>This parameter should not be confused with the <code>SigningAlgorithm</code> parameter used to sign certificates when they are issued.</p>
    pub fn set_signing_algorithm(mut self, input: ::std::option::Option<crate::types::SigningAlgorithm>) -> Self {
        self.signing_algorithm = input;
        self
    }
    /// <p>Name of the algorithm your private CA uses to sign certificate requests.</p>
    /// <p>This parameter should not be confused with the <code>SigningAlgorithm</code> parameter used to sign certificates when they are issued.</p>
    pub fn get_signing_algorithm(&self) -> &::std::option::Option<crate::types::SigningAlgorithm> {
        &self.signing_algorithm
    }
    /// <p>Structure that contains X.500 distinguished name information for your private CA.</p>
    /// This field is required.
    pub fn subject(mut self, input: crate::types::Asn1Subject) -> Self {
        self.subject = ::std::option::Option::Some(input);
        self
    }
    /// <p>Structure that contains X.500 distinguished name information for your private CA.</p>
    pub fn set_subject(mut self, input: ::std::option::Option<crate::types::Asn1Subject>) -> Self {
        self.subject = input;
        self
    }
    /// <p>Structure that contains X.500 distinguished name information for your private CA.</p>
    pub fn get_subject(&self) -> &::std::option::Option<crate::types::Asn1Subject> {
        &self.subject
    }
    /// <p>Specifies information to be added to the extension section of the certificate signing request (CSR).</p>
    pub fn csr_extensions(mut self, input: crate::types::CsrExtensions) -> Self {
        self.csr_extensions = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies information to be added to the extension section of the certificate signing request (CSR).</p>
    pub fn set_csr_extensions(mut self, input: ::std::option::Option<crate::types::CsrExtensions>) -> Self {
        self.csr_extensions = input;
        self
    }
    /// <p>Specifies information to be added to the extension section of the certificate signing request (CSR).</p>
    pub fn get_csr_extensions(&self) -> &::std::option::Option<crate::types::CsrExtensions> {
        &self.csr_extensions
    }
    /// Consumes the builder and constructs a [`CertificateAuthorityConfiguration`](crate::types::CertificateAuthorityConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`key_algorithm`](crate::types::builders::CertificateAuthorityConfigurationBuilder::key_algorithm)
    /// - [`signing_algorithm`](crate::types::builders::CertificateAuthorityConfigurationBuilder::signing_algorithm)
    pub fn build(self) -> ::std::result::Result<crate::types::CertificateAuthorityConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CertificateAuthorityConfiguration {
            key_algorithm: self.key_algorithm.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "key_algorithm",
                    "key_algorithm was not specified but it is required when building CertificateAuthorityConfiguration",
                )
            })?,
            signing_algorithm: self.signing_algorithm.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "signing_algorithm",
                    "signing_algorithm was not specified but it is required when building CertificateAuthorityConfiguration",
                )
            })?,
            subject: self.subject,
            csr_extensions: self.csr_extensions,
        })
    }
}
