// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an Electronic Data Interchange (EDI) entity as described in as defined in <a href="https://datatracker.ietf.org/doc/html/rfc5280">Subject Alternative Name</a> in RFC 5280.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EdiPartyName {
    /// <p>Specifies the party name.</p>
    #[doc(hidden)]
    pub party_name: std::option::Option<std::string::String>,
    /// <p>Specifies the name assigner.</p>
    #[doc(hidden)]
    pub name_assigner: std::option::Option<std::string::String>,
}
impl EdiPartyName {
    /// <p>Specifies the party name.</p>
    pub fn party_name(&self) -> std::option::Option<&str> {
        self.party_name.as_deref()
    }
    /// <p>Specifies the name assigner.</p>
    pub fn name_assigner(&self) -> std::option::Option<&str> {
        self.name_assigner.as_deref()
    }
}
impl EdiPartyName {
    /// Creates a new builder-style object to manufacture [`EdiPartyName`](crate::types::EdiPartyName).
    pub fn builder() -> crate::types::builders::EdiPartyNameBuilder {
        crate::types::builders::EdiPartyNameBuilder::default()
    }
}

/// A builder for [`EdiPartyName`](crate::types::EdiPartyName).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EdiPartyNameBuilder {
    pub(crate) party_name: std::option::Option<std::string::String>,
    pub(crate) name_assigner: std::option::Option<std::string::String>,
}
impl EdiPartyNameBuilder {
    /// <p>Specifies the party name.</p>
    pub fn party_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.party_name = Some(input.into());
        self
    }
    /// <p>Specifies the party name.</p>
    pub fn set_party_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.party_name = input;
        self
    }
    /// <p>Specifies the name assigner.</p>
    pub fn name_assigner(mut self, input: impl Into<std::string::String>) -> Self {
        self.name_assigner = Some(input.into());
        self
    }
    /// <p>Specifies the name assigner.</p>
    pub fn set_name_assigner(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name_assigner = input;
        self
    }
    /// Consumes the builder and constructs a [`EdiPartyName`](crate::types::EdiPartyName).
    pub fn build(self) -> crate::types::EdiPartyName {
        crate::types::EdiPartyName {
            party_name: self.party_name,
            name_assigner: self.name_assigner,
        }
    }
}
