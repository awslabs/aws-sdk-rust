// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains X.509 certificate information to be placed in an issued certificate. An <code>APIPassthrough</code> or <code>APICSRPassthrough</code> template variant must be selected, or else this parameter is ignored. </p>
/// <p>If conflicting or duplicate certificate information is supplied from other sources, Amazon Web Services Private CA applies <a href="https://docs.aws.amazon.com/privateca/latest/userguide/UsingTemplates.html#template-order-of-operations">order of operation rules</a> to determine what information is used.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ApiPassthrough {
    /// <p>Specifies X.509 extension information for a certificate.</p>
    #[doc(hidden)]
    pub extensions: std::option::Option<crate::types::Extensions>,
    /// <p>Contains information about the certificate subject. The <code>Subject</code> field in the certificate identifies the entity that owns or controls the public key in the certificate. The entity can be a user, computer, device, or service. The <code>Subject </code>must contain an X.500 distinguished name (DN). A DN is a sequence of relative distinguished names (RDNs). The RDNs are separated by commas in the certificate.</p>
    #[doc(hidden)]
    pub subject: std::option::Option<crate::types::Asn1Subject>,
}
impl ApiPassthrough {
    /// <p>Specifies X.509 extension information for a certificate.</p>
    pub fn extensions(&self) -> std::option::Option<&crate::types::Extensions> {
        self.extensions.as_ref()
    }
    /// <p>Contains information about the certificate subject. The <code>Subject</code> field in the certificate identifies the entity that owns or controls the public key in the certificate. The entity can be a user, computer, device, or service. The <code>Subject </code>must contain an X.500 distinguished name (DN). A DN is a sequence of relative distinguished names (RDNs). The RDNs are separated by commas in the certificate.</p>
    pub fn subject(&self) -> std::option::Option<&crate::types::Asn1Subject> {
        self.subject.as_ref()
    }
}
impl ApiPassthrough {
    /// Creates a new builder-style object to manufacture [`ApiPassthrough`](crate::types::ApiPassthrough).
    pub fn builder() -> crate::types::builders::ApiPassthroughBuilder {
        crate::types::builders::ApiPassthroughBuilder::default()
    }
}

/// A builder for [`ApiPassthrough`](crate::types::ApiPassthrough).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ApiPassthroughBuilder {
    pub(crate) extensions: std::option::Option<crate::types::Extensions>,
    pub(crate) subject: std::option::Option<crate::types::Asn1Subject>,
}
impl ApiPassthroughBuilder {
    /// <p>Specifies X.509 extension information for a certificate.</p>
    pub fn extensions(mut self, input: crate::types::Extensions) -> Self {
        self.extensions = Some(input);
        self
    }
    /// <p>Specifies X.509 extension information for a certificate.</p>
    pub fn set_extensions(mut self, input: std::option::Option<crate::types::Extensions>) -> Self {
        self.extensions = input;
        self
    }
    /// <p>Contains information about the certificate subject. The <code>Subject</code> field in the certificate identifies the entity that owns or controls the public key in the certificate. The entity can be a user, computer, device, or service. The <code>Subject </code>must contain an X.500 distinguished name (DN). A DN is a sequence of relative distinguished names (RDNs). The RDNs are separated by commas in the certificate.</p>
    pub fn subject(mut self, input: crate::types::Asn1Subject) -> Self {
        self.subject = Some(input);
        self
    }
    /// <p>Contains information about the certificate subject. The <code>Subject</code> field in the certificate identifies the entity that owns or controls the public key in the certificate. The entity can be a user, computer, device, or service. The <code>Subject </code>must contain an X.500 distinguished name (DN). A DN is a sequence of relative distinguished names (RDNs). The RDNs are separated by commas in the certificate.</p>
    pub fn set_subject(mut self, input: std::option::Option<crate::types::Asn1Subject>) -> Self {
        self.subject = input;
        self
    }
    /// Consumes the builder and constructs a [`ApiPassthrough`](crate::types::ApiPassthrough).
    pub fn build(self) -> crate::types::ApiPassthrough {
        crate::types::ApiPassthrough {
            extensions: self.extensions,
            subject: self.subject,
        }
    }
}
