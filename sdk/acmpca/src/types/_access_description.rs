// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides access information used by the <code>authorityInfoAccess</code> and <code>subjectInfoAccess</code> extensions described in <a href="https://datatracker.ietf.org/doc/html/rfc5280">RFC 5280</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AccessDescription {
    /// <p>The type and format of <code>AccessDescription</code> information.</p>
    pub access_method: ::std::option::Option<crate::types::AccessMethod>,
    /// <p>The location of <code>AccessDescription</code> information.</p>
    pub access_location: ::std::option::Option<crate::types::GeneralName>,
}
impl AccessDescription {
    /// <p>The type and format of <code>AccessDescription</code> information.</p>
    pub fn access_method(&self) -> ::std::option::Option<&crate::types::AccessMethod> {
        self.access_method.as_ref()
    }
    /// <p>The location of <code>AccessDescription</code> information.</p>
    pub fn access_location(&self) -> ::std::option::Option<&crate::types::GeneralName> {
        self.access_location.as_ref()
    }
}
impl AccessDescription {
    /// Creates a new builder-style object to manufacture [`AccessDescription`](crate::types::AccessDescription).
    pub fn builder() -> crate::types::builders::AccessDescriptionBuilder {
        crate::types::builders::AccessDescriptionBuilder::default()
    }
}

/// A builder for [`AccessDescription`](crate::types::AccessDescription).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AccessDescriptionBuilder {
    pub(crate) access_method: ::std::option::Option<crate::types::AccessMethod>,
    pub(crate) access_location: ::std::option::Option<crate::types::GeneralName>,
}
impl AccessDescriptionBuilder {
    /// <p>The type and format of <code>AccessDescription</code> information.</p>
    /// This field is required.
    pub fn access_method(mut self, input: crate::types::AccessMethod) -> Self {
        self.access_method = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type and format of <code>AccessDescription</code> information.</p>
    pub fn set_access_method(mut self, input: ::std::option::Option<crate::types::AccessMethod>) -> Self {
        self.access_method = input;
        self
    }
    /// <p>The type and format of <code>AccessDescription</code> information.</p>
    pub fn get_access_method(&self) -> &::std::option::Option<crate::types::AccessMethod> {
        &self.access_method
    }
    /// <p>The location of <code>AccessDescription</code> information.</p>
    /// This field is required.
    pub fn access_location(mut self, input: crate::types::GeneralName) -> Self {
        self.access_location = ::std::option::Option::Some(input);
        self
    }
    /// <p>The location of <code>AccessDescription</code> information.</p>
    pub fn set_access_location(mut self, input: ::std::option::Option<crate::types::GeneralName>) -> Self {
        self.access_location = input;
        self
    }
    /// <p>The location of <code>AccessDescription</code> information.</p>
    pub fn get_access_location(&self) -> &::std::option::Option<crate::types::GeneralName> {
        &self.access_location
    }
    /// Consumes the builder and constructs a [`AccessDescription`](crate::types::AccessDescription).
    pub fn build(self) -> crate::types::AccessDescription {
        crate::types::AccessDescription {
            access_method: self.access_method,
            access_location: self.access_location,
        }
    }
}
