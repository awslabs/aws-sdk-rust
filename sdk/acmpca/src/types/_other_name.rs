// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines a custom ASN.1 X.400 <code>GeneralName</code> using an object identifier (OID) and value. The OID must satisfy the regular expression shown below. For more information, see NIST's definition of <a href="https://csrc.nist.gov/glossary/term/Object_Identifier">Object Identifier (OID)</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OtherName {
    /// <p>Specifies an OID. </p>
    pub type_id: ::std::string::String,
    /// <p>Specifies an OID value.</p>
    pub value: ::std::string::String,
}
impl OtherName {
    /// <p>Specifies an OID. </p>
    pub fn type_id(&self) -> &str {
        use std::ops::Deref;
        self.type_id.deref()
    }
    /// <p>Specifies an OID value.</p>
    pub fn value(&self) -> &str {
        use std::ops::Deref;
        self.value.deref()
    }
}
impl OtherName {
    /// Creates a new builder-style object to manufacture [`OtherName`](crate::types::OtherName).
    pub fn builder() -> crate::types::builders::OtherNameBuilder {
        crate::types::builders::OtherNameBuilder::default()
    }
}

/// A builder for [`OtherName`](crate::types::OtherName).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OtherNameBuilder {
    pub(crate) type_id: ::std::option::Option<::std::string::String>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
}
impl OtherNameBuilder {
    /// <p>Specifies an OID. </p>
    /// This field is required.
    pub fn type_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.type_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies an OID. </p>
    pub fn set_type_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.type_id = input;
        self
    }
    /// <p>Specifies an OID. </p>
    pub fn get_type_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.type_id
    }
    /// <p>Specifies an OID value.</p>
    /// This field is required.
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies an OID value.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>Specifies an OID value.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// Consumes the builder and constructs a [`OtherName`](crate::types::OtherName).
    /// This method will fail if any of the following fields are not set:
    /// - [`type_id`](crate::types::builders::OtherNameBuilder::type_id)
    /// - [`value`](crate::types::builders::OtherNameBuilder::value)
    pub fn build(self) -> ::std::result::Result<crate::types::OtherName, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::OtherName {
            type_id: self.type_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "type_id",
                    "type_id was not specified but it is required when building OtherName",
                )
            })?,
            value: self.value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "value",
                    "value was not specified but it is required when building OtherName",
                )
            })?,
        })
    }
}
