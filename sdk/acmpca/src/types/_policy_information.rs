// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the X.509 <code>CertificatePolicies</code> extension.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PolicyInformation {
    /// <p>Specifies the object identifier (OID) of the certificate policy under which the certificate was issued. For more information, see NIST's definition of <a href="https://csrc.nist.gov/glossary/term/Object_Identifier">Object Identifier (OID)</a>.</p>
    pub cert_policy_id: ::std::string::String,
    /// <p>Modifies the given <code>CertPolicyId</code> with a qualifier. Amazon Web Services Private CA supports the certification practice statement (CPS) qualifier.</p>
    pub policy_qualifiers: ::std::option::Option<::std::vec::Vec<crate::types::PolicyQualifierInfo>>,
}
impl PolicyInformation {
    /// <p>Specifies the object identifier (OID) of the certificate policy under which the certificate was issued. For more information, see NIST's definition of <a href="https://csrc.nist.gov/glossary/term/Object_Identifier">Object Identifier (OID)</a>.</p>
    pub fn cert_policy_id(&self) -> &str {
        use std::ops::Deref;
        self.cert_policy_id.deref()
    }
    /// <p>Modifies the given <code>CertPolicyId</code> with a qualifier. Amazon Web Services Private CA supports the certification practice statement (CPS) qualifier.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.policy_qualifiers.is_none()`.
    pub fn policy_qualifiers(&self) -> &[crate::types::PolicyQualifierInfo] {
        self.policy_qualifiers.as_deref().unwrap_or_default()
    }
}
impl PolicyInformation {
    /// Creates a new builder-style object to manufacture [`PolicyInformation`](crate::types::PolicyInformation).
    pub fn builder() -> crate::types::builders::PolicyInformationBuilder {
        crate::types::builders::PolicyInformationBuilder::default()
    }
}

/// A builder for [`PolicyInformation`](crate::types::PolicyInformation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PolicyInformationBuilder {
    pub(crate) cert_policy_id: ::std::option::Option<::std::string::String>,
    pub(crate) policy_qualifiers: ::std::option::Option<::std::vec::Vec<crate::types::PolicyQualifierInfo>>,
}
impl PolicyInformationBuilder {
    /// <p>Specifies the object identifier (OID) of the certificate policy under which the certificate was issued. For more information, see NIST's definition of <a href="https://csrc.nist.gov/glossary/term/Object_Identifier">Object Identifier (OID)</a>.</p>
    /// This field is required.
    pub fn cert_policy_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cert_policy_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the object identifier (OID) of the certificate policy under which the certificate was issued. For more information, see NIST's definition of <a href="https://csrc.nist.gov/glossary/term/Object_Identifier">Object Identifier (OID)</a>.</p>
    pub fn set_cert_policy_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cert_policy_id = input;
        self
    }
    /// <p>Specifies the object identifier (OID) of the certificate policy under which the certificate was issued. For more information, see NIST's definition of <a href="https://csrc.nist.gov/glossary/term/Object_Identifier">Object Identifier (OID)</a>.</p>
    pub fn get_cert_policy_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.cert_policy_id
    }
    /// Appends an item to `policy_qualifiers`.
    ///
    /// To override the contents of this collection use [`set_policy_qualifiers`](Self::set_policy_qualifiers).
    ///
    /// <p>Modifies the given <code>CertPolicyId</code> with a qualifier. Amazon Web Services Private CA supports the certification practice statement (CPS) qualifier.</p>
    pub fn policy_qualifiers(mut self, input: crate::types::PolicyQualifierInfo) -> Self {
        let mut v = self.policy_qualifiers.unwrap_or_default();
        v.push(input);
        self.policy_qualifiers = ::std::option::Option::Some(v);
        self
    }
    /// <p>Modifies the given <code>CertPolicyId</code> with a qualifier. Amazon Web Services Private CA supports the certification practice statement (CPS) qualifier.</p>
    pub fn set_policy_qualifiers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PolicyQualifierInfo>>) -> Self {
        self.policy_qualifiers = input;
        self
    }
    /// <p>Modifies the given <code>CertPolicyId</code> with a qualifier. Amazon Web Services Private CA supports the certification practice statement (CPS) qualifier.</p>
    pub fn get_policy_qualifiers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PolicyQualifierInfo>> {
        &self.policy_qualifiers
    }
    /// Consumes the builder and constructs a [`PolicyInformation`](crate::types::PolicyInformation).
    /// This method will fail if any of the following fields are not set:
    /// - [`cert_policy_id`](crate::types::builders::PolicyInformationBuilder::cert_policy_id)
    pub fn build(self) -> ::std::result::Result<crate::types::PolicyInformation, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PolicyInformation {
            cert_policy_id: self.cert_policy_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "cert_policy_id",
                    "cert_policy_id was not specified but it is required when building PolicyInformation",
                )
            })?,
            policy_qualifiers: self.policy_qualifiers,
        })
    }
}
