// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines one or more purposes for which the key contained in the certificate can be used. Default value for each option is false.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct KeyUsage {
    /// <p> Key can be used for digital signing.</p>
    #[doc(hidden)]
    pub digital_signature: bool,
    /// <p>Key can be used for non-repudiation.</p>
    #[doc(hidden)]
    pub non_repudiation: bool,
    /// <p>Key can be used to encipher data.</p>
    #[doc(hidden)]
    pub key_encipherment: bool,
    /// <p>Key can be used to decipher data.</p>
    #[doc(hidden)]
    pub data_encipherment: bool,
    /// <p>Key can be used in a key-agreement protocol.</p>
    #[doc(hidden)]
    pub key_agreement: bool,
    /// <p>Key can be used to sign certificates.</p>
    #[doc(hidden)]
    pub key_cert_sign: bool,
    /// <p>Key can be used to sign CRLs.</p>
    #[doc(hidden)]
    pub crl_sign: bool,
    /// <p>Key can be used only to encipher data.</p>
    #[doc(hidden)]
    pub encipher_only: bool,
    /// <p>Key can be used only to decipher data.</p>
    #[doc(hidden)]
    pub decipher_only: bool,
}
impl KeyUsage {
    /// <p> Key can be used for digital signing.</p>
    pub fn digital_signature(&self) -> bool {
        self.digital_signature
    }
    /// <p>Key can be used for non-repudiation.</p>
    pub fn non_repudiation(&self) -> bool {
        self.non_repudiation
    }
    /// <p>Key can be used to encipher data.</p>
    pub fn key_encipherment(&self) -> bool {
        self.key_encipherment
    }
    /// <p>Key can be used to decipher data.</p>
    pub fn data_encipherment(&self) -> bool {
        self.data_encipherment
    }
    /// <p>Key can be used in a key-agreement protocol.</p>
    pub fn key_agreement(&self) -> bool {
        self.key_agreement
    }
    /// <p>Key can be used to sign certificates.</p>
    pub fn key_cert_sign(&self) -> bool {
        self.key_cert_sign
    }
    /// <p>Key can be used to sign CRLs.</p>
    pub fn crl_sign(&self) -> bool {
        self.crl_sign
    }
    /// <p>Key can be used only to encipher data.</p>
    pub fn encipher_only(&self) -> bool {
        self.encipher_only
    }
    /// <p>Key can be used only to decipher data.</p>
    pub fn decipher_only(&self) -> bool {
        self.decipher_only
    }
}
impl KeyUsage {
    /// Creates a new builder-style object to manufacture [`KeyUsage`](crate::types::KeyUsage).
    pub fn builder() -> crate::types::builders::KeyUsageBuilder {
        crate::types::builders::KeyUsageBuilder::default()
    }
}

/// A builder for [`KeyUsage`](crate::types::KeyUsage).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct KeyUsageBuilder {
    pub(crate) digital_signature: std::option::Option<bool>,
    pub(crate) non_repudiation: std::option::Option<bool>,
    pub(crate) key_encipherment: std::option::Option<bool>,
    pub(crate) data_encipherment: std::option::Option<bool>,
    pub(crate) key_agreement: std::option::Option<bool>,
    pub(crate) key_cert_sign: std::option::Option<bool>,
    pub(crate) crl_sign: std::option::Option<bool>,
    pub(crate) encipher_only: std::option::Option<bool>,
    pub(crate) decipher_only: std::option::Option<bool>,
}
impl KeyUsageBuilder {
    /// <p> Key can be used for digital signing.</p>
    pub fn digital_signature(mut self, input: bool) -> Self {
        self.digital_signature = Some(input);
        self
    }
    /// <p> Key can be used for digital signing.</p>
    pub fn set_digital_signature(mut self, input: std::option::Option<bool>) -> Self {
        self.digital_signature = input;
        self
    }
    /// <p>Key can be used for non-repudiation.</p>
    pub fn non_repudiation(mut self, input: bool) -> Self {
        self.non_repudiation = Some(input);
        self
    }
    /// <p>Key can be used for non-repudiation.</p>
    pub fn set_non_repudiation(mut self, input: std::option::Option<bool>) -> Self {
        self.non_repudiation = input;
        self
    }
    /// <p>Key can be used to encipher data.</p>
    pub fn key_encipherment(mut self, input: bool) -> Self {
        self.key_encipherment = Some(input);
        self
    }
    /// <p>Key can be used to encipher data.</p>
    pub fn set_key_encipherment(mut self, input: std::option::Option<bool>) -> Self {
        self.key_encipherment = input;
        self
    }
    /// <p>Key can be used to decipher data.</p>
    pub fn data_encipherment(mut self, input: bool) -> Self {
        self.data_encipherment = Some(input);
        self
    }
    /// <p>Key can be used to decipher data.</p>
    pub fn set_data_encipherment(mut self, input: std::option::Option<bool>) -> Self {
        self.data_encipherment = input;
        self
    }
    /// <p>Key can be used in a key-agreement protocol.</p>
    pub fn key_agreement(mut self, input: bool) -> Self {
        self.key_agreement = Some(input);
        self
    }
    /// <p>Key can be used in a key-agreement protocol.</p>
    pub fn set_key_agreement(mut self, input: std::option::Option<bool>) -> Self {
        self.key_agreement = input;
        self
    }
    /// <p>Key can be used to sign certificates.</p>
    pub fn key_cert_sign(mut self, input: bool) -> Self {
        self.key_cert_sign = Some(input);
        self
    }
    /// <p>Key can be used to sign certificates.</p>
    pub fn set_key_cert_sign(mut self, input: std::option::Option<bool>) -> Self {
        self.key_cert_sign = input;
        self
    }
    /// <p>Key can be used to sign CRLs.</p>
    pub fn crl_sign(mut self, input: bool) -> Self {
        self.crl_sign = Some(input);
        self
    }
    /// <p>Key can be used to sign CRLs.</p>
    pub fn set_crl_sign(mut self, input: std::option::Option<bool>) -> Self {
        self.crl_sign = input;
        self
    }
    /// <p>Key can be used only to encipher data.</p>
    pub fn encipher_only(mut self, input: bool) -> Self {
        self.encipher_only = Some(input);
        self
    }
    /// <p>Key can be used only to encipher data.</p>
    pub fn set_encipher_only(mut self, input: std::option::Option<bool>) -> Self {
        self.encipher_only = input;
        self
    }
    /// <p>Key can be used only to decipher data.</p>
    pub fn decipher_only(mut self, input: bool) -> Self {
        self.decipher_only = Some(input);
        self
    }
    /// <p>Key can be used only to decipher data.</p>
    pub fn set_decipher_only(mut self, input: std::option::Option<bool>) -> Self {
        self.decipher_only = input;
        self
    }
    /// Consumes the builder and constructs a [`KeyUsage`](crate::types::KeyUsage).
    pub fn build(self) -> crate::types::KeyUsage {
        crate::types::KeyUsage {
            digital_signature: self.digital_signature.unwrap_or_default(),
            non_repudiation: self.non_repudiation.unwrap_or_default(),
            key_encipherment: self.key_encipherment.unwrap_or_default(),
            data_encipherment: self.data_encipherment.unwrap_or_default(),
            key_agreement: self.key_agreement.unwrap_or_default(),
            key_cert_sign: self.key_cert_sign.unwrap_or_default(),
            crl_sign: self.crl_sign.unwrap_or_default(),
            encipher_only: self.encipher_only.unwrap_or_default(),
            decipher_only: self.decipher_only.unwrap_or_default(),
        }
    }
}
