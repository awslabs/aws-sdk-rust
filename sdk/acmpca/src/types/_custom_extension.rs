// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
/// <p>Specifies the X.509 extension information for a certificate.</p>
/// <p>Extensions present in <code>CustomExtensions</code> follow the <code>ApiPassthrough</code> <a href="https://docs.aws.amazon.com/privateca/latest/userguide/UsingTemplates.html#template-order-of-operations">template rules</a>. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CustomExtension {
    /// <p></p>
    /// <p>Specifies the object identifier (OID) of the X.509 extension. For more information, see the <a href="https://oidref.com/2.5.29">Global OID reference database.</a> </p>
    pub object_identifier: ::std::string::String,
    /// <p></p>
    /// <p>Specifies the base64-encoded value of the X.509 extension.</p>
    pub value: ::std::string::String,
    /// <p></p>
    /// <p>Specifies the critical flag of the X.509 extension.</p>
    pub critical: ::std::option::Option<bool>,
}
impl CustomExtension {
    /// <p></p>
    /// <p>Specifies the object identifier (OID) of the X.509 extension. For more information, see the <a href="https://oidref.com/2.5.29">Global OID reference database.</a> </p>
    pub fn object_identifier(&self) -> &str {
        use std::ops::Deref;
        self.object_identifier.deref()
    }
    /// <p></p>
    /// <p>Specifies the base64-encoded value of the X.509 extension.</p>
    pub fn value(&self) -> &str {
        use std::ops::Deref;
        self.value.deref()
    }
    /// <p></p>
    /// <p>Specifies the critical flag of the X.509 extension.</p>
    pub fn critical(&self) -> ::std::option::Option<bool> {
        self.critical
    }
}
impl CustomExtension {
    /// Creates a new builder-style object to manufacture [`CustomExtension`](crate::types::CustomExtension).
    pub fn builder() -> crate::types::builders::CustomExtensionBuilder {
        crate::types::builders::CustomExtensionBuilder::default()
    }
}

/// A builder for [`CustomExtension`](crate::types::CustomExtension).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CustomExtensionBuilder {
    pub(crate) object_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
    pub(crate) critical: ::std::option::Option<bool>,
}
impl CustomExtensionBuilder {
    /// <p></p>
    /// <p>Specifies the object identifier (OID) of the X.509 extension. For more information, see the <a href="https://oidref.com/2.5.29">Global OID reference database.</a> </p>
    /// This field is required.
    pub fn object_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.object_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    /// <p>Specifies the object identifier (OID) of the X.509 extension. For more information, see the <a href="https://oidref.com/2.5.29">Global OID reference database.</a> </p>
    pub fn set_object_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.object_identifier = input;
        self
    }
    /// <p></p>
    /// <p>Specifies the object identifier (OID) of the X.509 extension. For more information, see the <a href="https://oidref.com/2.5.29">Global OID reference database.</a> </p>
    pub fn get_object_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.object_identifier
    }
    /// <p></p>
    /// <p>Specifies the base64-encoded value of the X.509 extension.</p>
    /// This field is required.
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    /// <p>Specifies the base64-encoded value of the X.509 extension.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p></p>
    /// <p>Specifies the base64-encoded value of the X.509 extension.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// <p></p>
    /// <p>Specifies the critical flag of the X.509 extension.</p>
    pub fn critical(mut self, input: bool) -> Self {
        self.critical = ::std::option::Option::Some(input);
        self
    }
    /// <p></p>
    /// <p>Specifies the critical flag of the X.509 extension.</p>
    pub fn set_critical(mut self, input: ::std::option::Option<bool>) -> Self {
        self.critical = input;
        self
    }
    /// <p></p>
    /// <p>Specifies the critical flag of the X.509 extension.</p>
    pub fn get_critical(&self) -> &::std::option::Option<bool> {
        &self.critical
    }
    /// Consumes the builder and constructs a [`CustomExtension`](crate::types::CustomExtension).
    /// This method will fail if any of the following fields are not set:
    /// - [`object_identifier`](crate::types::builders::CustomExtensionBuilder::object_identifier)
    /// - [`value`](crate::types::builders::CustomExtensionBuilder::value)
    pub fn build(self) -> ::std::result::Result<crate::types::CustomExtension, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CustomExtension {
            object_identifier: self.object_identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "object_identifier",
                    "object_identifier was not specified but it is required when building CustomExtension",
                )
            })?,
            value: self.value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "value",
                    "value was not specified but it is required when building CustomExtension",
                )
            })?,
            critical: self.critical,
        })
    }
}
