// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A card in an Q App that integrates with a third-party plugin or service.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct QPluginCard {
    /// <p>The unique identifier of the plugin card.</p>
    pub id: ::std::string::String,
    /// <p>The title or label of the plugin card.</p>
    pub title: ::std::string::String,
    /// <p>Any dependencies or requirements for the plugin card.</p>
    pub dependencies: ::std::vec::Vec<::std::string::String>,
    /// <p>The type of the card.</p>
    pub r#type: crate::types::CardType,
    /// <p>The prompt or instructions displayed for the plugin card.</p>
    pub prompt: ::std::string::String,
    /// <p>The type or category of the plugin used by the card.</p>
    pub plugin_type: crate::types::PluginType,
    /// <p>The unique identifier of the plugin used by the card.</p>
    pub plugin_id: ::std::string::String,
}
impl QPluginCard {
    /// <p>The unique identifier of the plugin card.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The title or label of the plugin card.</p>
    pub fn title(&self) -> &str {
        use std::ops::Deref;
        self.title.deref()
    }
    /// <p>Any dependencies or requirements for the plugin card.</p>
    pub fn dependencies(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.dependencies.deref()
    }
    /// <p>The type of the card.</p>
    pub fn r#type(&self) -> &crate::types::CardType {
        &self.r#type
    }
    /// <p>The prompt or instructions displayed for the plugin card.</p>
    pub fn prompt(&self) -> &str {
        use std::ops::Deref;
        self.prompt.deref()
    }
    /// <p>The type or category of the plugin used by the card.</p>
    pub fn plugin_type(&self) -> &crate::types::PluginType {
        &self.plugin_type
    }
    /// <p>The unique identifier of the plugin used by the card.</p>
    pub fn plugin_id(&self) -> &str {
        use std::ops::Deref;
        self.plugin_id.deref()
    }
}
impl QPluginCard {
    /// Creates a new builder-style object to manufacture [`QPluginCard`](crate::types::QPluginCard).
    pub fn builder() -> crate::types::builders::QPluginCardBuilder {
        crate::types::builders::QPluginCardBuilder::default()
    }
}

/// A builder for [`QPluginCard`](crate::types::QPluginCard).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct QPluginCardBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) dependencies: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) r#type: ::std::option::Option<crate::types::CardType>,
    pub(crate) prompt: ::std::option::Option<::std::string::String>,
    pub(crate) plugin_type: ::std::option::Option<crate::types::PluginType>,
    pub(crate) plugin_id: ::std::option::Option<::std::string::String>,
}
impl QPluginCardBuilder {
    /// <p>The unique identifier of the plugin card.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the plugin card.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier of the plugin card.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The title or label of the plugin card.</p>
    /// This field is required.
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The title or label of the plugin card.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The title or label of the plugin card.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// Appends an item to `dependencies`.
    ///
    /// To override the contents of this collection use [`set_dependencies`](Self::set_dependencies).
    ///
    /// <p>Any dependencies or requirements for the plugin card.</p>
    pub fn dependencies(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.dependencies.unwrap_or_default();
        v.push(input.into());
        self.dependencies = ::std::option::Option::Some(v);
        self
    }
    /// <p>Any dependencies or requirements for the plugin card.</p>
    pub fn set_dependencies(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.dependencies = input;
        self
    }
    /// <p>Any dependencies or requirements for the plugin card.</p>
    pub fn get_dependencies(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.dependencies
    }
    /// <p>The type of the card.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::CardType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the card.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::CardType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the card.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::CardType> {
        &self.r#type
    }
    /// <p>The prompt or instructions displayed for the plugin card.</p>
    /// This field is required.
    pub fn prompt(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.prompt = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The prompt or instructions displayed for the plugin card.</p>
    pub fn set_prompt(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.prompt = input;
        self
    }
    /// <p>The prompt or instructions displayed for the plugin card.</p>
    pub fn get_prompt(&self) -> &::std::option::Option<::std::string::String> {
        &self.prompt
    }
    /// <p>The type or category of the plugin used by the card.</p>
    /// This field is required.
    pub fn plugin_type(mut self, input: crate::types::PluginType) -> Self {
        self.plugin_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type or category of the plugin used by the card.</p>
    pub fn set_plugin_type(mut self, input: ::std::option::Option<crate::types::PluginType>) -> Self {
        self.plugin_type = input;
        self
    }
    /// <p>The type or category of the plugin used by the card.</p>
    pub fn get_plugin_type(&self) -> &::std::option::Option<crate::types::PluginType> {
        &self.plugin_type
    }
    /// <p>The unique identifier of the plugin used by the card.</p>
    /// This field is required.
    pub fn plugin_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.plugin_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the plugin used by the card.</p>
    pub fn set_plugin_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.plugin_id = input;
        self
    }
    /// <p>The unique identifier of the plugin used by the card.</p>
    pub fn get_plugin_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.plugin_id
    }
    /// Consumes the builder and constructs a [`QPluginCard`](crate::types::QPluginCard).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::QPluginCardBuilder::id)
    /// - [`title`](crate::types::builders::QPluginCardBuilder::title)
    /// - [`dependencies`](crate::types::builders::QPluginCardBuilder::dependencies)
    /// - [`r#type`](crate::types::builders::QPluginCardBuilder::type)
    /// - [`prompt`](crate::types::builders::QPluginCardBuilder::prompt)
    /// - [`plugin_type`](crate::types::builders::QPluginCardBuilder::plugin_type)
    /// - [`plugin_id`](crate::types::builders::QPluginCardBuilder::plugin_id)
    pub fn build(self) -> ::std::result::Result<crate::types::QPluginCard, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::QPluginCard {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building QPluginCard",
                )
            })?,
            title: self.title.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "title",
                    "title was not specified but it is required when building QPluginCard",
                )
            })?,
            dependencies: self.dependencies.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "dependencies",
                    "dependencies was not specified but it is required when building QPluginCard",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building QPluginCard",
                )
            })?,
            prompt: self.prompt.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "prompt",
                    "prompt was not specified but it is required when building QPluginCard",
                )
            })?,
            plugin_type: self.plugin_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "plugin_type",
                    "plugin_type was not specified but it is required when building QPluginCard",
                )
            })?,
            plugin_id: self.plugin_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "plugin_id",
                    "plugin_id was not specified but it is required when building QPluginCard",
                )
            })?,
        })
    }
}
