// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An Amazon Q App associated with a user, either owned by the user or favorited.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UserAppItem {
    /// <p>The unique identifier of the Q App.</p>
    pub app_id: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the Q App.</p>
    pub app_arn: ::std::string::String,
    /// <p>The title of the Q App.</p>
    pub title: ::std::string::String,
    /// <p>The description of the Q App.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The date and time the user's association with the Q App was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>A flag indicating whether the user can edit the Q App.</p>
    pub can_edit: ::std::option::Option<bool>,
    /// <p>The status of the user's association with the Q App.</p>
    pub status: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether the Q App has been verified.</p>
    pub is_verified: bool,
}
impl UserAppItem {
    /// <p>The unique identifier of the Q App.</p>
    pub fn app_id(&self) -> &str {
        use std::ops::Deref;
        self.app_id.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Q App.</p>
    pub fn app_arn(&self) -> &str {
        use std::ops::Deref;
        self.app_arn.deref()
    }
    /// <p>The title of the Q App.</p>
    pub fn title(&self) -> &str {
        use std::ops::Deref;
        self.title.deref()
    }
    /// <p>The description of the Q App.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The date and time the user's association with the Q App was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>A flag indicating whether the user can edit the Q App.</p>
    pub fn can_edit(&self) -> ::std::option::Option<bool> {
        self.can_edit
    }
    /// <p>The status of the user's association with the Q App.</p>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>Indicates whether the Q App has been verified.</p>
    pub fn is_verified(&self) -> bool {
        self.is_verified
    }
}
impl UserAppItem {
    /// Creates a new builder-style object to manufacture [`UserAppItem`](crate::types::UserAppItem).
    pub fn builder() -> crate::types::builders::UserAppItemBuilder {
        crate::types::builders::UserAppItemBuilder::default()
    }
}

/// A builder for [`UserAppItem`](crate::types::UserAppItem).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UserAppItemBuilder {
    pub(crate) app_id: ::std::option::Option<::std::string::String>,
    pub(crate) app_arn: ::std::option::Option<::std::string::String>,
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) can_edit: ::std::option::Option<bool>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) is_verified: ::std::option::Option<bool>,
}
impl UserAppItemBuilder {
    /// <p>The unique identifier of the Q App.</p>
    /// This field is required.
    pub fn app_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the Q App.</p>
    pub fn set_app_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_id = input;
        self
    }
    /// <p>The unique identifier of the Q App.</p>
    pub fn get_app_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_id
    }
    /// <p>The Amazon Resource Name (ARN) of the Q App.</p>
    /// This field is required.
    pub fn app_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Q App.</p>
    pub fn set_app_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Q App.</p>
    pub fn get_app_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_arn
    }
    /// <p>The title of the Q App.</p>
    /// This field is required.
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The title of the Q App.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The title of the Q App.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// <p>The description of the Q App.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the Q App.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the Q App.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The date and time the user's association with the Q App was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the user's association with the Q App was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time the user's association with the Q App was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>A flag indicating whether the user can edit the Q App.</p>
    pub fn can_edit(mut self, input: bool) -> Self {
        self.can_edit = ::std::option::Option::Some(input);
        self
    }
    /// <p>A flag indicating whether the user can edit the Q App.</p>
    pub fn set_can_edit(mut self, input: ::std::option::Option<bool>) -> Self {
        self.can_edit = input;
        self
    }
    /// <p>A flag indicating whether the user can edit the Q App.</p>
    pub fn get_can_edit(&self) -> &::std::option::Option<bool> {
        &self.can_edit
    }
    /// <p>The status of the user's association with the Q App.</p>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of the user's association with the Q App.</p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the user's association with the Q App.</p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>Indicates whether the Q App has been verified.</p>
    pub fn is_verified(mut self, input: bool) -> Self {
        self.is_verified = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the Q App has been verified.</p>
    pub fn set_is_verified(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_verified = input;
        self
    }
    /// <p>Indicates whether the Q App has been verified.</p>
    pub fn get_is_verified(&self) -> &::std::option::Option<bool> {
        &self.is_verified
    }
    /// Consumes the builder and constructs a [`UserAppItem`](crate::types::UserAppItem).
    /// This method will fail if any of the following fields are not set:
    /// - [`app_id`](crate::types::builders::UserAppItemBuilder::app_id)
    /// - [`app_arn`](crate::types::builders::UserAppItemBuilder::app_arn)
    /// - [`title`](crate::types::builders::UserAppItemBuilder::title)
    /// - [`created_at`](crate::types::builders::UserAppItemBuilder::created_at)
    pub fn build(self) -> ::std::result::Result<crate::types::UserAppItem, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::UserAppItem {
            app_id: self.app_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "app_id",
                    "app_id was not specified but it is required when building UserAppItem",
                )
            })?,
            app_arn: self.app_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "app_arn",
                    "app_arn was not specified but it is required when building UserAppItem",
                )
            })?,
            title: self.title.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "title",
                    "title was not specified but it is required when building UserAppItem",
                )
            })?,
            description: self.description,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building UserAppItem",
                )
            })?,
            can_edit: self.can_edit,
            status: self.status,
            is_verified: self.is_verified.unwrap_or_default(),
        })
    }
}
