// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A card in an Amazon Q App that allows the user to upload a file.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FileUploadCard {
    /// <p>The unique identifier of the file upload card.</p>
    pub id: ::std::string::String,
    /// <p>The title of the file upload card.</p>
    pub title: ::std::string::String,
    /// <p>Any dependencies or requirements for the file upload card.</p>
    pub dependencies: ::std::vec::Vec<::std::string::String>,
    /// <p>The type of the card.</p>
    pub r#type: crate::types::CardType,
    /// <p>The name of the file being uploaded.</p>
    pub filename: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the file associated with the card.</p>
    pub file_id: ::std::option::Option<::std::string::String>,
    /// <p>A flag indicating if the user can override the default file for the upload card.</p>
    pub allow_override: ::std::option::Option<bool>,
}
impl FileUploadCard {
    /// <p>The unique identifier of the file upload card.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The title of the file upload card.</p>
    pub fn title(&self) -> &str {
        use std::ops::Deref;
        self.title.deref()
    }
    /// <p>Any dependencies or requirements for the file upload card.</p>
    pub fn dependencies(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.dependencies.deref()
    }
    /// <p>The type of the card.</p>
    pub fn r#type(&self) -> &crate::types::CardType {
        &self.r#type
    }
    /// <p>The name of the file being uploaded.</p>
    pub fn filename(&self) -> ::std::option::Option<&str> {
        self.filename.as_deref()
    }
    /// <p>The unique identifier of the file associated with the card.</p>
    pub fn file_id(&self) -> ::std::option::Option<&str> {
        self.file_id.as_deref()
    }
    /// <p>A flag indicating if the user can override the default file for the upload card.</p>
    pub fn allow_override(&self) -> ::std::option::Option<bool> {
        self.allow_override
    }
}
impl FileUploadCard {
    /// Creates a new builder-style object to manufacture [`FileUploadCard`](crate::types::FileUploadCard).
    pub fn builder() -> crate::types::builders::FileUploadCardBuilder {
        crate::types::builders::FileUploadCardBuilder::default()
    }
}

/// A builder for [`FileUploadCard`](crate::types::FileUploadCard).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FileUploadCardBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) dependencies: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) r#type: ::std::option::Option<crate::types::CardType>,
    pub(crate) filename: ::std::option::Option<::std::string::String>,
    pub(crate) file_id: ::std::option::Option<::std::string::String>,
    pub(crate) allow_override: ::std::option::Option<bool>,
}
impl FileUploadCardBuilder {
    /// <p>The unique identifier of the file upload card.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the file upload card.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier of the file upload card.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The title of the file upload card.</p>
    /// This field is required.
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The title of the file upload card.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The title of the file upload card.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// Appends an item to `dependencies`.
    ///
    /// To override the contents of this collection use [`set_dependencies`](Self::set_dependencies).
    ///
    /// <p>Any dependencies or requirements for the file upload card.</p>
    pub fn dependencies(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.dependencies.unwrap_or_default();
        v.push(input.into());
        self.dependencies = ::std::option::Option::Some(v);
        self
    }
    /// <p>Any dependencies or requirements for the file upload card.</p>
    pub fn set_dependencies(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.dependencies = input;
        self
    }
    /// <p>Any dependencies or requirements for the file upload card.</p>
    pub fn get_dependencies(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.dependencies
    }
    /// <p>The type of the card.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::CardType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the card.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::CardType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the card.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::CardType> {
        &self.r#type
    }
    /// <p>The name of the file being uploaded.</p>
    pub fn filename(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.filename = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the file being uploaded.</p>
    pub fn set_filename(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.filename = input;
        self
    }
    /// <p>The name of the file being uploaded.</p>
    pub fn get_filename(&self) -> &::std::option::Option<::std::string::String> {
        &self.filename
    }
    /// <p>The unique identifier of the file associated with the card.</p>
    pub fn file_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.file_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the file associated with the card.</p>
    pub fn set_file_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.file_id = input;
        self
    }
    /// <p>The unique identifier of the file associated with the card.</p>
    pub fn get_file_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.file_id
    }
    /// <p>A flag indicating if the user can override the default file for the upload card.</p>
    pub fn allow_override(mut self, input: bool) -> Self {
        self.allow_override = ::std::option::Option::Some(input);
        self
    }
    /// <p>A flag indicating if the user can override the default file for the upload card.</p>
    pub fn set_allow_override(mut self, input: ::std::option::Option<bool>) -> Self {
        self.allow_override = input;
        self
    }
    /// <p>A flag indicating if the user can override the default file for the upload card.</p>
    pub fn get_allow_override(&self) -> &::std::option::Option<bool> {
        &self.allow_override
    }
    /// Consumes the builder and constructs a [`FileUploadCard`](crate::types::FileUploadCard).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::FileUploadCardBuilder::id)
    /// - [`title`](crate::types::builders::FileUploadCardBuilder::title)
    /// - [`dependencies`](crate::types::builders::FileUploadCardBuilder::dependencies)
    /// - [`r#type`](crate::types::builders::FileUploadCardBuilder::type)
    pub fn build(self) -> ::std::result::Result<crate::types::FileUploadCard, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FileUploadCard {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building FileUploadCard",
                )
            })?,
            title: self.title.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "title",
                    "title was not specified but it is required when building FileUploadCard",
                )
            })?,
            dependencies: self.dependencies.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "dependencies",
                    "dependencies was not specified but it is required when building FileUploadCard",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building FileUploadCard",
                )
            })?,
            filename: self.filename,
            file_id: self.file_id,
            allow_override: self.allow_override,
        })
    }
}
