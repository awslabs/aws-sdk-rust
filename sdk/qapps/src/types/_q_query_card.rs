// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A card in a Amazon Q App that generates a response based on the Amazon Q Business service.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct QQueryCard {
    /// <p>The unique identifier of the query card.</p>
    pub id: ::std::string::String,
    /// <p>The title or label of the query card.</p>
    pub title: ::std::string::String,
    /// <p>Any dependencies or requirements for the query card.</p>
    pub dependencies: ::std::vec::Vec<::std::string::String>,
    /// <p>The type of the card.</p>
    pub r#type: crate::types::CardType,
    /// <p>The prompt or instructions displayed for the query card.</p>
    pub prompt: ::std::string::String,
    /// <p>The source or type of output generated by the query card.</p>
    pub output_source: crate::types::CardOutputSource,
    /// <p>The Amazon Q Business filters applied in this query card when resolving data sources</p>
    pub attribute_filter: ::std::option::Option<crate::types::AttributeFilter>,
}
impl QQueryCard {
    /// <p>The unique identifier of the query card.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The title or label of the query card.</p>
    pub fn title(&self) -> &str {
        use std::ops::Deref;
        self.title.deref()
    }
    /// <p>Any dependencies or requirements for the query card.</p>
    pub fn dependencies(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.dependencies.deref()
    }
    /// <p>The type of the card.</p>
    pub fn r#type(&self) -> &crate::types::CardType {
        &self.r#type
    }
    /// <p>The prompt or instructions displayed for the query card.</p>
    pub fn prompt(&self) -> &str {
        use std::ops::Deref;
        self.prompt.deref()
    }
    /// <p>The source or type of output generated by the query card.</p>
    pub fn output_source(&self) -> &crate::types::CardOutputSource {
        &self.output_source
    }
    /// <p>The Amazon Q Business filters applied in this query card when resolving data sources</p>
    pub fn attribute_filter(&self) -> ::std::option::Option<&crate::types::AttributeFilter> {
        self.attribute_filter.as_ref()
    }
}
impl QQueryCard {
    /// Creates a new builder-style object to manufacture [`QQueryCard`](crate::types::QQueryCard).
    pub fn builder() -> crate::types::builders::QQueryCardBuilder {
        crate::types::builders::QQueryCardBuilder::default()
    }
}

/// A builder for [`QQueryCard`](crate::types::QQueryCard).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct QQueryCardBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) dependencies: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) r#type: ::std::option::Option<crate::types::CardType>,
    pub(crate) prompt: ::std::option::Option<::std::string::String>,
    pub(crate) output_source: ::std::option::Option<crate::types::CardOutputSource>,
    pub(crate) attribute_filter: ::std::option::Option<crate::types::AttributeFilter>,
}
impl QQueryCardBuilder {
    /// <p>The unique identifier of the query card.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the query card.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier of the query card.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The title or label of the query card.</p>
    /// This field is required.
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The title or label of the query card.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The title or label of the query card.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// Appends an item to `dependencies`.
    ///
    /// To override the contents of this collection use [`set_dependencies`](Self::set_dependencies).
    ///
    /// <p>Any dependencies or requirements for the query card.</p>
    pub fn dependencies(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.dependencies.unwrap_or_default();
        v.push(input.into());
        self.dependencies = ::std::option::Option::Some(v);
        self
    }
    /// <p>Any dependencies or requirements for the query card.</p>
    pub fn set_dependencies(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.dependencies = input;
        self
    }
    /// <p>Any dependencies or requirements for the query card.</p>
    pub fn get_dependencies(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.dependencies
    }
    /// <p>The type of the card.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::CardType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the card.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::CardType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the card.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::CardType> {
        &self.r#type
    }
    /// <p>The prompt or instructions displayed for the query card.</p>
    /// This field is required.
    pub fn prompt(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.prompt = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The prompt or instructions displayed for the query card.</p>
    pub fn set_prompt(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.prompt = input;
        self
    }
    /// <p>The prompt or instructions displayed for the query card.</p>
    pub fn get_prompt(&self) -> &::std::option::Option<::std::string::String> {
        &self.prompt
    }
    /// <p>The source or type of output generated by the query card.</p>
    /// This field is required.
    pub fn output_source(mut self, input: crate::types::CardOutputSource) -> Self {
        self.output_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source or type of output generated by the query card.</p>
    pub fn set_output_source(mut self, input: ::std::option::Option<crate::types::CardOutputSource>) -> Self {
        self.output_source = input;
        self
    }
    /// <p>The source or type of output generated by the query card.</p>
    pub fn get_output_source(&self) -> &::std::option::Option<crate::types::CardOutputSource> {
        &self.output_source
    }
    /// <p>The Amazon Q Business filters applied in this query card when resolving data sources</p>
    pub fn attribute_filter(mut self, input: crate::types::AttributeFilter) -> Self {
        self.attribute_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon Q Business filters applied in this query card when resolving data sources</p>
    pub fn set_attribute_filter(mut self, input: ::std::option::Option<crate::types::AttributeFilter>) -> Self {
        self.attribute_filter = input;
        self
    }
    /// <p>The Amazon Q Business filters applied in this query card when resolving data sources</p>
    pub fn get_attribute_filter(&self) -> &::std::option::Option<crate::types::AttributeFilter> {
        &self.attribute_filter
    }
    /// Consumes the builder and constructs a [`QQueryCard`](crate::types::QQueryCard).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::QQueryCardBuilder::id)
    /// - [`title`](crate::types::builders::QQueryCardBuilder::title)
    /// - [`dependencies`](crate::types::builders::QQueryCardBuilder::dependencies)
    /// - [`r#type`](crate::types::builders::QQueryCardBuilder::type)
    /// - [`prompt`](crate::types::builders::QQueryCardBuilder::prompt)
    /// - [`output_source`](crate::types::builders::QQueryCardBuilder::output_source)
    pub fn build(self) -> ::std::result::Result<crate::types::QQueryCard, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::QQueryCard {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building QQueryCard",
                )
            })?,
            title: self.title.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "title",
                    "title was not specified but it is required when building QQueryCard",
                )
            })?,
            dependencies: self.dependencies.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "dependencies",
                    "dependencies was not specified but it is required when building QQueryCard",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building QQueryCard",
                )
            })?,
            prompt: self.prompt.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "prompt",
                    "prompt was not specified but it is required when building QQueryCard",
                )
            })?,
            output_source: self.output_source.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "output_source",
                    "output_source was not specified but it is required when building QQueryCard",
                )
            })?,
            attribute_filter: self.attribute_filter,
        })
    }
}
