// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>The client is not authorized to perform the requested operation.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>The requested operation could not be completed due to a conflict with the current state of the resource.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>The requested operation could not be completed because the content exceeds the maximum allowed size.</p>
    ContentTooLargeException(crate::types::error::ContentTooLargeException),
    /// <p>An internal service error occurred while processing the request.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>The requested resource could not be found.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>The requested operation could not be completed because it would exceed the service's quota or limit.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The requested operation could not be completed because too many requests were sent at once. Wait a bit and try again later.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The client is not authenticated or authorized to perform the requested operation.</p>
    UnauthorizedException(crate::types::error::UnauthorizedException),
    /// <p>The input failed to satisfy the constraints specified by the service.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::ContentTooLargeException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::UnauthorizedException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::AccessDeniedException(inner) => inner.meta(),
            Self::ConflictException(inner) => inner.meta(),
            Self::ContentTooLargeException(inner) => inner.meta(),
            Self::InternalServerException(inner) => inner.meta(),
            Self::ResourceNotFoundException(inner) => inner.meta(),
            Self::ServiceQuotaExceededException(inner) => inner.meta(),
            Self::ThrottlingException(inner) => inner.meta(),
            Self::UnauthorizedException(inner) => inner.meta(),
            Self::ValidationException(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_library_item_review::AssociateLibraryItemReviewError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_library_item_review::AssociateLibraryItemReviewError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::associate_library_item_review::AssociateLibraryItemReviewError> for Error {
    fn from(err: crate::operation::associate_library_item_review::AssociateLibraryItemReviewError) -> Self {
        match err {
            crate::operation::associate_library_item_review::AssociateLibraryItemReviewError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::associate_library_item_review::AssociateLibraryItemReviewError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::associate_library_item_review::AssociateLibraryItemReviewError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::associate_library_item_review::AssociateLibraryItemReviewError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::associate_library_item_review::AssociateLibraryItemReviewError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::associate_library_item_review::AssociateLibraryItemReviewError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::associate_library_item_review::AssociateLibraryItemReviewError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::associate_library_item_review::AssociateLibraryItemReviewError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::associate_library_item_review::AssociateLibraryItemReviewError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_q_app_with_user::AssociateQAppWithUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_q_app_with_user::AssociateQAppWithUserError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::associate_q_app_with_user::AssociateQAppWithUserError> for Error {
    fn from(err: crate::operation::associate_q_app_with_user::AssociateQAppWithUserError) -> Self {
        match err {
            crate::operation::associate_q_app_with_user::AssociateQAppWithUserError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::associate_q_app_with_user::AssociateQAppWithUserError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::associate_q_app_with_user::AssociateQAppWithUserError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::associate_q_app_with_user::AssociateQAppWithUserError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::associate_q_app_with_user::AssociateQAppWithUserError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::associate_q_app_with_user::AssociateQAppWithUserError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::associate_q_app_with_user::AssociateQAppWithUserError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::associate_q_app_with_user::AssociateQAppWithUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_library_item::CreateLibraryItemError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_library_item::CreateLibraryItemError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_library_item::CreateLibraryItemError> for Error {
    fn from(err: crate::operation::create_library_item::CreateLibraryItemError) -> Self {
        match err {
            crate::operation::create_library_item::CreateLibraryItemError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_library_item::CreateLibraryItemError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_library_item::CreateLibraryItemError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_library_item::CreateLibraryItemError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_library_item::CreateLibraryItemError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_library_item::CreateLibraryItemError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_library_item::CreateLibraryItemError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_library_item::CreateLibraryItemError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_q_app::CreateQAppError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_q_app::CreateQAppError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_q_app::CreateQAppError> for Error {
    fn from(err: crate::operation::create_q_app::CreateQAppError) -> Self {
        match err {
            crate::operation::create_q_app::CreateQAppError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_q_app::CreateQAppError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_q_app::CreateQAppError::ContentTooLargeException(inner) => Error::ContentTooLargeException(inner),
            crate::operation::create_q_app::CreateQAppError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_q_app::CreateQAppError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_q_app::CreateQAppError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_q_app::CreateQAppError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_q_app::CreateQAppError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_q_app::CreateQAppError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_library_item::DeleteLibraryItemError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_library_item::DeleteLibraryItemError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_library_item::DeleteLibraryItemError> for Error {
    fn from(err: crate::operation::delete_library_item::DeleteLibraryItemError) -> Self {
        match err {
            crate::operation::delete_library_item::DeleteLibraryItemError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_library_item::DeleteLibraryItemError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_library_item::DeleteLibraryItemError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_library_item::DeleteLibraryItemError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::delete_library_item::DeleteLibraryItemError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_library_item::DeleteLibraryItemError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_library_item::DeleteLibraryItemError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_library_item::DeleteLibraryItemError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_q_app::DeleteQAppError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_q_app::DeleteQAppError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_q_app::DeleteQAppError> for Error {
    fn from(err: crate::operation::delete_q_app::DeleteQAppError) -> Self {
        match err {
            crate::operation::delete_q_app::DeleteQAppError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_q_app::DeleteQAppError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_q_app::DeleteQAppError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_q_app::DeleteQAppError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_q_app::DeleteQAppError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_q_app::DeleteQAppError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_q_app::DeleteQAppError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_library_item_review::DisassociateLibraryItemReviewError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_library_item_review::DisassociateLibraryItemReviewError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::disassociate_library_item_review::DisassociateLibraryItemReviewError> for Error {
    fn from(err: crate::operation::disassociate_library_item_review::DisassociateLibraryItemReviewError) -> Self {
        match err {
            crate::operation::disassociate_library_item_review::DisassociateLibraryItemReviewError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::disassociate_library_item_review::DisassociateLibraryItemReviewError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::disassociate_library_item_review::DisassociateLibraryItemReviewError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::disassociate_library_item_review::DisassociateLibraryItemReviewError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::disassociate_library_item_review::DisassociateLibraryItemReviewError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::disassociate_library_item_review::DisassociateLibraryItemReviewError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::disassociate_library_item_review::DisassociateLibraryItemReviewError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::disassociate_library_item_review::DisassociateLibraryItemReviewError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::disassociate_library_item_review::DisassociateLibraryItemReviewError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_q_app_from_user::DisassociateQAppFromUserError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_q_app_from_user::DisassociateQAppFromUserError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::disassociate_q_app_from_user::DisassociateQAppFromUserError> for Error {
    fn from(err: crate::operation::disassociate_q_app_from_user::DisassociateQAppFromUserError) -> Self {
        match err {
            crate::operation::disassociate_q_app_from_user::DisassociateQAppFromUserError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::disassociate_q_app_from_user::DisassociateQAppFromUserError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::disassociate_q_app_from_user::DisassociateQAppFromUserError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::disassociate_q_app_from_user::DisassociateQAppFromUserError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::disassociate_q_app_from_user::DisassociateQAppFromUserError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::disassociate_q_app_from_user::DisassociateQAppFromUserError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::disassociate_q_app_from_user::DisassociateQAppFromUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_library_item::GetLibraryItemError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_library_item::GetLibraryItemError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_library_item::GetLibraryItemError> for Error {
    fn from(err: crate::operation::get_library_item::GetLibraryItemError) -> Self {
        match err {
            crate::operation::get_library_item::GetLibraryItemError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_library_item::GetLibraryItemError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_library_item::GetLibraryItemError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_library_item::GetLibraryItemError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_library_item::GetLibraryItemError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_library_item::GetLibraryItemError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_library_item::GetLibraryItemError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_q_app::GetQAppError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_q_app::GetQAppError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_q_app::GetQAppError> for Error {
    fn from(err: crate::operation::get_q_app::GetQAppError) -> Self {
        match err {
            crate::operation::get_q_app::GetQAppError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_q_app::GetQAppError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_q_app::GetQAppError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_q_app::GetQAppError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_q_app::GetQAppError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_q_app::GetQAppError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_q_app::GetQAppError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_q_app_session::GetQAppSessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_q_app_session::GetQAppSessionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_q_app_session::GetQAppSessionError> for Error {
    fn from(err: crate::operation::get_q_app_session::GetQAppSessionError) -> Self {
        match err {
            crate::operation::get_q_app_session::GetQAppSessionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_q_app_session::GetQAppSessionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_q_app_session::GetQAppSessionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_q_app_session::GetQAppSessionError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::get_q_app_session::GetQAppSessionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_q_app_session::GetQAppSessionError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_q_app_session::GetQAppSessionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_q_app_session::GetQAppSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::import_document::ImportDocumentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::import_document::ImportDocumentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::import_document::ImportDocumentError> for Error {
    fn from(err: crate::operation::import_document::ImportDocumentError) -> Self {
        match err {
            crate::operation::import_document::ImportDocumentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::import_document::ImportDocumentError::ContentTooLargeException(inner) => Error::ContentTooLargeException(inner),
            crate::operation::import_document::ImportDocumentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::import_document::ImportDocumentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::import_document::ImportDocumentError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::import_document::ImportDocumentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::import_document::ImportDocumentError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::import_document::ImportDocumentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::import_document::ImportDocumentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_library_items::ListLibraryItemsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_library_items::ListLibraryItemsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_library_items::ListLibraryItemsError> for Error {
    fn from(err: crate::operation::list_library_items::ListLibraryItemsError) -> Self {
        match err {
            crate::operation::list_library_items::ListLibraryItemsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_library_items::ListLibraryItemsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_library_items::ListLibraryItemsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_library_items::ListLibraryItemsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_library_items::ListLibraryItemsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_library_items::ListLibraryItemsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_library_items::ListLibraryItemsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_q_apps::ListQAppsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_q_apps::ListQAppsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_q_apps::ListQAppsError> for Error {
    fn from(err: crate::operation::list_q_apps::ListQAppsError) -> Self {
        match err {
            crate::operation::list_q_apps::ListQAppsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_q_apps::ListQAppsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_q_apps::ListQAppsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_q_apps::ListQAppsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_q_apps::ListQAppsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_q_apps::ListQAppsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::predict_q_app::PredictQAppError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::predict_q_app::PredictQAppError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::predict_q_app::PredictQAppError> for Error {
    fn from(err: crate::operation::predict_q_app::PredictQAppError) -> Self {
        match err {
            crate::operation::predict_q_app::PredictQAppError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::predict_q_app::PredictQAppError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::predict_q_app::PredictQAppError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::predict_q_app::PredictQAppError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::predict_q_app::PredictQAppError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::predict_q_app::PredictQAppError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_q_app_session::StartQAppSessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_q_app_session::StartQAppSessionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_q_app_session::StartQAppSessionError> for Error {
    fn from(err: crate::operation::start_q_app_session::StartQAppSessionError) -> Self {
        match err {
            crate::operation::start_q_app_session::StartQAppSessionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_q_app_session::StartQAppSessionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::start_q_app_session::StartQAppSessionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::start_q_app_session::StartQAppSessionError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::start_q_app_session::StartQAppSessionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_q_app_session::StartQAppSessionError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::start_q_app_session::StartQAppSessionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_q_app_session::StartQAppSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_q_app_session::StopQAppSessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_q_app_session::StopQAppSessionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::stop_q_app_session::StopQAppSessionError> for Error {
    fn from(err: crate::operation::stop_q_app_session::StopQAppSessionError) -> Self {
        match err {
            crate::operation::stop_q_app_session::StopQAppSessionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::stop_q_app_session::StopQAppSessionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::stop_q_app_session::StopQAppSessionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::stop_q_app_session::StopQAppSessionError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::stop_q_app_session::StopQAppSessionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::stop_q_app_session::StopQAppSessionError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::stop_q_app_session::StopQAppSessionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::stop_q_app_session::StopQAppSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::tag_resource::TagResourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::untag_resource::UntagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_library_item::UpdateLibraryItemError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_library_item::UpdateLibraryItemError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_library_item::UpdateLibraryItemError> for Error {
    fn from(err: crate::operation::update_library_item::UpdateLibraryItemError) -> Self {
        match err {
            crate::operation::update_library_item::UpdateLibraryItemError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_library_item::UpdateLibraryItemError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_library_item::UpdateLibraryItemError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_library_item::UpdateLibraryItemError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_library_item::UpdateLibraryItemError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_library_item::UpdateLibraryItemError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_library_item::UpdateLibraryItemError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_library_item::UpdateLibraryItemError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_library_item_metadata::UpdateLibraryItemMetadataError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_library_item_metadata::UpdateLibraryItemMetadataError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_library_item_metadata::UpdateLibraryItemMetadataError> for Error {
    fn from(err: crate::operation::update_library_item_metadata::UpdateLibraryItemMetadataError) -> Self {
        match err {
            crate::operation::update_library_item_metadata::UpdateLibraryItemMetadataError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_library_item_metadata::UpdateLibraryItemMetadataError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_library_item_metadata::UpdateLibraryItemMetadataError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_library_item_metadata::UpdateLibraryItemMetadataError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_library_item_metadata::UpdateLibraryItemMetadataError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_library_item_metadata::UpdateLibraryItemMetadataError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::update_library_item_metadata::UpdateLibraryItemMetadataError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_library_item_metadata::UpdateLibraryItemMetadataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_q_app::UpdateQAppError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_q_app::UpdateQAppError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_q_app::UpdateQAppError> for Error {
    fn from(err: crate::operation::update_q_app::UpdateQAppError) -> Self {
        match err {
            crate::operation::update_q_app::UpdateQAppError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_q_app::UpdateQAppError::ContentTooLargeException(inner) => Error::ContentTooLargeException(inner),
            crate::operation::update_q_app::UpdateQAppError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_q_app::UpdateQAppError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_q_app::UpdateQAppError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_q_app::UpdateQAppError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_q_app::UpdateQAppError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_q_app::UpdateQAppError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_q_app_session::UpdateQAppSessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_q_app_session::UpdateQAppSessionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_q_app_session::UpdateQAppSessionError> for Error {
    fn from(err: crate::operation::update_q_app_session::UpdateQAppSessionError) -> Self {
        match err {
            crate::operation::update_q_app_session::UpdateQAppSessionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_q_app_session::UpdateQAppSessionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_q_app_session::UpdateQAppSessionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_q_app_session::UpdateQAppSessionError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_q_app_session::UpdateQAppSessionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_q_app_session::UpdateQAppSessionError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_q_app_session::UpdateQAppSessionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_q_app_session::UpdateQAppSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::ContentTooLargeException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::UnauthorizedException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::ContentTooLargeException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::UnauthorizedException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}
