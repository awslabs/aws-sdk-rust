// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn type_erase_result<O, E>(
    result: ::std::result::Result<O, E>,
) -> ::std::result::Result<
    ::aws_smithy_runtime_api::client::interceptors::context::Output,
    ::aws_smithy_runtime_api::client::orchestrator::OrchestratorError<::aws_smithy_runtime_api::client::interceptors::context::Error>,
>
where
    O: ::std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
    E: ::std::error::Error + std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
{
    result
        .map(|output| ::aws_smithy_runtime_api::client::interceptors::context::Output::erase(output))
        .map_err(|error| ::aws_smithy_runtime_api::client::interceptors::context::Error::erase(error))
        .map_err(::std::convert::Into::into)
}

pub fn parse_http_error_metadata(
    _response_status: u16,
    response_headers: &::aws_smithy_runtime_api::http::Headers,
    response_body: &[u8],
) -> Result<::aws_smithy_types::error::metadata::Builder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    crate::json_errors::parse_error_metadata(response_body, response_headers)
}

pub(crate) mod shape_associate_library_item_review;

pub(crate) mod shape_associate_q_app_with_user;

pub(crate) mod shape_create_library_item;

pub(crate) mod shape_create_q_app;

pub(crate) mod shape_delete_library_item;

pub(crate) mod shape_delete_q_app;

pub(crate) mod shape_disassociate_library_item_review;

pub(crate) mod shape_disassociate_q_app_from_user;

pub(crate) mod shape_get_library_item;

pub(crate) mod shape_get_q_app;

pub(crate) mod shape_get_q_app_session;

pub(crate) mod shape_import_document;

pub(crate) mod shape_list_library_items;

pub(crate) mod shape_list_q_apps;

pub(crate) mod shape_list_tags_for_resource;

pub(crate) mod shape_predict_q_app;

pub(crate) mod shape_start_q_app_session;

pub(crate) mod shape_stop_q_app_session;

pub(crate) mod shape_tag_resource;

pub(crate) mod shape_untag_resource;

pub(crate) mod shape_update_library_item;

pub(crate) mod shape_update_library_item_metadata;

pub(crate) mod shape_update_q_app;

pub(crate) mod shape_update_q_app_session;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_access_denied_exception;

pub(crate) mod shape_associate_library_item_review_input;

pub(crate) mod shape_associate_q_app_with_user_input;

pub(crate) mod shape_conflict_exception;

pub(crate) mod shape_content_too_large_exception;

pub(crate) mod shape_create_library_item_input;

pub(crate) mod shape_create_q_app_input;

pub(crate) mod shape_delete_library_item_input;

pub(crate) mod shape_delete_q_app_input;

pub(crate) mod shape_disassociate_library_item_review_input;

pub(crate) mod shape_disassociate_q_app_from_user_input;

pub(crate) mod shape_import_document_input;

pub(crate) mod shape_internal_server_exception;

pub(crate) mod shape_predict_q_app_input;

pub(crate) mod shape_resource_not_found_exception;

pub(crate) mod shape_service_quota_exceeded_exception;

pub(crate) mod shape_start_q_app_session_input;

pub(crate) mod shape_stop_q_app_session_input;

pub(crate) mod shape_tag_resource_input;

pub(crate) mod shape_throttling_exception;

pub(crate) mod shape_unauthorized_exception;

pub(crate) mod shape_update_library_item_input;

pub(crate) mod shape_update_library_item_metadata_input;

pub(crate) mod shape_update_q_app_input;

pub(crate) mod shape_update_q_app_session_input;

pub(crate) mod shape_validation_exception;

pub(crate) mod shape_app_definition;

pub(crate) mod shape_app_definition_input;

pub(crate) mod shape_app_required_capabilities;

pub(crate) mod shape_card_status_map;

pub(crate) mod shape_card_value;

pub(crate) mod shape_category_list;

pub(crate) mod shape_library_item_list;

pub(crate) mod shape_predict_app_definition;

pub(crate) mod shape_predict_q_app_input_options;

pub(crate) mod shape_tags;

pub(crate) mod shape_user_apps_list;

pub(crate) mod shape_card_input;

pub(crate) mod shape_card_model_list;

pub(crate) mod shape_card_status;

pub(crate) mod shape_category;

pub(crate) mod shape_conversation_message;

pub(crate) mod shape_library_item_member;

pub(crate) mod shape_user_app_item;

pub(crate) mod shape_card;

pub(crate) mod shape_card_list;

pub(crate) mod shape_file_upload_card_input;

pub(crate) mod shape_q_plugin_card_input;

pub(crate) mod shape_q_query_card_input;

pub(crate) mod shape_text_input_card_input;

pub(crate) mod shape_attribute_filter;

pub(crate) mod shape_file_upload_card;

pub(crate) mod shape_q_plugin_card;

pub(crate) mod shape_q_query_card;

pub(crate) mod shape_text_input_card;

pub(crate) mod shape_dependency_list;

pub(crate) mod shape_document_attribute;

pub(crate) mod shape_attribute_filters;

pub(crate) mod shape_document_attribute_value;

pub(crate) mod shape_document_attribute_string_list_value;
