// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The memory information of an Elastic Inference Accelerator type. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MemoryInfo {
    /// <p> The size in mebibytes of the Elastic Inference Accelerator type. </p>
    pub size_in_mib: i32,
}
impl MemoryInfo {
    /// <p> The size in mebibytes of the Elastic Inference Accelerator type. </p>
    pub fn size_in_mib(&self) -> i32 {
        self.size_in_mib
    }
}
impl MemoryInfo {
    /// Creates a new builder-style object to manufacture [`MemoryInfo`](crate::types::MemoryInfo).
    pub fn builder() -> crate::types::builders::MemoryInfoBuilder {
        crate::types::builders::MemoryInfoBuilder::default()
    }
}

/// A builder for [`MemoryInfo`](crate::types::MemoryInfo).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MemoryInfoBuilder {
    pub(crate) size_in_mib: ::std::option::Option<i32>,
}
impl MemoryInfoBuilder {
    /// <p> The size in mebibytes of the Elastic Inference Accelerator type. </p>
    pub fn size_in_mib(mut self, input: i32) -> Self {
        self.size_in_mib = ::std::option::Option::Some(input);
        self
    }
    /// <p> The size in mebibytes of the Elastic Inference Accelerator type. </p>
    pub fn set_size_in_mib(mut self, input: ::std::option::Option<i32>) -> Self {
        self.size_in_mib = input;
        self
    }
    /// <p> The size in mebibytes of the Elastic Inference Accelerator type. </p>
    pub fn get_size_in_mib(&self) -> &::std::option::Option<i32> {
        &self.size_in_mib
    }
    /// Consumes the builder and constructs a [`MemoryInfo`](crate::types::MemoryInfo).
    pub fn build(self) -> crate::types::MemoryInfo {
        crate::types::MemoryInfo {
            size_in_mib: self.size_in_mib.unwrap_or_default(),
        }
    }
}
