// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The details of an Elastic Inference Accelerator type. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AcceleratorType {
    /// <p> The name of the Elastic Inference Accelerator type. </p>
    pub accelerator_type_name: ::std::option::Option<::std::string::String>,
    /// <p> The memory information of the Elastic Inference Accelerator type. </p>
    pub memory_info: ::std::option::Option<crate::types::MemoryInfo>,
    /// <p> The throughput information of the Elastic Inference Accelerator type. </p>
    pub throughput_info: ::std::option::Option<::std::vec::Vec<crate::types::KeyValuePair>>,
}
impl AcceleratorType {
    /// <p> The name of the Elastic Inference Accelerator type. </p>
    pub fn accelerator_type_name(&self) -> ::std::option::Option<&str> {
        self.accelerator_type_name.as_deref()
    }
    /// <p> The memory information of the Elastic Inference Accelerator type. </p>
    pub fn memory_info(&self) -> ::std::option::Option<&crate::types::MemoryInfo> {
        self.memory_info.as_ref()
    }
    /// <p> The throughput information of the Elastic Inference Accelerator type. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.throughput_info.is_none()`.
    pub fn throughput_info(&self) -> &[crate::types::KeyValuePair] {
        self.throughput_info.as_deref().unwrap_or_default()
    }
}
impl AcceleratorType {
    /// Creates a new builder-style object to manufacture [`AcceleratorType`](crate::types::AcceleratorType).
    pub fn builder() -> crate::types::builders::AcceleratorTypeBuilder {
        crate::types::builders::AcceleratorTypeBuilder::default()
    }
}

/// A builder for [`AcceleratorType`](crate::types::AcceleratorType).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AcceleratorTypeBuilder {
    pub(crate) accelerator_type_name: ::std::option::Option<::std::string::String>,
    pub(crate) memory_info: ::std::option::Option<crate::types::MemoryInfo>,
    pub(crate) throughput_info: ::std::option::Option<::std::vec::Vec<crate::types::KeyValuePair>>,
}
impl AcceleratorTypeBuilder {
    /// <p> The name of the Elastic Inference Accelerator type. </p>
    pub fn accelerator_type_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.accelerator_type_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The name of the Elastic Inference Accelerator type. </p>
    pub fn set_accelerator_type_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.accelerator_type_name = input;
        self
    }
    /// <p> The name of the Elastic Inference Accelerator type. </p>
    pub fn get_accelerator_type_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.accelerator_type_name
    }
    /// <p> The memory information of the Elastic Inference Accelerator type. </p>
    pub fn memory_info(mut self, input: crate::types::MemoryInfo) -> Self {
        self.memory_info = ::std::option::Option::Some(input);
        self
    }
    /// <p> The memory information of the Elastic Inference Accelerator type. </p>
    pub fn set_memory_info(mut self, input: ::std::option::Option<crate::types::MemoryInfo>) -> Self {
        self.memory_info = input;
        self
    }
    /// <p> The memory information of the Elastic Inference Accelerator type. </p>
    pub fn get_memory_info(&self) -> &::std::option::Option<crate::types::MemoryInfo> {
        &self.memory_info
    }
    /// Appends an item to `throughput_info`.
    ///
    /// To override the contents of this collection use [`set_throughput_info`](Self::set_throughput_info).
    ///
    /// <p> The throughput information of the Elastic Inference Accelerator type. </p>
    pub fn throughput_info(mut self, input: crate::types::KeyValuePair) -> Self {
        let mut v = self.throughput_info.unwrap_or_default();
        v.push(input);
        self.throughput_info = ::std::option::Option::Some(v);
        self
    }
    /// <p> The throughput information of the Elastic Inference Accelerator type. </p>
    pub fn set_throughput_info(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::KeyValuePair>>) -> Self {
        self.throughput_info = input;
        self
    }
    /// <p> The throughput information of the Elastic Inference Accelerator type. </p>
    pub fn get_throughput_info(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::KeyValuePair>> {
        &self.throughput_info
    }
    /// Consumes the builder and constructs a [`AcceleratorType`](crate::types::AcceleratorType).
    pub fn build(self) -> crate::types::AcceleratorType {
        crate::types::AcceleratorType {
            accelerator_type_name: self.accelerator_type_name,
            memory_info: self.memory_info,
            throughput_info: self.throughput_info,
        }
    }
}
