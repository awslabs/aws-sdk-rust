// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The offering for an Elastic Inference Accelerator type. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AcceleratorTypeOffering {
    /// <p> The name of the Elastic Inference Accelerator type. </p>
    #[doc(hidden)]
    pub accelerator_type: std::option::Option<std::string::String>,
    /// <p> The location type for the offering. It can assume the following values: region: defines that the offering is at the regional level. availability-zone: defines that the offering is at the availability zone level. availability-zone-id: defines that the offering is at the availability zone level, defined by the availability zone id. </p>
    #[doc(hidden)]
    pub location_type: std::option::Option<crate::types::LocationType>,
    /// <p> The location for the offering. It will return either the region, availability zone or availability zone id for the offering depending on the locationType value. </p>
    #[doc(hidden)]
    pub location: std::option::Option<std::string::String>,
}
impl AcceleratorTypeOffering {
    /// <p> The name of the Elastic Inference Accelerator type. </p>
    pub fn accelerator_type(&self) -> std::option::Option<&str> {
        self.accelerator_type.as_deref()
    }
    /// <p> The location type for the offering. It can assume the following values: region: defines that the offering is at the regional level. availability-zone: defines that the offering is at the availability zone level. availability-zone-id: defines that the offering is at the availability zone level, defined by the availability zone id. </p>
    pub fn location_type(&self) -> std::option::Option<&crate::types::LocationType> {
        self.location_type.as_ref()
    }
    /// <p> The location for the offering. It will return either the region, availability zone or availability zone id for the offering depending on the locationType value. </p>
    pub fn location(&self) -> std::option::Option<&str> {
        self.location.as_deref()
    }
}
impl AcceleratorTypeOffering {
    /// Creates a new builder-style object to manufacture [`AcceleratorTypeOffering`](crate::types::AcceleratorTypeOffering).
    pub fn builder() -> crate::types::builders::AcceleratorTypeOfferingBuilder {
        crate::types::builders::AcceleratorTypeOfferingBuilder::default()
    }
}

/// A builder for [`AcceleratorTypeOffering`](crate::types::AcceleratorTypeOffering).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AcceleratorTypeOfferingBuilder {
    pub(crate) accelerator_type: std::option::Option<std::string::String>,
    pub(crate) location_type: std::option::Option<crate::types::LocationType>,
    pub(crate) location: std::option::Option<std::string::String>,
}
impl AcceleratorTypeOfferingBuilder {
    /// <p> The name of the Elastic Inference Accelerator type. </p>
    pub fn accelerator_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.accelerator_type = Some(input.into());
        self
    }
    /// <p> The name of the Elastic Inference Accelerator type. </p>
    pub fn set_accelerator_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.accelerator_type = input;
        self
    }
    /// <p> The location type for the offering. It can assume the following values: region: defines that the offering is at the regional level. availability-zone: defines that the offering is at the availability zone level. availability-zone-id: defines that the offering is at the availability zone level, defined by the availability zone id. </p>
    pub fn location_type(mut self, input: crate::types::LocationType) -> Self {
        self.location_type = Some(input);
        self
    }
    /// <p> The location type for the offering. It can assume the following values: region: defines that the offering is at the regional level. availability-zone: defines that the offering is at the availability zone level. availability-zone-id: defines that the offering is at the availability zone level, defined by the availability zone id. </p>
    pub fn set_location_type(
        mut self,
        input: std::option::Option<crate::types::LocationType>,
    ) -> Self {
        self.location_type = input;
        self
    }
    /// <p> The location for the offering. It will return either the region, availability zone or availability zone id for the offering depending on the locationType value. </p>
    pub fn location(mut self, input: impl Into<std::string::String>) -> Self {
        self.location = Some(input.into());
        self
    }
    /// <p> The location for the offering. It will return either the region, availability zone or availability zone id for the offering depending on the locationType value. </p>
    pub fn set_location(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.location = input;
        self
    }
    /// Consumes the builder and constructs a [`AcceleratorTypeOffering`](crate::types::AcceleratorTypeOffering).
    pub fn build(self) -> crate::types::AcceleratorTypeOffering {
        crate::types::AcceleratorTypeOffering {
            accelerator_type: self.accelerator_type,
            location_type: self.location_type,
            location: self.location,
        }
    }
}
