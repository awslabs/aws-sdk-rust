// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ImportBackendStorage`](crate::client::fluent_builders::ImportBackendStorage) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::ImportBackendStorage::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::ImportBackendStorage::set_app_id): <p>The app ID.</p>
    ///   - [`backend_environment_name(impl Into<String>)`](crate::client::fluent_builders::ImportBackendStorage::backend_environment_name) / [`set_backend_environment_name(Option<String>)`](crate::client::fluent_builders::ImportBackendStorage::set_backend_environment_name): <p>The name of the backend environment.</p>
    ///   - [`bucket_name(impl Into<String>)`](crate::client::fluent_builders::ImportBackendStorage::bucket_name) / [`set_bucket_name(Option<String>)`](crate::client::fluent_builders::ImportBackendStorage::set_bucket_name): <p>The name of the S3 bucket.</p>
    ///   - [`service_name(ServiceName)`](crate::client::fluent_builders::ImportBackendStorage::service_name) / [`set_service_name(Option<ServiceName>)`](crate::client::fluent_builders::ImportBackendStorage::set_service_name): <p>The name of the storage service.</p>
    /// - On success, responds with [`ImportBackendStorageOutput`](crate::output::ImportBackendStorageOutput) with field(s):
    ///   - [`app_id(Option<String>)`](crate::output::ImportBackendStorageOutput::app_id): <p>The app ID.</p>
    ///   - [`backend_environment_name(Option<String>)`](crate::output::ImportBackendStorageOutput::backend_environment_name): <p>The name of the backend environment.</p>
    ///   - [`job_id(Option<String>)`](crate::output::ImportBackendStorageOutput::job_id): <p>The ID for the job.</p>
    ///   - [`status(Option<String>)`](crate::output::ImportBackendStorageOutput::status): <p>The current status of the request.</p>
    /// - On failure, responds with [`SdkError<ImportBackendStorageError>`](crate::error::ImportBackendStorageError)
    pub fn import_backend_storage(&self) -> crate::client::fluent_builders::ImportBackendStorage {
        crate::client::fluent_builders::ImportBackendStorage::new(self.handle.clone())
    }
}
