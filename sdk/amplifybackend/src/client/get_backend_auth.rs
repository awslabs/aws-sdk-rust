// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetBackendAuth`](crate::client::fluent_builders::GetBackendAuth) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::GetBackendAuth::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::GetBackendAuth::set_app_id): <p>The app ID.</p>
    ///   - [`backend_environment_name(impl Into<String>)`](crate::client::fluent_builders::GetBackendAuth::backend_environment_name) / [`set_backend_environment_name(Option<String>)`](crate::client::fluent_builders::GetBackendAuth::set_backend_environment_name): <p>The name of the backend environment.</p>
    ///   - [`resource_name(impl Into<String>)`](crate::client::fluent_builders::GetBackendAuth::resource_name) / [`set_resource_name(Option<String>)`](crate::client::fluent_builders::GetBackendAuth::set_resource_name): <p>The name of this resource.</p>
    /// - On success, responds with [`GetBackendAuthOutput`](crate::output::GetBackendAuthOutput) with field(s):
    ///   - [`app_id(Option<String>)`](crate::output::GetBackendAuthOutput::app_id): <p>The app ID.</p>
    ///   - [`backend_environment_name(Option<String>)`](crate::output::GetBackendAuthOutput::backend_environment_name): <p>The name of the backend environment.</p>
    ///   - [`error(Option<String>)`](crate::output::GetBackendAuthOutput::error): <p>If the request fails, this error is returned.</p>
    ///   - [`resource_config(Option<CreateBackendAuthResourceConfig>)`](crate::output::GetBackendAuthOutput::resource_config): <p>The resource configuration for authorization requests to the backend of your Amplify project.</p>
    ///   - [`resource_name(Option<String>)`](crate::output::GetBackendAuthOutput::resource_name): <p>The name of this resource.</p>
    /// - On failure, responds with [`SdkError<GetBackendAuthError>`](crate::error::GetBackendAuthError)
    pub fn get_backend_auth(&self) -> crate::client::fluent_builders::GetBackendAuth {
        crate::client::fluent_builders::GetBackendAuth::new(self.handle.clone())
    }
}
