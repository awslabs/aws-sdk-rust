// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The request body for GetBackendStorage.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetBackendStorageInput {
    /// <p>The app ID.</p>
    #[doc(hidden)]
    pub app_id: std::option::Option<std::string::String>,
    /// <p>The name of the backend environment.</p>
    #[doc(hidden)]
    pub backend_environment_name: std::option::Option<std::string::String>,
    /// <p>The name of the storage resource.</p>
    #[doc(hidden)]
    pub resource_name: std::option::Option<std::string::String>,
}
impl GetBackendStorageInput {
    /// <p>The app ID.</p>
    pub fn app_id(&self) -> std::option::Option<&str> {
        self.app_id.as_deref()
    }
    /// <p>The name of the backend environment.</p>
    pub fn backend_environment_name(&self) -> std::option::Option<&str> {
        self.backend_environment_name.as_deref()
    }
    /// <p>The name of the storage resource.</p>
    pub fn resource_name(&self) -> std::option::Option<&str> {
        self.resource_name.as_deref()
    }
}
impl GetBackendStorageInput {
    /// Creates a new builder-style object to manufacture [`GetBackendStorageInput`](crate::operation::get_backend_storage::GetBackendStorageInput).
    pub fn builder(
    ) -> crate::operation::get_backend_storage::builders::GetBackendStorageInputBuilder {
        crate::operation::get_backend_storage::builders::GetBackendStorageInputBuilder::default()
    }
}

/// A builder for [`GetBackendStorageInput`](crate::operation::get_backend_storage::GetBackendStorageInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetBackendStorageInputBuilder {
    pub(crate) app_id: std::option::Option<std::string::String>,
    pub(crate) backend_environment_name: std::option::Option<std::string::String>,
    pub(crate) resource_name: std::option::Option<std::string::String>,
}
impl GetBackendStorageInputBuilder {
    /// <p>The app ID.</p>
    pub fn app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.app_id = Some(input.into());
        self
    }
    /// <p>The app ID.</p>
    pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.app_id = input;
        self
    }
    /// <p>The name of the backend environment.</p>
    pub fn backend_environment_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.backend_environment_name = Some(input.into());
        self
    }
    /// <p>The name of the backend environment.</p>
    pub fn set_backend_environment_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.backend_environment_name = input;
        self
    }
    /// <p>The name of the storage resource.</p>
    pub fn resource_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_name = Some(input.into());
        self
    }
    /// <p>The name of the storage resource.</p>
    pub fn set_resource_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_name = input;
        self
    }
    /// Consumes the builder and constructs a [`GetBackendStorageInput`](crate::operation::get_backend_storage::GetBackendStorageInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_backend_storage::GetBackendStorageInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::get_backend_storage::GetBackendStorageInput {
                app_id: self.app_id,
                backend_environment_name: self.backend_environment_name,
                resource_name: self.resource_name,
            },
        )
    }
}
