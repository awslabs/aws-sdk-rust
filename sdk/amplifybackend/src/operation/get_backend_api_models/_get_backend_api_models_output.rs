// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetBackendApiModelsOutput {
    /// <p>Stringified JSON of the datastore model.</p>
    #[doc(hidden)]
    pub models: std::option::Option<std::string::String>,
    /// <p>The current status of the request.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::Status>,
    /// <p>Stringified JSON of the model introspection schema for an existing backend API resource.</p>
    #[doc(hidden)]
    pub model_introspection_schema: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetBackendApiModelsOutput {
    /// <p>Stringified JSON of the datastore model.</p>
    pub fn models(&self) -> std::option::Option<&str> {
        self.models.as_deref()
    }
    /// <p>The current status of the request.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::Status> {
        self.status.as_ref()
    }
    /// <p>Stringified JSON of the model introspection schema for an existing backend API resource.</p>
    pub fn model_introspection_schema(&self) -> std::option::Option<&str> {
        self.model_introspection_schema.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetBackendApiModelsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetBackendApiModelsOutput {
    /// Creates a new builder-style object to manufacture [`GetBackendApiModelsOutput`](crate::operation::get_backend_api_models::GetBackendApiModelsOutput).
    pub fn builder(
    ) -> crate::operation::get_backend_api_models::builders::GetBackendApiModelsOutputBuilder {
        crate::operation::get_backend_api_models::builders::GetBackendApiModelsOutputBuilder::default()
    }
}

/// A builder for [`GetBackendApiModelsOutput`](crate::operation::get_backend_api_models::GetBackendApiModelsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetBackendApiModelsOutputBuilder {
    pub(crate) models: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::Status>,
    pub(crate) model_introspection_schema: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetBackendApiModelsOutputBuilder {
    /// <p>Stringified JSON of the datastore model.</p>
    pub fn models(mut self, input: impl Into<std::string::String>) -> Self {
        self.models = Some(input.into());
        self
    }
    /// <p>Stringified JSON of the datastore model.</p>
    pub fn set_models(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.models = input;
        self
    }
    /// <p>The current status of the request.</p>
    pub fn status(mut self, input: crate::types::Status) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The current status of the request.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::Status>) -> Self {
        self.status = input;
        self
    }
    /// <p>Stringified JSON of the model introspection schema for an existing backend API resource.</p>
    pub fn model_introspection_schema(mut self, input: impl Into<std::string::String>) -> Self {
        self.model_introspection_schema = Some(input.into());
        self
    }
    /// <p>Stringified JSON of the model introspection schema for an existing backend API resource.</p>
    pub fn set_model_introspection_schema(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.model_introspection_schema = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetBackendApiModelsOutput`](crate::operation::get_backend_api_models::GetBackendApiModelsOutput).
    pub fn build(self) -> crate::operation::get_backend_api_models::GetBackendApiModelsOutput {
        crate::operation::get_backend_api_models::GetBackendApiModelsOutput {
            models: self.models,
            status: self.status,
            model_introspection_schema: self.model_introspection_schema,
            _request_id: self._request_id,
        }
    }
}
