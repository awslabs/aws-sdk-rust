// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateBackendConfigOutput {
    /// <p>The app ID.</p>
    #[doc(hidden)]
    pub app_id: std::option::Option<std::string::String>,
    /// <p>The name of the backend environment.</p>
    #[doc(hidden)]
    pub backend_environment_name: std::option::Option<std::string::String>,
    /// <p>The ID for the job.</p>
    #[doc(hidden)]
    pub job_id: std::option::Option<std::string::String>,
    /// <p>The current status of the request.</p>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateBackendConfigOutput {
    /// <p>The app ID.</p>
    pub fn app_id(&self) -> std::option::Option<&str> {
        self.app_id.as_deref()
    }
    /// <p>The name of the backend environment.</p>
    pub fn backend_environment_name(&self) -> std::option::Option<&str> {
        self.backend_environment_name.as_deref()
    }
    /// <p>The ID for the job.</p>
    pub fn job_id(&self) -> std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>The current status of the request.</p>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateBackendConfigOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateBackendConfigOutput {
    /// Creates a new builder-style object to manufacture [`CreateBackendConfigOutput`](crate::operation::create_backend_config::CreateBackendConfigOutput).
    pub fn builder(
    ) -> crate::operation::create_backend_config::builders::CreateBackendConfigOutputBuilder {
        crate::operation::create_backend_config::builders::CreateBackendConfigOutputBuilder::default(
        )
    }
}

/// A builder for [`CreateBackendConfigOutput`](crate::operation::create_backend_config::CreateBackendConfigOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateBackendConfigOutputBuilder {
    pub(crate) app_id: std::option::Option<std::string::String>,
    pub(crate) backend_environment_name: std::option::Option<std::string::String>,
    pub(crate) job_id: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateBackendConfigOutputBuilder {
    /// <p>The app ID.</p>
    pub fn app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.app_id = Some(input.into());
        self
    }
    /// <p>The app ID.</p>
    pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.app_id = input;
        self
    }
    /// <p>The name of the backend environment.</p>
    pub fn backend_environment_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.backend_environment_name = Some(input.into());
        self
    }
    /// <p>The name of the backend environment.</p>
    pub fn set_backend_environment_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.backend_environment_name = input;
        self
    }
    /// <p>The ID for the job.</p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_id = Some(input.into());
        self
    }
    /// <p>The ID for the job.</p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The current status of the request.</p>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.status = Some(input.into());
        self
    }
    /// <p>The current status of the request.</p>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateBackendConfigOutput`](crate::operation::create_backend_config::CreateBackendConfigOutput).
    pub fn build(self) -> crate::operation::create_backend_config::CreateBackendConfigOutput {
        crate::operation::create_backend_config::CreateBackendConfigOutput {
            app_id: self.app_id,
            backend_environment_name: self.backend_environment_name,
            job_id: self.job_id,
            status: self.status,
            _request_id: self._request_id,
        }
    }
}
