// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The request body for GetBackendJob.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateBackendJobInput {
    /// <p>The app ID.</p>
    #[doc(hidden)]
    pub app_id: std::option::Option<std::string::String>,
    /// <p>The name of the backend environment.</p>
    #[doc(hidden)]
    pub backend_environment_name: std::option::Option<std::string::String>,
    /// <p>The ID for the job.</p>
    #[doc(hidden)]
    pub job_id: std::option::Option<std::string::String>,
    /// <p>Filters the list of response objects to include only those with the specified operation name.</p>
    #[doc(hidden)]
    pub operation: std::option::Option<std::string::String>,
    /// <p>Filters the list of response objects to include only those with the specified status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
}
impl UpdateBackendJobInput {
    /// <p>The app ID.</p>
    pub fn app_id(&self) -> std::option::Option<&str> {
        self.app_id.as_deref()
    }
    /// <p>The name of the backend environment.</p>
    pub fn backend_environment_name(&self) -> std::option::Option<&str> {
        self.backend_environment_name.as_deref()
    }
    /// <p>The ID for the job.</p>
    pub fn job_id(&self) -> std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>Filters the list of response objects to include only those with the specified operation name.</p>
    pub fn operation(&self) -> std::option::Option<&str> {
        self.operation.as_deref()
    }
    /// <p>Filters the list of response objects to include only those with the specified status.</p>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
}
impl UpdateBackendJobInput {
    /// Creates a new builder-style object to manufacture [`UpdateBackendJobInput`](crate::operation::update_backend_job::UpdateBackendJobInput).
    pub fn builder() -> crate::operation::update_backend_job::builders::UpdateBackendJobInputBuilder
    {
        crate::operation::update_backend_job::builders::UpdateBackendJobInputBuilder::default()
    }
}

/// A builder for [`UpdateBackendJobInput`](crate::operation::update_backend_job::UpdateBackendJobInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateBackendJobInputBuilder {
    pub(crate) app_id: std::option::Option<std::string::String>,
    pub(crate) backend_environment_name: std::option::Option<std::string::String>,
    pub(crate) job_id: std::option::Option<std::string::String>,
    pub(crate) operation: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<std::string::String>,
}
impl UpdateBackendJobInputBuilder {
    /// <p>The app ID.</p>
    pub fn app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.app_id = Some(input.into());
        self
    }
    /// <p>The app ID.</p>
    pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.app_id = input;
        self
    }
    /// <p>The name of the backend environment.</p>
    pub fn backend_environment_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.backend_environment_name = Some(input.into());
        self
    }
    /// <p>The name of the backend environment.</p>
    pub fn set_backend_environment_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.backend_environment_name = input;
        self
    }
    /// <p>The ID for the job.</p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_id = Some(input.into());
        self
    }
    /// <p>The ID for the job.</p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>Filters the list of response objects to include only those with the specified operation name.</p>
    pub fn operation(mut self, input: impl Into<std::string::String>) -> Self {
        self.operation = Some(input.into());
        self
    }
    /// <p>Filters the list of response objects to include only those with the specified operation name.</p>
    pub fn set_operation(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.operation = input;
        self
    }
    /// <p>Filters the list of response objects to include only those with the specified status.</p>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.status = Some(input.into());
        self
    }
    /// <p>Filters the list of response objects to include only those with the specified status.</p>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateBackendJobInput`](crate::operation::update_backend_job::UpdateBackendJobInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_backend_job::UpdateBackendJobInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_backend_job::UpdateBackendJobInput {
                app_id: self.app_id,
                backend_environment_name: self.backend_environment_name,
                job_id: self.job_id,
                operation: self.operation,
                status: self.status,
            },
        )
    }
}
