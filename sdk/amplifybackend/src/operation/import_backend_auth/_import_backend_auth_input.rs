// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The request body for ImportBackendAuth.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImportBackendAuthInput {
    /// <p>The app ID.</p>
    pub app_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the backend environment.</p>
    pub backend_environment_name: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Amazon Cognito identity pool.</p>
    pub identity_pool_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Amazon Cognito native client.</p>
    pub native_client_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Amazon Cognito user pool.</p>
    pub user_pool_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Amazon Cognito web client.</p>
    pub web_client_id: ::std::option::Option<::std::string::String>,
}
impl ImportBackendAuthInput {
    /// <p>The app ID.</p>
    pub fn app_id(&self) -> ::std::option::Option<&str> {
        self.app_id.as_deref()
    }
    /// <p>The name of the backend environment.</p>
    pub fn backend_environment_name(&self) -> ::std::option::Option<&str> {
        self.backend_environment_name.as_deref()
    }
    /// <p>The ID of the Amazon Cognito identity pool.</p>
    pub fn identity_pool_id(&self) -> ::std::option::Option<&str> {
        self.identity_pool_id.as_deref()
    }
    /// <p>The ID of the Amazon Cognito native client.</p>
    pub fn native_client_id(&self) -> ::std::option::Option<&str> {
        self.native_client_id.as_deref()
    }
    /// <p>The ID of the Amazon Cognito user pool.</p>
    pub fn user_pool_id(&self) -> ::std::option::Option<&str> {
        self.user_pool_id.as_deref()
    }
    /// <p>The ID of the Amazon Cognito web client.</p>
    pub fn web_client_id(&self) -> ::std::option::Option<&str> {
        self.web_client_id.as_deref()
    }
}
impl ImportBackendAuthInput {
    /// Creates a new builder-style object to manufacture [`ImportBackendAuthInput`](crate::operation::import_backend_auth::ImportBackendAuthInput).
    pub fn builder() -> crate::operation::import_backend_auth::builders::ImportBackendAuthInputBuilder {
        crate::operation::import_backend_auth::builders::ImportBackendAuthInputBuilder::default()
    }
}

/// A builder for [`ImportBackendAuthInput`](crate::operation::import_backend_auth::ImportBackendAuthInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ImportBackendAuthInputBuilder {
    pub(crate) app_id: ::std::option::Option<::std::string::String>,
    pub(crate) backend_environment_name: ::std::option::Option<::std::string::String>,
    pub(crate) identity_pool_id: ::std::option::Option<::std::string::String>,
    pub(crate) native_client_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_pool_id: ::std::option::Option<::std::string::String>,
    pub(crate) web_client_id: ::std::option::Option<::std::string::String>,
}
impl ImportBackendAuthInputBuilder {
    /// <p>The app ID.</p>
    /// This field is required.
    pub fn app_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The app ID.</p>
    pub fn set_app_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_id = input;
        self
    }
    /// <p>The app ID.</p>
    pub fn get_app_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_id
    }
    /// <p>The name of the backend environment.</p>
    /// This field is required.
    pub fn backend_environment_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.backend_environment_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the backend environment.</p>
    pub fn set_backend_environment_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.backend_environment_name = input;
        self
    }
    /// <p>The name of the backend environment.</p>
    pub fn get_backend_environment_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.backend_environment_name
    }
    /// <p>The ID of the Amazon Cognito identity pool.</p>
    pub fn identity_pool_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identity_pool_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Cognito identity pool.</p>
    pub fn set_identity_pool_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identity_pool_id = input;
        self
    }
    /// <p>The ID of the Amazon Cognito identity pool.</p>
    pub fn get_identity_pool_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.identity_pool_id
    }
    /// <p>The ID of the Amazon Cognito native client.</p>
    /// This field is required.
    pub fn native_client_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.native_client_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Cognito native client.</p>
    pub fn set_native_client_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.native_client_id = input;
        self
    }
    /// <p>The ID of the Amazon Cognito native client.</p>
    pub fn get_native_client_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.native_client_id
    }
    /// <p>The ID of the Amazon Cognito user pool.</p>
    /// This field is required.
    pub fn user_pool_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_pool_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Cognito user pool.</p>
    pub fn set_user_pool_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_pool_id = input;
        self
    }
    /// <p>The ID of the Amazon Cognito user pool.</p>
    pub fn get_user_pool_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_pool_id
    }
    /// <p>The ID of the Amazon Cognito web client.</p>
    /// This field is required.
    pub fn web_client_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.web_client_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Cognito web client.</p>
    pub fn set_web_client_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.web_client_id = input;
        self
    }
    /// <p>The ID of the Amazon Cognito web client.</p>
    pub fn get_web_client_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.web_client_id
    }
    /// Consumes the builder and constructs a [`ImportBackendAuthInput`](crate::operation::import_backend_auth::ImportBackendAuthInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::import_backend_auth::ImportBackendAuthInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::import_backend_auth::ImportBackendAuthInput {
            app_id: self.app_id,
            backend_environment_name: self.backend_environment_name,
            identity_pool_id: self.identity_pool_id,
            native_client_id: self.native_client_id,
            user_pool_id: self.user_pool_id,
            web_client_id: self.web_client_id,
        })
    }
}
