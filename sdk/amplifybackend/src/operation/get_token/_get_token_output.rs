// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetTokenOutput {
    /// <p>The app ID.</p>
    #[doc(hidden)]
    pub app_id: std::option::Option<std::string::String>,
    /// <p>The one-time challenge code for authenticating into the Amplify Admin UI.</p>
    #[doc(hidden)]
    pub challenge_code: std::option::Option<std::string::String>,
    /// <p>A unique ID provided when creating a new challenge token.</p>
    #[doc(hidden)]
    pub session_id: std::option::Option<std::string::String>,
    /// <p>The expiry time for the one-time generated token code.</p>
    #[doc(hidden)]
    pub ttl: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetTokenOutput {
    /// <p>The app ID.</p>
    pub fn app_id(&self) -> std::option::Option<&str> {
        self.app_id.as_deref()
    }
    /// <p>The one-time challenge code for authenticating into the Amplify Admin UI.</p>
    pub fn challenge_code(&self) -> std::option::Option<&str> {
        self.challenge_code.as_deref()
    }
    /// <p>A unique ID provided when creating a new challenge token.</p>
    pub fn session_id(&self) -> std::option::Option<&str> {
        self.session_id.as_deref()
    }
    /// <p>The expiry time for the one-time generated token code.</p>
    pub fn ttl(&self) -> std::option::Option<&str> {
        self.ttl.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetTokenOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetTokenOutput {
    /// Creates a new builder-style object to manufacture [`GetTokenOutput`](crate::operation::get_token::GetTokenOutput).
    pub fn builder() -> crate::operation::get_token::builders::GetTokenOutputBuilder {
        crate::operation::get_token::builders::GetTokenOutputBuilder::default()
    }
}

/// A builder for [`GetTokenOutput`](crate::operation::get_token::GetTokenOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetTokenOutputBuilder {
    pub(crate) app_id: std::option::Option<std::string::String>,
    pub(crate) challenge_code: std::option::Option<std::string::String>,
    pub(crate) session_id: std::option::Option<std::string::String>,
    pub(crate) ttl: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetTokenOutputBuilder {
    /// <p>The app ID.</p>
    pub fn app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.app_id = Some(input.into());
        self
    }
    /// <p>The app ID.</p>
    pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.app_id = input;
        self
    }
    /// <p>The one-time challenge code for authenticating into the Amplify Admin UI.</p>
    pub fn challenge_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.challenge_code = Some(input.into());
        self
    }
    /// <p>The one-time challenge code for authenticating into the Amplify Admin UI.</p>
    pub fn set_challenge_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.challenge_code = input;
        self
    }
    /// <p>A unique ID provided when creating a new challenge token.</p>
    pub fn session_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.session_id = Some(input.into());
        self
    }
    /// <p>A unique ID provided when creating a new challenge token.</p>
    pub fn set_session_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// <p>The expiry time for the one-time generated token code.</p>
    pub fn ttl(mut self, input: impl Into<std::string::String>) -> Self {
        self.ttl = Some(input.into());
        self
    }
    /// <p>The expiry time for the one-time generated token code.</p>
    pub fn set_ttl(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ttl = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetTokenOutput`](crate::operation::get_token::GetTokenOutput).
    pub fn build(self) -> crate::operation::get_token::GetTokenOutput {
        crate::operation::get_token::GetTokenOutput {
            app_id: self.app_id,
            challenge_code: self.challenge_code,
            session_id: self.session_id,
            ttl: self.ttl,
            _request_id: self._request_id,
        }
    }
}
