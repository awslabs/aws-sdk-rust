// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateBackendConfigOutput {
    /// <p>The app ID.</p>
    #[doc(hidden)]
    pub app_id: std::option::Option<std::string::String>,
    /// <p>The app ID for the backend manager.</p>
    #[doc(hidden)]
    pub backend_manager_app_id: std::option::Option<std::string::String>,
    /// <p>If the request fails, this error is returned.</p>
    #[doc(hidden)]
    pub error: std::option::Option<std::string::String>,
    /// <p>Describes the Amazon Cognito configurations for the Admin UI auth resource to log in with.</p>
    #[doc(hidden)]
    pub login_auth_config: std::option::Option<crate::types::LoginAuthConfigReqObj>,
    _request_id: Option<String>,
}
impl UpdateBackendConfigOutput {
    /// <p>The app ID.</p>
    pub fn app_id(&self) -> std::option::Option<&str> {
        self.app_id.as_deref()
    }
    /// <p>The app ID for the backend manager.</p>
    pub fn backend_manager_app_id(&self) -> std::option::Option<&str> {
        self.backend_manager_app_id.as_deref()
    }
    /// <p>If the request fails, this error is returned.</p>
    pub fn error(&self) -> std::option::Option<&str> {
        self.error.as_deref()
    }
    /// <p>Describes the Amazon Cognito configurations for the Admin UI auth resource to log in with.</p>
    pub fn login_auth_config(&self) -> std::option::Option<&crate::types::LoginAuthConfigReqObj> {
        self.login_auth_config.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateBackendConfigOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateBackendConfigOutput {
    /// Creates a new builder-style object to manufacture [`UpdateBackendConfigOutput`](crate::operation::update_backend_config::UpdateBackendConfigOutput).
    pub fn builder(
    ) -> crate::operation::update_backend_config::builders::UpdateBackendConfigOutputBuilder {
        crate::operation::update_backend_config::builders::UpdateBackendConfigOutputBuilder::default(
        )
    }
}

/// A builder for [`UpdateBackendConfigOutput`](crate::operation::update_backend_config::UpdateBackendConfigOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateBackendConfigOutputBuilder {
    pub(crate) app_id: std::option::Option<std::string::String>,
    pub(crate) backend_manager_app_id: std::option::Option<std::string::String>,
    pub(crate) error: std::option::Option<std::string::String>,
    pub(crate) login_auth_config: std::option::Option<crate::types::LoginAuthConfigReqObj>,
    _request_id: Option<String>,
}
impl UpdateBackendConfigOutputBuilder {
    /// <p>The app ID.</p>
    pub fn app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.app_id = Some(input.into());
        self
    }
    /// <p>The app ID.</p>
    pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.app_id = input;
        self
    }
    /// <p>The app ID for the backend manager.</p>
    pub fn backend_manager_app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.backend_manager_app_id = Some(input.into());
        self
    }
    /// <p>The app ID for the backend manager.</p>
    pub fn set_backend_manager_app_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.backend_manager_app_id = input;
        self
    }
    /// <p>If the request fails, this error is returned.</p>
    pub fn error(mut self, input: impl Into<std::string::String>) -> Self {
        self.error = Some(input.into());
        self
    }
    /// <p>If the request fails, this error is returned.</p>
    pub fn set_error(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error = input;
        self
    }
    /// <p>Describes the Amazon Cognito configurations for the Admin UI auth resource to log in with.</p>
    pub fn login_auth_config(mut self, input: crate::types::LoginAuthConfigReqObj) -> Self {
        self.login_auth_config = Some(input);
        self
    }
    /// <p>Describes the Amazon Cognito configurations for the Admin UI auth resource to log in with.</p>
    pub fn set_login_auth_config(
        mut self,
        input: std::option::Option<crate::types::LoginAuthConfigReqObj>,
    ) -> Self {
        self.login_auth_config = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateBackendConfigOutput`](crate::operation::update_backend_config::UpdateBackendConfigOutput).
    pub fn build(self) -> crate::operation::update_backend_config::UpdateBackendConfigOutput {
        crate::operation::update_backend_config::UpdateBackendConfigOutput {
            app_id: self.app_id,
            backend_manager_app_id: self.backend_manager_app_id,
            error: self.error,
            login_auth_config: self.login_auth_config,
            _request_id: self._request_id,
        }
    }
}
