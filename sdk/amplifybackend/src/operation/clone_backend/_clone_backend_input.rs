// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The request body for CloneBackend.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CloneBackendInput {
    /// <p>The app ID.</p>
    #[doc(hidden)]
    pub app_id: std::option::Option<std::string::String>,
    /// <p>The name of the backend environment.</p>
    #[doc(hidden)]
    pub backend_environment_name: std::option::Option<std::string::String>,
    /// <p>The name of the destination backend environment to be created.</p>
    #[doc(hidden)]
    pub target_environment_name: std::option::Option<std::string::String>,
}
impl CloneBackendInput {
    /// <p>The app ID.</p>
    pub fn app_id(&self) -> std::option::Option<&str> {
        self.app_id.as_deref()
    }
    /// <p>The name of the backend environment.</p>
    pub fn backend_environment_name(&self) -> std::option::Option<&str> {
        self.backend_environment_name.as_deref()
    }
    /// <p>The name of the destination backend environment to be created.</p>
    pub fn target_environment_name(&self) -> std::option::Option<&str> {
        self.target_environment_name.as_deref()
    }
}
impl CloneBackendInput {
    /// Creates a new builder-style object to manufacture [`CloneBackendInput`](crate::operation::clone_backend::CloneBackendInput).
    pub fn builder() -> crate::operation::clone_backend::builders::CloneBackendInputBuilder {
        crate::operation::clone_backend::builders::CloneBackendInputBuilder::default()
    }
}

/// A builder for [`CloneBackendInput`](crate::operation::clone_backend::CloneBackendInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CloneBackendInputBuilder {
    pub(crate) app_id: std::option::Option<std::string::String>,
    pub(crate) backend_environment_name: std::option::Option<std::string::String>,
    pub(crate) target_environment_name: std::option::Option<std::string::String>,
}
impl CloneBackendInputBuilder {
    /// <p>The app ID.</p>
    pub fn app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.app_id = Some(input.into());
        self
    }
    /// <p>The app ID.</p>
    pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.app_id = input;
        self
    }
    /// <p>The name of the backend environment.</p>
    pub fn backend_environment_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.backend_environment_name = Some(input.into());
        self
    }
    /// <p>The name of the backend environment.</p>
    pub fn set_backend_environment_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.backend_environment_name = input;
        self
    }
    /// <p>The name of the destination backend environment to be created.</p>
    pub fn target_environment_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.target_environment_name = Some(input.into());
        self
    }
    /// <p>The name of the destination backend environment to be created.</p>
    pub fn set_target_environment_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.target_environment_name = input;
        self
    }
    /// Consumes the builder and constructs a [`CloneBackendInput`](crate::operation::clone_backend::CloneBackendInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::clone_backend::CloneBackendInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::clone_backend::CloneBackendInput {
            app_id: self.app_id,
            backend_environment_name: self.backend_environment_name,
            target_environment_name: self.target_environment_name,
        })
    }
}
