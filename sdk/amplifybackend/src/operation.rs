// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>This operation clones an existing backend.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CloneBackend {
    _private: (),
}
impl CloneBackend {
    /// Creates a new builder-style object to manufacture [`CloneBackendInput`](crate::input::CloneBackendInput)
    pub fn builder() -> crate::input::clone_backend_input::Builder {
        crate::input::clone_backend_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CloneBackend {
    type Output =
        std::result::Result<crate::output::CloneBackendOutput, crate::error::CloneBackendError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_clone_backend_error(response)
        } else {
            crate::operation_deser::parse_clone_backend_response(response)
        }
    }
}

/// <p>This operation creates a backend for an Amplify app. Backends are automatically created at the time of app creation.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateBackend {
    _private: (),
}
impl CreateBackend {
    /// Creates a new builder-style object to manufacture [`CreateBackendInput`](crate::input::CreateBackendInput)
    pub fn builder() -> crate::input::create_backend_input::Builder {
        crate::input::create_backend_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateBackend {
    type Output =
        std::result::Result<crate::output::CreateBackendOutput, crate::error::CreateBackendError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_backend_error(response)
        } else {
            crate::operation_deser::parse_create_backend_response(response)
        }
    }
}

/// <p>Creates a new backend API resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateBackendAPI {
    _private: (),
}
impl CreateBackendAPI {
    /// Creates a new builder-style object to manufacture [`CreateBackendApiInput`](crate::input::CreateBackendApiInput)
    pub fn builder() -> crate::input::create_backend_api_input::Builder {
        crate::input::create_backend_api_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateBackendAPI {
    type Output = std::result::Result<
        crate::output::CreateBackendApiOutput,
        crate::error::CreateBackendAPIError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_backend_api_error(response)
        } else {
            crate::operation_deser::parse_create_backend_api_response(response)
        }
    }
}

/// <p>Creates a new backend authentication resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateBackendAuth {
    _private: (),
}
impl CreateBackendAuth {
    /// Creates a new builder-style object to manufacture [`CreateBackendAuthInput`](crate::input::CreateBackendAuthInput)
    pub fn builder() -> crate::input::create_backend_auth_input::Builder {
        crate::input::create_backend_auth_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateBackendAuth {
    type Output = std::result::Result<
        crate::output::CreateBackendAuthOutput,
        crate::error::CreateBackendAuthError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_backend_auth_error(response)
        } else {
            crate::operation_deser::parse_create_backend_auth_response(response)
        }
    }
}

/// <p>Creates a config object for a backend.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateBackendConfig {
    _private: (),
}
impl CreateBackendConfig {
    /// Creates a new builder-style object to manufacture [`CreateBackendConfigInput`](crate::input::CreateBackendConfigInput)
    pub fn builder() -> crate::input::create_backend_config_input::Builder {
        crate::input::create_backend_config_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateBackendConfig {
    type Output = std::result::Result<
        crate::output::CreateBackendConfigOutput,
        crate::error::CreateBackendConfigError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_backend_config_error(response)
        } else {
            crate::operation_deser::parse_create_backend_config_response(response)
        }
    }
}

/// <p>Generates a one-time challenge code to authenticate a user into your Amplify Admin UI.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateToken {
    _private: (),
}
impl CreateToken {
    /// Creates a new builder-style object to manufacture [`CreateTokenInput`](crate::input::CreateTokenInput)
    pub fn builder() -> crate::input::create_token_input::Builder {
        crate::input::create_token_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateToken {
    type Output =
        std::result::Result<crate::output::CreateTokenOutput, crate::error::CreateTokenError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_token_error(response)
        } else {
            crate::operation_deser::parse_create_token_response(response)
        }
    }
}

/// <p>Removes an existing environment from your Amplify project.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteBackend {
    _private: (),
}
impl DeleteBackend {
    /// Creates a new builder-style object to manufacture [`DeleteBackendInput`](crate::input::DeleteBackendInput)
    pub fn builder() -> crate::input::delete_backend_input::Builder {
        crate::input::delete_backend_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteBackend {
    type Output =
        std::result::Result<crate::output::DeleteBackendOutput, crate::error::DeleteBackendError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_backend_error(response)
        } else {
            crate::operation_deser::parse_delete_backend_response(response)
        }
    }
}

/// <p>Deletes an existing backend API resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteBackendAPI {
    _private: (),
}
impl DeleteBackendAPI {
    /// Creates a new builder-style object to manufacture [`DeleteBackendApiInput`](crate::input::DeleteBackendApiInput)
    pub fn builder() -> crate::input::delete_backend_api_input::Builder {
        crate::input::delete_backend_api_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteBackendAPI {
    type Output = std::result::Result<
        crate::output::DeleteBackendApiOutput,
        crate::error::DeleteBackendAPIError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_backend_api_error(response)
        } else {
            crate::operation_deser::parse_delete_backend_api_response(response)
        }
    }
}

/// <p>Deletes an existing backend authentication resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteBackendAuth {
    _private: (),
}
impl DeleteBackendAuth {
    /// Creates a new builder-style object to manufacture [`DeleteBackendAuthInput`](crate::input::DeleteBackendAuthInput)
    pub fn builder() -> crate::input::delete_backend_auth_input::Builder {
        crate::input::delete_backend_auth_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteBackendAuth {
    type Output = std::result::Result<
        crate::output::DeleteBackendAuthOutput,
        crate::error::DeleteBackendAuthError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_backend_auth_error(response)
        } else {
            crate::operation_deser::parse_delete_backend_auth_response(response)
        }
    }
}

/// <p>Deletes the challenge token based on the given appId and sessionId.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteToken {
    _private: (),
}
impl DeleteToken {
    /// Creates a new builder-style object to manufacture [`DeleteTokenInput`](crate::input::DeleteTokenInput)
    pub fn builder() -> crate::input::delete_token_input::Builder {
        crate::input::delete_token_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteToken {
    type Output =
        std::result::Result<crate::output::DeleteTokenOutput, crate::error::DeleteTokenError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_token_error(response)
        } else {
            crate::operation_deser::parse_delete_token_response(response)
        }
    }
}

/// <p>Generates a model schema for an existing backend API resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GenerateBackendAPIModels {
    _private: (),
}
impl GenerateBackendAPIModels {
    /// Creates a new builder-style object to manufacture [`GenerateBackendApiModelsInput`](crate::input::GenerateBackendApiModelsInput)
    pub fn builder() -> crate::input::generate_backend_api_models_input::Builder {
        crate::input::generate_backend_api_models_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GenerateBackendAPIModels {
    type Output = std::result::Result<
        crate::output::GenerateBackendApiModelsOutput,
        crate::error::GenerateBackendAPIModelsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_generate_backend_api_models_error(response)
        } else {
            crate::operation_deser::parse_generate_backend_api_models_response(response)
        }
    }
}

/// <p>Provides project-level details for your Amplify UI project.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetBackend {
    _private: (),
}
impl GetBackend {
    /// Creates a new builder-style object to manufacture [`GetBackendInput`](crate::input::GetBackendInput)
    pub fn builder() -> crate::input::get_backend_input::Builder {
        crate::input::get_backend_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetBackend {
    type Output =
        std::result::Result<crate::output::GetBackendOutput, crate::error::GetBackendError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_backend_error(response)
        } else {
            crate::operation_deser::parse_get_backend_response(response)
        }
    }
}

/// <p>Gets the details for a backend API.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetBackendAPI {
    _private: (),
}
impl GetBackendAPI {
    /// Creates a new builder-style object to manufacture [`GetBackendApiInput`](crate::input::GetBackendApiInput)
    pub fn builder() -> crate::input::get_backend_api_input::Builder {
        crate::input::get_backend_api_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetBackendAPI {
    type Output =
        std::result::Result<crate::output::GetBackendApiOutput, crate::error::GetBackendAPIError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_backend_api_error(response)
        } else {
            crate::operation_deser::parse_get_backend_api_response(response)
        }
    }
}

/// <p>Generates a model schema for existing backend API resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetBackendAPIModels {
    _private: (),
}
impl GetBackendAPIModels {
    /// Creates a new builder-style object to manufacture [`GetBackendApiModelsInput`](crate::input::GetBackendApiModelsInput)
    pub fn builder() -> crate::input::get_backend_api_models_input::Builder {
        crate::input::get_backend_api_models_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetBackendAPIModels {
    type Output = std::result::Result<
        crate::output::GetBackendApiModelsOutput,
        crate::error::GetBackendAPIModelsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_backend_api_models_error(response)
        } else {
            crate::operation_deser::parse_get_backend_api_models_response(response)
        }
    }
}

/// <p>Gets a backend auth details.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetBackendAuth {
    _private: (),
}
impl GetBackendAuth {
    /// Creates a new builder-style object to manufacture [`GetBackendAuthInput`](crate::input::GetBackendAuthInput)
    pub fn builder() -> crate::input::get_backend_auth_input::Builder {
        crate::input::get_backend_auth_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetBackendAuth {
    type Output =
        std::result::Result<crate::output::GetBackendAuthOutput, crate::error::GetBackendAuthError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_backend_auth_error(response)
        } else {
            crate::operation_deser::parse_get_backend_auth_response(response)
        }
    }
}

/// <p>Returns information about a specific job.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetBackendJob {
    _private: (),
}
impl GetBackendJob {
    /// Creates a new builder-style object to manufacture [`GetBackendJobInput`](crate::input::GetBackendJobInput)
    pub fn builder() -> crate::input::get_backend_job_input::Builder {
        crate::input::get_backend_job_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetBackendJob {
    type Output =
        std::result::Result<crate::output::GetBackendJobOutput, crate::error::GetBackendJobError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_backend_job_error(response)
        } else {
            crate::operation_deser::parse_get_backend_job_response(response)
        }
    }
}

/// <p>Gets the challenge token based on the given appId and sessionId.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetToken {
    _private: (),
}
impl GetToken {
    /// Creates a new builder-style object to manufacture [`GetTokenInput`](crate::input::GetTokenInput)
    pub fn builder() -> crate::input::get_token_input::Builder {
        crate::input::get_token_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetToken {
    type Output = std::result::Result<crate::output::GetTokenOutput, crate::error::GetTokenError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_token_error(response)
        } else {
            crate::operation_deser::parse_get_token_response(response)
        }
    }
}

/// <p>Imports an existing backend authentication resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ImportBackendAuth {
    _private: (),
}
impl ImportBackendAuth {
    /// Creates a new builder-style object to manufacture [`ImportBackendAuthInput`](crate::input::ImportBackendAuthInput)
    pub fn builder() -> crate::input::import_backend_auth_input::Builder {
        crate::input::import_backend_auth_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ImportBackendAuth {
    type Output = std::result::Result<
        crate::output::ImportBackendAuthOutput,
        crate::error::ImportBackendAuthError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_import_backend_auth_error(response)
        } else {
            crate::operation_deser::parse_import_backend_auth_response(response)
        }
    }
}

/// <p>Lists the jobs for the backend of an Amplify app.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListBackendJobs {
    _private: (),
}
impl ListBackendJobs {
    /// Creates a new builder-style object to manufacture [`ListBackendJobsInput`](crate::input::ListBackendJobsInput)
    pub fn builder() -> crate::input::list_backend_jobs_input::Builder {
        crate::input::list_backend_jobs_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListBackendJobs {
    type Output = std::result::Result<
        crate::output::ListBackendJobsOutput,
        crate::error::ListBackendJobsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_backend_jobs_error(response)
        } else {
            crate::operation_deser::parse_list_backend_jobs_response(response)
        }
    }
}

/// <p>Removes all backend environments from your Amplify project.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RemoveAllBackends {
    _private: (),
}
impl RemoveAllBackends {
    /// Creates a new builder-style object to manufacture [`RemoveAllBackendsInput`](crate::input::RemoveAllBackendsInput)
    pub fn builder() -> crate::input::remove_all_backends_input::Builder {
        crate::input::remove_all_backends_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RemoveAllBackends {
    type Output = std::result::Result<
        crate::output::RemoveAllBackendsOutput,
        crate::error::RemoveAllBackendsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_remove_all_backends_error(response)
        } else {
            crate::operation_deser::parse_remove_all_backends_response(response)
        }
    }
}

/// <p>Removes the AWS resources required to access the Amplify Admin UI.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RemoveBackendConfig {
    _private: (),
}
impl RemoveBackendConfig {
    /// Creates a new builder-style object to manufacture [`RemoveBackendConfigInput`](crate::input::RemoveBackendConfigInput)
    pub fn builder() -> crate::input::remove_backend_config_input::Builder {
        crate::input::remove_backend_config_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RemoveBackendConfig {
    type Output = std::result::Result<
        crate::output::RemoveBackendConfigOutput,
        crate::error::RemoveBackendConfigError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_remove_backend_config_error(response)
        } else {
            crate::operation_deser::parse_remove_backend_config_response(response)
        }
    }
}

/// <p>Updates an existing backend API resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateBackendAPI {
    _private: (),
}
impl UpdateBackendAPI {
    /// Creates a new builder-style object to manufacture [`UpdateBackendApiInput`](crate::input::UpdateBackendApiInput)
    pub fn builder() -> crate::input::update_backend_api_input::Builder {
        crate::input::update_backend_api_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateBackendAPI {
    type Output = std::result::Result<
        crate::output::UpdateBackendApiOutput,
        crate::error::UpdateBackendAPIError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_backend_api_error(response)
        } else {
            crate::operation_deser::parse_update_backend_api_response(response)
        }
    }
}

/// <p>Updates an existing backend authentication resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateBackendAuth {
    _private: (),
}
impl UpdateBackendAuth {
    /// Creates a new builder-style object to manufacture [`UpdateBackendAuthInput`](crate::input::UpdateBackendAuthInput)
    pub fn builder() -> crate::input::update_backend_auth_input::Builder {
        crate::input::update_backend_auth_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateBackendAuth {
    type Output = std::result::Result<
        crate::output::UpdateBackendAuthOutput,
        crate::error::UpdateBackendAuthError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_backend_auth_error(response)
        } else {
            crate::operation_deser::parse_update_backend_auth_response(response)
        }
    }
}

/// <p>Updates the AWS resources required to access the Amplify Admin UI.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateBackendConfig {
    _private: (),
}
impl UpdateBackendConfig {
    /// Creates a new builder-style object to manufacture [`UpdateBackendConfigInput`](crate::input::UpdateBackendConfigInput)
    pub fn builder() -> crate::input::update_backend_config_input::Builder {
        crate::input::update_backend_config_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateBackendConfig {
    type Output = std::result::Result<
        crate::output::UpdateBackendConfigOutput,
        crate::error::UpdateBackendConfigError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_backend_config_error(response)
        } else {
            crate::operation_deser::parse_update_backend_config_response(response)
        }
    }
}

/// <p>Updates a specific job.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateBackendJob {
    _private: (),
}
impl UpdateBackendJob {
    /// Creates a new builder-style object to manufacture [`UpdateBackendJobInput`](crate::input::UpdateBackendJobInput)
    pub fn builder() -> crate::input::update_backend_job_input::Builder {
        crate::input::update_backend_job_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateBackendJob {
    type Output = std::result::Result<
        crate::output::UpdateBackendJobOutput,
        crate::error::UpdateBackendJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_backend_job_error(response)
        } else {
            crate::operation_deser::parse_update_backend_job_response(response)
        }
    }
}
