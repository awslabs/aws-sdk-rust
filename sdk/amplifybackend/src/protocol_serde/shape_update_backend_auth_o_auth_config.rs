// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_backend_auth_o_auth_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::UpdateBackendAuthOAuthConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.domain_prefix {
        object.key("domainPrefix").string(var_1.as_str());
    }
    if let Some(var_2) = &input.o_auth_grant_type {
        object.key("oAuthGrantType").string(var_2.as_str());
    }
    if let Some(var_3) = &input.o_auth_scopes {
        let mut array_4 = object.key("oAuthScopes").start_array();
        for item_5 in var_3 {
            {
                array_4.value().string(item_5.as_str());
            }
        }
        array_4.finish();
    }
    if let Some(var_6) = &input.redirect_sign_in_ur_is {
        let mut array_7 = object.key("redirectSignInURIs").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.redirect_sign_out_ur_is {
        let mut array_10 = object.key("redirectSignOutURIs").start_array();
        for item_11 in var_9 {
            {
                array_10.value().string(item_11.as_str());
            }
        }
        array_10.finish();
    }
    if let Some(var_12) = &input.social_provider_settings {
        #[allow(unused_mut)]
        let mut object_13 = object.key("socialProviderSettings").start_object();
        crate::protocol_serde::shape_social_provider_settings::ser_social_provider_settings(
            &mut object_13,
            var_12,
        )?;
        object_13.finish();
    }
    Ok(())
}
