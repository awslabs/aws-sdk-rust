// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_backend_auth_user_pool_config(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::CreateBackendAuthUserPoolConfig,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.forgot_password {
        #[allow(unused_mut)]
        let mut object_2 = object.key("forgotPassword").start_object();
        crate::protocol_serde::shape_create_backend_auth_forgot_password_config::ser_create_backend_auth_forgot_password_config(
            &mut object_2,
            var_1,
        )?;
        object_2.finish();
    }
    if let Some(var_3) = &input.mfa {
        #[allow(unused_mut)]
        let mut object_4 = object.key("mfa").start_object();
        crate::protocol_serde::shape_create_backend_auth_mfa_config::ser_create_backend_auth_mfa_config(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.o_auth {
        #[allow(unused_mut)]
        let mut object_6 = object.key("oAuth").start_object();
        crate::protocol_serde::shape_create_backend_auth_o_auth_config::ser_create_backend_auth_o_auth_config(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.password_policy {
        #[allow(unused_mut)]
        let mut object_8 = object.key("passwordPolicy").start_object();
        crate::protocol_serde::shape_create_backend_auth_password_policy_config::ser_create_backend_auth_password_policy_config(
            &mut object_8,
            var_7,
        )?;
        object_8.finish();
    }
    if let Some(var_9) = &input.required_sign_up_attributes {
        let mut array_10 = object.key("requiredSignUpAttributes").start_array();
        for item_11 in var_9 {
            {
                array_10.value().string(item_11.as_str());
            }
        }
        array_10.finish();
    }
    if let Some(var_12) = &input.sign_in_method {
        object.key("signInMethod").string(var_12.as_str());
    }
    if let Some(var_13) = &input.user_pool_name {
        object.key("userPoolName").string(var_13.as_str());
    }
    if let Some(var_14) = &input.verification_message {
        #[allow(unused_mut)]
        let mut object_15 = object.key("verificationMessage").start_object();
        crate::protocol_serde::shape_create_backend_auth_verification_message_config::ser_create_backend_auth_verification_message_config(
            &mut object_15,
            var_14,
        )?;
        object_15.finish();
    }
    Ok(())
}

pub(crate) fn de_create_backend_auth_user_pool_config<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::CreateBackendAuthUserPoolConfig>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::CreateBackendAuthUserPoolConfigBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "forgotPassword" => {
                            builder = builder.set_forgot_password(
                                    crate::protocol_serde::shape_create_backend_auth_forgot_password_config::de_create_backend_auth_forgot_password_config(tokens)?
                                );
                        }
                        "mfa" => {
                            builder = builder
                                .set_mfa(crate::protocol_serde::shape_create_backend_auth_mfa_config::de_create_backend_auth_mfa_config(tokens)?);
                        }
                        "oAuth" => {
                            builder = builder.set_o_auth(
                                crate::protocol_serde::shape_create_backend_auth_o_auth_config::de_create_backend_auth_o_auth_config(tokens)?,
                            );
                        }
                        "passwordPolicy" => {
                            builder = builder.set_password_policy(
                                    crate::protocol_serde::shape_create_backend_auth_password_policy_config::de_create_backend_auth_password_policy_config(tokens)?
                                );
                        }
                        "requiredSignUpAttributes" => {
                            builder = builder.set_required_sign_up_attributes(
                                    crate::protocol_serde::shape_list_of_required_sign_up_attributes_element::de_list_of_required_sign_up_attributes_element(tokens)?
                                );
                        }
                        "signInMethod" => {
                            builder = builder.set_sign_in_method(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::SignInMethod::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "userPoolName" => {
                            builder = builder.set_user_pool_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "verificationMessage" => {
                            builder = builder.set_verification_message(
                                    crate::protocol_serde::shape_create_backend_auth_verification_message_config::de_create_backend_auth_verification_message_config(tokens)?
                                );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(
                crate::serde_util::create_backend_auth_user_pool_config_correct_errors(builder).build(),
            ))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
