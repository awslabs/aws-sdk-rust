// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>An error returned if a request is not formed properly.</p>
    BadRequestException(crate::error::BadRequestException),
    /// <p>An error returned if there's a temporary issue with the service.</p>
    GatewayTimeoutException(crate::error::GatewayTimeoutException),
    /// <p>An error returned when a specific resource type is not found.</p>
    NotFoundException(crate::error::NotFoundException),
    /// <p>An error that is returned when a limit of a specific type has been exceeded.</p>
    TooManyRequestsException(crate::error::TooManyRequestsException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::BadRequestException(inner) => inner.fmt(f),
            Error::GatewayTimeoutException(inner) => inner.fmt(f),
            Error::NotFoundException(inner) => inner.fmt(f),
            Error::TooManyRequestsException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CloneBackendError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CloneBackendError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CloneBackendError> for Error {
    fn from(err: crate::error::CloneBackendError) -> Self {
        match err {
            crate::error::CloneBackendError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CloneBackendError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::error::CloneBackendError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CloneBackendError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CloneBackendError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateBackendError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateBackendError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateBackendError> for Error {
    fn from(err: crate::error::CreateBackendError) -> Self {
        match err {
            crate::error::CreateBackendError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateBackendError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::error::CreateBackendError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateBackendError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateBackendError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateBackendAPIError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateBackendAPIError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateBackendAPIError> for Error {
    fn from(err: crate::error::CreateBackendAPIError) -> Self {
        match err {
            crate::error::CreateBackendAPIError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateBackendAPIError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::error::CreateBackendAPIError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateBackendAPIError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateBackendAPIError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateBackendAuthError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateBackendAuthError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateBackendAuthError> for Error {
    fn from(err: crate::error::CreateBackendAuthError) -> Self {
        match err {
            crate::error::CreateBackendAuthError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateBackendAuthError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::error::CreateBackendAuthError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateBackendAuthError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateBackendAuthError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateBackendConfigError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateBackendConfigError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateBackendConfigError> for Error {
    fn from(err: crate::error::CreateBackendConfigError) -> Self {
        match err {
            crate::error::CreateBackendConfigError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateBackendConfigError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::error::CreateBackendConfigError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateBackendConfigError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateBackendConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateBackendStorageError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateBackendStorageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateBackendStorageError> for Error {
    fn from(err: crate::error::CreateBackendStorageError) -> Self {
        match err {
            crate::error::CreateBackendStorageError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateBackendStorageError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::error::CreateBackendStorageError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateBackendStorageError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateBackendStorageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateTokenError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateTokenError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateTokenError> for Error {
    fn from(err: crate::error::CreateTokenError) -> Self {
        match err {
            crate::error::CreateTokenError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateTokenError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::error::CreateTokenError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateTokenError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateTokenError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteBackendError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteBackendError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteBackendError> for Error {
    fn from(err: crate::error::DeleteBackendError) -> Self {
        match err {
            crate::error::DeleteBackendError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteBackendError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::error::DeleteBackendError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteBackendError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteBackendError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteBackendAPIError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteBackendAPIError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteBackendAPIError> for Error {
    fn from(err: crate::error::DeleteBackendAPIError) -> Self {
        match err {
            crate::error::DeleteBackendAPIError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteBackendAPIError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::error::DeleteBackendAPIError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteBackendAPIError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteBackendAPIError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteBackendAuthError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteBackendAuthError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteBackendAuthError> for Error {
    fn from(err: crate::error::DeleteBackendAuthError) -> Self {
        match err {
            crate::error::DeleteBackendAuthError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteBackendAuthError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::error::DeleteBackendAuthError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteBackendAuthError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteBackendAuthError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteBackendStorageError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteBackendStorageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteBackendStorageError> for Error {
    fn from(err: crate::error::DeleteBackendStorageError) -> Self {
        match err {
            crate::error::DeleteBackendStorageError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteBackendStorageError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::error::DeleteBackendStorageError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteBackendStorageError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteBackendStorageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteTokenError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteTokenError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteTokenError> for Error {
    fn from(err: crate::error::DeleteTokenError) -> Self {
        match err {
            crate::error::DeleteTokenError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteTokenError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::error::DeleteTokenError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteTokenError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteTokenError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GenerateBackendAPIModelsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GenerateBackendAPIModelsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GenerateBackendAPIModelsError> for Error {
    fn from(err: crate::error::GenerateBackendAPIModelsError) -> Self {
        match err {
            crate::error::GenerateBackendAPIModelsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GenerateBackendAPIModelsError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::error::GenerateBackendAPIModelsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GenerateBackendAPIModelsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GenerateBackendAPIModelsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetBackendError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetBackendError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetBackendError> for Error {
    fn from(err: crate::error::GetBackendError) -> Self {
        match err {
            crate::error::GetBackendError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetBackendError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::error::GetBackendError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetBackendError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetBackendError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetBackendAPIError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetBackendAPIError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetBackendAPIError> for Error {
    fn from(err: crate::error::GetBackendAPIError) -> Self {
        match err {
            crate::error::GetBackendAPIError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetBackendAPIError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::error::GetBackendAPIError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetBackendAPIError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetBackendAPIError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetBackendAPIModelsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetBackendAPIModelsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetBackendAPIModelsError> for Error {
    fn from(err: crate::error::GetBackendAPIModelsError) -> Self {
        match err {
            crate::error::GetBackendAPIModelsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetBackendAPIModelsError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::error::GetBackendAPIModelsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetBackendAPIModelsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetBackendAPIModelsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetBackendAuthError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetBackendAuthError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetBackendAuthError> for Error {
    fn from(err: crate::error::GetBackendAuthError) -> Self {
        match err {
            crate::error::GetBackendAuthError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetBackendAuthError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::error::GetBackendAuthError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetBackendAuthError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetBackendAuthError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetBackendJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetBackendJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetBackendJobError> for Error {
    fn from(err: crate::error::GetBackendJobError) -> Self {
        match err {
            crate::error::GetBackendJobError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetBackendJobError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::error::GetBackendJobError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetBackendJobError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetBackendJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetBackendStorageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetBackendStorageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetBackendStorageError> for Error {
    fn from(err: crate::error::GetBackendStorageError) -> Self {
        match err {
            crate::error::GetBackendStorageError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetBackendStorageError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::error::GetBackendStorageError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetBackendStorageError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetBackendStorageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetTokenError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetTokenError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetTokenError> for Error {
    fn from(err: crate::error::GetTokenError) -> Self {
        match err {
            crate::error::GetTokenError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetTokenError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::error::GetTokenError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetTokenError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetTokenError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ImportBackendAuthError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ImportBackendAuthError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ImportBackendAuthError> for Error {
    fn from(err: crate::error::ImportBackendAuthError) -> Self {
        match err {
            crate::error::ImportBackendAuthError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ImportBackendAuthError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::error::ImportBackendAuthError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ImportBackendAuthError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ImportBackendAuthError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ImportBackendStorageError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ImportBackendStorageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ImportBackendStorageError> for Error {
    fn from(err: crate::error::ImportBackendStorageError) -> Self {
        match err {
            crate::error::ImportBackendStorageError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ImportBackendStorageError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::error::ImportBackendStorageError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ImportBackendStorageError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ImportBackendStorageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListBackendJobsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListBackendJobsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListBackendJobsError> for Error {
    fn from(err: crate::error::ListBackendJobsError) -> Self {
        match err {
            crate::error::ListBackendJobsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListBackendJobsError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::error::ListBackendJobsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListBackendJobsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListBackendJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListS3BucketsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListS3BucketsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListS3BucketsError> for Error {
    fn from(err: crate::error::ListS3BucketsError) -> Self {
        match err {
            crate::error::ListS3BucketsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListS3BucketsError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::error::ListS3BucketsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListS3BucketsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListS3BucketsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RemoveAllBackendsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RemoveAllBackendsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RemoveAllBackendsError> for Error {
    fn from(err: crate::error::RemoveAllBackendsError) -> Self {
        match err {
            crate::error::RemoveAllBackendsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::RemoveAllBackendsError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::error::RemoveAllBackendsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::RemoveAllBackendsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::RemoveAllBackendsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RemoveBackendConfigError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RemoveBackendConfigError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RemoveBackendConfigError> for Error {
    fn from(err: crate::error::RemoveBackendConfigError) -> Self {
        match err {
            crate::error::RemoveBackendConfigError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::RemoveBackendConfigError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::error::RemoveBackendConfigError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::RemoveBackendConfigError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::RemoveBackendConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateBackendAPIError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateBackendAPIError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateBackendAPIError> for Error {
    fn from(err: crate::error::UpdateBackendAPIError) -> Self {
        match err {
            crate::error::UpdateBackendAPIError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateBackendAPIError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::error::UpdateBackendAPIError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateBackendAPIError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateBackendAPIError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateBackendAuthError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateBackendAuthError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateBackendAuthError> for Error {
    fn from(err: crate::error::UpdateBackendAuthError) -> Self {
        match err {
            crate::error::UpdateBackendAuthError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateBackendAuthError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::error::UpdateBackendAuthError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateBackendAuthError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateBackendAuthError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateBackendConfigError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateBackendConfigError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateBackendConfigError> for Error {
    fn from(err: crate::error::UpdateBackendConfigError) -> Self {
        match err {
            crate::error::UpdateBackendConfigError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateBackendConfigError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::error::UpdateBackendConfigError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateBackendConfigError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateBackendConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateBackendJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateBackendJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateBackendJobError> for Error {
    fn from(err: crate::error::UpdateBackendJobError) -> Self {
        match err {
            crate::error::UpdateBackendJobError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateBackendJobError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::error::UpdateBackendJobError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateBackendJobError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateBackendJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateBackendStorageError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateBackendStorageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateBackendStorageError> for Error {
    fn from(err: crate::error::UpdateBackendStorageError) -> Self {
        match err {
            crate::error::UpdateBackendStorageError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateBackendStorageError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::error::UpdateBackendStorageError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateBackendStorageError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateBackendStorageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::BadRequestException(e) => e.request_id(),
            Self::GatewayTimeoutException(e) => e.request_id(),
            Self::NotFoundException(e) => e.request_id(),
            Self::TooManyRequestsException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
