// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn create_backend_auth_resource_config_correct_errors(
    mut builder: crate::types::builders::CreateBackendAuthResourceConfigBuilder,
) -> crate::types::builders::CreateBackendAuthResourceConfigBuilder {
    if builder.auth_resources.is_none() {
        builder.auth_resources = "no value was set".parse::<crate::types::AuthResources>().ok()
    }
    if builder.service.is_none() {
        builder.service = "no value was set".parse::<crate::types::Service>().ok()
    }
    if builder.user_pool_configs.is_none() {
        builder.user_pool_configs = {
            let builder = crate::types::builders::CreateBackendAuthUserPoolConfigBuilder::default();
            Some(crate::serde_util::create_backend_auth_user_pool_config_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_backend_storage_resource_config_correct_errors(
    mut builder: crate::types::builders::GetBackendStorageResourceConfigBuilder,
) -> crate::types::builders::GetBackendStorageResourceConfigBuilder {
    if builder.imported.is_none() {
        builder.imported = Some(Default::default())
    }
    if builder.service_name.is_none() {
        builder.service_name = "no value was set".parse::<crate::types::ServiceName>().ok()
    }
    builder
}

pub(crate) fn backend_job_resp_obj_correct_errors(
    mut builder: crate::types::builders::BackendJobRespObjBuilder,
) -> crate::types::builders::BackendJobRespObjBuilder {
    if builder.app_id.is_none() {
        builder.app_id = Some(Default::default())
    }
    if builder.backend_environment_name.is_none() {
        builder.backend_environment_name = Some(Default::default())
    }
    builder
}

pub(crate) fn backend_storage_permissions_correct_errors(
    mut builder: crate::types::builders::BackendStoragePermissionsBuilder,
) -> crate::types::builders::BackendStoragePermissionsBuilder {
    if builder.authenticated.is_none() {
        builder.authenticated = Some(Default::default())
    }
    builder
}

pub(crate) fn create_backend_auth_identity_pool_config_correct_errors(
    mut builder: crate::types::builders::CreateBackendAuthIdentityPoolConfigBuilder,
) -> crate::types::builders::CreateBackendAuthIdentityPoolConfigBuilder {
    if builder.identity_pool_name.is_none() {
        builder.identity_pool_name = Some(Default::default())
    }
    if builder.unauthenticated_login.is_none() {
        builder.unauthenticated_login = Some(Default::default())
    }
    builder
}

pub(crate) fn create_backend_auth_user_pool_config_correct_errors(
    mut builder: crate::types::builders::CreateBackendAuthUserPoolConfigBuilder,
) -> crate::types::builders::CreateBackendAuthUserPoolConfigBuilder {
    if builder.required_sign_up_attributes.is_none() {
        builder.required_sign_up_attributes = Some(Default::default())
    }
    if builder.sign_in_method.is_none() {
        builder.sign_in_method = "no value was set".parse::<crate::types::SignInMethod>().ok()
    }
    if builder.user_pool_name.is_none() {
        builder.user_pool_name = Some(Default::default())
    }
    builder
}

pub(crate) fn create_backend_auth_forgot_password_config_correct_errors(
    mut builder: crate::types::builders::CreateBackendAuthForgotPasswordConfigBuilder,
) -> crate::types::builders::CreateBackendAuthForgotPasswordConfigBuilder {
    if builder.delivery_method.is_none() {
        builder.delivery_method = "no value was set".parse::<crate::types::DeliveryMethod>().ok()
    }
    builder
}

pub(crate) fn create_backend_auth_mfa_config_correct_errors(
    mut builder: crate::types::builders::CreateBackendAuthMfaConfigBuilder,
) -> crate::types::builders::CreateBackendAuthMfaConfigBuilder {
    if builder.mfa_mode.is_none() {
        builder.mfa_mode = "no value was set".parse::<crate::types::MfaMode>().ok()
    }
    builder
}

pub(crate) fn create_backend_auth_o_auth_config_correct_errors(
    mut builder: crate::types::builders::CreateBackendAuthOAuthConfigBuilder,
) -> crate::types::builders::CreateBackendAuthOAuthConfigBuilder {
    if builder.o_auth_grant_type.is_none() {
        builder.o_auth_grant_type = "no value was set".parse::<crate::types::OAuthGrantType>().ok()
    }
    if builder.o_auth_scopes.is_none() {
        builder.o_auth_scopes = Some(Default::default())
    }
    if builder.redirect_sign_in_uris.is_none() {
        builder.redirect_sign_in_uris = Some(Default::default())
    }
    if builder.redirect_sign_out_uris.is_none() {
        builder.redirect_sign_out_uris = Some(Default::default())
    }
    builder
}

pub(crate) fn create_backend_auth_password_policy_config_correct_errors(
    mut builder: crate::types::builders::CreateBackendAuthPasswordPolicyConfigBuilder,
) -> crate::types::builders::CreateBackendAuthPasswordPolicyConfigBuilder {
    if builder.minimum_length.is_none() {
        builder.minimum_length = Some(Default::default())
    }
    builder
}

pub(crate) fn create_backend_auth_verification_message_config_correct_errors(
    mut builder: crate::types::builders::CreateBackendAuthVerificationMessageConfigBuilder,
) -> crate::types::builders::CreateBackendAuthVerificationMessageConfigBuilder {
    if builder.delivery_method.is_none() {
        builder.delivery_method = "no value was set".parse::<crate::types::DeliveryMethod>().ok()
    }
    builder
}
