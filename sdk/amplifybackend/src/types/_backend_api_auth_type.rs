// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the auth types for your configured data models.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BackendApiAuthType {
    /// <p>Describes the authentication mode.</p>
    #[doc(hidden)]
    pub mode: std::option::Option<crate::types::Mode>,
    /// <p>Describes settings for the authentication mode.</p>
    #[doc(hidden)]
    pub settings: std::option::Option<crate::types::BackendApiAppSyncAuthSettings>,
}
impl BackendApiAuthType {
    /// <p>Describes the authentication mode.</p>
    pub fn mode(&self) -> std::option::Option<&crate::types::Mode> {
        self.mode.as_ref()
    }
    /// <p>Describes settings for the authentication mode.</p>
    pub fn settings(&self) -> std::option::Option<&crate::types::BackendApiAppSyncAuthSettings> {
        self.settings.as_ref()
    }
}
impl BackendApiAuthType {
    /// Creates a new builder-style object to manufacture [`BackendApiAuthType`](crate::types::BackendApiAuthType).
    pub fn builder() -> crate::types::builders::BackendApiAuthTypeBuilder {
        crate::types::builders::BackendApiAuthTypeBuilder::default()
    }
}

/// A builder for [`BackendApiAuthType`](crate::types::BackendApiAuthType).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BackendApiAuthTypeBuilder {
    pub(crate) mode: std::option::Option<crate::types::Mode>,
    pub(crate) settings: std::option::Option<crate::types::BackendApiAppSyncAuthSettings>,
}
impl BackendApiAuthTypeBuilder {
    /// <p>Describes the authentication mode.</p>
    pub fn mode(mut self, input: crate::types::Mode) -> Self {
        self.mode = Some(input);
        self
    }
    /// <p>Describes the authentication mode.</p>
    pub fn set_mode(mut self, input: std::option::Option<crate::types::Mode>) -> Self {
        self.mode = input;
        self
    }
    /// <p>Describes settings for the authentication mode.</p>
    pub fn settings(mut self, input: crate::types::BackendApiAppSyncAuthSettings) -> Self {
        self.settings = Some(input);
        self
    }
    /// <p>Describes settings for the authentication mode.</p>
    pub fn set_settings(
        mut self,
        input: std::option::Option<crate::types::BackendApiAppSyncAuthSettings>,
    ) -> Self {
        self.settings = input;
        self
    }
    /// Consumes the builder and constructs a [`BackendApiAuthType`](crate::types::BackendApiAuthType).
    pub fn build(self) -> crate::types::BackendApiAuthType {
        crate::types::BackendApiAuthType {
            mode: self.mode,
            settings: self.settings,
        }
    }
}
