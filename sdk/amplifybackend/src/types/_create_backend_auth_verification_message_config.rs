// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Creates an email or SMS verification message for the auth resource configured for your Amplify project.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateBackendAuthVerificationMessageConfig {
    /// <p>The type of verification message to send.</p>
    pub delivery_method: ::std::option::Option<crate::types::DeliveryMethod>,
    /// <p>The settings for the email message.</p>
    pub email_settings: ::std::option::Option<crate::types::EmailSettings>,
    /// <p>The settings for the SMS message.</p>
    pub sms_settings: ::std::option::Option<crate::types::SmsSettings>,
}
impl CreateBackendAuthVerificationMessageConfig {
    /// <p>The type of verification message to send.</p>
    pub fn delivery_method(&self) -> ::std::option::Option<&crate::types::DeliveryMethod> {
        self.delivery_method.as_ref()
    }
    /// <p>The settings for the email message.</p>
    pub fn email_settings(&self) -> ::std::option::Option<&crate::types::EmailSettings> {
        self.email_settings.as_ref()
    }
    /// <p>The settings for the SMS message.</p>
    pub fn sms_settings(&self) -> ::std::option::Option<&crate::types::SmsSettings> {
        self.sms_settings.as_ref()
    }
}
impl ::std::fmt::Debug for CreateBackendAuthVerificationMessageConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateBackendAuthVerificationMessageConfig");
        formatter.field("delivery_method", &self.delivery_method);
        formatter.field("email_settings", &"*** Sensitive Data Redacted ***");
        formatter.field("sms_settings", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl CreateBackendAuthVerificationMessageConfig {
    /// Creates a new builder-style object to manufacture [`CreateBackendAuthVerificationMessageConfig`](crate::types::CreateBackendAuthVerificationMessageConfig).
    pub fn builder() -> crate::types::builders::CreateBackendAuthVerificationMessageConfigBuilder {
        crate::types::builders::CreateBackendAuthVerificationMessageConfigBuilder::default()
    }
}

/// A builder for [`CreateBackendAuthVerificationMessageConfig`](crate::types::CreateBackendAuthVerificationMessageConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct CreateBackendAuthVerificationMessageConfigBuilder {
    pub(crate) delivery_method: ::std::option::Option<crate::types::DeliveryMethod>,
    pub(crate) email_settings: ::std::option::Option<crate::types::EmailSettings>,
    pub(crate) sms_settings: ::std::option::Option<crate::types::SmsSettings>,
}
impl CreateBackendAuthVerificationMessageConfigBuilder {
    /// <p>The type of verification message to send.</p>
    /// This field is required.
    pub fn delivery_method(mut self, input: crate::types::DeliveryMethod) -> Self {
        self.delivery_method = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of verification message to send.</p>
    pub fn set_delivery_method(mut self, input: ::std::option::Option<crate::types::DeliveryMethod>) -> Self {
        self.delivery_method = input;
        self
    }
    /// <p>The type of verification message to send.</p>
    pub fn get_delivery_method(&self) -> &::std::option::Option<crate::types::DeliveryMethod> {
        &self.delivery_method
    }
    /// <p>The settings for the email message.</p>
    pub fn email_settings(mut self, input: crate::types::EmailSettings) -> Self {
        self.email_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The settings for the email message.</p>
    pub fn set_email_settings(mut self, input: ::std::option::Option<crate::types::EmailSettings>) -> Self {
        self.email_settings = input;
        self
    }
    /// <p>The settings for the email message.</p>
    pub fn get_email_settings(&self) -> &::std::option::Option<crate::types::EmailSettings> {
        &self.email_settings
    }
    /// <p>The settings for the SMS message.</p>
    pub fn sms_settings(mut self, input: crate::types::SmsSettings) -> Self {
        self.sms_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The settings for the SMS message.</p>
    pub fn set_sms_settings(mut self, input: ::std::option::Option<crate::types::SmsSettings>) -> Self {
        self.sms_settings = input;
        self
    }
    /// <p>The settings for the SMS message.</p>
    pub fn get_sms_settings(&self) -> &::std::option::Option<crate::types::SmsSettings> {
        &self.sms_settings
    }
    /// Consumes the builder and constructs a [`CreateBackendAuthVerificationMessageConfig`](crate::types::CreateBackendAuthVerificationMessageConfig).
    pub fn build(self) -> crate::types::CreateBackendAuthVerificationMessageConfig {
        crate::types::CreateBackendAuthVerificationMessageConfig {
            delivery_method: self.delivery_method,
            email_settings: self.email_settings,
            sms_settings: self.sms_settings,
        }
    }
}
impl ::std::fmt::Debug for CreateBackendAuthVerificationMessageConfigBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateBackendAuthVerificationMessageConfigBuilder");
        formatter.field("delivery_method", &self.delivery_method);
        formatter.field("email_settings", &"*** Sensitive Data Redacted ***");
        formatter.field("sms_settings", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
