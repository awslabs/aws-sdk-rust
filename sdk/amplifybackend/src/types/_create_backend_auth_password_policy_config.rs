// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The password policy configuration for the backend to your Amplify project.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateBackendAuthPasswordPolicyConfig {
    /// <p>Additional constraints for the password used to access the backend of your Amplify project.</p>
    #[doc(hidden)]
    pub additional_constraints:
        std::option::Option<std::vec::Vec<crate::types::AdditionalConstraintsElement>>,
    /// <p>The minimum length of the password used to access the backend of your Amplify project.</p>
    #[doc(hidden)]
    pub minimum_length: f64,
}
impl CreateBackendAuthPasswordPolicyConfig {
    /// <p>Additional constraints for the password used to access the backend of your Amplify project.</p>
    pub fn additional_constraints(
        &self,
    ) -> std::option::Option<&[crate::types::AdditionalConstraintsElement]> {
        self.additional_constraints.as_deref()
    }
    /// <p>The minimum length of the password used to access the backend of your Amplify project.</p>
    pub fn minimum_length(&self) -> f64 {
        self.minimum_length
    }
}
impl CreateBackendAuthPasswordPolicyConfig {
    /// Creates a new builder-style object to manufacture [`CreateBackendAuthPasswordPolicyConfig`](crate::types::CreateBackendAuthPasswordPolicyConfig).
    pub fn builder() -> crate::types::builders::CreateBackendAuthPasswordPolicyConfigBuilder {
        crate::types::builders::CreateBackendAuthPasswordPolicyConfigBuilder::default()
    }
}

/// A builder for [`CreateBackendAuthPasswordPolicyConfig`](crate::types::CreateBackendAuthPasswordPolicyConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateBackendAuthPasswordPolicyConfigBuilder {
    pub(crate) additional_constraints:
        std::option::Option<std::vec::Vec<crate::types::AdditionalConstraintsElement>>,
    pub(crate) minimum_length: std::option::Option<f64>,
}
impl CreateBackendAuthPasswordPolicyConfigBuilder {
    /// Appends an item to `additional_constraints`.
    ///
    /// To override the contents of this collection use [`set_additional_constraints`](Self::set_additional_constraints).
    ///
    /// <p>Additional constraints for the password used to access the backend of your Amplify project.</p>
    pub fn additional_constraints(
        mut self,
        input: crate::types::AdditionalConstraintsElement,
    ) -> Self {
        let mut v = self.additional_constraints.unwrap_or_default();
        v.push(input);
        self.additional_constraints = Some(v);
        self
    }
    /// <p>Additional constraints for the password used to access the backend of your Amplify project.</p>
    pub fn set_additional_constraints(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AdditionalConstraintsElement>>,
    ) -> Self {
        self.additional_constraints = input;
        self
    }
    /// <p>The minimum length of the password used to access the backend of your Amplify project.</p>
    pub fn minimum_length(mut self, input: f64) -> Self {
        self.minimum_length = Some(input);
        self
    }
    /// <p>The minimum length of the password used to access the backend of your Amplify project.</p>
    pub fn set_minimum_length(mut self, input: std::option::Option<f64>) -> Self {
        self.minimum_length = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateBackendAuthPasswordPolicyConfig`](crate::types::CreateBackendAuthPasswordPolicyConfig).
    pub fn build(self) -> crate::types::CreateBackendAuthPasswordPolicyConfig {
        crate::types::CreateBackendAuthPasswordPolicyConfig {
            additional_constraints: self.additional_constraints,
            minimum_length: self.minimum_length.unwrap_or_default(),
        }
    }
}
