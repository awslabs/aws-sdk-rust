// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p><b>(DEPRECATED)</b> Describes the forgot password policy for authenticating into the Amplify app.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateBackendAuthForgotPasswordConfig {
    /// <p><b>(DEPRECATED)</b> Describes which mode to use (either SMS or email) to deliver messages to app users who want to recover their password.</p>
    pub delivery_method: ::std::option::Option<crate::types::DeliveryMethod>,
    /// <p><b>(DEPRECATED)</b> The configuration for the email sent when an app user forgets their password.</p>
    pub email_settings: ::std::option::Option<crate::types::EmailSettings>,
    /// <p><b>(DEPRECATED)</b> The configuration for the SMS message sent when an app user forgets their password.</p>
    pub sms_settings: ::std::option::Option<crate::types::SmsSettings>,
}
impl CreateBackendAuthForgotPasswordConfig {
    /// <p><b>(DEPRECATED)</b> Describes which mode to use (either SMS or email) to deliver messages to app users who want to recover their password.</p>
    pub fn delivery_method(&self) -> ::std::option::Option<&crate::types::DeliveryMethod> {
        self.delivery_method.as_ref()
    }
    /// <p><b>(DEPRECATED)</b> The configuration for the email sent when an app user forgets their password.</p>
    pub fn email_settings(&self) -> ::std::option::Option<&crate::types::EmailSettings> {
        self.email_settings.as_ref()
    }
    /// <p><b>(DEPRECATED)</b> The configuration for the SMS message sent when an app user forgets their password.</p>
    pub fn sms_settings(&self) -> ::std::option::Option<&crate::types::SmsSettings> {
        self.sms_settings.as_ref()
    }
}
impl ::std::fmt::Debug for CreateBackendAuthForgotPasswordConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateBackendAuthForgotPasswordConfig");
        formatter.field("delivery_method", &self.delivery_method);
        formatter.field("email_settings", &"*** Sensitive Data Redacted ***");
        formatter.field("sms_settings", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl CreateBackendAuthForgotPasswordConfig {
    /// Creates a new builder-style object to manufacture [`CreateBackendAuthForgotPasswordConfig`](crate::types::CreateBackendAuthForgotPasswordConfig).
    pub fn builder() -> crate::types::builders::CreateBackendAuthForgotPasswordConfigBuilder {
        crate::types::builders::CreateBackendAuthForgotPasswordConfigBuilder::default()
    }
}

/// A builder for [`CreateBackendAuthForgotPasswordConfig`](crate::types::CreateBackendAuthForgotPasswordConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct CreateBackendAuthForgotPasswordConfigBuilder {
    pub(crate) delivery_method: ::std::option::Option<crate::types::DeliveryMethod>,
    pub(crate) email_settings: ::std::option::Option<crate::types::EmailSettings>,
    pub(crate) sms_settings: ::std::option::Option<crate::types::SmsSettings>,
}
impl CreateBackendAuthForgotPasswordConfigBuilder {
    /// <p><b>(DEPRECATED)</b> Describes which mode to use (either SMS or email) to deliver messages to app users who want to recover their password.</p>
    /// This field is required.
    pub fn delivery_method(mut self, input: crate::types::DeliveryMethod) -> Self {
        self.delivery_method = ::std::option::Option::Some(input);
        self
    }
    /// <p><b>(DEPRECATED)</b> Describes which mode to use (either SMS or email) to deliver messages to app users who want to recover their password.</p>
    pub fn set_delivery_method(mut self, input: ::std::option::Option<crate::types::DeliveryMethod>) -> Self {
        self.delivery_method = input;
        self
    }
    /// <p><b>(DEPRECATED)</b> Describes which mode to use (either SMS or email) to deliver messages to app users who want to recover their password.</p>
    pub fn get_delivery_method(&self) -> &::std::option::Option<crate::types::DeliveryMethod> {
        &self.delivery_method
    }
    /// <p><b>(DEPRECATED)</b> The configuration for the email sent when an app user forgets their password.</p>
    pub fn email_settings(mut self, input: crate::types::EmailSettings) -> Self {
        self.email_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p><b>(DEPRECATED)</b> The configuration for the email sent when an app user forgets their password.</p>
    pub fn set_email_settings(mut self, input: ::std::option::Option<crate::types::EmailSettings>) -> Self {
        self.email_settings = input;
        self
    }
    /// <p><b>(DEPRECATED)</b> The configuration for the email sent when an app user forgets their password.</p>
    pub fn get_email_settings(&self) -> &::std::option::Option<crate::types::EmailSettings> {
        &self.email_settings
    }
    /// <p><b>(DEPRECATED)</b> The configuration for the SMS message sent when an app user forgets their password.</p>
    pub fn sms_settings(mut self, input: crate::types::SmsSettings) -> Self {
        self.sms_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p><b>(DEPRECATED)</b> The configuration for the SMS message sent when an app user forgets their password.</p>
    pub fn set_sms_settings(mut self, input: ::std::option::Option<crate::types::SmsSettings>) -> Self {
        self.sms_settings = input;
        self
    }
    /// <p><b>(DEPRECATED)</b> The configuration for the SMS message sent when an app user forgets their password.</p>
    pub fn get_sms_settings(&self) -> &::std::option::Option<crate::types::SmsSettings> {
        &self.sms_settings
    }
    /// Consumes the builder and constructs a [`CreateBackendAuthForgotPasswordConfig`](crate::types::CreateBackendAuthForgotPasswordConfig).
    pub fn build(self) -> crate::types::CreateBackendAuthForgotPasswordConfig {
        crate::types::CreateBackendAuthForgotPasswordConfig {
            delivery_method: self.delivery_method,
            email_settings: self.email_settings,
            sms_settings: self.sms_settings,
        }
    }
}
impl ::std::fmt::Debug for CreateBackendAuthForgotPasswordConfigBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateBackendAuthForgotPasswordConfigBuilder");
        formatter.field("delivery_method", &self.delivery_method);
        formatter.field("email_settings", &"*** Sensitive Data Redacted ***");
        formatter.field("sms_settings", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
