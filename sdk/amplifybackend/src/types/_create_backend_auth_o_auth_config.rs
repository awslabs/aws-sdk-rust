// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Creates the OAuth configuration for your Amplify project.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateBackendAuthOAuthConfig {
    /// <p>The domain prefix for your Amplify app.</p>
    pub domain_prefix: ::std::option::Option<::std::string::String>,
    /// <p>The OAuth grant type that you use to allow app users to authenticate from your Amplify app.</p>
    pub o_auth_grant_type: ::std::option::Option<crate::types::OAuthGrantType>,
    /// <p>List of OAuth-related flows used to allow your app users to authenticate from your Amplify app.</p>
    pub o_auth_scopes: ::std::option::Option<::std::vec::Vec<crate::types::OAuthScopesElement>>,
    /// <p>The redirected URI for signing in to your Amplify app.</p>
    pub redirect_sign_in_uris: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Redirect URLs that OAuth uses when a user signs out of an Amplify app.</p>
    pub redirect_sign_out_uris: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The settings for using social providers to access your Amplify app.</p>
    pub social_provider_settings: ::std::option::Option<crate::types::SocialProviderSettings>,
}
impl CreateBackendAuthOAuthConfig {
    /// <p>The domain prefix for your Amplify app.</p>
    pub fn domain_prefix(&self) -> ::std::option::Option<&str> {
        self.domain_prefix.as_deref()
    }
    /// <p>The OAuth grant type that you use to allow app users to authenticate from your Amplify app.</p>
    pub fn o_auth_grant_type(&self) -> ::std::option::Option<&crate::types::OAuthGrantType> {
        self.o_auth_grant_type.as_ref()
    }
    /// <p>List of OAuth-related flows used to allow your app users to authenticate from your Amplify app.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.o_auth_scopes.is_none()`.
    pub fn o_auth_scopes(&self) -> &[crate::types::OAuthScopesElement] {
        self.o_auth_scopes.as_deref().unwrap_or_default()
    }
    /// <p>The redirected URI for signing in to your Amplify app.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.redirect_sign_in_uris.is_none()`.
    pub fn redirect_sign_in_uris(&self) -> &[::std::string::String] {
        self.redirect_sign_in_uris.as_deref().unwrap_or_default()
    }
    /// <p>Redirect URLs that OAuth uses when a user signs out of an Amplify app.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.redirect_sign_out_uris.is_none()`.
    pub fn redirect_sign_out_uris(&self) -> &[::std::string::String] {
        self.redirect_sign_out_uris.as_deref().unwrap_or_default()
    }
    /// <p>The settings for using social providers to access your Amplify app.</p>
    pub fn social_provider_settings(&self) -> ::std::option::Option<&crate::types::SocialProviderSettings> {
        self.social_provider_settings.as_ref()
    }
}
impl CreateBackendAuthOAuthConfig {
    /// Creates a new builder-style object to manufacture [`CreateBackendAuthOAuthConfig`](crate::types::CreateBackendAuthOAuthConfig).
    pub fn builder() -> crate::types::builders::CreateBackendAuthOAuthConfigBuilder {
        crate::types::builders::CreateBackendAuthOAuthConfigBuilder::default()
    }
}

/// A builder for [`CreateBackendAuthOAuthConfig`](crate::types::CreateBackendAuthOAuthConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateBackendAuthOAuthConfigBuilder {
    pub(crate) domain_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) o_auth_grant_type: ::std::option::Option<crate::types::OAuthGrantType>,
    pub(crate) o_auth_scopes: ::std::option::Option<::std::vec::Vec<crate::types::OAuthScopesElement>>,
    pub(crate) redirect_sign_in_uris: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) redirect_sign_out_uris: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) social_provider_settings: ::std::option::Option<crate::types::SocialProviderSettings>,
}
impl CreateBackendAuthOAuthConfigBuilder {
    /// <p>The domain prefix for your Amplify app.</p>
    pub fn domain_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain prefix for your Amplify app.</p>
    pub fn set_domain_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_prefix = input;
        self
    }
    /// <p>The domain prefix for your Amplify app.</p>
    pub fn get_domain_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_prefix
    }
    /// <p>The OAuth grant type that you use to allow app users to authenticate from your Amplify app.</p>
    /// This field is required.
    pub fn o_auth_grant_type(mut self, input: crate::types::OAuthGrantType) -> Self {
        self.o_auth_grant_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The OAuth grant type that you use to allow app users to authenticate from your Amplify app.</p>
    pub fn set_o_auth_grant_type(mut self, input: ::std::option::Option<crate::types::OAuthGrantType>) -> Self {
        self.o_auth_grant_type = input;
        self
    }
    /// <p>The OAuth grant type that you use to allow app users to authenticate from your Amplify app.</p>
    pub fn get_o_auth_grant_type(&self) -> &::std::option::Option<crate::types::OAuthGrantType> {
        &self.o_auth_grant_type
    }
    /// Appends an item to `o_auth_scopes`.
    ///
    /// To override the contents of this collection use [`set_o_auth_scopes`](Self::set_o_auth_scopes).
    ///
    /// <p>List of OAuth-related flows used to allow your app users to authenticate from your Amplify app.</p>
    pub fn o_auth_scopes(mut self, input: crate::types::OAuthScopesElement) -> Self {
        let mut v = self.o_auth_scopes.unwrap_or_default();
        v.push(input);
        self.o_auth_scopes = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of OAuth-related flows used to allow your app users to authenticate from your Amplify app.</p>
    pub fn set_o_auth_scopes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::OAuthScopesElement>>) -> Self {
        self.o_auth_scopes = input;
        self
    }
    /// <p>List of OAuth-related flows used to allow your app users to authenticate from your Amplify app.</p>
    pub fn get_o_auth_scopes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::OAuthScopesElement>> {
        &self.o_auth_scopes
    }
    /// Appends an item to `redirect_sign_in_uris`.
    ///
    /// To override the contents of this collection use [`set_redirect_sign_in_uris`](Self::set_redirect_sign_in_uris).
    ///
    /// <p>The redirected URI for signing in to your Amplify app.</p>
    pub fn redirect_sign_in_uris(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.redirect_sign_in_uris.unwrap_or_default();
        v.push(input.into());
        self.redirect_sign_in_uris = ::std::option::Option::Some(v);
        self
    }
    /// <p>The redirected URI for signing in to your Amplify app.</p>
    pub fn set_redirect_sign_in_uris(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.redirect_sign_in_uris = input;
        self
    }
    /// <p>The redirected URI for signing in to your Amplify app.</p>
    pub fn get_redirect_sign_in_uris(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.redirect_sign_in_uris
    }
    /// Appends an item to `redirect_sign_out_uris`.
    ///
    /// To override the contents of this collection use [`set_redirect_sign_out_uris`](Self::set_redirect_sign_out_uris).
    ///
    /// <p>Redirect URLs that OAuth uses when a user signs out of an Amplify app.</p>
    pub fn redirect_sign_out_uris(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.redirect_sign_out_uris.unwrap_or_default();
        v.push(input.into());
        self.redirect_sign_out_uris = ::std::option::Option::Some(v);
        self
    }
    /// <p>Redirect URLs that OAuth uses when a user signs out of an Amplify app.</p>
    pub fn set_redirect_sign_out_uris(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.redirect_sign_out_uris = input;
        self
    }
    /// <p>Redirect URLs that OAuth uses when a user signs out of an Amplify app.</p>
    pub fn get_redirect_sign_out_uris(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.redirect_sign_out_uris
    }
    /// <p>The settings for using social providers to access your Amplify app.</p>
    pub fn social_provider_settings(mut self, input: crate::types::SocialProviderSettings) -> Self {
        self.social_provider_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The settings for using social providers to access your Amplify app.</p>
    pub fn set_social_provider_settings(mut self, input: ::std::option::Option<crate::types::SocialProviderSettings>) -> Self {
        self.social_provider_settings = input;
        self
    }
    /// <p>The settings for using social providers to access your Amplify app.</p>
    pub fn get_social_provider_settings(&self) -> &::std::option::Option<crate::types::SocialProviderSettings> {
        &self.social_provider_settings
    }
    /// Consumes the builder and constructs a [`CreateBackendAuthOAuthConfig`](crate::types::CreateBackendAuthOAuthConfig).
    pub fn build(self) -> crate::types::CreateBackendAuthOAuthConfig {
        crate::types::CreateBackendAuthOAuthConfig {
            domain_prefix: self.domain_prefix,
            o_auth_grant_type: self.o_auth_grant_type,
            o_auth_scopes: self.o_auth_scopes,
            redirect_sign_in_uris: self.redirect_sign_in_uris,
            redirect_sign_out_uris: self.redirect_sign_out_uris,
            social_provider_settings: self.social_provider_settings,
        }
    }
}
