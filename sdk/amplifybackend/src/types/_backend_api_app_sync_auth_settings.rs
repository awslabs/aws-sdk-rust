// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The authentication settings for accessing provisioned data models in your Amplify project.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BackendApiAppSyncAuthSettings {
    /// <p>The Amazon Cognito user pool ID, if Amazon Cognito was used as an authentication setting to access your data models.</p>
    #[doc(hidden)]
    pub cognito_user_pool_id: std::option::Option<std::string::String>,
    /// <p>The API key description for API_KEY, if it was used as an authentication mechanism to access your data models.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The API key expiration time for API_KEY, if it was used as an authentication mechanism to access your data models.</p>
    #[doc(hidden)]
    pub expiration_time: f64,
    /// <p>The expiry time for the OpenID authentication mechanism.</p>
    #[doc(hidden)]
    pub open_id_auth_ttl: std::option::Option<std::string::String>,
    /// <p>The clientID for openID, if openID was used as an authentication setting to access your data models.</p>
    #[doc(hidden)]
    pub open_id_client_id: std::option::Option<std::string::String>,
    /// <p>The expiry time for the OpenID authentication mechanism.</p>
    #[doc(hidden)]
    pub open_id_iat_ttl: std::option::Option<std::string::String>,
    /// <p>The openID issuer URL, if openID was used as an authentication setting to access your data models.</p>
    #[doc(hidden)]
    pub open_id_issue_url: std::option::Option<std::string::String>,
    /// <p>The OpenID provider name, if OpenID was used as an authentication mechanism to access your data models.</p>
    #[doc(hidden)]
    pub open_id_provider_name: std::option::Option<std::string::String>,
}
impl BackendApiAppSyncAuthSettings {
    /// <p>The Amazon Cognito user pool ID, if Amazon Cognito was used as an authentication setting to access your data models.</p>
    pub fn cognito_user_pool_id(&self) -> std::option::Option<&str> {
        self.cognito_user_pool_id.as_deref()
    }
    /// <p>The API key description for API_KEY, if it was used as an authentication mechanism to access your data models.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The API key expiration time for API_KEY, if it was used as an authentication mechanism to access your data models.</p>
    pub fn expiration_time(&self) -> f64 {
        self.expiration_time
    }
    /// <p>The expiry time for the OpenID authentication mechanism.</p>
    pub fn open_id_auth_ttl(&self) -> std::option::Option<&str> {
        self.open_id_auth_ttl.as_deref()
    }
    /// <p>The clientID for openID, if openID was used as an authentication setting to access your data models.</p>
    pub fn open_id_client_id(&self) -> std::option::Option<&str> {
        self.open_id_client_id.as_deref()
    }
    /// <p>The expiry time for the OpenID authentication mechanism.</p>
    pub fn open_id_iat_ttl(&self) -> std::option::Option<&str> {
        self.open_id_iat_ttl.as_deref()
    }
    /// <p>The openID issuer URL, if openID was used as an authentication setting to access your data models.</p>
    pub fn open_id_issue_url(&self) -> std::option::Option<&str> {
        self.open_id_issue_url.as_deref()
    }
    /// <p>The OpenID provider name, if OpenID was used as an authentication mechanism to access your data models.</p>
    pub fn open_id_provider_name(&self) -> std::option::Option<&str> {
        self.open_id_provider_name.as_deref()
    }
}
impl BackendApiAppSyncAuthSettings {
    /// Creates a new builder-style object to manufacture [`BackendApiAppSyncAuthSettings`](crate::types::BackendApiAppSyncAuthSettings).
    pub fn builder() -> crate::types::builders::BackendApiAppSyncAuthSettingsBuilder {
        crate::types::builders::BackendApiAppSyncAuthSettingsBuilder::default()
    }
}

/// A builder for [`BackendApiAppSyncAuthSettings`](crate::types::BackendApiAppSyncAuthSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BackendApiAppSyncAuthSettingsBuilder {
    pub(crate) cognito_user_pool_id: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) expiration_time: std::option::Option<f64>,
    pub(crate) open_id_auth_ttl: std::option::Option<std::string::String>,
    pub(crate) open_id_client_id: std::option::Option<std::string::String>,
    pub(crate) open_id_iat_ttl: std::option::Option<std::string::String>,
    pub(crate) open_id_issue_url: std::option::Option<std::string::String>,
    pub(crate) open_id_provider_name: std::option::Option<std::string::String>,
}
impl BackendApiAppSyncAuthSettingsBuilder {
    /// <p>The Amazon Cognito user pool ID, if Amazon Cognito was used as an authentication setting to access your data models.</p>
    pub fn cognito_user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.cognito_user_pool_id = Some(input.into());
        self
    }
    /// <p>The Amazon Cognito user pool ID, if Amazon Cognito was used as an authentication setting to access your data models.</p>
    pub fn set_cognito_user_pool_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.cognito_user_pool_id = input;
        self
    }
    /// <p>The API key description for API_KEY, if it was used as an authentication mechanism to access your data models.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The API key description for API_KEY, if it was used as an authentication mechanism to access your data models.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The API key expiration time for API_KEY, if it was used as an authentication mechanism to access your data models.</p>
    pub fn expiration_time(mut self, input: f64) -> Self {
        self.expiration_time = Some(input);
        self
    }
    /// <p>The API key expiration time for API_KEY, if it was used as an authentication mechanism to access your data models.</p>
    pub fn set_expiration_time(mut self, input: std::option::Option<f64>) -> Self {
        self.expiration_time = input;
        self
    }
    /// <p>The expiry time for the OpenID authentication mechanism.</p>
    pub fn open_id_auth_ttl(mut self, input: impl Into<std::string::String>) -> Self {
        self.open_id_auth_ttl = Some(input.into());
        self
    }
    /// <p>The expiry time for the OpenID authentication mechanism.</p>
    pub fn set_open_id_auth_ttl(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.open_id_auth_ttl = input;
        self
    }
    /// <p>The clientID for openID, if openID was used as an authentication setting to access your data models.</p>
    pub fn open_id_client_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.open_id_client_id = Some(input.into());
        self
    }
    /// <p>The clientID for openID, if openID was used as an authentication setting to access your data models.</p>
    pub fn set_open_id_client_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.open_id_client_id = input;
        self
    }
    /// <p>The expiry time for the OpenID authentication mechanism.</p>
    pub fn open_id_iat_ttl(mut self, input: impl Into<std::string::String>) -> Self {
        self.open_id_iat_ttl = Some(input.into());
        self
    }
    /// <p>The expiry time for the OpenID authentication mechanism.</p>
    pub fn set_open_id_iat_ttl(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.open_id_iat_ttl = input;
        self
    }
    /// <p>The openID issuer URL, if openID was used as an authentication setting to access your data models.</p>
    pub fn open_id_issue_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.open_id_issue_url = Some(input.into());
        self
    }
    /// <p>The openID issuer URL, if openID was used as an authentication setting to access your data models.</p>
    pub fn set_open_id_issue_url(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.open_id_issue_url = input;
        self
    }
    /// <p>The OpenID provider name, if OpenID was used as an authentication mechanism to access your data models.</p>
    pub fn open_id_provider_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.open_id_provider_name = Some(input.into());
        self
    }
    /// <p>The OpenID provider name, if OpenID was used as an authentication mechanism to access your data models.</p>
    pub fn set_open_id_provider_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.open_id_provider_name = input;
        self
    }
    /// Consumes the builder and constructs a [`BackendApiAppSyncAuthSettings`](crate::types::BackendApiAppSyncAuthSettings).
    pub fn build(self) -> crate::types::BackendApiAppSyncAuthSettings {
        crate::types::BackendApiAppSyncAuthSettings {
            cognito_user_pool_id: self.cognito_user_pool_id,
            description: self.description,
            expiration_time: self.expiration_time.unwrap_or_default(),
            open_id_auth_ttl: self.open_id_auth_ttl,
            open_id_client_id: self.open_id_client_id,
            open_id_iat_ttl: self.open_id_iat_ttl,
            open_id_issue_url: self.open_id_issue_url,
            open_id_provider_name: self.open_id_provider_name,
        }
    }
}
