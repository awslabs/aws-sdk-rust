// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `RequiredSignUpAttributesElement`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let requiredsignupattributeselement = unimplemented!();
/// match requiredsignupattributeselement {
///     RequiredSignUpAttributesElement::Address => { /* ... */ },
///     RequiredSignUpAttributesElement::Birthdate => { /* ... */ },
///     RequiredSignUpAttributesElement::Email => { /* ... */ },
///     RequiredSignUpAttributesElement::FamilyName => { /* ... */ },
///     RequiredSignUpAttributesElement::Gender => { /* ... */ },
///     RequiredSignUpAttributesElement::GivenName => { /* ... */ },
///     RequiredSignUpAttributesElement::Locale => { /* ... */ },
///     RequiredSignUpAttributesElement::MiddleName => { /* ... */ },
///     RequiredSignUpAttributesElement::Name => { /* ... */ },
///     RequiredSignUpAttributesElement::Nickname => { /* ... */ },
///     RequiredSignUpAttributesElement::PhoneNumber => { /* ... */ },
///     RequiredSignUpAttributesElement::Picture => { /* ... */ },
///     RequiredSignUpAttributesElement::PreferredUsername => { /* ... */ },
///     RequiredSignUpAttributesElement::Profile => { /* ... */ },
///     RequiredSignUpAttributesElement::UpdatedAt => { /* ... */ },
///     RequiredSignUpAttributesElement::Website => { /* ... */ },
///     RequiredSignUpAttributesElement::ZoneInfo => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `requiredsignupattributeselement` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `RequiredSignUpAttributesElement::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `RequiredSignUpAttributesElement::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `RequiredSignUpAttributesElement::NewFeature` is defined.
/// Specifically, when `requiredsignupattributeselement` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `RequiredSignUpAttributesElement::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum RequiredSignUpAttributesElement {
    #[allow(missing_docs)] // documentation missing in model
    Address,
    #[allow(missing_docs)] // documentation missing in model
    Birthdate,
    #[allow(missing_docs)] // documentation missing in model
    Email,
    #[allow(missing_docs)] // documentation missing in model
    FamilyName,
    #[allow(missing_docs)] // documentation missing in model
    Gender,
    #[allow(missing_docs)] // documentation missing in model
    GivenName,
    #[allow(missing_docs)] // documentation missing in model
    Locale,
    #[allow(missing_docs)] // documentation missing in model
    MiddleName,
    #[allow(missing_docs)] // documentation missing in model
    Name,
    #[allow(missing_docs)] // documentation missing in model
    Nickname,
    #[allow(missing_docs)] // documentation missing in model
    PhoneNumber,
    #[allow(missing_docs)] // documentation missing in model
    Picture,
    #[allow(missing_docs)] // documentation missing in model
    PreferredUsername,
    #[allow(missing_docs)] // documentation missing in model
    Profile,
    #[allow(missing_docs)] // documentation missing in model
    UpdatedAt,
    #[allow(missing_docs)] // documentation missing in model
    Website,
    #[allow(missing_docs)] // documentation missing in model
    ZoneInfo,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for RequiredSignUpAttributesElement {
    fn from(s: &str) -> Self {
        match s {
            "ADDRESS" => RequiredSignUpAttributesElement::Address,
            "BIRTHDATE" => RequiredSignUpAttributesElement::Birthdate,
            "EMAIL" => RequiredSignUpAttributesElement::Email,
            "FAMILY_NAME" => RequiredSignUpAttributesElement::FamilyName,
            "GENDER" => RequiredSignUpAttributesElement::Gender,
            "GIVEN_NAME" => RequiredSignUpAttributesElement::GivenName,
            "LOCALE" => RequiredSignUpAttributesElement::Locale,
            "MIDDLE_NAME" => RequiredSignUpAttributesElement::MiddleName,
            "NAME" => RequiredSignUpAttributesElement::Name,
            "NICKNAME" => RequiredSignUpAttributesElement::Nickname,
            "PHONE_NUMBER" => RequiredSignUpAttributesElement::PhoneNumber,
            "PICTURE" => RequiredSignUpAttributesElement::Picture,
            "PREFERRED_USERNAME" => RequiredSignUpAttributesElement::PreferredUsername,
            "PROFILE" => RequiredSignUpAttributesElement::Profile,
            "UPDATED_AT" => RequiredSignUpAttributesElement::UpdatedAt,
            "WEBSITE" => RequiredSignUpAttributesElement::Website,
            "ZONE_INFO" => RequiredSignUpAttributesElement::ZoneInfo,
            other => RequiredSignUpAttributesElement::Unknown(
                crate::primitives::UnknownVariantValue(other.to_owned()),
            ),
        }
    }
}
impl std::str::FromStr for RequiredSignUpAttributesElement {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(RequiredSignUpAttributesElement::from(s))
    }
}
impl RequiredSignUpAttributesElement {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            RequiredSignUpAttributesElement::Address => "ADDRESS",
            RequiredSignUpAttributesElement::Birthdate => "BIRTHDATE",
            RequiredSignUpAttributesElement::Email => "EMAIL",
            RequiredSignUpAttributesElement::FamilyName => "FAMILY_NAME",
            RequiredSignUpAttributesElement::Gender => "GENDER",
            RequiredSignUpAttributesElement::GivenName => "GIVEN_NAME",
            RequiredSignUpAttributesElement::Locale => "LOCALE",
            RequiredSignUpAttributesElement::MiddleName => "MIDDLE_NAME",
            RequiredSignUpAttributesElement::Name => "NAME",
            RequiredSignUpAttributesElement::Nickname => "NICKNAME",
            RequiredSignUpAttributesElement::PhoneNumber => "PHONE_NUMBER",
            RequiredSignUpAttributesElement::Picture => "PICTURE",
            RequiredSignUpAttributesElement::PreferredUsername => "PREFERRED_USERNAME",
            RequiredSignUpAttributesElement::Profile => "PROFILE",
            RequiredSignUpAttributesElement::UpdatedAt => "UPDATED_AT",
            RequiredSignUpAttributesElement::Website => "WEBSITE",
            RequiredSignUpAttributesElement::ZoneInfo => "ZONE_INFO",
            RequiredSignUpAttributesElement::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ADDRESS",
            "BIRTHDATE",
            "EMAIL",
            "FAMILY_NAME",
            "GENDER",
            "GIVEN_NAME",
            "LOCALE",
            "MIDDLE_NAME",
            "NAME",
            "NICKNAME",
            "PHONE_NUMBER",
            "PICTURE",
            "PREFERRED_USERNAME",
            "PROFILE",
            "UPDATED_AT",
            "WEBSITE",
            "ZONE_INFO",
        ]
    }
}
impl AsRef<str> for RequiredSignUpAttributesElement {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
