// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The resource configuration for creating backend storage.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateBackendStorageResourceConfig {
    /// <p>The name of the S3 bucket.</p>
    pub bucket_name: ::std::option::Option<::std::string::String>,
    /// <p>The authorization configuration for the storage S3 bucket.</p>
    pub permissions: ::std::option::Option<crate::types::BackendStoragePermissions>,
    /// <p>The name of the storage service.</p>
    pub service_name: ::std::option::Option<crate::types::ServiceName>,
}
impl CreateBackendStorageResourceConfig {
    /// <p>The name of the S3 bucket.</p>
    pub fn bucket_name(&self) -> ::std::option::Option<&str> {
        self.bucket_name.as_deref()
    }
    /// <p>The authorization configuration for the storage S3 bucket.</p>
    pub fn permissions(&self) -> ::std::option::Option<&crate::types::BackendStoragePermissions> {
        self.permissions.as_ref()
    }
    /// <p>The name of the storage service.</p>
    pub fn service_name(&self) -> ::std::option::Option<&crate::types::ServiceName> {
        self.service_name.as_ref()
    }
}
impl CreateBackendStorageResourceConfig {
    /// Creates a new builder-style object to manufacture [`CreateBackendStorageResourceConfig`](crate::types::CreateBackendStorageResourceConfig).
    pub fn builder() -> crate::types::builders::CreateBackendStorageResourceConfigBuilder {
        crate::types::builders::CreateBackendStorageResourceConfigBuilder::default()
    }
}

/// A builder for [`CreateBackendStorageResourceConfig`](crate::types::CreateBackendStorageResourceConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateBackendStorageResourceConfigBuilder {
    pub(crate) bucket_name: ::std::option::Option<::std::string::String>,
    pub(crate) permissions: ::std::option::Option<crate::types::BackendStoragePermissions>,
    pub(crate) service_name: ::std::option::Option<crate::types::ServiceName>,
}
impl CreateBackendStorageResourceConfigBuilder {
    /// <p>The name of the S3 bucket.</p>
    pub fn bucket_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bucket_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the S3 bucket.</p>
    pub fn set_bucket_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bucket_name = input;
        self
    }
    /// <p>The name of the S3 bucket.</p>
    pub fn get_bucket_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.bucket_name
    }
    /// <p>The authorization configuration for the storage S3 bucket.</p>
    /// This field is required.
    pub fn permissions(mut self, input: crate::types::BackendStoragePermissions) -> Self {
        self.permissions = ::std::option::Option::Some(input);
        self
    }
    /// <p>The authorization configuration for the storage S3 bucket.</p>
    pub fn set_permissions(mut self, input: ::std::option::Option<crate::types::BackendStoragePermissions>) -> Self {
        self.permissions = input;
        self
    }
    /// <p>The authorization configuration for the storage S3 bucket.</p>
    pub fn get_permissions(&self) -> &::std::option::Option<crate::types::BackendStoragePermissions> {
        &self.permissions
    }
    /// <p>The name of the storage service.</p>
    /// This field is required.
    pub fn service_name(mut self, input: crate::types::ServiceName) -> Self {
        self.service_name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the storage service.</p>
    pub fn set_service_name(mut self, input: ::std::option::Option<crate::types::ServiceName>) -> Self {
        self.service_name = input;
        self
    }
    /// <p>The name of the storage service.</p>
    pub fn get_service_name(&self) -> &::std::option::Option<crate::types::ServiceName> {
        &self.service_name
    }
    /// Consumes the builder and constructs a [`CreateBackendStorageResourceConfig`](crate::types::CreateBackendStorageResourceConfig).
    pub fn build(self) -> crate::types::CreateBackendStorageResourceConfig {
        crate::types::CreateBackendStorageResourceConfig {
            bucket_name: self.bucket_name,
            permissions: self.permissions,
            service_name: self.service_name,
        }
    }
}
