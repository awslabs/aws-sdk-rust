// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The OAuth configurations for authenticating users into your Amplify app.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateBackendAuthOAuthConfig {
    /// <p>The Amazon Cognito domain prefix used to create a hosted UI for authentication.</p>
    #[doc(hidden)]
    pub domain_prefix: std::option::Option<std::string::String>,
    /// <p>The OAuth grant type to allow app users to authenticate from your Amplify app.</p>
    #[doc(hidden)]
    pub o_auth_grant_type: std::option::Option<crate::types::OAuthGrantType>,
    /// <p>The list of OAuth-related flows that can allow users to authenticate from your Amplify app.</p>
    #[doc(hidden)]
    pub o_auth_scopes: std::option::Option<std::vec::Vec<crate::types::OAuthScopesElement>>,
    /// <p>Redirect URLs that OAuth uses when a user signs in to an Amplify app.</p>
    #[doc(hidden)]
    pub redirect_sign_in_ur_is: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Redirect URLs that OAuth uses when a user signs out of an Amplify app.</p>
    #[doc(hidden)]
    pub redirect_sign_out_ur_is: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Describes third-party social federation configurations for allowing your users to sign in with OAuth.</p>
    #[doc(hidden)]
    pub social_provider_settings: std::option::Option<crate::types::SocialProviderSettings>,
}
impl UpdateBackendAuthOAuthConfig {
    /// <p>The Amazon Cognito domain prefix used to create a hosted UI for authentication.</p>
    pub fn domain_prefix(&self) -> std::option::Option<&str> {
        self.domain_prefix.as_deref()
    }
    /// <p>The OAuth grant type to allow app users to authenticate from your Amplify app.</p>
    pub fn o_auth_grant_type(&self) -> std::option::Option<&crate::types::OAuthGrantType> {
        self.o_auth_grant_type.as_ref()
    }
    /// <p>The list of OAuth-related flows that can allow users to authenticate from your Amplify app.</p>
    pub fn o_auth_scopes(&self) -> std::option::Option<&[crate::types::OAuthScopesElement]> {
        self.o_auth_scopes.as_deref()
    }
    /// <p>Redirect URLs that OAuth uses when a user signs in to an Amplify app.</p>
    pub fn redirect_sign_in_ur_is(&self) -> std::option::Option<&[std::string::String]> {
        self.redirect_sign_in_ur_is.as_deref()
    }
    /// <p>Redirect URLs that OAuth uses when a user signs out of an Amplify app.</p>
    pub fn redirect_sign_out_ur_is(&self) -> std::option::Option<&[std::string::String]> {
        self.redirect_sign_out_ur_is.as_deref()
    }
    /// <p>Describes third-party social federation configurations for allowing your users to sign in with OAuth.</p>
    pub fn social_provider_settings(
        &self,
    ) -> std::option::Option<&crate::types::SocialProviderSettings> {
        self.social_provider_settings.as_ref()
    }
}
impl UpdateBackendAuthOAuthConfig {
    /// Creates a new builder-style object to manufacture [`UpdateBackendAuthOAuthConfig`](crate::types::UpdateBackendAuthOAuthConfig).
    pub fn builder() -> crate::types::builders::UpdateBackendAuthOAuthConfigBuilder {
        crate::types::builders::UpdateBackendAuthOAuthConfigBuilder::default()
    }
}

/// A builder for [`UpdateBackendAuthOAuthConfig`](crate::types::UpdateBackendAuthOAuthConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateBackendAuthOAuthConfigBuilder {
    pub(crate) domain_prefix: std::option::Option<std::string::String>,
    pub(crate) o_auth_grant_type: std::option::Option<crate::types::OAuthGrantType>,
    pub(crate) o_auth_scopes: std::option::Option<std::vec::Vec<crate::types::OAuthScopesElement>>,
    pub(crate) redirect_sign_in_ur_is: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) redirect_sign_out_ur_is: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) social_provider_settings: std::option::Option<crate::types::SocialProviderSettings>,
}
impl UpdateBackendAuthOAuthConfigBuilder {
    /// <p>The Amazon Cognito domain prefix used to create a hosted UI for authentication.</p>
    pub fn domain_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_prefix = Some(input.into());
        self
    }
    /// <p>The Amazon Cognito domain prefix used to create a hosted UI for authentication.</p>
    pub fn set_domain_prefix(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_prefix = input;
        self
    }
    /// <p>The OAuth grant type to allow app users to authenticate from your Amplify app.</p>
    pub fn o_auth_grant_type(mut self, input: crate::types::OAuthGrantType) -> Self {
        self.o_auth_grant_type = Some(input);
        self
    }
    /// <p>The OAuth grant type to allow app users to authenticate from your Amplify app.</p>
    pub fn set_o_auth_grant_type(
        mut self,
        input: std::option::Option<crate::types::OAuthGrantType>,
    ) -> Self {
        self.o_auth_grant_type = input;
        self
    }
    /// Appends an item to `o_auth_scopes`.
    ///
    /// To override the contents of this collection use [`set_o_auth_scopes`](Self::set_o_auth_scopes).
    ///
    /// <p>The list of OAuth-related flows that can allow users to authenticate from your Amplify app.</p>
    pub fn o_auth_scopes(mut self, input: crate::types::OAuthScopesElement) -> Self {
        let mut v = self.o_auth_scopes.unwrap_or_default();
        v.push(input);
        self.o_auth_scopes = Some(v);
        self
    }
    /// <p>The list of OAuth-related flows that can allow users to authenticate from your Amplify app.</p>
    pub fn set_o_auth_scopes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::OAuthScopesElement>>,
    ) -> Self {
        self.o_auth_scopes = input;
        self
    }
    /// Appends an item to `redirect_sign_in_ur_is`.
    ///
    /// To override the contents of this collection use [`set_redirect_sign_in_ur_is`](Self::set_redirect_sign_in_ur_is).
    ///
    /// <p>Redirect URLs that OAuth uses when a user signs in to an Amplify app.</p>
    pub fn redirect_sign_in_ur_is(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.redirect_sign_in_ur_is.unwrap_or_default();
        v.push(input.into());
        self.redirect_sign_in_ur_is = Some(v);
        self
    }
    /// <p>Redirect URLs that OAuth uses when a user signs in to an Amplify app.</p>
    pub fn set_redirect_sign_in_ur_is(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.redirect_sign_in_ur_is = input;
        self
    }
    /// Appends an item to `redirect_sign_out_ur_is`.
    ///
    /// To override the contents of this collection use [`set_redirect_sign_out_ur_is`](Self::set_redirect_sign_out_ur_is).
    ///
    /// <p>Redirect URLs that OAuth uses when a user signs out of an Amplify app.</p>
    pub fn redirect_sign_out_ur_is(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.redirect_sign_out_ur_is.unwrap_or_default();
        v.push(input.into());
        self.redirect_sign_out_ur_is = Some(v);
        self
    }
    /// <p>Redirect URLs that OAuth uses when a user signs out of an Amplify app.</p>
    pub fn set_redirect_sign_out_ur_is(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.redirect_sign_out_ur_is = input;
        self
    }
    /// <p>Describes third-party social federation configurations for allowing your users to sign in with OAuth.</p>
    pub fn social_provider_settings(mut self, input: crate::types::SocialProviderSettings) -> Self {
        self.social_provider_settings = Some(input);
        self
    }
    /// <p>Describes third-party social federation configurations for allowing your users to sign in with OAuth.</p>
    pub fn set_social_provider_settings(
        mut self,
        input: std::option::Option<crate::types::SocialProviderSettings>,
    ) -> Self {
        self.social_provider_settings = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateBackendAuthOAuthConfig`](crate::types::UpdateBackendAuthOAuthConfig).
    pub fn build(self) -> crate::types::UpdateBackendAuthOAuthConfig {
        crate::types::UpdateBackendAuthOAuthConfig {
            domain_prefix: self.domain_prefix,
            o_auth_grant_type: self.o_auth_grant_type,
            o_auth_scopes: self.o_auth_scopes,
            redirect_sign_in_ur_is: self.redirect_sign_in_ur_is,
            redirect_sign_out_ur_is: self.redirect_sign_out_ur_is,
            social_provider_settings: self.social_provider_settings,
        }
    }
}
