// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the read, write, and delete permissions users have against your storage S3 bucket.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BackendStoragePermissions {
    /// <p>Lists all authenticated user read, write, and delete permissions for your S3 bucket.</p>
    #[doc(hidden)]
    pub authenticated: std::option::Option<std::vec::Vec<crate::types::AuthenticatedElement>>,
    /// <p>Lists all unauthenticated user read, write, and delete permissions for your S3 bucket.</p>
    #[doc(hidden)]
    pub un_authenticated: std::option::Option<std::vec::Vec<crate::types::UnAuthenticatedElement>>,
}
impl BackendStoragePermissions {
    /// <p>Lists all authenticated user read, write, and delete permissions for your S3 bucket.</p>
    pub fn authenticated(&self) -> std::option::Option<&[crate::types::AuthenticatedElement]> {
        self.authenticated.as_deref()
    }
    /// <p>Lists all unauthenticated user read, write, and delete permissions for your S3 bucket.</p>
    pub fn un_authenticated(&self) -> std::option::Option<&[crate::types::UnAuthenticatedElement]> {
        self.un_authenticated.as_deref()
    }
}
impl BackendStoragePermissions {
    /// Creates a new builder-style object to manufacture [`BackendStoragePermissions`](crate::types::BackendStoragePermissions).
    pub fn builder() -> crate::types::builders::BackendStoragePermissionsBuilder {
        crate::types::builders::BackendStoragePermissionsBuilder::default()
    }
}

/// A builder for [`BackendStoragePermissions`](crate::types::BackendStoragePermissions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BackendStoragePermissionsBuilder {
    pub(crate) authenticated:
        std::option::Option<std::vec::Vec<crate::types::AuthenticatedElement>>,
    pub(crate) un_authenticated:
        std::option::Option<std::vec::Vec<crate::types::UnAuthenticatedElement>>,
}
impl BackendStoragePermissionsBuilder {
    /// Appends an item to `authenticated`.
    ///
    /// To override the contents of this collection use [`set_authenticated`](Self::set_authenticated).
    ///
    /// <p>Lists all authenticated user read, write, and delete permissions for your S3 bucket.</p>
    pub fn authenticated(mut self, input: crate::types::AuthenticatedElement) -> Self {
        let mut v = self.authenticated.unwrap_or_default();
        v.push(input);
        self.authenticated = Some(v);
        self
    }
    /// <p>Lists all authenticated user read, write, and delete permissions for your S3 bucket.</p>
    pub fn set_authenticated(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AuthenticatedElement>>,
    ) -> Self {
        self.authenticated = input;
        self
    }
    /// Appends an item to `un_authenticated`.
    ///
    /// To override the contents of this collection use [`set_un_authenticated`](Self::set_un_authenticated).
    ///
    /// <p>Lists all unauthenticated user read, write, and delete permissions for your S3 bucket.</p>
    pub fn un_authenticated(mut self, input: crate::types::UnAuthenticatedElement) -> Self {
        let mut v = self.un_authenticated.unwrap_or_default();
        v.push(input);
        self.un_authenticated = Some(v);
        self
    }
    /// <p>Lists all unauthenticated user read, write, and delete permissions for your S3 bucket.</p>
    pub fn set_un_authenticated(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::UnAuthenticatedElement>>,
    ) -> Self {
        self.un_authenticated = input;
        self
    }
    /// Consumes the builder and constructs a [`BackendStoragePermissions`](crate::types::BackendStoragePermissions).
    pub fn build(self) -> crate::types::BackendStoragePermissions {
        crate::types::BackendStoragePermissions {
            authenticated: self.authenticated,
            un_authenticated: self.un_authenticated,
        }
    }
}
