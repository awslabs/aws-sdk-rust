// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The settings for using the social identity providers for access to your Amplify app.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SocialProviderSettings {
    /// <p>Describes third-party social federation configurations for allowing your app users to sign in using OAuth.</p>
    #[doc(hidden)]
    pub facebook: std::option::Option<crate::types::BackendAuthSocialProviderConfig>,
    /// <p>Describes third-party social federation configurations for allowing your app users to sign in using OAuth.</p>
    #[doc(hidden)]
    pub google: std::option::Option<crate::types::BackendAuthSocialProviderConfig>,
    /// <p>Describes third-party social federation configurations for allowing your app users to sign in using OAuth.</p>
    #[doc(hidden)]
    pub login_with_amazon: std::option::Option<crate::types::BackendAuthSocialProviderConfig>,
    /// <p>Describes Apple social federation configurations for allowing your app users to sign in using OAuth.</p>
    #[doc(hidden)]
    pub sign_in_with_apple: std::option::Option<crate::types::BackendAuthAppleProviderConfig>,
}
impl SocialProviderSettings {
    /// <p>Describes third-party social federation configurations for allowing your app users to sign in using OAuth.</p>
    pub fn facebook(&self) -> std::option::Option<&crate::types::BackendAuthSocialProviderConfig> {
        self.facebook.as_ref()
    }
    /// <p>Describes third-party social federation configurations for allowing your app users to sign in using OAuth.</p>
    pub fn google(&self) -> std::option::Option<&crate::types::BackendAuthSocialProviderConfig> {
        self.google.as_ref()
    }
    /// <p>Describes third-party social federation configurations for allowing your app users to sign in using OAuth.</p>
    pub fn login_with_amazon(
        &self,
    ) -> std::option::Option<&crate::types::BackendAuthSocialProviderConfig> {
        self.login_with_amazon.as_ref()
    }
    /// <p>Describes Apple social federation configurations for allowing your app users to sign in using OAuth.</p>
    pub fn sign_in_with_apple(
        &self,
    ) -> std::option::Option<&crate::types::BackendAuthAppleProviderConfig> {
        self.sign_in_with_apple.as_ref()
    }
}
impl SocialProviderSettings {
    /// Creates a new builder-style object to manufacture [`SocialProviderSettings`](crate::types::SocialProviderSettings).
    pub fn builder() -> crate::types::builders::SocialProviderSettingsBuilder {
        crate::types::builders::SocialProviderSettingsBuilder::default()
    }
}

/// A builder for [`SocialProviderSettings`](crate::types::SocialProviderSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SocialProviderSettingsBuilder {
    pub(crate) facebook: std::option::Option<crate::types::BackendAuthSocialProviderConfig>,
    pub(crate) google: std::option::Option<crate::types::BackendAuthSocialProviderConfig>,
    pub(crate) login_with_amazon:
        std::option::Option<crate::types::BackendAuthSocialProviderConfig>,
    pub(crate) sign_in_with_apple:
        std::option::Option<crate::types::BackendAuthAppleProviderConfig>,
}
impl SocialProviderSettingsBuilder {
    /// <p>Describes third-party social federation configurations for allowing your app users to sign in using OAuth.</p>
    pub fn facebook(mut self, input: crate::types::BackendAuthSocialProviderConfig) -> Self {
        self.facebook = Some(input);
        self
    }
    /// <p>Describes third-party social federation configurations for allowing your app users to sign in using OAuth.</p>
    pub fn set_facebook(
        mut self,
        input: std::option::Option<crate::types::BackendAuthSocialProviderConfig>,
    ) -> Self {
        self.facebook = input;
        self
    }
    /// <p>Describes third-party social federation configurations for allowing your app users to sign in using OAuth.</p>
    pub fn google(mut self, input: crate::types::BackendAuthSocialProviderConfig) -> Self {
        self.google = Some(input);
        self
    }
    /// <p>Describes third-party social federation configurations for allowing your app users to sign in using OAuth.</p>
    pub fn set_google(
        mut self,
        input: std::option::Option<crate::types::BackendAuthSocialProviderConfig>,
    ) -> Self {
        self.google = input;
        self
    }
    /// <p>Describes third-party social federation configurations for allowing your app users to sign in using OAuth.</p>
    pub fn login_with_amazon(
        mut self,
        input: crate::types::BackendAuthSocialProviderConfig,
    ) -> Self {
        self.login_with_amazon = Some(input);
        self
    }
    /// <p>Describes third-party social federation configurations for allowing your app users to sign in using OAuth.</p>
    pub fn set_login_with_amazon(
        mut self,
        input: std::option::Option<crate::types::BackendAuthSocialProviderConfig>,
    ) -> Self {
        self.login_with_amazon = input;
        self
    }
    /// <p>Describes Apple social federation configurations for allowing your app users to sign in using OAuth.</p>
    pub fn sign_in_with_apple(
        mut self,
        input: crate::types::BackendAuthAppleProviderConfig,
    ) -> Self {
        self.sign_in_with_apple = Some(input);
        self
    }
    /// <p>Describes Apple social federation configurations for allowing your app users to sign in using OAuth.</p>
    pub fn set_sign_in_with_apple(
        mut self,
        input: std::option::Option<crate::types::BackendAuthAppleProviderConfig>,
    ) -> Self {
        self.sign_in_with_apple = input;
        self
    }
    /// Consumes the builder and constructs a [`SocialProviderSettings`](crate::types::SocialProviderSettings).
    pub fn build(self) -> crate::types::SocialProviderSettings {
        crate::types::SocialProviderSettings {
            facebook: self.facebook,
            google: self.google,
            login_with_amazon: self.login_with_amazon,
            sign_in_with_apple: self.sign_in_with_apple,
        }
    }
}
