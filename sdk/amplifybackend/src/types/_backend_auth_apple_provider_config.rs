// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes Apple social federation configurations for allowing your app users to sign in using OAuth.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BackendAuthAppleProviderConfig {
    /// <p>Describes the client_id (also called Services ID) that comes from Apple.</p>
    #[doc(hidden)]
    pub client_id: std::option::Option<std::string::String>,
    /// <p>Describes the key_id that comes from Apple.</p>
    #[doc(hidden)]
    pub key_id: std::option::Option<std::string::String>,
    /// <p>Describes the private_key that comes from Apple.</p>
    #[doc(hidden)]
    pub private_key: std::option::Option<std::string::String>,
    /// <p>Describes the team_id that comes from Apple.</p>
    #[doc(hidden)]
    pub team_id: std::option::Option<std::string::String>,
}
impl BackendAuthAppleProviderConfig {
    /// <p>Describes the client_id (also called Services ID) that comes from Apple.</p>
    pub fn client_id(&self) -> std::option::Option<&str> {
        self.client_id.as_deref()
    }
    /// <p>Describes the key_id that comes from Apple.</p>
    pub fn key_id(&self) -> std::option::Option<&str> {
        self.key_id.as_deref()
    }
    /// <p>Describes the private_key that comes from Apple.</p>
    pub fn private_key(&self) -> std::option::Option<&str> {
        self.private_key.as_deref()
    }
    /// <p>Describes the team_id that comes from Apple.</p>
    pub fn team_id(&self) -> std::option::Option<&str> {
        self.team_id.as_deref()
    }
}
impl BackendAuthAppleProviderConfig {
    /// Creates a new builder-style object to manufacture [`BackendAuthAppleProviderConfig`](crate::types::BackendAuthAppleProviderConfig).
    pub fn builder() -> crate::types::builders::BackendAuthAppleProviderConfigBuilder {
        crate::types::builders::BackendAuthAppleProviderConfigBuilder::default()
    }
}

/// A builder for [`BackendAuthAppleProviderConfig`](crate::types::BackendAuthAppleProviderConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BackendAuthAppleProviderConfigBuilder {
    pub(crate) client_id: std::option::Option<std::string::String>,
    pub(crate) key_id: std::option::Option<std::string::String>,
    pub(crate) private_key: std::option::Option<std::string::String>,
    pub(crate) team_id: std::option::Option<std::string::String>,
}
impl BackendAuthAppleProviderConfigBuilder {
    /// <p>Describes the client_id (also called Services ID) that comes from Apple.</p>
    pub fn client_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_id = Some(input.into());
        self
    }
    /// <p>Describes the client_id (also called Services ID) that comes from Apple.</p>
    pub fn set_client_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_id = input;
        self
    }
    /// <p>Describes the key_id that comes from Apple.</p>
    pub fn key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.key_id = Some(input.into());
        self
    }
    /// <p>Describes the key_id that comes from Apple.</p>
    pub fn set_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key_id = input;
        self
    }
    /// <p>Describes the private_key that comes from Apple.</p>
    pub fn private_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.private_key = Some(input.into());
        self
    }
    /// <p>Describes the private_key that comes from Apple.</p>
    pub fn set_private_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.private_key = input;
        self
    }
    /// <p>Describes the team_id that comes from Apple.</p>
    pub fn team_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.team_id = Some(input.into());
        self
    }
    /// <p>Describes the team_id that comes from Apple.</p>
    pub fn set_team_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.team_id = input;
        self
    }
    /// Consumes the builder and constructs a [`BackendAuthAppleProviderConfig`](crate::types::BackendAuthAppleProviderConfig).
    pub fn build(self) -> crate::types::BackendAuthAppleProviderConfig {
        crate::types::BackendAuthAppleProviderConfig {
            client_id: self.client_id,
            key_id: self.key_id,
            private_key: self.private_key,
            team_id: self.team_id,
        }
    }
}
