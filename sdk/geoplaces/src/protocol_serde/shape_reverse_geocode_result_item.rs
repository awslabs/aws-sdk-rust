// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_reverse_geocode_result_item<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::ReverseGeocodeResultItem>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ReverseGeocodeResultItemBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "PlaceId" => {
                            builder = builder.set_place_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "PlaceType" => {
                            builder = builder.set_place_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::PlaceType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "Title" => {
                            builder = builder.set_title(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Address" => {
                            builder = builder.set_address(crate::protocol_serde::shape_address::de_address(tokens)?);
                        }
                        "AddressNumberCorrected" => {
                            builder =
                                builder.set_address_number_corrected(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "PostalCodeDetails" => {
                            builder = builder.set_postal_code_details(
                                crate::protocol_serde::shape_postal_code_details_list::de_postal_code_details_list(tokens)?,
                            );
                        }
                        "Position" => {
                            builder = builder.set_position(crate::protocol_serde::shape_position::de_position(tokens)?);
                        }
                        "Distance" => {
                            builder = builder.set_distance(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i64::try_from)
                                    .transpose()?,
                            );
                        }
                        "MapView" => {
                            builder = builder.set_map_view(crate::protocol_serde::shape_bounding_box::de_bounding_box(tokens)?);
                        }
                        "Categories" => {
                            builder = builder.set_categories(crate::protocol_serde::shape_category_list::de_category_list(tokens)?);
                        }
                        "FoodTypes" => {
                            builder = builder.set_food_types(crate::protocol_serde::shape_food_type_list::de_food_type_list(tokens)?);
                        }
                        "AccessPoints" => {
                            builder = builder.set_access_points(crate::protocol_serde::shape_access_point_list::de_access_point_list(tokens)?);
                        }
                        "TimeZone" => {
                            builder = builder.set_time_zone(crate::protocol_serde::shape_time_zone::de_time_zone(tokens)?);
                        }
                        "PoliticalView" => {
                            builder = builder.set_political_view(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Intersections" => {
                            builder = builder.set_intersections(crate::protocol_serde::shape_intersection_list::de_intersection_list(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(
                crate::serde_util::reverse_geocode_result_item_correct_errors(builder)
                    .build()
                    .map_err(|err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err))?,
            ))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
