// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_get_place_http_error(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    _response_body: &[u8],
) -> std::result::Result<crate::operation::get_place::GetPlaceOutput, crate::operation::get_place::GetPlaceError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::get_place::GetPlaceError::unhandled)?;
    generic_builder = ::aws_types::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::get_place::GetPlaceError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::operation::get_place::GetPlaceError::AccessDeniedException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::AccessDeniedExceptionBuilder::default();
                output = crate::protocol_serde::shape_access_denied_exception::de_access_denied_exception_json_err(_response_body, output)
                    .map_err(crate::operation::get_place::GetPlaceError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::access_denied_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_place::GetPlaceError::unhandled)?
            };
            tmp
        }),
        "InternalServerException" => crate::operation::get_place::GetPlaceError::InternalServerException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InternalServerExceptionBuilder::default();
                output = crate::protocol_serde::shape_internal_server_exception::de_internal_server_exception_json_err(_response_body, output)
                    .map_err(crate::operation::get_place::GetPlaceError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::internal_server_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_place::GetPlaceError::unhandled)?
            };
            tmp
        }),
        "ThrottlingException" => crate::operation::get_place::GetPlaceError::ThrottlingException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ThrottlingExceptionBuilder::default();
                output = crate::protocol_serde::shape_throttling_exception::de_throttling_exception_json_err(_response_body, output)
                    .map_err(crate::operation::get_place::GetPlaceError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::throttling_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_place::GetPlaceError::unhandled)?
            };
            tmp
        }),
        "ValidationException" => crate::operation::get_place::GetPlaceError::ValidationException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ValidationExceptionBuilder::default();
                output = crate::protocol_serde::shape_validation_exception::de_validation_exception_json_err(_response_body, output)
                    .map_err(crate::operation::get_place::GetPlaceError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::validation_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_place::GetPlaceError::unhandled)?
            };
            tmp
        }),
        _ => crate::operation::get_place::GetPlaceError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_get_place_http_response(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    _response_body: &[u8],
) -> std::result::Result<crate::operation::get_place::GetPlaceOutput, crate::operation::get_place::GetPlaceError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::get_place::builders::GetPlaceOutputBuilder::default();
        output = crate::protocol_serde::shape_get_place::de_get_place(_response_body, output)
            .map_err(crate::operation::get_place::GetPlaceError::unhandled)?;
        output = output.set_pricing_bucket(
            crate::protocol_serde::shape_get_place_output::de_pricing_bucket_header(_response_headers).map_err(|_| {
                crate::operation::get_place::GetPlaceError::unhandled("Failed to parse PricingBucket from header `x-amz-geo-pricing-bucket")
            })?,
        );
        output._set_request_id(::aws_types::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        crate::serde_util::get_place_output_output_correct_errors(output)
            .build()
            .map_err(crate::operation::get_place::GetPlaceError::unhandled)?
    })
}

pub(crate) fn de_get_place(
    value: &[u8],
    mut builder: crate::operation::get_place::builders::GetPlaceOutputBuilder,
) -> ::std::result::Result<crate::operation::get_place::builders::GetPlaceOutputBuilder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    let mut tokens_owned = ::aws_smithy_json::deserialize::json_token_iter(crate::protocol_serde::or_empty_doc(value)).peekable();
    let tokens = &mut tokens_owned;
    ::aws_smithy_json::deserialize::token::expect_start_object(tokens.next())?;
    loop {
        match tokens.next().transpose()? {
            Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
            Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                "AccessPoints" => {
                    builder = builder.set_access_points(crate::protocol_serde::shape_access_point_list::de_access_point_list(tokens)?);
                }
                "AccessRestrictions" => {
                    builder =
                        builder.set_access_restrictions(crate::protocol_serde::shape_access_restriction_list::de_access_restriction_list(tokens)?);
                }
                "Address" => {
                    builder = builder.set_address(crate::protocol_serde::shape_address::de_address(tokens)?);
                }
                "AddressNumberCorrected" => {
                    builder = builder.set_address_number_corrected(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                }
                "BusinessChains" => {
                    builder = builder.set_business_chains(crate::protocol_serde::shape_business_chain_list::de_business_chain_list(tokens)?);
                }
                "Categories" => {
                    builder = builder.set_categories(crate::protocol_serde::shape_category_list::de_category_list(tokens)?);
                }
                "Contacts" => {
                    builder = builder.set_contacts(crate::protocol_serde::shape_contacts::de_contacts(tokens)?);
                }
                "FoodTypes" => {
                    builder = builder.set_food_types(crate::protocol_serde::shape_food_type_list::de_food_type_list(tokens)?);
                }
                "MainAddress" => {
                    builder = builder.set_main_address(crate::protocol_serde::shape_related_place::de_related_place(tokens)?);
                }
                "MapView" => {
                    builder = builder.set_map_view(crate::protocol_serde::shape_bounding_box::de_bounding_box(tokens)?);
                }
                "OpeningHours" => {
                    builder = builder.set_opening_hours(crate::protocol_serde::shape_opening_hours_list::de_opening_hours_list(tokens)?);
                }
                "Phonemes" => {
                    builder = builder.set_phonemes(crate::protocol_serde::shape_phoneme_details::de_phoneme_details(tokens)?);
                }
                "PlaceId" => {
                    builder = builder.set_place_id(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                    );
                }
                "PlaceType" => {
                    builder = builder.set_place_type(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| crate::types::PlaceType::from(u.as_ref())))
                            .transpose()?,
                    );
                }
                "PoliticalView" => {
                    builder = builder.set_political_view(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                    );
                }
                "Position" => {
                    builder = builder.set_position(crate::protocol_serde::shape_position::de_position(tokens)?);
                }
                "PostalCodeDetails" => {
                    builder = builder.set_postal_code_details(crate::protocol_serde::shape_postal_code_details_list::de_postal_code_details_list(
                        tokens,
                    )?);
                }
                "SecondaryAddresses" => {
                    builder = builder.set_secondary_addresses(crate::protocol_serde::shape_related_place_list::de_related_place_list(tokens)?);
                }
                "TimeZone" => {
                    builder = builder.set_time_zone(crate::protocol_serde::shape_time_zone::de_time_zone(tokens)?);
                }
                "Title" => {
                    builder = builder.set_title(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                    );
                }
                _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
            },
            other => {
                return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                    "expected object key or end object, found: {other:?}"
                )))
            }
        }
    }
    if tokens.next().is_some() {
        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "found more JSON tokens after completing parsing",
        ));
    }
    Ok(builder)
}
