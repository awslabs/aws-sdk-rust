// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The location of an object in Amazon S3.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3Location {
    /// <p>The Amazon Resource Name (ARN) of an S3 bucket.</p>
    pub bucket_arn: ::std::string::String,
    /// <p>The file key for an object in an S3 bucket.</p>
    pub file_key: ::std::string::String,
    /// <p>The version of an object in an S3 bucket.</p>
    pub object_version: ::std::option::Option<::std::string::String>,
}
impl S3Location {
    /// <p>The Amazon Resource Name (ARN) of an S3 bucket.</p>
    pub fn bucket_arn(&self) -> &str {
        use std::ops::Deref;
        self.bucket_arn.deref()
    }
    /// <p>The file key for an object in an S3 bucket.</p>
    pub fn file_key(&self) -> &str {
        use std::ops::Deref;
        self.file_key.deref()
    }
    /// <p>The version of an object in an S3 bucket.</p>
    pub fn object_version(&self) -> ::std::option::Option<&str> {
        self.object_version.as_deref()
    }
}
impl S3Location {
    /// Creates a new builder-style object to manufacture [`S3Location`](crate::types::S3Location).
    pub fn builder() -> crate::types::builders::S3LocationBuilder {
        crate::types::builders::S3LocationBuilder::default()
    }
}

/// A builder for [`S3Location`](crate::types::S3Location).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct S3LocationBuilder {
    pub(crate) bucket_arn: ::std::option::Option<::std::string::String>,
    pub(crate) file_key: ::std::option::Option<::std::string::String>,
    pub(crate) object_version: ::std::option::Option<::std::string::String>,
}
impl S3LocationBuilder {
    /// <p>The Amazon Resource Name (ARN) of an S3 bucket.</p>
    /// This field is required.
    pub fn bucket_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bucket_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an S3 bucket.</p>
    pub fn set_bucket_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bucket_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an S3 bucket.</p>
    pub fn get_bucket_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.bucket_arn
    }
    /// <p>The file key for an object in an S3 bucket.</p>
    /// This field is required.
    pub fn file_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.file_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The file key for an object in an S3 bucket.</p>
    pub fn set_file_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.file_key = input;
        self
    }
    /// <p>The file key for an object in an S3 bucket.</p>
    pub fn get_file_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.file_key
    }
    /// <p>The version of an object in an S3 bucket.</p>
    pub fn object_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.object_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of an object in an S3 bucket.</p>
    pub fn set_object_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.object_version = input;
        self
    }
    /// <p>The version of an object in an S3 bucket.</p>
    pub fn get_object_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.object_version
    }
    /// Consumes the builder and constructs a [`S3Location`](crate::types::S3Location).
    /// This method will fail if any of the following fields are not set:
    /// - [`bucket_arn`](crate::types::builders::S3LocationBuilder::bucket_arn)
    /// - [`file_key`](crate::types::builders::S3LocationBuilder::file_key)
    pub fn build(self) -> ::std::result::Result<crate::types::S3Location, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::S3Location {
            bucket_arn: self.bucket_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "bucket_arn",
                    "bucket_arn was not specified but it is required when building S3Location",
                )
            })?,
            file_key: self.file_key.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "file_key",
                    "file_key was not specified but it is required when building S3Location",
                )
            })?,
            object_version: self.object_version,
        })
    }
}
