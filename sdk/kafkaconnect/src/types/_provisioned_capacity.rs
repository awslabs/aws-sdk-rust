// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about a connector's provisioned capacity.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ProvisionedCapacity {
    /// <p>The number of microcontroller units (MCUs) allocated to each connector worker. The valid values are 1,2,4,8.</p>
    #[doc(hidden)]
    pub mcu_count: i32,
    /// <p>The number of workers that are allocated to the connector.</p>
    #[doc(hidden)]
    pub worker_count: i32,
}
impl ProvisionedCapacity {
    /// <p>The number of microcontroller units (MCUs) allocated to each connector worker. The valid values are 1,2,4,8.</p>
    pub fn mcu_count(&self) -> i32 {
        self.mcu_count
    }
    /// <p>The number of workers that are allocated to the connector.</p>
    pub fn worker_count(&self) -> i32 {
        self.worker_count
    }
}
impl ProvisionedCapacity {
    /// Creates a new builder-style object to manufacture [`ProvisionedCapacity`](crate::types::ProvisionedCapacity).
    pub fn builder() -> crate::types::builders::ProvisionedCapacityBuilder {
        crate::types::builders::ProvisionedCapacityBuilder::default()
    }
}

/// A builder for [`ProvisionedCapacity`](crate::types::ProvisionedCapacity).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ProvisionedCapacityBuilder {
    pub(crate) mcu_count: std::option::Option<i32>,
    pub(crate) worker_count: std::option::Option<i32>,
}
impl ProvisionedCapacityBuilder {
    /// <p>The number of microcontroller units (MCUs) allocated to each connector worker. The valid values are 1,2,4,8.</p>
    pub fn mcu_count(mut self, input: i32) -> Self {
        self.mcu_count = Some(input);
        self
    }
    /// <p>The number of microcontroller units (MCUs) allocated to each connector worker. The valid values are 1,2,4,8.</p>
    pub fn set_mcu_count(mut self, input: std::option::Option<i32>) -> Self {
        self.mcu_count = input;
        self
    }
    /// <p>The number of workers that are allocated to the connector.</p>
    pub fn worker_count(mut self, input: i32) -> Self {
        self.worker_count = Some(input);
        self
    }
    /// <p>The number of workers that are allocated to the connector.</p>
    pub fn set_worker_count(mut self, input: std::option::Option<i32>) -> Self {
        self.worker_count = input;
        self
    }
    /// Consumes the builder and constructs a [`ProvisionedCapacity`](crate::types::ProvisionedCapacity).
    pub fn build(self) -> crate::types::ProvisionedCapacity {
        crate::types::ProvisionedCapacity {
            mcu_count: self.mcu_count.unwrap_or_default(),
            worker_count: self.worker_count.unwrap_or_default(),
        }
    }
}
