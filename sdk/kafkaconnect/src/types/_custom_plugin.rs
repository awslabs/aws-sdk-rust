// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A plugin is an AWS resource that contains the code that defines a connector's logic.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CustomPlugin {
    /// <p>The Amazon Resource Name (ARN) of the custom plugin.</p>
    pub custom_plugin_arn: ::std::string::String,
    /// <p>The revision of the custom plugin.</p>
    pub revision: i64,
}
impl CustomPlugin {
    /// <p>The Amazon Resource Name (ARN) of the custom plugin.</p>
    pub fn custom_plugin_arn(&self) -> &str {
        use std::ops::Deref;
        self.custom_plugin_arn.deref()
    }
    /// <p>The revision of the custom plugin.</p>
    pub fn revision(&self) -> i64 {
        self.revision
    }
}
impl CustomPlugin {
    /// Creates a new builder-style object to manufacture [`CustomPlugin`](crate::types::CustomPlugin).
    pub fn builder() -> crate::types::builders::CustomPluginBuilder {
        crate::types::builders::CustomPluginBuilder::default()
    }
}

/// A builder for [`CustomPlugin`](crate::types::CustomPlugin).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CustomPluginBuilder {
    pub(crate) custom_plugin_arn: ::std::option::Option<::std::string::String>,
    pub(crate) revision: ::std::option::Option<i64>,
}
impl CustomPluginBuilder {
    /// <p>The Amazon Resource Name (ARN) of the custom plugin.</p>
    /// This field is required.
    pub fn custom_plugin_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.custom_plugin_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the custom plugin.</p>
    pub fn set_custom_plugin_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.custom_plugin_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the custom plugin.</p>
    pub fn get_custom_plugin_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.custom_plugin_arn
    }
    /// <p>The revision of the custom plugin.</p>
    /// This field is required.
    pub fn revision(mut self, input: i64) -> Self {
        self.revision = ::std::option::Option::Some(input);
        self
    }
    /// <p>The revision of the custom plugin.</p>
    pub fn set_revision(mut self, input: ::std::option::Option<i64>) -> Self {
        self.revision = input;
        self
    }
    /// <p>The revision of the custom plugin.</p>
    pub fn get_revision(&self) -> &::std::option::Option<i64> {
        &self.revision
    }
    /// Consumes the builder and constructs a [`CustomPlugin`](crate::types::CustomPlugin).
    /// This method will fail if any of the following fields are not set:
    /// - [`custom_plugin_arn`](crate::types::builders::CustomPluginBuilder::custom_plugin_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::CustomPlugin, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CustomPlugin {
            custom_plugin_arn: self.custom_plugin_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "custom_plugin_arn",
                    "custom_plugin_arn was not specified but it is required when building CustomPlugin",
                )
            })?,
            revision: self.revision.unwrap_or_default(),
        })
    }
}
