// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about delivering logs to Amazon S3.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3LogDelivery {
    /// <p>The name of the S3 bucket that is the destination for log delivery.</p>
    pub bucket: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether connector logs get sent to the specified Amazon S3 destination.</p>
    pub enabled: bool,
    /// <p>The S3 prefix that is the destination for log delivery.</p>
    pub prefix: ::std::option::Option<::std::string::String>,
}
impl S3LogDelivery {
    /// <p>The name of the S3 bucket that is the destination for log delivery.</p>
    pub fn bucket(&self) -> ::std::option::Option<&str> {
        self.bucket.as_deref()
    }
    /// <p>Specifies whether connector logs get sent to the specified Amazon S3 destination.</p>
    pub fn enabled(&self) -> bool {
        self.enabled
    }
    /// <p>The S3 prefix that is the destination for log delivery.</p>
    pub fn prefix(&self) -> ::std::option::Option<&str> {
        self.prefix.as_deref()
    }
}
impl S3LogDelivery {
    /// Creates a new builder-style object to manufacture [`S3LogDelivery`](crate::types::S3LogDelivery).
    pub fn builder() -> crate::types::builders::S3LogDeliveryBuilder {
        crate::types::builders::S3LogDeliveryBuilder::default()
    }
}

/// A builder for [`S3LogDelivery`](crate::types::S3LogDelivery).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct S3LogDeliveryBuilder {
    pub(crate) bucket: ::std::option::Option<::std::string::String>,
    pub(crate) enabled: ::std::option::Option<bool>,
    pub(crate) prefix: ::std::option::Option<::std::string::String>,
}
impl S3LogDeliveryBuilder {
    /// <p>The name of the S3 bucket that is the destination for log delivery.</p>
    pub fn bucket(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bucket = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the S3 bucket that is the destination for log delivery.</p>
    pub fn set_bucket(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bucket = input;
        self
    }
    /// <p>The name of the S3 bucket that is the destination for log delivery.</p>
    pub fn get_bucket(&self) -> &::std::option::Option<::std::string::String> {
        &self.bucket
    }
    /// <p>Specifies whether connector logs get sent to the specified Amazon S3 destination.</p>
    /// This field is required.
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether connector logs get sent to the specified Amazon S3 destination.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Specifies whether connector logs get sent to the specified Amazon S3 destination.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// <p>The S3 prefix that is the destination for log delivery.</p>
    pub fn prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The S3 prefix that is the destination for log delivery.</p>
    pub fn set_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.prefix = input;
        self
    }
    /// <p>The S3 prefix that is the destination for log delivery.</p>
    pub fn get_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.prefix
    }
    /// Consumes the builder and constructs a [`S3LogDelivery`](crate::types::S3LogDelivery).
    pub fn build(self) -> crate::types::S3LogDelivery {
        crate::types::S3LogDelivery {
            bucket: self.bucket,
            enabled: self.enabled.unwrap_or_default(),
            prefix: self.prefix,
        }
    }
}
