// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the auto scaling parameters for the connector.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AutoScalingDescription {
    /// <p>The maximum number of workers allocated to the connector.</p>
    #[doc(hidden)]
    pub max_worker_count: i32,
    /// <p>The number of microcontroller units (MCUs) allocated to each connector worker. The valid values are 1,2,4,8.</p>
    #[doc(hidden)]
    pub mcu_count: i32,
    /// <p>The minimum number of workers allocated to the connector.</p>
    #[doc(hidden)]
    pub min_worker_count: i32,
    /// <p>The sacle-in policy for the connector.</p>
    #[doc(hidden)]
    pub scale_in_policy: std::option::Option<crate::types::ScaleInPolicyDescription>,
    /// <p>The sacle-out policy for the connector.&gt;</p>
    #[doc(hidden)]
    pub scale_out_policy: std::option::Option<crate::types::ScaleOutPolicyDescription>,
}
impl AutoScalingDescription {
    /// <p>The maximum number of workers allocated to the connector.</p>
    pub fn max_worker_count(&self) -> i32 {
        self.max_worker_count
    }
    /// <p>The number of microcontroller units (MCUs) allocated to each connector worker. The valid values are 1,2,4,8.</p>
    pub fn mcu_count(&self) -> i32 {
        self.mcu_count
    }
    /// <p>The minimum number of workers allocated to the connector.</p>
    pub fn min_worker_count(&self) -> i32 {
        self.min_worker_count
    }
    /// <p>The sacle-in policy for the connector.</p>
    pub fn scale_in_policy(&self) -> std::option::Option<&crate::types::ScaleInPolicyDescription> {
        self.scale_in_policy.as_ref()
    }
    /// <p>The sacle-out policy for the connector.&gt;</p>
    pub fn scale_out_policy(
        &self,
    ) -> std::option::Option<&crate::types::ScaleOutPolicyDescription> {
        self.scale_out_policy.as_ref()
    }
}
impl AutoScalingDescription {
    /// Creates a new builder-style object to manufacture [`AutoScalingDescription`](crate::types::AutoScalingDescription).
    pub fn builder() -> crate::types::builders::AutoScalingDescriptionBuilder {
        crate::types::builders::AutoScalingDescriptionBuilder::default()
    }
}

/// A builder for [`AutoScalingDescription`](crate::types::AutoScalingDescription).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AutoScalingDescriptionBuilder {
    pub(crate) max_worker_count: std::option::Option<i32>,
    pub(crate) mcu_count: std::option::Option<i32>,
    pub(crate) min_worker_count: std::option::Option<i32>,
    pub(crate) scale_in_policy: std::option::Option<crate::types::ScaleInPolicyDescription>,
    pub(crate) scale_out_policy: std::option::Option<crate::types::ScaleOutPolicyDescription>,
}
impl AutoScalingDescriptionBuilder {
    /// <p>The maximum number of workers allocated to the connector.</p>
    pub fn max_worker_count(mut self, input: i32) -> Self {
        self.max_worker_count = Some(input);
        self
    }
    /// <p>The maximum number of workers allocated to the connector.</p>
    pub fn set_max_worker_count(mut self, input: std::option::Option<i32>) -> Self {
        self.max_worker_count = input;
        self
    }
    /// <p>The number of microcontroller units (MCUs) allocated to each connector worker. The valid values are 1,2,4,8.</p>
    pub fn mcu_count(mut self, input: i32) -> Self {
        self.mcu_count = Some(input);
        self
    }
    /// <p>The number of microcontroller units (MCUs) allocated to each connector worker. The valid values are 1,2,4,8.</p>
    pub fn set_mcu_count(mut self, input: std::option::Option<i32>) -> Self {
        self.mcu_count = input;
        self
    }
    /// <p>The minimum number of workers allocated to the connector.</p>
    pub fn min_worker_count(mut self, input: i32) -> Self {
        self.min_worker_count = Some(input);
        self
    }
    /// <p>The minimum number of workers allocated to the connector.</p>
    pub fn set_min_worker_count(mut self, input: std::option::Option<i32>) -> Self {
        self.min_worker_count = input;
        self
    }
    /// <p>The sacle-in policy for the connector.</p>
    pub fn scale_in_policy(mut self, input: crate::types::ScaleInPolicyDescription) -> Self {
        self.scale_in_policy = Some(input);
        self
    }
    /// <p>The sacle-in policy for the connector.</p>
    pub fn set_scale_in_policy(
        mut self,
        input: std::option::Option<crate::types::ScaleInPolicyDescription>,
    ) -> Self {
        self.scale_in_policy = input;
        self
    }
    /// <p>The sacle-out policy for the connector.&gt;</p>
    pub fn scale_out_policy(mut self, input: crate::types::ScaleOutPolicyDescription) -> Self {
        self.scale_out_policy = Some(input);
        self
    }
    /// <p>The sacle-out policy for the connector.&gt;</p>
    pub fn set_scale_out_policy(
        mut self,
        input: std::option::Option<crate::types::ScaleOutPolicyDescription>,
    ) -> Self {
        self.scale_out_policy = input;
        self
    }
    /// Consumes the builder and constructs a [`AutoScalingDescription`](crate::types::AutoScalingDescription).
    pub fn build(self) -> crate::types::AutoScalingDescription {
        crate::types::AutoScalingDescription {
            max_worker_count: self.max_worker_count.unwrap_or_default(),
            mcu_count: self.mcu_count.unwrap_or_default(),
            min_worker_count: self.min_worker_count.unwrap_or_default(),
            scale_in_policy: self.scale_in_policy,
            scale_out_policy: self.scale_out_policy,
        }
    }
}
