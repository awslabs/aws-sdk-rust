// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for Managed Streaming for Kafka Connect
///
/// Client for invoking operations on Managed Streaming for Kafka Connect. Each operation on Managed Streaming for Kafka Connect is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_kafkaconnect::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_kafkaconnect::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_kafkaconnect::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`CreateConnector`](crate::client::fluent_builders::CreateConnector) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`capacity(Capacity)`](crate::client::fluent_builders::CreateConnector::capacity) / [`set_capacity(Option<Capacity>)`](crate::client::fluent_builders::CreateConnector::set_capacity): <p>Information about the capacity allocated to the connector. Exactly one of the two properties must be specified.</p>
    ///   - [`connector_configuration(HashMap<String, String>)`](crate::client::fluent_builders::CreateConnector::connector_configuration) / [`set_connector_configuration(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateConnector::set_connector_configuration): <p>A map of keys to values that represent the configuration for the connector.</p>
    ///   - [`connector_description(impl Into<String>)`](crate::client::fluent_builders::CreateConnector::connector_description) / [`set_connector_description(Option<String>)`](crate::client::fluent_builders::CreateConnector::set_connector_description): <p>A summary description of the connector.</p>
    ///   - [`connector_name(impl Into<String>)`](crate::client::fluent_builders::CreateConnector::connector_name) / [`set_connector_name(Option<String>)`](crate::client::fluent_builders::CreateConnector::set_connector_name): <p>The name of the connector.</p>
    ///   - [`kafka_cluster(KafkaCluster)`](crate::client::fluent_builders::CreateConnector::kafka_cluster) / [`set_kafka_cluster(Option<KafkaCluster>)`](crate::client::fluent_builders::CreateConnector::set_kafka_cluster): <p>Specifies which Apache Kafka cluster to connect to.</p>
    ///   - [`kafka_cluster_client_authentication(KafkaClusterClientAuthentication)`](crate::client::fluent_builders::CreateConnector::kafka_cluster_client_authentication) / [`set_kafka_cluster_client_authentication(Option<KafkaClusterClientAuthentication>)`](crate::client::fluent_builders::CreateConnector::set_kafka_cluster_client_authentication): <p>Details of the client authentication used by the Apache Kafka cluster.</p>
    ///   - [`kafka_cluster_encryption_in_transit(KafkaClusterEncryptionInTransit)`](crate::client::fluent_builders::CreateConnector::kafka_cluster_encryption_in_transit) / [`set_kafka_cluster_encryption_in_transit(Option<KafkaClusterEncryptionInTransit>)`](crate::client::fluent_builders::CreateConnector::set_kafka_cluster_encryption_in_transit): <p>Details of encryption in transit to the Apache Kafka cluster.</p>
    ///   - [`kafka_connect_version(impl Into<String>)`](crate::client::fluent_builders::CreateConnector::kafka_connect_version) / [`set_kafka_connect_version(Option<String>)`](crate::client::fluent_builders::CreateConnector::set_kafka_connect_version): <p>The version of Kafka Connect. It has to be compatible with both the Apache Kafka cluster's version and the plugins.</p>
    ///   - [`log_delivery(LogDelivery)`](crate::client::fluent_builders::CreateConnector::log_delivery) / [`set_log_delivery(Option<LogDelivery>)`](crate::client::fluent_builders::CreateConnector::set_log_delivery): <p>Details about log delivery.</p>
    ///   - [`plugins(Vec<Plugin>)`](crate::client::fluent_builders::CreateConnector::plugins) / [`set_plugins(Option<Vec<Plugin>>)`](crate::client::fluent_builders::CreateConnector::set_plugins): <p>Specifies which plugins to use for the connector.</p>
    ///   - [`service_execution_role_arn(impl Into<String>)`](crate::client::fluent_builders::CreateConnector::service_execution_role_arn) / [`set_service_execution_role_arn(Option<String>)`](crate::client::fluent_builders::CreateConnector::set_service_execution_role_arn): <p>The Amazon Resource Name (ARN) of the IAM role used by the connector to access the Amazon Web Services resources that it needs. The types of resources depends on the logic of the connector. For example, a connector that has Amazon S3 as a destination must have permissions that allow it to write to the S3 destination bucket.</p>
    ///   - [`worker_configuration(WorkerConfiguration)`](crate::client::fluent_builders::CreateConnector::worker_configuration) / [`set_worker_configuration(Option<WorkerConfiguration>)`](crate::client::fluent_builders::CreateConnector::set_worker_configuration): <p>Specifies which worker configuration to use with the connector.</p>
    /// - On success, responds with [`CreateConnectorOutput`](crate::output::CreateConnectorOutput) with field(s):
    ///   - [`connector_arn(Option<String>)`](crate::output::CreateConnectorOutput::connector_arn): <p>The Amazon Resource Name (ARN) that Amazon assigned to the connector.</p>
    ///   - [`connector_name(Option<String>)`](crate::output::CreateConnectorOutput::connector_name): <p>The name of the connector.</p>
    ///   - [`connector_state(Option<ConnectorState>)`](crate::output::CreateConnectorOutput::connector_state): <p>The state of the connector.</p>
    /// - On failure, responds with [`SdkError<CreateConnectorError>`](crate::error::CreateConnectorError)
    pub fn create_connector(&self) -> crate::client::fluent_builders::CreateConnector {
        crate::client::fluent_builders::CreateConnector::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateCustomPlugin`](crate::client::fluent_builders::CreateCustomPlugin) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`content_type(CustomPluginContentType)`](crate::client::fluent_builders::CreateCustomPlugin::content_type) / [`set_content_type(Option<CustomPluginContentType>)`](crate::client::fluent_builders::CreateCustomPlugin::set_content_type): <p>The type of the plugin file.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateCustomPlugin::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateCustomPlugin::set_description): <p>A summary description of the custom plugin.</p>
    ///   - [`location(CustomPluginLocation)`](crate::client::fluent_builders::CreateCustomPlugin::location) / [`set_location(Option<CustomPluginLocation>)`](crate::client::fluent_builders::CreateCustomPlugin::set_location): <p>Information about the location of a custom plugin.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateCustomPlugin::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateCustomPlugin::set_name): <p>The name of the custom plugin.</p>
    /// - On success, responds with [`CreateCustomPluginOutput`](crate::output::CreateCustomPluginOutput) with field(s):
    ///   - [`custom_plugin_arn(Option<String>)`](crate::output::CreateCustomPluginOutput::custom_plugin_arn): <p>The Amazon Resource Name (ARN) that Amazon assigned to the custom plugin.</p>
    ///   - [`custom_plugin_state(Option<CustomPluginState>)`](crate::output::CreateCustomPluginOutput::custom_plugin_state): <p>The state of the custom plugin.</p>
    ///   - [`name(Option<String>)`](crate::output::CreateCustomPluginOutput::name): <p>The name of the custom plugin.</p>
    ///   - [`revision(i64)`](crate::output::CreateCustomPluginOutput::revision): <p>The revision of the custom plugin.</p>
    /// - On failure, responds with [`SdkError<CreateCustomPluginError>`](crate::error::CreateCustomPluginError)
    pub fn create_custom_plugin(&self) -> crate::client::fluent_builders::CreateCustomPlugin {
        crate::client::fluent_builders::CreateCustomPlugin::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateWorkerConfiguration`](crate::client::fluent_builders::CreateWorkerConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateWorkerConfiguration::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateWorkerConfiguration::set_description): <p>A summary description of the worker configuration.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateWorkerConfiguration::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateWorkerConfiguration::set_name): <p>The name of the worker configuration.</p>
    ///   - [`properties_file_content(impl Into<String>)`](crate::client::fluent_builders::CreateWorkerConfiguration::properties_file_content) / [`set_properties_file_content(Option<String>)`](crate::client::fluent_builders::CreateWorkerConfiguration::set_properties_file_content): <p>Base64 encoded contents of connect-distributed.properties file.</p>
    /// - On success, responds with [`CreateWorkerConfigurationOutput`](crate::output::CreateWorkerConfigurationOutput) with field(s):
    ///   - [`creation_time(Option<DateTime>)`](crate::output::CreateWorkerConfigurationOutput::creation_time): <p>The time that the worker configuration was created.</p>
    ///   - [`latest_revision(Option<WorkerConfigurationRevisionSummary>)`](crate::output::CreateWorkerConfigurationOutput::latest_revision): <p>The latest revision of the worker configuration.</p>
    ///   - [`name(Option<String>)`](crate::output::CreateWorkerConfigurationOutput::name): <p>The name of the worker configuration.</p>
    ///   - [`worker_configuration_arn(Option<String>)`](crate::output::CreateWorkerConfigurationOutput::worker_configuration_arn): <p>The Amazon Resource Name (ARN) that Amazon assigned to the worker configuration.</p>
    /// - On failure, responds with [`SdkError<CreateWorkerConfigurationError>`](crate::error::CreateWorkerConfigurationError)
    pub fn create_worker_configuration(
        &self,
    ) -> crate::client::fluent_builders::CreateWorkerConfiguration {
        crate::client::fluent_builders::CreateWorkerConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteConnector`](crate::client::fluent_builders::DeleteConnector) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`connector_arn(impl Into<String>)`](crate::client::fluent_builders::DeleteConnector::connector_arn) / [`set_connector_arn(Option<String>)`](crate::client::fluent_builders::DeleteConnector::set_connector_arn): <p>The Amazon Resource Name (ARN) of the connector that you want to delete.</p>
    ///   - [`current_version(impl Into<String>)`](crate::client::fluent_builders::DeleteConnector::current_version) / [`set_current_version(Option<String>)`](crate::client::fluent_builders::DeleteConnector::set_current_version): <p>The current version of the connector that you want to delete.</p>
    /// - On success, responds with [`DeleteConnectorOutput`](crate::output::DeleteConnectorOutput) with field(s):
    ///   - [`connector_arn(Option<String>)`](crate::output::DeleteConnectorOutput::connector_arn): <p>The Amazon Resource Name (ARN) of the connector that you requested to delete.</p>
    ///   - [`connector_state(Option<ConnectorState>)`](crate::output::DeleteConnectorOutput::connector_state): <p>The state of the connector that you requested to delete.</p>
    /// - On failure, responds with [`SdkError<DeleteConnectorError>`](crate::error::DeleteConnectorError)
    pub fn delete_connector(&self) -> crate::client::fluent_builders::DeleteConnector {
        crate::client::fluent_builders::DeleteConnector::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteCustomPlugin`](crate::client::fluent_builders::DeleteCustomPlugin) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`custom_plugin_arn(impl Into<String>)`](crate::client::fluent_builders::DeleteCustomPlugin::custom_plugin_arn) / [`set_custom_plugin_arn(Option<String>)`](crate::client::fluent_builders::DeleteCustomPlugin::set_custom_plugin_arn): <p>The Amazon Resource Name (ARN) of the custom plugin that you want to delete.</p>
    /// - On success, responds with [`DeleteCustomPluginOutput`](crate::output::DeleteCustomPluginOutput) with field(s):
    ///   - [`custom_plugin_arn(Option<String>)`](crate::output::DeleteCustomPluginOutput::custom_plugin_arn): <p>The Amazon Resource Name (ARN) of the custom plugin that you requested to delete.</p>
    ///   - [`custom_plugin_state(Option<CustomPluginState>)`](crate::output::DeleteCustomPluginOutput::custom_plugin_state): <p>The state of the custom plugin.</p>
    /// - On failure, responds with [`SdkError<DeleteCustomPluginError>`](crate::error::DeleteCustomPluginError)
    pub fn delete_custom_plugin(&self) -> crate::client::fluent_builders::DeleteCustomPlugin {
        crate::client::fluent_builders::DeleteCustomPlugin::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeConnector`](crate::client::fluent_builders::DescribeConnector) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`connector_arn(impl Into<String>)`](crate::client::fluent_builders::DescribeConnector::connector_arn) / [`set_connector_arn(Option<String>)`](crate::client::fluent_builders::DescribeConnector::set_connector_arn): <p>The Amazon Resource Name (ARN) of the connector that you want to describe.</p>
    /// - On success, responds with [`DescribeConnectorOutput`](crate::output::DescribeConnectorOutput) with field(s):
    ///   - [`capacity(Option<CapacityDescription>)`](crate::output::DescribeConnectorOutput::capacity): <p>Information about the capacity of the connector, whether it is auto scaled or provisioned.</p>
    ///   - [`connector_arn(Option<String>)`](crate::output::DescribeConnectorOutput::connector_arn): <p>The Amazon Resource Name (ARN) of the connector.</p>
    ///   - [`connector_configuration(Option<HashMap<String, String>>)`](crate::output::DescribeConnectorOutput::connector_configuration): <p>A map of keys to values that represent the configuration for the connector.</p>
    ///   - [`connector_description(Option<String>)`](crate::output::DescribeConnectorOutput::connector_description): <p>A summary description of the connector.</p>
    ///   - [`connector_name(Option<String>)`](crate::output::DescribeConnectorOutput::connector_name): <p>The name of the connector.</p>
    ///   - [`connector_state(Option<ConnectorState>)`](crate::output::DescribeConnectorOutput::connector_state): <p>The state of the connector.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::DescribeConnectorOutput::creation_time): <p>The time the connector was created.</p>
    ///   - [`current_version(Option<String>)`](crate::output::DescribeConnectorOutput::current_version): <p>The current version of the connector.</p>
    ///   - [`kafka_cluster(Option<KafkaClusterDescription>)`](crate::output::DescribeConnectorOutput::kafka_cluster): <p>The Apache Kafka cluster that the connector is connected to.</p>
    ///   - [`kafka_cluster_client_authentication(Option<KafkaClusterClientAuthenticationDescription>)`](crate::output::DescribeConnectorOutput::kafka_cluster_client_authentication): <p>The type of client authentication used to connect to the Apache Kafka cluster. The value is NONE when no client authentication is used.</p>
    ///   - [`kafka_cluster_encryption_in_transit(Option<KafkaClusterEncryptionInTransitDescription>)`](crate::output::DescribeConnectorOutput::kafka_cluster_encryption_in_transit): <p>Details of encryption in transit to the Apache Kafka cluster.</p>
    ///   - [`kafka_connect_version(Option<String>)`](crate::output::DescribeConnectorOutput::kafka_connect_version): <p>The version of Kafka Connect. It has to be compatible with both the Apache Kafka cluster's version and the plugins.</p>
    ///   - [`log_delivery(Option<LogDeliveryDescription>)`](crate::output::DescribeConnectorOutput::log_delivery): <p>Details about delivering logs to Amazon CloudWatch Logs.</p>
    ///   - [`plugins(Option<Vec<PluginDescription>>)`](crate::output::DescribeConnectorOutput::plugins): <p>Specifies which plugins were used for this connector.</p>
    ///   - [`service_execution_role_arn(Option<String>)`](crate::output::DescribeConnectorOutput::service_execution_role_arn): <p>The Amazon Resource Name (ARN) of the IAM role used by the connector to access Amazon Web Services resources.</p>
    ///   - [`worker_configuration(Option<WorkerConfigurationDescription>)`](crate::output::DescribeConnectorOutput::worker_configuration): <p>Specifies which worker configuration was used for the connector.</p>
    ///   - [`state_description(Option<StateDescription>)`](crate::output::DescribeConnectorOutput::state_description): <p>Details about the state of a connector.</p>
    /// - On failure, responds with [`SdkError<DescribeConnectorError>`](crate::error::DescribeConnectorError)
    pub fn describe_connector(&self) -> crate::client::fluent_builders::DescribeConnector {
        crate::client::fluent_builders::DescribeConnector::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeCustomPlugin`](crate::client::fluent_builders::DescribeCustomPlugin) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`custom_plugin_arn(impl Into<String>)`](crate::client::fluent_builders::DescribeCustomPlugin::custom_plugin_arn) / [`set_custom_plugin_arn(Option<String>)`](crate::client::fluent_builders::DescribeCustomPlugin::set_custom_plugin_arn): <p>Returns information about a custom plugin.</p>
    /// - On success, responds with [`DescribeCustomPluginOutput`](crate::output::DescribeCustomPluginOutput) with field(s):
    ///   - [`creation_time(Option<DateTime>)`](crate::output::DescribeCustomPluginOutput::creation_time): <p>The time that the custom plugin was created.</p>
    ///   - [`custom_plugin_arn(Option<String>)`](crate::output::DescribeCustomPluginOutput::custom_plugin_arn): <p>The Amazon Resource Name (ARN) of the custom plugin.</p>
    ///   - [`custom_plugin_state(Option<CustomPluginState>)`](crate::output::DescribeCustomPluginOutput::custom_plugin_state): <p>The state of the custom plugin.</p>
    ///   - [`description(Option<String>)`](crate::output::DescribeCustomPluginOutput::description): <p>The description of the custom plugin.</p>
    ///   - [`latest_revision(Option<CustomPluginRevisionSummary>)`](crate::output::DescribeCustomPluginOutput::latest_revision): <p>The latest successfully created revision of the custom plugin. If there are no successfully created revisions, this field will be absent.</p>
    ///   - [`name(Option<String>)`](crate::output::DescribeCustomPluginOutput::name): <p>The name of the custom plugin.</p>
    ///   - [`state_description(Option<StateDescription>)`](crate::output::DescribeCustomPluginOutput::state_description): <p>Details about the state of a custom plugin.</p>
    /// - On failure, responds with [`SdkError<DescribeCustomPluginError>`](crate::error::DescribeCustomPluginError)
    pub fn describe_custom_plugin(&self) -> crate::client::fluent_builders::DescribeCustomPlugin {
        crate::client::fluent_builders::DescribeCustomPlugin::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeWorkerConfiguration`](crate::client::fluent_builders::DescribeWorkerConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`worker_configuration_arn(impl Into<String>)`](crate::client::fluent_builders::DescribeWorkerConfiguration::worker_configuration_arn) / [`set_worker_configuration_arn(Option<String>)`](crate::client::fluent_builders::DescribeWorkerConfiguration::set_worker_configuration_arn): <p>The Amazon Resource Name (ARN) of the worker configuration that you want to get information about.</p>
    /// - On success, responds with [`DescribeWorkerConfigurationOutput`](crate::output::DescribeWorkerConfigurationOutput) with field(s):
    ///   - [`creation_time(Option<DateTime>)`](crate::output::DescribeWorkerConfigurationOutput::creation_time): <p>The time that the worker configuration was created.</p>
    ///   - [`description(Option<String>)`](crate::output::DescribeWorkerConfigurationOutput::description): <p>The description of the worker configuration.</p>
    ///   - [`latest_revision(Option<WorkerConfigurationRevisionDescription>)`](crate::output::DescribeWorkerConfigurationOutput::latest_revision): <p>The latest revision of the custom configuration.</p>
    ///   - [`name(Option<String>)`](crate::output::DescribeWorkerConfigurationOutput::name): <p>The name of the worker configuration.</p>
    ///   - [`worker_configuration_arn(Option<String>)`](crate::output::DescribeWorkerConfigurationOutput::worker_configuration_arn): <p>The Amazon Resource Name (ARN) of the custom configuration.</p>
    /// - On failure, responds with [`SdkError<DescribeWorkerConfigurationError>`](crate::error::DescribeWorkerConfigurationError)
    pub fn describe_worker_configuration(
        &self,
    ) -> crate::client::fluent_builders::DescribeWorkerConfiguration {
        crate::client::fluent_builders::DescribeWorkerConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListConnectors`](crate::client::fluent_builders::ListConnectors) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListConnectors::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`connector_name_prefix(impl Into<String>)`](crate::client::fluent_builders::ListConnectors::connector_name_prefix) / [`set_connector_name_prefix(Option<String>)`](crate::client::fluent_builders::ListConnectors::set_connector_name_prefix): <p>The name prefix that you want to use to search for and list connectors.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListConnectors::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListConnectors::set_max_results): <p>The maximum number of connectors to list in one response.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListConnectors::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListConnectors::set_next_token): <p>If the response of a ListConnectors operation is truncated, it will include a NextToken. Send this NextToken in a subsequent request to continue listing from where the previous operation left off.</p>
    /// - On success, responds with [`ListConnectorsOutput`](crate::output::ListConnectorsOutput) with field(s):
    ///   - [`connectors(Option<Vec<ConnectorSummary>>)`](crate::output::ListConnectorsOutput::connectors): <p>An array of connector descriptions.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListConnectorsOutput::next_token): <p>If the response of a ListConnectors operation is truncated, it will include a NextToken. Send this NextToken in a subsequent request to continue listing from where it left off.</p>
    /// - On failure, responds with [`SdkError<ListConnectorsError>`](crate::error::ListConnectorsError)
    pub fn list_connectors(&self) -> crate::client::fluent_builders::ListConnectors {
        crate::client::fluent_builders::ListConnectors::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListCustomPlugins`](crate::client::fluent_builders::ListCustomPlugins) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListCustomPlugins::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListCustomPlugins::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListCustomPlugins::set_max_results): <p>The maximum number of custom plugins to list in one response.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListCustomPlugins::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListCustomPlugins::set_next_token): <p>If the response of a ListCustomPlugins operation is truncated, it will include a NextToken. Send this NextToken in a subsequent request to continue listing from where the previous operation left off.</p>
    /// - On success, responds with [`ListCustomPluginsOutput`](crate::output::ListCustomPluginsOutput) with field(s):
    ///   - [`custom_plugins(Option<Vec<CustomPluginSummary>>)`](crate::output::ListCustomPluginsOutput::custom_plugins): <p>An array of custom plugin descriptions.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListCustomPluginsOutput::next_token): <p>If the response of a ListCustomPlugins operation is truncated, it will include a NextToken. Send this NextToken in a subsequent request to continue listing from where the previous operation left off.</p>
    /// - On failure, responds with [`SdkError<ListCustomPluginsError>`](crate::error::ListCustomPluginsError)
    pub fn list_custom_plugins(&self) -> crate::client::fluent_builders::ListCustomPlugins {
        crate::client::fluent_builders::ListCustomPlugins::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListWorkerConfigurations`](crate::client::fluent_builders::ListWorkerConfigurations) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListWorkerConfigurations::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListWorkerConfigurations::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListWorkerConfigurations::set_max_results): <p>The maximum number of worker configurations to list in one response.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListWorkerConfigurations::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListWorkerConfigurations::set_next_token): <p>If the response of a ListWorkerConfigurations operation is truncated, it will include a NextToken. Send this NextToken in a subsequent request to continue listing from where the previous operation left off.</p>
    /// - On success, responds with [`ListWorkerConfigurationsOutput`](crate::output::ListWorkerConfigurationsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListWorkerConfigurationsOutput::next_token): <p>If the response of a ListWorkerConfigurations operation is truncated, it will include a NextToken. Send this NextToken in a subsequent request to continue listing from where the previous operation left off.</p>
    ///   - [`worker_configurations(Option<Vec<WorkerConfigurationSummary>>)`](crate::output::ListWorkerConfigurationsOutput::worker_configurations): <p>An array of worker configuration descriptions.</p>
    /// - On failure, responds with [`SdkError<ListWorkerConfigurationsError>`](crate::error::ListWorkerConfigurationsError)
    pub fn list_worker_configurations(
        &self,
    ) -> crate::client::fluent_builders::ListWorkerConfigurations {
        crate::client::fluent_builders::ListWorkerConfigurations::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateConnector`](crate::client::fluent_builders::UpdateConnector) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`capacity(CapacityUpdate)`](crate::client::fluent_builders::UpdateConnector::capacity) / [`set_capacity(Option<CapacityUpdate>)`](crate::client::fluent_builders::UpdateConnector::set_capacity): <p>The target capacity.</p>
    ///   - [`connector_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateConnector::connector_arn) / [`set_connector_arn(Option<String>)`](crate::client::fluent_builders::UpdateConnector::set_connector_arn): <p>The Amazon Resource Name (ARN) of the connector that you want to update.</p>
    ///   - [`current_version(impl Into<String>)`](crate::client::fluent_builders::UpdateConnector::current_version) / [`set_current_version(Option<String>)`](crate::client::fluent_builders::UpdateConnector::set_current_version): <p>The current version of the connector that you want to update.</p>
    /// - On success, responds with [`UpdateConnectorOutput`](crate::output::UpdateConnectorOutput) with field(s):
    ///   - [`connector_arn(Option<String>)`](crate::output::UpdateConnectorOutput::connector_arn): <p>The Amazon Resource Name (ARN) of the connector.</p>
    ///   - [`connector_state(Option<ConnectorState>)`](crate::output::UpdateConnectorOutput::connector_state): <p>The state of the connector.</p>
    /// - On failure, responds with [`SdkError<UpdateConnectorError>`](crate::error::UpdateConnectorError)
    pub fn update_connector(&self) -> crate::client::fluent_builders::UpdateConnector {
        crate::client::fluent_builders::UpdateConnector::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
