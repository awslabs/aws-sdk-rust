// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>HTTP Status Code 400: Bad request due to incorrect input. Correct your request and then retry it.</p>
    BadRequestException(crate::types::error::BadRequestException),
    /// <p>HTTP Status Code 409: Conflict. A resource with this name already exists. Retry your request with another name.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>HTTP Status Code 403: Access forbidden. Correct your credentials and then retry your request.</p>
    ForbiddenException(crate::types::error::ForbiddenException),
    /// <p>HTTP Status Code 500: Unexpected internal server error. Retrying your request might resolve the issue.</p>
    InternalServerErrorException(crate::types::error::InternalServerErrorException),
    /// <p>HTTP Status Code 404: Resource not found due to incorrect input. Correct your request and then retry it.</p>
    NotFoundException(crate::types::error::NotFoundException),
    /// <p>HTTP Status Code 503: Service Unavailable. Retrying your request in some time might resolve the issue.</p>
    ServiceUnavailableException(crate::types::error::ServiceUnavailableException),
    /// <p>HTTP Status Code 429: Limit exceeded. Resource limit reached.</p>
    TooManyRequestsException(crate::types::error::TooManyRequestsException),
    /// <p>HTTP Status Code 401: Unauthorized request. The provided credentials couldn't be validated.</p>
    UnauthorizedException(crate::types::error::UnauthorizedException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::BadRequestException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::ForbiddenException(inner) => inner.fmt(f),
            Error::InternalServerErrorException(inner) => inner.fmt(f),
            Error::NotFoundException(inner) => inner.fmt(f),
            Error::ServiceUnavailableException(inner) => inner.fmt(f),
            Error::TooManyRequestsException(inner) => inner.fmt(f),
            Error::UnauthorizedException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_connector::CreateConnectorError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_connector::CreateConnectorError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_connector::CreateConnectorError> for Error {
    fn from(err: crate::operation::create_connector::CreateConnectorError) -> Self {
        match err {
            crate::operation::create_connector::CreateConnectorError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_connector::CreateConnectorError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_connector::CreateConnectorError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_connector::CreateConnectorError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::create_connector::CreateConnectorError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_connector::CreateConnectorError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::create_connector::CreateConnectorError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::create_connector::CreateConnectorError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_connector::CreateConnectorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_custom_plugin::CreateCustomPluginError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_custom_plugin::CreateCustomPluginError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_custom_plugin::CreateCustomPluginError> for Error {
    fn from(err: crate::operation::create_custom_plugin::CreateCustomPluginError) -> Self {
        match err {
            crate::operation::create_custom_plugin::CreateCustomPluginError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_custom_plugin::CreateCustomPluginError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_custom_plugin::CreateCustomPluginError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_custom_plugin::CreateCustomPluginError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::create_custom_plugin::CreateCustomPluginError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_custom_plugin::CreateCustomPluginError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::create_custom_plugin::CreateCustomPluginError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::create_custom_plugin::CreateCustomPluginError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_custom_plugin::CreateCustomPluginError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_worker_configuration::CreateWorkerConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_worker_configuration::CreateWorkerConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_worker_configuration::CreateWorkerConfigurationError> for Error {
    fn from(
        err: crate::operation::create_worker_configuration::CreateWorkerConfigurationError,
    ) -> Self {
        match err {
            crate::operation::create_worker_configuration::CreateWorkerConfigurationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_worker_configuration::CreateWorkerConfigurationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_worker_configuration::CreateWorkerConfigurationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_worker_configuration::CreateWorkerConfigurationError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::create_worker_configuration::CreateWorkerConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_worker_configuration::CreateWorkerConfigurationError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::create_worker_configuration::CreateWorkerConfigurationError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::create_worker_configuration::CreateWorkerConfigurationError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_worker_configuration::CreateWorkerConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_connector::DeleteConnectorError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_connector::DeleteConnectorError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_connector::DeleteConnectorError> for Error {
    fn from(err: crate::operation::delete_connector::DeleteConnectorError) -> Self {
        match err {
            crate::operation::delete_connector::DeleteConnectorError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_connector::DeleteConnectorError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_connector::DeleteConnectorError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_connector::DeleteConnectorError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_connector::DeleteConnectorError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::delete_connector::DeleteConnectorError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_connector::DeleteConnectorError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_connector::DeleteConnectorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_custom_plugin::DeleteCustomPluginError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_custom_plugin::DeleteCustomPluginError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_custom_plugin::DeleteCustomPluginError> for Error {
    fn from(err: crate::operation::delete_custom_plugin::DeleteCustomPluginError) -> Self {
        match err {
            crate::operation::delete_custom_plugin::DeleteCustomPluginError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_custom_plugin::DeleteCustomPluginError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_custom_plugin::DeleteCustomPluginError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_custom_plugin::DeleteCustomPluginError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_custom_plugin::DeleteCustomPluginError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::delete_custom_plugin::DeleteCustomPluginError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_custom_plugin::DeleteCustomPluginError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_custom_plugin::DeleteCustomPluginError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_connector::DescribeConnectorError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_connector::DescribeConnectorError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_connector::DescribeConnectorError> for Error {
    fn from(err: crate::operation::describe_connector::DescribeConnectorError) -> Self {
        match err {
            crate::operation::describe_connector::DescribeConnectorError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::describe_connector::DescribeConnectorError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::describe_connector::DescribeConnectorError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::describe_connector::DescribeConnectorError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_connector::DescribeConnectorError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::describe_connector::DescribeConnectorError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::describe_connector::DescribeConnectorError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::describe_connector::DescribeConnectorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_custom_plugin::DescribeCustomPluginError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_custom_plugin::DescribeCustomPluginError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_custom_plugin::DescribeCustomPluginError> for Error {
    fn from(err: crate::operation::describe_custom_plugin::DescribeCustomPluginError) -> Self {
        match err {
            crate::operation::describe_custom_plugin::DescribeCustomPluginError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::describe_custom_plugin::DescribeCustomPluginError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::describe_custom_plugin::DescribeCustomPluginError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::describe_custom_plugin::DescribeCustomPluginError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_custom_plugin::DescribeCustomPluginError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::describe_custom_plugin::DescribeCustomPluginError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::describe_custom_plugin::DescribeCustomPluginError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::describe_custom_plugin::DescribeCustomPluginError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_worker_configuration::DescribeWorkerConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_worker_configuration::DescribeWorkerConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_worker_configuration::DescribeWorkerConfigurationError>
    for Error
{
    fn from(
        err: crate::operation::describe_worker_configuration::DescribeWorkerConfigurationError,
    ) -> Self {
        match err {
            crate::operation::describe_worker_configuration::DescribeWorkerConfigurationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::describe_worker_configuration::DescribeWorkerConfigurationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::describe_worker_configuration::DescribeWorkerConfigurationError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::describe_worker_configuration::DescribeWorkerConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_worker_configuration::DescribeWorkerConfigurationError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::describe_worker_configuration::DescribeWorkerConfigurationError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::describe_worker_configuration::DescribeWorkerConfigurationError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::describe_worker_configuration::DescribeWorkerConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_connectors::ListConnectorsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_connectors::ListConnectorsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_connectors::ListConnectorsError> for Error {
    fn from(err: crate::operation::list_connectors::ListConnectorsError) -> Self {
        match err {
            crate::operation::list_connectors::ListConnectorsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_connectors::ListConnectorsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_connectors::ListConnectorsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::list_connectors::ListConnectorsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_connectors::ListConnectorsError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::list_connectors::ListConnectorsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::list_connectors::ListConnectorsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_connectors::ListConnectorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_custom_plugins::ListCustomPluginsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_custom_plugins::ListCustomPluginsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_custom_plugins::ListCustomPluginsError> for Error {
    fn from(err: crate::operation::list_custom_plugins::ListCustomPluginsError) -> Self {
        match err {
            crate::operation::list_custom_plugins::ListCustomPluginsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_custom_plugins::ListCustomPluginsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_custom_plugins::ListCustomPluginsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::list_custom_plugins::ListCustomPluginsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_custom_plugins::ListCustomPluginsError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::list_custom_plugins::ListCustomPluginsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::list_custom_plugins::ListCustomPluginsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_custom_plugins::ListCustomPluginsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_worker_configurations::ListWorkerConfigurationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_worker_configurations::ListWorkerConfigurationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_worker_configurations::ListWorkerConfigurationsError> for Error {
    fn from(
        err: crate::operation::list_worker_configurations::ListWorkerConfigurationsError,
    ) -> Self {
        match err {
            crate::operation::list_worker_configurations::ListWorkerConfigurationsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_worker_configurations::ListWorkerConfigurationsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_worker_configurations::ListWorkerConfigurationsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::list_worker_configurations::ListWorkerConfigurationsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_worker_configurations::ListWorkerConfigurationsError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::list_worker_configurations::ListWorkerConfigurationsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::list_worker_configurations::ListWorkerConfigurationsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_worker_configurations::ListWorkerConfigurationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_connector::UpdateConnectorError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_connector::UpdateConnectorError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_connector::UpdateConnectorError> for Error {
    fn from(err: crate::operation::update_connector::UpdateConnectorError) -> Self {
        match err {
            crate::operation::update_connector::UpdateConnectorError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_connector::UpdateConnectorError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_connector::UpdateConnectorError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_connector::UpdateConnectorError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_connector::UpdateConnectorError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::update_connector::UpdateConnectorError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_connector::UpdateConnectorError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_connector::UpdateConnectorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::BadRequestException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::ForbiddenException(e) => e.request_id(),
            Self::InternalServerErrorException(e) => e.request_id(),
            Self::NotFoundException(e) => e.request_id(),
            Self::ServiceUnavailableException(e) => e.request_id(),
            Self::TooManyRequestsException(e) => e.request_id(),
            Self::UnauthorizedException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
