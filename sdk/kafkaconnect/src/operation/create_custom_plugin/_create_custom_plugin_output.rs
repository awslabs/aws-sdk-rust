// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateCustomPluginOutput {
    /// <p>The Amazon Resource Name (ARN) that Amazon assigned to the custom plugin.</p>
    #[doc(hidden)]
    pub custom_plugin_arn: std::option::Option<std::string::String>,
    /// <p>The state of the custom plugin.</p>
    #[doc(hidden)]
    pub custom_plugin_state: std::option::Option<crate::types::CustomPluginState>,
    /// <p>The name of the custom plugin.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The revision of the custom plugin.</p>
    #[doc(hidden)]
    pub revision: i64,
    _request_id: Option<String>,
}
impl CreateCustomPluginOutput {
    /// <p>The Amazon Resource Name (ARN) that Amazon assigned to the custom plugin.</p>
    pub fn custom_plugin_arn(&self) -> std::option::Option<&str> {
        self.custom_plugin_arn.as_deref()
    }
    /// <p>The state of the custom plugin.</p>
    pub fn custom_plugin_state(&self) -> std::option::Option<&crate::types::CustomPluginState> {
        self.custom_plugin_state.as_ref()
    }
    /// <p>The name of the custom plugin.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The revision of the custom plugin.</p>
    pub fn revision(&self) -> i64 {
        self.revision
    }
}
impl aws_http::request_id::RequestId for CreateCustomPluginOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateCustomPluginOutput {
    /// Creates a new builder-style object to manufacture [`CreateCustomPluginOutput`](crate::operation::create_custom_plugin::CreateCustomPluginOutput).
    pub fn builder(
    ) -> crate::operation::create_custom_plugin::builders::CreateCustomPluginOutputBuilder {
        crate::operation::create_custom_plugin::builders::CreateCustomPluginOutputBuilder::default()
    }
}

/// A builder for [`CreateCustomPluginOutput`](crate::operation::create_custom_plugin::CreateCustomPluginOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateCustomPluginOutputBuilder {
    pub(crate) custom_plugin_arn: std::option::Option<std::string::String>,
    pub(crate) custom_plugin_state: std::option::Option<crate::types::CustomPluginState>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) revision: std::option::Option<i64>,
    _request_id: Option<String>,
}
impl CreateCustomPluginOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) that Amazon assigned to the custom plugin.</p>
    pub fn custom_plugin_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.custom_plugin_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that Amazon assigned to the custom plugin.</p>
    pub fn set_custom_plugin_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.custom_plugin_arn = input;
        self
    }
    /// <p>The state of the custom plugin.</p>
    pub fn custom_plugin_state(mut self, input: crate::types::CustomPluginState) -> Self {
        self.custom_plugin_state = Some(input);
        self
    }
    /// <p>The state of the custom plugin.</p>
    pub fn set_custom_plugin_state(
        mut self,
        input: std::option::Option<crate::types::CustomPluginState>,
    ) -> Self {
        self.custom_plugin_state = input;
        self
    }
    /// <p>The name of the custom plugin.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the custom plugin.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The revision of the custom plugin.</p>
    pub fn revision(mut self, input: i64) -> Self {
        self.revision = Some(input);
        self
    }
    /// <p>The revision of the custom plugin.</p>
    pub fn set_revision(mut self, input: std::option::Option<i64>) -> Self {
        self.revision = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateCustomPluginOutput`](crate::operation::create_custom_plugin::CreateCustomPluginOutput).
    pub fn build(self) -> crate::operation::create_custom_plugin::CreateCustomPluginOutput {
        crate::operation::create_custom_plugin::CreateCustomPluginOutput {
            custom_plugin_arn: self.custom_plugin_arn,
            custom_plugin_state: self.custom_plugin_state,
            name: self.name,
            revision: self.revision.unwrap_or_default(),
            _request_id: self._request_id,
        }
    }
}
