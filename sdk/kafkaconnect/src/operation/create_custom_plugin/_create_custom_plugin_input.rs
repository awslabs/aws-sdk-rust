// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateCustomPluginInput {
    /// <p>The type of the plugin file.</p>
    #[doc(hidden)]
    pub content_type: std::option::Option<crate::types::CustomPluginContentType>,
    /// <p>A summary description of the custom plugin.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>Information about the location of a custom plugin.</p>
    #[doc(hidden)]
    pub location: std::option::Option<crate::types::CustomPluginLocation>,
    /// <p>The name of the custom plugin.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
}
impl CreateCustomPluginInput {
    /// <p>The type of the plugin file.</p>
    pub fn content_type(&self) -> std::option::Option<&crate::types::CustomPluginContentType> {
        self.content_type.as_ref()
    }
    /// <p>A summary description of the custom plugin.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Information about the location of a custom plugin.</p>
    pub fn location(&self) -> std::option::Option<&crate::types::CustomPluginLocation> {
        self.location.as_ref()
    }
    /// <p>The name of the custom plugin.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
}
impl CreateCustomPluginInput {
    /// Creates a new builder-style object to manufacture [`CreateCustomPluginInput`](crate::operation::create_custom_plugin::CreateCustomPluginInput).
    pub fn builder(
    ) -> crate::operation::create_custom_plugin::builders::CreateCustomPluginInputBuilder {
        crate::operation::create_custom_plugin::builders::CreateCustomPluginInputBuilder::default()
    }
}

/// A builder for [`CreateCustomPluginInput`](crate::operation::create_custom_plugin::CreateCustomPluginInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateCustomPluginInputBuilder {
    pub(crate) content_type: std::option::Option<crate::types::CustomPluginContentType>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) location: std::option::Option<crate::types::CustomPluginLocation>,
    pub(crate) name: std::option::Option<std::string::String>,
}
impl CreateCustomPluginInputBuilder {
    /// <p>The type of the plugin file.</p>
    pub fn content_type(mut self, input: crate::types::CustomPluginContentType) -> Self {
        self.content_type = Some(input);
        self
    }
    /// <p>The type of the plugin file.</p>
    pub fn set_content_type(
        mut self,
        input: std::option::Option<crate::types::CustomPluginContentType>,
    ) -> Self {
        self.content_type = input;
        self
    }
    /// <p>A summary description of the custom plugin.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A summary description of the custom plugin.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Information about the location of a custom plugin.</p>
    pub fn location(mut self, input: crate::types::CustomPluginLocation) -> Self {
        self.location = Some(input);
        self
    }
    /// <p>Information about the location of a custom plugin.</p>
    pub fn set_location(
        mut self,
        input: std::option::Option<crate::types::CustomPluginLocation>,
    ) -> Self {
        self.location = input;
        self
    }
    /// <p>The name of the custom plugin.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the custom plugin.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateCustomPluginInput`](crate::operation::create_custom_plugin::CreateCustomPluginInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_custom_plugin::CreateCustomPluginInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_custom_plugin::CreateCustomPluginInput {
                content_type: self.content_type,
                description: self.description,
                location: self.location,
                name: self.name,
            },
        )
    }
}
