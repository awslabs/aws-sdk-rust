// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DescribeConnectorOutput {
    /// <p>Information about the capacity of the connector, whether it is auto scaled or provisioned.</p>
    pub capacity: ::std::option::Option<crate::types::CapacityDescription>,
    /// <p>The Amazon Resource Name (ARN) of the connector.</p>
    pub connector_arn: ::std::option::Option<::std::string::String>,
    /// <p>A map of keys to values that represent the configuration for the connector.</p>
    pub connector_configuration: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>A summary description of the connector.</p>
    pub connector_description: ::std::option::Option<::std::string::String>,
    /// <p>The name of the connector.</p>
    pub connector_name: ::std::option::Option<::std::string::String>,
    /// <p>The state of the connector.</p>
    pub connector_state: ::std::option::Option<crate::types::ConnectorState>,
    /// <p>The time the connector was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The current version of the connector.</p>
    pub current_version: ::std::option::Option<::std::string::String>,
    /// <p>The Apache Kafka cluster that the connector is connected to.</p>
    pub kafka_cluster: ::std::option::Option<crate::types::KafkaClusterDescription>,
    /// <p>The type of client authentication used to connect to the Apache Kafka cluster. The value is NONE when no client authentication is used.</p>
    pub kafka_cluster_client_authentication: ::std::option::Option<crate::types::KafkaClusterClientAuthenticationDescription>,
    /// <p>Details of encryption in transit to the Apache Kafka cluster.</p>
    pub kafka_cluster_encryption_in_transit: ::std::option::Option<crate::types::KafkaClusterEncryptionInTransitDescription>,
    /// <p>The version of Kafka Connect. It has to be compatible with both the Apache Kafka cluster's version and the plugins.</p>
    pub kafka_connect_version: ::std::option::Option<::std::string::String>,
    /// <p>Details about delivering logs to Amazon CloudWatch Logs.</p>
    pub log_delivery: ::std::option::Option<crate::types::LogDeliveryDescription>,
    /// <p>Specifies which plugins were used for this connector.</p>
    pub plugins: ::std::option::Option<::std::vec::Vec<crate::types::PluginDescription>>,
    /// <p>The Amazon Resource Name (ARN) of the IAM role used by the connector to access Amazon Web Services resources.</p>
    pub service_execution_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>Specifies which worker configuration was used for the connector.</p>
    pub worker_configuration: ::std::option::Option<crate::types::WorkerConfigurationDescription>,
    /// <p>Details about the state of a connector.</p>
    pub state_description: ::std::option::Option<crate::types::StateDescription>,
    _request_id: Option<String>,
}
impl DescribeConnectorOutput {
    /// <p>Information about the capacity of the connector, whether it is auto scaled or provisioned.</p>
    pub fn capacity(&self) -> ::std::option::Option<&crate::types::CapacityDescription> {
        self.capacity.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the connector.</p>
    pub fn connector_arn(&self) -> ::std::option::Option<&str> {
        self.connector_arn.as_deref()
    }
    /// <p>A map of keys to values that represent the configuration for the connector.</p>
    pub fn connector_configuration(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.connector_configuration.as_ref()
    }
    /// <p>A summary description of the connector.</p>
    pub fn connector_description(&self) -> ::std::option::Option<&str> {
        self.connector_description.as_deref()
    }
    /// <p>The name of the connector.</p>
    pub fn connector_name(&self) -> ::std::option::Option<&str> {
        self.connector_name.as_deref()
    }
    /// <p>The state of the connector.</p>
    pub fn connector_state(&self) -> ::std::option::Option<&crate::types::ConnectorState> {
        self.connector_state.as_ref()
    }
    /// <p>The time the connector was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The current version of the connector.</p>
    pub fn current_version(&self) -> ::std::option::Option<&str> {
        self.current_version.as_deref()
    }
    /// <p>The Apache Kafka cluster that the connector is connected to.</p>
    pub fn kafka_cluster(&self) -> ::std::option::Option<&crate::types::KafkaClusterDescription> {
        self.kafka_cluster.as_ref()
    }
    /// <p>The type of client authentication used to connect to the Apache Kafka cluster. The value is NONE when no client authentication is used.</p>
    pub fn kafka_cluster_client_authentication(&self) -> ::std::option::Option<&crate::types::KafkaClusterClientAuthenticationDescription> {
        self.kafka_cluster_client_authentication.as_ref()
    }
    /// <p>Details of encryption in transit to the Apache Kafka cluster.</p>
    pub fn kafka_cluster_encryption_in_transit(&self) -> ::std::option::Option<&crate::types::KafkaClusterEncryptionInTransitDescription> {
        self.kafka_cluster_encryption_in_transit.as_ref()
    }
    /// <p>The version of Kafka Connect. It has to be compatible with both the Apache Kafka cluster's version and the plugins.</p>
    pub fn kafka_connect_version(&self) -> ::std::option::Option<&str> {
        self.kafka_connect_version.as_deref()
    }
    /// <p>Details about delivering logs to Amazon CloudWatch Logs.</p>
    pub fn log_delivery(&self) -> ::std::option::Option<&crate::types::LogDeliveryDescription> {
        self.log_delivery.as_ref()
    }
    /// <p>Specifies which plugins were used for this connector.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.plugins.is_none()`.
    pub fn plugins(&self) -> &[crate::types::PluginDescription] {
        self.plugins.as_deref().unwrap_or_default()
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role used by the connector to access Amazon Web Services resources.</p>
    pub fn service_execution_role_arn(&self) -> ::std::option::Option<&str> {
        self.service_execution_role_arn.as_deref()
    }
    /// <p>Specifies which worker configuration was used for the connector.</p>
    pub fn worker_configuration(&self) -> ::std::option::Option<&crate::types::WorkerConfigurationDescription> {
        self.worker_configuration.as_ref()
    }
    /// <p>Details about the state of a connector.</p>
    pub fn state_description(&self) -> ::std::option::Option<&crate::types::StateDescription> {
        self.state_description.as_ref()
    }
}
impl ::std::fmt::Debug for DescribeConnectorOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeConnectorOutput");
        formatter.field("capacity", &self.capacity);
        formatter.field("connector_arn", &self.connector_arn);
        formatter.field("connector_configuration", &"*** Sensitive Data Redacted ***");
        formatter.field("connector_description", &self.connector_description);
        formatter.field("connector_name", &self.connector_name);
        formatter.field("connector_state", &self.connector_state);
        formatter.field("creation_time", &self.creation_time);
        formatter.field("current_version", &self.current_version);
        formatter.field("kafka_cluster", &self.kafka_cluster);
        formatter.field("kafka_cluster_client_authentication", &self.kafka_cluster_client_authentication);
        formatter.field("kafka_cluster_encryption_in_transit", &self.kafka_cluster_encryption_in_transit);
        formatter.field("kafka_connect_version", &self.kafka_connect_version);
        formatter.field("log_delivery", &self.log_delivery);
        formatter.field("plugins", &self.plugins);
        formatter.field("service_execution_role_arn", &self.service_execution_role_arn);
        formatter.field("worker_configuration", &self.worker_configuration);
        formatter.field("state_description", &self.state_description);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_http::request_id::RequestId for DescribeConnectorOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeConnectorOutput {
    /// Creates a new builder-style object to manufacture [`DescribeConnectorOutput`](crate::operation::describe_connector::DescribeConnectorOutput).
    pub fn builder() -> crate::operation::describe_connector::builders::DescribeConnectorOutputBuilder {
        crate::operation::describe_connector::builders::DescribeConnectorOutputBuilder::default()
    }
}

/// A builder for [`DescribeConnectorOutput`](crate::operation::describe_connector::DescribeConnectorOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct DescribeConnectorOutputBuilder {
    pub(crate) capacity: ::std::option::Option<crate::types::CapacityDescription>,
    pub(crate) connector_arn: ::std::option::Option<::std::string::String>,
    pub(crate) connector_configuration: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) connector_description: ::std::option::Option<::std::string::String>,
    pub(crate) connector_name: ::std::option::Option<::std::string::String>,
    pub(crate) connector_state: ::std::option::Option<crate::types::ConnectorState>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) current_version: ::std::option::Option<::std::string::String>,
    pub(crate) kafka_cluster: ::std::option::Option<crate::types::KafkaClusterDescription>,
    pub(crate) kafka_cluster_client_authentication: ::std::option::Option<crate::types::KafkaClusterClientAuthenticationDescription>,
    pub(crate) kafka_cluster_encryption_in_transit: ::std::option::Option<crate::types::KafkaClusterEncryptionInTransitDescription>,
    pub(crate) kafka_connect_version: ::std::option::Option<::std::string::String>,
    pub(crate) log_delivery: ::std::option::Option<crate::types::LogDeliveryDescription>,
    pub(crate) plugins: ::std::option::Option<::std::vec::Vec<crate::types::PluginDescription>>,
    pub(crate) service_execution_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) worker_configuration: ::std::option::Option<crate::types::WorkerConfigurationDescription>,
    pub(crate) state_description: ::std::option::Option<crate::types::StateDescription>,
    _request_id: Option<String>,
}
impl DescribeConnectorOutputBuilder {
    /// <p>Information about the capacity of the connector, whether it is auto scaled or provisioned.</p>
    pub fn capacity(mut self, input: crate::types::CapacityDescription) -> Self {
        self.capacity = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the capacity of the connector, whether it is auto scaled or provisioned.</p>
    pub fn set_capacity(mut self, input: ::std::option::Option<crate::types::CapacityDescription>) -> Self {
        self.capacity = input;
        self
    }
    /// <p>Information about the capacity of the connector, whether it is auto scaled or provisioned.</p>
    pub fn get_capacity(&self) -> &::std::option::Option<crate::types::CapacityDescription> {
        &self.capacity
    }
    /// <p>The Amazon Resource Name (ARN) of the connector.</p>
    pub fn connector_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connector_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the connector.</p>
    pub fn set_connector_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connector_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the connector.</p>
    pub fn get_connector_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.connector_arn
    }
    /// Adds a key-value pair to `connector_configuration`.
    ///
    /// To override the contents of this collection use [`set_connector_configuration`](Self::set_connector_configuration).
    ///
    /// <p>A map of keys to values that represent the configuration for the connector.</p>
    pub fn connector_configuration(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.connector_configuration.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.connector_configuration = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A map of keys to values that represent the configuration for the connector.</p>
    pub fn set_connector_configuration(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.connector_configuration = input;
        self
    }
    /// <p>A map of keys to values that represent the configuration for the connector.</p>
    pub fn get_connector_configuration(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.connector_configuration
    }
    /// <p>A summary description of the connector.</p>
    pub fn connector_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connector_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A summary description of the connector.</p>
    pub fn set_connector_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connector_description = input;
        self
    }
    /// <p>A summary description of the connector.</p>
    pub fn get_connector_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.connector_description
    }
    /// <p>The name of the connector.</p>
    pub fn connector_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connector_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the connector.</p>
    pub fn set_connector_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connector_name = input;
        self
    }
    /// <p>The name of the connector.</p>
    pub fn get_connector_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.connector_name
    }
    /// <p>The state of the connector.</p>
    pub fn connector_state(mut self, input: crate::types::ConnectorState) -> Self {
        self.connector_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the connector.</p>
    pub fn set_connector_state(mut self, input: ::std::option::Option<crate::types::ConnectorState>) -> Self {
        self.connector_state = input;
        self
    }
    /// <p>The state of the connector.</p>
    pub fn get_connector_state(&self) -> &::std::option::Option<crate::types::ConnectorState> {
        &self.connector_state
    }
    /// <p>The time the connector was created.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the connector was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time the connector was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The current version of the connector.</p>
    pub fn current_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.current_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current version of the connector.</p>
    pub fn set_current_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.current_version = input;
        self
    }
    /// <p>The current version of the connector.</p>
    pub fn get_current_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.current_version
    }
    /// <p>The Apache Kafka cluster that the connector is connected to.</p>
    pub fn kafka_cluster(mut self, input: crate::types::KafkaClusterDescription) -> Self {
        self.kafka_cluster = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Apache Kafka cluster that the connector is connected to.</p>
    pub fn set_kafka_cluster(mut self, input: ::std::option::Option<crate::types::KafkaClusterDescription>) -> Self {
        self.kafka_cluster = input;
        self
    }
    /// <p>The Apache Kafka cluster that the connector is connected to.</p>
    pub fn get_kafka_cluster(&self) -> &::std::option::Option<crate::types::KafkaClusterDescription> {
        &self.kafka_cluster
    }
    /// <p>The type of client authentication used to connect to the Apache Kafka cluster. The value is NONE when no client authentication is used.</p>
    pub fn kafka_cluster_client_authentication(mut self, input: crate::types::KafkaClusterClientAuthenticationDescription) -> Self {
        self.kafka_cluster_client_authentication = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of client authentication used to connect to the Apache Kafka cluster. The value is NONE when no client authentication is used.</p>
    pub fn set_kafka_cluster_client_authentication(
        mut self,
        input: ::std::option::Option<crate::types::KafkaClusterClientAuthenticationDescription>,
    ) -> Self {
        self.kafka_cluster_client_authentication = input;
        self
    }
    /// <p>The type of client authentication used to connect to the Apache Kafka cluster. The value is NONE when no client authentication is used.</p>
    pub fn get_kafka_cluster_client_authentication(&self) -> &::std::option::Option<crate::types::KafkaClusterClientAuthenticationDescription> {
        &self.kafka_cluster_client_authentication
    }
    /// <p>Details of encryption in transit to the Apache Kafka cluster.</p>
    pub fn kafka_cluster_encryption_in_transit(mut self, input: crate::types::KafkaClusterEncryptionInTransitDescription) -> Self {
        self.kafka_cluster_encryption_in_transit = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details of encryption in transit to the Apache Kafka cluster.</p>
    pub fn set_kafka_cluster_encryption_in_transit(
        mut self,
        input: ::std::option::Option<crate::types::KafkaClusterEncryptionInTransitDescription>,
    ) -> Self {
        self.kafka_cluster_encryption_in_transit = input;
        self
    }
    /// <p>Details of encryption in transit to the Apache Kafka cluster.</p>
    pub fn get_kafka_cluster_encryption_in_transit(&self) -> &::std::option::Option<crate::types::KafkaClusterEncryptionInTransitDescription> {
        &self.kafka_cluster_encryption_in_transit
    }
    /// <p>The version of Kafka Connect. It has to be compatible with both the Apache Kafka cluster's version and the plugins.</p>
    pub fn kafka_connect_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kafka_connect_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of Kafka Connect. It has to be compatible with both the Apache Kafka cluster's version and the plugins.</p>
    pub fn set_kafka_connect_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kafka_connect_version = input;
        self
    }
    /// <p>The version of Kafka Connect. It has to be compatible with both the Apache Kafka cluster's version and the plugins.</p>
    pub fn get_kafka_connect_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.kafka_connect_version
    }
    /// <p>Details about delivering logs to Amazon CloudWatch Logs.</p>
    pub fn log_delivery(mut self, input: crate::types::LogDeliveryDescription) -> Self {
        self.log_delivery = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details about delivering logs to Amazon CloudWatch Logs.</p>
    pub fn set_log_delivery(mut self, input: ::std::option::Option<crate::types::LogDeliveryDescription>) -> Self {
        self.log_delivery = input;
        self
    }
    /// <p>Details about delivering logs to Amazon CloudWatch Logs.</p>
    pub fn get_log_delivery(&self) -> &::std::option::Option<crate::types::LogDeliveryDescription> {
        &self.log_delivery
    }
    /// Appends an item to `plugins`.
    ///
    /// To override the contents of this collection use [`set_plugins`](Self::set_plugins).
    ///
    /// <p>Specifies which plugins were used for this connector.</p>
    pub fn plugins(mut self, input: crate::types::PluginDescription) -> Self {
        let mut v = self.plugins.unwrap_or_default();
        v.push(input);
        self.plugins = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies which plugins were used for this connector.</p>
    pub fn set_plugins(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PluginDescription>>) -> Self {
        self.plugins = input;
        self
    }
    /// <p>Specifies which plugins were used for this connector.</p>
    pub fn get_plugins(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PluginDescription>> {
        &self.plugins
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role used by the connector to access Amazon Web Services resources.</p>
    pub fn service_execution_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_execution_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role used by the connector to access Amazon Web Services resources.</p>
    pub fn set_service_execution_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_execution_role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role used by the connector to access Amazon Web Services resources.</p>
    pub fn get_service_execution_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_execution_role_arn
    }
    /// <p>Specifies which worker configuration was used for the connector.</p>
    pub fn worker_configuration(mut self, input: crate::types::WorkerConfigurationDescription) -> Self {
        self.worker_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies which worker configuration was used for the connector.</p>
    pub fn set_worker_configuration(mut self, input: ::std::option::Option<crate::types::WorkerConfigurationDescription>) -> Self {
        self.worker_configuration = input;
        self
    }
    /// <p>Specifies which worker configuration was used for the connector.</p>
    pub fn get_worker_configuration(&self) -> &::std::option::Option<crate::types::WorkerConfigurationDescription> {
        &self.worker_configuration
    }
    /// <p>Details about the state of a connector.</p>
    pub fn state_description(mut self, input: crate::types::StateDescription) -> Self {
        self.state_description = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details about the state of a connector.</p>
    pub fn set_state_description(mut self, input: ::std::option::Option<crate::types::StateDescription>) -> Self {
        self.state_description = input;
        self
    }
    /// <p>Details about the state of a connector.</p>
    pub fn get_state_description(&self) -> &::std::option::Option<crate::types::StateDescription> {
        &self.state_description
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeConnectorOutput`](crate::operation::describe_connector::DescribeConnectorOutput).
    pub fn build(self) -> crate::operation::describe_connector::DescribeConnectorOutput {
        crate::operation::describe_connector::DescribeConnectorOutput {
            capacity: self.capacity,
            connector_arn: self.connector_arn,
            connector_configuration: self.connector_configuration,
            connector_description: self.connector_description,
            connector_name: self.connector_name,
            connector_state: self.connector_state,
            creation_time: self.creation_time,
            current_version: self.current_version,
            kafka_cluster: self.kafka_cluster,
            kafka_cluster_client_authentication: self.kafka_cluster_client_authentication,
            kafka_cluster_encryption_in_transit: self.kafka_cluster_encryption_in_transit,
            kafka_connect_version: self.kafka_connect_version,
            log_delivery: self.log_delivery,
            plugins: self.plugins,
            service_execution_role_arn: self.service_execution_role_arn,
            worker_configuration: self.worker_configuration,
            state_description: self.state_description,
            _request_id: self._request_id,
        }
    }
}
impl ::std::fmt::Debug for DescribeConnectorOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeConnectorOutputBuilder");
        formatter.field("capacity", &self.capacity);
        formatter.field("connector_arn", &self.connector_arn);
        formatter.field("connector_configuration", &"*** Sensitive Data Redacted ***");
        formatter.field("connector_description", &self.connector_description);
        formatter.field("connector_name", &self.connector_name);
        formatter.field("connector_state", &self.connector_state);
        formatter.field("creation_time", &self.creation_time);
        formatter.field("current_version", &self.current_version);
        formatter.field("kafka_cluster", &self.kafka_cluster);
        formatter.field("kafka_cluster_client_authentication", &self.kafka_cluster_client_authentication);
        formatter.field("kafka_cluster_encryption_in_transit", &self.kafka_cluster_encryption_in_transit);
        formatter.field("kafka_connect_version", &self.kafka_connect_version);
        formatter.field("log_delivery", &self.log_delivery);
        formatter.field("plugins", &self.plugins);
        formatter.field("service_execution_role_arn", &self.service_execution_role_arn);
        formatter.field("worker_configuration", &self.worker_configuration);
        formatter.field("state_description", &self.state_description);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
