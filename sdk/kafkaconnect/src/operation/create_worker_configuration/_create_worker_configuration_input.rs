// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateWorkerConfigurationInput {
    /// <p>A summary description of the worker configuration.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The name of the worker configuration.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Base64 encoded contents of connect-distributed.properties file.</p>
    pub properties_file_content: ::std::option::Option<::std::string::String>,
}
impl CreateWorkerConfigurationInput {
    /// <p>A summary description of the worker configuration.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The name of the worker configuration.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Base64 encoded contents of connect-distributed.properties file.</p>
    pub fn properties_file_content(&self) -> ::std::option::Option<&str> {
        self.properties_file_content.as_deref()
    }
}
impl ::std::fmt::Debug for CreateWorkerConfigurationInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateWorkerConfigurationInput");
        formatter.field("description", &self.description);
        formatter.field("name", &self.name);
        formatter.field("properties_file_content", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl CreateWorkerConfigurationInput {
    /// Creates a new builder-style object to manufacture [`CreateWorkerConfigurationInput`](crate::operation::create_worker_configuration::CreateWorkerConfigurationInput).
    pub fn builder() -> crate::operation::create_worker_configuration::builders::CreateWorkerConfigurationInputBuilder {
        crate::operation::create_worker_configuration::builders::CreateWorkerConfigurationInputBuilder::default()
    }
}

/// A builder for [`CreateWorkerConfigurationInput`](crate::operation::create_worker_configuration::CreateWorkerConfigurationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct CreateWorkerConfigurationInputBuilder {
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) properties_file_content: ::std::option::Option<::std::string::String>,
}
impl CreateWorkerConfigurationInputBuilder {
    /// <p>A summary description of the worker configuration.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A summary description of the worker configuration.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A summary description of the worker configuration.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The name of the worker configuration.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the worker configuration.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the worker configuration.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Base64 encoded contents of connect-distributed.properties file.</p>
    /// This field is required.
    pub fn properties_file_content(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.properties_file_content = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Base64 encoded contents of connect-distributed.properties file.</p>
    pub fn set_properties_file_content(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.properties_file_content = input;
        self
    }
    /// <p>Base64 encoded contents of connect-distributed.properties file.</p>
    pub fn get_properties_file_content(&self) -> &::std::option::Option<::std::string::String> {
        &self.properties_file_content
    }
    /// Consumes the builder and constructs a [`CreateWorkerConfigurationInput`](crate::operation::create_worker_configuration::CreateWorkerConfigurationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_worker_configuration::CreateWorkerConfigurationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_worker_configuration::CreateWorkerConfigurationInput {
            description: self.description,
            name: self.name,
            properties_file_content: self.properties_file_content,
        })
    }
}
impl ::std::fmt::Debug for CreateWorkerConfigurationInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateWorkerConfigurationInputBuilder");
        formatter.field("description", &self.description);
        formatter.field("name", &self.name);
        formatter.field("properties_file_content", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
