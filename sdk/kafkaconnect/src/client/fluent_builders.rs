// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Fluent builder constructing a request to `CreateConnector`.
///
/// <p>Creates a connector using the specified properties.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateConnector {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_connector_input::Builder,
}
impl CreateConnector {
    /// Creates a new `CreateConnector`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateConnector,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateConnectorError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateConnectorOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateConnectorError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Information about the capacity allocated to the connector. Exactly one of the two properties must be specified.</p>
    pub fn capacity(mut self, input: crate::model::Capacity) -> Self {
        self.inner = self.inner.capacity(input);
        self
    }
    /// <p>Information about the capacity allocated to the connector. Exactly one of the two properties must be specified.</p>
    pub fn set_capacity(mut self, input: std::option::Option<crate::model::Capacity>) -> Self {
        self.inner = self.inner.set_capacity(input);
        self
    }
    /// Adds a key-value pair to `connectorConfiguration`.
    ///
    /// To override the contents of this collection use [`set_connector_configuration`](Self::set_connector_configuration).
    ///
    /// <p>A map of keys to values that represent the configuration for the connector.</p>
    pub fn connector_configuration(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.connector_configuration(k.into(), v.into());
        self
    }
    /// <p>A map of keys to values that represent the configuration for the connector.</p>
    pub fn set_connector_configuration(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_connector_configuration(input);
        self
    }
    /// <p>A summary description of the connector.</p>
    pub fn connector_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.connector_description(input.into());
        self
    }
    /// <p>A summary description of the connector.</p>
    pub fn set_connector_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_connector_description(input);
        self
    }
    /// <p>The name of the connector.</p>
    pub fn connector_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.connector_name(input.into());
        self
    }
    /// <p>The name of the connector.</p>
    pub fn set_connector_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_connector_name(input);
        self
    }
    /// <p>Specifies which Apache Kafka cluster to connect to.</p>
    pub fn kafka_cluster(mut self, input: crate::model::KafkaCluster) -> Self {
        self.inner = self.inner.kafka_cluster(input);
        self
    }
    /// <p>Specifies which Apache Kafka cluster to connect to.</p>
    pub fn set_kafka_cluster(
        mut self,
        input: std::option::Option<crate::model::KafkaCluster>,
    ) -> Self {
        self.inner = self.inner.set_kafka_cluster(input);
        self
    }
    /// <p>Details of the client authentication used by the Apache Kafka cluster.</p>
    pub fn kafka_cluster_client_authentication(
        mut self,
        input: crate::model::KafkaClusterClientAuthentication,
    ) -> Self {
        self.inner = self.inner.kafka_cluster_client_authentication(input);
        self
    }
    /// <p>Details of the client authentication used by the Apache Kafka cluster.</p>
    pub fn set_kafka_cluster_client_authentication(
        mut self,
        input: std::option::Option<crate::model::KafkaClusterClientAuthentication>,
    ) -> Self {
        self.inner = self.inner.set_kafka_cluster_client_authentication(input);
        self
    }
    /// <p>Details of encryption in transit to the Apache Kafka cluster.</p>
    pub fn kafka_cluster_encryption_in_transit(
        mut self,
        input: crate::model::KafkaClusterEncryptionInTransit,
    ) -> Self {
        self.inner = self.inner.kafka_cluster_encryption_in_transit(input);
        self
    }
    /// <p>Details of encryption in transit to the Apache Kafka cluster.</p>
    pub fn set_kafka_cluster_encryption_in_transit(
        mut self,
        input: std::option::Option<crate::model::KafkaClusterEncryptionInTransit>,
    ) -> Self {
        self.inner = self.inner.set_kafka_cluster_encryption_in_transit(input);
        self
    }
    /// <p>The version of Kafka Connect. It has to be compatible with both the Apache Kafka cluster's version and the plugins.</p>
    pub fn kafka_connect_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.kafka_connect_version(input.into());
        self
    }
    /// <p>The version of Kafka Connect. It has to be compatible with both the Apache Kafka cluster's version and the plugins.</p>
    pub fn set_kafka_connect_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_kafka_connect_version(input);
        self
    }
    /// <p>Details about log delivery.</p>
    pub fn log_delivery(mut self, input: crate::model::LogDelivery) -> Self {
        self.inner = self.inner.log_delivery(input);
        self
    }
    /// <p>Details about log delivery.</p>
    pub fn set_log_delivery(
        mut self,
        input: std::option::Option<crate::model::LogDelivery>,
    ) -> Self {
        self.inner = self.inner.set_log_delivery(input);
        self
    }
    /// Appends an item to `plugins`.
    ///
    /// To override the contents of this collection use [`set_plugins`](Self::set_plugins).
    ///
    /// <p>Specifies which plugins to use for the connector.</p>
    pub fn plugins(mut self, input: crate::model::Plugin) -> Self {
        self.inner = self.inner.plugins(input);
        self
    }
    /// <p>Specifies which plugins to use for the connector.</p>
    pub fn set_plugins(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Plugin>>,
    ) -> Self {
        self.inner = self.inner.set_plugins(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role used by the connector to access the Amazon Web Services resources that it needs. The types of resources depends on the logic of the connector. For example, a connector that has Amazon S3 as a destination must have permissions that allow it to write to the S3 destination bucket.</p>
    pub fn service_execution_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.service_execution_role_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role used by the connector to access the Amazon Web Services resources that it needs. The types of resources depends on the logic of the connector. For example, a connector that has Amazon S3 as a destination must have permissions that allow it to write to the S3 destination bucket.</p>
    pub fn set_service_execution_role_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_service_execution_role_arn(input);
        self
    }
    /// <p>Specifies which worker configuration to use with the connector.</p>
    pub fn worker_configuration(mut self, input: crate::model::WorkerConfiguration) -> Self {
        self.inner = self.inner.worker_configuration(input);
        self
    }
    /// <p>Specifies which worker configuration to use with the connector.</p>
    pub fn set_worker_configuration(
        mut self,
        input: std::option::Option<crate::model::WorkerConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_worker_configuration(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateCustomPlugin`.
///
/// <p>Creates a custom plugin using the specified properties.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateCustomPlugin {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_custom_plugin_input::Builder,
}
impl CreateCustomPlugin {
    /// Creates a new `CreateCustomPlugin`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateCustomPlugin,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateCustomPluginError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateCustomPluginOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateCustomPluginError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The type of the plugin file.</p>
    pub fn content_type(mut self, input: crate::model::CustomPluginContentType) -> Self {
        self.inner = self.inner.content_type(input);
        self
    }
    /// <p>The type of the plugin file.</p>
    pub fn set_content_type(
        mut self,
        input: std::option::Option<crate::model::CustomPluginContentType>,
    ) -> Self {
        self.inner = self.inner.set_content_type(input);
        self
    }
    /// <p>A summary description of the custom plugin.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A summary description of the custom plugin.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>Information about the location of a custom plugin.</p>
    pub fn location(mut self, input: crate::model::CustomPluginLocation) -> Self {
        self.inner = self.inner.location(input);
        self
    }
    /// <p>Information about the location of a custom plugin.</p>
    pub fn set_location(
        mut self,
        input: std::option::Option<crate::model::CustomPluginLocation>,
    ) -> Self {
        self.inner = self.inner.set_location(input);
        self
    }
    /// <p>The name of the custom plugin.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the custom plugin.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateWorkerConfiguration`.
///
/// <p>Creates a worker configuration using the specified properties.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateWorkerConfiguration {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_worker_configuration_input::Builder,
}
impl CreateWorkerConfiguration {
    /// Creates a new `CreateWorkerConfiguration`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateWorkerConfiguration,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateWorkerConfigurationError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateWorkerConfigurationOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateWorkerConfigurationError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A summary description of the worker configuration.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A summary description of the worker configuration.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The name of the worker configuration.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the worker configuration.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>Base64 encoded contents of connect-distributed.properties file.</p>
    pub fn properties_file_content(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.properties_file_content(input.into());
        self
    }
    /// <p>Base64 encoded contents of connect-distributed.properties file.</p>
    pub fn set_properties_file_content(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_properties_file_content(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteConnector`.
///
/// <p>Deletes the specified connector.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteConnector {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_connector_input::Builder,
}
impl DeleteConnector {
    /// Creates a new `DeleteConnector`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteConnector,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteConnectorError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteConnectorOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteConnectorError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the connector that you want to delete.</p>
    pub fn connector_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.connector_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the connector that you want to delete.</p>
    pub fn set_connector_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_connector_arn(input);
        self
    }
    /// <p>The current version of the connector that you want to delete.</p>
    pub fn current_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.current_version(input.into());
        self
    }
    /// <p>The current version of the connector that you want to delete.</p>
    pub fn set_current_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_current_version(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteCustomPlugin`.
///
/// <p>Deletes a custom plugin.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteCustomPlugin {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_custom_plugin_input::Builder,
}
impl DeleteCustomPlugin {
    /// Creates a new `DeleteCustomPlugin`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteCustomPlugin,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteCustomPluginError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteCustomPluginOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteCustomPluginError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the custom plugin that you want to delete.</p>
    pub fn custom_plugin_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.custom_plugin_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the custom plugin that you want to delete.</p>
    pub fn set_custom_plugin_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_custom_plugin_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeConnector`.
///
/// <p>Returns summary information about the connector.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeConnector {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_connector_input::Builder,
}
impl DescribeConnector {
    /// Creates a new `DescribeConnector`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeConnector,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeConnectorError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeConnectorOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeConnectorError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the connector that you want to describe.</p>
    pub fn connector_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.connector_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the connector that you want to describe.</p>
    pub fn set_connector_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_connector_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeCustomPlugin`.
///
/// <p>A summary description of the custom plugin.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeCustomPlugin {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_custom_plugin_input::Builder,
}
impl DescribeCustomPlugin {
    /// Creates a new `DescribeCustomPlugin`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeCustomPlugin,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeCustomPluginError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeCustomPluginOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeCustomPluginError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Returns information about a custom plugin.</p>
    pub fn custom_plugin_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.custom_plugin_arn(input.into());
        self
    }
    /// <p>Returns information about a custom plugin.</p>
    pub fn set_custom_plugin_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_custom_plugin_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeWorkerConfiguration`.
///
/// <p>Returns information about a worker configuration.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeWorkerConfiguration {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_worker_configuration_input::Builder,
}
impl DescribeWorkerConfiguration {
    /// Creates a new `DescribeWorkerConfiguration`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeWorkerConfiguration,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeWorkerConfigurationError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeWorkerConfigurationOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeWorkerConfigurationError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the worker configuration that you want to get information about.</p>
    pub fn worker_configuration_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.worker_configuration_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the worker configuration that you want to get information about.</p>
    pub fn set_worker_configuration_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_worker_configuration_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `ListConnectors`.
///
/// <p>Returns a list of all the connectors in this account and Region. The list is limited to connectors whose name starts with the specified prefix. The response also includes a description of each of the listed connectors.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListConnectors {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_connectors_input::Builder,
}
impl ListConnectors {
    /// Creates a new `ListConnectors`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListConnectors,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListConnectorsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListConnectorsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListConnectorsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListConnectorsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListConnectorsPaginator {
        crate::paginator::ListConnectorsPaginator::new(self.handle, self.inner)
    }
    /// <p>The name prefix that you want to use to search for and list connectors.</p>
    pub fn connector_name_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.connector_name_prefix(input.into());
        self
    }
    /// <p>The name prefix that you want to use to search for and list connectors.</p>
    pub fn set_connector_name_prefix(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_connector_name_prefix(input);
        self
    }
    /// <p>The maximum number of connectors to list in one response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of connectors to list in one response.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>If the response of a ListConnectors operation is truncated, it will include a NextToken. Send this NextToken in a subsequent request to continue listing from where the previous operation left off.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the response of a ListConnectors operation is truncated, it will include a NextToken. Send this NextToken in a subsequent request to continue listing from where the previous operation left off.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListCustomPlugins`.
///
/// <p>Returns a list of all of the custom plugins in this account and Region.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListCustomPlugins {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_custom_plugins_input::Builder,
}
impl ListCustomPlugins {
    /// Creates a new `ListCustomPlugins`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListCustomPlugins,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListCustomPluginsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListCustomPluginsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListCustomPluginsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListCustomPluginsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListCustomPluginsPaginator {
        crate::paginator::ListCustomPluginsPaginator::new(self.handle, self.inner)
    }
    /// <p>The maximum number of custom plugins to list in one response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of custom plugins to list in one response.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>If the response of a ListCustomPlugins operation is truncated, it will include a NextToken. Send this NextToken in a subsequent request to continue listing from where the previous operation left off.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the response of a ListCustomPlugins operation is truncated, it will include a NextToken. Send this NextToken in a subsequent request to continue listing from where the previous operation left off.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListWorkerConfigurations`.
///
/// <p>Returns a list of all of the worker configurations in this account and Region.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListWorkerConfigurations {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_worker_configurations_input::Builder,
}
impl ListWorkerConfigurations {
    /// Creates a new `ListWorkerConfigurations`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListWorkerConfigurations,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListWorkerConfigurationsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListWorkerConfigurationsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListWorkerConfigurationsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListWorkerConfigurationsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListWorkerConfigurationsPaginator {
        crate::paginator::ListWorkerConfigurationsPaginator::new(self.handle, self.inner)
    }
    /// <p>The maximum number of worker configurations to list in one response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of worker configurations to list in one response.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>If the response of a ListWorkerConfigurations operation is truncated, it will include a NextToken. Send this NextToken in a subsequent request to continue listing from where the previous operation left off.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the response of a ListWorkerConfigurations operation is truncated, it will include a NextToken. Send this NextToken in a subsequent request to continue listing from where the previous operation left off.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateConnector`.
///
/// <p>Updates the specified connector.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateConnector {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_connector_input::Builder,
}
impl UpdateConnector {
    /// Creates a new `UpdateConnector`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateConnector,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateConnectorError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateConnectorOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateConnectorError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The target capacity.</p>
    pub fn capacity(mut self, input: crate::model::CapacityUpdate) -> Self {
        self.inner = self.inner.capacity(input);
        self
    }
    /// <p>The target capacity.</p>
    pub fn set_capacity(
        mut self,
        input: std::option::Option<crate::model::CapacityUpdate>,
    ) -> Self {
        self.inner = self.inner.set_capacity(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the connector that you want to update.</p>
    pub fn connector_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.connector_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the connector that you want to update.</p>
    pub fn set_connector_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_connector_arn(input);
        self
    }
    /// <p>The current version of the connector that you want to update.</p>
    pub fn current_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.current_version(input.into());
        self
    }
    /// <p>The current version of the connector that you want to update.</p>
    pub fn set_current_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_current_version(input);
        self
    }
}
