// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateConnector`](crate::operation::create_connector::builders::CreateConnectorFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`capacity(Capacity)`](crate::operation::create_connector::builders::CreateConnectorFluentBuilder::capacity) / [`set_capacity(Option<Capacity>)`](crate::operation::create_connector::builders::CreateConnectorFluentBuilder::set_capacity): <p>Information about the capacity allocated to the connector. Exactly one of the two properties must be specified.</p>
    ///   - [`connector_configuration(HashMap<String, String>)`](crate::operation::create_connector::builders::CreateConnectorFluentBuilder::connector_configuration) / [`set_connector_configuration(Option<HashMap<String, String>>)`](crate::operation::create_connector::builders::CreateConnectorFluentBuilder::set_connector_configuration): <p>A map of keys to values that represent the configuration for the connector.</p>
    ///   - [`connector_description(impl Into<String>)`](crate::operation::create_connector::builders::CreateConnectorFluentBuilder::connector_description) / [`set_connector_description(Option<String>)`](crate::operation::create_connector::builders::CreateConnectorFluentBuilder::set_connector_description): <p>A summary description of the connector.</p>
    ///   - [`connector_name(impl Into<String>)`](crate::operation::create_connector::builders::CreateConnectorFluentBuilder::connector_name) / [`set_connector_name(Option<String>)`](crate::operation::create_connector::builders::CreateConnectorFluentBuilder::set_connector_name): <p>The name of the connector.</p>
    ///   - [`kafka_cluster(KafkaCluster)`](crate::operation::create_connector::builders::CreateConnectorFluentBuilder::kafka_cluster) / [`set_kafka_cluster(Option<KafkaCluster>)`](crate::operation::create_connector::builders::CreateConnectorFluentBuilder::set_kafka_cluster): <p>Specifies which Apache Kafka cluster to connect to.</p>
    ///   - [`kafka_cluster_client_authentication(KafkaClusterClientAuthentication)`](crate::operation::create_connector::builders::CreateConnectorFluentBuilder::kafka_cluster_client_authentication) / [`set_kafka_cluster_client_authentication(Option<KafkaClusterClientAuthentication>)`](crate::operation::create_connector::builders::CreateConnectorFluentBuilder::set_kafka_cluster_client_authentication): <p>Details of the client authentication used by the Apache Kafka cluster.</p>
    ///   - [`kafka_cluster_encryption_in_transit(KafkaClusterEncryptionInTransit)`](crate::operation::create_connector::builders::CreateConnectorFluentBuilder::kafka_cluster_encryption_in_transit) / [`set_kafka_cluster_encryption_in_transit(Option<KafkaClusterEncryptionInTransit>)`](crate::operation::create_connector::builders::CreateConnectorFluentBuilder::set_kafka_cluster_encryption_in_transit): <p>Details of encryption in transit to the Apache Kafka cluster.</p>
    ///   - [`kafka_connect_version(impl Into<String>)`](crate::operation::create_connector::builders::CreateConnectorFluentBuilder::kafka_connect_version) / [`set_kafka_connect_version(Option<String>)`](crate::operation::create_connector::builders::CreateConnectorFluentBuilder::set_kafka_connect_version): <p>The version of Kafka Connect. It has to be compatible with both the Apache Kafka cluster's version and the plugins.</p>
    ///   - [`log_delivery(LogDelivery)`](crate::operation::create_connector::builders::CreateConnectorFluentBuilder::log_delivery) / [`set_log_delivery(Option<LogDelivery>)`](crate::operation::create_connector::builders::CreateConnectorFluentBuilder::set_log_delivery): <p>Details about log delivery.</p>
    ///   - [`plugins(Vec<Plugin>)`](crate::operation::create_connector::builders::CreateConnectorFluentBuilder::plugins) / [`set_plugins(Option<Vec<Plugin>>)`](crate::operation::create_connector::builders::CreateConnectorFluentBuilder::set_plugins): <p>Specifies which plugins to use for the connector.</p>
    ///   - [`service_execution_role_arn(impl Into<String>)`](crate::operation::create_connector::builders::CreateConnectorFluentBuilder::service_execution_role_arn) / [`set_service_execution_role_arn(Option<String>)`](crate::operation::create_connector::builders::CreateConnectorFluentBuilder::set_service_execution_role_arn): <p>The Amazon Resource Name (ARN) of the IAM role used by the connector to access the Amazon Web Services resources that it needs. The types of resources depends on the logic of the connector. For example, a connector that has Amazon S3 as a destination must have permissions that allow it to write to the S3 destination bucket.</p>
    ///   - [`worker_configuration(WorkerConfiguration)`](crate::operation::create_connector::builders::CreateConnectorFluentBuilder::worker_configuration) / [`set_worker_configuration(Option<WorkerConfiguration>)`](crate::operation::create_connector::builders::CreateConnectorFluentBuilder::set_worker_configuration): <p>Specifies which worker configuration to use with the connector.</p>
    /// - On success, responds with [`CreateConnectorOutput`](crate::operation::create_connector::CreateConnectorOutput) with field(s):
    ///   - [`connector_arn(Option<String>)`](crate::operation::create_connector::CreateConnectorOutput::connector_arn): <p>The Amazon Resource Name (ARN) that Amazon assigned to the connector.</p>
    ///   - [`connector_name(Option<String>)`](crate::operation::create_connector::CreateConnectorOutput::connector_name): <p>The name of the connector.</p>
    ///   - [`connector_state(Option<ConnectorState>)`](crate::operation::create_connector::CreateConnectorOutput::connector_state): <p>The state of the connector.</p>
    /// - On failure, responds with [`SdkError<CreateConnectorError>`](crate::operation::create_connector::CreateConnectorError)
    pub fn create_connector(
        &self,
    ) -> crate::operation::create_connector::builders::CreateConnectorFluentBuilder {
        crate::operation::create_connector::builders::CreateConnectorFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
