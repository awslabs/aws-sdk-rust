// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateStudioSessionMappingOutput {}
impl std::fmt::Debug for UpdateStudioSessionMappingOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateStudioSessionMappingOutput");
        formatter.finish()
    }
}
/// See [`UpdateStudioSessionMappingOutput`](crate::output::UpdateStudioSessionMappingOutput)
pub mod update_studio_session_mapping_output {
    /// A builder for [`UpdateStudioSessionMappingOutput`](crate::output::UpdateStudioSessionMappingOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateStudioSessionMappingOutput`](crate::output::UpdateStudioSessionMappingOutput)
        pub fn build(self) -> crate::output::UpdateStudioSessionMappingOutput {
            crate::output::UpdateStudioSessionMappingOutput {}
        }
    }
}
impl UpdateStudioSessionMappingOutput {
    /// Creates a new builder-style object to manufacture [`UpdateStudioSessionMappingOutput`](crate::output::UpdateStudioSessionMappingOutput)
    pub fn builder() -> crate::output::update_studio_session_mapping_output::Builder {
        crate::output::update_studio_session_mapping_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateStudioOutput {}
impl std::fmt::Debug for UpdateStudioOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateStudioOutput");
        formatter.finish()
    }
}
/// See [`UpdateStudioOutput`](crate::output::UpdateStudioOutput)
pub mod update_studio_output {
    /// A builder for [`UpdateStudioOutput`](crate::output::UpdateStudioOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateStudioOutput`](crate::output::UpdateStudioOutput)
        pub fn build(self) -> crate::output::UpdateStudioOutput {
            crate::output::UpdateStudioOutput {}
        }
    }
}
impl UpdateStudioOutput {
    /// Creates a new builder-style object to manufacture [`UpdateStudioOutput`](crate::output::UpdateStudioOutput)
    pub fn builder() -> crate::output::update_studio_output::Builder {
        crate::output::update_studio_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TerminateJobFlowsOutput {}
impl std::fmt::Debug for TerminateJobFlowsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TerminateJobFlowsOutput");
        formatter.finish()
    }
}
/// See [`TerminateJobFlowsOutput`](crate::output::TerminateJobFlowsOutput)
pub mod terminate_job_flows_output {
    /// A builder for [`TerminateJobFlowsOutput`](crate::output::TerminateJobFlowsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`TerminateJobFlowsOutput`](crate::output::TerminateJobFlowsOutput)
        pub fn build(self) -> crate::output::TerminateJobFlowsOutput {
            crate::output::TerminateJobFlowsOutput {}
        }
    }
}
impl TerminateJobFlowsOutput {
    /// Creates a new builder-style object to manufacture [`TerminateJobFlowsOutput`](crate::output::TerminateJobFlowsOutput)
    pub fn builder() -> crate::output::terminate_job_flows_output::Builder {
        crate::output::terminate_job_flows_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StopNotebookExecutionOutput {}
impl std::fmt::Debug for StopNotebookExecutionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StopNotebookExecutionOutput");
        formatter.finish()
    }
}
/// See [`StopNotebookExecutionOutput`](crate::output::StopNotebookExecutionOutput)
pub mod stop_notebook_execution_output {
    /// A builder for [`StopNotebookExecutionOutput`](crate::output::StopNotebookExecutionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`StopNotebookExecutionOutput`](crate::output::StopNotebookExecutionOutput)
        pub fn build(self) -> crate::output::StopNotebookExecutionOutput {
            crate::output::StopNotebookExecutionOutput {}
        }
    }
}
impl StopNotebookExecutionOutput {
    /// Creates a new builder-style object to manufacture [`StopNotebookExecutionOutput`](crate::output::StopNotebookExecutionOutput)
    pub fn builder() -> crate::output::stop_notebook_execution_output::Builder {
        crate::output::stop_notebook_execution_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StartNotebookExecutionOutput {
    /// <p>The unique identifier of the notebook execution.</p>
    pub notebook_execution_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for StartNotebookExecutionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StartNotebookExecutionOutput");
        formatter.field("notebook_execution_id", &self.notebook_execution_id);
        formatter.finish()
    }
}
/// See [`StartNotebookExecutionOutput`](crate::output::StartNotebookExecutionOutput)
pub mod start_notebook_execution_output {
    /// A builder for [`StartNotebookExecutionOutput`](crate::output::StartNotebookExecutionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) notebook_execution_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The unique identifier of the notebook execution.</p>
        pub fn notebook_execution_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.notebook_execution_id = Some(input.into());
            self
        }
        pub fn set_notebook_execution_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.notebook_execution_id = input;
            self
        }
        /// Consumes the builder and constructs a [`StartNotebookExecutionOutput`](crate::output::StartNotebookExecutionOutput)
        pub fn build(self) -> crate::output::StartNotebookExecutionOutput {
            crate::output::StartNotebookExecutionOutput {
                notebook_execution_id: self.notebook_execution_id,
            }
        }
    }
}
impl StartNotebookExecutionOutput {
    /// Creates a new builder-style object to manufacture [`StartNotebookExecutionOutput`](crate::output::StartNotebookExecutionOutput)
    pub fn builder() -> crate::output::start_notebook_execution_output::Builder {
        crate::output::start_notebook_execution_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SetVisibleToAllUsersOutput {}
impl std::fmt::Debug for SetVisibleToAllUsersOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SetVisibleToAllUsersOutput");
        formatter.finish()
    }
}
/// See [`SetVisibleToAllUsersOutput`](crate::output::SetVisibleToAllUsersOutput)
pub mod set_visible_to_all_users_output {
    /// A builder for [`SetVisibleToAllUsersOutput`](crate::output::SetVisibleToAllUsersOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`SetVisibleToAllUsersOutput`](crate::output::SetVisibleToAllUsersOutput)
        pub fn build(self) -> crate::output::SetVisibleToAllUsersOutput {
            crate::output::SetVisibleToAllUsersOutput {}
        }
    }
}
impl SetVisibleToAllUsersOutput {
    /// Creates a new builder-style object to manufacture [`SetVisibleToAllUsersOutput`](crate::output::SetVisibleToAllUsersOutput)
    pub fn builder() -> crate::output::set_visible_to_all_users_output::Builder {
        crate::output::set_visible_to_all_users_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SetTerminationProtectionOutput {}
impl std::fmt::Debug for SetTerminationProtectionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SetTerminationProtectionOutput");
        formatter.finish()
    }
}
/// See [`SetTerminationProtectionOutput`](crate::output::SetTerminationProtectionOutput)
pub mod set_termination_protection_output {
    /// A builder for [`SetTerminationProtectionOutput`](crate::output::SetTerminationProtectionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`SetTerminationProtectionOutput`](crate::output::SetTerminationProtectionOutput)
        pub fn build(self) -> crate::output::SetTerminationProtectionOutput {
            crate::output::SetTerminationProtectionOutput {}
        }
    }
}
impl SetTerminationProtectionOutput {
    /// Creates a new builder-style object to manufacture [`SetTerminationProtectionOutput`](crate::output::SetTerminationProtectionOutput)
    pub fn builder() -> crate::output::set_termination_protection_output::Builder {
        crate::output::set_termination_protection_output::Builder::default()
    }
}

/// <p> The result of the <a>RunJobFlow</a> operation. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RunJobFlowOutput {
    /// <p>A unique identifier for the job flow.</p>
    pub job_flow_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    pub cluster_arn: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for RunJobFlowOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RunJobFlowOutput");
        formatter.field("job_flow_id", &self.job_flow_id);
        formatter.field("cluster_arn", &self.cluster_arn);
        formatter.finish()
    }
}
/// See [`RunJobFlowOutput`](crate::output::RunJobFlowOutput)
pub mod run_job_flow_output {
    /// A builder for [`RunJobFlowOutput`](crate::output::RunJobFlowOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) job_flow_id: std::option::Option<std::string::String>,
        pub(crate) cluster_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>A unique identifier for the job flow.</p>
        pub fn job_flow_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.job_flow_id = Some(input.into());
            self
        }
        pub fn set_job_flow_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.job_flow_id = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_arn = Some(input.into());
            self
        }
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cluster_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`RunJobFlowOutput`](crate::output::RunJobFlowOutput)
        pub fn build(self) -> crate::output::RunJobFlowOutput {
            crate::output::RunJobFlowOutput {
                job_flow_id: self.job_flow_id,
                cluster_arn: self.cluster_arn,
            }
        }
    }
}
impl RunJobFlowOutput {
    /// Creates a new builder-style object to manufacture [`RunJobFlowOutput`](crate::output::RunJobFlowOutput)
    pub fn builder() -> crate::output::run_job_flow_output::Builder {
        crate::output::run_job_flow_output::Builder::default()
    }
}

/// <p>This output indicates the result of removing tags from the resource.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RemoveTagsOutput {}
impl std::fmt::Debug for RemoveTagsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RemoveTagsOutput");
        formatter.finish()
    }
}
/// See [`RemoveTagsOutput`](crate::output::RemoveTagsOutput)
pub mod remove_tags_output {
    /// A builder for [`RemoveTagsOutput`](crate::output::RemoveTagsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`RemoveTagsOutput`](crate::output::RemoveTagsOutput)
        pub fn build(self) -> crate::output::RemoveTagsOutput {
            crate::output::RemoveTagsOutput {}
        }
    }
}
impl RemoveTagsOutput {
    /// Creates a new builder-style object to manufacture [`RemoveTagsOutput`](crate::output::RemoveTagsOutput)
    pub fn builder() -> crate::output::remove_tags_output::Builder {
        crate::output::remove_tags_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RemoveManagedScalingPolicyOutput {}
impl std::fmt::Debug for RemoveManagedScalingPolicyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RemoveManagedScalingPolicyOutput");
        formatter.finish()
    }
}
/// See [`RemoveManagedScalingPolicyOutput`](crate::output::RemoveManagedScalingPolicyOutput)
pub mod remove_managed_scaling_policy_output {
    /// A builder for [`RemoveManagedScalingPolicyOutput`](crate::output::RemoveManagedScalingPolicyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`RemoveManagedScalingPolicyOutput`](crate::output::RemoveManagedScalingPolicyOutput)
        pub fn build(self) -> crate::output::RemoveManagedScalingPolicyOutput {
            crate::output::RemoveManagedScalingPolicyOutput {}
        }
    }
}
impl RemoveManagedScalingPolicyOutput {
    /// Creates a new builder-style object to manufacture [`RemoveManagedScalingPolicyOutput`](crate::output::RemoveManagedScalingPolicyOutput)
    pub fn builder() -> crate::output::remove_managed_scaling_policy_output::Builder {
        crate::output::remove_managed_scaling_policy_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RemoveAutoTerminationPolicyOutput {}
impl std::fmt::Debug for RemoveAutoTerminationPolicyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RemoveAutoTerminationPolicyOutput");
        formatter.finish()
    }
}
/// See [`RemoveAutoTerminationPolicyOutput`](crate::output::RemoveAutoTerminationPolicyOutput)
pub mod remove_auto_termination_policy_output {
    /// A builder for [`RemoveAutoTerminationPolicyOutput`](crate::output::RemoveAutoTerminationPolicyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`RemoveAutoTerminationPolicyOutput`](crate::output::RemoveAutoTerminationPolicyOutput)
        pub fn build(self) -> crate::output::RemoveAutoTerminationPolicyOutput {
            crate::output::RemoveAutoTerminationPolicyOutput {}
        }
    }
}
impl RemoveAutoTerminationPolicyOutput {
    /// Creates a new builder-style object to manufacture [`RemoveAutoTerminationPolicyOutput`](crate::output::RemoveAutoTerminationPolicyOutput)
    pub fn builder() -> crate::output::remove_auto_termination_policy_output::Builder {
        crate::output::remove_auto_termination_policy_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RemoveAutoScalingPolicyOutput {}
impl std::fmt::Debug for RemoveAutoScalingPolicyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RemoveAutoScalingPolicyOutput");
        formatter.finish()
    }
}
/// See [`RemoveAutoScalingPolicyOutput`](crate::output::RemoveAutoScalingPolicyOutput)
pub mod remove_auto_scaling_policy_output {
    /// A builder for [`RemoveAutoScalingPolicyOutput`](crate::output::RemoveAutoScalingPolicyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`RemoveAutoScalingPolicyOutput`](crate::output::RemoveAutoScalingPolicyOutput)
        pub fn build(self) -> crate::output::RemoveAutoScalingPolicyOutput {
            crate::output::RemoveAutoScalingPolicyOutput {}
        }
    }
}
impl RemoveAutoScalingPolicyOutput {
    /// Creates a new builder-style object to manufacture [`RemoveAutoScalingPolicyOutput`](crate::output::RemoveAutoScalingPolicyOutput)
    pub fn builder() -> crate::output::remove_auto_scaling_policy_output::Builder {
        crate::output::remove_auto_scaling_policy_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutManagedScalingPolicyOutput {}
impl std::fmt::Debug for PutManagedScalingPolicyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutManagedScalingPolicyOutput");
        formatter.finish()
    }
}
/// See [`PutManagedScalingPolicyOutput`](crate::output::PutManagedScalingPolicyOutput)
pub mod put_managed_scaling_policy_output {
    /// A builder for [`PutManagedScalingPolicyOutput`](crate::output::PutManagedScalingPolicyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`PutManagedScalingPolicyOutput`](crate::output::PutManagedScalingPolicyOutput)
        pub fn build(self) -> crate::output::PutManagedScalingPolicyOutput {
            crate::output::PutManagedScalingPolicyOutput {}
        }
    }
}
impl PutManagedScalingPolicyOutput {
    /// Creates a new builder-style object to manufacture [`PutManagedScalingPolicyOutput`](crate::output::PutManagedScalingPolicyOutput)
    pub fn builder() -> crate::output::put_managed_scaling_policy_output::Builder {
        crate::output::put_managed_scaling_policy_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutBlockPublicAccessConfigurationOutput {}
impl std::fmt::Debug for PutBlockPublicAccessConfigurationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutBlockPublicAccessConfigurationOutput");
        formatter.finish()
    }
}
/// See [`PutBlockPublicAccessConfigurationOutput`](crate::output::PutBlockPublicAccessConfigurationOutput)
pub mod put_block_public_access_configuration_output {
    /// A builder for [`PutBlockPublicAccessConfigurationOutput`](crate::output::PutBlockPublicAccessConfigurationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`PutBlockPublicAccessConfigurationOutput`](crate::output::PutBlockPublicAccessConfigurationOutput)
        pub fn build(self) -> crate::output::PutBlockPublicAccessConfigurationOutput {
            crate::output::PutBlockPublicAccessConfigurationOutput {}
        }
    }
}
impl PutBlockPublicAccessConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`PutBlockPublicAccessConfigurationOutput`](crate::output::PutBlockPublicAccessConfigurationOutput)
    pub fn builder() -> crate::output::put_block_public_access_configuration_output::Builder {
        crate::output::put_block_public_access_configuration_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutAutoTerminationPolicyOutput {}
impl std::fmt::Debug for PutAutoTerminationPolicyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutAutoTerminationPolicyOutput");
        formatter.finish()
    }
}
/// See [`PutAutoTerminationPolicyOutput`](crate::output::PutAutoTerminationPolicyOutput)
pub mod put_auto_termination_policy_output {
    /// A builder for [`PutAutoTerminationPolicyOutput`](crate::output::PutAutoTerminationPolicyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`PutAutoTerminationPolicyOutput`](crate::output::PutAutoTerminationPolicyOutput)
        pub fn build(self) -> crate::output::PutAutoTerminationPolicyOutput {
            crate::output::PutAutoTerminationPolicyOutput {}
        }
    }
}
impl PutAutoTerminationPolicyOutput {
    /// Creates a new builder-style object to manufacture [`PutAutoTerminationPolicyOutput`](crate::output::PutAutoTerminationPolicyOutput)
    pub fn builder() -> crate::output::put_auto_termination_policy_output::Builder {
        crate::output::put_auto_termination_policy_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutAutoScalingPolicyOutput {
    /// <p>Specifies the ID of a cluster. The instance group to which the automatic scaling policy
    /// is applied is within this cluster.</p>
    pub cluster_id: std::option::Option<std::string::String>,
    /// <p>Specifies the ID of the instance group to which the scaling policy is applied.</p>
    pub instance_group_id: std::option::Option<std::string::String>,
    /// <p>The automatic scaling policy definition.</p>
    pub auto_scaling_policy: std::option::Option<crate::model::AutoScalingPolicyDescription>,
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    pub cluster_arn: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for PutAutoScalingPolicyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutAutoScalingPolicyOutput");
        formatter.field("cluster_id", &self.cluster_id);
        formatter.field("instance_group_id", &self.instance_group_id);
        formatter.field("auto_scaling_policy", &self.auto_scaling_policy);
        formatter.field("cluster_arn", &self.cluster_arn);
        formatter.finish()
    }
}
/// See [`PutAutoScalingPolicyOutput`](crate::output::PutAutoScalingPolicyOutput)
pub mod put_auto_scaling_policy_output {
    /// A builder for [`PutAutoScalingPolicyOutput`](crate::output::PutAutoScalingPolicyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cluster_id: std::option::Option<std::string::String>,
        pub(crate) instance_group_id: std::option::Option<std::string::String>,
        pub(crate) auto_scaling_policy:
            std::option::Option<crate::model::AutoScalingPolicyDescription>,
        pub(crate) cluster_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Specifies the ID of a cluster. The instance group to which the automatic scaling policy
        /// is applied is within this cluster.</p>
        pub fn cluster_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_id = Some(input.into());
            self
        }
        pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cluster_id = input;
            self
        }
        /// <p>Specifies the ID of the instance group to which the scaling policy is applied.</p>
        pub fn instance_group_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.instance_group_id = Some(input.into());
            self
        }
        pub fn set_instance_group_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.instance_group_id = input;
            self
        }
        /// <p>The automatic scaling policy definition.</p>
        pub fn auto_scaling_policy(
            mut self,
            input: crate::model::AutoScalingPolicyDescription,
        ) -> Self {
            self.auto_scaling_policy = Some(input);
            self
        }
        pub fn set_auto_scaling_policy(
            mut self,
            input: std::option::Option<crate::model::AutoScalingPolicyDescription>,
        ) -> Self {
            self.auto_scaling_policy = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_arn = Some(input.into());
            self
        }
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cluster_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`PutAutoScalingPolicyOutput`](crate::output::PutAutoScalingPolicyOutput)
        pub fn build(self) -> crate::output::PutAutoScalingPolicyOutput {
            crate::output::PutAutoScalingPolicyOutput {
                cluster_id: self.cluster_id,
                instance_group_id: self.instance_group_id,
                auto_scaling_policy: self.auto_scaling_policy,
                cluster_arn: self.cluster_arn,
            }
        }
    }
}
impl PutAutoScalingPolicyOutput {
    /// Creates a new builder-style object to manufacture [`PutAutoScalingPolicyOutput`](crate::output::PutAutoScalingPolicyOutput)
    pub fn builder() -> crate::output::put_auto_scaling_policy_output::Builder {
        crate::output::put_auto_scaling_policy_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyInstanceGroupsOutput {}
impl std::fmt::Debug for ModifyInstanceGroupsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyInstanceGroupsOutput");
        formatter.finish()
    }
}
/// See [`ModifyInstanceGroupsOutput`](crate::output::ModifyInstanceGroupsOutput)
pub mod modify_instance_groups_output {
    /// A builder for [`ModifyInstanceGroupsOutput`](crate::output::ModifyInstanceGroupsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`ModifyInstanceGroupsOutput`](crate::output::ModifyInstanceGroupsOutput)
        pub fn build(self) -> crate::output::ModifyInstanceGroupsOutput {
            crate::output::ModifyInstanceGroupsOutput {}
        }
    }
}
impl ModifyInstanceGroupsOutput {
    /// Creates a new builder-style object to manufacture [`ModifyInstanceGroupsOutput`](crate::output::ModifyInstanceGroupsOutput)
    pub fn builder() -> crate::output::modify_instance_groups_output::Builder {
        crate::output::modify_instance_groups_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyInstanceFleetOutput {}
impl std::fmt::Debug for ModifyInstanceFleetOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyInstanceFleetOutput");
        formatter.finish()
    }
}
/// See [`ModifyInstanceFleetOutput`](crate::output::ModifyInstanceFleetOutput)
pub mod modify_instance_fleet_output {
    /// A builder for [`ModifyInstanceFleetOutput`](crate::output::ModifyInstanceFleetOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`ModifyInstanceFleetOutput`](crate::output::ModifyInstanceFleetOutput)
        pub fn build(self) -> crate::output::ModifyInstanceFleetOutput {
            crate::output::ModifyInstanceFleetOutput {}
        }
    }
}
impl ModifyInstanceFleetOutput {
    /// Creates a new builder-style object to manufacture [`ModifyInstanceFleetOutput`](crate::output::ModifyInstanceFleetOutput)
    pub fn builder() -> crate::output::modify_instance_fleet_output::Builder {
        crate::output::modify_instance_fleet_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyClusterOutput {
    /// <p>The number of steps that can be executed concurrently.</p>
    pub step_concurrency_level: std::option::Option<i32>,
}
impl std::fmt::Debug for ModifyClusterOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyClusterOutput");
        formatter.field("step_concurrency_level", &self.step_concurrency_level);
        formatter.finish()
    }
}
/// See [`ModifyClusterOutput`](crate::output::ModifyClusterOutput)
pub mod modify_cluster_output {
    /// A builder for [`ModifyClusterOutput`](crate::output::ModifyClusterOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) step_concurrency_level: std::option::Option<i32>,
    }
    impl Builder {
        /// <p>The number of steps that can be executed concurrently.</p>
        pub fn step_concurrency_level(mut self, input: i32) -> Self {
            self.step_concurrency_level = Some(input);
            self
        }
        pub fn set_step_concurrency_level(mut self, input: std::option::Option<i32>) -> Self {
            self.step_concurrency_level = input;
            self
        }
        /// Consumes the builder and constructs a [`ModifyClusterOutput`](crate::output::ModifyClusterOutput)
        pub fn build(self) -> crate::output::ModifyClusterOutput {
            crate::output::ModifyClusterOutput {
                step_concurrency_level: self.step_concurrency_level,
            }
        }
    }
}
impl ModifyClusterOutput {
    /// Creates a new builder-style object to manufacture [`ModifyClusterOutput`](crate::output::ModifyClusterOutput)
    pub fn builder() -> crate::output::modify_cluster_output::Builder {
        crate::output::modify_cluster_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListStudioSessionMappingsOutput {
    /// <p>A list of session mapping summary objects. Each object includes session mapping details
    /// such as creation time, identity type (user or group), and Amazon EMR Studio ID.</p>
    pub session_mappings: std::option::Option<std::vec::Vec<crate::model::SessionMappingSummary>>,
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListStudioSessionMappingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListStudioSessionMappingsOutput");
        formatter.field("session_mappings", &self.session_mappings);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}
/// See [`ListStudioSessionMappingsOutput`](crate::output::ListStudioSessionMappingsOutput)
pub mod list_studio_session_mappings_output {
    /// A builder for [`ListStudioSessionMappingsOutput`](crate::output::ListStudioSessionMappingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) session_mappings:
            std::option::Option<std::vec::Vec<crate::model::SessionMappingSummary>>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn session_mappings(
            mut self,
            input: impl Into<crate::model::SessionMappingSummary>,
        ) -> Self {
            let mut v = self.session_mappings.unwrap_or_default();
            v.push(input.into());
            self.session_mappings = Some(v);
            self
        }
        pub fn set_session_mappings(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SessionMappingSummary>>,
        ) -> Self {
            self.session_mappings = input;
            self
        }
        /// <p>The pagination token that indicates the next set of results to retrieve.</p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`ListStudioSessionMappingsOutput`](crate::output::ListStudioSessionMappingsOutput)
        pub fn build(self) -> crate::output::ListStudioSessionMappingsOutput {
            crate::output::ListStudioSessionMappingsOutput {
                session_mappings: self.session_mappings,
                marker: self.marker,
            }
        }
    }
}
impl ListStudioSessionMappingsOutput {
    /// Creates a new builder-style object to manufacture [`ListStudioSessionMappingsOutput`](crate::output::ListStudioSessionMappingsOutput)
    pub fn builder() -> crate::output::list_studio_session_mappings_output::Builder {
        crate::output::list_studio_session_mappings_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListStudiosOutput {
    /// <p>The list of Studio summary objects.</p>
    pub studios: std::option::Option<std::vec::Vec<crate::model::StudioSummary>>,
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListStudiosOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListStudiosOutput");
        formatter.field("studios", &self.studios);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}
/// See [`ListStudiosOutput`](crate::output::ListStudiosOutput)
pub mod list_studios_output {
    /// A builder for [`ListStudiosOutput`](crate::output::ListStudiosOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) studios: std::option::Option<std::vec::Vec<crate::model::StudioSummary>>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn studios(mut self, input: impl Into<crate::model::StudioSummary>) -> Self {
            let mut v = self.studios.unwrap_or_default();
            v.push(input.into());
            self.studios = Some(v);
            self
        }
        pub fn set_studios(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::StudioSummary>>,
        ) -> Self {
            self.studios = input;
            self
        }
        /// <p>The pagination token that indicates the next set of results to retrieve.</p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`ListStudiosOutput`](crate::output::ListStudiosOutput)
        pub fn build(self) -> crate::output::ListStudiosOutput {
            crate::output::ListStudiosOutput {
                studios: self.studios,
                marker: self.marker,
            }
        }
    }
}
impl ListStudiosOutput {
    /// Creates a new builder-style object to manufacture [`ListStudiosOutput`](crate::output::ListStudiosOutput)
    pub fn builder() -> crate::output::list_studios_output::Builder {
        crate::output::list_studios_output::Builder::default()
    }
}

/// <p>This output contains the list of steps returned in reverse order. This means that the
/// last step is the first element in the list.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListStepsOutput {
    /// <p>The filtered list of steps for the cluster.</p>
    pub steps: std::option::Option<std::vec::Vec<crate::model::StepSummary>>,
    /// <p>The maximum number of steps that a single <code>ListSteps</code> action returns is 50. To return a longer list of steps, use multiple <code>ListSteps</code> actions along with the <code>Marker</code> parameter, which is a pagination token that indicates the next set of results to retrieve.</p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListStepsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListStepsOutput");
        formatter.field("steps", &self.steps);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}
/// See [`ListStepsOutput`](crate::output::ListStepsOutput)
pub mod list_steps_output {
    /// A builder for [`ListStepsOutput`](crate::output::ListStepsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) steps: std::option::Option<std::vec::Vec<crate::model::StepSummary>>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn steps(mut self, input: impl Into<crate::model::StepSummary>) -> Self {
            let mut v = self.steps.unwrap_or_default();
            v.push(input.into());
            self.steps = Some(v);
            self
        }
        pub fn set_steps(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::StepSummary>>,
        ) -> Self {
            self.steps = input;
            self
        }
        /// <p>The maximum number of steps that a single <code>ListSteps</code> action returns is 50. To return a longer list of steps, use multiple <code>ListSteps</code> actions along with the <code>Marker</code> parameter, which is a pagination token that indicates the next set of results to retrieve.</p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`ListStepsOutput`](crate::output::ListStepsOutput)
        pub fn build(self) -> crate::output::ListStepsOutput {
            crate::output::ListStepsOutput {
                steps: self.steps,
                marker: self.marker,
            }
        }
    }
}
impl ListStepsOutput {
    /// Creates a new builder-style object to manufacture [`ListStepsOutput`](crate::output::ListStepsOutput)
    pub fn builder() -> crate::output::list_steps_output::Builder {
        crate::output::list_steps_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListSecurityConfigurationsOutput {
    /// <p>The creation date and time, and name, of each security configuration.</p>
    pub security_configurations:
        std::option::Option<std::vec::Vec<crate::model::SecurityConfigurationSummary>>,
    /// <p>A pagination token that indicates the next set of results to retrieve. Include the
    /// marker in the next ListSecurityConfiguration call to retrieve the next page of results, if
    /// required.</p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListSecurityConfigurationsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListSecurityConfigurationsOutput");
        formatter.field("security_configurations", &self.security_configurations);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}
/// See [`ListSecurityConfigurationsOutput`](crate::output::ListSecurityConfigurationsOutput)
pub mod list_security_configurations_output {
    /// A builder for [`ListSecurityConfigurationsOutput`](crate::output::ListSecurityConfigurationsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) security_configurations:
            std::option::Option<std::vec::Vec<crate::model::SecurityConfigurationSummary>>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn security_configurations(
            mut self,
            input: impl Into<crate::model::SecurityConfigurationSummary>,
        ) -> Self {
            let mut v = self.security_configurations.unwrap_or_default();
            v.push(input.into());
            self.security_configurations = Some(v);
            self
        }
        pub fn set_security_configurations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SecurityConfigurationSummary>>,
        ) -> Self {
            self.security_configurations = input;
            self
        }
        /// <p>A pagination token that indicates the next set of results to retrieve. Include the
        /// marker in the next ListSecurityConfiguration call to retrieve the next page of results, if
        /// required.</p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`ListSecurityConfigurationsOutput`](crate::output::ListSecurityConfigurationsOutput)
        pub fn build(self) -> crate::output::ListSecurityConfigurationsOutput {
            crate::output::ListSecurityConfigurationsOutput {
                security_configurations: self.security_configurations,
                marker: self.marker,
            }
        }
    }
}
impl ListSecurityConfigurationsOutput {
    /// Creates a new builder-style object to manufacture [`ListSecurityConfigurationsOutput`](crate::output::ListSecurityConfigurationsOutput)
    pub fn builder() -> crate::output::list_security_configurations_output::Builder {
        crate::output::list_security_configurations_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListReleaseLabelsOutput {
    /// <p>The returned release labels.</p>
    pub release_labels: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Used to paginate the next page of results if specified in the next <code>ListReleaseLabels</code> request.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListReleaseLabelsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListReleaseLabelsOutput");
        formatter.field("release_labels", &self.release_labels);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListReleaseLabelsOutput`](crate::output::ListReleaseLabelsOutput)
pub mod list_release_labels_output {
    /// A builder for [`ListReleaseLabelsOutput`](crate::output::ListReleaseLabelsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) release_labels: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn release_labels(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.release_labels.unwrap_or_default();
            v.push(input.into());
            self.release_labels = Some(v);
            self
        }
        pub fn set_release_labels(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.release_labels = input;
            self
        }
        /// <p>Used to paginate the next page of results if specified in the next <code>ListReleaseLabels</code> request.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListReleaseLabelsOutput`](crate::output::ListReleaseLabelsOutput)
        pub fn build(self) -> crate::output::ListReleaseLabelsOutput {
            crate::output::ListReleaseLabelsOutput {
                release_labels: self.release_labels,
                next_token: self.next_token,
            }
        }
    }
}
impl ListReleaseLabelsOutput {
    /// Creates a new builder-style object to manufacture [`ListReleaseLabelsOutput`](crate::output::ListReleaseLabelsOutput)
    pub fn builder() -> crate::output::list_release_labels_output::Builder {
        crate::output::list_release_labels_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListNotebookExecutionsOutput {
    /// <p>A list of notebook executions.</p>
    pub notebook_executions:
        std::option::Option<std::vec::Vec<crate::model::NotebookExecutionSummary>>,
    /// <p>A pagination token that a subsequent <code>ListNotebookExecutions</code> can use to
    /// determine the next set of results to retrieve.</p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListNotebookExecutionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListNotebookExecutionsOutput");
        formatter.field("notebook_executions", &self.notebook_executions);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}
/// See [`ListNotebookExecutionsOutput`](crate::output::ListNotebookExecutionsOutput)
pub mod list_notebook_executions_output {
    /// A builder for [`ListNotebookExecutionsOutput`](crate::output::ListNotebookExecutionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) notebook_executions:
            std::option::Option<std::vec::Vec<crate::model::NotebookExecutionSummary>>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn notebook_executions(
            mut self,
            input: impl Into<crate::model::NotebookExecutionSummary>,
        ) -> Self {
            let mut v = self.notebook_executions.unwrap_or_default();
            v.push(input.into());
            self.notebook_executions = Some(v);
            self
        }
        pub fn set_notebook_executions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::NotebookExecutionSummary>>,
        ) -> Self {
            self.notebook_executions = input;
            self
        }
        /// <p>A pagination token that a subsequent <code>ListNotebookExecutions</code> can use to
        /// determine the next set of results to retrieve.</p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`ListNotebookExecutionsOutput`](crate::output::ListNotebookExecutionsOutput)
        pub fn build(self) -> crate::output::ListNotebookExecutionsOutput {
            crate::output::ListNotebookExecutionsOutput {
                notebook_executions: self.notebook_executions,
                marker: self.marker,
            }
        }
    }
}
impl ListNotebookExecutionsOutput {
    /// Creates a new builder-style object to manufacture [`ListNotebookExecutionsOutput`](crate::output::ListNotebookExecutionsOutput)
    pub fn builder() -> crate::output::list_notebook_executions_output::Builder {
        crate::output::list_notebook_executions_output::Builder::default()
    }
}

/// <p>This output contains the list of instances.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListInstancesOutput {
    /// <p>The list of instances for the cluster and given filters.</p>
    pub instances: std::option::Option<std::vec::Vec<crate::model::Instance>>,
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListInstancesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListInstancesOutput");
        formatter.field("instances", &self.instances);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}
/// See [`ListInstancesOutput`](crate::output::ListInstancesOutput)
pub mod list_instances_output {
    /// A builder for [`ListInstancesOutput`](crate::output::ListInstancesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instances: std::option::Option<std::vec::Vec<crate::model::Instance>>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn instances(mut self, input: impl Into<crate::model::Instance>) -> Self {
            let mut v = self.instances.unwrap_or_default();
            v.push(input.into());
            self.instances = Some(v);
            self
        }
        pub fn set_instances(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Instance>>,
        ) -> Self {
            self.instances = input;
            self
        }
        /// <p>The pagination token that indicates the next set of results to retrieve.</p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`ListInstancesOutput`](crate::output::ListInstancesOutput)
        pub fn build(self) -> crate::output::ListInstancesOutput {
            crate::output::ListInstancesOutput {
                instances: self.instances,
                marker: self.marker,
            }
        }
    }
}
impl ListInstancesOutput {
    /// Creates a new builder-style object to manufacture [`ListInstancesOutput`](crate::output::ListInstancesOutput)
    pub fn builder() -> crate::output::list_instances_output::Builder {
        crate::output::list_instances_output::Builder::default()
    }
}

/// <p>This input determines which instance groups to retrieve.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListInstanceGroupsOutput {
    /// <p>The list of instance groups for the cluster and given filters.</p>
    pub instance_groups: std::option::Option<std::vec::Vec<crate::model::InstanceGroup>>,
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListInstanceGroupsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListInstanceGroupsOutput");
        formatter.field("instance_groups", &self.instance_groups);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}
/// See [`ListInstanceGroupsOutput`](crate::output::ListInstanceGroupsOutput)
pub mod list_instance_groups_output {
    /// A builder for [`ListInstanceGroupsOutput`](crate::output::ListInstanceGroupsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_groups: std::option::Option<std::vec::Vec<crate::model::InstanceGroup>>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn instance_groups(mut self, input: impl Into<crate::model::InstanceGroup>) -> Self {
            let mut v = self.instance_groups.unwrap_or_default();
            v.push(input.into());
            self.instance_groups = Some(v);
            self
        }
        pub fn set_instance_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::InstanceGroup>>,
        ) -> Self {
            self.instance_groups = input;
            self
        }
        /// <p>The pagination token that indicates the next set of results to retrieve.</p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`ListInstanceGroupsOutput`](crate::output::ListInstanceGroupsOutput)
        pub fn build(self) -> crate::output::ListInstanceGroupsOutput {
            crate::output::ListInstanceGroupsOutput {
                instance_groups: self.instance_groups,
                marker: self.marker,
            }
        }
    }
}
impl ListInstanceGroupsOutput {
    /// Creates a new builder-style object to manufacture [`ListInstanceGroupsOutput`](crate::output::ListInstanceGroupsOutput)
    pub fn builder() -> crate::output::list_instance_groups_output::Builder {
        crate::output::list_instance_groups_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListInstanceFleetsOutput {
    /// <p>The list of instance fleets for the cluster and given filters.</p>
    pub instance_fleets: std::option::Option<std::vec::Vec<crate::model::InstanceFleet>>,
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListInstanceFleetsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListInstanceFleetsOutput");
        formatter.field("instance_fleets", &self.instance_fleets);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}
/// See [`ListInstanceFleetsOutput`](crate::output::ListInstanceFleetsOutput)
pub mod list_instance_fleets_output {
    /// A builder for [`ListInstanceFleetsOutput`](crate::output::ListInstanceFleetsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_fleets: std::option::Option<std::vec::Vec<crate::model::InstanceFleet>>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn instance_fleets(mut self, input: impl Into<crate::model::InstanceFleet>) -> Self {
            let mut v = self.instance_fleets.unwrap_or_default();
            v.push(input.into());
            self.instance_fleets = Some(v);
            self
        }
        pub fn set_instance_fleets(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::InstanceFleet>>,
        ) -> Self {
            self.instance_fleets = input;
            self
        }
        /// <p>The pagination token that indicates the next set of results to retrieve.</p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`ListInstanceFleetsOutput`](crate::output::ListInstanceFleetsOutput)
        pub fn build(self) -> crate::output::ListInstanceFleetsOutput {
            crate::output::ListInstanceFleetsOutput {
                instance_fleets: self.instance_fleets,
                marker: self.marker,
            }
        }
    }
}
impl ListInstanceFleetsOutput {
    /// Creates a new builder-style object to manufacture [`ListInstanceFleetsOutput`](crate::output::ListInstanceFleetsOutput)
    pub fn builder() -> crate::output::list_instance_fleets_output::Builder {
        crate::output::list_instance_fleets_output::Builder::default()
    }
}

/// <p>This contains a ClusterSummaryList with the cluster details; for example, the cluster
/// IDs, names, and status.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListClustersOutput {
    /// <p>The list of clusters for the account based on the given filters.</p>
    pub clusters: std::option::Option<std::vec::Vec<crate::model::ClusterSummary>>,
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListClustersOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListClustersOutput");
        formatter.field("clusters", &self.clusters);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}
/// See [`ListClustersOutput`](crate::output::ListClustersOutput)
pub mod list_clusters_output {
    /// A builder for [`ListClustersOutput`](crate::output::ListClustersOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) clusters: std::option::Option<std::vec::Vec<crate::model::ClusterSummary>>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn clusters(mut self, input: impl Into<crate::model::ClusterSummary>) -> Self {
            let mut v = self.clusters.unwrap_or_default();
            v.push(input.into());
            self.clusters = Some(v);
            self
        }
        pub fn set_clusters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ClusterSummary>>,
        ) -> Self {
            self.clusters = input;
            self
        }
        /// <p>The pagination token that indicates the next set of results to retrieve.</p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`ListClustersOutput`](crate::output::ListClustersOutput)
        pub fn build(self) -> crate::output::ListClustersOutput {
            crate::output::ListClustersOutput {
                clusters: self.clusters,
                marker: self.marker,
            }
        }
    }
}
impl ListClustersOutput {
    /// Creates a new builder-style object to manufacture [`ListClustersOutput`](crate::output::ListClustersOutput)
    pub fn builder() -> crate::output::list_clusters_output::Builder {
        crate::output::list_clusters_output::Builder::default()
    }
}

/// <p>This output contains the bootstrap actions detail.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListBootstrapActionsOutput {
    /// <p>The bootstrap actions associated with the cluster.</p>
    pub bootstrap_actions: std::option::Option<std::vec::Vec<crate::model::Command>>,
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListBootstrapActionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListBootstrapActionsOutput");
        formatter.field("bootstrap_actions", &self.bootstrap_actions);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}
/// See [`ListBootstrapActionsOutput`](crate::output::ListBootstrapActionsOutput)
pub mod list_bootstrap_actions_output {
    /// A builder for [`ListBootstrapActionsOutput`](crate::output::ListBootstrapActionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) bootstrap_actions: std::option::Option<std::vec::Vec<crate::model::Command>>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn bootstrap_actions(mut self, input: impl Into<crate::model::Command>) -> Self {
            let mut v = self.bootstrap_actions.unwrap_or_default();
            v.push(input.into());
            self.bootstrap_actions = Some(v);
            self
        }
        pub fn set_bootstrap_actions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Command>>,
        ) -> Self {
            self.bootstrap_actions = input;
            self
        }
        /// <p>The pagination token that indicates the next set of results to retrieve.</p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`ListBootstrapActionsOutput`](crate::output::ListBootstrapActionsOutput)
        pub fn build(self) -> crate::output::ListBootstrapActionsOutput {
            crate::output::ListBootstrapActionsOutput {
                bootstrap_actions: self.bootstrap_actions,
                marker: self.marker,
            }
        }
    }
}
impl ListBootstrapActionsOutput {
    /// Creates a new builder-style object to manufacture [`ListBootstrapActionsOutput`](crate::output::ListBootstrapActionsOutput)
    pub fn builder() -> crate::output::list_bootstrap_actions_output::Builder {
        crate::output::list_bootstrap_actions_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetStudioSessionMappingOutput {
    /// <p>The session mapping details for the specified Amazon EMR Studio and identity, including
    /// session policy ARN and creation time.</p>
    pub session_mapping: std::option::Option<crate::model::SessionMappingDetail>,
}
impl std::fmt::Debug for GetStudioSessionMappingOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetStudioSessionMappingOutput");
        formatter.field("session_mapping", &self.session_mapping);
        formatter.finish()
    }
}
/// See [`GetStudioSessionMappingOutput`](crate::output::GetStudioSessionMappingOutput)
pub mod get_studio_session_mapping_output {
    /// A builder for [`GetStudioSessionMappingOutput`](crate::output::GetStudioSessionMappingOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) session_mapping: std::option::Option<crate::model::SessionMappingDetail>,
    }
    impl Builder {
        /// <p>The session mapping details for the specified Amazon EMR Studio and identity, including
        /// session policy ARN and creation time.</p>
        pub fn session_mapping(mut self, input: crate::model::SessionMappingDetail) -> Self {
            self.session_mapping = Some(input);
            self
        }
        pub fn set_session_mapping(
            mut self,
            input: std::option::Option<crate::model::SessionMappingDetail>,
        ) -> Self {
            self.session_mapping = input;
            self
        }
        /// Consumes the builder and constructs a [`GetStudioSessionMappingOutput`](crate::output::GetStudioSessionMappingOutput)
        pub fn build(self) -> crate::output::GetStudioSessionMappingOutput {
            crate::output::GetStudioSessionMappingOutput {
                session_mapping: self.session_mapping,
            }
        }
    }
}
impl GetStudioSessionMappingOutput {
    /// Creates a new builder-style object to manufacture [`GetStudioSessionMappingOutput`](crate::output::GetStudioSessionMappingOutput)
    pub fn builder() -> crate::output::get_studio_session_mapping_output::Builder {
        crate::output::get_studio_session_mapping_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetManagedScalingPolicyOutput {
    /// <p>Specifies the managed scaling policy that is attached to an Amazon EMR cluster. </p>
    pub managed_scaling_policy: std::option::Option<crate::model::ManagedScalingPolicy>,
}
impl std::fmt::Debug for GetManagedScalingPolicyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetManagedScalingPolicyOutput");
        formatter.field("managed_scaling_policy", &self.managed_scaling_policy);
        formatter.finish()
    }
}
/// See [`GetManagedScalingPolicyOutput`](crate::output::GetManagedScalingPolicyOutput)
pub mod get_managed_scaling_policy_output {
    /// A builder for [`GetManagedScalingPolicyOutput`](crate::output::GetManagedScalingPolicyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) managed_scaling_policy: std::option::Option<crate::model::ManagedScalingPolicy>,
    }
    impl Builder {
        /// <p>Specifies the managed scaling policy that is attached to an Amazon EMR cluster. </p>
        pub fn managed_scaling_policy(mut self, input: crate::model::ManagedScalingPolicy) -> Self {
            self.managed_scaling_policy = Some(input);
            self
        }
        pub fn set_managed_scaling_policy(
            mut self,
            input: std::option::Option<crate::model::ManagedScalingPolicy>,
        ) -> Self {
            self.managed_scaling_policy = input;
            self
        }
        /// Consumes the builder and constructs a [`GetManagedScalingPolicyOutput`](crate::output::GetManagedScalingPolicyOutput)
        pub fn build(self) -> crate::output::GetManagedScalingPolicyOutput {
            crate::output::GetManagedScalingPolicyOutput {
                managed_scaling_policy: self.managed_scaling_policy,
            }
        }
    }
}
impl GetManagedScalingPolicyOutput {
    /// Creates a new builder-style object to manufacture [`GetManagedScalingPolicyOutput`](crate::output::GetManagedScalingPolicyOutput)
    pub fn builder() -> crate::output::get_managed_scaling_policy_output::Builder {
        crate::output::get_managed_scaling_policy_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetBlockPublicAccessConfigurationOutput {
    /// <p>A configuration for Amazon EMR block public access. The configuration applies to all
    /// clusters created in your account for the current Region. The configuration specifies
    /// whether block public access is enabled. If block public access is enabled, security groups
    /// associated with the cluster cannot have rules that allow inbound traffic from 0.0.0.0/0 or
    /// ::/0 on a port, unless the port is specified as an exception using
    /// <code>PermittedPublicSecurityGroupRuleRanges</code> in the
    /// <code>BlockPublicAccessConfiguration</code>. By default, Port 22 (SSH) is an exception,
    /// and public access is allowed on this port. You can change this by updating the block public
    /// access configuration to remove the exception.</p>
    /// <note>
    /// <p>For accounts that created clusters in a Region before November 25, 2019, block public
    /// access is disabled by default in that Region. To use this feature, you must manually
    /// enable and configure it. For accounts that did not create an EMR cluster in a Region
    /// before this date, block public access is enabled by default in that Region.</p>
    /// </note>
    pub block_public_access_configuration:
        std::option::Option<crate::model::BlockPublicAccessConfiguration>,
    /// <p>Properties that describe the Amazon Web Services principal that created the
    /// <code>BlockPublicAccessConfiguration</code> using the
    /// <code>PutBlockPublicAccessConfiguration</code> action as well as the date and time that
    /// the configuration was created. Each time a configuration for block public access is
    /// updated, Amazon EMR updates this metadata.</p>
    pub block_public_access_configuration_metadata:
        std::option::Option<crate::model::BlockPublicAccessConfigurationMetadata>,
}
impl std::fmt::Debug for GetBlockPublicAccessConfigurationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetBlockPublicAccessConfigurationOutput");
        formatter.field(
            "block_public_access_configuration",
            &self.block_public_access_configuration,
        );
        formatter.field(
            "block_public_access_configuration_metadata",
            &self.block_public_access_configuration_metadata,
        );
        formatter.finish()
    }
}
/// See [`GetBlockPublicAccessConfigurationOutput`](crate::output::GetBlockPublicAccessConfigurationOutput)
pub mod get_block_public_access_configuration_output {
    /// A builder for [`GetBlockPublicAccessConfigurationOutput`](crate::output::GetBlockPublicAccessConfigurationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) block_public_access_configuration:
            std::option::Option<crate::model::BlockPublicAccessConfiguration>,
        pub(crate) block_public_access_configuration_metadata:
            std::option::Option<crate::model::BlockPublicAccessConfigurationMetadata>,
    }
    impl Builder {
        /// <p>A configuration for Amazon EMR block public access. The configuration applies to all
        /// clusters created in your account for the current Region. The configuration specifies
        /// whether block public access is enabled. If block public access is enabled, security groups
        /// associated with the cluster cannot have rules that allow inbound traffic from 0.0.0.0/0 or
        /// ::/0 on a port, unless the port is specified as an exception using
        /// <code>PermittedPublicSecurityGroupRuleRanges</code> in the
        /// <code>BlockPublicAccessConfiguration</code>. By default, Port 22 (SSH) is an exception,
        /// and public access is allowed on this port. You can change this by updating the block public
        /// access configuration to remove the exception.</p>
        /// <note>
        /// <p>For accounts that created clusters in a Region before November 25, 2019, block public
        /// access is disabled by default in that Region. To use this feature, you must manually
        /// enable and configure it. For accounts that did not create an EMR cluster in a Region
        /// before this date, block public access is enabled by default in that Region.</p>
        /// </note>
        pub fn block_public_access_configuration(
            mut self,
            input: crate::model::BlockPublicAccessConfiguration,
        ) -> Self {
            self.block_public_access_configuration = Some(input);
            self
        }
        pub fn set_block_public_access_configuration(
            mut self,
            input: std::option::Option<crate::model::BlockPublicAccessConfiguration>,
        ) -> Self {
            self.block_public_access_configuration = input;
            self
        }
        /// <p>Properties that describe the Amazon Web Services principal that created the
        /// <code>BlockPublicAccessConfiguration</code> using the
        /// <code>PutBlockPublicAccessConfiguration</code> action as well as the date and time that
        /// the configuration was created. Each time a configuration for block public access is
        /// updated, Amazon EMR updates this metadata.</p>
        pub fn block_public_access_configuration_metadata(
            mut self,
            input: crate::model::BlockPublicAccessConfigurationMetadata,
        ) -> Self {
            self.block_public_access_configuration_metadata = Some(input);
            self
        }
        pub fn set_block_public_access_configuration_metadata(
            mut self,
            input: std::option::Option<crate::model::BlockPublicAccessConfigurationMetadata>,
        ) -> Self {
            self.block_public_access_configuration_metadata = input;
            self
        }
        /// Consumes the builder and constructs a [`GetBlockPublicAccessConfigurationOutput`](crate::output::GetBlockPublicAccessConfigurationOutput)
        pub fn build(self) -> crate::output::GetBlockPublicAccessConfigurationOutput {
            crate::output::GetBlockPublicAccessConfigurationOutput {
                block_public_access_configuration: self.block_public_access_configuration,
                block_public_access_configuration_metadata: self
                    .block_public_access_configuration_metadata,
            }
        }
    }
}
impl GetBlockPublicAccessConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`GetBlockPublicAccessConfigurationOutput`](crate::output::GetBlockPublicAccessConfigurationOutput)
    pub fn builder() -> crate::output::get_block_public_access_configuration_output::Builder {
        crate::output::get_block_public_access_configuration_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetAutoTerminationPolicyOutput {
    /// <p>Specifies the auto-termination policy that is attached to an Amazon EMR cluster. </p>
    pub auto_termination_policy: std::option::Option<crate::model::AutoTerminationPolicy>,
}
impl std::fmt::Debug for GetAutoTerminationPolicyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetAutoTerminationPolicyOutput");
        formatter.field("auto_termination_policy", &self.auto_termination_policy);
        formatter.finish()
    }
}
/// See [`GetAutoTerminationPolicyOutput`](crate::output::GetAutoTerminationPolicyOutput)
pub mod get_auto_termination_policy_output {
    /// A builder for [`GetAutoTerminationPolicyOutput`](crate::output::GetAutoTerminationPolicyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) auto_termination_policy:
            std::option::Option<crate::model::AutoTerminationPolicy>,
    }
    impl Builder {
        /// <p>Specifies the auto-termination policy that is attached to an Amazon EMR cluster. </p>
        pub fn auto_termination_policy(
            mut self,
            input: crate::model::AutoTerminationPolicy,
        ) -> Self {
            self.auto_termination_policy = Some(input);
            self
        }
        pub fn set_auto_termination_policy(
            mut self,
            input: std::option::Option<crate::model::AutoTerminationPolicy>,
        ) -> Self {
            self.auto_termination_policy = input;
            self
        }
        /// Consumes the builder and constructs a [`GetAutoTerminationPolicyOutput`](crate::output::GetAutoTerminationPolicyOutput)
        pub fn build(self) -> crate::output::GetAutoTerminationPolicyOutput {
            crate::output::GetAutoTerminationPolicyOutput {
                auto_termination_policy: self.auto_termination_policy,
            }
        }
    }
}
impl GetAutoTerminationPolicyOutput {
    /// Creates a new builder-style object to manufacture [`GetAutoTerminationPolicyOutput`](crate::output::GetAutoTerminationPolicyOutput)
    pub fn builder() -> crate::output::get_auto_termination_policy_output::Builder {
        crate::output::get_auto_termination_policy_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeStudioOutput {
    /// <p>The Amazon EMR Studio details.</p>
    pub studio: std::option::Option<crate::model::Studio>,
}
impl std::fmt::Debug for DescribeStudioOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeStudioOutput");
        formatter.field("studio", &self.studio);
        formatter.finish()
    }
}
/// See [`DescribeStudioOutput`](crate::output::DescribeStudioOutput)
pub mod describe_studio_output {
    /// A builder for [`DescribeStudioOutput`](crate::output::DescribeStudioOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) studio: std::option::Option<crate::model::Studio>,
    }
    impl Builder {
        /// <p>The Amazon EMR Studio details.</p>
        pub fn studio(mut self, input: crate::model::Studio) -> Self {
            self.studio = Some(input);
            self
        }
        pub fn set_studio(mut self, input: std::option::Option<crate::model::Studio>) -> Self {
            self.studio = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeStudioOutput`](crate::output::DescribeStudioOutput)
        pub fn build(self) -> crate::output::DescribeStudioOutput {
            crate::output::DescribeStudioOutput {
                studio: self.studio,
            }
        }
    }
}
impl DescribeStudioOutput {
    /// Creates a new builder-style object to manufacture [`DescribeStudioOutput`](crate::output::DescribeStudioOutput)
    pub fn builder() -> crate::output::describe_studio_output::Builder {
        crate::output::describe_studio_output::Builder::default()
    }
}

/// <p>This output contains the description of the cluster step.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeStepOutput {
    /// <p>The step details for the requested step identifier.</p>
    pub step: std::option::Option<crate::model::Step>,
}
impl std::fmt::Debug for DescribeStepOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeStepOutput");
        formatter.field("step", &self.step);
        formatter.finish()
    }
}
/// See [`DescribeStepOutput`](crate::output::DescribeStepOutput)
pub mod describe_step_output {
    /// A builder for [`DescribeStepOutput`](crate::output::DescribeStepOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) step: std::option::Option<crate::model::Step>,
    }
    impl Builder {
        /// <p>The step details for the requested step identifier.</p>
        pub fn step(mut self, input: crate::model::Step) -> Self {
            self.step = Some(input);
            self
        }
        pub fn set_step(mut self, input: std::option::Option<crate::model::Step>) -> Self {
            self.step = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeStepOutput`](crate::output::DescribeStepOutput)
        pub fn build(self) -> crate::output::DescribeStepOutput {
            crate::output::DescribeStepOutput { step: self.step }
        }
    }
}
impl DescribeStepOutput {
    /// Creates a new builder-style object to manufacture [`DescribeStepOutput`](crate::output::DescribeStepOutput)
    pub fn builder() -> crate::output::describe_step_output::Builder {
        crate::output::describe_step_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeSecurityConfigurationOutput {
    /// <p>The name of the security configuration.</p>
    pub name: std::option::Option<std::string::String>,
    /// <p>The security configuration details in JSON format.</p>
    pub security_configuration: std::option::Option<std::string::String>,
    /// <p>The date and time the security configuration was created</p>
    pub creation_date_time: std::option::Option<smithy_types::Instant>,
}
impl std::fmt::Debug for DescribeSecurityConfigurationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeSecurityConfigurationOutput");
        formatter.field("name", &self.name);
        formatter.field("security_configuration", &self.security_configuration);
        formatter.field("creation_date_time", &self.creation_date_time);
        formatter.finish()
    }
}
/// See [`DescribeSecurityConfigurationOutput`](crate::output::DescribeSecurityConfigurationOutput)
pub mod describe_security_configuration_output {
    /// A builder for [`DescribeSecurityConfigurationOutput`](crate::output::DescribeSecurityConfigurationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) security_configuration: std::option::Option<std::string::String>,
        pub(crate) creation_date_time: std::option::Option<smithy_types::Instant>,
    }
    impl Builder {
        /// <p>The name of the security configuration.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The security configuration details in JSON format.</p>
        pub fn security_configuration(mut self, input: impl Into<std::string::String>) -> Self {
            self.security_configuration = Some(input.into());
            self
        }
        pub fn set_security_configuration(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.security_configuration = input;
            self
        }
        /// <p>The date and time the security configuration was created</p>
        pub fn creation_date_time(mut self, input: smithy_types::Instant) -> Self {
            self.creation_date_time = Some(input);
            self
        }
        pub fn set_creation_date_time(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.creation_date_time = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeSecurityConfigurationOutput`](crate::output::DescribeSecurityConfigurationOutput)
        pub fn build(self) -> crate::output::DescribeSecurityConfigurationOutput {
            crate::output::DescribeSecurityConfigurationOutput {
                name: self.name,
                security_configuration: self.security_configuration,
                creation_date_time: self.creation_date_time,
            }
        }
    }
}
impl DescribeSecurityConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DescribeSecurityConfigurationOutput`](crate::output::DescribeSecurityConfigurationOutput)
    pub fn builder() -> crate::output::describe_security_configuration_output::Builder {
        crate::output::describe_security_configuration_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeReleaseLabelOutput {
    /// <p>The target release label described in the response.</p>
    pub release_label: std::option::Option<std::string::String>,
    /// <p>The list of applications available for the target release label. <code>Name</code> is the name of the application. <code>Version</code> is the concise version of the application.</p>
    pub applications: std::option::Option<std::vec::Vec<crate::model::SimplifiedApplication>>,
    /// <p>The pagination token. Reserved for future use. Currently set to null.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeReleaseLabelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeReleaseLabelOutput");
        formatter.field("release_label", &self.release_label);
        formatter.field("applications", &self.applications);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeReleaseLabelOutput`](crate::output::DescribeReleaseLabelOutput)
pub mod describe_release_label_output {
    /// A builder for [`DescribeReleaseLabelOutput`](crate::output::DescribeReleaseLabelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) release_label: std::option::Option<std::string::String>,
        pub(crate) applications:
            std::option::Option<std::vec::Vec<crate::model::SimplifiedApplication>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The target release label described in the response.</p>
        pub fn release_label(mut self, input: impl Into<std::string::String>) -> Self {
            self.release_label = Some(input.into());
            self
        }
        pub fn set_release_label(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.release_label = input;
            self
        }
        pub fn applications(
            mut self,
            input: impl Into<crate::model::SimplifiedApplication>,
        ) -> Self {
            let mut v = self.applications.unwrap_or_default();
            v.push(input.into());
            self.applications = Some(v);
            self
        }
        pub fn set_applications(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SimplifiedApplication>>,
        ) -> Self {
            self.applications = input;
            self
        }
        /// <p>The pagination token. Reserved for future use. Currently set to null.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeReleaseLabelOutput`](crate::output::DescribeReleaseLabelOutput)
        pub fn build(self) -> crate::output::DescribeReleaseLabelOutput {
            crate::output::DescribeReleaseLabelOutput {
                release_label: self.release_label,
                applications: self.applications,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeReleaseLabelOutput {
    /// Creates a new builder-style object to manufacture [`DescribeReleaseLabelOutput`](crate::output::DescribeReleaseLabelOutput)
    pub fn builder() -> crate::output::describe_release_label_output::Builder {
        crate::output::describe_release_label_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeNotebookExecutionOutput {
    /// <p>Properties of the notebook execution.</p>
    pub notebook_execution: std::option::Option<crate::model::NotebookExecution>,
}
impl std::fmt::Debug for DescribeNotebookExecutionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeNotebookExecutionOutput");
        formatter.field("notebook_execution", &self.notebook_execution);
        formatter.finish()
    }
}
/// See [`DescribeNotebookExecutionOutput`](crate::output::DescribeNotebookExecutionOutput)
pub mod describe_notebook_execution_output {
    /// A builder for [`DescribeNotebookExecutionOutput`](crate::output::DescribeNotebookExecutionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) notebook_execution: std::option::Option<crate::model::NotebookExecution>,
    }
    impl Builder {
        /// <p>Properties of the notebook execution.</p>
        pub fn notebook_execution(mut self, input: crate::model::NotebookExecution) -> Self {
            self.notebook_execution = Some(input);
            self
        }
        pub fn set_notebook_execution(
            mut self,
            input: std::option::Option<crate::model::NotebookExecution>,
        ) -> Self {
            self.notebook_execution = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeNotebookExecutionOutput`](crate::output::DescribeNotebookExecutionOutput)
        pub fn build(self) -> crate::output::DescribeNotebookExecutionOutput {
            crate::output::DescribeNotebookExecutionOutput {
                notebook_execution: self.notebook_execution,
            }
        }
    }
}
impl DescribeNotebookExecutionOutput {
    /// Creates a new builder-style object to manufacture [`DescribeNotebookExecutionOutput`](crate::output::DescribeNotebookExecutionOutput)
    pub fn builder() -> crate::output::describe_notebook_execution_output::Builder {
        crate::output::describe_notebook_execution_output::Builder::default()
    }
}

/// <p> The output for the <a>DescribeJobFlows</a> operation. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeJobFlowsOutput {
    /// <p>A list of job flows matching the parameters supplied.</p>
    pub job_flows: std::option::Option<std::vec::Vec<crate::model::JobFlowDetail>>,
}
impl std::fmt::Debug for DescribeJobFlowsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeJobFlowsOutput");
        formatter.field("job_flows", &self.job_flows);
        formatter.finish()
    }
}
/// See [`DescribeJobFlowsOutput`](crate::output::DescribeJobFlowsOutput)
pub mod describe_job_flows_output {
    /// A builder for [`DescribeJobFlowsOutput`](crate::output::DescribeJobFlowsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) job_flows: std::option::Option<std::vec::Vec<crate::model::JobFlowDetail>>,
    }
    impl Builder {
        pub fn job_flows(mut self, input: impl Into<crate::model::JobFlowDetail>) -> Self {
            let mut v = self.job_flows.unwrap_or_default();
            v.push(input.into());
            self.job_flows = Some(v);
            self
        }
        pub fn set_job_flows(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::JobFlowDetail>>,
        ) -> Self {
            self.job_flows = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeJobFlowsOutput`](crate::output::DescribeJobFlowsOutput)
        pub fn build(self) -> crate::output::DescribeJobFlowsOutput {
            crate::output::DescribeJobFlowsOutput {
                job_flows: self.job_flows,
            }
        }
    }
}
impl DescribeJobFlowsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeJobFlowsOutput`](crate::output::DescribeJobFlowsOutput)
    pub fn builder() -> crate::output::describe_job_flows_output::Builder {
        crate::output::describe_job_flows_output::Builder::default()
    }
}

/// <p>This output contains the description of the cluster.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeClusterOutput {
    /// <p>This output contains the details for the requested cluster.</p>
    pub cluster: std::option::Option<crate::model::Cluster>,
}
impl std::fmt::Debug for DescribeClusterOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeClusterOutput");
        formatter.field("cluster", &self.cluster);
        formatter.finish()
    }
}
/// See [`DescribeClusterOutput`](crate::output::DescribeClusterOutput)
pub mod describe_cluster_output {
    /// A builder for [`DescribeClusterOutput`](crate::output::DescribeClusterOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cluster: std::option::Option<crate::model::Cluster>,
    }
    impl Builder {
        /// <p>This output contains the details for the requested cluster.</p>
        pub fn cluster(mut self, input: crate::model::Cluster) -> Self {
            self.cluster = Some(input);
            self
        }
        pub fn set_cluster(mut self, input: std::option::Option<crate::model::Cluster>) -> Self {
            self.cluster = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeClusterOutput`](crate::output::DescribeClusterOutput)
        pub fn build(self) -> crate::output::DescribeClusterOutput {
            crate::output::DescribeClusterOutput {
                cluster: self.cluster,
            }
        }
    }
}
impl DescribeClusterOutput {
    /// Creates a new builder-style object to manufacture [`DescribeClusterOutput`](crate::output::DescribeClusterOutput)
    pub fn builder() -> crate::output::describe_cluster_output::Builder {
        crate::output::describe_cluster_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteStudioSessionMappingOutput {}
impl std::fmt::Debug for DeleteStudioSessionMappingOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteStudioSessionMappingOutput");
        formatter.finish()
    }
}
/// See [`DeleteStudioSessionMappingOutput`](crate::output::DeleteStudioSessionMappingOutput)
pub mod delete_studio_session_mapping_output {
    /// A builder for [`DeleteStudioSessionMappingOutput`](crate::output::DeleteStudioSessionMappingOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteStudioSessionMappingOutput`](crate::output::DeleteStudioSessionMappingOutput)
        pub fn build(self) -> crate::output::DeleteStudioSessionMappingOutput {
            crate::output::DeleteStudioSessionMappingOutput {}
        }
    }
}
impl DeleteStudioSessionMappingOutput {
    /// Creates a new builder-style object to manufacture [`DeleteStudioSessionMappingOutput`](crate::output::DeleteStudioSessionMappingOutput)
    pub fn builder() -> crate::output::delete_studio_session_mapping_output::Builder {
        crate::output::delete_studio_session_mapping_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteStudioOutput {}
impl std::fmt::Debug for DeleteStudioOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteStudioOutput");
        formatter.finish()
    }
}
/// See [`DeleteStudioOutput`](crate::output::DeleteStudioOutput)
pub mod delete_studio_output {
    /// A builder for [`DeleteStudioOutput`](crate::output::DeleteStudioOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteStudioOutput`](crate::output::DeleteStudioOutput)
        pub fn build(self) -> crate::output::DeleteStudioOutput {
            crate::output::DeleteStudioOutput {}
        }
    }
}
impl DeleteStudioOutput {
    /// Creates a new builder-style object to manufacture [`DeleteStudioOutput`](crate::output::DeleteStudioOutput)
    pub fn builder() -> crate::output::delete_studio_output::Builder {
        crate::output::delete_studio_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteSecurityConfigurationOutput {}
impl std::fmt::Debug for DeleteSecurityConfigurationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteSecurityConfigurationOutput");
        formatter.finish()
    }
}
/// See [`DeleteSecurityConfigurationOutput`](crate::output::DeleteSecurityConfigurationOutput)
pub mod delete_security_configuration_output {
    /// A builder for [`DeleteSecurityConfigurationOutput`](crate::output::DeleteSecurityConfigurationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteSecurityConfigurationOutput`](crate::output::DeleteSecurityConfigurationOutput)
        pub fn build(self) -> crate::output::DeleteSecurityConfigurationOutput {
            crate::output::DeleteSecurityConfigurationOutput {}
        }
    }
}
impl DeleteSecurityConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteSecurityConfigurationOutput`](crate::output::DeleteSecurityConfigurationOutput)
    pub fn builder() -> crate::output::delete_security_configuration_output::Builder {
        crate::output::delete_security_configuration_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateStudioSessionMappingOutput {}
impl std::fmt::Debug for CreateStudioSessionMappingOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateStudioSessionMappingOutput");
        formatter.finish()
    }
}
/// See [`CreateStudioSessionMappingOutput`](crate::output::CreateStudioSessionMappingOutput)
pub mod create_studio_session_mapping_output {
    /// A builder for [`CreateStudioSessionMappingOutput`](crate::output::CreateStudioSessionMappingOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`CreateStudioSessionMappingOutput`](crate::output::CreateStudioSessionMappingOutput)
        pub fn build(self) -> crate::output::CreateStudioSessionMappingOutput {
            crate::output::CreateStudioSessionMappingOutput {}
        }
    }
}
impl CreateStudioSessionMappingOutput {
    /// Creates a new builder-style object to manufacture [`CreateStudioSessionMappingOutput`](crate::output::CreateStudioSessionMappingOutput)
    pub fn builder() -> crate::output::create_studio_session_mapping_output::Builder {
        crate::output::create_studio_session_mapping_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateStudioOutput {
    /// <p>The ID of the Amazon EMR Studio.</p>
    pub studio_id: std::option::Option<std::string::String>,
    /// <p>The unique Studio access URL.</p>
    pub url: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateStudioOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateStudioOutput");
        formatter.field("studio_id", &self.studio_id);
        formatter.field("url", &self.url);
        formatter.finish()
    }
}
/// See [`CreateStudioOutput`](crate::output::CreateStudioOutput)
pub mod create_studio_output {
    /// A builder for [`CreateStudioOutput`](crate::output::CreateStudioOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) studio_id: std::option::Option<std::string::String>,
        pub(crate) url: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ID of the Amazon EMR Studio.</p>
        pub fn studio_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.studio_id = Some(input.into());
            self
        }
        pub fn set_studio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.studio_id = input;
            self
        }
        /// <p>The unique Studio access URL.</p>
        pub fn url(mut self, input: impl Into<std::string::String>) -> Self {
            self.url = Some(input.into());
            self
        }
        pub fn set_url(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.url = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateStudioOutput`](crate::output::CreateStudioOutput)
        pub fn build(self) -> crate::output::CreateStudioOutput {
            crate::output::CreateStudioOutput {
                studio_id: self.studio_id,
                url: self.url,
            }
        }
    }
}
impl CreateStudioOutput {
    /// Creates a new builder-style object to manufacture [`CreateStudioOutput`](crate::output::CreateStudioOutput)
    pub fn builder() -> crate::output::create_studio_output::Builder {
        crate::output::create_studio_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateSecurityConfigurationOutput {
    /// <p>The name of the security configuration.</p>
    pub name: std::option::Option<std::string::String>,
    /// <p>The date and time the security configuration was created.</p>
    pub creation_date_time: std::option::Option<smithy_types::Instant>,
}
impl std::fmt::Debug for CreateSecurityConfigurationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateSecurityConfigurationOutput");
        formatter.field("name", &self.name);
        formatter.field("creation_date_time", &self.creation_date_time);
        formatter.finish()
    }
}
/// See [`CreateSecurityConfigurationOutput`](crate::output::CreateSecurityConfigurationOutput)
pub mod create_security_configuration_output {
    /// A builder for [`CreateSecurityConfigurationOutput`](crate::output::CreateSecurityConfigurationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) creation_date_time: std::option::Option<smithy_types::Instant>,
    }
    impl Builder {
        /// <p>The name of the security configuration.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The date and time the security configuration was created.</p>
        pub fn creation_date_time(mut self, input: smithy_types::Instant) -> Self {
            self.creation_date_time = Some(input);
            self
        }
        pub fn set_creation_date_time(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.creation_date_time = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateSecurityConfigurationOutput`](crate::output::CreateSecurityConfigurationOutput)
        pub fn build(self) -> crate::output::CreateSecurityConfigurationOutput {
            crate::output::CreateSecurityConfigurationOutput {
                name: self.name,
                creation_date_time: self.creation_date_time,
            }
        }
    }
}
impl CreateSecurityConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`CreateSecurityConfigurationOutput`](crate::output::CreateSecurityConfigurationOutput)
    pub fn builder() -> crate::output::create_security_configuration_output::Builder {
        crate::output::create_security_configuration_output::Builder::default()
    }
}

/// <p> The output for the <a>CancelSteps</a> operation. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CancelStepsOutput {
    /// <p>A list of <a>CancelStepsInfo</a>, which shows the status of specified cancel
    /// requests for each <code>StepID</code> specified.</p>
    pub cancel_steps_info_list: std::option::Option<std::vec::Vec<crate::model::CancelStepsInfo>>,
}
impl std::fmt::Debug for CancelStepsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CancelStepsOutput");
        formatter.field("cancel_steps_info_list", &self.cancel_steps_info_list);
        formatter.finish()
    }
}
/// See [`CancelStepsOutput`](crate::output::CancelStepsOutput)
pub mod cancel_steps_output {
    /// A builder for [`CancelStepsOutput`](crate::output::CancelStepsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cancel_steps_info_list:
            std::option::Option<std::vec::Vec<crate::model::CancelStepsInfo>>,
    }
    impl Builder {
        pub fn cancel_steps_info_list(
            mut self,
            input: impl Into<crate::model::CancelStepsInfo>,
        ) -> Self {
            let mut v = self.cancel_steps_info_list.unwrap_or_default();
            v.push(input.into());
            self.cancel_steps_info_list = Some(v);
            self
        }
        pub fn set_cancel_steps_info_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CancelStepsInfo>>,
        ) -> Self {
            self.cancel_steps_info_list = input;
            self
        }
        /// Consumes the builder and constructs a [`CancelStepsOutput`](crate::output::CancelStepsOutput)
        pub fn build(self) -> crate::output::CancelStepsOutput {
            crate::output::CancelStepsOutput {
                cancel_steps_info_list: self.cancel_steps_info_list,
            }
        }
    }
}
impl CancelStepsOutput {
    /// Creates a new builder-style object to manufacture [`CancelStepsOutput`](crate::output::CancelStepsOutput)
    pub fn builder() -> crate::output::cancel_steps_output::Builder {
        crate::output::cancel_steps_output::Builder::default()
    }
}

/// <p>This output indicates the result of adding tags to a resource.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AddTagsOutput {}
impl std::fmt::Debug for AddTagsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AddTagsOutput");
        formatter.finish()
    }
}
/// See [`AddTagsOutput`](crate::output::AddTagsOutput)
pub mod add_tags_output {
    /// A builder for [`AddTagsOutput`](crate::output::AddTagsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`AddTagsOutput`](crate::output::AddTagsOutput)
        pub fn build(self) -> crate::output::AddTagsOutput {
            crate::output::AddTagsOutput {}
        }
    }
}
impl AddTagsOutput {
    /// Creates a new builder-style object to manufacture [`AddTagsOutput`](crate::output::AddTagsOutput)
    pub fn builder() -> crate::output::add_tags_output::Builder {
        crate::output::add_tags_output::Builder::default()
    }
}

/// <p> The output for the <a>AddJobFlowSteps</a> operation. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AddJobFlowStepsOutput {
    /// <p>The identifiers of the list of steps added to the job flow.</p>
    pub step_ids: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl std::fmt::Debug for AddJobFlowStepsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AddJobFlowStepsOutput");
        formatter.field("step_ids", &self.step_ids);
        formatter.finish()
    }
}
/// See [`AddJobFlowStepsOutput`](crate::output::AddJobFlowStepsOutput)
pub mod add_job_flow_steps_output {
    /// A builder for [`AddJobFlowStepsOutput`](crate::output::AddJobFlowStepsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) step_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    }
    impl Builder {
        pub fn step_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.step_ids.unwrap_or_default();
            v.push(input.into());
            self.step_ids = Some(v);
            self
        }
        pub fn set_step_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.step_ids = input;
            self
        }
        /// Consumes the builder and constructs a [`AddJobFlowStepsOutput`](crate::output::AddJobFlowStepsOutput)
        pub fn build(self) -> crate::output::AddJobFlowStepsOutput {
            crate::output::AddJobFlowStepsOutput {
                step_ids: self.step_ids,
            }
        }
    }
}
impl AddJobFlowStepsOutput {
    /// Creates a new builder-style object to manufacture [`AddJobFlowStepsOutput`](crate::output::AddJobFlowStepsOutput)
    pub fn builder() -> crate::output::add_job_flow_steps_output::Builder {
        crate::output::add_job_flow_steps_output::Builder::default()
    }
}

/// <p>Output from an AddInstanceGroups call.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AddInstanceGroupsOutput {
    /// <p>The job flow ID in which the instance groups are added.</p>
    pub job_flow_id: std::option::Option<std::string::String>,
    /// <p>Instance group IDs of the newly created instance groups.</p>
    pub instance_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The Amazon Resource Name of the cluster.</p>
    pub cluster_arn: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for AddInstanceGroupsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AddInstanceGroupsOutput");
        formatter.field("job_flow_id", &self.job_flow_id);
        formatter.field("instance_group_ids", &self.instance_group_ids);
        formatter.field("cluster_arn", &self.cluster_arn);
        formatter.finish()
    }
}
/// See [`AddInstanceGroupsOutput`](crate::output::AddInstanceGroupsOutput)
pub mod add_instance_groups_output {
    /// A builder for [`AddInstanceGroupsOutput`](crate::output::AddInstanceGroupsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) job_flow_id: std::option::Option<std::string::String>,
        pub(crate) instance_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) cluster_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The job flow ID in which the instance groups are added.</p>
        pub fn job_flow_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.job_flow_id = Some(input.into());
            self
        }
        pub fn set_job_flow_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.job_flow_id = input;
            self
        }
        pub fn instance_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.instance_group_ids.unwrap_or_default();
            v.push(input.into());
            self.instance_group_ids = Some(v);
            self
        }
        pub fn set_instance_group_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.instance_group_ids = input;
            self
        }
        /// <p>The Amazon Resource Name of the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_arn = Some(input.into());
            self
        }
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cluster_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`AddInstanceGroupsOutput`](crate::output::AddInstanceGroupsOutput)
        pub fn build(self) -> crate::output::AddInstanceGroupsOutput {
            crate::output::AddInstanceGroupsOutput {
                job_flow_id: self.job_flow_id,
                instance_group_ids: self.instance_group_ids,
                cluster_arn: self.cluster_arn,
            }
        }
    }
}
impl AddInstanceGroupsOutput {
    /// Creates a new builder-style object to manufacture [`AddInstanceGroupsOutput`](crate::output::AddInstanceGroupsOutput)
    pub fn builder() -> crate::output::add_instance_groups_output::Builder {
        crate::output::add_instance_groups_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AddInstanceFleetOutput {
    /// <p>The unique identifier of the cluster.</p>
    pub cluster_id: std::option::Option<std::string::String>,
    /// <p>The unique identifier of the instance fleet.</p>
    pub instance_fleet_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name of the cluster.</p>
    pub cluster_arn: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for AddInstanceFleetOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AddInstanceFleetOutput");
        formatter.field("cluster_id", &self.cluster_id);
        formatter.field("instance_fleet_id", &self.instance_fleet_id);
        formatter.field("cluster_arn", &self.cluster_arn);
        formatter.finish()
    }
}
/// See [`AddInstanceFleetOutput`](crate::output::AddInstanceFleetOutput)
pub mod add_instance_fleet_output {
    /// A builder for [`AddInstanceFleetOutput`](crate::output::AddInstanceFleetOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cluster_id: std::option::Option<std::string::String>,
        pub(crate) instance_fleet_id: std::option::Option<std::string::String>,
        pub(crate) cluster_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The unique identifier of the cluster.</p>
        pub fn cluster_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_id = Some(input.into());
            self
        }
        pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cluster_id = input;
            self
        }
        /// <p>The unique identifier of the instance fleet.</p>
        pub fn instance_fleet_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.instance_fleet_id = Some(input.into());
            self
        }
        pub fn set_instance_fleet_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.instance_fleet_id = input;
            self
        }
        /// <p>The Amazon Resource Name of the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_arn = Some(input.into());
            self
        }
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cluster_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`AddInstanceFleetOutput`](crate::output::AddInstanceFleetOutput)
        pub fn build(self) -> crate::output::AddInstanceFleetOutput {
            crate::output::AddInstanceFleetOutput {
                cluster_id: self.cluster_id,
                instance_fleet_id: self.instance_fleet_id,
                cluster_arn: self.cluster_arn,
            }
        }
    }
}
impl AddInstanceFleetOutput {
    /// Creates a new builder-style object to manufacture [`AddInstanceFleetOutput`](crate::output::AddInstanceFleetOutput)
    pub fn builder() -> crate::output::add_instance_fleet_output::Builder {
        crate::output::add_instance_fleet_output::Builder::default()
    }
}
