// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>Indicates that an error occurred while processing the request and that the request was not completed.</p>
    InternalServerError(crate::types::error::InternalServerError),
    /// <p>This exception occurs when there is an internal failure in the Amazon EMR service.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>This exception occurs when there is something wrong with user input.</p>
    InvalidRequestException(crate::types::error::InvalidRequestException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::InternalServerError(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::InvalidRequestException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::add_instance_fleet::AddInstanceFleetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::add_instance_fleet::AddInstanceFleetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::add_instance_fleet::AddInstanceFleetError> for Error {
    fn from(err: crate::operation::add_instance_fleet::AddInstanceFleetError) -> Self {
        match err {
            crate::operation::add_instance_fleet::AddInstanceFleetError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::add_instance_fleet::AddInstanceFleetError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::add_instance_fleet::AddInstanceFleetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::add_instance_groups::AddInstanceGroupsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::add_instance_groups::AddInstanceGroupsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::add_instance_groups::AddInstanceGroupsError> for Error {
    fn from(err: crate::operation::add_instance_groups::AddInstanceGroupsError) -> Self {
        match err {
            crate::operation::add_instance_groups::AddInstanceGroupsError::InternalServerError(
                inner,
            ) => Error::InternalServerError(inner),
            crate::operation::add_instance_groups::AddInstanceGroupsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::add_job_flow_steps::AddJobFlowStepsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::add_job_flow_steps::AddJobFlowStepsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::add_job_flow_steps::AddJobFlowStepsError> for Error {
    fn from(err: crate::operation::add_job_flow_steps::AddJobFlowStepsError) -> Self {
        match err {
            crate::operation::add_job_flow_steps::AddJobFlowStepsError::InternalServerError(
                inner,
            ) => Error::InternalServerError(inner),
            crate::operation::add_job_flow_steps::AddJobFlowStepsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::add_tags::AddTagsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::add_tags::AddTagsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::add_tags::AddTagsError> for Error {
    fn from(err: crate::operation::add_tags::AddTagsError) -> Self {
        match err {
            crate::operation::add_tags::AddTagsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::add_tags::AddTagsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::add_tags::AddTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::cancel_steps::CancelStepsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::cancel_steps::CancelStepsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::cancel_steps::CancelStepsError> for Error {
    fn from(err: crate::operation::cancel_steps::CancelStepsError) -> Self {
        match err {
            crate::operation::cancel_steps::CancelStepsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::operation::cancel_steps::CancelStepsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::cancel_steps::CancelStepsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_security_configuration::CreateSecurityConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_security_configuration::CreateSecurityConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_security_configuration::CreateSecurityConfigurationError>
    for Error
{
    fn from(
        err: crate::operation::create_security_configuration::CreateSecurityConfigurationError,
    ) -> Self {
        match err {
            crate::operation::create_security_configuration::CreateSecurityConfigurationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_security_configuration::CreateSecurityConfigurationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::create_security_configuration::CreateSecurityConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::create_studio::CreateStudioError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_studio::CreateStudioError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_studio::CreateStudioError> for Error {
    fn from(err: crate::operation::create_studio::CreateStudioError) -> Self {
        match err {
            crate::operation::create_studio::CreateStudioError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_studio::CreateStudioError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::create_studio::CreateStudioError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_studio_session_mapping::CreateStudioSessionMappingError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_studio_session_mapping::CreateStudioSessionMappingError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_studio_session_mapping::CreateStudioSessionMappingError>
    for Error
{
    fn from(
        err: crate::operation::create_studio_session_mapping::CreateStudioSessionMappingError,
    ) -> Self {
        match err {
            crate::operation::create_studio_session_mapping::CreateStudioSessionMappingError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::create_studio_session_mapping::CreateStudioSessionMappingError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::create_studio_session_mapping::CreateStudioSessionMappingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_security_configuration::DeleteSecurityConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_security_configuration::DeleteSecurityConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_security_configuration::DeleteSecurityConfigurationError>
    for Error
{
    fn from(
        err: crate::operation::delete_security_configuration::DeleteSecurityConfigurationError,
    ) -> Self {
        match err {
            crate::operation::delete_security_configuration::DeleteSecurityConfigurationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_security_configuration::DeleteSecurityConfigurationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::delete_security_configuration::DeleteSecurityConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::delete_studio::DeleteStudioError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_studio::DeleteStudioError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_studio::DeleteStudioError> for Error {
    fn from(err: crate::operation::delete_studio::DeleteStudioError) -> Self {
        match err {
            crate::operation::delete_studio::DeleteStudioError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_studio::DeleteStudioError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::delete_studio::DeleteStudioError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_studio_session_mapping::DeleteStudioSessionMappingError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_studio_session_mapping::DeleteStudioSessionMappingError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_studio_session_mapping::DeleteStudioSessionMappingError>
    for Error
{
    fn from(
        err: crate::operation::delete_studio_session_mapping::DeleteStudioSessionMappingError,
    ) -> Self {
        match err {
            crate::operation::delete_studio_session_mapping::DeleteStudioSessionMappingError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::delete_studio_session_mapping::DeleteStudioSessionMappingError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::delete_studio_session_mapping::DeleteStudioSessionMappingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_cluster::DescribeClusterError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_cluster::DescribeClusterError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_cluster::DescribeClusterError> for Error {
    fn from(err: crate::operation::describe_cluster::DescribeClusterError) -> Self {
        match err {
            crate::operation::describe_cluster::DescribeClusterError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::describe_cluster::DescribeClusterError::InvalidRequestException(
                inner,
            ) => Error::InvalidRequestException(inner),
            crate::operation::describe_cluster::DescribeClusterError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_job_flows::DescribeJobFlowsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_job_flows::DescribeJobFlowsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_job_flows::DescribeJobFlowsError> for Error {
    fn from(err: crate::operation::describe_job_flows::DescribeJobFlowsError) -> Self {
        match err {
            crate::operation::describe_job_flows::DescribeJobFlowsError::InternalServerError(
                inner,
            ) => Error::InternalServerError(inner),
            crate::operation::describe_job_flows::DescribeJobFlowsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_notebook_execution::DescribeNotebookExecutionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_notebook_execution::DescribeNotebookExecutionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_notebook_execution::DescribeNotebookExecutionError> for Error {
    fn from(
        err: crate::operation::describe_notebook_execution::DescribeNotebookExecutionError,
    ) -> Self {
        match err {
            crate::operation::describe_notebook_execution::DescribeNotebookExecutionError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::describe_notebook_execution::DescribeNotebookExecutionError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_notebook_execution::DescribeNotebookExecutionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_release_label::DescribeReleaseLabelError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_release_label::DescribeReleaseLabelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_release_label::DescribeReleaseLabelError> for Error {
    fn from(err: crate::operation::describe_release_label::DescribeReleaseLabelError) -> Self {
        match err {
            crate::operation::describe_release_label::DescribeReleaseLabelError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_release_label::DescribeReleaseLabelError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_release_label::DescribeReleaseLabelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_security_configuration::DescribeSecurityConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_security_configuration::DescribeSecurityConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_security_configuration::DescribeSecurityConfigurationError>
    for Error
{
    fn from(
        err: crate::operation::describe_security_configuration::DescribeSecurityConfigurationError,
    ) -> Self {
        match err {
            crate::operation::describe_security_configuration::DescribeSecurityConfigurationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_security_configuration::DescribeSecurityConfigurationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_security_configuration::DescribeSecurityConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::describe_step::DescribeStepError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_step::DescribeStepError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_step::DescribeStepError> for Error {
    fn from(err: crate::operation::describe_step::DescribeStepError) -> Self {
        match err {
            crate::operation::describe_step::DescribeStepError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::describe_step::DescribeStepError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::describe_step::DescribeStepError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_studio::DescribeStudioError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_studio::DescribeStudioError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_studio::DescribeStudioError> for Error {
    fn from(err: crate::operation::describe_studio::DescribeStudioError) -> Self {
        match err {
            crate::operation::describe_studio::DescribeStudioError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::describe_studio::DescribeStudioError::InvalidRequestException(
                inner,
            ) => Error::InvalidRequestException(inner),
            crate::operation::describe_studio::DescribeStudioError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_auto_termination_policy::GetAutoTerminationPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_auto_termination_policy::GetAutoTerminationPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_auto_termination_policy::GetAutoTerminationPolicyError> for Error {
    fn from(
        err: crate::operation::get_auto_termination_policy::GetAutoTerminationPolicyError,
    ) -> Self {
        match err {
            crate::operation::get_auto_termination_policy::GetAutoTerminationPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_block_public_access_configuration::GetBlockPublicAccessConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::get_block_public_access_configuration::GetBlockPublicAccessConfigurationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::get_block_public_access_configuration::GetBlockPublicAccessConfigurationError> for Error {
    fn from(err: crate::operation::get_block_public_access_configuration::GetBlockPublicAccessConfigurationError) -> Self {
        match err {
            crate::operation::get_block_public_access_configuration::GetBlockPublicAccessConfigurationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_block_public_access_configuration::GetBlockPublicAccessConfigurationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::get_block_public_access_configuration::GetBlockPublicAccessConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_cluster_session_credentials::GetClusterSessionCredentialsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_cluster_session_credentials::GetClusterSessionCredentialsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_cluster_session_credentials::GetClusterSessionCredentialsError>
    for Error
{
    fn from(
        err: crate::operation::get_cluster_session_credentials::GetClusterSessionCredentialsError,
    ) -> Self {
        match err {
            crate::operation::get_cluster_session_credentials::GetClusterSessionCredentialsError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::get_cluster_session_credentials::GetClusterSessionCredentialsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::get_cluster_session_credentials::GetClusterSessionCredentialsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_managed_scaling_policy::GetManagedScalingPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_managed_scaling_policy::GetManagedScalingPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_managed_scaling_policy::GetManagedScalingPolicyError> for Error {
    fn from(
        err: crate::operation::get_managed_scaling_policy::GetManagedScalingPolicyError,
    ) -> Self {
        match err {
            crate::operation::get_managed_scaling_policy::GetManagedScalingPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_studio_session_mapping::GetStudioSessionMappingError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_studio_session_mapping::GetStudioSessionMappingError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_studio_session_mapping::GetStudioSessionMappingError> for Error {
    fn from(
        err: crate::operation::get_studio_session_mapping::GetStudioSessionMappingError,
    ) -> Self {
        match err {
            crate::operation::get_studio_session_mapping::GetStudioSessionMappingError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::get_studio_session_mapping::GetStudioSessionMappingError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::get_studio_session_mapping::GetStudioSessionMappingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_bootstrap_actions::ListBootstrapActionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_bootstrap_actions::ListBootstrapActionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_bootstrap_actions::ListBootstrapActionsError> for Error {
    fn from(err: crate::operation::list_bootstrap_actions::ListBootstrapActionsError) -> Self {
        match err {
            crate::operation::list_bootstrap_actions::ListBootstrapActionsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_bootstrap_actions::ListBootstrapActionsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::list_bootstrap_actions::ListBootstrapActionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_clusters::ListClustersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_clusters::ListClustersError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_clusters::ListClustersError> for Error {
    fn from(err: crate::operation::list_clusters::ListClustersError) -> Self {
        match err {
            crate::operation::list_clusters::ListClustersError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_clusters::ListClustersError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::list_clusters::ListClustersError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_instance_fleets::ListInstanceFleetsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_instance_fleets::ListInstanceFleetsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_instance_fleets::ListInstanceFleetsError> for Error {
    fn from(err: crate::operation::list_instance_fleets::ListInstanceFleetsError) -> Self {
        match err {
            crate::operation::list_instance_fleets::ListInstanceFleetsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_instance_fleets::ListInstanceFleetsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::list_instance_fleets::ListInstanceFleetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_instance_groups::ListInstanceGroupsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_instance_groups::ListInstanceGroupsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_instance_groups::ListInstanceGroupsError> for Error {
    fn from(err: crate::operation::list_instance_groups::ListInstanceGroupsError) -> Self {
        match err {
            crate::operation::list_instance_groups::ListInstanceGroupsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_instance_groups::ListInstanceGroupsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::list_instance_groups::ListInstanceGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_instances::ListInstancesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_instances::ListInstancesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_instances::ListInstancesError> for Error {
    fn from(err: crate::operation::list_instances::ListInstancesError) -> Self {
        match err {
            crate::operation::list_instances::ListInstancesError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::list_instances::ListInstancesError::InvalidRequestException(
                inner,
            ) => Error::InvalidRequestException(inner),
            crate::operation::list_instances::ListInstancesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_notebook_executions::ListNotebookExecutionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_notebook_executions::ListNotebookExecutionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_notebook_executions::ListNotebookExecutionsError> for Error {
    fn from(err: crate::operation::list_notebook_executions::ListNotebookExecutionsError) -> Self {
        match err {
            crate::operation::list_notebook_executions::ListNotebookExecutionsError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::list_notebook_executions::ListNotebookExecutionsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::list_notebook_executions::ListNotebookExecutionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_release_labels::ListReleaseLabelsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_release_labels::ListReleaseLabelsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_release_labels::ListReleaseLabelsError> for Error {
    fn from(err: crate::operation::list_release_labels::ListReleaseLabelsError) -> Self {
        match err {
            crate::operation::list_release_labels::ListReleaseLabelsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_release_labels::ListReleaseLabelsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::list_release_labels::ListReleaseLabelsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_security_configurations::ListSecurityConfigurationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_security_configurations::ListSecurityConfigurationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_security_configurations::ListSecurityConfigurationsError>
    for Error
{
    fn from(
        err: crate::operation::list_security_configurations::ListSecurityConfigurationsError,
    ) -> Self {
        match err {
            crate::operation::list_security_configurations::ListSecurityConfigurationsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_security_configurations::ListSecurityConfigurationsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::list_security_configurations::ListSecurityConfigurationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_steps::ListStepsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_steps::ListStepsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_steps::ListStepsError> for Error {
    fn from(err: crate::operation::list_steps::ListStepsError) -> Self {
        match err {
            crate::operation::list_steps::ListStepsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_steps::ListStepsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::list_steps::ListStepsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_studios::ListStudiosError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_studios::ListStudiosError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_studios::ListStudiosError> for Error {
    fn from(err: crate::operation::list_studios::ListStudiosError) -> Self {
        match err {
            crate::operation::list_studios::ListStudiosError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_studios::ListStudiosError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::list_studios::ListStudiosError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_studio_session_mappings::ListStudioSessionMappingsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_studio_session_mappings::ListStudioSessionMappingsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_studio_session_mappings::ListStudioSessionMappingsError>
    for Error
{
    fn from(
        err: crate::operation::list_studio_session_mappings::ListStudioSessionMappingsError,
    ) -> Self {
        match err {
            crate::operation::list_studio_session_mappings::ListStudioSessionMappingsError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::list_studio_session_mappings::ListStudioSessionMappingsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::list_studio_session_mappings::ListStudioSessionMappingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::modify_cluster::ModifyClusterError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::modify_cluster::ModifyClusterError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::modify_cluster::ModifyClusterError> for Error {
    fn from(err: crate::operation::modify_cluster::ModifyClusterError) -> Self {
        match err {
            crate::operation::modify_cluster::ModifyClusterError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::operation::modify_cluster::ModifyClusterError::InvalidRequestException(
                inner,
            ) => Error::InvalidRequestException(inner),
            crate::operation::modify_cluster::ModifyClusterError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::modify_instance_fleet::ModifyInstanceFleetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::modify_instance_fleet::ModifyInstanceFleetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::modify_instance_fleet::ModifyInstanceFleetError> for Error {
    fn from(err: crate::operation::modify_instance_fleet::ModifyInstanceFleetError) -> Self {
        match err {
            crate::operation::modify_instance_fleet::ModifyInstanceFleetError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::modify_instance_fleet::ModifyInstanceFleetError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::modify_instance_fleet::ModifyInstanceFleetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::modify_instance_groups::ModifyInstanceGroupsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::modify_instance_groups::ModifyInstanceGroupsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::modify_instance_groups::ModifyInstanceGroupsError> for Error {
    fn from(err: crate::operation::modify_instance_groups::ModifyInstanceGroupsError) -> Self {
        match err {
            crate::operation::modify_instance_groups::ModifyInstanceGroupsError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::modify_instance_groups::ModifyInstanceGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::put_auto_scaling_policy::PutAutoScalingPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::put_auto_scaling_policy::PutAutoScalingPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_auto_scaling_policy::PutAutoScalingPolicyError> for Error {
    fn from(err: crate::operation::put_auto_scaling_policy::PutAutoScalingPolicyError) -> Self {
        match err {
            crate::operation::put_auto_scaling_policy::PutAutoScalingPolicyError::Unhandled(
                inner,
            ) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::put_auto_termination_policy::PutAutoTerminationPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::put_auto_termination_policy::PutAutoTerminationPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_auto_termination_policy::PutAutoTerminationPolicyError> for Error {
    fn from(
        err: crate::operation::put_auto_termination_policy::PutAutoTerminationPolicyError,
    ) -> Self {
        match err {
            crate::operation::put_auto_termination_policy::PutAutoTerminationPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::put_block_public_access_configuration::PutBlockPublicAccessConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::put_block_public_access_configuration::PutBlockPublicAccessConfigurationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::put_block_public_access_configuration::PutBlockPublicAccessConfigurationError> for Error {
    fn from(err: crate::operation::put_block_public_access_configuration::PutBlockPublicAccessConfigurationError) -> Self {
        match err {
            crate::operation::put_block_public_access_configuration::PutBlockPublicAccessConfigurationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::put_block_public_access_configuration::PutBlockPublicAccessConfigurationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::put_block_public_access_configuration::PutBlockPublicAccessConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::put_managed_scaling_policy::PutManagedScalingPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::put_managed_scaling_policy::PutManagedScalingPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_managed_scaling_policy::PutManagedScalingPolicyError> for Error {
    fn from(
        err: crate::operation::put_managed_scaling_policy::PutManagedScalingPolicyError,
    ) -> Self {
        match err {
            crate::operation::put_managed_scaling_policy::PutManagedScalingPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::remove_auto_scaling_policy::RemoveAutoScalingPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::remove_auto_scaling_policy::RemoveAutoScalingPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::remove_auto_scaling_policy::RemoveAutoScalingPolicyError> for Error {
    fn from(
        err: crate::operation::remove_auto_scaling_policy::RemoveAutoScalingPolicyError,
    ) -> Self {
        match err {
            crate::operation::remove_auto_scaling_policy::RemoveAutoScalingPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::remove_auto_termination_policy::RemoveAutoTerminationPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::remove_auto_termination_policy::RemoveAutoTerminationPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::remove_auto_termination_policy::RemoveAutoTerminationPolicyError>
    for Error
{
    fn from(
        err: crate::operation::remove_auto_termination_policy::RemoveAutoTerminationPolicyError,
    ) -> Self {
        match err {
            crate::operation::remove_auto_termination_policy::RemoveAutoTerminationPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::remove_managed_scaling_policy::RemoveManagedScalingPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::remove_managed_scaling_policy::RemoveManagedScalingPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::remove_managed_scaling_policy::RemoveManagedScalingPolicyError>
    for Error
{
    fn from(
        err: crate::operation::remove_managed_scaling_policy::RemoveManagedScalingPolicyError,
    ) -> Self {
        match err {
            crate::operation::remove_managed_scaling_policy::RemoveManagedScalingPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::remove_tags::RemoveTagsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::remove_tags::RemoveTagsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::remove_tags::RemoveTagsError> for Error {
    fn from(err: crate::operation::remove_tags::RemoveTagsError) -> Self {
        match err {
            crate::operation::remove_tags::RemoveTagsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::remove_tags::RemoveTagsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::remove_tags::RemoveTagsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::run_job_flow::RunJobFlowError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::run_job_flow::RunJobFlowError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::run_job_flow::RunJobFlowError> for Error {
    fn from(err: crate::operation::run_job_flow::RunJobFlowError) -> Self {
        match err {
            crate::operation::run_job_flow::RunJobFlowError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::operation::run_job_flow::RunJobFlowError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::set_termination_protection::SetTerminationProtectionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::set_termination_protection::SetTerminationProtectionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::set_termination_protection::SetTerminationProtectionError> for Error {
    fn from(
        err: crate::operation::set_termination_protection::SetTerminationProtectionError,
    ) -> Self {
        match err {
            crate::operation::set_termination_protection::SetTerminationProtectionError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::set_termination_protection::SetTerminationProtectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::set_visible_to_all_users::SetVisibleToAllUsersError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::set_visible_to_all_users::SetVisibleToAllUsersError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::set_visible_to_all_users::SetVisibleToAllUsersError> for Error {
    fn from(err: crate::operation::set_visible_to_all_users::SetVisibleToAllUsersError) -> Self {
        match err {
            crate::operation::set_visible_to_all_users::SetVisibleToAllUsersError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::set_visible_to_all_users::SetVisibleToAllUsersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::start_notebook_execution::StartNotebookExecutionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::start_notebook_execution::StartNotebookExecutionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_notebook_execution::StartNotebookExecutionError> for Error {
    fn from(err: crate::operation::start_notebook_execution::StartNotebookExecutionError) -> Self {
        match err {
            crate::operation::start_notebook_execution::StartNotebookExecutionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::start_notebook_execution::StartNotebookExecutionError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::start_notebook_execution::StartNotebookExecutionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::stop_notebook_execution::StopNotebookExecutionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::stop_notebook_execution::StopNotebookExecutionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_notebook_execution::StopNotebookExecutionError> for Error {
    fn from(err: crate::operation::stop_notebook_execution::StopNotebookExecutionError) -> Self {
        match err {
            crate::operation::stop_notebook_execution::StopNotebookExecutionError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::stop_notebook_execution::StopNotebookExecutionError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::stop_notebook_execution::StopNotebookExecutionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::terminate_job_flows::TerminateJobFlowsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::terminate_job_flows::TerminateJobFlowsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::terminate_job_flows::TerminateJobFlowsError> for Error {
    fn from(err: crate::operation::terminate_job_flows::TerminateJobFlowsError) -> Self {
        match err {
            crate::operation::terminate_job_flows::TerminateJobFlowsError::InternalServerError(
                inner,
            ) => Error::InternalServerError(inner),
            crate::operation::terminate_job_flows::TerminateJobFlowsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::update_studio::UpdateStudioError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_studio::UpdateStudioError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_studio::UpdateStudioError> for Error {
    fn from(err: crate::operation::update_studio::UpdateStudioError) -> Self {
        match err {
            crate::operation::update_studio::UpdateStudioError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_studio::UpdateStudioError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::update_studio::UpdateStudioError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_studio_session_mapping::UpdateStudioSessionMappingError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_studio_session_mapping::UpdateStudioSessionMappingError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_studio_session_mapping::UpdateStudioSessionMappingError>
    for Error
{
    fn from(
        err: crate::operation::update_studio_session_mapping::UpdateStudioSessionMappingError,
    ) -> Self {
        match err {
            crate::operation::update_studio_session_mapping::UpdateStudioSessionMappingError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::update_studio_session_mapping::UpdateStudioSessionMappingError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::update_studio_session_mapping::UpdateStudioSessionMappingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::InternalServerError(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::InvalidRequestException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
