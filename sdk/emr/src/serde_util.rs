// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn create_security_configuration_output_correct_errors(
    mut builder: crate::operation::create_security_configuration::builders::CreateSecurityConfigurationOutputBuilder,
) -> crate::operation::create_security_configuration::builders::CreateSecurityConfigurationOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.creation_date_time.is_none() {
        builder.creation_date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_block_public_access_configuration_output_correct_errors(
    mut builder: crate::operation::get_block_public_access_configuration::builders::GetBlockPublicAccessConfigurationOutputBuilder,
) -> crate::operation::get_block_public_access_configuration::builders::GetBlockPublicAccessConfigurationOutputBuilder {
    if builder.block_public_access_configuration.is_none() {
        builder.block_public_access_configuration = {
            let builder = crate::types::builders::BlockPublicAccessConfigurationBuilder::default();
            Some(crate::serde_util::block_public_access_configuration_correct_errors(builder).build())
        }
    }
    if builder.block_public_access_configuration_metadata.is_none() {
        builder.block_public_access_configuration_metadata = {
            let builder = crate::types::builders::BlockPublicAccessConfigurationMetadataBuilder::default();
            Some(crate::serde_util::block_public_access_configuration_metadata_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn block_public_access_configuration_correct_errors(
    mut builder: crate::types::builders::BlockPublicAccessConfigurationBuilder,
) -> crate::types::builders::BlockPublicAccessConfigurationBuilder {
    if builder.block_public_security_group_rules.is_none() {
        builder.block_public_security_group_rules = Some(Default::default())
    }
    builder
}

pub(crate) fn block_public_access_configuration_metadata_correct_errors(
    mut builder: crate::types::builders::BlockPublicAccessConfigurationMetadataBuilder,
) -> crate::types::builders::BlockPublicAccessConfigurationMetadataBuilder {
    if builder.creation_date_time.is_none() {
        builder.creation_date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.created_by_arn.is_none() {
        builder.created_by_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn compute_limits_correct_errors(
    mut builder: crate::types::builders::ComputeLimitsBuilder,
) -> crate::types::builders::ComputeLimitsBuilder {
    if builder.unit_type.is_none() {
        builder.unit_type = "no value was set".parse::<crate::types::ComputeLimitsUnitType>().ok()
    }
    if builder.minimum_capacity_units.is_none() {
        builder.minimum_capacity_units = Some(Default::default())
    }
    if builder.maximum_capacity_units.is_none() {
        builder.maximum_capacity_units = Some(Default::default())
    }
    builder
}

pub(crate) fn execution_engine_config_correct_errors(
    mut builder: crate::types::builders::ExecutionEngineConfigBuilder,
) -> crate::types::builders::ExecutionEngineConfigBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn job_flow_detail_correct_errors(
    mut builder: crate::types::builders::JobFlowDetailBuilder,
) -> crate::types::builders::JobFlowDetailBuilder {
    if builder.job_flow_id.is_none() {
        builder.job_flow_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.execution_status_detail.is_none() {
        builder.execution_status_detail = {
            let builder = crate::types::builders::JobFlowExecutionStatusDetailBuilder::default();
            Some(crate::serde_util::job_flow_execution_status_detail_correct_errors(builder).build())
        }
    }
    if builder.instances.is_none() {
        builder.instances = {
            let builder = crate::types::builders::JobFlowInstancesDetailBuilder::default();
            Some(crate::serde_util::job_flow_instances_detail_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn kerberos_attributes_correct_errors(
    mut builder: crate::types::builders::KerberosAttributesBuilder,
) -> crate::types::builders::KerberosAttributesBuilder {
    if builder.realm.is_none() {
        builder.realm = Some(Default::default())
    }
    if builder.kdc_admin_password.is_none() {
        builder.kdc_admin_password = Some(Default::default())
    }
    builder
}

pub(crate) fn scaling_constraints_correct_errors(
    mut builder: crate::types::builders::ScalingConstraintsBuilder,
) -> crate::types::builders::ScalingConstraintsBuilder {
    if builder.min_capacity.is_none() {
        builder.min_capacity = Some(Default::default())
    }
    if builder.max_capacity.is_none() {
        builder.max_capacity = Some(Default::default())
    }
    builder
}

pub(crate) fn job_flow_execution_status_detail_correct_errors(
    mut builder: crate::types::builders::JobFlowExecutionStatusDetailBuilder,
) -> crate::types::builders::JobFlowExecutionStatusDetailBuilder {
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::JobFlowExecutionState>().ok()
    }
    if builder.creation_date_time.is_none() {
        builder.creation_date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn job_flow_instances_detail_correct_errors(
    mut builder: crate::types::builders::JobFlowInstancesDetailBuilder,
) -> crate::types::builders::JobFlowInstancesDetailBuilder {
    if builder.master_instance_type.is_none() {
        builder.master_instance_type = Some(Default::default())
    }
    if builder.slave_instance_type.is_none() {
        builder.slave_instance_type = Some(Default::default())
    }
    if builder.instance_count.is_none() {
        builder.instance_count = Some(Default::default())
    }
    builder
}

pub(crate) fn placement_group_config_correct_errors(
    mut builder: crate::types::builders::PlacementGroupConfigBuilder,
) -> crate::types::builders::PlacementGroupConfigBuilder {
    if builder.instance_role.is_none() {
        builder.instance_role = "no value was set".parse::<crate::types::InstanceRoleType>().ok()
    }
    builder
}

pub(crate) fn port_range_correct_errors(mut builder: crate::types::builders::PortRangeBuilder) -> crate::types::builders::PortRangeBuilder {
    if builder.min_range.is_none() {
        builder.min_range = Some(Default::default())
    }
    builder
}

pub(crate) fn scaling_rule_correct_errors(mut builder: crate::types::builders::ScalingRuleBuilder) -> crate::types::builders::ScalingRuleBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.action.is_none() {
        builder.action = {
            let builder = crate::types::builders::ScalingActionBuilder::default();
            Some(crate::serde_util::scaling_action_correct_errors(builder).build())
        }
    }
    if builder.trigger.is_none() {
        builder.trigger = {
            let builder = crate::types::builders::ScalingTriggerBuilder::default();
            Some(crate::serde_util::scaling_trigger_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn on_demand_provisioning_specification_correct_errors(
    mut builder: crate::types::builders::OnDemandProvisioningSpecificationBuilder,
) -> crate::types::builders::OnDemandProvisioningSpecificationBuilder {
    if builder.allocation_strategy.is_none() {
        builder.allocation_strategy = "no value was set".parse::<crate::types::OnDemandProvisioningAllocationStrategy>().ok()
    }
    builder
}

pub(crate) fn on_demand_resizing_specification_correct_errors(
    mut builder: crate::types::builders::OnDemandResizingSpecificationBuilder,
) -> crate::types::builders::OnDemandResizingSpecificationBuilder {
    if builder.timeout_duration_minutes.is_none() {
        builder.timeout_duration_minutes = Some(Default::default())
    }
    builder
}

pub(crate) fn scaling_action_correct_errors(
    mut builder: crate::types::builders::ScalingActionBuilder,
) -> crate::types::builders::ScalingActionBuilder {
    if builder.simple_scaling_policy_configuration.is_none() {
        builder.simple_scaling_policy_configuration = {
            let builder = crate::types::builders::SimpleScalingPolicyConfigurationBuilder::default();
            Some(crate::serde_util::simple_scaling_policy_configuration_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn scaling_trigger_correct_errors(
    mut builder: crate::types::builders::ScalingTriggerBuilder,
) -> crate::types::builders::ScalingTriggerBuilder {
    if builder.cloud_watch_alarm_definition.is_none() {
        builder.cloud_watch_alarm_definition = {
            let builder = crate::types::builders::CloudWatchAlarmDefinitionBuilder::default();
            Some(crate::serde_util::cloud_watch_alarm_definition_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn spot_provisioning_specification_correct_errors(
    mut builder: crate::types::builders::SpotProvisioningSpecificationBuilder,
) -> crate::types::builders::SpotProvisioningSpecificationBuilder {
    if builder.timeout_duration_minutes.is_none() {
        builder.timeout_duration_minutes = Some(Default::default())
    }
    if builder.timeout_action.is_none() {
        builder.timeout_action = "no value was set".parse::<crate::types::SpotProvisioningTimeoutAction>().ok()
    }
    builder
}

pub(crate) fn spot_resizing_specification_correct_errors(
    mut builder: crate::types::builders::SpotResizingSpecificationBuilder,
) -> crate::types::builders::SpotResizingSpecificationBuilder {
    if builder.timeout_duration_minutes.is_none() {
        builder.timeout_duration_minutes = Some(Default::default())
    }
    builder
}

pub(crate) fn step_detail_correct_errors(mut builder: crate::types::builders::StepDetailBuilder) -> crate::types::builders::StepDetailBuilder {
    if builder.step_config.is_none() {
        builder.step_config = {
            let builder = crate::types::builders::StepConfigBuilder::default();
            Some(crate::serde_util::step_config_correct_errors(builder).build())
        }
    }
    if builder.execution_status_detail.is_none() {
        builder.execution_status_detail = {
            let builder = crate::types::builders::StepExecutionStatusDetailBuilder::default();
            Some(crate::serde_util::step_execution_status_detail_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn bootstrap_action_config_correct_errors(
    mut builder: crate::types::builders::BootstrapActionConfigBuilder,
) -> crate::types::builders::BootstrapActionConfigBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.script_bootstrap_action.is_none() {
        builder.script_bootstrap_action = {
            let builder = crate::types::builders::ScriptBootstrapActionConfigBuilder::default();
            Some(crate::serde_util::script_bootstrap_action_config_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn cloud_watch_alarm_definition_correct_errors(
    mut builder: crate::types::builders::CloudWatchAlarmDefinitionBuilder,
) -> crate::types::builders::CloudWatchAlarmDefinitionBuilder {
    if builder.comparison_operator.is_none() {
        builder.comparison_operator = "no value was set".parse::<crate::types::ComparisonOperator>().ok()
    }
    if builder.metric_name.is_none() {
        builder.metric_name = Some(Default::default())
    }
    if builder.period.is_none() {
        builder.period = Some(Default::default())
    }
    if builder.threshold.is_none() {
        builder.threshold = Some(Default::default())
    }
    builder
}

pub(crate) fn instance_group_detail_correct_errors(
    mut builder: crate::types::builders::InstanceGroupDetailBuilder,
) -> crate::types::builders::InstanceGroupDetailBuilder {
    if builder.market.is_none() {
        builder.market = "no value was set".parse::<crate::types::MarketType>().ok()
    }
    if builder.instance_role.is_none() {
        builder.instance_role = "no value was set".parse::<crate::types::InstanceRoleType>().ok()
    }
    if builder.instance_type.is_none() {
        builder.instance_type = Some(Default::default())
    }
    if builder.instance_request_count.is_none() {
        builder.instance_request_count = Some(Default::default())
    }
    if builder.instance_running_count.is_none() {
        builder.instance_running_count = Some(Default::default())
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::InstanceGroupState>().ok()
    }
    if builder.creation_date_time.is_none() {
        builder.creation_date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn simple_scaling_policy_configuration_correct_errors(
    mut builder: crate::types::builders::SimpleScalingPolicyConfigurationBuilder,
) -> crate::types::builders::SimpleScalingPolicyConfigurationBuilder {
    if builder.scaling_adjustment.is_none() {
        builder.scaling_adjustment = Some(Default::default())
    }
    builder
}

pub(crate) fn step_config_correct_errors(mut builder: crate::types::builders::StepConfigBuilder) -> crate::types::builders::StepConfigBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.hadoop_jar_step.is_none() {
        builder.hadoop_jar_step = {
            let builder = crate::types::builders::HadoopJarStepConfigBuilder::default();
            Some(crate::serde_util::hadoop_jar_step_config_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn step_execution_status_detail_correct_errors(
    mut builder: crate::types::builders::StepExecutionStatusDetailBuilder,
) -> crate::types::builders::StepExecutionStatusDetailBuilder {
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::StepExecutionState>().ok()
    }
    if builder.creation_date_time.is_none() {
        builder.creation_date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn volume_specification_correct_errors(
    mut builder: crate::types::builders::VolumeSpecificationBuilder,
) -> crate::types::builders::VolumeSpecificationBuilder {
    if builder.volume_type.is_none() {
        builder.volume_type = Some(Default::default())
    }
    if builder.size_in_gb.is_none() {
        builder.size_in_gb = Some(Default::default())
    }
    builder
}

pub(crate) fn hadoop_jar_step_config_correct_errors(
    mut builder: crate::types::builders::HadoopJarStepConfigBuilder,
) -> crate::types::builders::HadoopJarStepConfigBuilder {
    if builder.jar.is_none() {
        builder.jar = Some(Default::default())
    }
    builder
}

pub(crate) fn script_bootstrap_action_config_correct_errors(
    mut builder: crate::types::builders::ScriptBootstrapActionConfigBuilder,
) -> crate::types::builders::ScriptBootstrapActionConfigBuilder {
    if builder.path.is_none() {
        builder.path = Some(Default::default())
    }
    builder
}
