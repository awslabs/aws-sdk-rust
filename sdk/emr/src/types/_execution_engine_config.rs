// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the execution engine (cluster) to run the notebook and perform the notebook execution, for example, an EMR cluster.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExecutionEngineConfig {
    /// <p>The unique identifier of the execution engine. For an EMR cluster, this is the cluster ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The type of execution engine. A value of <code>EMR</code> specifies an EMR cluster.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::ExecutionEngineType>,
    /// <p>An optional unique ID of an EC2 security group to associate with the master instance of the EMR cluster for this notebook execution. For more information see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-managed-notebooks-security-groups.html">Specifying EC2 Security Groups for EMR Notebooks</a> in the <i>EMR Management Guide</i>.</p>
    #[doc(hidden)]
    pub master_instance_security_group_id: std::option::Option<std::string::String>,
}
impl ExecutionEngineConfig {
    /// <p>The unique identifier of the execution engine. For an EMR cluster, this is the cluster ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The type of execution engine. A value of <code>EMR</code> specifies an EMR cluster.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::ExecutionEngineType> {
        self.r#type.as_ref()
    }
    /// <p>An optional unique ID of an EC2 security group to associate with the master instance of the EMR cluster for this notebook execution. For more information see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-managed-notebooks-security-groups.html">Specifying EC2 Security Groups for EMR Notebooks</a> in the <i>EMR Management Guide</i>.</p>
    pub fn master_instance_security_group_id(&self) -> std::option::Option<&str> {
        self.master_instance_security_group_id.as_deref()
    }
}
impl ExecutionEngineConfig {
    /// Creates a new builder-style object to manufacture [`ExecutionEngineConfig`](crate::types::ExecutionEngineConfig).
    pub fn builder() -> crate::types::builders::ExecutionEngineConfigBuilder {
        crate::types::builders::ExecutionEngineConfigBuilder::default()
    }
}

/// A builder for [`ExecutionEngineConfig`](crate::types::ExecutionEngineConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ExecutionEngineConfigBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::ExecutionEngineType>,
    pub(crate) master_instance_security_group_id: std::option::Option<std::string::String>,
}
impl ExecutionEngineConfigBuilder {
    /// <p>The unique identifier of the execution engine. For an EMR cluster, this is the cluster ID.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the execution engine. For an EMR cluster, this is the cluster ID.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The type of execution engine. A value of <code>EMR</code> specifies an EMR cluster.</p>
    pub fn r#type(mut self, input: crate::types::ExecutionEngineType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of execution engine. A value of <code>EMR</code> specifies an EMR cluster.</p>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::types::ExecutionEngineType>,
    ) -> Self {
        self.r#type = input;
        self
    }
    /// <p>An optional unique ID of an EC2 security group to associate with the master instance of the EMR cluster for this notebook execution. For more information see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-managed-notebooks-security-groups.html">Specifying EC2 Security Groups for EMR Notebooks</a> in the <i>EMR Management Guide</i>.</p>
    pub fn master_instance_security_group_id(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.master_instance_security_group_id = Some(input.into());
        self
    }
    /// <p>An optional unique ID of an EC2 security group to associate with the master instance of the EMR cluster for this notebook execution. For more information see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-managed-notebooks-security-groups.html">Specifying EC2 Security Groups for EMR Notebooks</a> in the <i>EMR Management Guide</i>.</p>
    pub fn set_master_instance_security_group_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.master_instance_security_group_id = input;
        self
    }
    /// Consumes the builder and constructs a [`ExecutionEngineConfig`](crate::types::ExecutionEngineConfig).
    pub fn build(self) -> crate::types::ExecutionEngineConfig {
        crate::types::ExecutionEngineConfig {
            id: self.id,
            r#type: self.r#type,
            master_instance_security_group_id: self.master_instance_security_group_id,
        }
    }
}
