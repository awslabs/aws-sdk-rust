// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An automatic scaling policy for a core instance group or task instance group in an Amazon EMR cluster. An automatic scaling policy defines how an instance group dynamically adds and terminates EC2 instances in response to the value of a CloudWatch metric. See <code>PutAutoScalingPolicy</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AutoScalingPolicy {
    /// <p>The upper and lower EC2 instance limits for an automatic scaling policy. Automatic scaling activity will not cause an instance group to grow above or below these limits.</p>
    #[doc(hidden)]
    pub constraints: std::option::Option<crate::types::ScalingConstraints>,
    /// <p>The scale-in and scale-out rules that comprise the automatic scaling policy.</p>
    #[doc(hidden)]
    pub rules: std::option::Option<std::vec::Vec<crate::types::ScalingRule>>,
}
impl AutoScalingPolicy {
    /// <p>The upper and lower EC2 instance limits for an automatic scaling policy. Automatic scaling activity will not cause an instance group to grow above or below these limits.</p>
    pub fn constraints(&self) -> std::option::Option<&crate::types::ScalingConstraints> {
        self.constraints.as_ref()
    }
    /// <p>The scale-in and scale-out rules that comprise the automatic scaling policy.</p>
    pub fn rules(&self) -> std::option::Option<&[crate::types::ScalingRule]> {
        self.rules.as_deref()
    }
}
impl AutoScalingPolicy {
    /// Creates a new builder-style object to manufacture [`AutoScalingPolicy`](crate::types::AutoScalingPolicy).
    pub fn builder() -> crate::types::builders::AutoScalingPolicyBuilder {
        crate::types::builders::AutoScalingPolicyBuilder::default()
    }
}

/// A builder for [`AutoScalingPolicy`](crate::types::AutoScalingPolicy).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AutoScalingPolicyBuilder {
    pub(crate) constraints: std::option::Option<crate::types::ScalingConstraints>,
    pub(crate) rules: std::option::Option<std::vec::Vec<crate::types::ScalingRule>>,
}
impl AutoScalingPolicyBuilder {
    /// <p>The upper and lower EC2 instance limits for an automatic scaling policy. Automatic scaling activity will not cause an instance group to grow above or below these limits.</p>
    pub fn constraints(mut self, input: crate::types::ScalingConstraints) -> Self {
        self.constraints = Some(input);
        self
    }
    /// <p>The upper and lower EC2 instance limits for an automatic scaling policy. Automatic scaling activity will not cause an instance group to grow above or below these limits.</p>
    pub fn set_constraints(
        mut self,
        input: std::option::Option<crate::types::ScalingConstraints>,
    ) -> Self {
        self.constraints = input;
        self
    }
    /// Appends an item to `rules`.
    ///
    /// To override the contents of this collection use [`set_rules`](Self::set_rules).
    ///
    /// <p>The scale-in and scale-out rules that comprise the automatic scaling policy.</p>
    pub fn rules(mut self, input: crate::types::ScalingRule) -> Self {
        let mut v = self.rules.unwrap_or_default();
        v.push(input);
        self.rules = Some(v);
        self
    }
    /// <p>The scale-in and scale-out rules that comprise the automatic scaling policy.</p>
    pub fn set_rules(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ScalingRule>>,
    ) -> Self {
        self.rules = input;
        self
    }
    /// Consumes the builder and constructs a [`AutoScalingPolicy`](crate::types::AutoScalingPolicy).
    pub fn build(self) -> crate::types::AutoScalingPolicy {
        crate::types::AutoScalingPolicy {
            constraints: self.constraints,
            rules: self.rules,
        }
    }
}
