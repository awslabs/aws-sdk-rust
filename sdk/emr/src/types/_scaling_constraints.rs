// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The upper and lower Amazon EC2 instance limits for an automatic scaling policy. Automatic scaling activities triggered by automatic scaling rules will not cause an instance group to grow above or below these limits.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ScalingConstraints {
    /// <p>The lower boundary of Amazon EC2 instances in an instance group below which scaling activities are not allowed to shrink. Scale-in activities will not terminate instances below this boundary.</p>
    pub min_capacity: ::std::option::Option<i32>,
    /// <p>The upper boundary of Amazon EC2 instances in an instance group beyond which scaling activities are not allowed to grow. Scale-out activities will not add instances beyond this boundary.</p>
    pub max_capacity: ::std::option::Option<i32>,
}
impl ScalingConstraints {
    /// <p>The lower boundary of Amazon EC2 instances in an instance group below which scaling activities are not allowed to shrink. Scale-in activities will not terminate instances below this boundary.</p>
    pub fn min_capacity(&self) -> ::std::option::Option<i32> {
        self.min_capacity
    }
    /// <p>The upper boundary of Amazon EC2 instances in an instance group beyond which scaling activities are not allowed to grow. Scale-out activities will not add instances beyond this boundary.</p>
    pub fn max_capacity(&self) -> ::std::option::Option<i32> {
        self.max_capacity
    }
}
impl ScalingConstraints {
    /// Creates a new builder-style object to manufacture [`ScalingConstraints`](crate::types::ScalingConstraints).
    pub fn builder() -> crate::types::builders::ScalingConstraintsBuilder {
        crate::types::builders::ScalingConstraintsBuilder::default()
    }
}

/// A builder for [`ScalingConstraints`](crate::types::ScalingConstraints).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ScalingConstraintsBuilder {
    pub(crate) min_capacity: ::std::option::Option<i32>,
    pub(crate) max_capacity: ::std::option::Option<i32>,
}
impl ScalingConstraintsBuilder {
    /// <p>The lower boundary of Amazon EC2 instances in an instance group below which scaling activities are not allowed to shrink. Scale-in activities will not terminate instances below this boundary.</p>
    /// This field is required.
    pub fn min_capacity(mut self, input: i32) -> Self {
        self.min_capacity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The lower boundary of Amazon EC2 instances in an instance group below which scaling activities are not allowed to shrink. Scale-in activities will not terminate instances below this boundary.</p>
    pub fn set_min_capacity(mut self, input: ::std::option::Option<i32>) -> Self {
        self.min_capacity = input;
        self
    }
    /// <p>The lower boundary of Amazon EC2 instances in an instance group below which scaling activities are not allowed to shrink. Scale-in activities will not terminate instances below this boundary.</p>
    pub fn get_min_capacity(&self) -> &::std::option::Option<i32> {
        &self.min_capacity
    }
    /// <p>The upper boundary of Amazon EC2 instances in an instance group beyond which scaling activities are not allowed to grow. Scale-out activities will not add instances beyond this boundary.</p>
    /// This field is required.
    pub fn max_capacity(mut self, input: i32) -> Self {
        self.max_capacity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The upper boundary of Amazon EC2 instances in an instance group beyond which scaling activities are not allowed to grow. Scale-out activities will not add instances beyond this boundary.</p>
    pub fn set_max_capacity(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_capacity = input;
        self
    }
    /// <p>The upper boundary of Amazon EC2 instances in an instance group beyond which scaling activities are not allowed to grow. Scale-out activities will not add instances beyond this boundary.</p>
    pub fn get_max_capacity(&self) -> &::std::option::Option<i32> {
        &self.max_capacity
    }
    /// Consumes the builder and constructs a [`ScalingConstraints`](crate::types::ScalingConstraints).
    pub fn build(self) -> crate::types::ScalingConstraints {
        crate::types::ScalingConstraints {
            min_capacity: self.min_capacity,
            max_capacity: self.max_capacity,
        }
    }
}
