// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The conditions that trigger an automatic scaling activity.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ScalingTrigger {
    /// <p>The definition of a CloudWatch metric alarm. When the defined alarm conditions are met along with other trigger parameters, scaling activity begins.</p>
    pub cloud_watch_alarm_definition: ::std::option::Option<crate::types::CloudWatchAlarmDefinition>,
}
impl ScalingTrigger {
    /// <p>The definition of a CloudWatch metric alarm. When the defined alarm conditions are met along with other trigger parameters, scaling activity begins.</p>
    pub fn cloud_watch_alarm_definition(&self) -> ::std::option::Option<&crate::types::CloudWatchAlarmDefinition> {
        self.cloud_watch_alarm_definition.as_ref()
    }
}
impl ScalingTrigger {
    /// Creates a new builder-style object to manufacture [`ScalingTrigger`](crate::types::ScalingTrigger).
    pub fn builder() -> crate::types::builders::ScalingTriggerBuilder {
        crate::types::builders::ScalingTriggerBuilder::default()
    }
}

/// A builder for [`ScalingTrigger`](crate::types::ScalingTrigger).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ScalingTriggerBuilder {
    pub(crate) cloud_watch_alarm_definition: ::std::option::Option<crate::types::CloudWatchAlarmDefinition>,
}
impl ScalingTriggerBuilder {
    /// <p>The definition of a CloudWatch metric alarm. When the defined alarm conditions are met along with other trigger parameters, scaling activity begins.</p>
    /// This field is required.
    pub fn cloud_watch_alarm_definition(mut self, input: crate::types::CloudWatchAlarmDefinition) -> Self {
        self.cloud_watch_alarm_definition = ::std::option::Option::Some(input);
        self
    }
    /// <p>The definition of a CloudWatch metric alarm. When the defined alarm conditions are met along with other trigger parameters, scaling activity begins.</p>
    pub fn set_cloud_watch_alarm_definition(mut self, input: ::std::option::Option<crate::types::CloudWatchAlarmDefinition>) -> Self {
        self.cloud_watch_alarm_definition = input;
        self
    }
    /// <p>The definition of a CloudWatch metric alarm. When the defined alarm conditions are met along with other trigger parameters, scaling activity begins.</p>
    pub fn get_cloud_watch_alarm_definition(&self) -> &::std::option::Option<crate::types::CloudWatchAlarmDefinition> {
        &self.cloud_watch_alarm_definition
    }
    /// Consumes the builder and constructs a [`ScalingTrigger`](crate::types::ScalingTrigger).
    pub fn build(self) -> crate::types::ScalingTrigger {
        crate::types::ScalingTrigger {
            cloud_watch_alarm_definition: self.cloud_watch_alarm_definition,
        }
    }
}
