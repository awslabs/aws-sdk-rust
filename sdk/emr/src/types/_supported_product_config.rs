// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The list of supported product configurations that allow user-supplied arguments. EMR accepts these arguments and forwards them to the corresponding installation script as bootstrap action arguments.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SupportedProductConfig {
    /// <p>The name of the product configuration.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The list of user-supplied arguments.</p>
    #[doc(hidden)]
    pub args: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl SupportedProductConfig {
    /// <p>The name of the product configuration.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The list of user-supplied arguments.</p>
    pub fn args(&self) -> std::option::Option<&[std::string::String]> {
        self.args.as_deref()
    }
}
impl SupportedProductConfig {
    /// Creates a new builder-style object to manufacture [`SupportedProductConfig`](crate::types::SupportedProductConfig).
    pub fn builder() -> crate::types::builders::SupportedProductConfigBuilder {
        crate::types::builders::SupportedProductConfigBuilder::default()
    }
}

/// A builder for [`SupportedProductConfig`](crate::types::SupportedProductConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SupportedProductConfigBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) args: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl SupportedProductConfigBuilder {
    /// <p>The name of the product configuration.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the product configuration.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Appends an item to `args`.
    ///
    /// To override the contents of this collection use [`set_args`](Self::set_args).
    ///
    /// <p>The list of user-supplied arguments.</p>
    pub fn args(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.args.unwrap_or_default();
        v.push(input.into());
        self.args = Some(v);
        self
    }
    /// <p>The list of user-supplied arguments.</p>
    pub fn set_args(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.args = input;
        self
    }
    /// Consumes the builder and constructs a [`SupportedProductConfig`](crate::types::SupportedProductConfig).
    pub fn build(self) -> crate::types::SupportedProductConfig {
        crate::types::SupportedProductConfig {
            name: self.name,
            args: self.args,
        }
    }
}
