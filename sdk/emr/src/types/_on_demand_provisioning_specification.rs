// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The launch specification for On-Demand Instances in the instance fleet, which determines the allocation strategy. </p> <note>
/// <p>The instance fleet configuration is available only in Amazon EMR releases 4.8.0 and higher, excluding 5.0.x versions. On-Demand Instances allocation strategy is available in Amazon EMR releases 5.12.1 and higher.</p>
/// </note>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OnDemandProvisioningSpecification {
    /// <p>Specifies the strategy to use in launching On-Demand instance fleets. Currently, the only option is <code>lowest-price</code> (the default), which launches the lowest price first.</p>
    pub allocation_strategy: ::std::option::Option<crate::types::OnDemandProvisioningAllocationStrategy>,
    /// <p>The launch specification for On-Demand instances in the instance fleet, which determines the allocation strategy.</p>
    pub capacity_reservation_options: ::std::option::Option<crate::types::OnDemandCapacityReservationOptions>,
}
impl OnDemandProvisioningSpecification {
    /// <p>Specifies the strategy to use in launching On-Demand instance fleets. Currently, the only option is <code>lowest-price</code> (the default), which launches the lowest price first.</p>
    pub fn allocation_strategy(&self) -> ::std::option::Option<&crate::types::OnDemandProvisioningAllocationStrategy> {
        self.allocation_strategy.as_ref()
    }
    /// <p>The launch specification for On-Demand instances in the instance fleet, which determines the allocation strategy.</p>
    pub fn capacity_reservation_options(&self) -> ::std::option::Option<&crate::types::OnDemandCapacityReservationOptions> {
        self.capacity_reservation_options.as_ref()
    }
}
impl OnDemandProvisioningSpecification {
    /// Creates a new builder-style object to manufacture [`OnDemandProvisioningSpecification`](crate::types::OnDemandProvisioningSpecification).
    pub fn builder() -> crate::types::builders::OnDemandProvisioningSpecificationBuilder {
        crate::types::builders::OnDemandProvisioningSpecificationBuilder::default()
    }
}

/// A builder for [`OnDemandProvisioningSpecification`](crate::types::OnDemandProvisioningSpecification).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OnDemandProvisioningSpecificationBuilder {
    pub(crate) allocation_strategy: ::std::option::Option<crate::types::OnDemandProvisioningAllocationStrategy>,
    pub(crate) capacity_reservation_options: ::std::option::Option<crate::types::OnDemandCapacityReservationOptions>,
}
impl OnDemandProvisioningSpecificationBuilder {
    /// <p>Specifies the strategy to use in launching On-Demand instance fleets. Currently, the only option is <code>lowest-price</code> (the default), which launches the lowest price first.</p>
    /// This field is required.
    pub fn allocation_strategy(mut self, input: crate::types::OnDemandProvisioningAllocationStrategy) -> Self {
        self.allocation_strategy = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the strategy to use in launching On-Demand instance fleets. Currently, the only option is <code>lowest-price</code> (the default), which launches the lowest price first.</p>
    pub fn set_allocation_strategy(mut self, input: ::std::option::Option<crate::types::OnDemandProvisioningAllocationStrategy>) -> Self {
        self.allocation_strategy = input;
        self
    }
    /// <p>Specifies the strategy to use in launching On-Demand instance fleets. Currently, the only option is <code>lowest-price</code> (the default), which launches the lowest price first.</p>
    pub fn get_allocation_strategy(&self) -> &::std::option::Option<crate::types::OnDemandProvisioningAllocationStrategy> {
        &self.allocation_strategy
    }
    /// <p>The launch specification for On-Demand instances in the instance fleet, which determines the allocation strategy.</p>
    pub fn capacity_reservation_options(mut self, input: crate::types::OnDemandCapacityReservationOptions) -> Self {
        self.capacity_reservation_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The launch specification for On-Demand instances in the instance fleet, which determines the allocation strategy.</p>
    pub fn set_capacity_reservation_options(mut self, input: ::std::option::Option<crate::types::OnDemandCapacityReservationOptions>) -> Self {
        self.capacity_reservation_options = input;
        self
    }
    /// <p>The launch specification for On-Demand instances in the instance fleet, which determines the allocation strategy.</p>
    pub fn get_capacity_reservation_options(&self) -> &::std::option::Option<crate::types::OnDemandCapacityReservationOptions> {
        &self.capacity_reservation_options
    }
    /// Consumes the builder and constructs a [`OnDemandProvisioningSpecification`](crate::types::OnDemandProvisioningSpecification).
    pub fn build(self) -> crate::types::OnDemandProvisioningSpecification {
        crate::types::OnDemandProvisioningSpecification {
            allocation_strategy: self.allocation_strategy,
            capacity_reservation_options: self.capacity_reservation_options,
        }
    }
}
