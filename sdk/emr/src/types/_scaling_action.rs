// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The type of adjustment the automatic scaling activity makes when triggered, and the periodicity of the adjustment.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ScalingAction {
    /// <p>Not available for instance groups. Instance groups use the market type specified for the group.</p>
    pub market: ::std::option::Option<crate::types::MarketType>,
    /// <p>The type of adjustment the automatic scaling activity makes when triggered, and the periodicity of the adjustment.</p>
    pub simple_scaling_policy_configuration: ::std::option::Option<crate::types::SimpleScalingPolicyConfiguration>,
}
impl ScalingAction {
    /// <p>Not available for instance groups. Instance groups use the market type specified for the group.</p>
    pub fn market(&self) -> ::std::option::Option<&crate::types::MarketType> {
        self.market.as_ref()
    }
    /// <p>The type of adjustment the automatic scaling activity makes when triggered, and the periodicity of the adjustment.</p>
    pub fn simple_scaling_policy_configuration(&self) -> ::std::option::Option<&crate::types::SimpleScalingPolicyConfiguration> {
        self.simple_scaling_policy_configuration.as_ref()
    }
}
impl ScalingAction {
    /// Creates a new builder-style object to manufacture [`ScalingAction`](crate::types::ScalingAction).
    pub fn builder() -> crate::types::builders::ScalingActionBuilder {
        crate::types::builders::ScalingActionBuilder::default()
    }
}

/// A builder for [`ScalingAction`](crate::types::ScalingAction).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ScalingActionBuilder {
    pub(crate) market: ::std::option::Option<crate::types::MarketType>,
    pub(crate) simple_scaling_policy_configuration: ::std::option::Option<crate::types::SimpleScalingPolicyConfiguration>,
}
impl ScalingActionBuilder {
    /// <p>Not available for instance groups. Instance groups use the market type specified for the group.</p>
    pub fn market(mut self, input: crate::types::MarketType) -> Self {
        self.market = ::std::option::Option::Some(input);
        self
    }
    /// <p>Not available for instance groups. Instance groups use the market type specified for the group.</p>
    pub fn set_market(mut self, input: ::std::option::Option<crate::types::MarketType>) -> Self {
        self.market = input;
        self
    }
    /// <p>Not available for instance groups. Instance groups use the market type specified for the group.</p>
    pub fn get_market(&self) -> &::std::option::Option<crate::types::MarketType> {
        &self.market
    }
    /// <p>The type of adjustment the automatic scaling activity makes when triggered, and the periodicity of the adjustment.</p>
    /// This field is required.
    pub fn simple_scaling_policy_configuration(mut self, input: crate::types::SimpleScalingPolicyConfiguration) -> Self {
        self.simple_scaling_policy_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of adjustment the automatic scaling activity makes when triggered, and the periodicity of the adjustment.</p>
    pub fn set_simple_scaling_policy_configuration(mut self, input: ::std::option::Option<crate::types::SimpleScalingPolicyConfiguration>) -> Self {
        self.simple_scaling_policy_configuration = input;
        self
    }
    /// <p>The type of adjustment the automatic scaling activity makes when triggered, and the periodicity of the adjustment.</p>
    pub fn get_simple_scaling_policy_configuration(&self) -> &::std::option::Option<crate::types::SimpleScalingPolicyConfiguration> {
        &self.simple_scaling_policy_configuration
    }
    /// Consumes the builder and constructs a [`ScalingAction`](crate::types::ScalingAction).
    pub fn build(self) -> crate::types::ScalingAction {
        crate::types::ScalingAction {
            market: self.market,
            simple_scaling_policy_configuration: self.simple_scaling_policy_configuration,
        }
    }
}
