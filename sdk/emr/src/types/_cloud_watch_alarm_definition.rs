// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The definition of a CloudWatch metric alarm, which determines when an automatic scaling activity is triggered. When the defined alarm conditions are satisfied, scaling activity begins.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CloudWatchAlarmDefinition {
    /// <p>Determines how the metric specified by <code>MetricName</code> is compared to the value specified by <code>Threshold</code>.</p>
    #[doc(hidden)]
    pub comparison_operator: std::option::Option<crate::types::ComparisonOperator>,
    /// <p>The number of periods, in five-minute increments, during which the alarm condition must exist before the alarm triggers automatic scaling activity. The default value is <code>1</code>.</p>
    #[doc(hidden)]
    pub evaluation_periods: std::option::Option<i32>,
    /// <p>The name of the CloudWatch metric that is watched to determine an alarm condition.</p>
    #[doc(hidden)]
    pub metric_name: std::option::Option<std::string::String>,
    /// <p>The namespace for the CloudWatch metric. The default is <code>AWS/ElasticMapReduce</code>.</p>
    #[doc(hidden)]
    pub namespace: std::option::Option<std::string::String>,
    /// <p>The period, in seconds, over which the statistic is applied. EMR CloudWatch metrics are emitted every five minutes (300 seconds), so if an EMR CloudWatch metric is specified, specify <code>300</code>.</p>
    #[doc(hidden)]
    pub period: std::option::Option<i32>,
    /// <p>The statistic to apply to the metric associated with the alarm. The default is <code>AVERAGE</code>.</p>
    #[doc(hidden)]
    pub statistic: std::option::Option<crate::types::Statistic>,
    /// <p>The value against which the specified statistic is compared.</p>
    #[doc(hidden)]
    pub threshold: std::option::Option<f64>,
    /// <p>The unit of measure associated with the CloudWatch metric being watched. The value specified for <code>Unit</code> must correspond to the units specified in the CloudWatch metric.</p>
    #[doc(hidden)]
    pub unit: std::option::Option<crate::types::Unit>,
    /// <p>A CloudWatch metric dimension.</p>
    #[doc(hidden)]
    pub dimensions: std::option::Option<std::vec::Vec<crate::types::MetricDimension>>,
}
impl CloudWatchAlarmDefinition {
    /// <p>Determines how the metric specified by <code>MetricName</code> is compared to the value specified by <code>Threshold</code>.</p>
    pub fn comparison_operator(&self) -> std::option::Option<&crate::types::ComparisonOperator> {
        self.comparison_operator.as_ref()
    }
    /// <p>The number of periods, in five-minute increments, during which the alarm condition must exist before the alarm triggers automatic scaling activity. The default value is <code>1</code>.</p>
    pub fn evaluation_periods(&self) -> std::option::Option<i32> {
        self.evaluation_periods
    }
    /// <p>The name of the CloudWatch metric that is watched to determine an alarm condition.</p>
    pub fn metric_name(&self) -> std::option::Option<&str> {
        self.metric_name.as_deref()
    }
    /// <p>The namespace for the CloudWatch metric. The default is <code>AWS/ElasticMapReduce</code>.</p>
    pub fn namespace(&self) -> std::option::Option<&str> {
        self.namespace.as_deref()
    }
    /// <p>The period, in seconds, over which the statistic is applied. EMR CloudWatch metrics are emitted every five minutes (300 seconds), so if an EMR CloudWatch metric is specified, specify <code>300</code>.</p>
    pub fn period(&self) -> std::option::Option<i32> {
        self.period
    }
    /// <p>The statistic to apply to the metric associated with the alarm. The default is <code>AVERAGE</code>.</p>
    pub fn statistic(&self) -> std::option::Option<&crate::types::Statistic> {
        self.statistic.as_ref()
    }
    /// <p>The value against which the specified statistic is compared.</p>
    pub fn threshold(&self) -> std::option::Option<f64> {
        self.threshold
    }
    /// <p>The unit of measure associated with the CloudWatch metric being watched. The value specified for <code>Unit</code> must correspond to the units specified in the CloudWatch metric.</p>
    pub fn unit(&self) -> std::option::Option<&crate::types::Unit> {
        self.unit.as_ref()
    }
    /// <p>A CloudWatch metric dimension.</p>
    pub fn dimensions(&self) -> std::option::Option<&[crate::types::MetricDimension]> {
        self.dimensions.as_deref()
    }
}
impl CloudWatchAlarmDefinition {
    /// Creates a new builder-style object to manufacture [`CloudWatchAlarmDefinition`](crate::types::CloudWatchAlarmDefinition).
    pub fn builder() -> crate::types::builders::CloudWatchAlarmDefinitionBuilder {
        crate::types::builders::CloudWatchAlarmDefinitionBuilder::default()
    }
}

/// A builder for [`CloudWatchAlarmDefinition`](crate::types::CloudWatchAlarmDefinition).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CloudWatchAlarmDefinitionBuilder {
    pub(crate) comparison_operator: std::option::Option<crate::types::ComparisonOperator>,
    pub(crate) evaluation_periods: std::option::Option<i32>,
    pub(crate) metric_name: std::option::Option<std::string::String>,
    pub(crate) namespace: std::option::Option<std::string::String>,
    pub(crate) period: std::option::Option<i32>,
    pub(crate) statistic: std::option::Option<crate::types::Statistic>,
    pub(crate) threshold: std::option::Option<f64>,
    pub(crate) unit: std::option::Option<crate::types::Unit>,
    pub(crate) dimensions: std::option::Option<std::vec::Vec<crate::types::MetricDimension>>,
}
impl CloudWatchAlarmDefinitionBuilder {
    /// <p>Determines how the metric specified by <code>MetricName</code> is compared to the value specified by <code>Threshold</code>.</p>
    pub fn comparison_operator(mut self, input: crate::types::ComparisonOperator) -> Self {
        self.comparison_operator = Some(input);
        self
    }
    /// <p>Determines how the metric specified by <code>MetricName</code> is compared to the value specified by <code>Threshold</code>.</p>
    pub fn set_comparison_operator(
        mut self,
        input: std::option::Option<crate::types::ComparisonOperator>,
    ) -> Self {
        self.comparison_operator = input;
        self
    }
    /// <p>The number of periods, in five-minute increments, during which the alarm condition must exist before the alarm triggers automatic scaling activity. The default value is <code>1</code>.</p>
    pub fn evaluation_periods(mut self, input: i32) -> Self {
        self.evaluation_periods = Some(input);
        self
    }
    /// <p>The number of periods, in five-minute increments, during which the alarm condition must exist before the alarm triggers automatic scaling activity. The default value is <code>1</code>.</p>
    pub fn set_evaluation_periods(mut self, input: std::option::Option<i32>) -> Self {
        self.evaluation_periods = input;
        self
    }
    /// <p>The name of the CloudWatch metric that is watched to determine an alarm condition.</p>
    pub fn metric_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.metric_name = Some(input.into());
        self
    }
    /// <p>The name of the CloudWatch metric that is watched to determine an alarm condition.</p>
    pub fn set_metric_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.metric_name = input;
        self
    }
    /// <p>The namespace for the CloudWatch metric. The default is <code>AWS/ElasticMapReduce</code>.</p>
    pub fn namespace(mut self, input: impl Into<std::string::String>) -> Self {
        self.namespace = Some(input.into());
        self
    }
    /// <p>The namespace for the CloudWatch metric. The default is <code>AWS/ElasticMapReduce</code>.</p>
    pub fn set_namespace(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.namespace = input;
        self
    }
    /// <p>The period, in seconds, over which the statistic is applied. EMR CloudWatch metrics are emitted every five minutes (300 seconds), so if an EMR CloudWatch metric is specified, specify <code>300</code>.</p>
    pub fn period(mut self, input: i32) -> Self {
        self.period = Some(input);
        self
    }
    /// <p>The period, in seconds, over which the statistic is applied. EMR CloudWatch metrics are emitted every five minutes (300 seconds), so if an EMR CloudWatch metric is specified, specify <code>300</code>.</p>
    pub fn set_period(mut self, input: std::option::Option<i32>) -> Self {
        self.period = input;
        self
    }
    /// <p>The statistic to apply to the metric associated with the alarm. The default is <code>AVERAGE</code>.</p>
    pub fn statistic(mut self, input: crate::types::Statistic) -> Self {
        self.statistic = Some(input);
        self
    }
    /// <p>The statistic to apply to the metric associated with the alarm. The default is <code>AVERAGE</code>.</p>
    pub fn set_statistic(mut self, input: std::option::Option<crate::types::Statistic>) -> Self {
        self.statistic = input;
        self
    }
    /// <p>The value against which the specified statistic is compared.</p>
    pub fn threshold(mut self, input: f64) -> Self {
        self.threshold = Some(input);
        self
    }
    /// <p>The value against which the specified statistic is compared.</p>
    pub fn set_threshold(mut self, input: std::option::Option<f64>) -> Self {
        self.threshold = input;
        self
    }
    /// <p>The unit of measure associated with the CloudWatch metric being watched. The value specified for <code>Unit</code> must correspond to the units specified in the CloudWatch metric.</p>
    pub fn unit(mut self, input: crate::types::Unit) -> Self {
        self.unit = Some(input);
        self
    }
    /// <p>The unit of measure associated with the CloudWatch metric being watched. The value specified for <code>Unit</code> must correspond to the units specified in the CloudWatch metric.</p>
    pub fn set_unit(mut self, input: std::option::Option<crate::types::Unit>) -> Self {
        self.unit = input;
        self
    }
    /// Appends an item to `dimensions`.
    ///
    /// To override the contents of this collection use [`set_dimensions`](Self::set_dimensions).
    ///
    /// <p>A CloudWatch metric dimension.</p>
    pub fn dimensions(mut self, input: crate::types::MetricDimension) -> Self {
        let mut v = self.dimensions.unwrap_or_default();
        v.push(input);
        self.dimensions = Some(v);
        self
    }
    /// <p>A CloudWatch metric dimension.</p>
    pub fn set_dimensions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::MetricDimension>>,
    ) -> Self {
        self.dimensions = input;
        self
    }
    /// Consumes the builder and constructs a [`CloudWatchAlarmDefinition`](crate::types::CloudWatchAlarmDefinition).
    pub fn build(self) -> crate::types::CloudWatchAlarmDefinition {
        crate::types::CloudWatchAlarmDefinition {
            comparison_operator: self.comparison_operator,
            evaluation_periods: self.evaluation_periods,
            metric_name: self.metric_name,
            namespace: self.namespace,
            period: self.period,
            statistic: self.statistic,
            threshold: self.threshold,
            unit: self.unit,
            dimensions: self.dimensions,
        }
    }
}
