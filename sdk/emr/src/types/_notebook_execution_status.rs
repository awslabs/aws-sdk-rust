// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `NotebookExecutionStatus`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let notebookexecutionstatus = unimplemented!();
/// match notebookexecutionstatus {
///     NotebookExecutionStatus::Failed => { /* ... */ },
///     NotebookExecutionStatus::Failing => { /* ... */ },
///     NotebookExecutionStatus::Finished => { /* ... */ },
///     NotebookExecutionStatus::Finishing => { /* ... */ },
///     NotebookExecutionStatus::Running => { /* ... */ },
///     NotebookExecutionStatus::Starting => { /* ... */ },
///     NotebookExecutionStatus::StartPending => { /* ... */ },
///     NotebookExecutionStatus::Stopped => { /* ... */ },
///     NotebookExecutionStatus::Stopping => { /* ... */ },
///     NotebookExecutionStatus::StopPending => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `notebookexecutionstatus` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `NotebookExecutionStatus::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `NotebookExecutionStatus::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `NotebookExecutionStatus::NewFeature` is defined.
/// Specifically, when `notebookexecutionstatus` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `NotebookExecutionStatus::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum NotebookExecutionStatus {
    #[allow(missing_docs)] // documentation missing in model
    Failed,
    #[allow(missing_docs)] // documentation missing in model
    Failing,
    #[allow(missing_docs)] // documentation missing in model
    Finished,
    #[allow(missing_docs)] // documentation missing in model
    Finishing,
    #[allow(missing_docs)] // documentation missing in model
    Running,
    #[allow(missing_docs)] // documentation missing in model
    Starting,
    #[allow(missing_docs)] // documentation missing in model
    StartPending,
    #[allow(missing_docs)] // documentation missing in model
    Stopped,
    #[allow(missing_docs)] // documentation missing in model
    Stopping,
    #[allow(missing_docs)] // documentation missing in model
    StopPending,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for NotebookExecutionStatus {
    fn from(s: &str) -> Self {
        match s {
            "FAILED" => NotebookExecutionStatus::Failed,
            "FAILING" => NotebookExecutionStatus::Failing,
            "FINISHED" => NotebookExecutionStatus::Finished,
            "FINISHING" => NotebookExecutionStatus::Finishing,
            "RUNNING" => NotebookExecutionStatus::Running,
            "STARTING" => NotebookExecutionStatus::Starting,
            "START_PENDING" => NotebookExecutionStatus::StartPending,
            "STOPPED" => NotebookExecutionStatus::Stopped,
            "STOPPING" => NotebookExecutionStatus::Stopping,
            "STOP_PENDING" => NotebookExecutionStatus::StopPending,
            other => NotebookExecutionStatus::Unknown(crate::primitives::UnknownVariantValue(
                other.to_owned(),
            )),
        }
    }
}
impl std::str::FromStr for NotebookExecutionStatus {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(NotebookExecutionStatus::from(s))
    }
}
impl NotebookExecutionStatus {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            NotebookExecutionStatus::Failed => "FAILED",
            NotebookExecutionStatus::Failing => "FAILING",
            NotebookExecutionStatus::Finished => "FINISHED",
            NotebookExecutionStatus::Finishing => "FINISHING",
            NotebookExecutionStatus::Running => "RUNNING",
            NotebookExecutionStatus::Starting => "STARTING",
            NotebookExecutionStatus::StartPending => "START_PENDING",
            NotebookExecutionStatus::Stopped => "STOPPED",
            NotebookExecutionStatus::Stopping => "STOPPING",
            NotebookExecutionStatus::StopPending => "STOP_PENDING",
            NotebookExecutionStatus::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "FAILED",
            "FAILING",
            "FINISHED",
            "FINISHING",
            "RUNNING",
            "STARTING",
            "START_PENDING",
            "STOPPED",
            "STOPPING",
            "STOP_PENDING",
        ]
    }
}
impl AsRef<str> for NotebookExecutionStatus {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
