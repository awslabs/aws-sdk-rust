// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specification for a cluster (job flow) step.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StepConfig {
    /// <p>The name of the step.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The action to take when the step fails. Use one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>TERMINATE_CLUSTER</code> - Shuts down the cluster.</p> </li>
    /// <li> <p> <code>CANCEL_AND_WAIT</code> - Cancels any pending steps and returns the cluster to the <code>WAITING</code> state.</p> </li>
    /// <li> <p> <code>CONTINUE</code> - Continues to the next step in the queue.</p> </li>
    /// <li> <p> <code>TERMINATE_JOB_FLOW</code> - Shuts down the cluster. <code>TERMINATE_JOB_FLOW</code> is provided for backward compatibility. We recommend using <code>TERMINATE_CLUSTER</code> instead.</p> </li>
    /// </ul>
    /// <p>If a cluster's <code>StepConcurrencyLevel</code> is greater than <code>1</code>, do not use <code>AddJobFlowSteps</code> to submit a step with this parameter set to <code>CANCEL_AND_WAIT</code> or <code>TERMINATE_CLUSTER</code>. The step is not submitted and the action fails with a message that the <code>ActionOnFailure</code> setting is not valid.</p>
    /// <p>If you change a cluster's <code>StepConcurrencyLevel</code> to be greater than 1 while a step is running, the <code>ActionOnFailure</code> parameter may not behave as you expect. In this case, for a step that fails with this parameter set to <code>CANCEL_AND_WAIT</code>, pending steps and the running step are not canceled; for a step that fails with this parameter set to <code>TERMINATE_CLUSTER</code>, the cluster does not terminate.</p>
    #[doc(hidden)]
    pub action_on_failure: std::option::Option<crate::types::ActionOnFailure>,
    /// <p>The JAR file used for the step.</p>
    #[doc(hidden)]
    pub hadoop_jar_step: std::option::Option<crate::types::HadoopJarStepConfig>,
}
impl StepConfig {
    /// <p>The name of the step.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The action to take when the step fails. Use one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>TERMINATE_CLUSTER</code> - Shuts down the cluster.</p> </li>
    /// <li> <p> <code>CANCEL_AND_WAIT</code> - Cancels any pending steps and returns the cluster to the <code>WAITING</code> state.</p> </li>
    /// <li> <p> <code>CONTINUE</code> - Continues to the next step in the queue.</p> </li>
    /// <li> <p> <code>TERMINATE_JOB_FLOW</code> - Shuts down the cluster. <code>TERMINATE_JOB_FLOW</code> is provided for backward compatibility. We recommend using <code>TERMINATE_CLUSTER</code> instead.</p> </li>
    /// </ul>
    /// <p>If a cluster's <code>StepConcurrencyLevel</code> is greater than <code>1</code>, do not use <code>AddJobFlowSteps</code> to submit a step with this parameter set to <code>CANCEL_AND_WAIT</code> or <code>TERMINATE_CLUSTER</code>. The step is not submitted and the action fails with a message that the <code>ActionOnFailure</code> setting is not valid.</p>
    /// <p>If you change a cluster's <code>StepConcurrencyLevel</code> to be greater than 1 while a step is running, the <code>ActionOnFailure</code> parameter may not behave as you expect. In this case, for a step that fails with this parameter set to <code>CANCEL_AND_WAIT</code>, pending steps and the running step are not canceled; for a step that fails with this parameter set to <code>TERMINATE_CLUSTER</code>, the cluster does not terminate.</p>
    pub fn action_on_failure(&self) -> std::option::Option<&crate::types::ActionOnFailure> {
        self.action_on_failure.as_ref()
    }
    /// <p>The JAR file used for the step.</p>
    pub fn hadoop_jar_step(&self) -> std::option::Option<&crate::types::HadoopJarStepConfig> {
        self.hadoop_jar_step.as_ref()
    }
}
impl StepConfig {
    /// Creates a new builder-style object to manufacture [`StepConfig`](crate::types::StepConfig).
    pub fn builder() -> crate::types::builders::StepConfigBuilder {
        crate::types::builders::StepConfigBuilder::default()
    }
}

/// A builder for [`StepConfig`](crate::types::StepConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StepConfigBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) action_on_failure: std::option::Option<crate::types::ActionOnFailure>,
    pub(crate) hadoop_jar_step: std::option::Option<crate::types::HadoopJarStepConfig>,
}
impl StepConfigBuilder {
    /// <p>The name of the step.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the step.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The action to take when the step fails. Use one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>TERMINATE_CLUSTER</code> - Shuts down the cluster.</p> </li>
    /// <li> <p> <code>CANCEL_AND_WAIT</code> - Cancels any pending steps and returns the cluster to the <code>WAITING</code> state.</p> </li>
    /// <li> <p> <code>CONTINUE</code> - Continues to the next step in the queue.</p> </li>
    /// <li> <p> <code>TERMINATE_JOB_FLOW</code> - Shuts down the cluster. <code>TERMINATE_JOB_FLOW</code> is provided for backward compatibility. We recommend using <code>TERMINATE_CLUSTER</code> instead.</p> </li>
    /// </ul>
    /// <p>If a cluster's <code>StepConcurrencyLevel</code> is greater than <code>1</code>, do not use <code>AddJobFlowSteps</code> to submit a step with this parameter set to <code>CANCEL_AND_WAIT</code> or <code>TERMINATE_CLUSTER</code>. The step is not submitted and the action fails with a message that the <code>ActionOnFailure</code> setting is not valid.</p>
    /// <p>If you change a cluster's <code>StepConcurrencyLevel</code> to be greater than 1 while a step is running, the <code>ActionOnFailure</code> parameter may not behave as you expect. In this case, for a step that fails with this parameter set to <code>CANCEL_AND_WAIT</code>, pending steps and the running step are not canceled; for a step that fails with this parameter set to <code>TERMINATE_CLUSTER</code>, the cluster does not terminate.</p>
    pub fn action_on_failure(mut self, input: crate::types::ActionOnFailure) -> Self {
        self.action_on_failure = Some(input);
        self
    }
    /// <p>The action to take when the step fails. Use one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>TERMINATE_CLUSTER</code> - Shuts down the cluster.</p> </li>
    /// <li> <p> <code>CANCEL_AND_WAIT</code> - Cancels any pending steps and returns the cluster to the <code>WAITING</code> state.</p> </li>
    /// <li> <p> <code>CONTINUE</code> - Continues to the next step in the queue.</p> </li>
    /// <li> <p> <code>TERMINATE_JOB_FLOW</code> - Shuts down the cluster. <code>TERMINATE_JOB_FLOW</code> is provided for backward compatibility. We recommend using <code>TERMINATE_CLUSTER</code> instead.</p> </li>
    /// </ul>
    /// <p>If a cluster's <code>StepConcurrencyLevel</code> is greater than <code>1</code>, do not use <code>AddJobFlowSteps</code> to submit a step with this parameter set to <code>CANCEL_AND_WAIT</code> or <code>TERMINATE_CLUSTER</code>. The step is not submitted and the action fails with a message that the <code>ActionOnFailure</code> setting is not valid.</p>
    /// <p>If you change a cluster's <code>StepConcurrencyLevel</code> to be greater than 1 while a step is running, the <code>ActionOnFailure</code> parameter may not behave as you expect. In this case, for a step that fails with this parameter set to <code>CANCEL_AND_WAIT</code>, pending steps and the running step are not canceled; for a step that fails with this parameter set to <code>TERMINATE_CLUSTER</code>, the cluster does not terminate.</p>
    pub fn set_action_on_failure(
        mut self,
        input: std::option::Option<crate::types::ActionOnFailure>,
    ) -> Self {
        self.action_on_failure = input;
        self
    }
    /// <p>The JAR file used for the step.</p>
    pub fn hadoop_jar_step(mut self, input: crate::types::HadoopJarStepConfig) -> Self {
        self.hadoop_jar_step = Some(input);
        self
    }
    /// <p>The JAR file used for the step.</p>
    pub fn set_hadoop_jar_step(
        mut self,
        input: std::option::Option<crate::types::HadoopJarStepConfig>,
    ) -> Self {
        self.hadoop_jar_step = input;
        self
    }
    /// Consumes the builder and constructs a [`StepConfig`](crate::types::StepConfig).
    pub fn build(self) -> crate::types::StepConfig {
        crate::types::StepConfig {
            name: self.name,
            action_on_failure: self.action_on_failure,
            hadoop_jar_step: self.hadoop_jar_step,
        }
    }
}
