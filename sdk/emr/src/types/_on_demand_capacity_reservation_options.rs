// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the strategy for using unused Capacity Reservations for fulfilling On-Demand capacity.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct OnDemandCapacityReservationOptions {
    /// <p>Indicates whether to use unused Capacity Reservations for fulfilling On-Demand capacity.</p>
    /// <p>If you specify <code>use-capacity-reservations-first</code>, the fleet uses unused Capacity Reservations to fulfill On-Demand capacity up to the target On-Demand capacity. If multiple instance pools have unused Capacity Reservations, the On-Demand allocation strategy (<code>lowest-price</code>) is applied. If the number of unused Capacity Reservations is less than the On-Demand target capacity, the remaining On-Demand target capacity is launched according to the On-Demand allocation strategy (<code>lowest-price</code>).</p>
    /// <p>If you do not specify a value, the fleet fulfills the On-Demand capacity according to the chosen On-Demand allocation strategy.</p>
    #[doc(hidden)]
    pub usage_strategy: std::option::Option<crate::types::OnDemandCapacityReservationUsageStrategy>,
    /// <p>Indicates the instance's Capacity Reservation preferences. Possible preferences include:</p>
    /// <ul>
    /// <li> <p> <code>open</code> - The instance can run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).</p> </li>
    /// <li> <p> <code>none</code> - The instance avoids running in a Capacity Reservation even if one is available. The instance runs as an On-Demand Instance.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub capacity_reservation_preference:
        std::option::Option<crate::types::OnDemandCapacityReservationPreference>,
    /// <p>The ARN of the Capacity Reservation resource group in which to run the instance.</p>
    #[doc(hidden)]
    pub capacity_reservation_resource_group_arn: std::option::Option<std::string::String>,
}
impl OnDemandCapacityReservationOptions {
    /// <p>Indicates whether to use unused Capacity Reservations for fulfilling On-Demand capacity.</p>
    /// <p>If you specify <code>use-capacity-reservations-first</code>, the fleet uses unused Capacity Reservations to fulfill On-Demand capacity up to the target On-Demand capacity. If multiple instance pools have unused Capacity Reservations, the On-Demand allocation strategy (<code>lowest-price</code>) is applied. If the number of unused Capacity Reservations is less than the On-Demand target capacity, the remaining On-Demand target capacity is launched according to the On-Demand allocation strategy (<code>lowest-price</code>).</p>
    /// <p>If you do not specify a value, the fleet fulfills the On-Demand capacity according to the chosen On-Demand allocation strategy.</p>
    pub fn usage_strategy(
        &self,
    ) -> std::option::Option<&crate::types::OnDemandCapacityReservationUsageStrategy> {
        self.usage_strategy.as_ref()
    }
    /// <p>Indicates the instance's Capacity Reservation preferences. Possible preferences include:</p>
    /// <ul>
    /// <li> <p> <code>open</code> - The instance can run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).</p> </li>
    /// <li> <p> <code>none</code> - The instance avoids running in a Capacity Reservation even if one is available. The instance runs as an On-Demand Instance.</p> </li>
    /// </ul>
    pub fn capacity_reservation_preference(
        &self,
    ) -> std::option::Option<&crate::types::OnDemandCapacityReservationPreference> {
        self.capacity_reservation_preference.as_ref()
    }
    /// <p>The ARN of the Capacity Reservation resource group in which to run the instance.</p>
    pub fn capacity_reservation_resource_group_arn(&self) -> std::option::Option<&str> {
        self.capacity_reservation_resource_group_arn.as_deref()
    }
}
impl OnDemandCapacityReservationOptions {
    /// Creates a new builder-style object to manufacture [`OnDemandCapacityReservationOptions`](crate::types::OnDemandCapacityReservationOptions).
    pub fn builder() -> crate::types::builders::OnDemandCapacityReservationOptionsBuilder {
        crate::types::builders::OnDemandCapacityReservationOptionsBuilder::default()
    }
}

/// A builder for [`OnDemandCapacityReservationOptions`](crate::types::OnDemandCapacityReservationOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct OnDemandCapacityReservationOptionsBuilder {
    pub(crate) usage_strategy:
        std::option::Option<crate::types::OnDemandCapacityReservationUsageStrategy>,
    pub(crate) capacity_reservation_preference:
        std::option::Option<crate::types::OnDemandCapacityReservationPreference>,
    pub(crate) capacity_reservation_resource_group_arn: std::option::Option<std::string::String>,
}
impl OnDemandCapacityReservationOptionsBuilder {
    /// <p>Indicates whether to use unused Capacity Reservations for fulfilling On-Demand capacity.</p>
    /// <p>If you specify <code>use-capacity-reservations-first</code>, the fleet uses unused Capacity Reservations to fulfill On-Demand capacity up to the target On-Demand capacity. If multiple instance pools have unused Capacity Reservations, the On-Demand allocation strategy (<code>lowest-price</code>) is applied. If the number of unused Capacity Reservations is less than the On-Demand target capacity, the remaining On-Demand target capacity is launched according to the On-Demand allocation strategy (<code>lowest-price</code>).</p>
    /// <p>If you do not specify a value, the fleet fulfills the On-Demand capacity according to the chosen On-Demand allocation strategy.</p>
    pub fn usage_strategy(
        mut self,
        input: crate::types::OnDemandCapacityReservationUsageStrategy,
    ) -> Self {
        self.usage_strategy = Some(input);
        self
    }
    /// <p>Indicates whether to use unused Capacity Reservations for fulfilling On-Demand capacity.</p>
    /// <p>If you specify <code>use-capacity-reservations-first</code>, the fleet uses unused Capacity Reservations to fulfill On-Demand capacity up to the target On-Demand capacity. If multiple instance pools have unused Capacity Reservations, the On-Demand allocation strategy (<code>lowest-price</code>) is applied. If the number of unused Capacity Reservations is less than the On-Demand target capacity, the remaining On-Demand target capacity is launched according to the On-Demand allocation strategy (<code>lowest-price</code>).</p>
    /// <p>If you do not specify a value, the fleet fulfills the On-Demand capacity according to the chosen On-Demand allocation strategy.</p>
    pub fn set_usage_strategy(
        mut self,
        input: std::option::Option<crate::types::OnDemandCapacityReservationUsageStrategy>,
    ) -> Self {
        self.usage_strategy = input;
        self
    }
    /// <p>Indicates the instance's Capacity Reservation preferences. Possible preferences include:</p>
    /// <ul>
    /// <li> <p> <code>open</code> - The instance can run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).</p> </li>
    /// <li> <p> <code>none</code> - The instance avoids running in a Capacity Reservation even if one is available. The instance runs as an On-Demand Instance.</p> </li>
    /// </ul>
    pub fn capacity_reservation_preference(
        mut self,
        input: crate::types::OnDemandCapacityReservationPreference,
    ) -> Self {
        self.capacity_reservation_preference = Some(input);
        self
    }
    /// <p>Indicates the instance's Capacity Reservation preferences. Possible preferences include:</p>
    /// <ul>
    /// <li> <p> <code>open</code> - The instance can run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).</p> </li>
    /// <li> <p> <code>none</code> - The instance avoids running in a Capacity Reservation even if one is available. The instance runs as an On-Demand Instance.</p> </li>
    /// </ul>
    pub fn set_capacity_reservation_preference(
        mut self,
        input: std::option::Option<crate::types::OnDemandCapacityReservationPreference>,
    ) -> Self {
        self.capacity_reservation_preference = input;
        self
    }
    /// <p>The ARN of the Capacity Reservation resource group in which to run the instance.</p>
    pub fn capacity_reservation_resource_group_arn(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.capacity_reservation_resource_group_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the Capacity Reservation resource group in which to run the instance.</p>
    pub fn set_capacity_reservation_resource_group_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.capacity_reservation_resource_group_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`OnDemandCapacityReservationOptions`](crate::types::OnDemandCapacityReservationOptions).
    pub fn build(self) -> crate::types::OnDemandCapacityReservationOptions {
        crate::types::OnDemandCapacityReservationOptions {
            usage_strategy: self.usage_strategy,
            capacity_reservation_preference: self.capacity_reservation_preference,
            capacity_reservation_resource_group_arn: self.capacity_reservation_resource_group_arn,
        }
    }
}
