// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>EBS block device that's attached to an EC2 instance.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EbsVolume {
    /// <p>The device name that is exposed to the instance, such as /dev/sdh.</p>
    #[doc(hidden)]
    pub device: std::option::Option<std::string::String>,
    /// <p>The volume identifier of the EBS volume.</p>
    #[doc(hidden)]
    pub volume_id: std::option::Option<std::string::String>,
}
impl EbsVolume {
    /// <p>The device name that is exposed to the instance, such as /dev/sdh.</p>
    pub fn device(&self) -> std::option::Option<&str> {
        self.device.as_deref()
    }
    /// <p>The volume identifier of the EBS volume.</p>
    pub fn volume_id(&self) -> std::option::Option<&str> {
        self.volume_id.as_deref()
    }
}
impl EbsVolume {
    /// Creates a new builder-style object to manufacture [`EbsVolume`](crate::types::EbsVolume).
    pub fn builder() -> crate::types::builders::EbsVolumeBuilder {
        crate::types::builders::EbsVolumeBuilder::default()
    }
}

/// A builder for [`EbsVolume`](crate::types::EbsVolume).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EbsVolumeBuilder {
    pub(crate) device: std::option::Option<std::string::String>,
    pub(crate) volume_id: std::option::Option<std::string::String>,
}
impl EbsVolumeBuilder {
    /// <p>The device name that is exposed to the instance, such as /dev/sdh.</p>
    pub fn device(mut self, input: impl Into<std::string::String>) -> Self {
        self.device = Some(input.into());
        self
    }
    /// <p>The device name that is exposed to the instance, such as /dev/sdh.</p>
    pub fn set_device(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.device = input;
        self
    }
    /// <p>The volume identifier of the EBS volume.</p>
    pub fn volume_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.volume_id = Some(input.into());
        self
    }
    /// <p>The volume identifier of the EBS volume.</p>
    pub fn set_volume_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.volume_id = input;
        self
    }
    /// Consumes the builder and constructs a [`EbsVolume`](crate::types::EbsVolume).
    pub fn build(self) -> crate::types::EbsVolume {
        crate::types::EbsVolume {
            device: self.device,
            volume_id: self.volume_id,
        }
    }
}
