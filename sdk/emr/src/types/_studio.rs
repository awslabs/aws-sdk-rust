// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details for an Amazon EMR Studio including ID, creation time, name, and so on.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Studio {
    /// <p>The ID of the Amazon EMR Studio.</p>
    #[doc(hidden)]
    pub studio_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Amazon EMR Studio.</p>
    #[doc(hidden)]
    pub studio_arn: std::option::Option<std::string::String>,
    /// <p>The name of the Amazon EMR Studio.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The detailed description of the Amazon EMR Studio.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>Specifies whether the Amazon EMR Studio authenticates users using IAM or IAM Identity Center.</p>
    #[doc(hidden)]
    pub auth_mode: std::option::Option<crate::types::AuthMode>,
    /// <p>The ID of the VPC associated with the Amazon EMR Studio.</p>
    #[doc(hidden)]
    pub vpc_id: std::option::Option<std::string::String>,
    /// <p>The list of IDs of the subnets associated with the Amazon EMR Studio.</p>
    #[doc(hidden)]
    pub subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The name of the IAM role assumed by the Amazon EMR Studio.</p>
    #[doc(hidden)]
    pub service_role: std::option::Option<std::string::String>,
    /// <p>The name of the IAM role assumed by users logged in to the Amazon EMR Studio. A Studio only requires a <code>UserRole</code> when you use IAM authentication.</p>
    #[doc(hidden)]
    pub user_role: std::option::Option<std::string::String>,
    /// <p>The ID of the Workspace security group associated with the Amazon EMR Studio. The Workspace security group allows outbound network traffic to resources in the Engine security group and to the internet.</p>
    #[doc(hidden)]
    pub workspace_security_group_id: std::option::Option<std::string::String>,
    /// <p>The ID of the Engine security group associated with the Amazon EMR Studio. The Engine security group allows inbound network traffic from resources in the Workspace security group.</p>
    #[doc(hidden)]
    pub engine_security_group_id: std::option::Option<std::string::String>,
    /// <p>The unique access URL of the Amazon EMR Studio.</p>
    #[doc(hidden)]
    pub url: std::option::Option<std::string::String>,
    /// <p>The time the Amazon EMR Studio was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The Amazon S3 location to back up Amazon EMR Studio Workspaces and notebook files.</p>
    #[doc(hidden)]
    pub default_s3_location: std::option::Option<std::string::String>,
    /// <p>Your identity provider's authentication endpoint. Amazon EMR Studio redirects federated users to this endpoint for authentication when logging in to a Studio with the Studio URL.</p>
    #[doc(hidden)]
    pub idp_auth_url: std::option::Option<std::string::String>,
    /// <p>The name of your identity provider's <code>RelayState</code> parameter.</p>
    #[doc(hidden)]
    pub idp_relay_state_parameter_name: std::option::Option<std::string::String>,
    /// <p>A list of tags associated with the Amazon EMR Studio.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl Studio {
    /// <p>The ID of the Amazon EMR Studio.</p>
    pub fn studio_id(&self) -> std::option::Option<&str> {
        self.studio_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon EMR Studio.</p>
    pub fn studio_arn(&self) -> std::option::Option<&str> {
        self.studio_arn.as_deref()
    }
    /// <p>The name of the Amazon EMR Studio.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The detailed description of the Amazon EMR Studio.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Specifies whether the Amazon EMR Studio authenticates users using IAM or IAM Identity Center.</p>
    pub fn auth_mode(&self) -> std::option::Option<&crate::types::AuthMode> {
        self.auth_mode.as_ref()
    }
    /// <p>The ID of the VPC associated with the Amazon EMR Studio.</p>
    pub fn vpc_id(&self) -> std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>The list of IDs of the subnets associated with the Amazon EMR Studio.</p>
    pub fn subnet_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.subnet_ids.as_deref()
    }
    /// <p>The name of the IAM role assumed by the Amazon EMR Studio.</p>
    pub fn service_role(&self) -> std::option::Option<&str> {
        self.service_role.as_deref()
    }
    /// <p>The name of the IAM role assumed by users logged in to the Amazon EMR Studio. A Studio only requires a <code>UserRole</code> when you use IAM authentication.</p>
    pub fn user_role(&self) -> std::option::Option<&str> {
        self.user_role.as_deref()
    }
    /// <p>The ID of the Workspace security group associated with the Amazon EMR Studio. The Workspace security group allows outbound network traffic to resources in the Engine security group and to the internet.</p>
    pub fn workspace_security_group_id(&self) -> std::option::Option<&str> {
        self.workspace_security_group_id.as_deref()
    }
    /// <p>The ID of the Engine security group associated with the Amazon EMR Studio. The Engine security group allows inbound network traffic from resources in the Workspace security group.</p>
    pub fn engine_security_group_id(&self) -> std::option::Option<&str> {
        self.engine_security_group_id.as_deref()
    }
    /// <p>The unique access URL of the Amazon EMR Studio.</p>
    pub fn url(&self) -> std::option::Option<&str> {
        self.url.as_deref()
    }
    /// <p>The time the Amazon EMR Studio was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The Amazon S3 location to back up Amazon EMR Studio Workspaces and notebook files.</p>
    pub fn default_s3_location(&self) -> std::option::Option<&str> {
        self.default_s3_location.as_deref()
    }
    /// <p>Your identity provider's authentication endpoint. Amazon EMR Studio redirects federated users to this endpoint for authentication when logging in to a Studio with the Studio URL.</p>
    pub fn idp_auth_url(&self) -> std::option::Option<&str> {
        self.idp_auth_url.as_deref()
    }
    /// <p>The name of your identity provider's <code>RelayState</code> parameter.</p>
    pub fn idp_relay_state_parameter_name(&self) -> std::option::Option<&str> {
        self.idp_relay_state_parameter_name.as_deref()
    }
    /// <p>A list of tags associated with the Amazon EMR Studio.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl Studio {
    /// Creates a new builder-style object to manufacture [`Studio`](crate::types::Studio).
    pub fn builder() -> crate::types::builders::StudioBuilder {
        crate::types::builders::StudioBuilder::default()
    }
}

/// A builder for [`Studio`](crate::types::Studio).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StudioBuilder {
    pub(crate) studio_id: std::option::Option<std::string::String>,
    pub(crate) studio_arn: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) auth_mode: std::option::Option<crate::types::AuthMode>,
    pub(crate) vpc_id: std::option::Option<std::string::String>,
    pub(crate) subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) service_role: std::option::Option<std::string::String>,
    pub(crate) user_role: std::option::Option<std::string::String>,
    pub(crate) workspace_security_group_id: std::option::Option<std::string::String>,
    pub(crate) engine_security_group_id: std::option::Option<std::string::String>,
    pub(crate) url: std::option::Option<std::string::String>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) default_s3_location: std::option::Option<std::string::String>,
    pub(crate) idp_auth_url: std::option::Option<std::string::String>,
    pub(crate) idp_relay_state_parameter_name: std::option::Option<std::string::String>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl StudioBuilder {
    /// <p>The ID of the Amazon EMR Studio.</p>
    pub fn studio_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.studio_id = Some(input.into());
        self
    }
    /// <p>The ID of the Amazon EMR Studio.</p>
    pub fn set_studio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.studio_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon EMR Studio.</p>
    pub fn studio_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.studio_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon EMR Studio.</p>
    pub fn set_studio_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.studio_arn = input;
        self
    }
    /// <p>The name of the Amazon EMR Studio.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the Amazon EMR Studio.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The detailed description of the Amazon EMR Studio.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The detailed description of the Amazon EMR Studio.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Specifies whether the Amazon EMR Studio authenticates users using IAM or IAM Identity Center.</p>
    pub fn auth_mode(mut self, input: crate::types::AuthMode) -> Self {
        self.auth_mode = Some(input);
        self
    }
    /// <p>Specifies whether the Amazon EMR Studio authenticates users using IAM or IAM Identity Center.</p>
    pub fn set_auth_mode(mut self, input: std::option::Option<crate::types::AuthMode>) -> Self {
        self.auth_mode = input;
        self
    }
    /// <p>The ID of the VPC associated with the Amazon EMR Studio.</p>
    pub fn vpc_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.vpc_id = Some(input.into());
        self
    }
    /// <p>The ID of the VPC associated with the Amazon EMR Studio.</p>
    pub fn set_vpc_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// Appends an item to `subnet_ids`.
    ///
    /// To override the contents of this collection use [`set_subnet_ids`](Self::set_subnet_ids).
    ///
    /// <p>The list of IDs of the subnets associated with the Amazon EMR Studio.</p>
    pub fn subnet_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.subnet_ids.unwrap_or_default();
        v.push(input.into());
        self.subnet_ids = Some(v);
        self
    }
    /// <p>The list of IDs of the subnets associated with the Amazon EMR Studio.</p>
    pub fn set_subnet_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.subnet_ids = input;
        self
    }
    /// <p>The name of the IAM role assumed by the Amazon EMR Studio.</p>
    pub fn service_role(mut self, input: impl Into<std::string::String>) -> Self {
        self.service_role = Some(input.into());
        self
    }
    /// <p>The name of the IAM role assumed by the Amazon EMR Studio.</p>
    pub fn set_service_role(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.service_role = input;
        self
    }
    /// <p>The name of the IAM role assumed by users logged in to the Amazon EMR Studio. A Studio only requires a <code>UserRole</code> when you use IAM authentication.</p>
    pub fn user_role(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_role = Some(input.into());
        self
    }
    /// <p>The name of the IAM role assumed by users logged in to the Amazon EMR Studio. A Studio only requires a <code>UserRole</code> when you use IAM authentication.</p>
    pub fn set_user_role(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_role = input;
        self
    }
    /// <p>The ID of the Workspace security group associated with the Amazon EMR Studio. The Workspace security group allows outbound network traffic to resources in the Engine security group and to the internet.</p>
    pub fn workspace_security_group_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.workspace_security_group_id = Some(input.into());
        self
    }
    /// <p>The ID of the Workspace security group associated with the Amazon EMR Studio. The Workspace security group allows outbound network traffic to resources in the Engine security group and to the internet.</p>
    pub fn set_workspace_security_group_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.workspace_security_group_id = input;
        self
    }
    /// <p>The ID of the Engine security group associated with the Amazon EMR Studio. The Engine security group allows inbound network traffic from resources in the Workspace security group.</p>
    pub fn engine_security_group_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine_security_group_id = Some(input.into());
        self
    }
    /// <p>The ID of the Engine security group associated with the Amazon EMR Studio. The Engine security group allows inbound network traffic from resources in the Workspace security group.</p>
    pub fn set_engine_security_group_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.engine_security_group_id = input;
        self
    }
    /// <p>The unique access URL of the Amazon EMR Studio.</p>
    pub fn url(mut self, input: impl Into<std::string::String>) -> Self {
        self.url = Some(input.into());
        self
    }
    /// <p>The unique access URL of the Amazon EMR Studio.</p>
    pub fn set_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// <p>The time the Amazon EMR Studio was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The time the Amazon EMR Studio was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The Amazon S3 location to back up Amazon EMR Studio Workspaces and notebook files.</p>
    pub fn default_s3_location(mut self, input: impl Into<std::string::String>) -> Self {
        self.default_s3_location = Some(input.into());
        self
    }
    /// <p>The Amazon S3 location to back up Amazon EMR Studio Workspaces and notebook files.</p>
    pub fn set_default_s3_location(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.default_s3_location = input;
        self
    }
    /// <p>Your identity provider's authentication endpoint. Amazon EMR Studio redirects federated users to this endpoint for authentication when logging in to a Studio with the Studio URL.</p>
    pub fn idp_auth_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.idp_auth_url = Some(input.into());
        self
    }
    /// <p>Your identity provider's authentication endpoint. Amazon EMR Studio redirects federated users to this endpoint for authentication when logging in to a Studio with the Studio URL.</p>
    pub fn set_idp_auth_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.idp_auth_url = input;
        self
    }
    /// <p>The name of your identity provider's <code>RelayState</code> parameter.</p>
    pub fn idp_relay_state_parameter_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.idp_relay_state_parameter_name = Some(input.into());
        self
    }
    /// <p>The name of your identity provider's <code>RelayState</code> parameter.</p>
    pub fn set_idp_relay_state_parameter_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.idp_relay_state_parameter_name = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags associated with the Amazon EMR Studio.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>A list of tags associated with the Amazon EMR Studio.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`Studio`](crate::types::Studio).
    pub fn build(self) -> crate::types::Studio {
        crate::types::Studio {
            studio_id: self.studio_id,
            studio_arn: self.studio_arn,
            name: self.name,
            description: self.description,
            auth_mode: self.auth_mode,
            vpc_id: self.vpc_id,
            subnet_ids: self.subnet_ids,
            service_role: self.service_role,
            user_role: self.user_role,
            workspace_security_group_id: self.workspace_security_group_id,
            engine_security_group_id: self.engine_security_group_id,
            url: self.url,
            creation_time: self.creation_time,
            default_s3_location: self.default_s3_location,
            idp_auth_url: self.idp_auth_url,
            idp_relay_state_parameter_name: self.idp_relay_state_parameter_name,
            tags: self.tags,
        }
    }
}
