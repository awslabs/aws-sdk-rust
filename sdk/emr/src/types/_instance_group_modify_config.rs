// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Modify the size or configurations of an instance group.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InstanceGroupModifyConfig {
    /// <p>Unique ID of the instance group to modify.</p>
    pub instance_group_id: ::std::option::Option<::std::string::String>,
    /// <p>Target size for the instance group.</p>
    pub instance_count: ::std::option::Option<i32>,
    /// <p>The Amazon EC2 InstanceIds to terminate. After you terminate the instances, the instance group will not return to its original requested size.</p>
    pub ec2_instance_ids_to_terminate: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Policy for customizing shrink operations.</p>
    pub shrink_policy: ::std::option::Option<crate::types::ShrinkPolicy>,
    /// <p>Type of reconfiguration requested. Valid values are MERGE and OVERWRITE.</p>
    pub reconfiguration_type: ::std::option::Option<crate::types::ReconfigurationType>,
    /// <p>A list of new or modified configurations to apply for an instance group.</p>
    pub configurations: ::std::option::Option<::std::vec::Vec<crate::types::Configuration>>,
}
impl InstanceGroupModifyConfig {
    /// <p>Unique ID of the instance group to modify.</p>
    pub fn instance_group_id(&self) -> ::std::option::Option<&str> {
        self.instance_group_id.as_deref()
    }
    /// <p>Target size for the instance group.</p>
    pub fn instance_count(&self) -> ::std::option::Option<i32> {
        self.instance_count
    }
    /// <p>The Amazon EC2 InstanceIds to terminate. After you terminate the instances, the instance group will not return to its original requested size.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ec2_instance_ids_to_terminate.is_none()`.
    pub fn ec2_instance_ids_to_terminate(&self) -> &[::std::string::String] {
        self.ec2_instance_ids_to_terminate.as_deref().unwrap_or_default()
    }
    /// <p>Policy for customizing shrink operations.</p>
    pub fn shrink_policy(&self) -> ::std::option::Option<&crate::types::ShrinkPolicy> {
        self.shrink_policy.as_ref()
    }
    /// <p>Type of reconfiguration requested. Valid values are MERGE and OVERWRITE.</p>
    pub fn reconfiguration_type(&self) -> ::std::option::Option<&crate::types::ReconfigurationType> {
        self.reconfiguration_type.as_ref()
    }
    /// <p>A list of new or modified configurations to apply for an instance group.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.configurations.is_none()`.
    pub fn configurations(&self) -> &[crate::types::Configuration] {
        self.configurations.as_deref().unwrap_or_default()
    }
}
impl InstanceGroupModifyConfig {
    /// Creates a new builder-style object to manufacture [`InstanceGroupModifyConfig`](crate::types::InstanceGroupModifyConfig).
    pub fn builder() -> crate::types::builders::InstanceGroupModifyConfigBuilder {
        crate::types::builders::InstanceGroupModifyConfigBuilder::default()
    }
}

/// A builder for [`InstanceGroupModifyConfig`](crate::types::InstanceGroupModifyConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct InstanceGroupModifyConfigBuilder {
    pub(crate) instance_group_id: ::std::option::Option<::std::string::String>,
    pub(crate) instance_count: ::std::option::Option<i32>,
    pub(crate) ec2_instance_ids_to_terminate: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) shrink_policy: ::std::option::Option<crate::types::ShrinkPolicy>,
    pub(crate) reconfiguration_type: ::std::option::Option<crate::types::ReconfigurationType>,
    pub(crate) configurations: ::std::option::Option<::std::vec::Vec<crate::types::Configuration>>,
}
impl InstanceGroupModifyConfigBuilder {
    /// <p>Unique ID of the instance group to modify.</p>
    /// This field is required.
    pub fn instance_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique ID of the instance group to modify.</p>
    pub fn set_instance_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_group_id = input;
        self
    }
    /// <p>Unique ID of the instance group to modify.</p>
    pub fn get_instance_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_group_id
    }
    /// <p>Target size for the instance group.</p>
    pub fn instance_count(mut self, input: i32) -> Self {
        self.instance_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>Target size for the instance group.</p>
    pub fn set_instance_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.instance_count = input;
        self
    }
    /// <p>Target size for the instance group.</p>
    pub fn get_instance_count(&self) -> &::std::option::Option<i32> {
        &self.instance_count
    }
    /// Appends an item to `ec2_instance_ids_to_terminate`.
    ///
    /// To override the contents of this collection use [`set_ec2_instance_ids_to_terminate`](Self::set_ec2_instance_ids_to_terminate).
    ///
    /// <p>The Amazon EC2 InstanceIds to terminate. After you terminate the instances, the instance group will not return to its original requested size.</p>
    pub fn ec2_instance_ids_to_terminate(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.ec2_instance_ids_to_terminate.unwrap_or_default();
        v.push(input.into());
        self.ec2_instance_ids_to_terminate = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon EC2 InstanceIds to terminate. After you terminate the instances, the instance group will not return to its original requested size.</p>
    pub fn set_ec2_instance_ids_to_terminate(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.ec2_instance_ids_to_terminate = input;
        self
    }
    /// <p>The Amazon EC2 InstanceIds to terminate. After you terminate the instances, the instance group will not return to its original requested size.</p>
    pub fn get_ec2_instance_ids_to_terminate(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.ec2_instance_ids_to_terminate
    }
    /// <p>Policy for customizing shrink operations.</p>
    pub fn shrink_policy(mut self, input: crate::types::ShrinkPolicy) -> Self {
        self.shrink_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>Policy for customizing shrink operations.</p>
    pub fn set_shrink_policy(mut self, input: ::std::option::Option<crate::types::ShrinkPolicy>) -> Self {
        self.shrink_policy = input;
        self
    }
    /// <p>Policy for customizing shrink operations.</p>
    pub fn get_shrink_policy(&self) -> &::std::option::Option<crate::types::ShrinkPolicy> {
        &self.shrink_policy
    }
    /// <p>Type of reconfiguration requested. Valid values are MERGE and OVERWRITE.</p>
    pub fn reconfiguration_type(mut self, input: crate::types::ReconfigurationType) -> Self {
        self.reconfiguration_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Type of reconfiguration requested. Valid values are MERGE and OVERWRITE.</p>
    pub fn set_reconfiguration_type(mut self, input: ::std::option::Option<crate::types::ReconfigurationType>) -> Self {
        self.reconfiguration_type = input;
        self
    }
    /// <p>Type of reconfiguration requested. Valid values are MERGE and OVERWRITE.</p>
    pub fn get_reconfiguration_type(&self) -> &::std::option::Option<crate::types::ReconfigurationType> {
        &self.reconfiguration_type
    }
    /// Appends an item to `configurations`.
    ///
    /// To override the contents of this collection use [`set_configurations`](Self::set_configurations).
    ///
    /// <p>A list of new or modified configurations to apply for an instance group.</p>
    pub fn configurations(mut self, input: crate::types::Configuration) -> Self {
        let mut v = self.configurations.unwrap_or_default();
        v.push(input);
        self.configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of new or modified configurations to apply for an instance group.</p>
    pub fn set_configurations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Configuration>>) -> Self {
        self.configurations = input;
        self
    }
    /// <p>A list of new or modified configurations to apply for an instance group.</p>
    pub fn get_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Configuration>> {
        &self.configurations
    }
    /// Consumes the builder and constructs a [`InstanceGroupModifyConfig`](crate::types::InstanceGroupModifyConfig).
    pub fn build(self) -> crate::types::InstanceGroupModifyConfig {
        crate::types::InstanceGroupModifyConfig {
            instance_group_id: self.instance_group_id,
            instance_count: self.instance_count,
            ec2_instance_ids_to_terminate: self.ec2_instance_ids_to_terminate,
            shrink_policy: self.shrink_policy,
            reconfiguration_type: self.reconfiguration_type,
            configurations: self.configurations,
        }
    }
}
