// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Amazon EBS configuration of a cluster instance.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EbsConfiguration {
    /// <p>An array of Amazon EBS volume specifications attached to a cluster instance.</p>
    #[doc(hidden)]
    pub ebs_block_device_configs:
        std::option::Option<std::vec::Vec<crate::types::EbsBlockDeviceConfig>>,
    /// <p>Indicates whether an Amazon EBS volume is EBS-optimized.</p>
    #[doc(hidden)]
    pub ebs_optimized: std::option::Option<bool>,
}
impl EbsConfiguration {
    /// <p>An array of Amazon EBS volume specifications attached to a cluster instance.</p>
    pub fn ebs_block_device_configs(
        &self,
    ) -> std::option::Option<&[crate::types::EbsBlockDeviceConfig]> {
        self.ebs_block_device_configs.as_deref()
    }
    /// <p>Indicates whether an Amazon EBS volume is EBS-optimized.</p>
    pub fn ebs_optimized(&self) -> std::option::Option<bool> {
        self.ebs_optimized
    }
}
impl EbsConfiguration {
    /// Creates a new builder-style object to manufacture [`EbsConfiguration`](crate::types::EbsConfiguration).
    pub fn builder() -> crate::types::builders::EbsConfigurationBuilder {
        crate::types::builders::EbsConfigurationBuilder::default()
    }
}

/// A builder for [`EbsConfiguration`](crate::types::EbsConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EbsConfigurationBuilder {
    pub(crate) ebs_block_device_configs:
        std::option::Option<std::vec::Vec<crate::types::EbsBlockDeviceConfig>>,
    pub(crate) ebs_optimized: std::option::Option<bool>,
}
impl EbsConfigurationBuilder {
    /// Appends an item to `ebs_block_device_configs`.
    ///
    /// To override the contents of this collection use [`set_ebs_block_device_configs`](Self::set_ebs_block_device_configs).
    ///
    /// <p>An array of Amazon EBS volume specifications attached to a cluster instance.</p>
    pub fn ebs_block_device_configs(mut self, input: crate::types::EbsBlockDeviceConfig) -> Self {
        let mut v = self.ebs_block_device_configs.unwrap_or_default();
        v.push(input);
        self.ebs_block_device_configs = Some(v);
        self
    }
    /// <p>An array of Amazon EBS volume specifications attached to a cluster instance.</p>
    pub fn set_ebs_block_device_configs(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::EbsBlockDeviceConfig>>,
    ) -> Self {
        self.ebs_block_device_configs = input;
        self
    }
    /// <p>Indicates whether an Amazon EBS volume is EBS-optimized.</p>
    pub fn ebs_optimized(mut self, input: bool) -> Self {
        self.ebs_optimized = Some(input);
        self
    }
    /// <p>Indicates whether an Amazon EBS volume is EBS-optimized.</p>
    pub fn set_ebs_optimized(mut self, input: std::option::Option<bool>) -> Self {
        self.ebs_optimized = input;
        self
    }
    /// Consumes the builder and constructs a [`EbsConfiguration`](crate::types::EbsConfiguration).
    pub fn build(self) -> crate::types::EbsConfiguration {
        crate::types::EbsConfiguration {
            ebs_block_device_configs: self.ebs_block_device_configs,
            ebs_optimized: self.ebs_optimized,
        }
    }
}
