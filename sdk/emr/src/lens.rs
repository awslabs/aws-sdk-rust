// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_list_bootstrap_actions_output_marker(
    input: &crate::output::ListBootstrapActionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_clusters_output_marker(
    input: &crate::output::ListClustersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_instance_fleets_output_marker(
    input: &crate::output::ListInstanceFleetsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_instance_groups_output_marker(
    input: &crate::output::ListInstanceGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_instances_output_marker(
    input: &crate::output::ListInstancesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_notebook_executions_output_marker(
    input: &crate::output::ListNotebookExecutionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_release_labels_output_next_token(
    input: &crate::output::ListReleaseLabelsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_security_configurations_output_marker(
    input: &crate::output::ListSecurityConfigurationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_steps_output_marker(
    input: &crate::output::ListStepsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_studios_output_marker(
    input: &crate::output::ListStudiosOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_studio_session_mappings_output_marker(
    input: &crate::output::ListStudioSessionMappingsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_bootstrap_actions_output_bootstrap_actions(
    input: crate::output::ListBootstrapActionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Command>> {
    let input = match input.bootstrap_actions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_clusters_output_clusters(
    input: crate::output::ListClustersOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ClusterSummary>> {
    let input = match input.clusters {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_instance_fleets_output_instance_fleets(
    input: crate::output::ListInstanceFleetsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::InstanceFleet>> {
    let input = match input.instance_fleets {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_instance_groups_output_instance_groups(
    input: crate::output::ListInstanceGroupsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::InstanceGroup>> {
    let input = match input.instance_groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_instances_output_instances(
    input: crate::output::ListInstancesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Instance>> {
    let input = match input.instances {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_notebook_executions_output_notebook_executions(
    input: crate::output::ListNotebookExecutionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::NotebookExecutionSummary>> {
    let input = match input.notebook_executions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_security_configurations_output_security_configurations(
    input: crate::output::ListSecurityConfigurationsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::SecurityConfigurationSummary>> {
    let input = match input.security_configurations {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_steps_output_steps(
    input: crate::output::ListStepsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::StepSummary>> {
    let input = match input.steps {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_studios_output_studios(
    input: crate::output::ListStudiosOutput,
) -> std::option::Option<std::vec::Vec<crate::model::StudioSummary>> {
    let input = match input.studios {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_studio_session_mappings_output_session_mappings(
    input: crate::output::ListStudioSessionMappingsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::SessionMappingSummary>> {
    let input = match input.session_mappings {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
