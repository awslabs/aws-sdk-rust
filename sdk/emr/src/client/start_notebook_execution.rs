// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`StartNotebookExecution`](crate::client::fluent_builders::StartNotebookExecution) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`editor_id(impl Into<String>)`](crate::client::fluent_builders::StartNotebookExecution::editor_id) / [`set_editor_id(Option<String>)`](crate::client::fluent_builders::StartNotebookExecution::set_editor_id): <p>The unique identifier of the EMR Notebook to use for notebook execution.</p>
    ///   - [`relative_path(impl Into<String>)`](crate::client::fluent_builders::StartNotebookExecution::relative_path) / [`set_relative_path(Option<String>)`](crate::client::fluent_builders::StartNotebookExecution::set_relative_path): <p>The path and file name of the notebook file for this execution, relative to the path specified for the EMR Notebook. For example, if you specify a path of <code>s3://MyBucket/MyNotebooks</code> when you create an EMR Notebook for a notebook with an ID of <code>e-ABCDEFGHIJK1234567890ABCD</code> (the <code>EditorID</code> of this request), and you specify a <code>RelativePath</code> of <code>my_notebook_executions/notebook_execution.ipynb</code>, the location of the file for the notebook execution is <code>s3://MyBucket/MyNotebooks/e-ABCDEFGHIJK1234567890ABCD/my_notebook_executions/notebook_execution.ipynb</code>.</p>
    ///   - [`notebook_execution_name(impl Into<String>)`](crate::client::fluent_builders::StartNotebookExecution::notebook_execution_name) / [`set_notebook_execution_name(Option<String>)`](crate::client::fluent_builders::StartNotebookExecution::set_notebook_execution_name): <p>An optional name for the notebook execution.</p>
    ///   - [`notebook_params(impl Into<String>)`](crate::client::fluent_builders::StartNotebookExecution::notebook_params) / [`set_notebook_params(Option<String>)`](crate::client::fluent_builders::StartNotebookExecution::set_notebook_params): <p>Input parameters in JSON format passed to the EMR Notebook at runtime for execution.</p>
    ///   - [`execution_engine(ExecutionEngineConfig)`](crate::client::fluent_builders::StartNotebookExecution::execution_engine) / [`set_execution_engine(Option<ExecutionEngineConfig>)`](crate::client::fluent_builders::StartNotebookExecution::set_execution_engine): <p>Specifies the execution engine (cluster) that runs the notebook execution.</p>
    ///   - [`service_role(impl Into<String>)`](crate::client::fluent_builders::StartNotebookExecution::service_role) / [`set_service_role(Option<String>)`](crate::client::fluent_builders::StartNotebookExecution::set_service_role): <p>The name or ARN of the IAM role that is used as the service role for Amazon EMR (the EMR role) for the notebook execution.</p>
    ///   - [`notebook_instance_security_group_id(impl Into<String>)`](crate::client::fluent_builders::StartNotebookExecution::notebook_instance_security_group_id) / [`set_notebook_instance_security_group_id(Option<String>)`](crate::client::fluent_builders::StartNotebookExecution::set_notebook_instance_security_group_id): <p>The unique identifier of the Amazon EC2 security group to associate with the EMR Notebook for this notebook execution.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::StartNotebookExecution::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::StartNotebookExecution::set_tags): <p>A list of tags associated with a notebook execution. Tags are user-defined key-value pairs that consist of a required key string with a maximum of 128 characters and an optional value string with a maximum of 256 characters.</p>
    /// - On success, responds with [`StartNotebookExecutionOutput`](crate::output::StartNotebookExecutionOutput) with field(s):
    ///   - [`notebook_execution_id(Option<String>)`](crate::output::StartNotebookExecutionOutput::notebook_execution_id): <p>The unique identifier of the notebook execution.</p>
    /// - On failure, responds with [`SdkError<StartNotebookExecutionError>`](crate::error::StartNotebookExecutionError)
    pub fn start_notebook_execution(
        &self,
    ) -> crate::client::fluent_builders::StartNotebookExecution {
        crate::client::fluent_builders::StartNotebookExecution::new(self.handle.clone())
    }
}
