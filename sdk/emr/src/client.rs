// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(std::fmt::Debug)]
pub(crate) struct Handle<C = aws_hyper::DynConnector> {
    client: aws_hyper::Client<C>,
    conf: crate::Config,
}

#[derive(Clone, std::fmt::Debug)]
pub struct Client<C = aws_hyper::DynConnector> {
    handle: std::sync::Arc<Handle<C>>,
}
impl<C> Client<C> {
    pub fn from_conf_conn(conf: crate::Config, conn: C) -> Self {
        let client = aws_hyper::Client::new(conn);
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_env() -> Self {
        Self::from_conf(crate::Config::builder().build())
    }

    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_conf(conf: crate::Config) -> Self {
        let client = aws_hyper::Client::https();
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
impl<C> Client<C>
where
    C: aws_hyper::SmithyConnector,
{
    pub fn add_instance_fleet(&self) -> fluent_builders::AddInstanceFleet<C> {
        fluent_builders::AddInstanceFleet::new(self.handle.clone())
    }
    pub fn add_instance_groups(&self) -> fluent_builders::AddInstanceGroups<C> {
        fluent_builders::AddInstanceGroups::new(self.handle.clone())
    }
    pub fn add_job_flow_steps(&self) -> fluent_builders::AddJobFlowSteps<C> {
        fluent_builders::AddJobFlowSteps::new(self.handle.clone())
    }
    pub fn add_tags(&self) -> fluent_builders::AddTags<C> {
        fluent_builders::AddTags::new(self.handle.clone())
    }
    pub fn cancel_steps(&self) -> fluent_builders::CancelSteps<C> {
        fluent_builders::CancelSteps::new(self.handle.clone())
    }
    pub fn create_security_configuration(&self) -> fluent_builders::CreateSecurityConfiguration<C> {
        fluent_builders::CreateSecurityConfiguration::new(self.handle.clone())
    }
    pub fn create_studio(&self) -> fluent_builders::CreateStudio<C> {
        fluent_builders::CreateStudio::new(self.handle.clone())
    }
    pub fn create_studio_session_mapping(&self) -> fluent_builders::CreateStudioSessionMapping<C> {
        fluent_builders::CreateStudioSessionMapping::new(self.handle.clone())
    }
    pub fn delete_security_configuration(&self) -> fluent_builders::DeleteSecurityConfiguration<C> {
        fluent_builders::DeleteSecurityConfiguration::new(self.handle.clone())
    }
    pub fn delete_studio(&self) -> fluent_builders::DeleteStudio<C> {
        fluent_builders::DeleteStudio::new(self.handle.clone())
    }
    pub fn delete_studio_session_mapping(&self) -> fluent_builders::DeleteStudioSessionMapping<C> {
        fluent_builders::DeleteStudioSessionMapping::new(self.handle.clone())
    }
    pub fn describe_cluster(&self) -> fluent_builders::DescribeCluster<C> {
        fluent_builders::DescribeCluster::new(self.handle.clone())
    }
    pub fn describe_job_flows(&self) -> fluent_builders::DescribeJobFlows<C> {
        fluent_builders::DescribeJobFlows::new(self.handle.clone())
    }
    pub fn describe_notebook_execution(&self) -> fluent_builders::DescribeNotebookExecution<C> {
        fluent_builders::DescribeNotebookExecution::new(self.handle.clone())
    }
    pub fn describe_security_configuration(
        &self,
    ) -> fluent_builders::DescribeSecurityConfiguration<C> {
        fluent_builders::DescribeSecurityConfiguration::new(self.handle.clone())
    }
    pub fn describe_step(&self) -> fluent_builders::DescribeStep<C> {
        fluent_builders::DescribeStep::new(self.handle.clone())
    }
    pub fn describe_studio(&self) -> fluent_builders::DescribeStudio<C> {
        fluent_builders::DescribeStudio::new(self.handle.clone())
    }
    pub fn get_block_public_access_configuration(
        &self,
    ) -> fluent_builders::GetBlockPublicAccessConfiguration<C> {
        fluent_builders::GetBlockPublicAccessConfiguration::new(self.handle.clone())
    }
    pub fn get_managed_scaling_policy(&self) -> fluent_builders::GetManagedScalingPolicy<C> {
        fluent_builders::GetManagedScalingPolicy::new(self.handle.clone())
    }
    pub fn get_studio_session_mapping(&self) -> fluent_builders::GetStudioSessionMapping<C> {
        fluent_builders::GetStudioSessionMapping::new(self.handle.clone())
    }
    pub fn list_bootstrap_actions(&self) -> fluent_builders::ListBootstrapActions<C> {
        fluent_builders::ListBootstrapActions::new(self.handle.clone())
    }
    pub fn list_clusters(&self) -> fluent_builders::ListClusters<C> {
        fluent_builders::ListClusters::new(self.handle.clone())
    }
    pub fn list_instance_fleets(&self) -> fluent_builders::ListInstanceFleets<C> {
        fluent_builders::ListInstanceFleets::new(self.handle.clone())
    }
    pub fn list_instance_groups(&self) -> fluent_builders::ListInstanceGroups<C> {
        fluent_builders::ListInstanceGroups::new(self.handle.clone())
    }
    pub fn list_instances(&self) -> fluent_builders::ListInstances<C> {
        fluent_builders::ListInstances::new(self.handle.clone())
    }
    pub fn list_notebook_executions(&self) -> fluent_builders::ListNotebookExecutions<C> {
        fluent_builders::ListNotebookExecutions::new(self.handle.clone())
    }
    pub fn list_security_configurations(&self) -> fluent_builders::ListSecurityConfigurations<C> {
        fluent_builders::ListSecurityConfigurations::new(self.handle.clone())
    }
    pub fn list_steps(&self) -> fluent_builders::ListSteps<C> {
        fluent_builders::ListSteps::new(self.handle.clone())
    }
    pub fn list_studios(&self) -> fluent_builders::ListStudios<C> {
        fluent_builders::ListStudios::new(self.handle.clone())
    }
    pub fn list_studio_session_mappings(&self) -> fluent_builders::ListStudioSessionMappings<C> {
        fluent_builders::ListStudioSessionMappings::new(self.handle.clone())
    }
    pub fn modify_cluster(&self) -> fluent_builders::ModifyCluster<C> {
        fluent_builders::ModifyCluster::new(self.handle.clone())
    }
    pub fn modify_instance_fleet(&self) -> fluent_builders::ModifyInstanceFleet<C> {
        fluent_builders::ModifyInstanceFleet::new(self.handle.clone())
    }
    pub fn modify_instance_groups(&self) -> fluent_builders::ModifyInstanceGroups<C> {
        fluent_builders::ModifyInstanceGroups::new(self.handle.clone())
    }
    pub fn put_auto_scaling_policy(&self) -> fluent_builders::PutAutoScalingPolicy<C> {
        fluent_builders::PutAutoScalingPolicy::new(self.handle.clone())
    }
    pub fn put_block_public_access_configuration(
        &self,
    ) -> fluent_builders::PutBlockPublicAccessConfiguration<C> {
        fluent_builders::PutBlockPublicAccessConfiguration::new(self.handle.clone())
    }
    pub fn put_managed_scaling_policy(&self) -> fluent_builders::PutManagedScalingPolicy<C> {
        fluent_builders::PutManagedScalingPolicy::new(self.handle.clone())
    }
    pub fn remove_auto_scaling_policy(&self) -> fluent_builders::RemoveAutoScalingPolicy<C> {
        fluent_builders::RemoveAutoScalingPolicy::new(self.handle.clone())
    }
    pub fn remove_managed_scaling_policy(&self) -> fluent_builders::RemoveManagedScalingPolicy<C> {
        fluent_builders::RemoveManagedScalingPolicy::new(self.handle.clone())
    }
    pub fn remove_tags(&self) -> fluent_builders::RemoveTags<C> {
        fluent_builders::RemoveTags::new(self.handle.clone())
    }
    pub fn run_job_flow(&self) -> fluent_builders::RunJobFlow<C> {
        fluent_builders::RunJobFlow::new(self.handle.clone())
    }
    pub fn set_termination_protection(&self) -> fluent_builders::SetTerminationProtection<C> {
        fluent_builders::SetTerminationProtection::new(self.handle.clone())
    }
    pub fn set_visible_to_all_users(&self) -> fluent_builders::SetVisibleToAllUsers<C> {
        fluent_builders::SetVisibleToAllUsers::new(self.handle.clone())
    }
    pub fn start_notebook_execution(&self) -> fluent_builders::StartNotebookExecution<C> {
        fluent_builders::StartNotebookExecution::new(self.handle.clone())
    }
    pub fn stop_notebook_execution(&self) -> fluent_builders::StopNotebookExecution<C> {
        fluent_builders::StopNotebookExecution::new(self.handle.clone())
    }
    pub fn terminate_job_flows(&self) -> fluent_builders::TerminateJobFlows<C> {
        fluent_builders::TerminateJobFlows::new(self.handle.clone())
    }
    pub fn update_studio(&self) -> fluent_builders::UpdateStudio<C> {
        fluent_builders::UpdateStudio::new(self.handle.clone())
    }
    pub fn update_studio_session_mapping(&self) -> fluent_builders::UpdateStudioSessionMapping<C> {
        fluent_builders::UpdateStudioSessionMapping::new(self.handle.clone())
    }
}
pub mod fluent_builders {
    #[derive(std::fmt::Debug)]
    pub struct AddInstanceFleet<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::add_instance_fleet_input::Builder,
    }
    impl<C> AddInstanceFleet<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AddInstanceFleetOutput,
            smithy_http::result::SdkError<crate::error::AddInstanceFleetError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the cluster.</p>
        pub fn cluster_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_id(input);
            self
        }
        pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_id(input);
            self
        }
        /// <p>Specifies the configuration of the instance fleet.</p>
        pub fn instance_fleet(mut self, input: crate::model::InstanceFleetConfig) -> Self {
            self.inner = self.inner.instance_fleet(input);
            self
        }
        pub fn set_instance_fleet(
            mut self,
            input: std::option::Option<crate::model::InstanceFleetConfig>,
        ) -> Self {
            self.inner = self.inner.set_instance_fleet(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AddInstanceGroups<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::add_instance_groups_input::Builder,
    }
    impl<C> AddInstanceGroups<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AddInstanceGroupsOutput,
            smithy_http::result::SdkError<crate::error::AddInstanceGroupsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Instance groups to add.</p>
        pub fn instance_groups(
            mut self,
            inp: impl Into<crate::model::InstanceGroupConfig>,
        ) -> Self {
            self.inner = self.inner.instance_groups(inp);
            self
        }
        pub fn set_instance_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::InstanceGroupConfig>>,
        ) -> Self {
            self.inner = self.inner.set_instance_groups(input);
            self
        }
        /// <p>Job flow in which to add the instance groups.</p>
        pub fn job_flow_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.job_flow_id(input);
            self
        }
        pub fn set_job_flow_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_job_flow_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AddJobFlowSteps<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::add_job_flow_steps_input::Builder,
    }
    impl<C> AddJobFlowSteps<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AddJobFlowStepsOutput,
            smithy_http::result::SdkError<crate::error::AddJobFlowStepsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>A string that uniquely identifies the job flow. This identifier is returned by <a>RunJobFlow</a> and can also be obtained from <a>ListClusters</a>.
        /// </p>
        pub fn job_flow_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.job_flow_id(input);
            self
        }
        pub fn set_job_flow_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_job_flow_id(input);
            self
        }
        /// <p> A list of <a>StepConfig</a> to be executed by the job flow. </p>
        pub fn steps(mut self, inp: impl Into<crate::model::StepConfig>) -> Self {
            self.inner = self.inner.steps(inp);
            self
        }
        pub fn set_steps(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::StepConfig>>,
        ) -> Self {
            self.inner = self.inner.set_steps(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AddTags<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::add_tags_input::Builder,
    }
    impl<C> AddTags<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AddTagsOutput,
            smithy_http::result::SdkError<crate::error::AddTagsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon EMR resource identifier to which tags will be added. This value must be a
        /// cluster identifier.</p>
        pub fn resource_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_id(input);
            self
        }
        pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_id(input);
            self
        }
        /// <p>A list of tags to associate with a cluster and propagate to EC2 instances. Tags are
        /// user-defined key-value pairs that consist of a required key string with a maximum of 128
        /// characters, and an optional value string with a maximum of 256 characters.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CancelSteps<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::cancel_steps_input::Builder,
    }
    impl<C> CancelSteps<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CancelStepsOutput,
            smithy_http::result::SdkError<crate::error::CancelStepsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>ClusterID</code> for the specified steps that will be canceled. Use <a>RunJobFlow</a> and <a>ListClusters</a> to get ClusterIDs. </p>
        pub fn cluster_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_id(input);
            self
        }
        pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_id(input);
            self
        }
        /// <p>The list of <code>StepIDs</code> to cancel. Use <a>ListSteps</a> to get steps
        /// and their states for the specified cluster.</p>
        pub fn step_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.step_ids(inp);
            self
        }
        pub fn set_step_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_step_ids(input);
            self
        }
        /// <p>The option to choose to cancel <code>RUNNING</code> steps. By default, the value is
        /// <code>SEND_INTERRUPT</code>.</p>
        pub fn step_cancellation_option(
            mut self,
            input: crate::model::StepCancellationOption,
        ) -> Self {
            self.inner = self.inner.step_cancellation_option(input);
            self
        }
        pub fn set_step_cancellation_option(
            mut self,
            input: std::option::Option<crate::model::StepCancellationOption>,
        ) -> Self {
            self.inner = self.inner.set_step_cancellation_option(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateSecurityConfiguration<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::create_security_configuration_input::Builder,
    }
    impl<C> CreateSecurityConfiguration<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateSecurityConfigurationOutput,
            smithy_http::result::SdkError<crate::error::CreateSecurityConfigurationError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the security configuration.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(input);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>The security configuration details in JSON format. For JSON parameters and examples, see
        /// <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-security-configurations.html">Use Security
        /// Configurations to Set Up Cluster Security</a> in the <i>Amazon EMR Management
        /// Guide</i>.</p>
        pub fn security_configuration(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.security_configuration(input);
            self
        }
        pub fn set_security_configuration(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_security_configuration(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateStudio<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::create_studio_input::Builder,
    }
    impl<C> CreateStudio<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateStudioOutput,
            smithy_http::result::SdkError<crate::error::CreateStudioError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>A descriptive name for the Amazon EMR Studio.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(input);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>A detailed description of the Amazon EMR Studio.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(input);
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(input);
            self
        }
        /// <p>Specifies whether the Studio authenticates users using single sign-on (SSO) or IAM.
        /// Amazon EMR Studio currently only supports SSO authentication.</p>
        pub fn auth_mode(mut self, input: crate::model::AuthMode) -> Self {
            self.inner = self.inner.auth_mode(input);
            self
        }
        pub fn set_auth_mode(mut self, input: std::option::Option<crate::model::AuthMode>) -> Self {
            self.inner = self.inner.set_auth_mode(input);
            self
        }
        /// <p>The ID of the Amazon Virtual Private Cloud (Amazon VPC) to associate with the
        /// Studio.</p>
        pub fn vpc_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vpc_id(input);
            self
        }
        pub fn set_vpc_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_vpc_id(input);
            self
        }
        /// <p>A list of subnet IDs to associate with the Amazon EMR Studio. A Studio can have a maximum of 5 subnets. The subnets must belong to the VPC
        /// specified by <code>VpcId</code>. Studio users can create a Workspace in any of the
        /// specified subnets.</p>
        pub fn subnet_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.subnet_ids(inp);
            self
        }
        pub fn set_subnet_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_subnet_ids(input);
            self
        }
        /// <p>The IAM role that will be assumed by the Amazon EMR Studio. The service role provides a
        /// way for Amazon EMR Studio to interoperate with other AWS services.</p>
        pub fn service_role(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.service_role(input);
            self
        }
        pub fn set_service_role(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_service_role(input);
            self
        }
        /// <p>The IAM user role that will be assumed by users and groups logged in to an Amazon EMR Studio. The
        /// permissions attached to this IAM role can be scoped down for each user or group using
        /// session policies.</p>
        pub fn user_role(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_role(input);
            self
        }
        pub fn set_user_role(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_role(input);
            self
        }
        /// <p>The ID of the Amazon EMR Studio Workspace security group. The Workspace security group
        /// allows outbound network traffic to resources in the Engine security group, and it must be
        /// in the same VPC specified by <code>VpcId</code>.</p>
        pub fn workspace_security_group_id(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.workspace_security_group_id(input);
            self
        }
        pub fn set_workspace_security_group_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_workspace_security_group_id(input);
            self
        }
        /// <p>The ID of the Amazon EMR Studio Engine security group. The Engine security group allows
        /// inbound network traffic from the Workspace security group, and it must be in the same VPC
        /// specified by <code>VpcId</code>.</p>
        pub fn engine_security_group_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.engine_security_group_id(input);
            self
        }
        pub fn set_engine_security_group_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_engine_security_group_id(input);
            self
        }
        /// <p>The Amazon S3 location to back up Amazon EMR Studio Workspaces and notebook files.</p>
        pub fn default_s3_location(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.default_s3_location(input);
            self
        }
        pub fn set_default_s3_location(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_default_s3_location(input);
            self
        }
        /// <p>A list of tags to associate with the Amazon EMR Studio. Tags are user-defined key-value pairs that
        /// consist of a required key string with a maximum of 128 characters, and an optional value
        /// string with a maximum of 256 characters.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateStudioSessionMapping<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::create_studio_session_mapping_input::Builder,
    }
    impl<C> CreateStudioSessionMapping<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateStudioSessionMappingOutput,
            smithy_http::result::SdkError<crate::error::CreateStudioSessionMappingError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the Amazon EMR Studio to which the user or group will be mapped.</p>
        pub fn studio_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.studio_id(input);
            self
        }
        pub fn set_studio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_studio_id(input);
            self
        }
        /// <p>The globally unique identifier (GUID) of the user or group from the AWS SSO Identity
        /// Store. For more information, see <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserId">UserId</a> and <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-GroupId">GroupId</a> in the <i>AWS SSO Identity Store API Reference</i>.
        /// Either <code>IdentityName</code> or <code>IdentityId</code> must be specified.</p>
        pub fn identity_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identity_id(input);
            self
        }
        pub fn set_identity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_identity_id(input);
            self
        }
        /// <p>The name of the user or group. For more information, see <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserName">UserName</a> and <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-DisplayName">DisplayName</a> in the <i>AWS SSO Identity Store API Reference</i>.
        /// Either <code>IdentityName</code> or <code>IdentityId</code> must be specified.</p>
        pub fn identity_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identity_name(input);
            self
        }
        pub fn set_identity_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_identity_name(input);
            self
        }
        /// <p>Specifies whether the identity to map to the Amazon EMR Studio is a user or a group.</p>
        pub fn identity_type(mut self, input: crate::model::IdentityType) -> Self {
            self.inner = self.inner.identity_type(input);
            self
        }
        pub fn set_identity_type(
            mut self,
            input: std::option::Option<crate::model::IdentityType>,
        ) -> Self {
            self.inner = self.inner.set_identity_type(input);
            self
        }
        /// <p>The Amazon Resource Name (ARN) for the session policy that will be applied to the user
        /// or group. Session policies refine Studio user permissions without the need to use multiple
        /// IAM user roles.</p>
        pub fn session_policy_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.session_policy_arn(input);
            self
        }
        pub fn set_session_policy_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_session_policy_arn(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteSecurityConfiguration<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::delete_security_configuration_input::Builder,
    }
    impl<C> DeleteSecurityConfiguration<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteSecurityConfigurationOutput,
            smithy_http::result::SdkError<crate::error::DeleteSecurityConfigurationError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the security configuration.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(input);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteStudio<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::delete_studio_input::Builder,
    }
    impl<C> DeleteStudio<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteStudioOutput,
            smithy_http::result::SdkError<crate::error::DeleteStudioError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the Amazon EMR Studio.</p>
        pub fn studio_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.studio_id(input);
            self
        }
        pub fn set_studio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_studio_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteStudioSessionMapping<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::delete_studio_session_mapping_input::Builder,
    }
    impl<C> DeleteStudioSessionMapping<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteStudioSessionMappingOutput,
            smithy_http::result::SdkError<crate::error::DeleteStudioSessionMappingError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the Amazon EMR Studio.</p>
        pub fn studio_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.studio_id(input);
            self
        }
        pub fn set_studio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_studio_id(input);
            self
        }
        /// <p>The globally unique identifier (GUID) of the user or group to remove from the Amazon EMR
        /// Studio. For more information, see <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserId">UserId</a> and <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-GroupId">GroupId</a> in the <i>AWS SSO Identity Store API Reference</i>.
        /// Either <code>IdentityName</code> or <code>IdentityId</code> must be specified.</p>
        pub fn identity_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identity_id(input);
            self
        }
        pub fn set_identity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_identity_id(input);
            self
        }
        /// <p>The name of the user name or group to remove from the Amazon EMR Studio. For more information, see
        /// <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserName">UserName</a> and <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-DisplayName">DisplayName</a> in the <i>AWS SSO Identity Store API Reference</i>.
        /// Either <code>IdentityName</code> or <code>IdentityId</code> must be specified.</p>
        pub fn identity_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identity_name(input);
            self
        }
        pub fn set_identity_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_identity_name(input);
            self
        }
        /// <p>Specifies whether the identity to delete from the Amazon EMR Studio is a user or a group.</p>
        pub fn identity_type(mut self, input: crate::model::IdentityType) -> Self {
            self.inner = self.inner.identity_type(input);
            self
        }
        pub fn set_identity_type(
            mut self,
            input: std::option::Option<crate::model::IdentityType>,
        ) -> Self {
            self.inner = self.inner.set_identity_type(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeCluster<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_cluster_input::Builder,
    }
    impl<C> DescribeCluster<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeClusterOutput,
            smithy_http::result::SdkError<crate::error::DescribeClusterError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the cluster to describe.</p>
        pub fn cluster_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_id(input);
            self
        }
        pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeJobFlows<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_job_flows_input::Builder,
    }
    impl<C> DescribeJobFlows<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeJobFlowsOutput,
            smithy_http::result::SdkError<crate::error::DescribeJobFlowsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Return only job flows created after this date and time.</p>
        pub fn created_after(mut self, input: smithy_types::Instant) -> Self {
            self.inner = self.inner.created_after(input);
            self
        }
        pub fn set_created_after(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.inner = self.inner.set_created_after(input);
            self
        }
        /// <p>Return only job flows created before this date and time.</p>
        pub fn created_before(mut self, input: smithy_types::Instant) -> Self {
            self.inner = self.inner.created_before(input);
            self
        }
        pub fn set_created_before(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.inner = self.inner.set_created_before(input);
            self
        }
        /// <p>Return only job flows whose job flow ID is contained in this list.</p>
        pub fn job_flow_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.job_flow_ids(inp);
            self
        }
        pub fn set_job_flow_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_job_flow_ids(input);
            self
        }
        /// <p>Return only job flows whose state is contained in this list.</p>
        pub fn job_flow_states(
            mut self,
            inp: impl Into<crate::model::JobFlowExecutionState>,
        ) -> Self {
            self.inner = self.inner.job_flow_states(inp);
            self
        }
        pub fn set_job_flow_states(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::JobFlowExecutionState>>,
        ) -> Self {
            self.inner = self.inner.set_job_flow_states(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeNotebookExecution<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_notebook_execution_input::Builder,
    }
    impl<C> DescribeNotebookExecution<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeNotebookExecutionOutput,
            smithy_http::result::SdkError<crate::error::DescribeNotebookExecutionError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the notebook execution.</p>
        pub fn notebook_execution_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.notebook_execution_id(input);
            self
        }
        pub fn set_notebook_execution_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_notebook_execution_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeSecurityConfiguration<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_security_configuration_input::Builder,
    }
    impl<C> DescribeSecurityConfiguration<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeSecurityConfigurationOutput,
            smithy_http::result::SdkError<crate::error::DescribeSecurityConfigurationError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the security configuration.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(input);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeStep<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_step_input::Builder,
    }
    impl<C> DescribeStep<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeStepOutput,
            smithy_http::result::SdkError<crate::error::DescribeStepError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the cluster with steps to describe.</p>
        pub fn cluster_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_id(input);
            self
        }
        pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_id(input);
            self
        }
        /// <p>The identifier of the step to describe.</p>
        pub fn step_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.step_id(input);
            self
        }
        pub fn set_step_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_step_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeStudio<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_studio_input::Builder,
    }
    impl<C> DescribeStudio<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeStudioOutput,
            smithy_http::result::SdkError<crate::error::DescribeStudioError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon EMR Studio ID.</p>
        pub fn studio_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.studio_id(input);
            self
        }
        pub fn set_studio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_studio_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetBlockPublicAccessConfiguration<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::get_block_public_access_configuration_input::Builder,
    }
    impl<C> GetBlockPublicAccessConfiguration<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetBlockPublicAccessConfigurationOutput,
            smithy_http::result::SdkError<crate::error::GetBlockPublicAccessConfigurationError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetManagedScalingPolicy<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::get_managed_scaling_policy_input::Builder,
    }
    impl<C> GetManagedScalingPolicy<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetManagedScalingPolicyOutput,
            smithy_http::result::SdkError<crate::error::GetManagedScalingPolicyError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Specifies the ID of the cluster for which the managed scaling policy will be fetched.
        /// </p>
        pub fn cluster_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_id(input);
            self
        }
        pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetStudioSessionMapping<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::get_studio_session_mapping_input::Builder,
    }
    impl<C> GetStudioSessionMapping<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetStudioSessionMappingOutput,
            smithy_http::result::SdkError<crate::error::GetStudioSessionMappingError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the Amazon EMR Studio.</p>
        pub fn studio_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.studio_id(input);
            self
        }
        pub fn set_studio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_studio_id(input);
            self
        }
        /// <p>The globally unique identifier (GUID) of the user or group. For more information, see
        /// <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserId">UserId</a> and <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-GroupId">GroupId</a> in the <i>AWS SSO Identity Store API Reference</i>.
        /// Either <code>IdentityName</code> or <code>IdentityId</code> must be specified.</p>
        pub fn identity_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identity_id(input);
            self
        }
        pub fn set_identity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_identity_id(input);
            self
        }
        /// <p>The name of the user or group to fetch. For more information, see <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserName">UserName</a> and <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-DisplayName">DisplayName</a> in the <i>AWS SSO Identity Store API Reference</i>.
        /// Either <code>IdentityName</code> or <code>IdentityId</code> must be specified.</p>
        pub fn identity_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identity_name(input);
            self
        }
        pub fn set_identity_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_identity_name(input);
            self
        }
        /// <p>Specifies whether the identity to fetch is a user or a group.</p>
        pub fn identity_type(mut self, input: crate::model::IdentityType) -> Self {
            self.inner = self.inner.identity_type(input);
            self
        }
        pub fn set_identity_type(
            mut self,
            input: std::option::Option<crate::model::IdentityType>,
        ) -> Self {
            self.inner = self.inner.set_identity_type(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListBootstrapActions<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_bootstrap_actions_input::Builder,
    }
    impl<C> ListBootstrapActions<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListBootstrapActionsOutput,
            smithy_http::result::SdkError<crate::error::ListBootstrapActionsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The cluster identifier for the bootstrap actions to list.</p>
        pub fn cluster_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_id(input);
            self
        }
        pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_id(input);
            self
        }
        /// <p>The pagination token that indicates the next set of results to retrieve.</p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.marker(input);
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_marker(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListClusters<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_clusters_input::Builder,
    }
    impl<C> ListClusters<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListClustersOutput,
            smithy_http::result::SdkError<crate::error::ListClustersError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The creation date and time beginning value filter for listing clusters.</p>
        pub fn created_after(mut self, input: smithy_types::Instant) -> Self {
            self.inner = self.inner.created_after(input);
            self
        }
        pub fn set_created_after(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.inner = self.inner.set_created_after(input);
            self
        }
        /// <p>The creation date and time end value filter for listing clusters.</p>
        pub fn created_before(mut self, input: smithy_types::Instant) -> Self {
            self.inner = self.inner.created_before(input);
            self
        }
        pub fn set_created_before(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.inner = self.inner.set_created_before(input);
            self
        }
        /// <p>The cluster state filters to apply when listing clusters.</p>
        pub fn cluster_states(mut self, inp: impl Into<crate::model::ClusterState>) -> Self {
            self.inner = self.inner.cluster_states(inp);
            self
        }
        pub fn set_cluster_states(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ClusterState>>,
        ) -> Self {
            self.inner = self.inner.set_cluster_states(input);
            self
        }
        /// <p>The pagination token that indicates the next set of results to retrieve.</p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.marker(input);
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_marker(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListInstanceFleets<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_instance_fleets_input::Builder,
    }
    impl<C> ListInstanceFleets<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListInstanceFleetsOutput,
            smithy_http::result::SdkError<crate::error::ListInstanceFleetsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the cluster.</p>
        pub fn cluster_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_id(input);
            self
        }
        pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_id(input);
            self
        }
        /// <p>The pagination token that indicates the next set of results to retrieve.</p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.marker(input);
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_marker(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListInstanceGroups<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_instance_groups_input::Builder,
    }
    impl<C> ListInstanceGroups<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListInstanceGroupsOutput,
            smithy_http::result::SdkError<crate::error::ListInstanceGroupsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the cluster for which to list the instance groups.</p>
        pub fn cluster_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_id(input);
            self
        }
        pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_id(input);
            self
        }
        /// <p>The pagination token that indicates the next set of results to retrieve.</p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.marker(input);
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_marker(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListInstances<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_instances_input::Builder,
    }
    impl<C> ListInstances<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListInstancesOutput,
            smithy_http::result::SdkError<crate::error::ListInstancesError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the cluster for which to list the instances.</p>
        pub fn cluster_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_id(input);
            self
        }
        pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_id(input);
            self
        }
        /// <p>The identifier of the instance group for which to list the instances.</p>
        pub fn instance_group_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_group_id(input);
            self
        }
        pub fn set_instance_group_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_instance_group_id(input);
            self
        }
        /// <p>The type of instance group for which to list the instances.</p>
        pub fn instance_group_types(
            mut self,
            inp: impl Into<crate::model::InstanceGroupType>,
        ) -> Self {
            self.inner = self.inner.instance_group_types(inp);
            self
        }
        pub fn set_instance_group_types(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::InstanceGroupType>>,
        ) -> Self {
            self.inner = self.inner.set_instance_group_types(input);
            self
        }
        /// <p>The unique identifier of the instance fleet.</p>
        pub fn instance_fleet_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_fleet_id(input);
            self
        }
        pub fn set_instance_fleet_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_instance_fleet_id(input);
            self
        }
        /// <p>The node type of the instance fleet. For example MASTER, CORE, or TASK.</p>
        pub fn instance_fleet_type(mut self, input: crate::model::InstanceFleetType) -> Self {
            self.inner = self.inner.instance_fleet_type(input);
            self
        }
        pub fn set_instance_fleet_type(
            mut self,
            input: std::option::Option<crate::model::InstanceFleetType>,
        ) -> Self {
            self.inner = self.inner.set_instance_fleet_type(input);
            self
        }
        /// <p>A list of instance states that will filter the instances returned with this
        /// request.</p>
        pub fn instance_states(mut self, inp: impl Into<crate::model::InstanceState>) -> Self {
            self.inner = self.inner.instance_states(inp);
            self
        }
        pub fn set_instance_states(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::InstanceState>>,
        ) -> Self {
            self.inner = self.inner.set_instance_states(input);
            self
        }
        /// <p>The pagination token that indicates the next set of results to retrieve.</p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.marker(input);
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_marker(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListNotebookExecutions<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_notebook_executions_input::Builder,
    }
    impl<C> ListNotebookExecutions<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListNotebookExecutionsOutput,
            smithy_http::result::SdkError<crate::error::ListNotebookExecutionsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The unique ID of the editor associated with the notebook execution.</p>
        pub fn editor_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.editor_id(input);
            self
        }
        pub fn set_editor_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_editor_id(input);
            self
        }
        /// <p>The status filter for listing notebook executions.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>START_PENDING</code> indicates that the cluster has received the execution
        /// request but execution has not begun.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>STARTING</code> indicates that the execution is starting on the
        /// cluster.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>RUNNING</code> indicates that the execution is being processed by the
        /// cluster.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>FINISHING</code> indicates that execution processing is in the final
        /// stages.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>FINISHED</code> indicates that the execution has completed without
        /// error.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>FAILING</code> indicates that the execution is failing and will not finish
        /// successfully.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>FAILED</code> indicates that the execution failed.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>STOP_PENDING</code> indicates that the cluster has received a
        /// <code>StopNotebookExecution</code> request and the stop is pending.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>STOPPING</code> indicates that the cluster is in the process of stopping the
        /// execution as a result of a <code>StopNotebookExecution</code> request.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>STOPPED</code> indicates that the execution stopped because of a
        /// <code>StopNotebookExecution</code> request.</p>
        /// </li>
        /// </ul>
        pub fn status(mut self, input: crate::model::NotebookExecutionStatus) -> Self {
            self.inner = self.inner.status(input);
            self
        }
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::NotebookExecutionStatus>,
        ) -> Self {
            self.inner = self.inner.set_status(input);
            self
        }
        /// <p>The beginning of time range filter for listing notebook executions. The default is the
        /// timestamp of 30 days ago.</p>
        pub fn from(mut self, input: smithy_types::Instant) -> Self {
            self.inner = self.inner.from(input);
            self
        }
        pub fn set_from(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.inner = self.inner.set_from(input);
            self
        }
        /// <p>The end of time range filter for listing notebook executions. The default is the current
        /// timestamp.</p>
        pub fn to(mut self, input: smithy_types::Instant) -> Self {
            self.inner = self.inner.to(input);
            self
        }
        pub fn set_to(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.inner = self.inner.set_to(input);
            self
        }
        /// <p>The pagination token, returned by a previous <code>ListNotebookExecutions</code> call,
        /// that indicates the start of the list for this <code>ListNotebookExecutions</code>
        /// call.</p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.marker(input);
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_marker(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListSecurityConfigurations<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_security_configurations_input::Builder,
    }
    impl<C> ListSecurityConfigurations<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListSecurityConfigurationsOutput,
            smithy_http::result::SdkError<crate::error::ListSecurityConfigurationsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The pagination token that indicates the set of results to retrieve.</p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.marker(input);
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_marker(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListSteps<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_steps_input::Builder,
    }
    impl<C> ListSteps<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListStepsOutput,
            smithy_http::result::SdkError<crate::error::ListStepsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the cluster for which to list the steps.</p>
        pub fn cluster_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_id(input);
            self
        }
        pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_id(input);
            self
        }
        /// <p>The filter to limit the step list based on certain states.</p>
        pub fn step_states(mut self, inp: impl Into<crate::model::StepState>) -> Self {
            self.inner = self.inner.step_states(inp);
            self
        }
        pub fn set_step_states(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::StepState>>,
        ) -> Self {
            self.inner = self.inner.set_step_states(input);
            self
        }
        /// <p>The filter to limit the step list based on the identifier of the steps. You can specify
        /// a maximum of ten Step IDs. The character constraint applies to the overall length of the
        /// array.</p>
        pub fn step_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.step_ids(inp);
            self
        }
        pub fn set_step_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_step_ids(input);
            self
        }
        /// <p>The pagination token that indicates the next set of results to retrieve.</p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.marker(input);
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_marker(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListStudios<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_studios_input::Builder,
    }
    impl<C> ListStudios<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListStudiosOutput,
            smithy_http::result::SdkError<crate::error::ListStudiosError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The pagination token that indicates the set of results to retrieve.</p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.marker(input);
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_marker(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListStudioSessionMappings<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_studio_session_mappings_input::Builder,
    }
    impl<C> ListStudioSessionMappings<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListStudioSessionMappingsOutput,
            smithy_http::result::SdkError<crate::error::ListStudioSessionMappingsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the Amazon EMR Studio.</p>
        pub fn studio_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.studio_id(input);
            self
        }
        pub fn set_studio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_studio_id(input);
            self
        }
        /// <p>Specifies whether to return session mappings for users or groups. If not specified, the
        /// results include session mapping details for both users and groups.</p>
        pub fn identity_type(mut self, input: crate::model::IdentityType) -> Self {
            self.inner = self.inner.identity_type(input);
            self
        }
        pub fn set_identity_type(
            mut self,
            input: std::option::Option<crate::model::IdentityType>,
        ) -> Self {
            self.inner = self.inner.set_identity_type(input);
            self
        }
        /// <p>The pagination token that indicates the set of results to retrieve.</p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.marker(input);
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_marker(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ModifyCluster<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::modify_cluster_input::Builder,
    }
    impl<C> ModifyCluster<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ModifyClusterOutput,
            smithy_http::result::SdkError<crate::error::ModifyClusterError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the cluster.</p>
        pub fn cluster_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_id(input);
            self
        }
        pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_id(input);
            self
        }
        /// <p>The number of steps that can be executed concurrently. You can specify a minimum of 1 step and a maximum of 256
        /// steps. </p>
        pub fn step_concurrency_level(mut self, input: i32) -> Self {
            self.inner = self.inner.step_concurrency_level(input);
            self
        }
        pub fn set_step_concurrency_level(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_step_concurrency_level(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ModifyInstanceFleet<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::modify_instance_fleet_input::Builder,
    }
    impl<C> ModifyInstanceFleet<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ModifyInstanceFleetOutput,
            smithy_http::result::SdkError<crate::error::ModifyInstanceFleetError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the cluster.</p>
        pub fn cluster_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_id(input);
            self
        }
        pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_id(input);
            self
        }
        /// <p>The unique identifier of the instance fleet.</p>
        pub fn instance_fleet(mut self, input: crate::model::InstanceFleetModifyConfig) -> Self {
            self.inner = self.inner.instance_fleet(input);
            self
        }
        pub fn set_instance_fleet(
            mut self,
            input: std::option::Option<crate::model::InstanceFleetModifyConfig>,
        ) -> Self {
            self.inner = self.inner.set_instance_fleet(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ModifyInstanceGroups<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::modify_instance_groups_input::Builder,
    }
    impl<C> ModifyInstanceGroups<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ModifyInstanceGroupsOutput,
            smithy_http::result::SdkError<crate::error::ModifyInstanceGroupsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the cluster to which the instance group belongs.</p>
        pub fn cluster_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_id(input);
            self
        }
        pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_id(input);
            self
        }
        /// <p>Instance groups to change.</p>
        pub fn instance_groups(
            mut self,
            inp: impl Into<crate::model::InstanceGroupModifyConfig>,
        ) -> Self {
            self.inner = self.inner.instance_groups(inp);
            self
        }
        pub fn set_instance_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::InstanceGroupModifyConfig>>,
        ) -> Self {
            self.inner = self.inner.set_instance_groups(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct PutAutoScalingPolicy<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::put_auto_scaling_policy_input::Builder,
    }
    impl<C> PutAutoScalingPolicy<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PutAutoScalingPolicyOutput,
            smithy_http::result::SdkError<crate::error::PutAutoScalingPolicyError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Specifies the ID of a cluster. The instance group to which the automatic scaling policy
        /// is applied is within this cluster.</p>
        pub fn cluster_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_id(input);
            self
        }
        pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_id(input);
            self
        }
        /// <p>Specifies the ID of the instance group to which the automatic scaling policy is
        /// applied.</p>
        pub fn instance_group_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_group_id(input);
            self
        }
        pub fn set_instance_group_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_instance_group_id(input);
            self
        }
        /// <p>Specifies the definition of the automatic scaling policy.</p>
        pub fn auto_scaling_policy(mut self, input: crate::model::AutoScalingPolicy) -> Self {
            self.inner = self.inner.auto_scaling_policy(input);
            self
        }
        pub fn set_auto_scaling_policy(
            mut self,
            input: std::option::Option<crate::model::AutoScalingPolicy>,
        ) -> Self {
            self.inner = self.inner.set_auto_scaling_policy(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct PutBlockPublicAccessConfiguration<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::put_block_public_access_configuration_input::Builder,
    }
    impl<C> PutBlockPublicAccessConfiguration<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PutBlockPublicAccessConfigurationOutput,
            smithy_http::result::SdkError<crate::error::PutBlockPublicAccessConfigurationError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>A configuration for Amazon EMR block public access. The configuration applies to all
        /// clusters created in your account for the current Region. The configuration specifies
        /// whether block public access is enabled. If block public access is enabled, security groups
        /// associated with the cluster cannot have rules that allow inbound traffic from 0.0.0.0/0 or
        /// ::/0 on a port, unless the port is specified as an exception using
        /// <code>PermittedPublicSecurityGroupRuleRanges</code> in the
        /// <code>BlockPublicAccessConfiguration</code>. By default, Port 22 (SSH) is an exception,
        /// and public access is allowed on this port. You can change this by updating
        /// <code>BlockPublicSecurityGroupRules</code> to remove the exception.</p>
        /// <note>
        /// <p>For accounts that created clusters in a Region before November 25, 2019, block public
        /// access is disabled by default in that Region. To use this feature, you must manually
        /// enable and configure it. For accounts that did not create an EMR cluster in a Region
        /// before this date, block public access is enabled by default in that Region.</p>
        /// </note>
        pub fn block_public_access_configuration(
            mut self,
            input: crate::model::BlockPublicAccessConfiguration,
        ) -> Self {
            self.inner = self.inner.block_public_access_configuration(input);
            self
        }
        pub fn set_block_public_access_configuration(
            mut self,
            input: std::option::Option<crate::model::BlockPublicAccessConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_block_public_access_configuration(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct PutManagedScalingPolicy<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::put_managed_scaling_policy_input::Builder,
    }
    impl<C> PutManagedScalingPolicy<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PutManagedScalingPolicyOutput,
            smithy_http::result::SdkError<crate::error::PutManagedScalingPolicyError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Specifies the ID of an EMR cluster where the managed scaling policy is attached. </p>
        pub fn cluster_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_id(input);
            self
        }
        pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_id(input);
            self
        }
        /// <p>Specifies the constraints for the managed scaling policy. </p>
        pub fn managed_scaling_policy(mut self, input: crate::model::ManagedScalingPolicy) -> Self {
            self.inner = self.inner.managed_scaling_policy(input);
            self
        }
        pub fn set_managed_scaling_policy(
            mut self,
            input: std::option::Option<crate::model::ManagedScalingPolicy>,
        ) -> Self {
            self.inner = self.inner.set_managed_scaling_policy(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct RemoveAutoScalingPolicy<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::remove_auto_scaling_policy_input::Builder,
    }
    impl<C> RemoveAutoScalingPolicy<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::RemoveAutoScalingPolicyOutput,
            smithy_http::result::SdkError<crate::error::RemoveAutoScalingPolicyError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Specifies the ID of a cluster. The instance group to which the automatic scaling policy
        /// is applied is within this cluster.</p>
        pub fn cluster_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_id(input);
            self
        }
        pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_id(input);
            self
        }
        /// <p>Specifies the ID of the instance group to which the scaling policy is applied.</p>
        pub fn instance_group_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_group_id(input);
            self
        }
        pub fn set_instance_group_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_instance_group_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct RemoveManagedScalingPolicy<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::remove_managed_scaling_policy_input::Builder,
    }
    impl<C> RemoveManagedScalingPolicy<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::RemoveManagedScalingPolicyOutput,
            smithy_http::result::SdkError<crate::error::RemoveManagedScalingPolicyError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p> Specifies the ID of the cluster from which the managed scaling policy will be removed.
        /// </p>
        pub fn cluster_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_id(input);
            self
        }
        pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct RemoveTags<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::remove_tags_input::Builder,
    }
    impl<C> RemoveTags<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::RemoveTagsOutput,
            smithy_http::result::SdkError<crate::error::RemoveTagsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon EMR resource identifier from which tags will be removed. This value must be a
        /// cluster identifier.</p>
        pub fn resource_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_id(input);
            self
        }
        pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_id(input);
            self
        }
        /// <p>A list of tag keys to remove from a resource.</p>
        pub fn tag_keys(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.tag_keys(inp);
            self
        }
        pub fn set_tag_keys(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_tag_keys(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct RunJobFlow<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::run_job_flow_input::Builder,
    }
    impl<C> RunJobFlow<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::RunJobFlowOutput,
            smithy_http::result::SdkError<crate::error::RunJobFlowError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the job flow.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(input);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>The location in Amazon S3 to write the log files of the job flow. If a value is not
        /// provided, logs are not created.</p>
        pub fn log_uri(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.log_uri(input);
            self
        }
        pub fn set_log_uri(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_log_uri(input);
            self
        }
        /// <p>The AWS KMS customer master key (CMK) used for encrypting log files. If a value is not
        /// provided, the logs remain encrypted by AES-256. This attribute is only available with
        /// Amazon EMR version 5.30.0 and later, excluding Amazon EMR 6.0.0.</p>
        pub fn log_encryption_kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.log_encryption_kms_key_id(input);
            self
        }
        pub fn set_log_encryption_kms_key_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_log_encryption_kms_key_id(input);
            self
        }
        /// <p>A JSON string for selecting additional features.</p>
        pub fn additional_info(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.additional_info(input);
            self
        }
        pub fn set_additional_info(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_additional_info(input);
            self
        }
        /// <p>Applies only to Amazon EMR AMI versions 3.x and 2.x. For Amazon EMR releases 4.0 and
        /// later, <code>ReleaseLabel</code> is used. To specify a custom AMI, use
        /// <code>CustomAmiID</code>.</p>
        pub fn ami_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.ami_version(input);
            self
        }
        pub fn set_ami_version(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_ami_version(input);
            self
        }
        /// <p>The Amazon EMR release label, which determines the version of open-source application
        /// packages installed on the cluster. Release labels are in the form <code>emr-x.x.x</code>,
        /// where x.x.x is an Amazon EMR release version such as <code>emr-5.14.0</code>. For more
        /// information about Amazon EMR release versions and included application versions and
        /// features, see <a href="https://docs.aws.amazon.com/emr/latest/ReleaseGuide/">https://docs.aws.amazon.com/emr/latest/ReleaseGuide/</a>. The release
        /// label applies only to Amazon EMR releases version 4.0 and later. Earlier versions use
        /// <code>AmiVersion</code>.</p>
        pub fn release_label(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.release_label(input);
            self
        }
        pub fn set_release_label(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_release_label(input);
            self
        }
        /// <p>A specification of the number and type of Amazon EC2 instances.</p>
        pub fn instances(mut self, input: crate::model::JobFlowInstancesConfig) -> Self {
            self.inner = self.inner.instances(input);
            self
        }
        pub fn set_instances(
            mut self,
            input: std::option::Option<crate::model::JobFlowInstancesConfig>,
        ) -> Self {
            self.inner = self.inner.set_instances(input);
            self
        }
        /// <p>A list of steps to run.</p>
        pub fn steps(mut self, inp: impl Into<crate::model::StepConfig>) -> Self {
            self.inner = self.inner.steps(inp);
            self
        }
        pub fn set_steps(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::StepConfig>>,
        ) -> Self {
            self.inner = self.inner.set_steps(input);
            self
        }
        /// <p>A list of bootstrap actions to run before Hadoop starts on the cluster nodes.</p>
        pub fn bootstrap_actions(
            mut self,
            inp: impl Into<crate::model::BootstrapActionConfig>,
        ) -> Self {
            self.inner = self.inner.bootstrap_actions(inp);
            self
        }
        pub fn set_bootstrap_actions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::BootstrapActionConfig>>,
        ) -> Self {
            self.inner = self.inner.set_bootstrap_actions(input);
            self
        }
        /// <note>
        /// <p>For Amazon EMR releases 3.x and 2.x. For Amazon EMR releases 4.x and later, use
        /// Applications.</p>
        /// </note>
        /// <p>A list of strings that indicates third-party software to use. For more information, see
        /// the <a href="https://docs.aws.amazon.com/emr/latest/DeveloperGuide/emr-dg.pdf">Amazon EMR
        /// Developer Guide</a>. Currently supported values are:</p>
        /// <ul>
        /// <li>
        /// <p>"mapr-m3" - launch the job flow using MapR M3 Edition.</p>
        /// </li>
        /// <li>
        /// <p>"mapr-m5" - launch the job flow using MapR M5 Edition.</p>
        /// </li>
        /// </ul>
        pub fn supported_products(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.supported_products(inp);
            self
        }
        pub fn set_supported_products(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_supported_products(input);
            self
        }
        /// <note>
        /// <p>For Amazon EMR releases 3.x and 2.x. For Amazon EMR releases 4.x and later, use
        /// Applications.</p>
        /// </note>
        /// <p>A list of strings that indicates third-party software to use with the job flow that
        /// accepts a user argument list. EMR accepts and forwards the argument list to the
        /// corresponding installation script as bootstrap action arguments. For more information, see
        /// "Launch a Job Flow on the MapR Distribution for Hadoop" in the <a href="https://docs.aws.amazon.com/emr/latest/DeveloperGuide/emr-dg.pdf">Amazon EMR Developer Guide</a>. Supported
        /// values are:</p>
        /// <ul>
        /// <li>
        /// <p>"mapr-m3" - launch the cluster using MapR M3 Edition.</p>
        /// </li>
        /// <li>
        /// <p>"mapr-m5" - launch the cluster using MapR M5 Edition.</p>
        /// </li>
        /// <li>
        /// <p>"mapr" with the user arguments specifying "--edition,m3" or "--edition,m5" -
        /// launch the job flow using MapR M3 or M5 Edition respectively.</p>
        /// </li>
        /// <li>
        /// <p>"mapr-m7" - launch the cluster using MapR M7 Edition.</p>
        /// </li>
        /// <li>
        /// <p>"hunk" - launch the cluster with the Hunk Big Data Analytics Platform.</p>
        /// </li>
        /// <li>
        /// <p>"hue"- launch the cluster with Hue installed.</p>
        /// </li>
        /// <li>
        /// <p>"spark" - launch the cluster with Apache Spark installed.</p>
        /// </li>
        /// <li>
        /// <p>"ganglia" - launch the cluster with the Ganglia Monitoring System
        /// installed.</p>
        /// </li>
        /// </ul>
        pub fn new_supported_products(
            mut self,
            inp: impl Into<crate::model::SupportedProductConfig>,
        ) -> Self {
            self.inner = self.inner.new_supported_products(inp);
            self
        }
        pub fn set_new_supported_products(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SupportedProductConfig>>,
        ) -> Self {
            self.inner = self.inner.set_new_supported_products(input);
            self
        }
        /// <p>Applies to Amazon EMR releases 4.0 and later. A case-insensitive list of applications
        /// for Amazon EMR to install and configure when launching the cluster. For a list of
        /// applications available for each Amazon EMR release version, see the <a href="https://docs.aws.amazon.com/emr/latest/ReleaseGuide/">Amazon EMR Release
        /// Guide</a>.</p>
        pub fn applications(mut self, inp: impl Into<crate::model::Application>) -> Self {
            self.inner = self.inner.applications(inp);
            self
        }
        pub fn set_applications(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Application>>,
        ) -> Self {
            self.inner = self.inner.set_applications(input);
            self
        }
        /// <p>For Amazon EMR releases 4.0 and later. The list of configurations supplied for the EMR
        /// cluster you are creating.</p>
        pub fn configurations(mut self, inp: impl Into<crate::model::Configuration>) -> Self {
            self.inner = self.inner.configurations(inp);
            self
        }
        pub fn set_configurations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Configuration>>,
        ) -> Self {
            self.inner = self.inner.set_configurations(input);
            self
        }
        /// <p>A value of <code>true</code> indicates that all IAM users in the AWS account can perform
        /// cluster actions if they have the proper IAM policy permissions. This is the default. A
        /// value of <code>false</code> indicates that only the IAM user who created the cluster can
        /// perform actions.</p>
        pub fn visible_to_all_users(mut self, input: bool) -> Self {
            self.inner = self.inner.visible_to_all_users(input);
            self
        }
        pub fn set_visible_to_all_users(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_visible_to_all_users(input);
            self
        }
        /// <p>Also called instance profile and EC2 role. An IAM role for an EMR cluster. The EC2
        /// instances of the cluster assume this role. The default role is
        /// <code>EMR_EC2_DefaultRole</code>. In order to use the default role, you must have
        /// already created it using the CLI or console.</p>
        pub fn job_flow_role(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.job_flow_role(input);
            self
        }
        pub fn set_job_flow_role(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_job_flow_role(input);
            self
        }
        /// <p>The IAM role that will be assumed by the Amazon EMR service to access AWS resources on
        /// your behalf.</p>
        pub fn service_role(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.service_role(input);
            self
        }
        pub fn set_service_role(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_service_role(input);
            self
        }
        /// <p>A list of tags to associate with a cluster and propagate to Amazon EC2 instances.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
        /// <p>The name of a security configuration to apply to the cluster.</p>
        pub fn security_configuration(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.security_configuration(input);
            self
        }
        pub fn set_security_configuration(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_security_configuration(input);
            self
        }
        /// <p>An IAM role for automatic scaling policies. The default role is
        /// <code>EMR_AutoScaling_DefaultRole</code>. The IAM role provides permissions that the
        /// automatic scaling feature requires to launch and terminate EC2 instances in an instance
        /// group.</p>
        pub fn auto_scaling_role(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.auto_scaling_role(input);
            self
        }
        pub fn set_auto_scaling_role(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_auto_scaling_role(input);
            self
        }
        /// <p>Specifies the way that individual Amazon EC2 instances terminate when an automatic
        /// scale-in activity occurs or an instance group is resized.
        /// <code>TERMINATE_AT_INSTANCE_HOUR</code> indicates that Amazon EMR terminates nodes at
        /// the instance-hour boundary, regardless of when the request to terminate the instance was
        /// submitted. This option is only available with Amazon EMR 5.1.0 and later and is the default
        /// for clusters created using that version. <code>TERMINATE_AT_TASK_COMPLETION</code>
        /// indicates that Amazon EMR adds nodes to a deny list and drains tasks from nodes before
        /// terminating the Amazon EC2 instances, regardless of the instance-hour boundary. With either
        /// behavior, Amazon EMR removes the least active nodes first and blocks instance termination
        /// if it could lead to HDFS corruption. <code>TERMINATE_AT_TASK_COMPLETION</code> available
        /// only in Amazon EMR version 4.1.0 and later, and is the default for versions of Amazon EMR
        /// earlier than 5.1.0.</p>
        pub fn scale_down_behavior(mut self, input: crate::model::ScaleDownBehavior) -> Self {
            self.inner = self.inner.scale_down_behavior(input);
            self
        }
        pub fn set_scale_down_behavior(
            mut self,
            input: std::option::Option<crate::model::ScaleDownBehavior>,
        ) -> Self {
            self.inner = self.inner.set_scale_down_behavior(input);
            self
        }
        /// <p>Available only in Amazon EMR version 5.7.0 and later. The ID of a custom Amazon
        /// EBS-backed Linux AMI. If specified, Amazon EMR uses this AMI when it launches cluster EC2
        /// instances. For more information about custom AMIs in Amazon EMR, see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-custom-ami.html">Using a Custom
        /// AMI</a> in the <i>Amazon EMR Management Guide</i>. If omitted, the
        /// cluster uses the base Linux AMI for the <code>ReleaseLabel</code> specified. For Amazon EMR
        /// versions 2.x and 3.x, use <code>AmiVersion</code> instead.</p>
        /// <p>For information about creating a custom AMI, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-ebs.html">Creating an Amazon EBS-Backed
        /// Linux AMI</a> in the <i>Amazon Elastic Compute Cloud User Guide for Linux
        /// Instances</i>. For information about finding an AMI ID, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding a Linux
        /// AMI</a>. </p>
        pub fn custom_ami_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.custom_ami_id(input);
            self
        }
        pub fn set_custom_ami_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_custom_ami_id(input);
            self
        }
        /// <p>The size, in GiB, of the Amazon EBS root device volume of the Linux AMI that is used for
        /// each EC2 instance. Available in Amazon EMR version 4.x and later.</p>
        pub fn ebs_root_volume_size(mut self, input: i32) -> Self {
            self.inner = self.inner.ebs_root_volume_size(input);
            self
        }
        pub fn set_ebs_root_volume_size(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_ebs_root_volume_size(input);
            self
        }
        /// <p>Applies only when <code>CustomAmiID</code> is used. Specifies which updates from the
        /// Amazon Linux AMI package repositories to apply automatically when the instance boots using
        /// the AMI. If omitted, the default is <code>SECURITY</code>, which indicates that only
        /// security updates are applied. If <code>NONE</code> is specified, no updates are applied,
        /// and all updates must be applied manually.</p>
        pub fn repo_upgrade_on_boot(mut self, input: crate::model::RepoUpgradeOnBoot) -> Self {
            self.inner = self.inner.repo_upgrade_on_boot(input);
            self
        }
        pub fn set_repo_upgrade_on_boot(
            mut self,
            input: std::option::Option<crate::model::RepoUpgradeOnBoot>,
        ) -> Self {
            self.inner = self.inner.set_repo_upgrade_on_boot(input);
            self
        }
        /// <p>Attributes for Kerberos configuration when Kerberos authentication is enabled using a
        /// security configuration. For more information see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-kerberos.html">Use Kerberos Authentication</a>
        /// in the <i>Amazon EMR Management Guide</i>.</p>
        pub fn kerberos_attributes(mut self, input: crate::model::KerberosAttributes) -> Self {
            self.inner = self.inner.kerberos_attributes(input);
            self
        }
        pub fn set_kerberos_attributes(
            mut self,
            input: std::option::Option<crate::model::KerberosAttributes>,
        ) -> Self {
            self.inner = self.inner.set_kerberos_attributes(input);
            self
        }
        /// <p>Specifies the number of steps that can be executed concurrently. The default value is
        /// <code>1</code>. The maximum value is <code>256</code>.</p>
        pub fn step_concurrency_level(mut self, input: i32) -> Self {
            self.inner = self.inner.step_concurrency_level(input);
            self
        }
        pub fn set_step_concurrency_level(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_step_concurrency_level(input);
            self
        }
        /// <p> The specified managed scaling policy for an Amazon EMR cluster. </p>
        pub fn managed_scaling_policy(mut self, input: crate::model::ManagedScalingPolicy) -> Self {
            self.inner = self.inner.managed_scaling_policy(input);
            self
        }
        pub fn set_managed_scaling_policy(
            mut self,
            input: std::option::Option<crate::model::ManagedScalingPolicy>,
        ) -> Self {
            self.inner = self.inner.set_managed_scaling_policy(input);
            self
        }
        /// <p>The specified placement group configuration for an Amazon EMR cluster.</p>
        pub fn placement_group_configs(
            mut self,
            inp: impl Into<crate::model::PlacementGroupConfig>,
        ) -> Self {
            self.inner = self.inner.placement_group_configs(inp);
            self
        }
        pub fn set_placement_group_configs(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PlacementGroupConfig>>,
        ) -> Self {
            self.inner = self.inner.set_placement_group_configs(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct SetTerminationProtection<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::set_termination_protection_input::Builder,
    }
    impl<C> SetTerminationProtection<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::SetTerminationProtectionOutput,
            smithy_http::result::SdkError<crate::error::SetTerminationProtectionError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p> A list of strings that uniquely identify the clusters to protect. This identifier is
        /// returned by <a>RunJobFlow</a> and can also be obtained from <a>DescribeJobFlows</a> . </p>
        pub fn job_flow_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.job_flow_ids(inp);
            self
        }
        pub fn set_job_flow_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_job_flow_ids(input);
            self
        }
        /// <p>A Boolean that indicates whether to protect the cluster and prevent the Amazon EC2
        /// instances in the cluster from shutting down due to API calls, user intervention, or
        /// job-flow error.</p>
        pub fn termination_protected(mut self, input: bool) -> Self {
            self.inner = self.inner.termination_protected(input);
            self
        }
        pub fn set_termination_protected(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_termination_protected(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct SetVisibleToAllUsers<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::set_visible_to_all_users_input::Builder,
    }
    impl<C> SetVisibleToAllUsers<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::SetVisibleToAllUsersOutput,
            smithy_http::result::SdkError<crate::error::SetVisibleToAllUsersError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the job flow (cluster).</p>
        pub fn job_flow_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.job_flow_ids(inp);
            self
        }
        pub fn set_job_flow_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_job_flow_ids(input);
            self
        }
        /// <p>A value of <code>true</code> indicates that all IAM users in the AWS account can perform
        /// cluster actions if they have the proper IAM policy permissions. This is the default. A
        /// value of <code>false</code> indicates that only the IAM user who created the cluster can
        /// perform actions.</p>
        pub fn visible_to_all_users(mut self, input: bool) -> Self {
            self.inner = self.inner.visible_to_all_users(input);
            self
        }
        pub fn set_visible_to_all_users(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_visible_to_all_users(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct StartNotebookExecution<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::start_notebook_execution_input::Builder,
    }
    impl<C> StartNotebookExecution<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::StartNotebookExecutionOutput,
            smithy_http::result::SdkError<crate::error::StartNotebookExecutionError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the EMR Notebook to use for notebook execution.</p>
        pub fn editor_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.editor_id(input);
            self
        }
        pub fn set_editor_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_editor_id(input);
            self
        }
        /// <p>The path and file name of the notebook file for this execution, relative to the path
        /// specified for the EMR Notebook. For example, if you specify a path of
        /// <code>s3://MyBucket/MyNotebooks</code> when you create an EMR Notebook for a notebook
        /// with an ID of <code>e-ABCDEFGHIJK1234567890ABCD</code> (the <code>EditorID</code> of this
        /// request), and you specify a <code>RelativePath</code> of
        /// <code>my_notebook_executions/notebook_execution.ipynb</code>, the location of the file
        /// for the notebook execution is
        /// <code>s3://MyBucket/MyNotebooks/e-ABCDEFGHIJK1234567890ABCD/my_notebook_executions/notebook_execution.ipynb</code>.</p>
        pub fn relative_path(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.relative_path(input);
            self
        }
        pub fn set_relative_path(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_relative_path(input);
            self
        }
        /// <p>An optional name for the notebook execution.</p>
        pub fn notebook_execution_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.notebook_execution_name(input);
            self
        }
        pub fn set_notebook_execution_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_notebook_execution_name(input);
            self
        }
        /// <p>Input parameters in JSON format passed to the EMR Notebook at runtime for
        /// execution.</p>
        pub fn notebook_params(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.notebook_params(input);
            self
        }
        pub fn set_notebook_params(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_notebook_params(input);
            self
        }
        /// <p>Specifies the execution engine (cluster) that runs the notebook execution.</p>
        pub fn execution_engine(mut self, input: crate::model::ExecutionEngineConfig) -> Self {
            self.inner = self.inner.execution_engine(input);
            self
        }
        pub fn set_execution_engine(
            mut self,
            input: std::option::Option<crate::model::ExecutionEngineConfig>,
        ) -> Self {
            self.inner = self.inner.set_execution_engine(input);
            self
        }
        /// <p>The name or ARN of the IAM role that is used as the service role for Amazon EMR (the EMR
        /// role) for the notebook execution.</p>
        pub fn service_role(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.service_role(input);
            self
        }
        pub fn set_service_role(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_service_role(input);
            self
        }
        /// <p>The unique identifier of the Amazon EC2 security group to associate with the EMR
        /// Notebook for this notebook execution.</p>
        pub fn notebook_instance_security_group_id(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.notebook_instance_security_group_id(input);
            self
        }
        pub fn set_notebook_instance_security_group_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_notebook_instance_security_group_id(input);
            self
        }
        /// <p>A list of tags associated with a notebook execution. Tags are user-defined key-value
        /// pairs that consist of a required key string with a maximum of 128 characters and an
        /// optional value string with a maximum of 256 characters.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct StopNotebookExecution<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::stop_notebook_execution_input::Builder,
    }
    impl<C> StopNotebookExecution<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::StopNotebookExecutionOutput,
            smithy_http::result::SdkError<crate::error::StopNotebookExecutionError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the notebook execution.</p>
        pub fn notebook_execution_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.notebook_execution_id(input);
            self
        }
        pub fn set_notebook_execution_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_notebook_execution_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct TerminateJobFlows<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::terminate_job_flows_input::Builder,
    }
    impl<C> TerminateJobFlows<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::TerminateJobFlowsOutput,
            smithy_http::result::SdkError<crate::error::TerminateJobFlowsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>A list of job flows to be shut down.</p>
        pub fn job_flow_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.job_flow_ids(inp);
            self
        }
        pub fn set_job_flow_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_job_flow_ids(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateStudio<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::update_studio_input::Builder,
    }
    impl<C> UpdateStudio<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateStudioOutput,
            smithy_http::result::SdkError<crate::error::UpdateStudioError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the Amazon EMR Studio to update.</p>
        pub fn studio_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.studio_id(input);
            self
        }
        pub fn set_studio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_studio_id(input);
            self
        }
        /// <p>A descriptive name for the Amazon EMR Studio.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(input);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>A detailed description to assign to the Amazon EMR Studio.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(input);
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(input);
            self
        }
        /// <p>A list of subnet IDs to associate with the Amazon EMR Studio. The list can include new subnet IDs, but must also include all of the subnet IDs previously associated with the Studio. The list order does not matter. A Studio can have a maximum of 5 subnets. The subnets must belong to the same VPC as the Studio. </p>
        pub fn subnet_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.subnet_ids(inp);
            self
        }
        pub fn set_subnet_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_subnet_ids(input);
            self
        }
        /// <p>The Amazon S3 location to back up Workspaces and notebook files for the Amazon EMR Studio.</p>
        pub fn default_s3_location(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.default_s3_location(input);
            self
        }
        pub fn set_default_s3_location(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_default_s3_location(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateStudioSessionMapping<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::update_studio_session_mapping_input::Builder,
    }
    impl<C> UpdateStudioSessionMapping<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateStudioSessionMappingOutput,
            smithy_http::result::SdkError<crate::error::UpdateStudioSessionMappingError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the Amazon EMR Studio.</p>
        pub fn studio_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.studio_id(input);
            self
        }
        pub fn set_studio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_studio_id(input);
            self
        }
        /// <p>The globally unique identifier (GUID) of the user or group. For more information, see
        /// <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserId">UserId</a> and <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-GroupId">GroupId</a> in the <i>AWS SSO Identity Store API Reference</i>.
        /// Either <code>IdentityName</code> or <code>IdentityId</code> must be specified.</p>
        pub fn identity_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identity_id(input);
            self
        }
        pub fn set_identity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_identity_id(input);
            self
        }
        /// <p>The name of the user or group to update. For more information, see <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserName">UserName</a> and <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-DisplayName">DisplayName</a> in the <i>AWS SSO Identity Store API Reference</i>.
        /// Either <code>IdentityName</code> or <code>IdentityId</code> must be specified.</p>
        pub fn identity_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identity_name(input);
            self
        }
        pub fn set_identity_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_identity_name(input);
            self
        }
        /// <p>Specifies whether the identity to update is a user or a group.</p>
        pub fn identity_type(mut self, input: crate::model::IdentityType) -> Self {
            self.inner = self.inner.identity_type(input);
            self
        }
        pub fn set_identity_type(
            mut self,
            input: std::option::Option<crate::model::IdentityType>,
        ) -> Self {
            self.inner = self.inner.set_identity_type(input);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the session policy to associate with the specified
        /// user or group.</p>
        pub fn session_policy_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.session_policy_arn(input);
            self
        }
        pub fn set_session_policy_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_session_policy_arn(input);
            self
        }
    }
}
